"Section"	"section_id"	"req_id"	"full_key"	"manual_search_terms"	"requirement"	"Test Availability"	"class_def"	"method"	"module"	"matched_terms"	"methods_string"	"search_terms"	"file_name"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"Test Level"
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.google.android.cts.settings.PrivacyDeviceOwnerTest"	"isHeadlessSystemUserMode"	"CtsSettingsHostTestCases"	"1: admin"	"([3:/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java]:[admin]:[3]:method_text:[    super.tearDown();    }    /** The case: app is the device owner, has work policy info. */   ]) :|: public void test/*
 *.
 */
package com.google.android.cts.settings;

import com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper;
import com.android.ddmlib.Log.LogLevel;
import com.android.ddmlib.testrunner.RemoteAndroidTestRunner;
import com.android.ddmlib.testrunner.TestResult.TestStatus;
import com.android.tradefed.build.IBuildInfo;
import com.android.tradefed.device.DeviceNotAvailableException;
import com.android.tradefed.device.ITestDevice;
import com.android.tradefed.log.LogUtil.CLog;
import com.android.tradefed.result.CollectingTestListener;
import com.android.tradefed.result.TestDescription;
import com.android.tradefed.result.TestResult;
import com.android.tradefed.result.TestRunResult;
import com.android.tradefed.testtype.DeviceTestCase;
import com.android.tradefed.testtype.IBuildReceiver;
import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;

/** Set of tests for Device Owner use cases. */
public class PrivacyDeviceOwnerTest extends DeviceTestCase implements IBuildReceiver {
    private static final String RUNNER = ""androidx.test.runner.AndroidJUnitRunner"";

    private static final String DEVICE_OWNER_APK = ""CtsSettingsDeviceOwnerApp.apk"";
    private static final String DEVICE_OWNER_PKG = ""com.google.android.cts.deviceowner"";

    private static final String ADMIN_RECEIVER_TEST_CLASS = "".DeviceOwnerTest$BasicAdminReceiver"";
    private static final String CLEAR_DEVICE_OWNER_TEST_CLASS = "".ClearDeviceOwnerTest"";

    // TODO (b/174775905) move to ITestDevice.
    private static final int USER_SYSTEM = 0;

    /**
     * The defined timeout (in milliseconds) is used as a maximum waiting time when expecting the
     * command output from the device. At any time, if the shell command does not output anything
     * for a period longer than defined timeout the Trad"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/settings/src/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.google.android.cts.settings.PrivacyDeviceOwnerTest"	"testNonDeviceOwnerWithoutInfo"	"CtsSettingsHostTestCases"	"1: admin"	"([1:/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java]:[admin]:[1]:method_text:[prop ro.fw.mu.headless_system_user"").trim();        return ""true"".equalsIgnoreCase(result);    }}]) :|: public void testNonDeviceOwnerWithoutInfo() throws Exception {
        if (!mHasFeature) {
            return;
        }
        executeDeviceOwnerTest(""testNonDeviceOwnerWithoutInfo"");
    }

    private void executeDeviceOwnerTest(String testMethodName) throws Exception {
        String testClass = DEVICE_OWNER_PKG + "".DeviceOwnerTest"";
        assertTrue(
                testClass + "" failed."",
                runDeviceTests(DEVICE_OWNER_PKG, testClass, testMethodName));
    }

    protected void installPackage(int userId, String appFileName)
            throws FileNotFoundException, DeviceNotAvailableException {
        CLog.d(""Installing app %s on user %d"", appFileName, userId);
        CompatibilityBuildHelper buildHelper = new CompatibilityBuildHelper(mCtsBuild);
        List<String> extraArgs = new LinkedList<>();
        extraArgs.add(""-t"");
        String result =
                getDevice()
                        .installPackageForUser(
                                buildHelper.getTestFile(appFileName),
                                true,
                                true,
                                userId,
                                extraArgs.toArray(new String[extraArgs.size()]));
        assertNull(""Failed to install "" + appFileName + "" on user "" + userId + "": "" + result,
                result);
    }

    protected boolean runDeviceTests(
            String pkgName, @Nullable String testClassName, @Nullable String testMethodName)
            throws DeviceNotAvailableException {
        if (testClassName != null && testClassName.startsWith(""."")) {
            testClassName = pkgName + testClassName;
        }
        RemoteAndroidTestRunner testRunner =
                new RemoteAndroidTestRunner(pkgName, RUNNER, getDevice().getIDevice());
        testRunner.setMaxTimeToOutputResponse(DEFAULT_SHELL_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);
        testRunner.addInstrumentationArg(
                TEST_TIMEOUT_INST_ARGS_KEY, Long.toStri"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/settings/src/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.google.android.cts.deviceowner.DeviceOwnerTest"	"isTrue"	""	"1: admin"	"([15:/com/google/android/cts/deviceowner/DeviceOwnerTest.java]:[admin]:[15]:method_text:[evice owner and has work policy info, then we should have a Privacy     * entry for it.     */   ]) :|: public void test/*
 *.
 */
package com.google.android.cts.deviceowner;

import static android.server.wm.WindowManagerState.STATE_RESUMED;

import static com.google.common.truth.Truth.assertWithMessage;

import android.app.admin.DeviceAdminReceiver;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.RemoteException;
import android.provider.Settings;
import android.server.wm.WindowManagerStateHelper;
import android.support.test.uiautomator.By;
import android.support.test.uiautomator.UiDevice;
import android.support.test.uiautomator.Until;
import android.test.InstrumentationTestCase;
import android.util.Log;

import androidx.test.InstrumentationRegistry;

import com.android.bedstead.dpmwrapper.DeviceOwnerHelper;
import com.android.bedstead.dpmwrapper.TestAppSystemServiceFactory;
import com.android.compatibility.common.util.enterprise.DeviceAdminReceiverUtils;

/**
 * Class for device-owner based tests.
 *
 * <p>This class handles making sure that the test is the device owner and that it has an active
 * admin registered if necessary. The admin component can be accessed through {@link #getWho()}.
 */
public final class DeviceOwnerTest extends InstrumentationTestCase {

    private static final String TAG = DeviceOwnerTest.class.getSimpleName();

    private static final String WORK_POLICY_INFO_TEXT = ""Your work policy info"";

    public static final int TIMEOUT_MS = 2_000;

    protected Context mContext;
    protected UiDevice mDevice;

    /** Device Admin receiver for DO. */
    public static final class BasicAdminReceiver extends DeviceAdminReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {
            // Ignore intents used by DpmWrapper IPC between current and system users
            if (DeviceOwnerHelper.runManagerMethod(this, context, intent)) return;

            /"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/settings/app/DeviceOwnerApp/src/com/google/android/cts/deviceowner/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.google.android.cts.deviceowner.ClearDeviceOwnerTest"	"testClearDeviceOwner"	""	"1: admin"	"([2:/com/google/android/cts/deviceowner/ClearDeviceOwnerTest.java]:[admin]:[2]:method_text:[0 && mDevicePolicyManager.isAdminActive(cn); i++) {            Thread.sleep(100);        }    }}]) :|: public void testClearDeviceOwner() {}

    private void waitUntilActiveAdminIsRemoved(ComponentName cn) throws InterruptedException {
        for (int i = 0; i < 1000 && mDevicePolicyManager.isAdminActive(cn); i++) {
            Thread.sleep(100);
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/settings/app/DeviceOwnerApp/src/com/google/android/cts/deviceowner/ClearDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.AccountCheckHostSideTest"	"runCleanupNonTestOnlyOwnerAllowingFailure"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/AccountCheckHostSideTest.java]:[admin]:[3]:method_text:[user when     * there is/are different types of accounts added on the target test user.     */   ]) :|: /*
 *.
 */

package com.android.cts.devicepolicy;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.junit.Assume.assumeTrue;

import android.platform.test.annotations.LargeTest;

import com.android.tradefed.log.LogUtil.CLog;

import org.junit.Test;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Set of tests to test setting DO and PO when there is account on the user.
 *
 * <p>For example, setting DO or PO shall fail at DPMS.hasIncompatibleAccountsOrNonAdbNoLock when
 * there was incompatible account on the user.
 */
public class AccountCheckHostSideTest extends BaseDevicePolicyTest {
    private static final String APK_NON_TEST_ONLY = ""CtsAccountCheckNonTestOnlyOwnerApp.apk"";
    private static final String APK_TEST_ONLY = ""CtsAccountCheckTestOnlyOwnerApp.apk"";
    private static final String APK_TEST_ONLY_UPDATE = ""CtsAccountCheckTestOnlyOwnerUpdateApp.apk"";
    private static final String APK_AUTH = ""CtsAccountCheckAuthApp.apk"";

    private static final String PACKAGE_NON_TEST_ONLY =
            ""com.android.cts.devicepolicy.accountcheck.nontestonly"";
    private static final String PACKAGE_TEST_ONLY =
            ""com.android.cts.devicepolicy.accountcheck.testonly"";
    private static final String PACKAGE_AUTH = ""com.android.cts.devicepolicy.accountcheck.auth"";

    private static final String OWNER_TEST_ONLY = PACKAGE_TEST_ONLY
            + ""/com.android.cts.devicepolicy.accountcheck.owner.AdminReceiver"";
    private static final String OWNER_NON_TEST_ONLY = PACKAGE_NON_TEST_ONLY
            + ""/com.android.cts.devicepolicy.accountcheck.owner.AdminReceiver"";

    private static final String TEST_CLASS =
            ""com.android.cts.devicepolicy.accountcheck.AccountCheckTest"";

    private static final String DISALLOW_MODIFY_ACCOUNTS = ""no_modify_accounts"";

    private boolean mDeviceOwnerCanHaveAccounts;
    private boolean mProfileOwnerCanHaveAccounts;
    private int mProfileOwnerUse"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AccountCheckHostSideTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAdminHostSideTestApi29"	"testRunDeviceAdminTest"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/DeviceAdminHostSideTestApi29.java]:[admin]:[3]:method_text:[       runTests(getDeviceAdminApkPackage(), ""DeviceAdminWithEnterprisePoliciesBlockedTest"");    }}]) :|: 
    public void testRunDeviceAdminTest() throws Exception {
        runTests(getDeviceAdminApkPackage(), ""DeviceAdminWithEnterprisePoliciesBlockedTest"");
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAdminHostSideTestApi29.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest"	"removeTestUsers"	"CtsDevicePolicyManagerTestCases"	"2: managed_users admin"	"([10:/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java]:[admin]:[10]:method_text:[getDevice().uninstallPackage(SINGLE_ADMIN_PKG);        super.tearDown();    }    @FlakyTest   ]) :|: /*
 *
 */
package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import android.platform.test.annotations.FlakyTest;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;

import org.junit.Ignore;
import org.junit.Test;

/**
 * This class tests the provisioning flow with an APK that declares a single receiver with
 * BIND_DEVICE_ADMIN permissions, which was a requirement for the app sending the
 * ACTION_PROVISION_MANAGED_PROFILE intent before Android M.
 */
// We need multi user to be supported in order to create a profile of the user owner.
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class ManagedProfileProvisioningSingleAdminTest extends BaseDevicePolicyTest {

    private static final String SINGLE_ADMIN_PKG = ""com.android.cts.devicepolicy.singleadmin"";
    private static final String SINGLE_ADMIN_APP_APK = ""CtsDevicePolicySingleAdminTestApp.apk"";

    private int mProfileUserId;

    @Override
    public void setUp() throws Exception {
        super.setUp();


        removeTestUsers();
        installAppAsUser(SINGLE_ADMIN_APP_APK, mPrimaryUserId);
        mProfileUserId = 0;
    }

    @Override
    public void tearDown() throws Exception {
        if (mProfileUserId != 0) {
            removeUser(mProfileUserId);
        }
        getDevice().uninstallPackage(SINGLE_ADMIN_PKG);

        super.tearDown();
    }

    @FlakyTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest"	"testEXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java]:[admin]:[3]:method_text:[ileProvisioning"", mPrimaryUserId);        mProfileUserId = getFirstManagedProfileUserId();    }}]) :|: 
    @Ignore(""b/183395856 Figure out if it should be removed or converted to a device side test."")
    public void testEXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME() throws Exception {
        runDeviceTestsAsUser(SINGLE_ADMIN_PKG, "".ProvisioningSingleAdminTest"",
                ""testManagedProfileProvisioning"", mPrimaryUserId);

        mProfileUserId = getFirstManagedProfileUserId();
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testIsManagedProfileProvisioningAllowed_deviceOwnerIsSet"	"CtsDevicePolicyManagerTestCases"	"1: managed_users"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[managed_users]:[1]:method_text:[""testIsProvisioningNotAllowedForManagedProfileAction"");    }    @FlakyTest(bugId = 137096267)   ]) :|: 
    @RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
    public void testIsManagedProfileProvisioningAllowed_deviceOwnerIsSet() throws Exception {
        executeDeviceTestMethod("".PreDeviceOwnerTest"",
                ""testIsProvisioningNotAllowedForManagedProfileAction"");
    }

    @FlakyTest(bugId = 137096267)"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_MaxUsers"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[eUser.     * {@link android.app.admin.DevicePolicyManager#getSecondaryUsers} is tested.     */   ]) :|: 
    public void testCreateAndManageUser_MaxUsers() throws Exception {
        assumeCanCreateOneManagedUser();

        int maxUsers = getDevice().getMaxNumberOfUsersSupported();

        // System user is already there, so we can create up to maxUsers - 1.
        int existingUsers = 1;

        // On headless user mode, current user is also there
        if (isHeadlessSystemUserMode()) {
            existingUsers++;
        }

        CLog.d(""testCreateAndManageUser_MaxUsers(): maxUxers=%d, existingUsers=%d"", maxUsers,
                existingUsers);

        for (int i = 0; i < maxUsers - existingUsers; i++) {
            executeCreateAndManageUserTest(""testCreateAndManageUser"");
        }
        // The next createAndManageUser should return USER_OPERATION_ERROR_MAX_USERS.
        executeCreateAndManageUserTest(""testCreateAndManageUser_MaxUsers"");
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser.
     * {@link android.app.admin.DevicePolicyManager#getSecondaryUsers} is tested.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_GetSecondaryUsers"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[d.app.admin.DevicePolicyManager#switchUser} is tested.     */    @FlakyTest(bugId = 131743223)   ]) :|: 
    public void testCreateAndManageUser_GetSecondaryUsers() throws Exception {
        assumeCanCreateOneManagedUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_GetSecondaryUsers"");
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method and switch
     * to the user.
     * {@link android.app.admin.DevicePolicyManager#switchUser} is tested.
     */
    @FlakyTest(bugId = 131743223)"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_SwitchUser"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[ in foreground.     * {@link android.app.admin.DevicePolicyManager#stopUser} is tested.     */   ]) :|: 
    public void testCreateAndManageUser_SwitchUser() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_SwitchUser"");
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method and switch
     * to the user to test stop user while target user is in foreground.
     * {@link android.app.admin.DevicePolicyManager#stopUser} is tested.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_CannotStopCurrentUser"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[r.     * {@link android.app.admin.DevicePolicyManager#startUserInBackground} is tested.     */   ]) :|: 
    public void testCreateAndManageUser_CannotStopCurrentUser() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_CannotStopCurrentUser"");
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method and start
     * the user in background to test APIs on that user.
     * {@link android.app.admin.DevicePolicyManager#startUserInBackground} is tested.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_StartInBackground"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[r.     * {@link android.app.admin.DevicePolicyManager#startUserInBackground} is tested.     */   ]) :|: 
    public void testCreateAndManageUser_StartInBackground() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_StartInBackground"");
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method and start
     * the user in background to test APIs on that user.
     * {@link android.app.admin.DevicePolicyManager#startUserInBackground} is tested.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_StartInBackground_MaxRunningUsers"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[s on that user.     * {@link android.app.admin.DevicePolicyManager#stopUser} is tested.     */   ]) :|: 
    public void testCreateAndManageUser_StartInBackground_MaxRunningUsers() throws Exception {
        assumeCanStartNewUser();

        int maxUsers = getDevice().getMaxNumberOfUsersSupported();
        int maxRunningUsers = getDevice().getMaxNumberOfRunningUsersSupported();

        // Primary user is already running, so we can create and start up to minimum of above - 1.
        int usersToCreateAndStart = Math.min(maxUsers, maxRunningUsers) - 1;

        // On headless user mode, system user is also running
        if (isHeadlessSystemUserMode()) {
            usersToCreateAndStart--;
        }

        CLog.d(""testCreateAndManageUser_StartInBackground_MaxRunningUsers(): maxUxers=%d, ""
                + ""maxRunningUsers=%d, usersToCreateAndStart=%d"", maxUsers, maxRunningUsers,
                usersToCreateAndStart);
        for (int i = 0; i < usersToCreateAndStart; i++) {
            executeCreateAndManageUserTest(""testCreateAndManageUser_StartInBackground"");
        }

        if (maxUsers > maxRunningUsers) {
            // The next startUserInBackground should return USER_OPERATION_ERROR_MAX_RUNNING_USERS.
            executeCreateAndManageUserTest(
                    ""testCreateAndManageUser_StartInBackground_MaxRunningUsers"");
        } else {
            // The next createAndManageUser should return USER_OPERATION_ERROR_MAX_USERS.
            executeCreateAndManageUserTest(""testCreateAndManageUser_MaxUsers"");
        }
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method and start
     * the user in background to test APIs on that user.
     * {@link android.app.admin.DevicePolicyManager#stopUser} is tested.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_StopEphemeralUser_DisallowRemoveUser"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[on that user.     * {@link android.app.admin.DevicePolicyManager#logoutUser} is tested.     */   ]) :|: 
    public void testCreateAndManageUser_StopEphemeralUser_DisallowRemoveUser() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(
                ""testCreateAndManageUser_StopEphemeralUser_DisallowRemoveUser"");
        assertEquals(0, getUsersCreatedByTests().size());
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method, affiliate
     * the user and start the user in background to test APIs on that user.
     * {@link android.app.admin.DevicePolicyManager#logoutUser} is tested.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_LogoutUser"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[t user.     * {@link android.app.admin.DevicePolicyManager#isAffiliatedUser} is tested.     */   ]) :|: 
    public void testCreateAndManageUser_LogoutUser() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_LogoutUser"");
        assertNewUserStopped();
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method, affiliate
     * the user and start the user in background to test APIs on that user.
     * {@link android.app.admin.DevicePolicyManager#isAffiliatedUser} is tested.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_Affiliated"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[at user.     * {@link android.app.admin.DevicePolicyManager#isEphemeralUser} is tested.     */   ]) :|: 
    public void testCreateAndManageUser_Affiliated() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_Affiliated"");
    }

    /**
     * Test creating an ephemeral user using the DevicePolicyManager's createAndManageUser method,
     * affiliate the user and start the user in background to test APIs on that user.
     * {@link android.app.admin.DevicePolicyManager#isEphemeralUser} is tested.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_Ephemeral"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[* {@link android.app.admin.DevicePolicyManager#LEAVE_ALL_SYSTEM_APPS_ENABLED} is tested.     */   ]) :|: 
    public void testCreateAndManageUser_Ephemeral() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_Ephemeral"");

        List<Integer> newUsers = getUsersCreatedByTests();
        assertEquals(1, newUsers.size());
        int newUserId = newUsers.get(0);

        // Get the flags of the new user and check the user is ephemeral.
        int flags = getUserFlags(newUserId);
        assertEquals(""Ephemeral flag must be set"", FLAG_EPHEMERAL, flags & FLAG_EPHEMERAL);
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method, affiliate
     * the user and start the user in background to test APIs on that user.
     * {@link android.app.admin.DevicePolicyManager#LEAVE_ALL_SYSTEM_APPS_ENABLED} is tested.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetSystemUpdatePolicyLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[4]:method_text:[      .setInt(TYPE_NONE)                    .build());    }    @FlakyTest(bugId = 127101449)   ]) :|: 
    @Ignore(""b/145932189"")
    public void testSetSystemUpdatePolicyLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".SystemUpdatePolicyTest"", ""testSetAutomaticInstallPolicy"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_SYSTEM_UPDATE_POLICY_VALUE)
                    .setAdminPackageName(DEVICE_OWNER_PKG)
                    .setInt(TYPE_INSTALL_AUTOMATIC)
                    .build());
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".SystemUpdatePolicyTest"", ""testSetWindowedInstallPolicy"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_SYSTEM_UPDATE_POLICY_VALUE)
                    .setAdminPackageName(DEVICE_OWNER_PKG)
                    .setInt(TYPE_INSTALL_WINDOWED)
                    .build());
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".SystemUpdatePolicyTest"", ""testSetPostponeInstallPolicy"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_SYSTEM_UPDATE_POLICY_VALUE)
                    .setAdminPackageName(DEVICE_OWNER_PKG)
                    .setInt(TYPE_POSTPONE)
                    .build());
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".SystemUpdatePolicyTest"", ""testSetEmptytInstallPolicy"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_SYSTEM_UPDATE_POLICY_VALUE)
                    .setAdminPackageName(DEVICE_OWNER_PKG)
                    .setInt(TYPE_NONE)
                    .build());
    }

    @FlakyTest(bugId = 127101449)"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCannotSetDeviceOwnerAgain"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([6:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[6]:method_text:[D_PROFILE_PKG);        }    }    // Execute HardwarePropertiesManagerTest as a device owner.   ]) :|: 
    public void testCannotSetDeviceOwnerAgain() throws Exception {
        // verify that we can't set the same admin receiver as device owner again
        assertFalse(setDeviceOwner(
                DEVICE_OWNER_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mPrimaryUserId,
                /*expectFailure*/ true));

        // verify that we can't set a different admin receiver as device owner
        try {
            installAppAsUser(MANAGED_PROFILE_APK, mPrimaryUserId);
            assertFalse(setDeviceOwner(
                    MANAGED_PROFILE_PKG + ""/"" + MANAGED_PROFILE_ADMIN, mPrimaryUserId,
                    /*expectFailure*/ true));
        } finally {
            // Remove the device owner in case the test fails.
            removeAdmin(MANAGED_PROFILE_PKG + ""/"" + MANAGED_PROFILE_ADMIN, mPrimaryUserId);
            getDevice().uninstallPackage(MANAGED_PROFILE_PKG);
        }
    }

    // Execute HardwarePropertiesManagerTest as a device owner."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testIsManagedDeviceProvisioningAllowed"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[   * Can provision Managed Profile when DO is set by default if they are the same admin.     */   ]) :|: 
    public void testIsManagedDeviceProvisioningAllowed() throws Exception {
        // This case runs when DO is provisioned
        // mHasFeature == true and provisioned, can't provision DO again.
        executeDeviceTestMethod("".PreDeviceOwnerTest"", ""testIsProvisioningAllowedFalse"");
    }

    /**
     * Can provision Managed Profile when DO is set by default if they are the same admin.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testAdminActionBookkeeping"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([14:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[14]:method_text:[_VALUE)                .setAdminPackageName(DEVICE_OWNER_PKG)                .build());    }   ]) :|: 
    public void testAdminActionBookkeeping() throws Exception {
        if (isHeadlessSystemUserMode()) {
            // TODO(b/176993670):ALLOW_TEST_API_ACCESS is needed by DevicePolicyManagerWrapper to
            // access test apis
            allowTestApiAccess(DEVICE_OWNER_PKG);
            // This test has to run as system user since the test will get KeyStore instance for
            // current user.
            executeDeviceOwnerTestMethod("".AdminActionBookkeepingTest"",
                    ""testGetPolicyInstalledCaCerts"");
        } else {
            // This test will be skipped for headless system user mode since headless system user
            // does not have IME.
            executeDeviceTestMethod("".AdminActionBookkeepingTest"",
                    ""testIsDefaultInputMethodSet"");
            executeDeviceTestMethod("".AdminActionBookkeepingTest"",
                    ""testGetPolicyInstalledCaCerts"");
        }

        executeDeviceTestMethod("".AdminActionBookkeepingTest"",
                ""testRetrieveSecurityLogs"");
        executeDeviceTestMethod("".AdminActionBookkeepingTest"",
                ""testRequestBugreport"");
        executeDeviceTestMethod("".AdminActionBookkeepingTest"",
                ""testGetLastNetworkLogRetrievalTime"");
        executeDeviceTestMethod("".AdminActionBookkeepingTest"",
                ""testDeviceOwnerOrganizationName"");
        executeDeviceTestMethod("".AdminActionBookkeepingTest"",
                ""testIsDeviceManaged"");

        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".AdminActionBookkeepingTest"", ""testRetrieveSecurityLogs"");
        }, new DevicePolicyEventWrapper.Builder(EventId.RETRIEVE_SECURITY_LOGS_VALUE)
                .setAdminPackageName(DEVICE_OWNER_PKG)
                .build(),
        new DevicePolicyEventWrapper.Builder(EventId.RETRIEVE_PRE_REBOOT_SECURITY_LOGS_VALUE)
                .setAdminPackageName(DEVICE_OWNER_PKG)
                .build());
        assertMetricsLog"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testDisallowFactoryReset"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([26:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[26]:method_text:[nabled if the backup feature is not supported.    @RequiresAdditionalFeatures({FEATURE_BACKUP})   ]) :|: 
    public void testDisallowFactoryReset() throws Exception {
        int adminVersion = 24;
        // NOTE: the restriction must be set on primary user as it will launch SetPolicyActivity,
        // but the admin must be installed on USER_SYSTEM, otherwise wipeData() on headless system
        // user mode would wipe the current user (instead of factory resetting the device)
        changeUserRestrictionOrFail(""no_factory_reset"", true, mPrimaryUserId, DEVICE_OWNER_PKG);
        int adminUserId = USER_SYSTEM;

        String deviceAdminPkg = DeviceAdminHelper.getDeviceAdminApkPackage(adminVersion);
        String deviceAdminReceiver = DeviceAdminHelper.getAdminReceiverComponent(adminVersion);
        try {
            installAppAsUser(DeviceAdminHelper.getDeviceAdminApkFileName(adminVersion),
                    adminUserId);
            setDeviceAdmin(deviceAdminReceiver, adminUserId);
            runDeviceTestsAsUser(
                    deviceAdminPkg,
                    DeviceAdminHelper.getDeviceAdminJavaPackage() + "".WipeDataTest"",
                    ""testWipeDataThrowsSecurityException"", adminUserId);
        } finally {
            removeAdmin(deviceAdminReceiver, adminUserId);
            getDevice().uninstallPackage(deviceAdminPkg);
        }
    }

    // The backup service cannot be enabled if the backup feature is not supported.
    @RequiresAdditionalFeatures({FEATURE_BACKUP})"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testPackageInstallCache"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[2]:method_text:[ommand);            getDevice().uninstallPackage(TEST_APP_PKG);        }    }    @LargeTest   ]) :|: 
    public void testPackageInstallCache() throws Exception {
        CompatibilityBuildHelper buildHelper = new CompatibilityBuildHelper(getBuild());
        final File apk = buildHelper.getTestFile(TEST_APP_APK);
        try {
            getDevice().uninstallPackage(TEST_APP_PKG);
            assertTrue(getDevice().pushFile(apk, TEST_APP_LOCATION + apk.getName()));

            // Install the package in primary user
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testPackageInstall"", mPrimaryUserId);
            assertMetricsLogged(getDevice(), () -> {
                runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                        ""testKeepPackageCache"", mPrimaryUserId);
            }, new DevicePolicyEventWrapper.Builder(EventId.SET_KEEP_UNINSTALLED_PACKAGES_VALUE)
                    .setAdminPackageName(DEVICE_OWNER_PKG)
                    .setBoolean(false)
                    .setStrings(TEST_APP_PKG)
                    .build());

            // Remove the package in primary user
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testPackageUninstall"", mPrimaryUserId);

            assertMetricsLogged(getDevice(), () -> {
                // Should be able to enable the cached package in primary user
                runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                        ""testInstallExistingPackage"", mPrimaryUserId);
            }, new DevicePolicyEventWrapper.Builder(EventId.INSTALL_EXISTING_PACKAGE_VALUE)
                    .setAdminPackageName(DEVICE_OWNER_PKG)
                    .setBoolean(false)
                    .setStrings(TEST_APP_PKG)
                    .build());
        } finally {
            String command = ""rm "" + TEST_APP_LOCATION + apk.getName();
            getDevice().executeShellCommand(command);
            getDevice().uninstallPackage(TEST_APP_PKG);
        }
    }

    @LargeTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetKeyguardDisabledLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[_VALUE)                .setAdminPackageName(DEVICE_OWNER_PKG)                .build());    }   ]) :|: 
    public void testSetKeyguardDisabledLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".DevicePolicyLoggingTest"", ""testSetKeyguardDisabledLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_KEYGUARD_DISABLED_VALUE)
                .setAdminPackageName(DEVICE_OWNER_PKG)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetStatusBarDisabledLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[2]:method_text:[me(DEVICE_OWNER_PKG)                    .setBoolean(true)                    .build());    }   ]) :|: 
    public void testSetStatusBarDisabledLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".DevicePolicyLoggingTest"", ""testSetStatusBarDisabledLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_STATUS_BAR_DISABLED_VALUE)
                    .setAdminPackageName(DEVICE_OWNER_PKG)
                    .setBoolean(true)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_STATUS_BAR_DISABLED_VALUE)
                    .setAdminPackageName(DEVICE_OWNER_PKG)
                    .setBoolean(true)
                    .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetGlobalSettingLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[4]:method_text:[     .setStrings(GLOBAL_SETTING_USB_MASS_STORAGE_ENABLED, ""1"")                .build());    }   ]) :|: 
    public void testSetGlobalSettingLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".DevicePolicyLoggingTest"", ""testSetGlobalSettingLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_GLOBAL_SETTING_VALUE)
                .setAdminPackageName(DEVICE_OWNER_PKG)
                .setStrings(GLOBAL_SETTING_AUTO_TIME, ""1"")
                .build(),
        new DevicePolicyEventWrapper.Builder(EventId.SET_GLOBAL_SETTING_VALUE)
                .setAdminPackageName(DEVICE_OWNER_PKG)
                .setStrings(GLOBAL_SETTING_AUTO_TIME_ZONE, ""1"")
                .build(),
        new DevicePolicyEventWrapper.Builder(EventId.SET_GLOBAL_SETTING_VALUE)
                .setAdminPackageName(DEVICE_OWNER_PKG)
                .setStrings(GLOBAL_SETTING_DATA_ROAMING, ""1"")
                .build(),
        new DevicePolicyEventWrapper.Builder(EventId.SET_GLOBAL_SETTING_VALUE)
                .setAdminPackageName(DEVICE_OWNER_PKG)
                .setStrings(GLOBAL_SETTING_USB_MASS_STORAGE_ENABLED, ""1"")
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetUserControlDisabledPackages_singleUser_verifyMetricIsLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[           getDevice().uninstallPackageForUser(SIMPLE_APP_APK, mPrimaryUserId);        }    }   ]) :|: 
    public void testSetUserControlDisabledPackages_singleUser_verifyMetricIsLogged()
            throws Exception {
        final List<Integer> otherUserIds = new ArrayList<>();
        try {
            setupDeviceForSetUserControlDisabledPackagesTesting(otherUserIds);

            // Set the package under test as a protected package.
            assertMetricsLogged(getDevice(),
                    () -> executeDeviceTestMethod("".UserControlDisabledPackagesTest"",
                            ""testSetUserControlDisabledPackages""),
                    new DevicePolicyEventWrapper.Builder(
                            EventId.SET_USER_CONTROL_DISABLED_PACKAGES_VALUE)
                            .setAdminPackageName(DEVICE_OWNER_PKG)
                            .setStrings(new String[] {SIMPLE_APP_PKG})
                            .build());
        } finally {
            cleanupProtectedPackage(otherUserIds);
            getDevice().uninstallPackageForUser(SIMPLE_APP_APK, mPrimaryUserId);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetUserControlDisabledPackages_multiUser_verifyMetricIsLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[ninstallPackageForUser(SIMPLE_APP_APK, userId);            removeUser(userId);        }    }   ]) :|: 
    public void testSetUserControlDisabledPackages_multiUser_verifyMetricIsLogged()
            throws Exception {
        assumeCanCreateAdditionalUsers(1);
        final int userId = createUser();
        final List<Integer> otherUserIds = new ArrayList<>();
        otherUserIds.add(userId);
        try {
            setupDeviceForSetUserControlDisabledPackagesTesting(otherUserIds);

            // Set the package under test as a protected package.
            assertMetricsLogged(getDevice(),
                    () -> executeDeviceTestMethod("".UserControlDisabledPackagesTest"",
                            ""testSetUserControlDisabledPackages""),
                    new DevicePolicyEventWrapper.Builder(
                            EventId.SET_USER_CONTROL_DISABLED_PACKAGES_VALUE)
                            .setAdminPackageName(DEVICE_OWNER_PKG)
                            .setStrings(new String[] {SIMPLE_APP_PKG})
                            .build());
        } finally {
            cleanupProtectedPackage(otherUserIds);
            getDevice().uninstallPackageForUser(SIMPLE_APP_APK, mPrimaryUserId);
            getDevice().uninstallPackageForUser(SIMPLE_APP_APK, userId);
            removeUser(userId);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testListForegroundAffiliatedUsers_notDeviceOwner"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[admin]:[1]:method_text:[PreDeviceOwnerTest"",                ""testListForegroundAffiliatedUsers_notDeviceOwner"");    }   ]) :|: 
    public void testListForegroundAffiliatedUsers_notDeviceOwner() throws Exception {
        if (!removeAdmin(DEVICE_OWNER_COMPONENT, mDeviceOwnerUserId)) {
            fail(""Failed to remove device owner for user "" + mDeviceOwnerUserId);
        }

        executeDeviceTestMethod("".PreDeviceOwnerTest"",
                ""testListForegroundAffiliatedUsers_notDeviceOwner"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTestApi25"	"testPermissionGrantPreMApp"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java]:[admin]:[1]:method_text:[DeviceTestMethod("".PermissionsTest"", ""testPermissionGrantState_preMApp_preQDeviceAdmin"");    }   ]) :|: 
    public void testPermissionGrantPreMApp() throws Exception {
        installAppAsUser(SIMPLE_PRE_M_APP_APK, mUserId);
        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionGrantState_preMApp_preQDeviceAdmin"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTestApi25"	"testResetPasswordDeprecated"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java]:[admin]:[2]:method_text:[       + TEST_APP_PKG + "".SimpleActivity"";        getDevice().executeShellCommand(command);    }}]) :|: 
    public void testResetPasswordDeprecated() throws Exception {
        assumeHasSecureLockScreenFeature();

        executeDeviceTestMethod("".ResetPasswordTest"", ""testResetPasswordDeprecated"");
    }

    protected void executeDeviceTestClass(String className) throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, mUserId);
    }

    protected void executeDeviceTestMethod(String className, String testName) throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, testName, mUserId);
    }

    /**
     * Start SimpleActivity synchronously in a particular user.
     */
    protected void startSimpleActivityAsUser(int userId) throws Exception {
        installAppAsUser(TEST_APP_APK, userId);
        String command = ""am start -W --user "" + userId + "" "" + TEST_APP_PKG + ""/""
                + TEST_APP_PKG + "".SimpleActivity"";
        getDevice().executeShellCommand(command);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"removeTestUsers"	"CtsDevicePolicyManagerTestCases"	"2: managed_users admin"	"([5:/com/android/cts/devicepolicy/LauncherAppsProfileTest.java]:[admin]:[5]:method_text:[().uninstallPackage(LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK);        super.tearDown();    }   ]) :|: /*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import android.platform.test.annotations.FlakyTest;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;
import com.android.tradefed.log.LogUtil.CLog;

import org.junit.Test;

import java.util.Collections;

/**
 * Set of tests for LauncherApps with managed profiles.
 */
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class LauncherAppsProfileTest extends BaseLauncherAppsTest {

    private static final String MANAGED_PROFILE_PKG = ""com.android.cts.managedprofile"";
    private static final String MANAGED_PROFILE_APK = ""CtsManagedProfileApp.apk"";
    private static final String ADMIN_RECEIVER_TEST_CLASS =
            MANAGED_PROFILE_PKG + "".BaseManagedProfileTest$BasicAdminReceiver"";
    private static final String LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK =
            ""CtsHasLauncherActivityApp.apk"";

    private int mProfileUserId;
    private int mParentUserId;
    private String mProfileSerialNumber;
    private String mMainUserSerialNumber;

    @Override
    public void setUp() throws Exception {
        super.setUp();

        removeTestUsers();
        // Create a managed profile
        mParentUserId = mPrimaryUserId;
        mProfileUserId = createManagedProfile(mParentUserId);
        installAppAsUser(MANAGED_PROFILE_APK, mProfileUserId);
        setProfileOwnerOrFail(MANAGED_PROFILE_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,
                mProfileUserId);
        mProfileSerialNumber = Integer.toString(getUserSerialNumber(mProfileUserId));
        mMainUserSerialNumber = Integer.toString(getUserSerialNumber(mParentUserId));
        startUserAndWait(mProfileUserId);

        // Install test APK on primary user and the managed profile.
        installTestApps(USER_ALL);
    }

    @Override
    public void tearDown() throws Exception {
        removeUser(mProf"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAdminHostSideTestApi23"	"testAdminWithNoProtection"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([6:/com/android/cts/devicepolicy/DeviceAdminHostSideTestApi23.java]:[admin]:[6]:method_text:[     runTests(getDeviceAdminApkPackage(), ""ClearDeviceAdminWithNoProtectionTest"");        }    }}]) :|: 
    public void testAdminWithNoProtection() throws Exception {
        installAppAsUser(getDeviceAdminApkFileName(), mUserId);
        try {
            setDeviceAdmin(getUnprotectedAdminReceiverComponent(), mUserId);
        } finally {
            runTests(getDeviceAdminApkPackage(), ""ClearDeviceAdminWithNoProtectionTest"");
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAdminHostSideTestApi23.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAdminHostSideTestApi24"	"testAdminWithNoProtection"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([5:/com/android/cts/devicepolicy/DeviceAdminHostSideTestApi24.java]:[admin]:[5]:method_text:[(), mUserId,                ""must be protected with android.permission.BIND_DEVICE_ADMIN"");    }}]) :|: 
    public void testAdminWithNoProtection() throws Exception {
        installAppAsUser(getDeviceAdminApkFileName(), mUserId);
        setDeviceAdminExpectingFailure(getUnprotectedAdminReceiverComponent(), mUserId,
                ""must be protected with android.permission.BIND_DEVICE_ADMIN"");
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAdminHostSideTestApi24.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileContactsTest"	"testManagedContactsPolicies"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/ManagedProfileContactsTest.java]:[admin]:[4]:method_text:[seDirectories_canNotAccessManagedDirectories"",                    mParentUserId);        }    }}]) :|: 
    public void testManagedContactsPolicies() throws Exception {
        runManagedContactsTest(() -> {
            ContactsTestSet contactsTestSet = new ContactsTestSet(ManagedProfileContactsTest.this,
                    MANAGED_PROFILE_PKG, mParentUserId, mProfileUserId);
            try {
                contactsTestSet.setCallerIdEnabled(true);
                contactsTestSet.setContactsSearchEnabled(false);
                contactsTestSet.checkIfCanLookupEnterpriseContacts(true);
                contactsTestSet.checkIfCanFilterEnterpriseContacts(false);
                contactsTestSet.checkIfCanFilterSelfContacts();
                contactsTestSet.setCallerIdEnabled(false);
                contactsTestSet.setContactsSearchEnabled(true);
                contactsTestSet.checkIfCanLookupEnterpriseContacts(false);
                contactsTestSet.checkIfCanFilterEnterpriseContacts(true);
                contactsTestSet.checkIfCanFilterSelfContacts();
                contactsTestSet.setCallerIdEnabled(false);
                contactsTestSet.setContactsSearchEnabled(false);
                contactsTestSet.checkIfCanLookupEnterpriseContacts(false);
                contactsTestSet.checkIfCanFilterEnterpriseContacts(false);
                contactsTestSet.checkIfCanFilterSelfContacts();
                contactsTestSet.checkIfNoEnterpriseDirectoryFound();
                assertMetricsLogged(getDevice(), () -> {
                    contactsTestSet.setCallerIdEnabled(true);
                    contactsTestSet.setCallerIdEnabled(false);
                }, new DevicePolicyEventWrapper
                        .Builder(EventId.SET_CROSS_PROFILE_CALLER_ID_DISABLED_VALUE)
                        .setAdminPackageName(MANAGED_PROFILE_PKG)
                        .setBoolean(false)
                        .build(),
                new DevicePolicyEventWrapper
                        .Builder(EventId.SET_CROSS_PROFILE_CALLER_ID_DISABLED_VALUE)
                        .setAdminPacka"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileContactsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"removeTestUsers"	"CtsDevicePolicyManagerTestCases"	"2: managed_users admin"	"([14:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[14]:method_text:[                           mUserId, DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS));    }   ]) :|: /*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;
import static com.android.cts.devicepolicy.DeviceAndProfileOwnerTest.DEVICE_ADMIN_COMPONENT_FLATTENED;
import static com.android.cts.devicepolicy.metrics.DevicePolicyEventLogVerifier.assertMetricsLogged;

import static com.google.common.truth.Truth.assertThat;

import static org.junit.Assert.assertTrue;

import android.platform.test.annotations.FlakyTest;
import android.platform.test.annotations.LargeTest;
import android.stats.devicepolicy.EventId;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;
import com.android.cts.devicepolicy.metrics.DevicePolicyEventWrapper;
import com.android.tradefed.device.DeviceNotAvailableException;

import org.junit.Ignore;
import org.junit.Test;

/**
 * Tests for organization-owned Profile Owner.
 */
// We need managed users to be supported in order to create a profile of the user owner.
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class OrgOwnedProfileOwnerTest extends BaseDevicePolicyTest {
    private static final String DEVICE_ADMIN_PKG = DeviceAndProfileOwnerTest.DEVICE_ADMIN_PKG;
    private static final String DEVICE_ADMIN_APK = DeviceAndProfileOwnerTest.DEVICE_ADMIN_APK;
    private static final String CERT_INSTALLER_PKG = DeviceAndProfileOwnerTest.CERT_INSTALLER_PKG;
    private static final String CERT_INSTALLER_APK = DeviceAndProfileOwnerTest.CERT_INSTALLER_APK;
    private static final String DELEGATE_APP_PKG = DeviceAndProfileOwnerTest.DELEGATE_APP_PKG;
    private static final String DELEGATE_APP_APK = DeviceAndProfileOwnerTest.DELEGATE_APP_APK;
    private static final String LOG_TAG_PROFILE_OWNER = ""profile-owner"";

    private static final String ADMIN_RECEIVER_TEST_CLASS =
            DeviceAndProfileOwnerTest.ADMIN_RECEIVER_TEST_CLASS;
    private static final String ACTION_WIPE_DATA =
            ""com.android."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testCanRelinquishControlOverDevice"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([7:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[7]:method_text:[D, mPrimaryUserId);            getDevice().uninstallPackage(DEVICE_ADMIN_PKG);        }    }   ]) :|: 
    public void testCanRelinquishControlOverDevice() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".LockScreenInfoTest"", ""testSetAndGetLockInfo"",
                mUserId);

        removeOrgOwnedProfile();
        assertHasNoUser(mUserId);

        try {
            installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
            assertTrue(setDeviceOwner(DEVICE_ADMIN_COMPONENT_FLATTENED,
                    mPrimaryUserId, /*expectFailure*/false));
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".LockScreenInfoTest"", ""testLockInfoIsNull"",
                    mPrimaryUserId);
        } finally {
            removeAdmin(DEVICE_ADMIN_COMPONENT_FLATTENED, mPrimaryUserId);
            getDevice().uninstallPackage(DEVICE_ADMIN_PKG);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testLockScreenInfo"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[ception {        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".LockScreenInfoTest"", mUserId);    }   ]) :|: 
    public void testLockScreenInfo() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".LockScreenInfoTest"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testProfileOwnerCanGetDeviceIdentifiers"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[Test"",                ""testProfileOwnerCanGetDeviceIdentifiersWithPermission"", mUserId);    }   ]) :|: 
    public void testProfileOwnerCanGetDeviceIdentifiers() throws Exception {
        // The Profile Owner should have access to all device identifiers.
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DeviceIdentifiersTest"",
                ""testProfileOwnerCanGetDeviceIdentifiersWithPermission"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testDevicePolicyManagerParentSupport"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[      runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".OrgOwnedProfileOwnerParentTest"", mUserId);    }   ]) :|: 
    public void testDevicePolicyManagerParentSupport() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".OrgOwnedProfileOwnerParentTest"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testUserRestrictionSetOnParentLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([5:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[5]:method_text:[tStrings(DISALLOW_CONFIG_LOCATION, CALLED_FROM_PARENT)                        .build());    }   ]) :|: 
    public void testUserRestrictionSetOnParentLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DevicePolicyLoggingParentTest"",
                    ""testUserRestrictionLogged"", mUserId);
                }, new DevicePolicyEventWrapper.Builder(EventId.ADD_USER_RESTRICTION_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setStrings(DISALLOW_CONFIG_LOCATION, CALLED_FROM_PARENT)
                        .build(),
                new DevicePolicyEventWrapper.Builder(EventId.REMOVE_USER_RESTRICTION_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setStrings(DISALLOW_CONFIG_LOCATION, CALLED_FROM_PARENT)
                        .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testUserRestrictionsSetOnParentAreNotPersisted"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[4]:method_text:[              ""testUserRestrictionDisallowConfigDateTimeIsNotPersisted"", mPrimaryUserId);    }   ]) :|: 
    public void testUserRestrictionsSetOnParentAreNotPersisted() throws Exception {
        assumeCanCreateAdditionalUsers(1);

        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                ""testAddUserRestrictionDisallowConfigDateTime_onParent"", mUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                ""testHasUserRestrictionDisallowConfigDateTime"", mPrimaryUserId);
        removeOrgOwnedProfile();
        assertHasNoUser(mUserId);

        // User restrictions are not persist after organization-owned profile owner is removed
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                ""testUserRestrictionDisallowConfigDateTimeIsNotPersisted"", mPrimaryUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPerProfileUserRestrictionOnParent"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[trictionsParentTest"",                ""testPerProfileUserRestriction_onParent"", mUserId);    }   ]) :|: 
    public void testPerProfileUserRestrictionOnParent() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                ""testPerProfileUserRestriction_onParent"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPerDeviceUserRestrictionOnParent"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[strictionsParentTest"",                ""testPerDeviceUserRestriction_onParent"", mUserId);    }   ]) :|: 
    public void testPerDeviceUserRestrictionOnParent() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                ""testPerDeviceUserRestriction_onParent"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testCameraDisabledOnParentIsEnforced"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([5:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[5]:method_text:[trictionsParentTest"",                    ""testCanOpenCamera"", mPrimaryUserId);        }    }   ]) :|: 
    public void testCameraDisabledOnParentIsEnforced() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        try {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                    ""testAddUserRestrictionCameraDisabled_onParent"", mUserId);
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                    ""testCannotOpenCamera"", mPrimaryUserId);
        } finally {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                    ""testRemoveUserRestrictionCameraEnabled_onParent"", mUserId);
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                    ""testCanOpenCamera"", mPrimaryUserId);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testCameraDisabledOnParentLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([5:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[5]:method_text:[                       .setStrings(CALLED_FROM_PARENT)                        .build());    }   ]) :|: 
    public void testCameraDisabledOnParentLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
                    runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DevicePolicyLoggingParentTest"",
                            ""testCameraDisabledLogged"", mUserId);
                }, new DevicePolicyEventWrapper.Builder(EventId.SET_CAMERA_DISABLED_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setBoolean(true)
                        .setStrings(CALLED_FROM_PARENT)
                        .build(),
                new DevicePolicyEventWrapper.Builder(EventId.SET_CAMERA_DISABLED_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setBoolean(false)
                        .setStrings(CALLED_FROM_PARENT)
                        .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSecurityLogging"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[2]:method_text:[rId);        testSecurityLoggingOnWorkProfile(DEVICE_ADMIN_PKG, "".SecurityLoggingTest"");    }   ]) :|: 
    public void testSecurityLogging() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        testSecurityLoggingOnWorkProfile(DEVICE_ADMIN_PKG, "".SecurityLoggingTest"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSecurityLoggingDelegate"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[3]:method_text:[ce().setSetting(""global"", ""stay_on_while_plugged_in"", stayAwake);            }        }    }   ]) :|: 
    public void testSecurityLoggingDelegate() throws Exception {
        installAppAsUser(DELEGATE_APP_APK, mUserId);
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        try {
            runDeviceTestsAsUser(DELEGATE_APP_PKG, "".SecurityLoggingDelegateTest"",
                    ""testCannotAccessApis"", mUserId);
            // Set security logging delegate
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".SecurityLoggingTest"",
                    ""testSetDelegateScope_delegationSecurityLogging"", mUserId);

            testSecurityLoggingOnWorkProfile(DELEGATE_APP_PKG,
                    "".SecurityLoggingDelegateTest"");
        } finally {
            // Remove security logging delegate
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".SecurityLoggingTest"",
                    ""testSetDelegateScope_noDelegation"", mUserId);
        }
    }

    private void testSecurityLoggingOnWorkProfile(String packageName, String testClassName)
            throws Exception {
        // Backup stay awake setting because testGenerateLogs() will turn it off.
        final String stayAwake = getDevice().getSetting(""global"", ""stay_on_while_plugged_in"");
        try {
            // Turn logging on.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testEnablingSecurityLogging"", mUserId);
            // Reboot to ensure ro.organization_owned is set to true in logd and logging is on.
            rebootAndWaitUntilReady();
            waitForUserUnlock(mUserId);

            // Generate various types of events on device side and check that they are logged.
            runDeviceTestsAsUser(packageName, testClassName, ""testGenerateLogs"", mUserId);
            getDevice().executeShellCommand(""whoami""); // Generate adb command securty event
            runDeviceTestsAsUser(packageName, testClassName, ""testVerifyGeneratedLogs"", mUserId);

            // Immediately attempting to fetch events again should fail.
            runDeviceTestsAsUse"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSetTime"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[2]:method_text:[, "".TimeManagementTest"",                ""testSetTime_failWhenAutoTimeEnabled"", mUserId);    }   ]) :|: 
    public void testSetTime() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".TimeManagementTest"", ""testSetTime"", mUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".TimeManagementTest"",
                ""testSetTime_failWhenAutoTimeEnabled"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSetTimeZone"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[2]:method_text:[ ""testSetTimeZone_failIfAutoTimeZoneEnabled"", mUserId);    }    @FlakyTest(bugId = 137088260)   ]) :|: 
    public void testSetTimeZone() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".TimeManagementTest"", ""testSetTimeZone"", mUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".TimeManagementTest"",
                ""testSetTimeZone_failIfAutoTimeZoneEnabled"", mUserId);
    }

    @FlakyTest(bugId = 137088260)"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testWifi"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[   runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".WifiTest"", ""testGetWifiMacAddress"", mUserId);    }   ]) :|: 
    public void testWifi() throws Exception {
        assumeHasWifiFeature();

        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".WifiTest"", ""testGetWifiMacAddress"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testFactoryResetProtectionPolicy"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[stsAsUser(DEVICE_ADMIN_PKG, "".FactoryResetProtectionPolicyTest"", mUserId);    }    @LargeTest   ]) :|: 
    public void testFactoryResetProtectionPolicy() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".FactoryResetProtectionPolicyTest"", mUserId);
    }

    @LargeTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSystemUpdatePolicy"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[ runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".systemupdate.SystemUpdatePolicyTest"", mUserId);    }   ]) :|: 
    @Ignore(""b/145932189"")
    public void testSystemUpdatePolicy() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".systemupdate.SystemUpdatePolicyTest"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testInstallUpdate"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[      runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".systemupdate.InstallUpdateTest"", mUserId);    }   ]) :|: 
    public void testInstallUpdate() throws Exception {
        pushUpdateFileToDevice(""notZip.zi"");
        pushUpdateFileToDevice(""empty.zip"");
        pushUpdateFileToDevice(""wrongPayload.zip"");
        pushUpdateFileToDevice(""wrongHash.zip"");
        pushUpdateFileToDevice(""wrongSize.zip"");
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".systemupdate.InstallUpdateTest"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testIsDeviceOrganizationOwnedWithManagedProfile"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[3]:method_text:[lingIsOrganizationOwnedWithManagedProfileExpectingTrue"",                mPrimaryUserId);    }   ]) :|: 
    public void testIsDeviceOrganizationOwnedWithManagedProfile() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DeviceOwnershipTest"",
                ""testCallingIsOrganizationOwnedWithManagedProfileExpectingTrue"",
                mUserId);

        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DeviceOwnershipTest"",
                ""testCallingIsOrganizationOwnedWithManagedProfileExpectingTrue"",
                mPrimaryUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testCommonCriteriaMode"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[ion {        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".CommonCriteriaModeTest"", mUserId);    }   ]) :|: 
    public void testCommonCriteriaMode() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".CommonCriteriaModeTest"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testAdminConfiguredNetworks"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[3]:method_text:[        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".AdminConfiguredNetworksTest"", mUserId);    }   ]) :|: 
    public void testAdminConfiguredNetworks() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".AdminConfiguredNetworksTest"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testApplicationHiddenParent"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".ApplicationHiddenParentTest"", mUserId);    }   ]) :|: 
    public void testApplicationHiddenParent() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".ApplicationHiddenParentTest"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSetKeyguardDisabledFeatures"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[s.deviceandprofileowner/.WipeDataReceiver"";        getDevice().executeShellCommand(cmd);    }   ]) :|: 
    public void testSetKeyguardDisabledFeatures() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".KeyguardDisabledFeaturesTest"",
                ""testSetKeyguardDisabledFeatures_onParent"", mUserId);
    }

    private void removeOrgOwnedProfile() throws Exception {
        sendWipeProfileBroadcast(mUserId);
        waitUntilUserRemoved(mUserId);
    }

    private void sendWipeProfileBroadcast(int userId) throws Exception {
        final String cmd = ""am broadcast --receiver-foreground --user "" + userId
                + "" -a "" + ACTION_WIPE_DATA
                + "" com.android.cts.deviceandprofileowner/.WipeDataReceiver"";
        getDevice().executeShellCommand(cmd);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPersonalAppsSuspensionNormalApp"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[4]:method_text:[// Should be launchable again.        assertCanStartPersonalApp(DEVICE_ADMIN_PKG, true);    }   ]) :|: 
    public void testPersonalAppsSuspensionNormalApp() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        // Initially the app should be launchable.
        assertCanStartPersonalApp(DEVICE_ADMIN_PKG, true);
        setPersonalAppsSuspended(true);
        // Now the app should be suspended and not launchable
        assertCanStartPersonalApp(DEVICE_ADMIN_PKG, false);
        setPersonalAppsSuspended(false);
        // Should be launchable again.
        assertCanStartPersonalApp(DEVICE_ADMIN_PKG, true);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPersonalAppsSuspensionInstalledApp"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[           suspended ? ""testSuspendPersonalApps"" : ""testUnsuspendPersonalApps"", mUserId);    }   ]) :|: 
    public void testPersonalAppsSuspensionInstalledApp() throws Exception {
        setPersonalAppsSuspended(true);

        installAppAsUser(TEST_IME_APK, mPrimaryUserId);

        // Wait until package install broadcast is processed
        waitForBroadcastIdle();

        assertCanStartPersonalApp(TEST_IME_PKG, false);
        setPersonalAppsSuspended(false);
    }

    private void setPersonalAppsSuspended(boolean suspended) throws DeviceNotAvailableException {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                suspended ? ""testSuspendPersonalApps"" : ""testUnsuspendPersonalApps"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testCanRestrictAccountManagementOnParentProfile"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[4]:method_text:[gementParentTest"",                    ""testEnableAccountManagement"", mUserId);        }    }   ]) :|: 
    public void testCanRestrictAccountManagementOnParentProfile() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".AccountManagementParentTest"",
                ""testSetAccountManagementDisabledOnParent"", mUserId);
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        try {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".AccountManagementParentTest"",
                    ""testAccountManagementDisabled"", mPrimaryUserId);
        } finally {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".AccountManagementParentTest"",
                    ""testEnableAccountManagement"", mUserId);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPermittedInputMethods"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[Exception {        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".InputMethodsTest"", mUserId);    }   ]) :|: 
    public void testPermittedInputMethods() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".InputMethodsTest"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPermittedInputMethodsLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([5:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[5]:method_text:[          canStart ? ""testCanStartActivity"" : ""testCannotStartActivity"", mPrimaryUserId);    }   ]) :|: 
    public void testPermittedInputMethodsLogged() throws Exception {
        assertMetricsLogged(getDevice(), () ->
                        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".InputMethodsTest"",
                                ""testPermittedInputMethodsOnParent"", mUserId),
                new DevicePolicyEventWrapper.Builder(EventId.SET_PERMITTED_INPUT_METHODS_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setStrings(CALLED_FROM_PARENT, new String[0])
                        .build(),
                new DevicePolicyEventWrapper.Builder(EventId.SET_PERMITTED_INPUT_METHODS_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setStrings(CALLED_FROM_PARENT, new String[0])
                        .build());
    }

    private void setupIme(String imeComponent, int userId) throws Exception {
        // Wait until IMS service is registered by the system.
        waitForOutput(""Failed waiting for IME to become available"",
                String.format(""ime list --user %d -s -a"", userId),
                s -> s.contains(imeComponent), 10 /* seconds */);

        executeShellCommand(""ime enable "" + imeComponent);
        executeShellCommand(""ime set "" + imeComponent);
    }

    private void assertCanStartPersonalApp(String packageName, boolean canStart)
            throws DeviceNotAvailableException {
        runDeviceTestsAsUser(packageName, ""com.android.cts.suspensionchecker.ActivityLaunchTest"",
                canStart ? ""testCanStartActivity"" : ""testCannotStartActivity"", mPrimaryUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testScreenCaptureDisabled"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([6:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[6]:method_text:[+ ADMIN_RECEIVER_TEST_CLASS,                        userId, /* expectFailure */ false));    }   ]) :|: 
    public void testScreenCaptureDisabled() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        setPoAsUser(mPrimaryUserId);

        try {
            setScreenCaptureDisabled(true);
        } finally {
            setScreenCaptureDisabled(false);
        }
    }

    private void takeScreenCaptureAsUser(int userId, String testMethodName) throws Exception {
        installAppAsUser(TEST_APP_APK, /* grantPermissions */ true, /* dontKillApp */ true, userId);
        startActivityAsUser(userId, TEST_APP_PKG, TEST_APP_PKG + "".SimpleActivity"");
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".ScreenCaptureDisabledTest"",
                testMethodName, userId);
        forceStopPackageForUser(TEST_APP_PKG, userId);
    }

    private void setScreenCaptureDisabled(boolean disabled) throws Exception {
        String testMethodName = disabled
                ? ""testSetScreenCaptureDisabledOnParent_true""
                : ""testSetScreenCaptureDisabledOnParent_false"";
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".ScreenCaptureDisabledTest"",
                testMethodName, mUserId);

        testMethodName = disabled
                ? ""testScreenCaptureImpossible""
                : ""testScreenCapturePossible"";

        // Test personal profile
        takeScreenCaptureAsUser(mPrimaryUserId, testMethodName);

        // Test managed profile. This should not be disabled when screen capture is disabled on
        // the parent by the profile owner of an organization-owned device.
        takeScreenCaptureAsUser(mUserId, ""testScreenCapturePossible"");
    }

    private void assertHasNoUser(int userId) throws DeviceNotAvailableException {
        int numWaits = 0;
        final int MAX_NUM_WAITS = 15;
        while (listUsers().contains(userId) && (numWaits < MAX_NUM_WAITS)) {
            try {
                Thread.sleep(1000);
                numWaits += 1;
            } catch (InterruptedException e) {
                Thread.currentThread("	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSetPersonalAppsSuspendedLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([5:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[5]:method_text:[_ADMIN_PKG)                        .setBoolean(false)                        .build());    }   ]) :|: 
    public void testSetPersonalAppsSuspendedLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
                    runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DevicePolicyLoggingTest"",
                            ""testSetPersonalAppsSuspendedLogged"", mUserId);
                }, new DevicePolicyEventWrapper.Builder(EventId.SET_PERSONAL_APPS_SUSPENDED_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setBoolean(true)
                        .build(),
                new DevicePolicyEventWrapper.Builder(EventId.SET_PERSONAL_APPS_SUSPENDED_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setBoolean(false)
                        .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSetManagedProfileMaximumTimeOffLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([5:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[5]:method_text:[E_ADMIN_PKG)                        .setTimePeriod(0)                        .build());    }   ]) :|: 
    public void testSetManagedProfileMaximumTimeOffLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
                    runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                            ""testSetManagedProfileMaximumTimeOff"", mUserId);
                }, new DevicePolicyEventWrapper.Builder(
                        EventId.SET_MANAGED_PROFILE_MAXIMUM_TIME_OFF_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setTimePeriod(123456789)
                        .build(),
                new DevicePolicyEventWrapper.Builder(
                        EventId.SET_MANAGED_PROFILE_MAXIMUM_TIME_OFF_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setTimePeriod(0)
                        .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testWorkProfileMaximumTimeOff"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[4]:method_text:[sonalAppsSuspensionTest"",                ""testPersonalAppsSuspendedByTimeout"", mUserId);    }   ]) :|: 
    public void testWorkProfileMaximumTimeOff() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                ""testSetManagedProfileMaximumTimeOff1Sec"", mUserId);

        toggleQuietMode(true);
        // Verify that at some point personal app becomes impossible to launch.
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, SUSPENSION_CHECKER_CLASS,
                ""testWaitForActivityNotLaunchable"", mPrimaryUserId);
        toggleQuietMode(false);
        // Ensure the profile is properly started before wipe broadcast is sent in teardown.
        waitForUserUnlock(mUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                ""testPersonalAppsSuspendedByTimeout"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testWorkProfileMaximumTimeOff_complianceRequiredBroadcastDefault"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([5:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[5]:method_text:[sionTest"",                    ""testClearComplianceSharedPreference"", mUserId);        }    }   ]) :|: 
    public void testWorkProfileMaximumTimeOff_complianceRequiredBroadcastDefault()
            throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        // Very long timeout, won't be triggered
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                ""testSetManagedProfileMaximumTimeOff1Year"", mUserId);

        try {
            toggleQuietMode(true);
            waitForUserStopped(mUserId);
            toggleQuietMode(false);
            waitForUserUnlock(mUserId);
            // Ensure the DPC has handled the broadcast
            waitForBroadcastIdle();
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                    ""testComplianceAcknowledgementRequiredReceived"", mUserId);

            // Ensure that the default onComplianceAcknowledgementRequired acknowledged compliance.
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                    ""testComplianceAcknowledgementNotRequired"", mUserId);

        } finally {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                    ""testClearComplianceSharedPreference"", mUserId);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testWorkProfileMaximumTimeOff_complianceRequiredBroadcastOverride"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([6:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[6]:method_text:[sionTest"",                    ""testClearComplianceSharedPreference"", mUserId);        }    }   ]) :|: 
    public void testWorkProfileMaximumTimeOff_complianceRequiredBroadcastOverride()
            throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        // Very long timeout, won't be triggered
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                ""testSetManagedProfileMaximumTimeOff1Year"", mUserId);
        // Set shared preference that instructs the receiver to NOT call default implementation.
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                ""testSetOverrideOnComplianceAcknowledgementRequired"", mUserId);

        try {
            toggleQuietMode(true);
            waitForUserStopped(mUserId);
            toggleQuietMode(false);
            waitForUserUnlock(mUserId);
            // Ensure the DPC has handled the broadcast
            waitForBroadcastIdle();
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                    ""testComplianceAcknowledgementRequiredReceived"", mUserId);

            // Ensure compliance wasn't acknowledged automatically, acknowledge explicitly.
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                    ""testAcknowledgeCompliance"", mUserId);
        } finally {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                    ""testClearComplianceSharedPreference"", mUserId);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testDelegatedCertInstallerDeviceIdAttestation"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[,                ""testGenerateKeyPairWithDeviceIdAttestationExpectingSuccess"", mUserId);    }   ]) :|: 
    public void testDelegatedCertInstallerDeviceIdAttestation() throws Exception {
        installAppAsUser(CERT_INSTALLER_APK, mUserId);

        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerHelper"",
                ""testManualSetCertInstallerDelegate"", mUserId);

        runDeviceTestsAsUser(CERT_INSTALLER_PKG, "".DelegatedDeviceIdAttestationTest"",
                ""testGenerateKeyPairWithDeviceIdAttestationExpectingSuccess"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testDeviceIdAttestationForProfileOwner"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[1]:method_text:[iceIdAttestationTest"",                ""testSucceedsWithProfileOwnerIdsGrant"", mUserId);    }   ]) :|: 
    public void testDeviceIdAttestationForProfileOwner() throws Exception {
        // Test that Device ID attestation works for org-owned profile owner.
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DeviceIdAttestationTest"",
                ""testSucceedsWithProfileOwnerIdsGrant"", mUserId);

    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testNetworkLogging"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[2]:method_text:[serId);        testNetworkLoggingOnWorkProfile(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"");    }   ]) :|: 
    public void testNetworkLogging() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        testNetworkLoggingOnWorkProfile(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testNetworkLoggingDelegate"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[4]:method_text:[testClassName,                    ""testSetNetworkLogsEnabled_false"", mUserId);        }    }   ]) :|: 
    public void testNetworkLoggingDelegate() throws Exception {
        installAppAsUser(DELEGATE_APP_APK, mUserId);
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        try {
            runDeviceTestsAsUser(DELEGATE_APP_PKG, "".WorkProfileNetworkLoggingDelegateTest"",
                    ""testCannotAccessApis"", mUserId);
            // Set network logging delegate
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"",
                    ""testSetDelegateScope_delegationNetworkLogging"", mUserId);

            testNetworkLoggingOnWorkProfile(DELEGATE_APP_PKG,
                    "".WorkProfileNetworkLoggingDelegateTest"");
        } finally {
            // Remove network logging delegate
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"",
                    ""testSetDelegateScope_noDelegation"", mUserId);
        }
    }

    private void testNetworkLoggingOnWorkProfile(String packageName, String testClassName)
            throws Exception {
        try {
            // Turn network logging on.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testSetNetworkLogsEnabled_true"", mUserId);

            // Connect to websites from work profile, should be logged.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testConnectToWebsites_shouldBeLogged"", mUserId);
            // Connect to websites from personal profile, should not be logged.
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"",
                    ""testConnectToWebsites_shouldNotBeLogged"", mPrimaryUserId);

            // Verify all work profile network logs have been received.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testRetrieveNetworkLogs_forceNetworkLogs_receiveNetworkLogs"", mUserId);
        } finally {
            // Turn network logging off.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""test"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testNetworkLoggingLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([9:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[admin]:[9]:method_text:[d"", userId),                s -> s.startsWith(USER_IS_NOT_STARTED), USER_STOP_TIMEOUT_SEC);    }}]) :|: 
    public void testNetworkLoggingLogged() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        assertMetricsLogged(getDevice(), () -> {
            testNetworkLoggingOnWorkProfile(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_NETWORK_LOGGING_ENABLED_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setInt(1)
                .setStrings(LOG_TAG_PROFILE_OWNER)
                .build(),
           new DevicePolicyEventWrapper.Builder(EventId.RETRIEVE_NETWORK_LOGS_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(LOG_TAG_PROFILE_OWNER)
                .build(),
           new DevicePolicyEventWrapper.Builder(EventId.SET_NETWORK_LOGGING_ENABLED_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setInt(0)
                .setStrings(LOG_TAG_PROFILE_OWNER)
                .build());
    }

    private void toggleQuietMode(boolean quietModeEnable) throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                quietModeEnable ? ""testEnableQuietMode"" : ""testDisableQuietMode"", mPrimaryUserId);
    }

    private void setAndStartLauncher(String component) throws Exception {
        String output = getDevice().executeShellCommand(String.format(
                ""cmd package set-home-activity --user %d %s"", mPrimaryUserId, component));
        assertTrue(""failed to set home activity"", output.contains(""Success""));
        executeShellCommand(""am start -W -n "" + component);
    }

    private void waitForUserStopped(int userId) throws Exception {
        waitForOutput(""User is not unlocked."",
                String.format(""am get-started-user-state %d"", userId),
                s -> s.startsWith(USER_IS_NOT_STARTED), USER_STOP_TIMEOUT_SEC);"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileWipeTest"	"testWipeDataLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/ManagedProfileWipeTest.java]:[admin]:[1]:method_text:[)                .build());        waitUntilUserRemoved(mProfileUserId);    }    @FlakyTest   ]) :|: 
    public void testWipeDataLogged() throws Exception {
        assertTrue(listUsers().contains(mProfileUserId));

        // Both the profile wipe and notification verification are done on the device side test
        // because notifications are checked using a NotificationListenerService
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(
                    MANAGED_PROFILE_PKG,
                    "".WipeDataNotificationTest"",
                    ""testWipeDataWithReasonVerification"",
                    mParentUserId,
                    mTestArgs);
        }, new DevicePolicyEventWrapper.Builder(EventId.WIPE_DATA_WITH_REASON_VALUE)
                .setAdminPackageName(MANAGED_PROFILE_PKG)
                .setInt(0)
                .setStrings(""notCalledFromParent"")
                .build());
        waitUntilUserRemoved(mProfileUserId);
    }

    @FlakyTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileWipeTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.BaseDeviceAdminHostSideTest"	"testRunDeviceAdminTest"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/BaseDeviceAdminHostSideTest.java]:[admin]:[3]:method_text:[est() throws Exception {        runTests(getDeviceAdminApkPackage(), ""DeviceAdminTest"");    }   ]) :|: 
    public void testRunDeviceAdminTest() throws Exception {
        runTests(getDeviceAdminApkPackage(), ""DeviceAdminTest"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/BaseDeviceAdminHostSideTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.BaseDeviceAdminHostSideTest"	"testResetPasswordDeprecated"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/BaseDeviceAdminHostSideTest.java]:[admin]:[2]:method_text:[ackage(), ""DeviceAdminPasswordTest"",                        ""testResetPasswordDeprecated"");    }}]) :|: 
    public void testResetPasswordDeprecated() throws Exception {
        assumeHasSecureLockScreenFeature();

        runTests(getDeviceAdminApkPackage(), ""DeviceAdminPasswordTest"",
                        ""testResetPasswordDeprecated"");
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/BaseDeviceAdminHostSideTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ProfileOwnerTestApi23"	"testDelegatedCertInstaller"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/ProfileOwnerTestApi23.java]:[admin]:[1]:method_text:[            "".DelegatedCertInstallerTest"", ""testSetNotExistCertInstallerPackage"",  mUserId);    }}]) :|: 
    public void testDelegatedCertInstaller() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG,
                "".DelegatedCertInstallerTest"", ""testSetNotExistCertInstallerPackage"",  mUserId);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ProfileOwnerTestApi23.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTestApi25"	"removeTestUsers"	"CtsDevicePolicyManagerTestCases"	"2: managed_users admin"	"([5:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi25.java]:[admin]:[5]:method_text:[       removeUser(mUserId);        super.tearDown();    }    @Override    @PermissionsTest   ]) :|: /*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;
import com.android.cts.devicepolicy.annotations.PermissionsTest;

import org.junit.Test;

/**
 * Set of tests for managed profile owner use cases that also apply to device owners.
 * Tests that should be run identically in both cases are added in DeviceAndProfileOwnerTestApi25.
 */
// We need managed users to be supported in order to create a profile of the user owner.
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class MixedManagedProfileOwnerTestApi25 extends DeviceAndProfileOwnerTestApi25 {
    private int mParentUserId = -1;

    @Override
    public void setUp() throws Exception {
        super.setUp();

        removeTestUsers();
        mParentUserId = mPrimaryUserId;
        createManagedProfile();
    }

    private void createManagedProfile() throws Exception {
        mUserId = createManagedProfile(mParentUserId);
        switchUser(mParentUserId);
        startUserAndWait(mUserId);

        installAppAsUser(DEVICE_ADMIN_APK, mUserId);
        setProfileOwnerOrFail(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mUserId);
        startUserAndWait(mUserId);
    }

    @Override
    public void tearDown() throws Exception {
        removeUser(mUserId);

        super.tearDown();
    }

    @Override
    @PermissionsTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi25.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileContent"	"CtsDevicePolicyManagerTestCases"	"1: granted"	"([1:/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java]:[granted]:[1]:method_text:[ runDeviceTestsAsUser(INTENT_SENDER_PKG, "".ContentTest"", mProfileUserId);    }    @FlakyTest   ]) :|: 
    public void testCrossProfileContent() throws Exception {

        // Storage permission shouldn't be granted, we check if missing permissions are respected
        // in ContentTest#testSecurity.
        installAppAsUser(INTENT_SENDER_APK, false /* grantPermissions */, USER_ALL);
        installAppAsUser(INTENT_RECEIVER_APK, USER_ALL);

        // Test from parent to managed
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileUtils"",
                ""testRemoveAllFilters"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileUtils"",
                ""testAddManagedCanAccessParentFilters"", mProfileUserId);
        runDeviceTestsAsUser(INTENT_SENDER_PKG, "".ContentTest"", mParentUserId);

        // Test from managed to parent
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileUtils"",
                ""testRemoveAllFilters"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileUtils"",
                ""testAddParentCanAccessManagedFilters"", mProfileUserId);
        runDeviceTestsAsUser(INTENT_SENDER_PKG, "".ContentTest"", mProfileUserId);

    }

    @FlakyTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileIntentFilters"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java]:[admin]:[1]:method_text:[PrimaryUserTest"", mParentUserId);        // TODO: Test with startActivity    }    @FlakyTest   ]) :|: 
    public void testCrossProfileIntentFilters() throws Exception {
        // Set up activities: ManagedProfileActivity will only be enabled in the managed profile and
        // PrimaryUserActivity only in the primary one
        disableActivityForUser(""ManagedProfileActivity"", mParentUserId);
        disableActivityForUser(""PrimaryUserActivity"", mProfileUserId);

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG,
                MANAGED_PROFILE_PKG + "".CrossProfileIntentFilterTest"", mProfileUserId);

        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(
                    MANAGED_PROFILE_PKG, MANAGED_PROFILE_PKG + "".CrossProfileIntentFilterTest"",
                    ""testAddCrossProfileIntentFilter_all"", mProfileUserId);
        }, new DevicePolicyEventWrapper.Builder(ADD_CROSS_PROFILE_INTENT_FILTER_VALUE)
                .setAdminPackageName(MANAGED_PROFILE_PKG)
                .setInt(1)
                .setStrings(""com.android.cts.managedprofile.ACTION_TEST_ALL_ACTIVITY"")
                .build());

        // Set up filters from primary to managed profile
        String command = ""am start -W --user "" + mProfileUserId + "" "" + MANAGED_PROFILE_PKG
                + ""/.PrimaryUserFilterSetterActivity"";
        LogUtil.CLog.d(""Output for command "" + command + "": ""
                + getDevice().executeShellCommand(command));
        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG, MANAGED_PROFILE_PKG + "".PrimaryUserTest"", mParentUserId);
        // TODO: Test with startActivity
    }

    @FlakyTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileWidgetsLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java]:[admin]:[2]:method_text:[mProfileUserId);            getDevice().uninstallPackage(WIDGET_PROVIDER_PKG);        }    }   ]) :|: 
    public void testCrossProfileWidgetsLogged() throws Exception {
        try {
            installAppAsUser(WIDGET_PROVIDER_APK, USER_ALL);
            getDevice().executeShellCommand(""appwidget grantbind --user "" + mParentUserId
                    + "" --package "" + WIDGET_PROVIDER_PKG);
            setIdleAllowlist(WIDGET_PROVIDER_PKG, true);
            startWidgetHostService();

            assertMetricsLogged(getDevice(), () -> {
                changeCrossProfileWidgetForUser(WIDGET_PROVIDER_PKG,
                        ""add-cross-profile-widget"", mProfileUserId);
                changeCrossProfileWidgetForUser(WIDGET_PROVIDER_PKG,
                        ""remove-cross-profile-widget"", mProfileUserId);
            }, new DevicePolicyEventWrapper
                        .Builder(ADD_CROSS_PROFILE_WIDGET_PROVIDER_VALUE)
                        .setAdminPackageName(MANAGED_PROFILE_PKG)
                        .build(),
                new DevicePolicyEventWrapper
                        .Builder(REMOVE_CROSS_PROFILE_WIDGET_PROVIDER_VALUE)
                        .setAdminPackageName(MANAGED_PROFILE_PKG)
                        .build());
        } finally {
            changeCrossProfileWidgetForUser(WIDGET_PROVIDER_PKG, ""remove-cross-profile-widget"",
                    mProfileUserId);
            getDevice().uninstallPackage(WIDGET_PROVIDER_PKG);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileCalendarPackage"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java]:[admin]:[1]:method_text:[_PKG)                    .setStrings(MANAGED_PROFILE_PKG)                    .build());    }   ]) :|: 
    public void testCrossProfileCalendarPackage() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileCalendarTest"",
                    ""testCrossProfileCalendarPackage"", mProfileUserId);
        }, new DevicePolicyEventWrapper.Builder(SET_CROSS_PROFILE_CALENDAR_PACKAGES_VALUE)
                    .setAdminPackageName(MANAGED_PROFILE_PKG)
                    .setStrings(MANAGED_PROFILE_PKG)
                    .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testSetCrossProfilePackages_isLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java]:[admin]:[1]:method_text:[            .setStrings(TEST_APP_1_PKG)                        .build());    }    @FlakyTest   ]) :|: 
    public void testSetCrossProfilePackages_isLogged() throws Exception {
        installAllTestApps();
        assertMetricsLogged(
                getDevice(),
                () -> runWorkProfileDeviceTest(
                        "".CrossProfileTest"", ""testSetCrossProfilePackages_noAsserts""),
                new DevicePolicyEventWrapper.Builder(SET_CROSS_PROFILE_PACKAGES_VALUE)
                        .setAdminPackageName(MANAGED_PROFILE_PKG)
                        .setStrings(TEST_APP_1_PKG)
                        .build());
    }

    @FlakyTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.SeparateProfileChallengeTest"	"removeTestUsers"	"CtsDevicePolicyManagerTestCases"	"2: managed_users admin"	"([2:/com/android/cts/devicepolicy/SeparateProfileChallengeTest.java]:[admin]:[2]:method_text:[PARATE_PROFILE_PKG);        setHiddenApiPolicyPreviousOrOff();        super.tearDown();    }   ]) :|: /*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import android.platform.test.annotations.AsbSecurityTest;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;

import org.junit.Test;

/**
 * Host side tests for separate profile challenge permissions.
 * Run the CtsSeparateProfileChallengeApp device side test.
 */
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class SeparateProfileChallengeTest extends BaseDevicePolicyTest {
    private static final String SEPARATE_PROFILE_PKG = ""com.android.cts.separateprofilechallenge"";
    private static final String SEPARATE_PROFILE_APK = ""CtsSeparateProfileChallengeApp.apk"";
    private static final String SEPARATE_PROFILE_TEST_CLASS =
        "".SeparateProfileChallengePermissionsTest"";
    private String mPreviousHiddenApiPolicy = ""0"";

    @Override
    public void setUp() throws Exception {
        super.setUp();

        setHiddenApiPolicyOn();
    }

    @Override
    public void tearDown() throws Exception {

        removeTestUsers();
        getDevice().uninstallPackage(SEPARATE_PROFILE_PKG);
        setHiddenApiPolicyPreviousOrOff();
        super.tearDown();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/SeparateProfileChallengeTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testNoDebuggingFeaturesRestriction"	"CtsDevicePolicyManagerTestCases"	"1: UserManager.DISALLOW"	"([1:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[UserManager.DISALLOW]:[1]:method_text:[put.contains(""SecurityException""));    }    // Test the bluetooth API from a managed profile.   ]) :|: 
    public void testNoDebuggingFeaturesRestriction() throws Exception {
        // If adb is running as root, then the adb uid is 0 instead of SHELL_UID,
        // so the DISALLOW_DEBUGGING_FEATURES restriction does not work and this test
        // fails.
        if (getDevice().isAdbRoot()) {
            CLog.logAndDisplay(LogLevel.WARN,
                    ""Cannot test testNoDebuggingFeaturesRestriction() in eng/userdebug build"");
            return;
        }
        String restriction = ""no_debugging_features"";  // UserManager.DISALLOW_DEBUGGING_FEATURES

        changeUserRestrictionOrFail(restriction, true, mProfileUserId);


        // This should now fail, as the shell is not available to start activities under a different
        // user once the restriction is in place.
        String addRestrictionCommandOutput =
                changeUserRestriction(restriction, true, mProfileUserId);
        assertTrue(
                ""Expected SecurityException when starting the activity ""
                        + addRestrictionCommandOutput,
                addRestrictionCommandOutput.contains(""SecurityException""));
    }

    // Test the bluetooth API from a managed profile."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testNfcRestriction"	"CtsDevicePolicyManagerTestCases"	"1: UserManager.DISALLOW"	"([1:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[UserManager.DISALLOW]:[1]:method_text:[r(MANAGED_PROFILE_PKG, "".NfcTest"",                ""testNfcShareEnabled"", mParentUserId);    }   ]) :|: 
    public void testNfcRestriction() throws Exception {
        assumeHasNfcFeatures();

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NfcTest"",
                ""testNfcShareEnabled"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NfcTest"",
                ""testNfcShareEnabled"", mParentUserId);

        changeUserRestrictionOrFail(""no_outgoing_beam"" /* UserManager.DISALLOW_OUTGOING_BEAM */,
                true, mProfileUserId);

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NfcTest"",
                ""testNfcShareDisabled"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NfcTest"",
                ""testNfcShareEnabled"", mParentUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCameraPolicy"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[admin]:[4]:method_text:[,                    adminHelperClass, ""testClearDeviceAdmin"", mParentUserId);        }    }   ]) :|: 
    public void testCameraPolicy() throws Exception {
        assumeHasCameraFeature();

        try {
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CameraPolicyTest"",
                    ""testDisableCameraInManagedProfile"",
                    mProfileUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CameraPolicyTest"",
                    ""testEnableCameraInManagedProfile"",
                    mProfileUserId);
        } finally {
            final String adminHelperClass = "".PrimaryUserAdminHelper"";
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG,
                    adminHelperClass, ""testClearDeviceAdmin"", mParentUserId);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testOrganizationInfo"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[admin]:[1]:method_text:[LUE)                .setAdminPackageName(MANAGED_PROFILE_PKG)                .build());    }   ]) :|: 
    public void testOrganizationInfo() throws Exception {
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".OrganizationInfoTest"",
                ""testDefaultOrganizationColor"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".OrganizationInfoTest"",
                ""testDefaultOrganizationNameIsNull"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".OrganizationInfoTest"",
                mProfileUserId);
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(
                    MANAGED_PROFILE_PKG, MANAGED_PROFILE_PKG + "".OrganizationInfoTest"",
                    ""testSetOrganizationColor"", mProfileUserId);
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_ORGANIZATION_COLOR_VALUE)
                .setAdminPackageName(MANAGED_PROFILE_PKG)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testBluetoothContactSharingDisabled"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[admin]:[2]:method_text:[MANAGED_PROFILE_PKG)                    .setBoolean(true)                    .build());    }   ]) :|: 
    public void testBluetoothContactSharingDisabled() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",
                    ""testSetBluetoothContactSharingDisabled_setterAndGetter"", mProfileUserId);
        }, new DevicePolicyEventWrapper
                    .Builder(EventId.SET_BLUETOOTH_CONTACT_SHARING_DISABLED_VALUE)
                    .setAdminPackageName(MANAGED_PROFILE_PKG)
                    .setBoolean(false)
                    .build(),
            new DevicePolicyEventWrapper
                    .Builder(EventId.SET_BLUETOOTH_CONTACT_SHARING_DISABLED_VALUE)
                    .setAdminPackageName(MANAGED_PROFILE_PKG)
                    .setBoolean(true)
                    .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCannotSetProfileOwnerAgain"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[admin]:[4]:method_text:[ICE_OWNER_ADMIN, mProfileUserId,                /*expectFailure*/ true));    }    @LargeTest   ]) :|: 
    public void testCannotSetProfileOwnerAgain() throws Exception {
        // verify that we can't set the same admin receiver as profile owner again
        assertFalse(setProfileOwner(
                MANAGED_PROFILE_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mProfileUserId,
                /*expectFailure*/ true));

        // verify that we can't set a different admin receiver as profile owner
        installAppAsUser(DEVICE_OWNER_APK, mProfileUserId);
        assertFalse(setProfileOwner(DEVICE_OWNER_PKG + ""/"" + DEVICE_OWNER_ADMIN, mProfileUserId,
                /*expectFailure*/ true));
    }

    @LargeTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCannotSetDeviceOwnerWhenProfilePresent"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[admin]:[3]:method_text:[IN, mParentUserId);            getDevice().uninstallPackage(DEVICE_OWNER_PKG);        }    }   ]) :|: 
    public void testCannotSetDeviceOwnerWhenProfilePresent() throws Exception {
        try {
            installAppAsUser(DEVICE_OWNER_APK, mParentUserId);
            assertFalse(setDeviceOwner(DEVICE_OWNER_PKG + ""/"" + DEVICE_OWNER_ADMIN, mParentUserId,
                    /*expectFailure*/ true));
        } finally {
            // make sure we clean up in case we succeeded in setting the device owner
            removeAdmin(DEVICE_OWNER_PKG + ""/"" + DEVICE_OWNER_ADMIN, mParentUserId);
            getDevice().uninstallPackage(DEVICE_OWNER_PKG);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testSetProfileNameLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[admin]:[1]:method_text:[LUE)                .setAdminPackageName(MANAGED_PROFILE_PKG)                .build());    }   ]) :|: 
    public void testSetProfileNameLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(
                    MANAGED_PROFILE_PKG, MANAGED_PROFILE_PKG + "".DevicePolicyLoggingTest"",
                    ""testSetProfileNameLogged"", mProfileUserId);
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_PROFILE_NAME_VALUE)
                .setAdminPackageName(MANAGED_PROFILE_PKG)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testBindDeviceAdminServiceAsUser_secondaryUser"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[admin]:[3]:method_text:[   verifyBindDeviceAdminServiceAsUser(secondaryUserId);    }    @FlakyTest(bugId = 141161038)   ]) :|: 
    public void testBindDeviceAdminServiceAsUser_secondaryUser() throws Exception {
        assumeCanCreateAdditionalUsers(1);

        int secondaryUserId = setupManagedSecondaryUser();

        installAppAsUser(COMP_DPC_APK2, mPrimaryUserId);
        installAppAsUser(COMP_DPC_APK2, secondaryUserId);

        // Shouldn't be possible to bind to each other, as they are not affiliated.
        verifyBindDeviceAdminServiceAsUserFails(secondaryUserId);

        // Set the same affiliation ids, and check that DO and PO can now bind to each other.
        setSameAffiliationId(secondaryUserId);
        verifyBindDeviceAdminServiceAsUser(secondaryUserId);
    }

    @FlakyTest(bugId = 141161038)"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testRequestBugreportAvailableIfAffiliated"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([8:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[admin]:[8]:method_text:[              ""testOtherProfilesEqualsBindTargetUsers"",                otherProfileUserId);    }}]) :|: 
    public void testRequestBugreportAvailableIfAffiliated() throws Exception {
        assumeCanCreateAdditionalUsers(2);

        final int secondaryUserId = setupManagedSecondaryUser();

        // No affiliation ids have been set on the secondary user, the feature shouldn't be
        // available.
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                DEVICE_WIDE_LOGGING_TEST,
                ""testRequestBugreportThrowsSecurityException"",
                mPrimaryUserId);

        // Affiliate the DO and the secondary user.
        setSameAffiliationId(secondaryUserId);
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                DEVICE_WIDE_LOGGING_TEST,
                ""testRequestBugreportDoesNotThrowException"",
                mPrimaryUserId);

        setDifferentAffiliationId(secondaryUserId, COMP_DPC_PKG);
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                DEVICE_WIDE_LOGGING_TEST,
                ""testRequestBugreportThrowsSecurityException"",
                mPrimaryUserId);
    }

    private void verifyBindDeviceAdminServiceAsUser(int profileOwnerUserId) throws Exception {
        // Installing a non managing app (neither device owner nor profile owner).
        installAppAsUser(COMP_DPC_APK2, mPrimaryUserId);
        installAppAsUser(COMP_DPC_APK2, profileOwnerUserId);

        // Testing device owner -> profile owner.
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                BIND_DEVICE_ADMIN_SERVICE_GOOD_SETUP_TEST,
                mPrimaryUserId);
        // Testing profile owner -> device owner.
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                BIND_DEVICE_ADMIN_SERVICE_GOOD_SETUP_TEST,
                profileOwnerUserId);
    }

    private void verifyBindDeviceAdminServiceAsUserFails(int profileOwnerUserId) throws Exception {
        // Installing a non managing app (neither device owner nor profile owner).
        installAppAsUser(COMP_DPC_A"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testLocationPermissionGrantNotifies"	"CtsDevicePolicyManagerTestCases"	"1: granted"	"([1:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[granted]:[1]:method_text:[       ""testPermissionGrantStateGranted_userNotifiedOfLocationPermission"");    }    @Override   ]) :|: 
    public void testLocationPermissionGrantNotifies() throws Exception {
        installAppPermissionAppAsUser();
        configureNotificationListener();
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionGrantStateGranted_userNotifiedOfLocationPermission"");
    }

    @Override"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testSensorsRelatedPermissionsNotGrantedViaPolicy"	"CtsDevicePolicyManagerTestCases"	"1: granted"	"([1:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[granted]:[1]:method_text:[for now, re-enable when the code path sets DO as able to grant permissions.    }    @Override   ]) :|: 
    public void testSensorsRelatedPermissionsNotGrantedViaPolicy() throws Exception {
        // Skip for now, re-enable when the code path sets DO as able to grant permissions.
    }

    @Override"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"isHeadlessSystemUserMode"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([9:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[9]:method_text:[eDeviceOwnerAdmin(DEVICE_ADMIN_COMPONENT_FLATTENED);        }        super.tearDown();    }   ]) :|: /*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.metrics.DevicePolicyEventLogVerifier.assertMetricsLogged;

import static org.junit.Assert.fail;

import android.platform.test.annotations.FlakyTest;
import android.platform.test.annotations.LargeTest;
import android.stats.devicepolicy.EventId;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.IgnoreOnHeadlessSystemUserMode;
import com.android.cts.devicepolicy.metrics.DevicePolicyEventWrapper;
import com.android.tradefed.device.DeviceNotAvailableException;
import com.android.tradefed.log.LogUtil.CLog;

import com.google.common.collect.ImmutableMap;

import org.junit.Ignore;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Set of tests for device owner use cases that also apply to profile owners.
 * Tests that should be run identically in both cases are added in DeviceAndProfileOwnerTest.
 */
public final class MixedDeviceOwnerTest extends DeviceAndProfileOwnerTest {

    private static final String DELEGATION_NETWORK_LOGGING = ""delegation-network-logging"";
    private static final String LOG_TAG_DEVICE_OWNER = ""device-owner"";

    private static final String ARG_SECURITY_LOGGING_BATCH_NUMBER = ""batchNumber"";
    private static final int SECURITY_EVENTS_BATCH_SIZE = 100;

    private boolean mDeviceOwnerSet;

    @Override
    public void setUp() throws Exception {
        super.setUp();

        mUserId = mPrimaryUserId;

        CLog.i(""%s.setUp(): mUserId=%d, mPrimaryUserId=%d, mInitialUserId=%d, ""
                + ""mDeviceOwnerUserId=%d"", getClass(), mUserId, mPrimaryUserId, mInitialUserId,
                mDeviceOwnerUserId);

        installDeviceOwnerApp(DEVICE_ADMIN_APK);
        mDeviceOwnerSet = setDeviceOwner(DEVICE_ADMIN_COMPONENT_FLATTENED, mDeviceOwnerUserId,
                /*expectFailure= */ false);

        if (!mDeviceOwnerSet)"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testLockTask_unaffiliatedUser"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[2]:method_text:[      ""testSetLockTaskPackagesClearedIfUserBecomesUnaffiliated"",                userId);    }   ]) :|: 
    public void testLockTask_unaffiliatedUser() throws Exception {
        assumeCanCreateAdditionalUsers(1);

        final int userId = createSecondaryUserAsProfileOwner();
        runDeviceTestsAsUser(
                DEVICE_ADMIN_PKG,
                "".AffiliationTest"",
                ""testLockTaskMethodsThrowExceptionIfUnaffiliated"",
                userId);

        setUserAsAffiliatedUserToPrimary(userId);
        runDeviceTestsAsUser(
                DEVICE_ADMIN_PKG,
                "".AffiliationTest"",
                ""testSetLockTaskPackagesClearedIfUserBecomesUnaffiliated"",
                userId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testWifi"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[2]:method_text:[_VALUE)                .setAdminPackageName(DEVICE_ADMIN_PKG)                .build());    }   ]) :|: 
    public void testWifi() throws Exception {
        assumeHasWifiFeature();

        executeDeviceTestMethod("".WifiTest"", ""testGetWifiMacAddress"");
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".WifiTest"", ""testGetWifiMacAddress"");
        }, new DevicePolicyEventWrapper.Builder(EventId.GET_WIFI_MAC_ADDRESS_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testAdminConfiguredNetworks"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[2]:method_text:[Exception {        executeDeviceTestClass("".AdminConfiguredNetworksTest"");    }    @Override   ]) :|: 
    public void testAdminConfiguredNetworks() throws Exception {
        executeDeviceTestClass("".AdminConfiguredNetworksTest"");
    }

    @Override"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testSetTime"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[2]:method_text:[   executeDeviceTestMethod("".TimeManagementTest"", ""testSetTime_failWhenAutoTimeEnabled"");    }   ]) :|: 
    public void testSetTime() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".TimeManagementTest"", ""testSetTime"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_TIME_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .build());

        executeDeviceTestMethod("".TimeManagementTest"", ""testSetTime_failWhenAutoTimeEnabled"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testSetTimeZone"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([5:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[5]:method_text:[new ArrayList<>();        result.add(DELEGATION_NETWORK_LOGGING);        return result;    }   ]) :|: 
    public void testSetTimeZone() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".TimeManagementTest"", ""testSetTimeZone"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_TIME_ZONE_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .build());

        executeDeviceTestMethod("".TimeManagementTest"", ""testSetTimeZone_failIfAutoTimeZoneEnabled"");
    }

    Map<String, DevicePolicyEventWrapper[]> getAdditionalDelegationTests() {
        final Map<String, DevicePolicyEventWrapper[]> result = new HashMap<>();
        DevicePolicyEventWrapper[] expectedMetrics = new DevicePolicyEventWrapper[] {
                new DevicePolicyEventWrapper.Builder(EventId.SET_NETWORK_LOGGING_ENABLED_VALUE)
                        .setAdminPackageName(DELEGATE_APP_PKG)
                        .setBoolean(true)
                        .setInt(1)
                        .setStrings(LOG_TAG_DEVICE_OWNER)
                        .build(),
                new DevicePolicyEventWrapper.Builder(EventId.RETRIEVE_NETWORK_LOGS_VALUE)
                        .setAdminPackageName(DELEGATE_APP_PKG)
                        .setBoolean(true)
                        .setStrings(LOG_TAG_DEVICE_OWNER)
                        .build(),
                new DevicePolicyEventWrapper.Builder(EventId.SET_NETWORK_LOGGING_ENABLED_VALUE)
                        .setAdminPackageName(DELEGATE_APP_PKG)
                        .setBoolean(true)
                        .setInt(0)
                        .setStrings(LOG_TAG_DEVICE_OWNER)
                        .build(),
        };
        result.put("".NetworkLoggingDelegateTest"", expectedMetrics);
        return result;
    }

    @Override
    List<String> getAdditionalDelegationScopes() {
        final List<String> result = new ArrayList<>();
        result.add(DELEGATION_NETWORK_LOGGING);
        return result;
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testLockScreenInfo"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[2]:method_text:[_VALUE)                .setAdminPackageName(DEVICE_ADMIN_PKG)                .build());    }   ]) :|: 
    public void testLockScreenInfo() throws Exception {
        executeDeviceTestClass("".LockScreenInfoTest"");

        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".LockScreenInfoTest"", ""testSetAndGetLockInfo"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_DEVICE_OWNER_LOCK_SCREEN_INFO_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testFactoryResetProtectionPolicy"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[2]:method_text:[_VALUE)                .setAdminPackageName(DEVICE_ADMIN_PKG)                .build());    }   ]) :|: 
    public void testFactoryResetProtectionPolicy() throws Exception {
        try {
            executeDeviceTestMethod("".DeviceFeatureUtils"", ""testHasFactoryResetProtectionPolicy"");
        } catch (AssertionError e) {
            // Unable to continue running tests because factory reset protection policy is not
            // supported on the device
            return;
        } catch (Exception e) {
            // Also skip test in case of other exceptions
            return;
        }

        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestClass("".FactoryResetProtectionPolicyTest"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_FACTORY_RESET_PROTECTION_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testInstallUpdateLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[2]:method_text:[   executeDeviceTestMethodOnDeviceOwnerUser("".systemupdate.InstallUpdateTest"", testName);    }   ]) :|: 
    public void testInstallUpdateLogged() throws Exception {
        assumeIsDeviceAb();

        pushUpdateFileToDevice(""wrongHash.zip"");
        assertMetricsLogged(getDevice(), () -> {
            executeInstallUpdateTest(""testInstallUpdate_failWrongHash"");
        }, new DevicePolicyEventWrapper.Builder(EventId.INSTALL_SYSTEM_UPDATE_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(/* isDeviceAb */ true)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.INSTALL_SYSTEM_UPDATE_ERROR_VALUE)
                    .setInt(UPDATE_ERROR_UPDATE_FILE_INVALID)
                    .build());
    }

    private void executeInstallUpdateTest(String testName) throws Exception {
        // This test must run on system user as it calls installSystemUpdate(), which takes a
        // Runnable callback (InstallSystemUpdateCallback) and hence it cannot be easily passed
        // around through IPC (on headless system user mode).
        executeDeviceTestMethodOnDeviceOwnerUser("".systemupdate.InstallUpdateTest"", testName);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testSecurityLoggingEnabledLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[4]:method_text:[e(DEVICE_ADMIN_PKG)                    .setBoolean(false)                    .build());    }   ]) :|: 
    public void testSecurityLoggingEnabledLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".SecurityLoggingTest"", ""testEnablingSecurityLogging"");
            executeDeviceTestMethod("".SecurityLoggingTest"", ""testDisablingSecurityLogging"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_SECURITY_LOGGING_ENABLED_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(true)
                .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_SECURITY_LOGGING_ENABLED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(false)
                    .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testSetStorageEncryption"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[1]:method_text:[me, testClassName,                    ""testDisablingSecurityLogging"", userId);        }    }   ]) :|: 
    public void testSetStorageEncryption() throws Exception {
        Map<String, String> params =
                ImmutableMap.of(IS_SYSTEM_USER_PARAM, String.valueOf(/* isSystemUser= */ true));
        runDeviceTestsAsUser(
                DEVICE_ADMIN_PKG, STORAGE_ENCRYPTION_TEST_CLASS, null, mDeviceOwnerUserId, params);
    }

    private void runSecurityLoggingTests(String packageName, String testClassName)
            throws Exception {
        int userId = mDeviceOwnerUserId;
        try {
            // Turn logging on.
            runDeviceTestsAsUser(packageName, testClassName, ""testEnablingSecurityLogging"", userId);
            // Reboot to ensure ro.organization_owned is set to true in logd and logging is on.
            rebootAndWaitUntilReady();
            waitForUserUnlock(userId);

            // Generate various types of events on device side and check that they are logged.
            runDeviceTestsAsUser(packageName, testClassName, ""testGenerateLogs"", userId);
            runDeviceTestsAsUser(packageName, testClassName, ""testVerifyGeneratedLogs"", userId);

            // Immediately attempting to fetch events again should fail.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testSecurityLoggingRetrievalRateLimited"", userId);
        } finally {
            // Turn logging off.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testDisablingSecurityLogging"", userId);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testAdminControlOverSensorPermissionGrantsDefault"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[3]:method_text:[rmissionGrantTest"",                ""testAdminCanGrantSensorsPermissions"");    }    @Override   ]) :|: 
    public void testAdminControlOverSensorPermissionGrantsDefault() throws Exception {
        // In Device Owner mode, by default, admin should be able to grant sensors-related
        // permissions.
        executeDeviceTestMethod("".SensorPermissionGrantTest"",
                ""testAdminCanGrantSensorsPermissions"");
    }

    @Override"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testStateOfSensorsRelatedPermissionsCannotBeRead"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[1]:method_text:[n state.    }    //TODO(b/180413140) Investigate why the test fails on DO mode.    @Override   ]) :|: 
    public void testStateOfSensorsRelatedPermissionsCannotBeRead() throws Exception {
        // Skip because in DO mode the admin can read permission state.
    }

    //TODO(b/180413140) Investigate why the test fails on DO mode.
    @Override"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testCreateAdminSupportIntent"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[2]:method_text:[rtIntent() throws Exception {        super.testCreateAdminSupportIntent();    }    @Override   ]) :|: 
    @IgnoreOnHeadlessSystemUserMode(reason = ""Headless system user doesn't launch activities"")
    public void testCreateAdminSupportIntent() throws Exception {
        super.testCreateAdminSupportIntent();
    }

    @Override"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testDisallowAutofill_allowed"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([5:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[admin]:[5]:method_text:[ser(                DEVICE_ADMIN_PKG, "".AffiliationTest"", ""testSetAffiliationId1"", userId);    }}]) :|: 
    @IgnoreOnHeadlessSystemUserMode(reason = ""Headless system user doesn't launch activities"")
    public void testDisallowAutofill_allowed() throws Exception {
        super.testDisallowAutofill_allowed();
    }

    @Override
    public void testApplicationHidden() throws Exception {
        if (isHeadlessSystemUserMode()) {
            // Must run on user 0 because the test has a broadcast receiver that listen to packages
            // added / removed intents
            mUserId = mDeviceOwnerUserId;
            CLog.d(""testApplicationHidden(): setting mUserId as %d before running it"", mUserId);
        }
        super.testApplicationHidden();
    }

    @Override
    protected void installDelegateApp() throws Exception {
        // TODO(b/176993670): must call installDeviceOwnerApp() - even though it's not one - so
        // the permissions required to use DpmWrapper are set on headless system user mode
        installDeviceOwnerApp(DELEGATE_APP_APK);
    }

    @Override
    protected void runDeviceTestsAsUser(String pkgName, String testClassName, String testName,
            int userId, Map<String, String> params) throws DeviceNotAvailableException {
        Map<String, String> newParams = new HashMap(params);
        newParams.putAll(getParamsForDeviceOwnerTest());
        super.runDeviceTestsAsUser(
                pkgName, testClassName, testName, userId, newParams);
    }

    @Override
    protected void executeDeviceTestMethod(String className, String testName,
            Map<String, String> params) throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, testName, mUserId, params);
    }

    private void executeDeviceTestMethodOnDeviceOwnerUser(String className, String testName)
            throws Exception {
        executeDeviceTestMethod(className, testName, mDeviceOwnerUserId,
                /* params= */ new HashMap<>());
    }

    private void configureNotificationListener() throws DeviceNotAvailableException {
        g"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.CustomDeviceOwnerTest"	"testOwnerChangedBroadcast"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/CustomDeviceOwnerTest.java]:[admin]:[3]:method_text:[                removeAdmin(DEVICE_OWNER_ADMIN_COMPONENT, mDeviceOwnerUserId));        }    }   ]) :|: 
    public void testOwnerChangedBroadcast() throws Exception {
        installAppAsUser(DEVICE_OWNER_APK, mDeviceOwnerUserId);
        try {
            installAppAsUser(INTENT_RECEIVER_APK, mDeviceOwnerUserId);

            String testClass = INTENT_RECEIVER_PKG + "".OwnerChangedBroadcastTest"";

            // Running this test also gets the intent receiver app out of the stopped state, so it
            // can receive broadcast intents.
            runDeviceTestsAsUser(INTENT_RECEIVER_PKG, testClass,
                    ""testOwnerChangedBroadcastNotReceived"", mDeviceOwnerUserId);

            // Setting the device owner should send the owner changed broadcast.
            assertTrue(setDeviceOwner(DEVICE_OWNER_ADMIN_COMPONENT, mDeviceOwnerUserId,
                    /*expectFailure*/ false));

            // Wait broadcast idle to ensure the owner changed broadcast has been sent.
            waitForBroadcastIdle();

            runDeviceTestsAsUser(INTENT_RECEIVER_PKG, testClass,
                    ""testOwnerChangedBroadcastReceived"", mDeviceOwnerUserId);
        } finally {
            getDevice().uninstallPackage(INTENT_RECEIVER_PKG);
            assertTrue(""Failed to remove device owner."",
                    removeAdmin(DEVICE_OWNER_ADMIN_COMPONENT, mDeviceOwnerUserId));
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CustomDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.CustomDeviceOwnerTest"	"testCannotSetDeviceOwnerWhenSecondaryUserPresent"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/CustomDeviceOwnerTest.java]:[admin]:[3]:method_text:[  removeAdmin(DEVICE_OWNER_ADMIN_COMPONENT, mDeviceOwnerUserId);        }    }    @FlakyTest   ]) :|: 
    public void testCannotSetDeviceOwnerWhenSecondaryUserPresent() throws Exception {
        assumeSupportsMultiUser();
        int userId = -1;
        installAppAsUser(DEVICE_OWNER_APK, mDeviceOwnerUserId);
        try {
            userId = createUser();
            assertFalse(setDeviceOwner(DEVICE_OWNER_ADMIN_COMPONENT, mDeviceOwnerUserId,
                    /*expectFailure*/ true));
        } finally {
            removeUser(userId);
            // make sure we clean up in case we succeeded in setting the device owner
            removeAdmin(DEVICE_OWNER_ADMIN_COMPONENT, mDeviceOwnerUserId);
        }
    }

    @FlakyTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CustomDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.CustomDeviceOwnerTest"	"testCannotSetDeviceOwnerWhenAccountPresent"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/CustomDeviceOwnerTest.java]:[admin]:[3]:method_text:[UtilsTest"",                    ""testRemoveAccountExplicitly"", mPrimaryUserId);        }    }   ]) :|: 
    public void testCannotSetDeviceOwnerWhenAccountPresent() throws Exception {
        installAppAsUser(ACCOUNT_MANAGEMENT_APK, mPrimaryUserId);
        installAppAsUser(DEVICE_OWNER_APK, mDeviceOwnerUserId);
        try {
            runDeviceTestsAsUser(ACCOUNT_MANAGEMENT_PKG, "".AccountUtilsTest"",
                    ""testAddAccountExplicitly"", mPrimaryUserId);
            assertFalse(setDeviceOwner(DEVICE_OWNER_ADMIN_COMPONENT, mDeviceOwnerUserId,
                    /*expectFailure*/ true));
        } finally {
            // make sure we clean up in case we succeeded in setting the device owner
            removeAdmin(DEVICE_OWNER_ADMIN_COMPONENT, mDeviceOwnerUserId);
            runDeviceTestsAsUser(ACCOUNT_MANAGEMENT_PKG, "".AccountUtilsTest"",
                    ""testRemoveAccountExplicitly"", mPrimaryUserId);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CustomDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"isHeadlessSystemUserMode"	"CtsDevicePolicyManagerTestCases"	"2: managed_users admin"	"([13:/com/android/cts/devicepolicy/UserRestrictionsTest.java]:[admin]:[13]:method_text:[          throws DeviceNotAvailableException {        runTests(className, null, userId);    }   ]) :|: /*
 *.
 */
package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import static org.junit.Assert.assertTrue;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;
import com.android.tradefed.device.DeviceNotAvailableException;
import com.android.tradefed.log.LogUtil.CLog;

import org.junit.Test;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

public class UserRestrictionsTest extends BaseDevicePolicyTest {
    private static final String DEVICE_ADMIN_PKG = ""com.android.cts.deviceandprofileowner"";
    private static final String DEVICE_ADMIN_APK = ""CtsDeviceAndProfileOwnerApp.apk"";
    private static final String ADMIN_RECEIVER_TEST_CLASS
            = "".BaseDeviceAdminTest$BasicAdminReceiver"";

    private static final String GLOBAL_RESTRICTIONS_TEST_CLASS =
            ""userrestrictions.ProfileGlobalRestrictionsTest"";
    private static final String SET_GLOBAL_RESTRICTIONS_TEST =
            ""testSetProfileGlobalRestrictions"";
    private static final String CLEAR_GLOBAL_RESTRICTIONS_TEST =
            ""testClearProfileGlobalRestrictions"";
    private static final String ENSURE_GLOBAL_RESTRICTIONS_TEST =
            ""testProfileGlobalRestrictionsEnforced"";
    private static final String ENSURE_NO_GLOBAL_RESTRICTIONS_TEST =
            ""testProfileGlobalRestrictionsNotEnforced"";

    private boolean mRemoveOwnerInTearDown;
    private int mDeviceOwnerUserId;

    @Override
    public void setUp() throws Exception {
        super.setUp();

        mRemoveOwnerInTearDown = false;
    }

    @Override
    public void tearDown() throws Exception {
        if (mRemoveOwnerInTearDown) {
            String componentName = DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS;
            assertTrue(""Failed to clear owner"", removeAdmin(componentName, mDeviceOwnerUserId));
            runTests(""userrestrictions.CheckNoOwnerRestriction"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"testUserRestrictions_secondaryProfileOwnerOnly"	"CtsDevicePolicyManagerTestCases"	"1: managed_users"	"([1:/com/android/cts/devicepolicy/UserRestrictionsTest.java]:[managed_users]:[1]:method_text:[hecks restrictions for managed profile.    @RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})   ]) :|: 
    public void testUserRestrictions_secondaryProfileOwnerOnly() throws Exception {
        assumeSupportsMultiUser();

        final int secondaryUserId = createUser();
        setPoAsUser(secondaryUserId);

        runTests(""userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"",
                ""testDefaultRestrictions"", secondaryUserId);
        runTests(""userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"",
                ""testSetAllRestrictions"", secondaryUserId);
        runTests(""userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"",
                ""testBroadcast"", secondaryUserId);
    }

    // Checks restrictions for managed profile.
    @RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"testUserRestrictions_profileGlobalRestrictionsAsDo"	"CtsDevicePolicyManagerTestCases"	"1: managed_users"	"([1:/com/android/cts/devicepolicy/UserRestrictionsTest.java]:[managed_users]:[1]:method_text:[should     * affect all users.     */    @RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})   ]) :|: 
    public void testUserRestrictions_profileGlobalRestrictionsAsDo() throws Exception {
        assumeSupportsMultiUser();
        setDo();
        final int secondaryUserId;
        if (!isHeadlessSystemUserMode()) {
            // Create another user and set PO.
            secondaryUserId = createUserAndWaitStart();
            setPoAsUser(secondaryUserId);
        } else {
            // In headless system user mode, PO is set on primary user when DO is set.
            secondaryUserId = mPrimaryUserId;
        }

        final int[] usersToCheck = {mDeviceOwnerUserId, secondaryUserId};

        // Do sets the restriction.
        setAndCheckProfileGlobalRestriction(mDeviceOwnerUserId, usersToCheck);
    }

    /**
     * Managed profile owner sets profile global restrictions (only ENSURE_VERIFY_APPS), should
     * affect all users.
     */
    @RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"testUserRestrictions_ProfileGlobalRestrictionsAsPo"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([9:/com/android/cts/devicepolicy/UserRestrictionsTest.java]:[admin]:[9]:method_text:[throws Exception {        runTests(GLOBAL_RESTRICTIONS_TEST_CLASS, testMethodName, userId);    }}]) :|: 
    public void testUserRestrictions_ProfileGlobalRestrictionsAsPo() throws Exception {
        assumeCanCreateOneManagedUser();

        // Set PO on user 0
        setPoAsUser(mDeviceOwnerUserId);

        // Create another user with PO.
        final int secondaryUserId = createManagedProfile(mDeviceOwnerUserId /* parentUserId */);
        setPoAsUser(secondaryUserId);

        final int[] usersToCheck = {mDeviceOwnerUserId, secondaryUserId};

        // Check the case when primary user's PO sets the restriction.
        setAndCheckProfileGlobalRestriction(mDeviceOwnerUserId, usersToCheck);

        // Check the case when managed profile owner sets the restriction.
        setAndCheckProfileGlobalRestriction(secondaryUserId, usersToCheck);
    }

    /** Installs admin package and makes it a profile owner for a given user. */
    private void setPoAsUser(int userId) throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, /* grantPermssions= */true,
                /* dontKillApp= */ true, userId);
        assertTrue(""Failed to set profile owner"",
                setProfileOwner(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,
                        userId, /* expectFailure */ false));
        // If PO is not in primary user, it will be removed with the user.
        if (userId == mDeviceOwnerUserId) {
            mRemoveOwnerInTearDown = true;
        }
    }

    /** Installs admin package and makes it a device owner. */
    private void setDo() throws Exception {
        installDeviceOwnerApp(DEVICE_ADMIN_APK);

        assertTrue(""Failed to set device owner"",
                setDeviceOwner(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,
                        mDeviceOwnerUserId, /*expectFailure*/ false));
        mRemoveOwnerInTearDown = true;

        if (isHeadlessSystemUserMode()) {
            affiliateUsers(DEVICE_ADMIN_PKG, mDeviceOwnerUserId, mPrimaryUserId);
        }
    }

    /**
     * Sets user restriction and checks that it applie"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.BaseDeviceAdminServiceTest"	"testAll"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([21:/com/android/cts/devicepolicy/BaseDeviceAdminServiceTest.java]:[admin]:[21]:method_text:[stem}    conn=android.app.LoadedApk$ServiceDispatcher$InnerConnection@51e9080 flags=0x4000001 */}]) :|: 
    public void testAll() throws Throwable {
        // Install
        CLog.i(""Installing apk1 (%s)..."", OWNER_APK_1);
        installOwnerApp(OWNER_APK_1);

        CLog.i(""Making it (%s) a device/profile owner..."", OWNER_COMPONENT);
        setAsOwnerOrFail(OWNER_COMPONENT);

        withRetry(() -> assertServiceBound(OWNER_SERVICE));

        // Remove admin.
        CLog.i(""Removing admin..."");
        removeAdmin(OWNER_COMPONENT);
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE));

        // Overwrite -> update.
        CLog.i(""Re-installing apk1..."");
        installOwnerApp(OWNER_APK_1);

        CLog.i(""Making it a device/profile owner..."");
        setAsOwnerOrFail(OWNER_COMPONENT);
        withRetry(() -> assertServiceBound(OWNER_SERVICE));

        CLog.i(""Installing apk2 (%s)..."", OWNER_APK_2);
        installOwnerApp(OWNER_APK_2);
        withRetry(() -> assertServiceBound(OWNER_SERVICE)); // Should still be bound.

        // Service exported -> not bound.
        CLog.i(""Installing apk3 (%s)..."", OWNER_APK_3);
        installOwnerApp(OWNER_APK_3);
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE));

        // Recover.
        CLog.i(""Installing apk2 again..."");
        installOwnerApp(OWNER_APK_2);
        withRetry(() -> assertServiceBound(OWNER_SERVICE));

        // Multiple service found -> not bound.
        CLog.i(""Installing apk4 (%s)..."", OWNER_APK_4);
        installOwnerApp(OWNER_APK_4);
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE));
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE2));

        // Disable service1 -> now there's only one service, so should be bound.
        CLog.i(""Running testDisableService1..."");
        executeDeviceTestMethod("".ComponentController"", ""testDisableService1"");
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE));
        withRetry(() -> assertServiceBound(OWNER_SERVICE2));

        CLog.i(""Running testDisableService2..."");
        executeDeviceTe"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/BaseDeviceAdminServiceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.QuietModeHostsideTest"	"wakeupAndDismissKeyguard"	"CtsDevicePolicyManagerTestCases"	"2: managed_users admin"	"([2:/com/android/cts/devicepolicy/QuietModeHostsideTest.java]:[admin]:[2]:method_text:[vice().uninstallPackage(TEST_LAUNCHER_PACKAGE);        super.tearDown();    }    @LargeTest   ]) :|: package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import static com.google.common.truth.Truth.assertThat;

import android.platform.test.annotations.LargeTest;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;
import com.android.tradefed.device.DeviceNotAvailableException;

import org.junit.Test;

import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;

/**
 * CTS to verify toggling quiet mode in work profile by using
 * {@link android.os.UserManager#requestQuietModeEnabled(boolean, android.os.UserHandle)}.
 */
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class QuietModeHostsideTest extends BaseDevicePolicyTest {
    private static final String TEST_PACKAGE = ""com.android.cts.launchertests"";
    private static final String TEST_CLASS = "".QuietModeTest"";
    private static final String PARAM_TARGET_USER = ""TARGET_USER"";
    private static final String PARAM_ORIGINAL_DEFAULT_LAUNCHER = ""ORIGINAL_DEFAULT_LAUNCHER"";
    private static final String TEST_APK = ""CtsLauncherAppsTests.apk"";

    private static final String TEST_LAUNCHER_PACKAGE = ""com.android.cts.launchertests.support"";
    private static final String TEST_LAUNCHER_APK = ""CtsLauncherAppsTestsSupport.apk"";
    private static final String ENABLED_TEST_APK = ""CtsCrossProfileEnabledApp.apk"";
    private static final String USER_ENABLED_TEST_APK = ""CtsCrossProfileUserEnabledApp.apk"";
    private static final String ENABLED_NO_PERMS_TEST_APK = ""CtsCrossProfileEnabledNoPermsApp.apk"";
    private static final String QUIET_MODE_ENABLED_TEST_APK = ""CtsModifyQuietModeEnabledApp.apk"";
    private static final String NOT_ENABLED_TEST_APK = ""CtsCrossProfileNotEnabledApp.apk"";
    private static final String ENABLED_TEST_PACKAGE = ""com.android.cts.crossprofileenabledapp"";
    private static final String USER_ENABLED_TEST_PACKAGE =
            ""com.a"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"assumeTestEnabled"	"CtsDevicePolicyManagerTestCases"	"2: managed_users admin"	"([5:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[admin]:[5]:method_text:[  @Before    @Override    public void setUp() throws Exception {        super.setUp();    }   ]) :|: /*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;

import org.junit.Before;
import org.junit.Test;

import java.util.Collections;
import java.util.Map;

/**
 * Tests to verify
 * {@link android.content.pm.crossprofile.CrossProfileApps#canRequestInteractAcrossProfiles()},
 * {@link android.content.pm.crossprofile.CrossProfileApps#canInteractAcrossProfiles()}, and
 * {@link
 * android.content.pm.crossprofile.CrossProfileApps#createRequestInteractAcrossProfilesIntent()}.
 *
 * The rest of the tests for {@link android.content.pm.crossprofile.CrossProfileApps}
 * can be found in {@link CrossProfileAppsHostSideTest}.
 */
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class CrossProfileAppsPermissionHostSideTest extends BaseDevicePolicyTest {
    private static final String TEST_WITH_REQUESTED_PERMISSION_PACKAGE =
            ""com.android.cts.crossprofileappstest"";
    private static final String TEST_WITH_REQUESTED_PERMISSION_CLASS =
            "".CrossProfileAppsPermissionToInteractTest"";
    private static final String TEST_WITH_REQUESTED_PERMISSION_APK = ""CtsCrossProfileAppsTests.apk"";
    private static final String TEST_WITH_REQUESTED_PERMISSION_RECEIVER_TEST_CLASS =
            TEST_WITH_REQUESTED_PERMISSION_PACKAGE + "".AdminReceiver"";

    private static final String TEST_WITH_NO_REQUESTED_PERMISSION_PACKAGE =
            ""com.android.cts.crossprofilenopermissionappstest"";
    private static final String TEST_WITH_NO_REQUESTED_PERMISSION_CLASS =
            "".CrossProfileAppsWithNoPermission"";
    private static final String TEST_WITH_NO_REQUESTED_PERMISSION_APK =
            ""CtsCrossProfileAppsWithNoPermissionTests.apk"";

    private static final String MANAGED_PROFILE_PKG = ""com.android.cts.managedprofile"";
    private static final String MANAGED_PROFILE_APK"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_packageNotInstalled_returnsTrue"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[admin]:[1]:method_text:[les_returnsTrue"",                mPrimaryUserId,                Collections.EMPTY_MAP);    }   ]) :|: 
    public void testCanRequestInteractAcrossProfiles_packageNotInstalled_returnsTrue()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        mProfileId = createManagedProfile(mPrimaryUserId);
        getDevice().startUser(mProfileId, /*waitFlag= */true);
        installAppAsUser(MANAGED_PROFILE_APK, mProfileId);
        setProfileOwnerOrFail(MANAGED_PROFILE_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,
                mProfileId);
        addDefaultCrossProfilePackage(mProfileId, TEST_WITH_REQUESTED_PERMISSION_PACKAGE);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanRequestInteractAcrossProfiles_returnsTrue"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCreateRequestInteractAcrossProfilesIntent_canNotRequestInteraction_throwsSecurityException"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[admin]:[1]:method_text:[geName) {        return Collections.singletonMap(PARAM_CROSS_PROFILE_PACKAGE, packageName);    }}]) :|: 
    public void testCreateRequestInteractAcrossProfilesIntent_canNotRequestInteraction_throwsSecurityException()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCreateRequestInteractAcrossProfilesIntent_canNotRequestInteraction_throwsSecurityException"",
                mProfileId,
                Collections.EMPTY_MAP);
    }

    private void addManagedProfileAndInstallRequiredPackages(String testPackage) throws Exception {
        mProfileId = createManagedProfile(mPrimaryUserId);
        getDevice().startUser(mProfileId, /*waitFlag= */true);

        installAppAsUser(testPackage, mProfileId);

        installAppAsUser(MANAGED_PROFILE_APK, mProfileId);
        setProfileOwnerOrFail(MANAGED_PROFILE_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,
                mProfileId);
    }

    private void addDefaultCrossProfilePackage(int userId, String packageName)
            throws Exception {
        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG,
                "".CrossProfileUtils"",
                ""testSetCrossProfilePackages"",
                userId,
                createCrossProfilePackageParam(packageName));
    }

    private Map<String, String> createCrossProfilePackageParam(String packageName) {
        return Collections.singletonMap(PARAM_CROSS_PROFILE_PACKAGE, packageName);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ProfileOwnerTest"	"testAdminActionBookkeeping"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/ProfileOwnerTest.java]:[admin]:[2]:method_text:[eping() throws Exception {        executeProfileOwnerTest(""AdminActionBookkeepingTest"");    }   ]) :|: 
    public void testAdminActionBookkeeping() throws Exception {
        executeProfileOwnerTest(""AdminActionBookkeepingTest"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.ProfileOwnerTest"	"testDevicePolicySafetyCheckerIntegration_onOperationSafetyStateChanged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/ProfileOwnerTest.java]:[admin]:[2]:method_text:[            PROFILE_OWNER_PKG + ""."" + ""DevicePolicySafetyCheckerIntegrationTest"", testName);    }}]) :|: 
    public void testDevicePolicySafetyCheckerIntegration_onOperationSafetyStateChanged()
            throws Exception {
        executeDevicePolicySafetyCheckerIntegrationTest(""testOnOperationSafetyStateChanged"");
    }

    @Override
    public void tearDown() throws Exception {
        assertTrue(""Failed to remove profile owner."",
                removeAdmin(PROFILE_OWNER_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mUserId));
        getDevice().uninstallPackage(PROFILE_OWNER_PKG);

        super.tearDown();
    }

    private void executeProfileOwnerTest(String testClassName) throws Exception {
        String testClass = PROFILE_OWNER_PKG + ""."" + testClassName;
        runDeviceTestsAsUser(PROFILE_OWNER_PKG, testClass, mPrimaryUserId);
    }

    protected void executeProfileOwnerTestMethod(String className, String testName)
            throws Exception {
        runDeviceTestsAsUser(PROFILE_OWNER_PKG, className, testName, mUserId);
    }

    private void executeDevicePolicySafetyCheckerIntegrationTest(String testName) throws Exception {
        executeProfileOwnerTestMethod(
                PROFILE_OWNER_PKG + ""."" + ""DevicePolicySafetyCheckerIntegrationTest"", testName);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testPermissionGrantOfDisallowedPermissionWhileOtherPermIsGranted"	"CtsDevicePolicyManagerTestCases"	"1: granted"	"([2:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[granted]:[2]:method_text:[ption {        super.testPermissionGrantOfDisallowedPermissionWhileOtherPermIsGranted();    }   ]) :|: 
    public void testPermissionGrantOfDisallowedPermissionWhileOtherPermIsGranted()
            throws Exception {
        super.testPermissionGrantOfDisallowedPermissionWhileOtherPermIsGranted();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testSetKeyguardDisabledFeatures"	"CtsDevicePolicyManagerTestCases"	"2: silent admin"	"([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[admin]:[1]:method_text:[isabledFeatures_onParentSilentIgnoreWhenCallerIsNotOrgOwnedPO"",                mUserId);    }   ]) :|: 
    @Override
    public void testSetKeyguardDisabledFeatures() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".KeyguardDisabledFeaturesTest"",
                ""testSetKeyguardDisabledFeatures_onParentSilentIgnoreWhenCallerIsNotOrgOwnedPO"",
                mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testAudioRestriction"	"CtsDevicePolicyManagerTestCases"	"1: microphone"	"([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[microphone]:[1]:method_text:[OLUME can only be set by device owners        // and profile owners on the primary user.    }   ]) :|: 
    public void testAudioRestriction() throws Exception {
        // DISALLOW_UNMUTE_MICROPHONE and DISALLOW_ADJUST_VOLUME can only be set by device owners
        // and profile owners on the primary user.
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"removeTestUsers"	"CtsDevicePolicyManagerTestCases"	"2: managed_users admin"	"([6:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[admin]:[6]:method_text:[s in the primary user when the policy     * is set on the profile owner.     */    @LargeTest   ]) :|: /*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import android.platform.test.annotations.FlakyTest;
import android.platform.test.annotations.LargeTest;
import android.stats.devicepolicy.EventId;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;
import com.android.cts.devicepolicy.annotations.LockSettingsTest;
import com.android.cts.devicepolicy.annotations.PermissionsTest;
import com.android.cts.devicepolicy.metrics.DevicePolicyEventLogVerifier;
import com.android.cts.devicepolicy.metrics.DevicePolicyEventWrapper;
import com.android.tradefed.device.DeviceNotAvailableException;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

/**
 * Set of tests for managed profile owner use cases that also apply to device owners.
 * Tests that should be run identically in both cases are added in DeviceAndProfileOwnerTest.
 */
// We need managed users to be supported in order to create a profile of the user owner.
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class MixedManagedProfileOwnerTest extends DeviceAndProfileOwnerTest {

    private static final String CLEAR_PROFILE_OWNER_NEGATIVE_TEST_CLASS =
            DEVICE_ADMIN_PKG + "".ClearProfileOwnerNegativeTest"";

    private static final String DELEGATION_NETWORK_LOGGING = ""delegation-network-logging"";

    private int mParentUserId = -1;

    @Override
    public void setUp() throws Exception {
        super.setUp();

        removeTestUsers();
        mParentUserId = mPrimaryUserId;
        createManagedProfile();
    }

    private void createManagedProfile() throws Exception {
        mUserId = createManagedProfile(mParentUserId);
        switchUser(mParentUserId);
        startUserAndWait(mUserId);

        installAppAsUser(DEVICE_ADMIN_APK, mUserId);
        setProfileOwnerOrFail(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mUserId"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testScreenCaptureDisabled_allowedPrimaryUser"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[admin]:[1]:method_text:[viceTestMethod("".ScreenCaptureDisabledTest"", ""testScreenCapturePossible"");    }    @FlakyTest   ]) :|: 
    public void testScreenCaptureDisabled_allowedPrimaryUser() throws Exception {
        // disable screen capture in profile
        setScreenCaptureDisabled(mUserId, true);

        // start the ScreenCaptureDisabledActivity in the parent
        installAppAsUser(DEVICE_ADMIN_APK, mParentUserId);
        startSimpleActivityAsUser(mParentUserId);
        executeDeviceTestMethod("".ScreenCaptureDisabledTest"", ""testScreenCapturePossible"");
    }

    @FlakyTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testScreenCaptureDisabled_assist_allowedPrimaryUser"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[admin]:[2]:method_text:[tureDisabled_false"");            clearVoiceInteractionService();        }    }    @Override   ]) :|: 
    public void testScreenCaptureDisabled_assist_allowedPrimaryUser() throws Exception {
        // disable screen capture in profile
        executeDeviceTestMethod("".ScreenCaptureDisabledTest"", ""testSetScreenCaptureDisabled_true"");
        try {
            // Install and enable assistant in personal side.
            installAppAsUser(ASSIST_APP_APK, mParentUserId);
            waitForBroadcastIdle();
            setVoiceInteractionService(ASSIST_INTERACTION_SERVICE);

            // Start an activity in parent user.
            installAppAsUser(DEVICE_ADMIN_APK, mParentUserId);
            waitForBroadcastIdle();
            startSimpleActivityAsUser(mParentUserId);

            // Verify assistant app can't take a screenshot.
            runDeviceTestsAsUser(
                    DEVICE_ADMIN_PKG,
                    "".AssistScreenCaptureDisabledTest"",
                    ""testScreenCapturePossible_assist"",
                    mPrimaryUserId);
        } finally {
            // enable screen capture in profile
            executeDeviceTestMethod(
                    "".ScreenCaptureDisabledTest"",
                    ""testSetScreenCaptureDisabled_false"");
            clearVoiceInteractionService();
        }
    }

    @Override"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testCannotClearProfileOwner"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[admin]:[3]:method_text:[%s'"",                    mUserId, DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS));    }   ]) :|: 
    public void testCannotClearProfileOwner() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, CLEAR_PROFILE_OWNER_NEGATIVE_TEST_CLASS, mUserId);
    }

    private void markProfileOwnerOnOrganizationOwnedDevice() throws DeviceNotAvailableException {
        getDevice().executeShellCommand(
                String.format(""dpm mark-profile-owner-on-organization-owned-device --user %d '%s'"",
                    mUserId, DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS));

    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testDeviceIdAttestationForProfileOwner"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[admin]:[1]:method_text:[ case lives in        // OrgOwnedProfileOwnerTest#testDeviceIdAttestationForProfileOwner    }   ]) :|: 
    public void testDeviceIdAttestationForProfileOwner() throws Exception {
        // Test that Device ID attestation for the profile owner does not work without grant.
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DeviceIdAttestationTest"",
                ""testFailsWithoutProfileOwnerIdsGrant"", mUserId);
        // Positive test case lives in
        // OrgOwnedProfileOwnerTest#testDeviceIdAttestationForProfileOwner
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testWifiMacAddress"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[admin]:[1]:method_text:["".WifiTest"", ""testCannotGetWifiMacAddress"", mUserId);    }    @Override    @LockSettingsTest   ]) :|: 
    public void testWifiMacAddress() throws Exception {
        assumeHasWifiFeature();

        runDeviceTestsAsUser(
                DEVICE_ADMIN_PKG, "".WifiTest"", ""testCannotGetWifiMacAddress"", mUserId);
    }

    @Override
    @LockSettingsTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testNetworkLogging"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[admin]:[2]:method_text:[serId);        testNetworkLoggingOnWorkProfile(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"");    }   ]) :|: 
    public void testNetworkLogging() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        testNetworkLoggingOnWorkProfile(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testNetworkLoggingDelegate"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[admin]:[4]:method_text:[ = new ArrayList<>();        result.add(DELEGATION_NETWORK_LOGGING);        return result;    }}]) :|: 
    public void testNetworkLoggingDelegate() throws Exception {
        installAppAsUser(DELEGATE_APP_APK, mUserId);
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        try {
            runDeviceTestsAsUser(DELEGATE_APP_PKG, "".WorkProfileNetworkLoggingDelegateTest"",
                    ""testCannotAccessApis"", mUserId);
            // Set network logging delegate
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"",
                    ""testSetDelegateScope_delegationNetworkLogging"", mUserId);

            testNetworkLoggingOnWorkProfile(DELEGATE_APP_PKG,
                    "".WorkProfileNetworkLoggingDelegateTest"");
        } finally {
            // Remove network logging delegate
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"",
                    ""testSetDelegateScope_noDelegation"", mUserId);
        }
    }

    private void testNetworkLoggingOnWorkProfile(String packageName, String testClassName)
            throws Exception {
        try {
            // Turn network logging on.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testSetNetworkLogsEnabled_true"", mUserId);

            // Connect to websites from work profile, should be logged.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testConnectToWebsites_shouldBeLogged"", mUserId);
            // Connect to websites from personal profile, should not be logged.
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"",
                    ""testConnectToWebsites_shouldNotBeLogged"", mPrimaryUserId);

            // Verify all work profile network logs have been received.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testRetrieveNetworkLogs_forceNetworkLogs_receiveNetworkLogs"", mUserId);
        } finally {
            // Turn network logging off.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""test"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPermissionGrant"	"CtsDevicePolicyManagerTestCases"	"1: granted"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[granted]:[2]:method_text:[ssionsTest"",                ""testPermissionGrantStateGranted_permissionRemainsGranted"");    }   ]) :|: 
    public void testPermissionGrant() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionGrantStateDenied_permissionRemainsDenied"");
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionGrantStateGranted_permissionRemainsGranted"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testGrantOfSensorsRelatedPermissions"	"CtsDevicePolicyManagerTestCases"	"1: granted"	"([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[granted]:[1]:method_text:[cuteDeviceTestMethod("".PermissionsTest"", ""testSensorsRelatedPermissionsCannotBeGranted"");    }   ]) :|: 
    public void testGrantOfSensorsRelatedPermissions() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testSensorsRelatedPermissionsCannotBeGranted"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSensorsRelatedPermissionsNotGrantedViaPolicy"	"CtsDevicePolicyManagerTestCases"	"1: granted"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[granted]:[2]:method_text:[("".PermissionsTest"",                ""testSensorsRelatedPermissionsNotGrantedViaPolicy"");    }   ]) :|: 
    public void testSensorsRelatedPermissionsNotGrantedViaPolicy() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"",
                ""testSensorsRelatedPermissionsNotGrantedViaPolicy"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPermissionMixedPolicies"	"CtsDevicePolicyManagerTestCases"	"1: granted"	"([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[granted]:[1]:method_text:[hod("".PermissionsTest"",                ""testPermissionGrantStateGranted_mixedPolicies"");    }   ]) :|: 
    public void testPermissionMixedPolicies() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionGrantStateDenied_mixedPolicies"");
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionGrantStateGranted_mixedPolicies"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPermissionGrantOfDisallowedPermissionWhileOtherPermIsGranted"	"CtsDevicePolicyManagerTestCases"	"1: granted"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[granted]:[2]:method_text:[issionsTest"",                ""testPermissionGrantStateDenied_otherPermissionIsGranted"");    }   ]) :|: 
    public void testPermissionGrantOfDisallowedPermissionWhileOtherPermIsGranted()
            throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionGrantStateDenied_otherPermissionIsGranted"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPermissionAppUpdate"	"CtsDevicePolicyManagerTestCases"	"1: granted"	"([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[granted]:[1]:method_text:[sUser();        executeDeviceTestMethod("".PermissionsTest"", ""testCanRequestPermission"");    }   ]) :|: 
    public void testPermissionAppUpdate() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionGrantStateDenied"");
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testCannotRequestPermission"");

        assertNull(getDevice().uninstallPackage(PERMISSIONS_APP_PKG));
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionGrantStateGranted"");
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testCanRequestPermission"");

        assertNull(getDevice().uninstallPackage(PERMISSIONS_APP_PKG));
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionPolicyAutoDeny"");
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testCannotRequestPermission"");

        assertNull(getDevice().uninstallPackage(PERMISSIONS_APP_PKG));
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionPolicyAutoGrant"");
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testCanRequestPermission"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testDelegatedCertInstallerDirectly"	"CtsDevicePolicyManagerTestCases"	"3: granted silent silently"	"([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[silently]:[1]:method_text:[test generates a key pair and validates that an app can be silently granted    // access to it.   ]) :|: 
    public void testDelegatedCertInstallerDirectly() throws Exception {
        assumeTrue(mHasAttestation);

        setUpDelegatedCertInstallerAndRunTests(() ->
            runDeviceTestsAsUser(""com.android.cts.certinstaller"",
                    "".DirectDelegatedCertInstallerTest"", mUserId));
    }

    // This test generates a key pair and validates that an app can be silently granted
    // access to it."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetPermissionGrantStateLogged"	"CtsDevicePolicyManagerTestCases"	"2: granted admin"	"([6:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[6]:method_text:[           .setStrings(""android.permission.READ_CONTACTS"")                    .build());    }   ]) :|: 
    public void testSetPermissionGrantStateLogged() throws Exception {
        installAppPermissionAppAsUser();
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod(
                    "".DevicePolicyLoggingTest"", ""testSetPermissionGrantStateLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_PERMISSION_GRANT_STATE_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(PERMISSION_GRANT_STATE_GRANTED)
                    .setBoolean(false)
                    .setStrings(""android.permission.READ_CONTACTS"")
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_PERMISSION_GRANT_STATE_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(PERMISSION_GRANT_STATE_DENIED)
                    .setBoolean(false)
                    .setStrings(""android.permission.READ_CONTACTS"")
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_PERMISSION_GRANT_STATE_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(PERMISSION_GRANT_STATE_DEFAULT)
                    .setBoolean(false)
                    .setStrings(""android.permission.READ_CONTACTS"")
                    .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAddNetworkWithKeychainKey_granted"	"CtsDevicePolicyManagerTestCases"	"1: granted"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[granted]:[2]:method_text:[;        executeDeviceTestMethod("".WifiTest"", ""testAddNetworkWithKeychainKey_granted"");    }   ]) :|: 
    public void testAddNetworkWithKeychainKey_granted() throws Exception {
        assumeHasWifiFeature();

        executeDeviceTestMethod("".WifiTest"", ""testAddNetworkWithKeychainKey_granted"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAddNetworkSuggestionWithKeychainKey_granted"	"CtsDevicePolicyManagerTestCases"	"1: granted"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[granted]:[2]:method_text:[ executeDeviceTestMethod("".WifiTest"", ""testAddNetworkSuggestionWithKeychainKey_granted"");    }   ]) :|: 
    public void testAddNetworkSuggestionWithKeychainKey_granted() throws Exception {
        assumeHasWifiFeature();

        executeDeviceTestMethod("".WifiTest"", ""testAddNetworkSuggestionWithKeychainKey_granted"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAddNetworkSuggestionWithKeychainKey_notGranted"	"CtsDevicePolicyManagerTestCases"	"1: granted"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[granted]:[2]:method_text:[ecuteDeviceTestMethod("".WifiTest"", ""testAddNetworkSuggestionWithKeychainKey_notGranted"");    }   ]) :|: 
    public void testAddNetworkSuggestionWithKeychainKey_notGranted() throws Exception {
        assumeHasWifiFeature();

        executeDeviceTestMethod("".WifiTest"", ""testAddNetworkSuggestionWithKeychainKey_notGranted"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAddNetworkWithKeychainKey_notGranted"	"CtsDevicePolicyManagerTestCases"	"1: granted"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[granted]:[2]:method_text:[notGranted"");    }    // TODO(b/184175078): Migrate test to Bedstead when the infra is ready.   ]) :|: 
    public void testAddNetworkWithKeychainKey_notGranted() throws Exception {
        assumeHasWifiFeature();

        executeDeviceTestMethod("".WifiTest"", ""testAddNetworkWithKeychainKey_notGranted"");
    }

    // TODO(b/184175078): Migrate test to Bedstead when the infra is ready."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetWallpaper_disallowed"	"CtsDevicePolicyManagerTestCases"	"2: UserManager.DISALLOW admin"	"([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[1]:method_text:[    // inside. But these restrictions must have no effect on the device/profile owner behavior.   ]) :|: 
    public void testSetWallpaper_disallowed() throws Exception {
        // UserManager.DISALLOW_SET_WALLPAPER
        final String DISALLOW_SET_WALLPAPER = ""no_set_wallpaper"";
        if (!hasService(""wallpaper"")) {
            CLog.d(""testSetWallpaper_disallowed(): device does not support wallpapers"");
            return;
        }

        installAppAsUser(CUSTOMIZATION_APP_APK, mUserId);
        try {
            changeUserRestrictionOrFail(DISALLOW_SET_WALLPAPER, true, mUserId);
            runDeviceTestsAsUser(CUSTOMIZATION_APP_PKG, "".CustomizationTest"",
                ""testSetWallpaper_disallowed"", mUserId);
        } finally {
            changeUserRestrictionOrFail(DISALLOW_SET_WALLPAPER, false, mUserId);
        }
    }

    // Runs test with admin privileges. The test methods set all the tested restrictions
    // inside. But these restrictions must have no effect on the device/profile owner behavior."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPackageInstallUserRestrictions"	"CtsDevicePolicyManagerTestCases"	"1: UserManager.DISALLOW"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[UserManager.DISALLOW]:[2]:method_text:[TEST_APP_PKG);            getDevice().uninstallPackage(PACKAGE_INSTALLER_PKG);        }    }   ]) :|: 
    public void testPackageInstallUserRestrictions() throws Exception {
        boolean mIsWatch = hasDeviceFeature(""android.hardware.type.watch"");
        if (mIsWatch) {
            return;
        }
        // UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES
        final String DISALLOW_INSTALL_UNKNOWN_SOURCES = ""no_install_unknown_sources"";
        // UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY
        final String DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY =
                ""no_install_unknown_sources_globally"";
        final String SECURE_SETTING_CATEGORY = ""secure"";
        final String GLOBAL_SETTING_CATEGORY = ""global"";
        final File apk = mBuildHelper.getTestFile(TEST_APP_APK);
        try {
            // Install the test and prepare the test apk.
            installAppAsUser(PACKAGE_INSTALLER_APK, mUserId);
            assertTrue(getDevice().pushFile(apk, TEST_APP_LOCATION + apk.getName()));
            setInstallPackageAppOps(PACKAGE_INSTALLER_PKG, true, mUserId);

            // Add restrictions and test if we can install the apk.
            getDevice().uninstallPackage(TEST_APP_PKG);
            changeUserRestrictionOrFail(DISALLOW_INSTALL_UNKNOWN_SOURCES, true, mUserId);
            runDeviceTestsAsUser(PACKAGE_INSTALLER_PKG, "".ManualPackageInstallTest"",
                    ""testManualInstallBlocked"", mUserId);

            // Clear restrictions and test if we can install the apk.
            changeUserRestrictionOrFail(DISALLOW_INSTALL_UNKNOWN_SOURCES, false, mUserId);

            // Add global restriction and test if we can install the apk.
            getDevice().uninstallPackage(TEST_APP_PKG);
            changeUserRestrictionOrFail(DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY, true, mUserId);
            runDeviceTestsAsUser(PACKAGE_INSTALLER_PKG, "".ManualPackageInstallTest"",
                    ""testManualInstallBlocked"", mUserId);

            // Clear global restriction and test if we can install the apk.
            changeUserRest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testInstallCaCertLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[4]:method_text:[e(DEVICE_ADMIN_PKG)                    .setBoolean(false)                    .build());    }   ]) :|: 
    public void testInstallCaCertLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".CaCertManagementTest"", ""testCanInstallAndUninstallACaCert"");
        }, new DevicePolicyEventWrapper.Builder(EventId.INSTALL_CA_CERT_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(false)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.UNINSTALL_CA_CERTS_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(false)
                    .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testApplicationRestrictionIsRestricted"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[1]:method_text:[elper"",            ""testAssertCallerIsApplicationRestrictionsManagingPackage"", mUserId);    }   ]) :|: 
    public void testApplicationRestrictionIsRestricted() throws Exception {
        installAppAsUser(DELEGATE_APP_APK, mUserId);
        runDeviceTestsAsUser(DELEGATE_APP_PKG, "".AppRestrictionsIsCallerDelegateHelper"",
            ""testAssertCallerIsNotApplicationRestrictionsManagingPackage"", mUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".ApplicationRestrictionsIsCallerDelegateHelper"",
            ""testSetApplicationRestrictionsManagingPackageToDelegate"", mUserId);
        runDeviceTestsAsUser(DELEGATE_APP_PKG, "".AppRestrictionsIsCallerDelegateHelper"",
            ""testAssertCallerIsApplicationRestrictionsManagingPackage"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testApplicationRestrictions"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[3]:method_text:[Delegations} to test that     *    the scope can only be delegatd to one app at a time.     */   ]) :|: 
    public void testApplicationRestrictions() throws Exception {
        installAppAsUser(DELEGATE_APP_APK, mUserId);
        installAppAsUser(APP_RESTRICTIONS_TARGET_APP_APK, mUserId);

        try {
            // Only the DPC can manage app restrictions by default.
            executeDeviceTestClass("".ApplicationRestrictionsTest"");
            executeAppRestrictionsManagingPackageTest(""testCannotAccessApis"");

            // Letting the DELEGATE_APP_PKG manage app restrictions too.
            changeApplicationRestrictionsManagingPackage(DELEGATE_APP_PKG);
            executeAppRestrictionsManagingPackageTest(""testCanAccessApis"");
            runDeviceTestsAsUser(DELEGATE_APP_PKG, "".GeneralDelegateTest"",
                    ""testSettingAdminComponentNameThrowsException"", mUserId);

            // The DPC should still be able to manage app restrictions normally.
            executeDeviceTestClass("".ApplicationRestrictionsTest"");

            // The app shouldn't be able to manage app restrictions for other users.
            int parentUserId = getPrimaryUser();
            if (parentUserId != mUserId) {
                installAppAsUser(DELEGATE_APP_APK, parentUserId);
                installAppAsUser(APP_RESTRICTIONS_TARGET_APP_APK, parentUserId);
                runDeviceTestsAsUser(DELEGATE_APP_PKG, "".AppRestrictionsDelegateTest"",
                        ""testCannotAccessApis"", parentUserId);
            }

            // Revoking the permission for DELEGAYE_APP_PKG to manage restrictions.
            changeApplicationRestrictionsManagingPackage(null);
            executeAppRestrictionsManagingPackageTest(""testCannotAccessApis"");

            // The DPC should still be able to manage app restrictions normally.
            executeDeviceTestClass("".ApplicationRestrictionsTest"");

            assertMetricsLogged(getDevice(), () -> {
                executeDeviceTestMethod("".ApplicationRestrictionsTest"",
                        ""testSetApplicationRestrictions"");"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testDelegationCertSelection"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[1]:method_text:[kageName(CERT_INSTALLER_PKG)                .setBoolean(true)                .build());    }   ]) :|: 
    public void testDelegationCertSelection() throws Exception {
        installAppAsUser(CERT_INSTALLER_APK, mUserId);
        setDelegatedScopes(CERT_INSTALLER_PKG, Arrays.asList(
                DELEGATION_CERT_INSTALL, DELEGATION_CERT_SELECTION));

        assertMetricsLogged(getDevice(), () -> {
                runDeviceTestsAsUser(CERT_INSTALLER_PKG, "".CertSelectionDelegateTest"", mUserId);
        }, new DevicePolicyEventWrapper.Builder(EventId.CHOOSE_PRIVATE_KEY_ALIAS_VALUE)
                .setAdminPackageName(CERT_INSTALLER_PKG)
                .setBoolean(true)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAlwaysOnVpnPackageLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[2]:method_text:[          .setBoolean(true)                    .setInt(0)                    .build());    }   ]) :|: 
    public void testAlwaysOnVpnPackageLogged() throws Exception {
        // Will be uninstalled in tearDown().
        installAppAsUser(VPN_APP_APK, mUserId);
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".AlwaysOnVpnUnsupportedTest"", ""testSetSupportedVpnAlwaysOn"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_ALWAYS_ON_VPN_PACKAGE_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(VPN_APP_PKG)
                    .setBoolean(true)
                    .setInt(0)
                    .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPersistentIntentResolving"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[3]:method_text:[       ""com.android.cts.deviceandprofileowner.EXAMPLE_ACTION"")                .build());    }   ]) :|: 
    public void testPersistentIntentResolving() throws Exception {
        executeDeviceTestClass("".PersistentIntentResolvingTest"");
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".PersistentIntentResolvingTest"",
                    ""testAddPersistentPreferredActivityYieldsReceptionAtTarget"");
        }, new DevicePolicyEventWrapper.Builder(EventId.ADD_PERSISTENT_PREFERRED_ACTIVITY_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setStrings(DEVICE_ADMIN_PKG,
                        ""com.android.cts.deviceandprofileowner.EXAMPLE_ACTION"")
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testScreenCaptureDisabled"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[4]:method_text:[e(DEVICE_ADMIN_PKG)                    .setBoolean(false)                    .build());    }   ]) :|: 
    public void testScreenCaptureDisabled() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            // We need to ensure that the policy is deactivated for the device owner case, so making
            // sure the second test is run even if the first one fails
            try {
                setScreenCaptureDisabled(mUserId, true);
            } finally {
                setScreenCaptureDisabled(mUserId, false);
            }
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_SCREEN_CAPTURE_DISABLED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(true)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_SCREEN_CAPTURE_DISABLED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(false)
                    .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSupportMessage"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[4]:method_text:[_VALUE)                .setAdminPackageName(DEVICE_ADMIN_PKG)                .build());    }   ]) :|: 
    public void testSupportMessage() throws Exception {
        executeDeviceTestClass("".SupportMessageTest"");
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".SupportMessageTest"", ""testShortSupportMessageSetGetAndClear"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_SHORT_SUPPORT_MESSAGE_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .build());
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".SupportMessageTest"", ""testLongSupportMessageSetGetAndClear"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_LONG_SUPPORT_MESSAGE_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testApplicationHidden"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[4]:method_text:[ngs(PERMISSIONS_APP_PKG, ""not_hidden"", NOT_CALLED_FROM_PARENT)                .build());    }   ]) :|: 
    public void testApplicationHidden() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestClass("".ApplicationHiddenTest"");
        installAppAsUser(PERMISSIONS_APP_APK, mUserId);
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".ApplicationHiddenTest"",""testSetApplicationHidden"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_APPLICATION_HIDDEN_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(PERMISSIONS_APP_PKG, ""hidden"", NOT_CALLED_FROM_PARENT)
                .build(),
        new DevicePolicyEventWrapper.Builder(EventId.SET_APPLICATION_HIDDEN_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(PERMISSIONS_APP_PKG, ""not_hidden"", NOT_CALLED_FROM_PARENT)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testDelegatedCertInstaller"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([6:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[6]:method_text:[aller app is called directly rather than via intents from    // the DelegatedCertinstallerTest.   ]) :|: 
    public void testDelegatedCertInstaller() throws Exception {
        installAppAsUser(CERT_INSTALLER_APK, mUserId);

        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerTest"", mUserId);
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerTest"",
                    ""testInstallKeyPair"", mUserId);
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_CERT_INSTALLER_PACKAGE_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setStrings(CERT_INSTALLER_PKG)
                .build());
    }

    public interface DelegatedCertInstallerTestAction {
        void run() throws Exception;
    }

    protected void setUpDelegatedCertInstallerAndRunTests(DelegatedCertInstallerTestAction test)
            throws Exception {
        installAppAsUser(CERT_INSTALLER_APK, mUserId);

        try {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerHelper"",
                    ""testManualSetCertInstallerDelegate"", mUserId);

            test.run();
        } finally {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerHelper"",
                    ""testManualClearCertInstallerDelegate"", mUserId);
        }
    }

    // This test currently duplicates the testDelegatedCertInstaller, with one difference:
    // The Delegated cert installer app is called directly rather than via intents from
    // the DelegatedCertinstallerTest."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetKeyGrant"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([5:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[5]:method_text:[n app, that tries to set wallpaper.    // Non-admin apps must not violate any user restriction.   ]) :|: 
    public void testSetKeyGrant() throws Exception {
        assumeTrue(mHasAttestation);

        // Install an app
        installAppAsUser(CERT_INSTALLER_APK, mUserId);

        try {
            // First, generate a key and grant the cert installer access to it.
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerHelper"",
                    ""testManualGenerateKeyAndGrantAccess"", mUserId);
            // Test the key is usable.
            runDeviceTestsAsUser(""com.android.cts.certinstaller"",
                    "".PreSelectedKeyAccessTest"", ""testAccessingPreSelectedAliasExpectingSuccess"",
                    mUserId);
            // Remove the grant
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerHelper"",
                    ""testManualRemoveKeyGrant"", mUserId);
            // Run another test to make sure the app no longer has access to the key.
            runDeviceTestsAsUser(""com.android.cts.certinstaller"",
                    "".PreSelectedKeyAccessTest"", ""testAccessingPreSelectedAliasWithoutGrant"", mUserId);
        } finally {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerHelper"",
                    ""testManualClearGeneratedKey"", mUserId);
        }
    }

    // Sets restrictions and launches non-admin app, that tries to set wallpaper.
    // Non-admin apps must not violate any user restriction."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAudioRestriction"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[2]:method_text:[ally {            disallowNotificationPolicyAccess(DEVICE_ADMIN_PKG, mUserId);        }    }   ]) :|: 
    public void testAudioRestriction() throws Exception {
        // This package may need to toggle zen mode for this test, so allow it to do so.
        allowNotificationPolicyAccess(DEVICE_ADMIN_PKG, mUserId);
        try {
            executeDeviceTestClass("".AudioRestrictionTest"");
        } finally {
            disallowNotificationPolicyAccess(DEVICE_ADMIN_PKG, mUserId);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testDisallowAdjustVolumeMutedLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[4]:method_text:[      .setBoolean(false)                    .build());    }    @FlakyTest(bugId = 141314026)   ]) :|: 
    public void testDisallowAdjustVolumeMutedLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".DevicePolicyLoggingTest"",
                    ""testDisallowAdjustVolumeMutedLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_MASTER_VOLUME_MUTED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(true)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_MASTER_VOLUME_MUTED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(false)
                    .build());
    }

    @FlakyTest(bugId = 141314026)"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSuspendPackage"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[2]:method_text:[pendPackageTest"", ""testSuspendNotSuspendablePackages"");    }    @FlakyTest(bugId = 141314026)   ]) :|: 
    public void testSuspendPackage() throws Exception {
        CLog.i(""runTestSuspendPackage() on user %d"", mUserId);

        installAppAsUser(INTENT_SENDER_APK, mUserId);
        installAppAsUser(INTENT_RECEIVER_APK, mUserId);
        assertMetricsLogged(getDevice(), () -> {
            // Suspend a testing package.
            executeDeviceTestMethod("".SuspendPackageTest"", ""testSetPackagesSuspended"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_PACKAGES_SUSPENDED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(INTENT_RECEIVER_PKG)
                    .setBoolean(false)
                    .build());
        // Verify that the package is suspended from the PREVIOUS test and that the dialog is shown
        executeSuspendPackageTestMethod(""testPackageSuspended"");

        // Undo the suspend.
        executeDeviceTestMethod("".SuspendPackageTest"", ""testSetPackagesNotSuspended"");
        // Verify that the package is not suspended from the PREVIOUS test and that the app launches
        executeSuspendPackageTestMethod(""testPackageNotSuspended"");

        // Verify we cannot suspend not suspendable packages.
        executeDeviceTestMethod("".SuspendPackageTest"", ""testSuspendNotSuspendablePackages"");
    }

    @FlakyTest(bugId = 141314026)"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testCannotEnableOrDisableDeviceOwnerOrProfileOwner"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[4]:method_text:[row SecurityException"",                result.contains(""java.lang.SecurityException""));    }   ]) :|: 
    public void testCannotEnableOrDisableDeviceOwnerOrProfileOwner() throws Exception {
        // Try to disable a component in device owner/ profile owner.
        String result = disableComponentOrPackage(
                mUserId, DEVICE_ADMIN_PKG + ""/.SetPolicyActivity"");
        assertTrue(""Should throw SecurityException"",
                result.contains(""java.lang.SecurityException""));
        // Try to disable the device owner/ profile owner package.
        result = disableComponentOrPackage(mUserId, DEVICE_ADMIN_PKG);
        assertTrue(""Should throw SecurityException"",
                result.contains(""java.lang.SecurityException""));
        // Try to enable a component in device owner/ profile owner.
        result = enableComponentOrPackage(
                mUserId, DEVICE_ADMIN_PKG + ""/.SetPolicyActivity"");
        assertTrue(""Should throw SecurityException"",
                result.contains(""java.lang.SecurityException""));
        // Try to enable the device owner/ profile owner package.
        result = enableComponentOrPackage(mUserId, DEVICE_ADMIN_PKG);
        assertTrue(""Should throw SecurityException"",
                result.contains(""java.lang.SecurityException""));

    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testCreateAdminSupportIntent"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[1]:method_text:[ortIntent() throws Exception {        executeDeviceTestClass("".PolicyTransparencyTest"");    }   ]) :|: 
    public void testCreateAdminSupportIntent() throws Exception {
        executeDeviceTestClass("".PolicyTransparencyTest"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetCameraDisabledLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[4]:method_text:[PARENT)                    .build());    }    /** Test for resetPassword for all devices. */   ]) :|: 
    public void testSetCameraDisabledLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".PolicyTransparencyTest"", ""testCameraDisabled"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_CAMERA_DISABLED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(true)
                    .setStrings(NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_CAMERA_DISABLED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(false)
                    .setStrings(NOT_CALLED_FROM_PARENT)
                    .build());
    }

    /** Test for resetPassword for all devices. */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPasswordQualityWithoutSecureLockScreen"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[1]:method_text:[     runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UnavailableSecureLockScreenTest"", mUserId);    }   ]) :|: 
    public void testPasswordQualityWithoutSecureLockScreen() throws Exception {
        assumeDoesNotHaveSecureLockScreenFeature();

        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UnavailableSecureLockScreenTest"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetSystemSetting"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[1]:method_text:[             Collections.singletonMap(ARG_ALLOW_FAILURE, String.valueOf(allowFailures)));    }   ]) :|: 
    public void testSetSystemSetting() throws Exception {
        executeDeviceTestClass("".SetSystemSettingTest"");
    }

    protected void executeResetPasswordWithTokenTests(boolean allowFailures)
            throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".ResetPasswordWithTokenTest"", null, mUserId,
                Collections.singletonMap(ARG_ALLOW_FAILURE, String.valueOf(allowFailures)));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testClearApplicationData_activeAdmin"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[3]:method_text:[hod("".ClearApplicationDataTest"",                ""testClearApplicationData_activeAdmin"");    }   ]) :|: 
    public void testClearApplicationData_activeAdmin() throws Exception {
        // Clearing data of active admin should fail
        executeDeviceTestMethod("".ClearApplicationDataTest"",
                ""testClearApplicationData_activeAdmin"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testInstallKeyPairLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[4]:method_text:[lse)                .setStrings(""notCredentialManagementApp"")                .build());    }   ]) :|: 
    public void testInstallKeyPairLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
                executeDeviceTestMethod("".KeyManagementTest"", ""testCanInstallCertChain"");
                }, new DevicePolicyEventWrapper.Builder(EventId.INSTALL_KEY_PAIR_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(""notCredentialManagementApp"")
                .build(),
                new DevicePolicyEventWrapper.Builder(EventId.REMOVE_KEY_PAIR_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(""notCredentialManagementApp"")
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testGenerateKeyPairLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[4]:method_text:[              .setStrings(""EC"", ""notCredentialManagementApp"")                .build());    }   ]) :|: 
    public void testGenerateKeyPairLogged() throws Exception {
        assumeTrue(mHasAttestation);

        assertMetricsLogged(getDevice(), () -> {
                executeDeviceTestMethod(
                        "".KeyManagementTest"", ""testCanGenerateKeyPairWithKeyAttestation"");
                }, new DevicePolicyEventWrapper.Builder(EventId.GENERATE_KEY_PAIR_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setInt(0)
                .setStrings(""RSA"", ""notCredentialManagementApp"")
                .build(),
                new DevicePolicyEventWrapper.Builder(EventId.GENERATE_KEY_PAIR_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setInt(0)
                .setStrings(""EC"", ""notCredentialManagementApp"")
                .build());

    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetKeyPairCertificateLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[2]:method_text:[lse)                .setStrings(""notCredentialManagementApp"")                .build());    }   ]) :|: 
    public void testSetKeyPairCertificateLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
                executeDeviceTestMethod("".KeyManagementTest"", ""testCanSetKeyPairCert"");
                }, new DevicePolicyEventWrapper.Builder(EventId.SET_KEY_PAIR_CERTIFICATE_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(""notCredentialManagementApp"")
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPermittedAccessibilityServices"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([6:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[6]:method_text:[       .setStrings(""com.google.pkg.one"", ""com.google.pkg.two"")                .build());    }   ]) :|: 
    public void testPermittedAccessibilityServices() throws Exception {
        executeDeviceTestClass("".AccessibilityServicesTest"");
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".AccessibilityServicesTest"",
                    ""testPermittedAccessibilityServices"");
        }, new DevicePolicyEventWrapper
                .Builder(EventId.SET_PERMITTED_ACCESSIBILITY_SERVICES_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setStrings((String[]) null)
                .build(),
        new DevicePolicyEventWrapper
                .Builder(EventId.SET_PERMITTED_ACCESSIBILITY_SERVICES_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setStrings((String[]) null)
                .build(),
        new DevicePolicyEventWrapper
                .Builder(EventId.SET_PERMITTED_ACCESSIBILITY_SERVICES_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setStrings(""com.google.pkg.one"", ""com.google.pkg.two"")
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPermittedInputMethods"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([7:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[7]:method_text:[ALLED_FROM_PARENT, ""com.google.pkg.one"", ""com.google.pkg.two"")                .build());    }   ]) :|: 
    public void testPermittedInputMethods() throws Exception {
        executeDeviceTestMethod("".InputMethodsTest"", ""testPermittedInputMethodsThrowsIfWrongAdmin"");
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".InputMethodsTest"", ""testPermittedInputMethods"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_PERMITTED_INPUT_METHODS_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setStrings(NOT_CALLED_FROM_PARENT, new String[0])
                .build(),
        new DevicePolicyEventWrapper.Builder(EventId.SET_PERMITTED_INPUT_METHODS_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setStrings(NOT_CALLED_FROM_PARENT, new String[0])
                .build(),
        new DevicePolicyEventWrapper.Builder(EventId.SET_PERMITTED_INPUT_METHODS_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setStrings(NOT_CALLED_FROM_PARENT, ""com.google.pkg.one"", ""com.google.pkg.two"")
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetStorageEncryption"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[1]:method_text:[                DEVICE_ADMIN_PKG, STORAGE_ENCRYPTION_TEST_CLASS, null, mUserId, params);    }   ]) :|: 
    public void testSetStorageEncryption() throws Exception {
        Map<String, String> params =
                ImmutableMap.of(IS_SYSTEM_USER_PARAM, String.valueOf(mUserId == USER_SYSTEM));
        runDeviceTestsAsUser(
                DEVICE_ADMIN_PKG, STORAGE_ENCRYPTION_TEST_CLASS, null, mUserId, params);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPasswordMethodsLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([18:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[18]:method_text:[nt(0x50000)                        .setBoolean(false)                        .build());    }   ]) :|: 
    public void testPasswordMethodsLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".DevicePolicyLoggingTest"", ""testPasswordMethodsLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_PASSWORD_QUALITY_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(PASSWORD_QUALITY_COMPLEX)
                    .setStrings(NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_PASSWORD_MINIMUM_LENGTH_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(13)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_PASSWORD_MINIMUM_NUMERIC_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(14)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_PASSWORD_MINIMUM_NON_LETTER_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(15)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_PASSWORD_MINIMUM_LETTERS_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(16)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_PASSWORD_MINIMUM_LOWER_CASE_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(17)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_PASSWORD_MINIMUM_UPPER_CASE_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(18)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_PASSWORD_MINIMUM_SYMBOLS_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(19)
                    .build(),"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testLockNowLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[2]:method_text:[tAdminPackageName(DEVICE_ADMIN_PKG)                .setInt(0)                .build());    }   ]) :|: 
    public void testLockNowLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".DevicePolicyLoggingTest"", ""testLockNowLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.LOCK_NOW_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setInt(0)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetKeyguardDisabledFeaturesLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([8:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[8]:method_text:[E)                    .setStrings(NOT_CALLED_FROM_PARENT)                    .build());    }   ]) :|: 
    public void testSetKeyguardDisabledFeaturesLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod(
                    "".DevicePolicyLoggingTest"", ""testSetKeyguardDisabledFeaturesLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_KEYGUARD_DISABLED_FEATURES_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(KEYGUARD_DISABLE_FEATURES_NONE)
                    .setStrings(NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_KEYGUARD_DISABLED_FEATURES_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(KEYGUARD_DISABLE_FINGERPRINT)
                    .setStrings(NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_KEYGUARD_DISABLED_FEATURES_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(KEYGUARD_DISABLE_TRUST_AGENTS)
                    .setStrings(NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_KEYGUARD_DISABLED_FEATURES_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(KEYGUARD_DISABLE_FEATURES_NONE)
                    .setStrings(NOT_CALLED_FROM_PARENT)
                    .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetKeyguardDisabledSecureCameraLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[2]:method_text:[RE_CAMERA)                .setStrings(NOT_CALLED_FROM_PARENT)                .build());    }   ]) :|: 
    public void testSetKeyguardDisabledSecureCameraLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod(
                    "".DevicePolicyLoggingTest"", ""testSetKeyguardDisabledSecureCameraLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_KEYGUARD_DISABLED_FEATURES_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setInt(KEYGUARD_DISABLE_SECURE_CAMERA)
                .setStrings(NOT_CALLED_FROM_PARENT)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetUserRestrictionLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([12:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[12]:method_text:[trings(DISALLOW_AUTOFILL, NOT_CALLED_FROM_PARENT)                    .build()        );    }   ]) :|: 
    public void testSetUserRestrictionLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod(
                    "".DevicePolicyLoggingTest"", ""testSetUserRestrictionLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.ADD_USER_RESTRICTION_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(DISALLOW_CONFIG_LOCATION, NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.REMOVE_USER_RESTRICTION_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(DISALLOW_CONFIG_LOCATION, NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.ADD_USER_RESTRICTION_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(DISALLOW_ADJUST_VOLUME, NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.REMOVE_USER_RESTRICTION_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(DISALLOW_ADJUST_VOLUME, NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.ADD_USER_RESTRICTION_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(DISALLOW_AUTOFILL, NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.REMOVE_USER_RESTRICTION_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(DISALLOW_AUTOFILL, NOT_CALLED_FROM_PARENT)
                    .build()
        );
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetSecureSettingLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([8:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[8]:method_text:[PKG)                    .setStrings(DEFAULT_INPUT_METHOD)                    .build());    }   ]) :|: 
    public void testSetSecureSettingLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod(
                    "".DevicePolicyLoggingTest"", ""testSetSecureSettingLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_SECURE_SETTING_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setStrings(SKIP_FIRST_USE_HINTS, ""1"")
                .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_SECURE_SETTING_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(SKIP_FIRST_USE_HINTS, ""0"")
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_SECURE_SETTING_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(DEFAULT_INPUT_METHOD, ""com.example.input"")
                    .build()
                    ,
            new DevicePolicyEventWrapper.Builder(EventId.SET_SECURE_SETTING_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(DEFAULT_INPUT_METHOD)
                    .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetPermissionPolicyLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([6:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[6]:method_text:[t(PERMISSION_POLICY_PROMPT)                .setBoolean(false)                .build());    }   ]) :|: 
    public void testSetPermissionPolicyLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod(
                    "".DevicePolicyLoggingTest"", ""testSetPermissionPolicyLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_PERMISSION_POLICY_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setInt(PERMISSION_POLICY_AUTO_DENY)
                .setBoolean(false)
                .build(),
        new DevicePolicyEventWrapper.Builder(EventId.SET_PERMISSION_POLICY_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setInt(PERMISSION_POLICY_AUTO_GRANT)
                .setBoolean(false)
                .build(),
        new DevicePolicyEventWrapper.Builder(EventId.SET_PERMISSION_POLICY_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setInt(PERMISSION_POLICY_PROMPT)
                .setBoolean(false)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetAutoTimeRequired"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[4]:method_text:[e(DEVICE_ADMIN_PKG)                    .setBoolean(false)                    .build());    }   ]) :|: 
    public void testSetAutoTimeRequired() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".DevicePolicyLoggingTest"", ""testSetAutoTimeRequired"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_AUTO_TIME_REQUIRED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(true)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_AUTO_TIME_REQUIRED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(false)
                    .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetAutoTimeEnabled"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[4]:method_text:[e(DEVICE_ADMIN_PKG)                    .setBoolean(false)                    .build());    }   ]) :|: 
    public void testSetAutoTimeEnabled() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".DevicePolicyLoggingTest"", ""testSetAutoTimeEnabled"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_AUTO_TIME_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(true)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_AUTO_TIME_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(false)
                    .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetAutoTimeZoneEnabled"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[4]:method_text:[_ADMIN_PKG)                        .setBoolean(false)                        .build());    }   ]) :|: 
    public void testSetAutoTimeZoneEnabled() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
                    executeDeviceTestMethod("".TimeManagementTest"", ""testSetAutoTimeZoneEnabled"");
                }, new DevicePolicyEventWrapper.Builder(EventId.SET_AUTO_TIME_ZONE_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setBoolean(true)
                        .build(),
                new DevicePolicyEventWrapper.Builder(EventId.SET_AUTO_TIME_ZONE_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setBoolean(false)
                        .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testEnableSystemAppLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[3]:method_text:[lean(false)                .setStrings(systemPackageToEnable)                .build());    }   ]) :|: 
    public void testEnableSystemAppLogged() throws Exception {
        final List<String> enabledSystemPackageNames = getEnabledSystemPackageNames();
        // We enable an enabled package to not worry about restoring the state.
        final String systemPackageToEnable = enabledSystemPackageNames.get(0);
        final Map<String, String> params =
                ImmutableMap.of(PARAM_APP_TO_ENABLE, systemPackageToEnable);
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DevicePolicyLoggingTest"",
                    ""testEnableSystemAppLogged"", mUserId, params);
        }, new DevicePolicyEventWrapper.Builder(EventId.ENABLE_SYSTEM_APP_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(systemPackageToEnable)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testEnableSystemAppWithIntentLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[3]:method_text:[lse)                .setStrings(""android.intent.action.MAIN"")                .build());    }   ]) :|: 
    public void testEnableSystemAppWithIntentLogged() throws Exception {
        final String systemPackageToEnable = getLaunchableSystemPackage();
        if (systemPackageToEnable == null) {
            return;
        }
        final Map<String, String> params =
                ImmutableMap.of(PARAM_APP_TO_ENABLE, systemPackageToEnable);
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DevicePolicyLoggingTest"",
                    ""testEnableSystemAppWithIntentLogged"", mUserId, params);
        }, new DevicePolicyEventWrapper.Builder(EventId.ENABLE_SYSTEM_APP_WITH_INTENT_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(""android.intent.action.MAIN"")
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetUninstallBlockedLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[2]:method_text:[oolean(false)                .setStrings(PERMISSIONS_APP_PKG)                .build());    }   ]) :|: 
    public void testSetUninstallBlockedLogged() throws Exception {
        installAppAsUser(PERMISSIONS_APP_APK, mUserId);
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".DevicePolicyLoggingTest"",
                    ""testSetUninstallBlockedLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_UNINSTALL_BLOCKED_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(PERMISSIONS_APP_PKG)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testEnrollmentSpecificIdCorrectCalculation"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[1]:method_text:[G, "".EnrollmentSpecificIdTest"",                ""testCorrectCalculationOfEsid"", mUserId);    }   ]) :|: 
    public void testEnrollmentSpecificIdCorrectCalculation() throws Exception {

        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".EnrollmentSpecificIdTest"",
                ""testCorrectCalculationOfEsid"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testEnrollmentSpecificIdCorrectCalculationLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[2]:method_text:[EVICE_ADMIN_PKG)                .setBoolean(isManagedProfile)                .build());    }   ]) :|: 
    public void testEnrollmentSpecificIdCorrectCalculationLogged() throws Exception {
        boolean isManagedProfile = (mPrimaryUserId != mUserId);

        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".EnrollmentSpecificIdTest"",
                    ""testCorrectCalculationOfEsid"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_ORGANIZATION_ID_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(isManagedProfile)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testEnrollmentSpecificIdEmptyAndMultipleSet"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[2]:method_text:[ntSpecificIdTest"",                ""testThrowsWhenTryingToReSetOrganizationId"", mUserId);    }   ]) :|: 
    public void testEnrollmentSpecificIdEmptyAndMultipleSet() throws DeviceNotAvailableException {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".EnrollmentSpecificIdTest"",
                ""testThrowsForEmptyOrganizationId"", mUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".EnrollmentSpecificIdTest"",
                ""testThrowsWhenTryingToReSetOrganizationId"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAdminControlOverSensorPermissionGrantsDefault"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[3]:method_text:[d("".SensorPermissionGrantTest"",                ""testAdminCannotGrantSensorsPermission"");    }   ]) :|: 
    public void testAdminControlOverSensorPermissionGrantsDefault() throws Exception {
        // By default, admin should not be able to grant sensors-related permissions.
        executeDeviceTestMethod("".SensorPermissionGrantTest"",
                ""testAdminCannotGrantSensorsPermission"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetNearbyAppStreamingPolicy_changesPolicy"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([6:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[admin]:[6]:method_text:[and(                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);    }}]) :|: 
    public void testSetNearbyAppStreamingPolicy_changesPolicy() throws Exception {
        executeDeviceTestMethod(
                "".NearbyAppStreamingPolicyTest"", ""testSetNearbyAppStreamingPolicy_changesPolicy"");
    }

    /**
     * Executes a test class on device. Prior to running, turn off background data usage
     * restrictions, and restore the original restrictions after the test.
     */
    private void executeDeviceTestClassNoRestrictBackground(String className) throws Exception {
        boolean originalRestriction = ensureRestrictBackgroundPolicyOff();
        try {
            executeDeviceTestClass(className);
        } catch (Exception e) {
            throw e;
        } finally {
            // if the test throws exception, still restore the policy
            restoreRestrictBackgroundPolicyTo(originalRestriction);
        }
    }

    protected void executeDeviceTestClass(String className) throws Exception {
        executeDeviceTestMethod(className, /* testName= */ null);
    }

    protected void executeDeviceTestMethod(String className, String testName) throws Exception {
        executeDeviceTestMethod(className, testName, /* params= */ new HashMap<>());
    }

    protected void executeDeviceTestMethod(String className, String testName,
            Map<String, String> params) throws Exception {
        executeDeviceTestMethod(className, testName, mUserId, params);
    }

    protected void executeDeviceTestMethod(String className, String testName, int userId,
            Map<String, String> params) throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, testName, userId, params);
    }

    protected void installAppPermissionAppAsUser()
            throws FileNotFoundException, DeviceNotAvailableException {
        installAppAsUser(PERMISSIONS_APP_APK, false, mUserId);
    }

    private void executeSuspendPackageTestMethod(String testName) throws Exception {
        runDeviceTestsAsUser(INTENT_SENDER_PKG, "".SuspendPack"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferOwnership"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java]:[admin]:[1]:method_text:[etStrings(TRANSFER_OWNER_INCOMING_PKG, expectedManagementType)                .build());    }   ]) :|: 
    public void testTransferOwnership() throws Exception {
        final boolean hasManagedProfile = (mUserId != mPrimaryUserId);
        final String expectedManagementType = hasManagedProfile ? ""profile-owner"" : ""device-owner"";
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG, mOutgoingTestClassName,
                    ""testTransferOwnership"", mUserId);
        }, new DevicePolicyEventWrapper.Builder(EventId.TRANSFER_OWNERSHIP_VALUE)
                .setAdminPackageName(TRANSFER_OWNER_OUTGOING_PKG)
                .setStrings(TRANSFER_OWNER_INCOMING_PKG, expectedManagementType)
                .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferSameAdmin"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java]:[admin]:[2]:method_text:[               mOutgoingTestClassName,                ""testTransferSameAdmin"", mUserId);    }   ]) :|: 
    public void testTransferSameAdmin() throws Exception {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
                mOutgoingTestClassName,
                ""testTransferSameAdmin"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testGetTransferOwnershipBundleOnlyCalledFromAdmin"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java]:[admin]:[2]:method_text:[ClassName,                ""testGetTransferOwnershipBundleOnlyCalledFromAdmin"", mUserId);    }   ]) :|: 
    public void testGetTransferOwnershipBundleOnlyCalledFromAdmin()
            throws DeviceNotAvailableException {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
                mOutgoingTestClassName,
                ""testGetTransferOwnershipBundleOnlyCalledFromAdmin"", mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testIsBundleNullNoTransfer"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([5:/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java]:[admin]:[5]:method_text:[            return -1;        }        startUserAndWait(userId);        return userId;    }   ]) :|: 
    public void testIsBundleNullNoTransfer() throws DeviceNotAvailableException {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
                mOutgoingTestClassName,
                ""testIsBundleNullNoTransfer"", mUserId);
    }

    protected int setupManagedProfileOnDeviceOwner(String apkName, String adminReceiverClassName)
            throws Exception {
        return setupManagedProfile(apkName, adminReceiverClassName);
    }

    protected int setupManagedProfile(String apkName, String adminReceiverClassName)
            throws Exception {
        final int userId = createManagedProfile(mPrimaryUserId);
        installAppAsUser(apkName, userId);
        if (!setProfileOwner(adminReceiverClassName, userId, false)) {
            removeAdmin(TRANSFER_OWNER_OUTGOING_TEST_RECEIVER, userId);
            getDevice().uninstallPackage(TRANSFER_OWNER_OUTGOING_PKG);
            fail(""Failed to set device owner"");
            return -1;
        }
        startUserAndWait(userId);
        return userId;
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTargetDeviceAdminServiceBound"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java]:[admin]:[2]:method_text:[INCOMING_PKG,            testClassName,            ""testIsAffiliationId1"", profileUserId);    }}]) :|: 
    public void testTargetDeviceAdminServiceBound() throws Exception {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
            mOutgoingTestClassName,
            ""testTransferOwnership"", mUserId);
        assertServiceRunning(INCOMING_ADMIN_SERVICE_FULL_NAME);
    }

    private void assertServiceRunning(String serviceName) throws DeviceNotAvailableException {
        final String result = getDevice().executeShellCommand(
                String.format(""dumpsys activity services %s"", serviceName));
        assertThat(result).contains(""app=ProcessRecord"");
    }

    protected void setSameAffiliationId(int profileUserId, String testClassName)
        throws Exception {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
            testClassName,
            ""testSetAffiliationId1"", mPrimaryUserId);
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
            testClassName,
            ""testSetAffiliationId1"", profileUserId);
    }

    protected void assertAffiliationIdsAreIntact(int profileUserId,
        String testClassName) throws Exception {
        runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,
            testClassName,
            ""testIsAffiliationId1"", mPrimaryUserId);
        runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,
            testClassName,
            ""testIsAffiliationId1"", profileUserId);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTestApi30"	"removeTestUsers"	"CtsDevicePolicyManagerTestCases"	"2: managed_users admin"	"([5:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi30.java]:[admin]:[5]:method_text:[oid tearDown() throws Exception {        removeUser(mUserId);        super.tearDown();    }   ]) :|: /*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;

import org.junit.Test;

/**
 * Set of tests for managed profile owner use cases that may also apply to device owner.
 * Tests that should be run identically in both cases are added in DeviceAndProfileOwnerTestApi30.
 */
// We need managed users to be supported in order to create a profile of the user owner.
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class MixedManagedProfileOwnerTestApi30 extends DeviceAndProfileOwnerTestApi30 {
    private int mParentUserId = -1;

    @Override
    public void setUp() throws Exception {
        super.setUp();

        removeTestUsers();
        mParentUserId = mPrimaryUserId;
        createManagedProfile();
    }

    private void createManagedProfile() throws Exception {
        mUserId = createManagedProfile(mParentUserId);
        switchUser(mParentUserId);
        startUserAndWait(mUserId);

        installAppAsUser(DEVICE_ADMIN_APK, mUserId);
        setProfileOwnerOrFail(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mUserId);
        startUserAndWait(mUserId);
    }

    @Override
    public void tearDown() throws Exception {
        removeUser(mUserId);

        super.tearDown();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi30.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.AdbProvisioningTests"	"testAdbDeviceOwnerLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/AdbProvisioningTests.java]:[admin]:[4]:method_text:[ean(false)                    .setStrings(""device-owner"")                    .build());    }   ]) :|: 
    public void testAdbDeviceOwnerLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            setDeviceOwner(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mDeviceOwnerUserId,
                    /* expectFailure */ false);
        }, new DevicePolicyEventWrapper.Builder(EventId.PROVISIONING_ENTRY_POINT_ADB_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(false)
                    .setStrings(""device-owner"")
                    .build());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AdbProvisioningTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.AdbProvisioningTests"	"testAdbProfileOwnerLogged"	"CtsDevicePolicyManagerTestCases"	"1: admin"	"([4:/com/android/cts/devicepolicy/AdbProvisioningTests.java]:[admin]:[4]:method_text:[  .setBoolean(false)                .setStrings(""profile-owner"")                .build());    }}]) :|: 
    public void testAdbProfileOwnerLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            setProfileOwner(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mPrimaryUserId,
                    /* expectFailure */ false);
        }, new DevicePolicyEventWrapper.Builder(EventId.PROVISIONING_ENTRY_POINT_ADB_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(""profile-owner"")
                .build());
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AdbProvisioningTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.ClearDeviceAdminTest"	"testRemoveActiveAdmin"	""	"1: admin"	"([6:/com.android.cts.deviceadmin/ClearDeviceAdminTest.java]:[admin]:[6]:method_text:[          dpm.removeActiveAdmin(mAdminComponent);        }        assertNotActiveAdmin();    }}]) :|: public void testRemoveActiveAdmin() throws Exception {
        if (dpm.isAdminActive(mAdminComponent)) {
            dpm.removeActiveAdmin(mAdminComponent);
        }

        assertNotActiveAdmin();
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/ClearDeviceAdminTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.ClearDeviceAdminWithNoProtectionTest"	"testRemoveActiveAdmin"	""	"1: admin"	"([7:/com.android.cts.deviceadmin/ClearDeviceAdminWithNoProtectionTest.java]:[admin]:[7]:method_text:[);            }        }        assertFalse(""Still active admin"", dpm.isAdminActive(cn));    }}]) :|: public void testRemoveActiveAdmin() throws Exception {

        final ComponentName cn = new ComponentName(getContext(),
                DeviceAdminReceiverWithNoProtection.class);

        final DevicePolicyManager dpm = getContext().getSystemService(DevicePolicyManager.class);

        if (dpm.isAdminActive(cn)) {
            dpm.removeActiveAdmin(cn);
            for (int i = 0; i < 6000 && dpm.isAdminActive(cn); i++) {
                Thread.sleep(10);
            }
        }
        assertFalse(""Still active admin"", dpm.isAdminActive(cn));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/ClearDeviceAdminWithNoProtectionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminPasswordTest"	"assertNotDeviceOwner"	""	"1: admin"	"([5:/com.android.cts.deviceadmin/DeviceAdminPasswordTest.java]:[admin]:[5]:method_text:[d void setUp() throws Exception {        super.setUp();        assertNotDeviceOwner();    }   ]) :|: public void test/*
 *.
 */
package com.android.cts.deviceadmin;

import android.os.Build;

/**
 * Tests that:
 * - need to be run as device admin (as opposed to device owner) and
 * - require resetting the password at the end.
 *
 * Note: when adding a new method, make sure to add a corresponding method in
 * BaseDeviceAdminHostSideTest.
 */
public class DeviceAdminPasswordTest extends BaseDeviceAdminTest {

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        assertNotDeviceOwner();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminPasswordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminTest"	"assertNotDeviceOwner"	""	"1: admin"	"([5:/com.android.cts.deviceadmin/DeviceAdminTest.java]:[admin]:[5]:method_text:[d void setUp() throws Exception {        super.setUp();        assertNotDeviceOwner();    }   ]) :|: public void test/*
 *.
 */
package com.android.cts.deviceadmin;

import android.app.admin.DevicePolicyManager;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build;

/**
 * Device admin device side tests.
 */
public class DeviceAdminTest extends BaseDeviceAdminTest {
    @Override
    protected void setUp() throws Exception {
        super.setUp();

        assertNotDeviceOwner();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminTest"	"testGetMaximumFailedPasswordsForWipe"	""	"1: admin"	"([4:/com.android.cts.deviceadmin/DeviceAdminTest.java]:[admin]:[4]:method_text:[nent, 5);        assertEquals(5, dpm.getMaximumFailedPasswordsForWipe(mAdminComponent));    }   ]) :|: public void testGetMaximumFailedPasswordsForWipe() {
        if (!mHasSecureLockScreen) {
            return;
        }
        dpm.setMaximumFailedPasswordsForWipe(mAdminComponent, 3);
        assertEquals(3, dpm.getMaximumFailedPasswordsForWipe(mAdminComponent));

        dpm.setMaximumFailedPasswordsForWipe(mAdminComponent, 5);
        assertEquals(5, dpm.getMaximumFailedPasswordsForWipe(mAdminComponent));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminTest"	"testPasswordHistoryLength"	""	"1: admin"	"([5:/com.android.cts.deviceadmin/DeviceAdminTest.java]:[admin]:[5]:method_text:[lly {            dpm.setPasswordHistoryLength(mAdminComponent, originalValue);        }    }   ]) :|: public void testPasswordHistoryLength() {
        if (!mHasSecureLockScreen) {
            return;
        }
        // Password history length restriction is only imposed if password quality is at least
        // numeric.
        dpm.setPasswordQuality(mAdminComponent,
                DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC);
        int originalValue = dpm.getPasswordHistoryLength(mAdminComponent);
        try {
            dpm.setPasswordHistoryLength(mAdminComponent, 3);
            assertEquals(3, dpm.getPasswordHistoryLength(mAdminComponent));
            // Although it would make sense we cannot test if password history restrictions
            // are enforced as DevicePolicyManagerService.resetPassword fails to do so at the
            // moment. See b/17707820
        } finally {
            dpm.setPasswordHistoryLength(mAdminComponent, originalValue);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminTest"	"testPasswordExpirationTimeout"	""	"1: admin"	"([4:/com.android.cts.deviceadmin/DeviceAdminTest.java]:[admin]:[4]:method_text:[ly {            dpm.setPasswordExpirationTimeout(mAdminComponent, originalValue);        }    }}]) :|: public void testPasswordExpirationTimeout() {
        if (!mHasSecureLockScreen) {
            return;
        }
        long originalValue = dpm.getPasswordExpirationTimeout(mAdminComponent);
        try {
            for (long testLength : new long[] {
                    0L, 864000000L /* ten days */, 8640000000L /* 100 days */}) {
                dpm.setPasswordExpirationTimeout(mAdminComponent, testLength);
                assertEquals(testLength,
                        dpm.getPasswordExpirationTimeout(mAdminComponent));
            }
        } finally {
            dpm.setPasswordExpirationTimeout(mAdminComponent, originalValue);
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminWithEnterprisePoliciesBlockedTest"	"testCameraDisabled"	""	"1: admin"	"([3:/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java]:[admin]:[3]:method_text:[ent, true));        assertEquals(originalValue, dpm.getCameraDisabled(mAdminComponent));    }   ]) :|: public void testCameraDisabled() {
        boolean originalValue = dpm.getCameraDisabled(mAdminComponent);
        assertSecurityException(() -> dpm.setCameraDisabled(mAdminComponent, true));
        assertEquals(originalValue, dpm.getCameraDisabled(mAdminComponent));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminWithEnterprisePoliciesBlockedTest"	"testKeyguardDisabledFeatures"	""	"1: admin"	"([3:/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java]:[admin]:[3]:method_text:[);        assertEquals(originalValue, dpm.getKeyguardDisabledFeatures(mAdminComponent));    }   ]) :|: public void testKeyguardDisabledFeatures() {
        int originalValue = dpm.getKeyguardDisabledFeatures(mAdminComponent);
        assertSecurityException(() -> dpm.setKeyguardDisabledFeatures(mAdminComponent,
            DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_ALL));
        assertEquals(originalValue, dpm.getKeyguardDisabledFeatures(mAdminComponent));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminWithEnterprisePoliciesBlockedTest"	"testPasswordHistoryLength"	""	"1: admin"	"([3:/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java]:[admin]:[3]:method_text:[ 3));        assertEquals(originalValue, dpm.getPasswordHistoryLength(mAdminComponent));    }   ]) :|: public void testPasswordHistoryLength() {
        if (!mHasSecureLockScreen) {
            return;
        }
        int originalValue = dpm.getPasswordHistoryLength(mAdminComponent);
        assertSecurityException(() -> dpm.setPasswordHistoryLength(mAdminComponent, 3));
        assertEquals(originalValue, dpm.getPasswordHistoryLength(mAdminComponent));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminWithEnterprisePoliciesBlockedTest"	"testPasswordMinimumLength"	""	"1: admin"	"([3:/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java]:[admin]:[3]:method_text:[ 4));        assertEquals(originalValue, dpm.getPasswordMinimumLength(mAdminComponent));    }   ]) :|: public void testPasswordMinimumLength() {
        int originalValue = dpm.getPasswordMinimumLength(mAdminComponent);
        assertSecurityException(() -> dpm.setPasswordMinimumLength(mAdminComponent, 4));
        assertEquals(originalValue, dpm.getPasswordMinimumLength(mAdminComponent));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminWithEnterprisePoliciesBlockedTest"	"testPasswordMinimumLetters"	""	"1: admin"	"([3:/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java]:[admin]:[3]:method_text:[3));        assertEquals(originalValue, dpm.getPasswordMinimumLetters(mAdminComponent));    }   ]) :|: public void testPasswordMinimumLetters() {
        int originalValue = dpm.getPasswordMinimumLetters(mAdminComponent);
        assertSecurityException(() -> dpm.setPasswordMinimumLetters(mAdminComponent, 3));
        assertEquals(originalValue, dpm.getPasswordMinimumLetters(mAdminComponent));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminWithEnterprisePoliciesBlockedTest"	"testPasswordMinimumLowerCase"	""	"1: admin"	"([3:/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java]:[admin]:[3]:method_text:[);        assertEquals(originalValue, dpm.getPasswordMinimumLowerCase(mAdminComponent));    }   ]) :|: public void testPasswordMinimumLowerCase() {
        int originalValue = dpm.getPasswordMinimumLowerCase(mAdminComponent);
        assertSecurityException(() -> dpm.setPasswordMinimumLowerCase(mAdminComponent, 3));
        assertEquals(originalValue, dpm.getPasswordMinimumLowerCase(mAdminComponent));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminWithEnterprisePoliciesBlockedTest"	"testPasswordMinimumNonLetter"	""	"1: admin"	"([3:/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java]:[admin]:[3]:method_text:[);        assertEquals(originalValue, dpm.getPasswordMinimumNonLetter(mAdminComponent));    }   ]) :|: public void testPasswordMinimumNonLetter() {
        int originalValue = dpm.getPasswordMinimumNonLetter(mAdminComponent);
        assertSecurityException(() -> dpm.setPasswordMinimumNonLetter(mAdminComponent, 3));
        assertEquals(originalValue, dpm.getPasswordMinimumNonLetter(mAdminComponent));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminWithEnterprisePoliciesBlockedTest"	"testPasswordMinimumNumeric"	""	"1: admin"	"([3:/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java]:[admin]:[3]:method_text:[2));        assertEquals(originalValue, dpm.getPasswordMinimumNumeric(mAdminComponent));    }   ]) :|: public void testPasswordMinimumNumeric() {
        int originalValue = dpm.getPasswordMinimumNumeric(mAdminComponent);
        assertSecurityException(() -> dpm.setPasswordMinimumNumeric(mAdminComponent, 2));
        assertEquals(originalValue, dpm.getPasswordMinimumNumeric(mAdminComponent));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminWithEnterprisePoliciesBlockedTest"	"testPasswordMinimumSymbols"	""	"1: admin"	"([3:/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java]:[admin]:[3]:method_text:[2));        assertEquals(originalValue, dpm.getPasswordMinimumSymbols(mAdminComponent));    }   ]) :|: public void testPasswordMinimumSymbols() {
        int originalValue = dpm.getPasswordMinimumSymbols(mAdminComponent);
        assertSecurityException(() -> dpm.setPasswordMinimumSymbols(mAdminComponent, 2));
        assertEquals(originalValue, dpm.getPasswordMinimumSymbols(mAdminComponent));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminWithEnterprisePoliciesBlockedTest"	"testPasswordMinimumUpperCase"	""	"1: admin"	"([3:/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java]:[admin]:[3]:method_text:[);        assertEquals(originalValue, dpm.getPasswordMinimumUpperCase(mAdminComponent));    }   ]) :|: public void testPasswordMinimumUpperCase() {
        int originalValue = dpm.getPasswordMinimumUpperCase(mAdminComponent);
        assertSecurityException(() -> dpm.setPasswordMinimumUpperCase(mAdminComponent, 3));
        assertEquals(originalValue, dpm.getPasswordMinimumUpperCase(mAdminComponent));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminWithEnterprisePoliciesBlockedTest"	"testPasswordQuality"	""	"1: admin"	"([3:/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java]:[admin]:[3]:method_text:[      assertEquals(originalValue, dpm.getPasswordQuality(mAdminComponent));    }    @Override   ]) :|: public void testPasswordQuality() {
        int originalValue = dpm.getPasswordQuality(mAdminComponent);
        assertSecurityException(() -> dpm.setPasswordQuality(mAdminComponent,
            DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC));
        assertEquals(originalValue, dpm.getPasswordQuality(mAdminComponent));
    }

    @Override"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceadmin.DeviceAdminWithEnterprisePoliciesBlockedTest"	"testPasswordExpirationTimeout"	""	"1: admin"	"([3:/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java]:[admin]:[3]:method_text:[}        assertTrue(""Expected SecurityException was not thrown"", securityExceptionThrown);    }}]) :|: public void testPasswordExpirationTimeout() {
        if (!mHasSecureLockScreen) {
            return;
        }
        long originalValue = dpm.getPasswordExpirationTimeout(mAdminComponent);
        assertSecurityException(() -> dpm.setPasswordExpirationTimeout(mAdminComponent, 1234L));
        assertEquals(originalValue, dpm.getPasswordExpirationTimeout(mAdminComponent));
    }

    private void assertSecurityException(Runnable r) {
        boolean securityExceptionThrown = false;
        try {
            r.run();
        } catch (SecurityException e) {
            securityExceptionThrown = true;
        }

        assertTrue(""Expected SecurityException was not thrown"", securityExceptionThrown);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferOutgoingTest"	"testTransferSameAdmin"	""	"1: admin"	"([1:/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java]:[admin]:[1]:method_text:[                  mOutgoingComponentName, mOutgoingComponentName, b);                });    }   ]) :|: 
    public void testTransferSameAdmin() {
        PersistableBundle b = new PersistableBundle();
        assertThrows(
                IllegalArgumentException.class,
                () -> {
                    mDevicePolicyManager.transferOwnership(
                            mOutgoingComponentName, mOutgoingComponentName, b);
                });
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferOutgoingTest"	"testGetTransferOwnershipBundleOnlyCalledFromAdmin"	""	"1: admin"	"([1:/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java]:[admin]:[1]:method_text:[ assertThrows(SecurityException.class, mDevicePolicyManager::getTransferOwnershipBundle);    }   ]) :|: 
    public void testGetTransferOwnershipBundleOnlyCalledFromAdmin() throws Throwable {
        PersistableBundle b = new PersistableBundle();
        b.putBoolean(ARE_PARAMETERS_SAVED, true);
        mDevicePolicyManager.transferOwnership(mOutgoingComponentName, INCOMING_COMPONENT_NAME, b);
        assertThrows(SecurityException.class, mDevicePolicyManager::getTransferOwnershipBundle);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferOutgoingTest"	"testIsBundleNullNoTransfer"	""	"1: admin"	"([3:/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java]:[admin]:[3]:method_text:[Pref(Context context, String key) {        return getPrefs(context).getBoolean(key, false);    }}]) :|: 
    public void testIsBundleNullNoTransfer() throws Throwable {
        assertNull(mDevicePolicyManager.getTransferOwnershipBundle());
    }

    private void setUserRestriction(String restriction, boolean add) {
        DevicePolicyManager dpm = mContext.getSystemService(DevicePolicyManager.class);
        if (add) {
            dpm.addUserRestriction(mOutgoingComponentName, restriction);
        } else {
            dpm.clearUserRestriction(mOutgoingComponentName, restriction);
        }
    }

    private void setAffiliationId(String id) {
        ComponentName admin = mOutgoingComponentName;
        DevicePolicyManager dpm = (DevicePolicyManager)
                mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
        Set<String> ids = Collections.singleton(id);
        dpm.setAffiliationIds(admin, ids);
        assertEquals(ids, dpm.getAffiliationIds(admin));
    }

    private static SharedPreferences getPrefs(Context context) {
        return context.getSharedPreferences(SHARED_PREFERENCE_NAME, Context.MODE_PRIVATE);
    }

    private static void putBooleanPref(Context context, String key, boolean value) {
        getPrefs(context).edit().putBoolean(key, value).apply();
    }

    protected static boolean getBooleanPref(Context context, String key) {
        return getPrefs(context).getBoolean(key, false);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.transferowner.TransferProfileOwnerOutgoingTest"	"testTransferOwnership"	""	"1: admin"	"([2:/com/android/cts/transferowner/TransferProfileOwnerOutgoingTest.java]:[admin]:[2]:method_text:[CrossProfileCallerIdDisabled(mOutgoingComponentName,                    false);        });    }}]) :|: 
    public void testTransferOwnership() throws Throwable {
        PersistableBundle b = new PersistableBundle();
        mDevicePolicyManager.transferOwnership(mOutgoingComponentName, INCOMING_COMPONENT_NAME, b);
        assertTrue(mDevicePolicyManager.isAdminActive(INCOMING_COMPONENT_NAME));
        assertTrue(mDevicePolicyManager.isProfileOwnerApp(INCOMING_COMPONENT_NAME.getPackageName()));
        assertFalse(
                mDevicePolicyManager.isProfileOwnerApp(mOutgoingComponentName.getPackageName()));
        assertFalse(mDevicePolicyManager.isAdminActive(mOutgoingComponentName));
        assertThrows(SecurityException.class, () -> {
            mDevicePolicyManager.setCrossProfileCallerIdDisabled(mOutgoingComponentName,
                    false);
        });
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/TransferProfileOwnerOutgoingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.transferowner.TransferDeviceOwnerOutgoingTest"	"testTransferOwnership"	""	"1: admin"	"([2:/com/android/cts/transferowner/TransferDeviceOwnerOutgoingTest.java]:[admin]:[2]:method_text:[{            mDevicePolicyManager.getSecondaryUsers(mOutgoingComponentName);        });    }   ]) :|: 
    public void testTransferOwnership() throws Throwable {
        PersistableBundle b = new PersistableBundle();
        mDevicePolicyManager.transferOwnership(mOutgoingComponentName, INCOMING_COMPONENT_NAME, b);
        assertTrue(mDevicePolicyManager.isAdminActive(INCOMING_COMPONENT_NAME));
        assertTrue(mDevicePolicyManager.isDeviceOwnerApp(INCOMING_COMPONENT_NAME.getPackageName()));
        assertFalse(
                mDevicePolicyManager.isDeviceOwnerApp(mOutgoingComponentName.getPackageName()));
        assertFalse(mDevicePolicyManager.isAdminActive(mOutgoingComponentName));
        assertThrows(SecurityException.class, () -> {
            mDevicePolicyManager.getSecondaryUsers(mOutgoingComponentName);
        });
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/TransferDeviceOwnerOutgoingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.intent.sender.ContentTest"	"testPersistablePermission"	""	"1: granted"	"([3:/com/android/cts/intent/sender/ContentTest.java]:[granted]:[3]:method_text:[ri of a     * ContentProvider, it still cannot access a uri it does not have access to.     */   ]) :|: public void testPersistablePermission() throws Exception {
        Uri uri = getUriWithTextInFile(""persistable_test"", MESSAGE);
        grantPersistableReadPermission(uri);

        // Now checking if the receiver can read this uri, without re-granting the read permission.
        Intent intent = new Intent(ACTION_READ_FROM_URI);
        intent.setClipData(ClipData.newRawUri("""", uri));

        final Intent result = mActivity.getCrossProfileResult(intent);
        assertNotNull(result);
        assertEquals(MESSAGE, result.getStringExtra(""extra_response""));
    }

    /**
     * The intent receiver will try to read uriNotGranted.
     * Inside the same user, this uri can be read if the receiver has the
     * com.android.cts.managedprofile.permission.SAMPLE permission. But since we cross
     * user-boundaries, it should not be able to (only uri grants work accross users for apps
     * without special permission).
     * We also grant uriGranted to the receiver (this uri belongs to the same content provider as
     * uriNotGranted), to enforce that even if an app has permission to one uri of a
     * ContentProvider, it still cannot access a uri it does not have access to.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/ContentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.intent.sender.ContentTest"	"testAppPermissionsDontWorkAcrossProfiles"	""	"1: granted"	"([7:/com/android/cts/intent/sender/ContentTest.java]:[granted]:[7]:method_text:[       }    }    /**     * Test that an app can notify a uri change across profiles.     */   ]) :|: public void testAppPermissionsDontWorkAcrossProfiles() throws Exception {
        // The FileProvider does not allow to use app permissions. So we need to use another
        // ContentProvider.
        Uri uriGranted = getBasicContentProviderUri(""uri_granted"");
        Uri uriNotGranted = getBasicContentProviderUri(""uri_not_granted"");

        // Granting uriGranted to the receiver
        // Using a persistable permission so that it is kept even after we restart the receiver
        // activity with another intent.
        grantPersistableReadPermission(uriGranted);

        Intent notGrant = new Intent(ACTION_READ_FROM_URI);
        notGrant.setClipData(ClipData.newRawUri("""", uriNotGranted));

        final Intent result = mActivity.getCrossProfileResult(notGrant);
        assertNotNull(result);
        // The receiver did not have permission to read the uri. So it should have caught a security
        // exception.
        assertTrue(result.getBooleanExtra(""extra_caught_security_exception"", false));
    }

    /**
     * Ensure that sender is only able to send data that it has access to.
     */
    // STOPSHIP: enable once b/115619667 is fixed
    public void _testSecurity() throws Exception {
        // Pick a URI that neither of us have access to; it doens't matter if
        // its missing, since we expect a SE before a FNFE.
        final Uri uri = Uri.parse(""content://media/external/images/media/10240"");
        final Intent intent = new Intent(ACTION_READ_FROM_URI);
        intent.setClipData(ClipData.newRawUri("""", uri));
        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);

        // We're expecting to run into a security exception
        final Intent result = mActivity.getCrossProfileResult(intent);
        if (result == null) {
            // This is fine; probably of a SecurityException when off in the
            // system somewhere.
        } else {
            // But if we somehow came through, make sure they threw.
            assertT"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/ContentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.intent.sender.SuspendPackageTest"	"testPackageSuspendedWithPackageManager"	""	"1: admin"	"([1:/com/android/cts/intent/sender/SuspendPackageTest.java]:[admin]:[1]:method_text:[s(settingsPackageName + "":id/admin_support_icon"")                .pkg(settingsPackageName);    }}]) :|: public void testPackageSuspendedWithPackageManager() throws Exception {
        assertPackageSuspended(/* suspended= */ true, /* customDialog= */ true);
    }

    /**
     * Verify that the package is suspended by trying to start the activity inside it. If the
     * package is not suspended, the target activity will return the result.
     */
    private void assertPackageSuspended(boolean suspended, boolean customDialog) throws Exception {
        Intent intent = new Intent();
        intent.setClassName(INTENT_RECEIVER_PKG, TARGET_ACTIVITY_NAME);
        if (!temporarilySkipActivityLaunch()) {
            Intent result = mActivity.getResult(intent);
            Log.d(TAG, ""assertPackageSuspended(suspended="" + suspended
                    + "", customDialog="" + customDialog + ""): result for activity ""
                    + INTENT_RECEIVER_PKG + ""/"" + TARGET_ACTIVITY_NAME + "" on user ""
                    + mContext.getUserId() + "": "" + result);
            if (suspended) {
                if (customDialog) {
                    dismissCustomDialog();
                } else {
                    dismissPolicyTransparencyDialog();
                }
                assertWithMessage(""result for activitiy %s while suspended"", intent).that(result)
                        .isNull();
            } else {
                assertWithMessage(""result for activitiy %s while NOT suspended"", intent)
                        .that(result).isNotNull();
            }
        }
        // No matter if it is suspended or not, we should be able to resolve the activity.
        ResolveInfo resolveInfo = mPackageManager.resolveActivity(intent, /* flags= */ 0);
        assertWithMessage(""ResolveInfo for activity %s"", intent).that(resolveInfo).isNotNull();
        Log.d(TAG, ""ResolveInfo: "" + resolveInfo);
    }

    /**
     * Wait for the policy transparency dialog and dismiss it.
     */
    private void dismissPolicyTransparencyDialog() {
        final UiDevice device = UiDevice.getIn"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/SuspendPackageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.PrivateDnsPolicyTest"	"testDisallowPrivateDnsConfigurationRestriction"	""	"1: UserManager.DISALLOW"	"([2:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[UserManager.DISALLOW]:[2]:method_text:[r.hasUserRestriction(                UserManager.DISALLOW_CONFIG_PRIVATE_DNS)).isTrue();    }   ]) :|: public void testDisallowPrivateDnsConfigurationRestriction() {
        setUserRestriction(UserManager.DISALLOW_CONFIG_PRIVATE_DNS, true);
        assertThat(mUserManager.hasUserRestriction(
                UserManager.DISALLOW_CONFIG_PRIVATE_DNS)).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PrivateDnsPolicyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.PrivateDnsPolicyTest"	"testClearDisallowPrivateDnsConfigurationRestriction"	""	"1: UserManager.DISALLOW"	"([2:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[UserManager.DISALLOW]:[2]:method_text:[privateDnsHost, expectedResult, resultCode),                expectedResult, resultCode);    }   ]) :|: public void testClearDisallowPrivateDnsConfigurationRestriction() {
        setUserRestriction(UserManager.DISALLOW_CONFIG_PRIVATE_DNS, false);
        assertThat(mUserManager.hasUserRestriction(
                UserManager.DISALLOW_CONFIG_PRIVATE_DNS)).isFalse();
    }

    private void setUserRestriction(String restriction, boolean add) {
        if (add) {
            mDevicePolicyManager.addUserRestriction(getWho(), restriction);
        } else {
            mDevicePolicyManager.clearUserRestriction(getWho(), restriction);
        }
    }

    /**
     * Call DevicePolicyManager.setGlobalPrivateDnsModeOpportunistic, expecting the result code
     * expectedResult.
     */
    private void callSetGlobalPrivateDnsOpportunisticModeExpectingResult(int expectedResult) {
        int resultCode = mDevicePolicyManager.setGlobalPrivateDnsModeOpportunistic(getWho());

        assertEquals(
                String.format(
                        ""Call to setGlobalPrivateDnsModeOpportunistic ""
                                + ""should have produced result %d, but was %d"",
                        expectedResult, resultCode),
                expectedResult, resultCode);
    }

    /**
     * Call DevicePolicyManager.setGlobalPrivateDnsModeSpecifiedHost with the given host, expecting
     * the result code expectedResult.
     */
    private void callSetGlobalPrivateDnsHostModeExpectingResult(String privateDnsHost,
            int expectedResult) {
        int resultCode = mDevicePolicyManager.setGlobalPrivateDnsModeSpecifiedHost(
                getWho(), privateDnsHost);

        assertEquals(
                String.format(
                        ""Call to setGlobalPrivateDnsModeSpecifiedHost with host %s ""
                                + ""should have produced result %d, but was %d"",
                        privateDnsHost, expectedResult, resultCode),
                expectedResult, resultCode);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PrivateDnsPolicyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.PrivateDnsPolicyTest"	"testCanSetModeDespiteUserRestriction"	""	"1: UserManager.DISALLOW"	"([1:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[UserManager.DISALLOW]:[1]:method_text:[ISTIC);        assertThat(mDevicePolicyManager.getGlobalPrivateDnsHost(getWho())).isNull();    }}]) :|: public void testCanSetModeDespiteUserRestriction() {
        // First set a specific host and assert that applied.
        callSetGlobalPrivateDnsHostModeExpectingResult(
                VALID_PRIVATE_DNS_HOST,
                DevicePolicyManager.PRIVATE_DNS_SET_NO_ERROR);
        assertThat(
                mDevicePolicyManager.getGlobalPrivateDnsMode(getWho())).isEqualTo(
                PRIVATE_DNS_MODE_PROVIDER_HOSTNAME);

        // Set a user restriction
        setUserRestriction(UserManager.DISALLOW_CONFIG_PRIVATE_DNS, true);

        // Next, set the mode to automatic and confirm that has applied.
        callSetGlobalPrivateDnsOpportunisticModeExpectingResult(
                DevicePolicyManager.PRIVATE_DNS_SET_NO_ERROR);

        assertThat(
                mDevicePolicyManager.getGlobalPrivateDnsMode(getWho())).isEqualTo(
                PRIVATE_DNS_MODE_OPPORTUNISTIC);
        assertThat(mDevicePolicyManager.getGlobalPrivateDnsHost(getWho())).isNull();
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PrivateDnsPolicyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.BluetoothRestrictionTest"	"testEnableBluetoothFailsWhenDisallowed"	""	"1: UserManager.DISALLOW"	"([1:/com/android/cts/deviceowner/BluetoothRestrictionTest.java]:[UserManager.DISALLOW]:[1]:method_text:[ // Check that enabling Bluetooth fails.        assertFalse(mBluetoothAdapter.enable());    }   ]) :|: public void testEnableBluetoothFailsWhenDisallowed() throws Exception {
        if (mBluetoothAdapter == null) {
            return;
        }

        // Make sure Bluetooth is initially disabled.
        disable();

        // Add the user restriction disallowing Bluetooth.
        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_BLUETOOTH);

        // Check that enabling Bluetooth fails.
        assertFalse(mBluetoothAdapter.enable());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/BluetoothRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.BluetoothRestrictionTest"	"testBluetoothGetsDisabledAfterRestrictionSet"	""	"1: UserManager.DISALLOW"	"([1:/com/android/cts/deviceowner/BluetoothRestrictionTest.java]:[UserManager.DISALLOW]:[1]:method_text:[ // Check that Bluetooth gets disabled as a result.        assertDisabledAfterTimeout();    }   ]) :|: public void testBluetoothGetsDisabledAfterRestrictionSet() throws Exception {
        if (mBluetoothAdapter == null) {
            return;
        }

        // Make sure Bluetooth is enabled first.
        enable();

        // Add the user restriction to disallow Bluetooth.
        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_BLUETOOTH);

        // Check that Bluetooth gets disabled as a result.
        assertDisabledAfterTimeout();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/BluetoothRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.BluetoothRestrictionTest"	"testEnableBluetoothSucceedsAfterRestrictionRemoved"	""	"1: UserManager.DISALLOW"	"([2:/com/android/cts/deviceowner/BluetoothRestrictionTest.java]:[UserManager.DISALLOW]:[2]:method_text:[te of the activity is set back to default if Bluetooth is not     * disallowed anymore.     */   ]) :|: public void testEnableBluetoothSucceedsAfterRestrictionRemoved() throws Exception {
        if (mBluetoothAdapter == null) {
            return;
        }

        // Add the user restriction.
        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_BLUETOOTH);

        // Make sure Bluetooth is disabled.
        assertDisabledAfterTimeout();

        // Remove the user restriction.
        mDevicePolicyManager.clearUserRestriction(getWho(), UserManager.DISALLOW_BLUETOOTH);

        // Check that it is possible to enable Bluetooth again once the restriction has been
        // removed.
        enable();
    }

    /**
     * Tests that BluetoothOppLauncherActivity gets disabled when Bluetooth itself or Bluetooth
     * sharing is disallowed.
     *
     * <p> It also checks the state of the activity is set back to default if Bluetooth is not
     * disallowed anymore.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/BluetoothRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.BluetoothRestrictionTest"	"testOppDisabledWhenRestrictionSet"	""	"1: UserManager.DISALLOW"	"([2:/com/android/cts/deviceowner/BluetoothRestrictionTest.java]:[UserManager.DISALLOW]:[2]:method_text:[t) {        try {            Thread.sleep(t);        } catch (InterruptedException e) {}    }}]) :|: public void testOppDisabledWhenRestrictionSet() throws Exception {
        if (mBluetoothAdapter == null) {
            return;
        }

        // First verify DISALLOW_BLUETOOTH.
        testOppDisabledWhenRestrictionSet(UserManager.DISALLOW_BLUETOOTH);
        // Verify DISALLOW_BLUETOOTH_SHARING which leaves bluetooth workable but the sharing
        // component should be disabled.
        testOppDisabledWhenRestrictionSet(UserManager.DISALLOW_BLUETOOTH_SHARING);
    }

    /** Verifies that a given restriction disables the bluetooth sharing component. */
    private void testOppDisabledWhenRestrictionSet(String restriction) {
        // Add the user restriction.
        mDevicePolicyManager.addUserRestriction(getWho(), restriction);

        // The BluetoothOppLauncherActivity's component should be disabled.
        assertComponentStateAfterTimeout(
                OPP_LAUNCHER_COMPONENT, PackageManager.COMPONENT_ENABLED_STATE_DISABLED);

        // Remove the user restriction.
        mDevicePolicyManager.clearUserRestriction(getWho(), restriction);

        // The BluetoothOppLauncherActivity's component should be in the default state.
        assertComponentStateAfterTimeout(
                OPP_LAUNCHER_COMPONENT, PackageManager.COMPONENT_ENABLED_STATE_DEFAULT);
    }

    /** Helper to turn BT off.
     * This method will either fail on an assert, or return with BT turned off.
     * Behavior of getState() and isEnabled() are validated along the way.
     */
    private void disable() {
        // Can't disable a bluetooth adapter that does not exist.
        if (mBluetoothAdapter == null)
            return;

        sleep(CHECK_WAIT_TIME_MS);
        if (mBluetoothAdapter.getState() == BluetoothAdapter.STATE_OFF) {
            assertFalse(mBluetoothAdapter.isEnabled());
            return;
        }

        assertEquals(BluetoothAdapter.STATE_ON, mBluetoothAdapter.getState());
        assertTrue(mBluetoothAdapter.isEnabled());
        mBluetoothAdapt"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/BluetoothRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.SetTimeTest"	"currentTimeMillis"	""	"1: admin"	"([1:/com/android/cts/deviceowner/SetTimeTest.java]:[admin]:[1]:method_text:[* 1000);        } finally {            mContext.unregisterReceiver(receiver);        }    }   ]) :|: public void test/*
 *.
 */
package com.android.cts.deviceowner;

import android.app.admin.DevicePolicyManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.provider.Settings;

import java.util.Calendar;
import java.util.TimeZone;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

/**
 * Test {@link DevicePolicyManager#setTime} and @link {DevicePolicyManager#setTimeZone}
 */
public class SetTimeTest extends BaseDeviceOwnerTest {

    private static final long TEST_TIME_1 = 10000000;
    private static final long TEST_TIME_2 = 100000000;
    private static final String TEST_TIME_ZONE_1 = ""America/New_York"";
    private static final String TEST_TIME_ZONE_2 = ""America/Los_Angeles"";
    private static final long TIMEOUT_SEC = 60;

    // Real world time to restore after the test.
    private long mStartTimeWallClockMillis;
    // Elapsed time to measure time taken by the test.
    private long mStartTimeElapsedNanos;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        saveTime();
    }

    @Override
    protected void tearDown() throws Exception {
        restoreTime();
        super.tearDown();
    }

    private void testSetTimeWithValue(long testTime) throws Exception {
        final CountDownLatch latch = new CountDownLatch(1);
        BroadcastReceiver receiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                latch.countDown();
            }
        };
        mContext.registerReceiver(receiver, new IntentFilter(Intent.ACTION_TIME_CHANGED));

        try {
            assertTrue(""failed to set time"", mDevicePolicyManager.setTime(getWho(), testTime));
            assertTrue(""timed out waiting for time change broadcast"",
                latch.await(TIMEOUT_SEC, TimeUnit.SECONDS));
            assertTrue"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SetTimeTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.AffiliationTest"	"testSetAffiliationId_null"	""	"1: admin"	"([1:/com/android/cts/deviceowner/AffiliationTest.java]:[admin]:[1]:method_text:[tion"");        } catch (IllegalArgumentException ex) {            // Expected        }    }   ]) :|: 
    public void testSetAffiliationId_null() throws Exception {
        try {
            Log.d(TAG, ""setAffiliationIds(null)"");
            mDevicePolicyManager.setAffiliationIds(mAdminComponent, null);
            fail(""Should throw IllegalArgumentException"");
        } catch (IllegalArgumentException ex) {
            // Expected
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AffiliationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.AffiliationTest"	"testSetAffiliationId_containsEmptyString"	""	"1: admin"	"([1:/com/android/cts/deviceowner/AffiliationTest.java]:[admin]:[1]:method_text:[tion"");        } catch (IllegalArgumentException ex) {            // Expected        }    }   ]) :|: 
    public void testSetAffiliationId_containsEmptyString() throws Exception {
        try {
            Log.d(TAG, ""setAffiliationIds(empty)"");
            mDevicePolicyManager.setAffiliationIds(mAdminComponent, Collections.singleton(null));
            fail(""Should throw IllegalArgumentException"");
        } catch (IllegalArgumentException ex) {
            // Expected
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AffiliationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.AffiliationTest"	"testSetAffiliationId2"	""	"1: admin"	"([2:/com/android/cts/deviceowner/AffiliationTest.java]:[admin]:[2]:method_text:[Log.e(TAG, ""Failed to set affiliation ids ("" + ids + "")"", e);            throw e;        }    }}]) :|: 
    public void testSetAffiliationId2() throws Exception {
        setAffiliationIds(Collections.singleton(""id.number.2""));
    }

    private void setAffiliationIds(Set<String> ids) throws Exception {
        try {
            Log.d(TAG, ""setAffiliationIds("" + ids + "") on user "" + mUserId);
            mDevicePolicyManager.setAffiliationIds(mAdminComponent, ids);
            Set<String> setIds = mDevicePolicyManager.getAffiliationIds(mAdminComponent);
            Log.d(TAG, ""getAffiliationIds(): "" + setIds);
            assertWithMessage(""affiliationIds on user %s"", mUserId).that(setIds)
                    .containsExactlyElementsIn(ids);
        } catch (Exception e) {
            Log.e(TAG, ""Failed to set affiliation ids ("" + ids + "")"", e);
            throw e;
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AffiliationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.HardwarePropertiesManagerTest"	"testHardwarePropertiesManager"	""	"1: admin"	"([1:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[admin]:[1]:method_text:[ges);            oldFanSpeeds = fanSpeeds;            oldCpuUsages = cpuUsages;        }    }}]) :|: public void testHardwarePropertiesManager() throws InterruptedException,
            SecurityException {
        HardwarePropertiesManager hm = TestAppSystemServiceFactory
                .getHardwarePropertiesManager(getContext(), BasicAdminReceiver.class);

        float[] oldFanSpeeds = hm.getFanSpeeds();

        float[] cpuTemps = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_CPU,
                HardwarePropertiesManager.TEMPERATURE_CURRENT);
        float[] cpuThrottlingThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_CPU,
                HardwarePropertiesManager.TEMPERATURE_THROTTLING);
        float[] cpuShutdownThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_CPU,
                HardwarePropertiesManager.TEMPERATURE_SHUTDOWN);

        float[] gpuTemps = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_GPU,
                HardwarePropertiesManager.TEMPERATURE_CURRENT);
        float[] gpuThrottlingThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_GPU,
                HardwarePropertiesManager.TEMPERATURE_THROTTLING);
        float[] gpuShutdownThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_GPU,
                HardwarePropertiesManager.TEMPERATURE_SHUTDOWN);

        float[] batteryTemps = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_BATTERY,
                HardwarePropertiesManager.TEMPERATURE_CURRENT);
        float[] batteryThrottlingThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_BATTERY,
                HardwarePropertiesManager.TEMPERATURE_THROTTLING);
        float[] batteryShutdownThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPER"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.AirplaneModeRestrictionTest"	"testAirplaneModeTurnedOffWhenRestrictionSet"	""	"1: UserManager.DISALLOW"	"([1:/com/android/cts/deviceowner/AirplaneModeRestrictionTest.java]:[UserManager.DISALLOW]:[1]:method_text:[DE_ON));        } finally {            mContext.unregisterReceiver(receiver);        }    }   ]) :|: public void testAirplaneModeTurnedOffWhenRestrictionSet() throws Exception {
        final CountDownLatch latch = new CountDownLatch(1);
        // Using array so that it can be modified in broadcast receiver.
        boolean value[] = new boolean[1];
        BroadcastReceiver receiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                value[0] = intent.getBooleanExtra(""state"", true);
                latch.countDown();
            }
        };
        mContext.registerReceiver(receiver, new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED));

        try {
            Settings.Global.putInt(mContext.getContentResolver(), AIRPLANE_MODE_ON, 1);
            mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_AIRPLANE_MODE);
            assertTrue(latch.await(TIMEOUT_SEC, TimeUnit.SECONDS));
            assertFalse(value[0]);
            assertEquals(0, Settings.Global.getInt(
                    mContext.getContentResolver(), Settings.Global.AIRPLANE_MODE_ON));
        } finally {
            mContext.unregisterReceiver(receiver);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AirplaneModeRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.AirplaneModeRestrictionTest"	"testAirplaneModeCannotBeTurnedOnWithRestrictionOn"	""	"1: UserManager.DISALLOW"	"([1:/com/android/cts/deviceowner/AirplaneModeRestrictionTest.java]:[UserManager.DISALLOW]:[1]:method_text:[ettings.Global.getInt(                mContext.getContentResolver(), AIRPLANE_MODE_ON));    }   ]) :|: public void testAirplaneModeCannotBeTurnedOnWithRestrictionOn()
            throws Exception {
        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_AIRPLANE_MODE);
        Thread.sleep(SLEEP_MS);
        Settings.Global.putInt(mContext.getContentResolver(), AIRPLANE_MODE_ON, 1);
        assertEquals(0, Settings.Global.getInt(
                mContext.getContentResolver(), AIRPLANE_MODE_ON));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AirplaneModeRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_StopEphemeralUser_DisallowRemoveUser"	""	"2: UserManager.DISALLOW admin"	"([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[admin]:[2]:method_text:[omponentName),                UserManager.USER_OPERATION_SUCCESS, ""cannot logout user"");    }   ]) :|: public void testCreateAndManageUser_StopEphemeralUser_DisallowRemoveUser() throws Exception {
        // Set DISALLOW_REMOVE_USER restriction
        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_REMOVE_USER);

        UserHandle userHandle = createAndManageUser(DevicePolicyManager.MAKE_USER_EPHEMERAL);
        startUserInBackgroundAndWaitForBroadcasts(userHandle);
        UserActionCallback callback = UserActionCallback.getCallbackForBroadcastActions(
                getContext(),
                BasicAdminReceiver.ACTION_USER_STOPPED, BasicAdminReceiver.ACTION_USER_REMOVED);

        callback.runAndUnregisterSelf(
                () -> stopUserAndCheckResult(userHandle, UserManager.USER_OPERATION_SUCCESS));

        // It's running just one operation (which issues a ACTION_USER_STOPPED), but as the
        // user is ephemeral, it will be automatically removed (which issues a
        // ACTION_USER_REMOVED).
        assertWithMessage(""user on broadcasts"").that(callback.getUsersOnReceivedBroadcasts())
                .containsExactly(userHandle, userHandle);
    }

    @SuppressWarnings(""unused"")
    private static void logoutUser(Context context, DevicePolicyManager devicePolicyManager,
            ComponentName componentName) {
        assertUserOperationResult(devicePolicyManager.logoutUser(componentName),
                UserManager.USER_OPERATION_SUCCESS, ""cannot logout user"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_AddRestrictionSet"	""	"1: UserManager.DISALLOW"	"([1:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[UserManager.DISALLOW]:[1]:method_text:[UserRestriction(getWho(), UserManager.DISALLOW_ADD_USER);        createAndManageUser();    }   ]) :|: public void testCreateAndManageUser_AddRestrictionSet() throws Exception {
        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_ADD_USER);

        createAndManageUser();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_RemoveRestrictionSet"	""	"1: UserManager.DISALLOW"	"([1:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[UserManager.DISALLOW]:[1]:method_text:[ertWithMessage(""user on broadcasts"").that(usersOnBroadcasts).containsExactly(userHandle);    }   ]) :|: public void testCreateAndManageUser_RemoveRestrictionSet() throws Exception {
        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_REMOVE_USER);

        UserHandle userHandle = createAndManageUser();

        // When the device owner itself has set the user restriction, it should still be allowed
        // to remove a user.
        List<UserHandle> usersOnBroadcasts = removeUserAndWaitForBroadcasts(userHandle);

        assertWithMessage(""user on broadcasts"").that(usersOnBroadcasts).containsExactly(userHandle);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_LogoutUser"	""	"1: admin"	"([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[admin]:[2]:method_text:[sertWithMessage(""affiliated user"").that(devicePolicyManager.isAffiliatedUser()).isTrue();    }   ]) :|: public void testCreateAndManageUser_LogoutUser() throws Exception {
        UserActionCallback callback = UserActionCallback.getCallbackForBroadcastActions(
                getContext(),
                BasicAdminReceiver.ACTION_USER_STARTED, BasicAdminReceiver.ACTION_USER_STOPPED);

        UserHandle userHandle = runCrossUserVerification(callback,
                /* createAndManageUserFlags= */ 0, ""logoutUser"", /* currentUserPackages= */ null);

        assertWithMessage(""user on broadcasts"").that(callback.getUsersOnReceivedBroadcasts())
                .containsExactly(userHandle, userHandle);
    }

    @SuppressWarnings(""unused"")
    private static void assertAffiliatedUser(Context context,
            DevicePolicyManager devicePolicyManager, ComponentName componentName) {
        assertWithMessage(""affiliated user"").that(devicePolicyManager.isAffiliatedUser()).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_LeaveAllSystemApps"	""	"1: admin"	"([1:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[admin]:[1]:method_text:[serHandle;    }    // createAndManageUser should circumvent the DISALLOW_ADD_USER restriction   ]) :|: public void testCreateAndManageUser_LeaveAllSystemApps() throws Exception {
        int currentUserId = ActivityManager.getCurrentUser();
        // TODO: instead of hard-coding the user type, calling getPreInstallableSystemPackages(),
        // and passing the packages to runCrossUserVerification() / assertAllSystemAppsInstalled(),
        // ideally the later should call um.getPreInstallableSystemPackages(um.getUsertype())
        // (where um is the UserManager with the context of the newly created user),
        // but currently the list of pre-installed apps is passed to the new user in the bundle.
        // Given that these tests will be refactored anyways, it's not worth to try to change it.
        String newUserType = UserManager.USER_TYPE_FULL_SECONDARY;
        Set<String> preInstalledSystemPackages = SystemUtil.callWithShellPermissionIdentity(
                () -> UserManager.get(mContext).getPreInstallableSystemPackages(newUserType));
        if (preInstalledSystemPackages != null) {
            Log.d(TAG, preInstalledSystemPackages.size() + "" pre-installed system apps for ""
                    + ""new user of type "" + newUserType + "": "" + preInstalledSystemPackages);
        } else {
            Log.d(TAG, ""no pre-installed system apps allowlist for new user of type"" + newUserType);
        }

        runCrossUserVerification(/* callback= */ null,
                DevicePolicyManager.LEAVE_ALL_SYSTEM_APPS_ENABLED, ""assertAllSystemAppsInstalled"",
                preInstalledSystemPackages);
        PrimaryUserService.assertCrossUserCallArrived();
    }

    private UserHandle runCrossUserVerification(int createAndManageUserFlags, String methodName)
            throws Exception {
        return runCrossUserVerification(/* callback= */ null, createAndManageUserFlags, methodName,
                /* currentUserPackages= */ null);
    }

    private UserHandle runCrossUserVerification(UserActionCallback callback,
            int createAndManageUserFlags, St"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testUserAddedOrRemovedBroadcasts"	""	"1: admin"	"([16:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[admin]:[16]:method_text:[{            return new ComponentName(context, SecondaryUserAdminReceiver.class);        }    }}]) :|: public void testUserAddedOrRemovedBroadcasts() throws Exception {
        UserHandle userHandle = createAndManageUser();

        List<UserHandle> userHandles = removeUserAndWaitForBroadcasts(userHandle);

        assertWithMessage(""user on broadcasts"").that(userHandles).containsExactly(userHandle);
    }

    private UserHandle createAndManageUser() throws Exception {
        return createAndManageUser(/* flags= */ 0);
    }

    private UserHandle createAndManageUser(int flags) throws Exception {
        return createAndManageUser(/* profileOwner= */ getWho(), /* adminExtras= */ null, flags);
    }

    private UserHandle createAndManageUser(ComponentName profileOwner,
            PersistableBundle adminExtras, int flags) throws Exception {
        String testUserName = ""TestUser_"" + System.currentTimeMillis();

        UserActionCallback callback = UserActionCallback.getCallbackForBroadcastActions(
                getContext(), BasicAdminReceiver.ACTION_USER_ADDED);

        UserHandle userHandle = callback.callAndUnregisterSelf(() ->
                mDevicePolicyManager.createAndManageUser(
                        /* admin= */ getWho(),
                        testUserName,
                        profileOwner,
                        adminExtras,
                        flags));
        Log.d(TAG, ""User '"" + testUserName + ""' created: "" + userHandle);
        return userHandle;
    }

    /**
     * Switches to the given user, or fails if the user could not be switched or if the expected
     * broadcasts were not received in time.
     *
     * @return users received in the broadcasts
     */
    private List<UserHandle> switchUserAndWaitForBroadcasts(UserHandle userHandle)
            throws Exception {
        Log.d(TAG, ""Switching to user "" + userHandle);

        UserActionCallback callback = UserActionCallback.getCallbackForBroadcastActions(
                getContext(),
                BasicAdminReceiver.ACTION_USER_STARTED, BasicAdminReceiver.ACTION_USE"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.HeadlessSystemUserTest"	"isHeadlessSystemUserMode"	""	"1: admin"	"([1:/com/android/cts/deviceowner/HeadlessSystemUserTest.java]:[admin]:[1]:method_text:[.getSystemService(UserManager.class);        Log.d(TAG, ""setUp(): userId="" + mUserId);    }   ]) :|: public void test/*
 *.
 */
package com.android.cts.deviceowner;

import static com.android.compatibility.common.util.SystemUtil.callWithShellPermissionIdentity;
import static com.android.compatibility.common.util.SystemUtil.eventually;

import static com.google.common.truth.Truth.assertWithMessage;

import android.annotation.UserIdInt;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.pm.UserInfo;
import android.os.UserHandle;
import android.os.UserManager;
import android.util.Log;

//TODO(b/174859111): move to automotive specific module
/**
 * Device owner tests specific for devices that use
 * {@link android.os.UserManager#isHeadlessSystemUserMode()}.
 */
public final class HeadlessSystemUserTest extends BaseDeviceOwnerTest {

    private static final String TAG = HeadlessSystemUserTest.class.getSimpleName();

    // To be used in cases where it needs to test the DPM of the current user (as
    // mDevicePolicyManager wraps calls to user 0's DeviceOwner DPM);
    private DevicePolicyManager mCurrentUserDpm;

    private UserManager mUserManager;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        mCurrentUserDpm = mContext.getSystemService(DevicePolicyManager.class);
        mUserManager = mContext.getSystemService(UserManager.class);

        Log.d(TAG, ""setUp(): userId="" + mUserId);

    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HeadlessSystemUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.HeadlessSystemUserTest"	"testProfileOwnerIsSetOnCurrentUser"	""	"1: admin"	"([2:/com/android/cts/deviceowner/HeadlessSystemUserTest.java]:[admin]:[2]:method_text:[e admin = mCurrentUserDpm.getProfileOwner();        assertProfileOwner(admin, mUserId);    }   ]) :|: public void testProfileOwnerIsSetOnCurrentUser() {
        ComponentName admin = mCurrentUserDpm.getProfileOwner();

        assertProfileOwner(admin, mUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HeadlessSystemUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.HeadlessSystemUserTest"	"testProfileOwnerIsSetOnNewUser"	""	"1: admin"	"([3:/com/android/cts/deviceowner/HeadlessSystemUserTest.java]:[admin]:[3]:method_text:[profile owner for user %s"", admin, userId)                .that(admin).isEqualTo(getWho());    }}]) :|: public void testProfileOwnerIsSetOnNewUser() throws Exception {
        UserInfo user = null;
        try {
            user = callWithShellPermissionIdentity(() -> mUserManager
                    .createUser(""testProfileOwnerIsSetOnNewUser"", /* flags= */ 0));
            assertWithMessage(""new user"").that(user).isNotNull();
            Log.d(TAG, ""Created user "" + user.toFullString());
            final int userId = user.id;

            // Must try a couple times as PO is asynchronously set after user is created.
            // TODO(b/178102911): use a callback instead
            Context newUserContext = mContext.createContextAsUser(UserHandle.of(userId),
                    /* flags=*/ 0);
            DevicePolicyManager newUserDpm = newUserContext
                    .getSystemService(DevicePolicyManager.class);
            eventually(() -> assertProfileOwner(newUserDpm.getProfileOwner(), userId));

        } finally {
            if (user != null) {
                final int userId = user.id;
                Log.d(TAG, ""Removing user "" + userId);
                boolean removed = callWithShellPermissionIdentity(
                        () -> mUserManager.removeUser(userId));
                assertWithMessage(""user %s removed"", userId).that(removed).isTrue();
            }
        }
    }

    private void assertProfileOwner(ComponentName admin, @UserIdInt int userId) {
        assertWithMessage(""Component %s is profile owner for user %s"", admin, userId)
                .that(admin).isEqualTo(getWho());
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HeadlessSystemUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.NetworkLoggingTest"	"testNetworkLoggingAndRetrieval"	""	"1: admin"	"([9:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[admin]:[9]:method_text:[ork logging enabled for %s"", admin).that(reallyEnabled)                .isEqualTo(enabled);    }}]) :|: public void testNetworkLoggingAndRetrieval() throws Exception {
        mBatchesRequested =
                Integer.parseInt(
                        InstrumentationRegistry.getArguments().getString(ARG_BATCH_COUNT, ""1""));
        Log.d(TAG, ""batches requested:"" + mBatchesRequested);
        mBatchCountDown = new CountDownLatch(mBatchesRequested);
        // register a receiver that listens for DeviceAdminReceiver#onNetworkLogsAvailable()
        final IntentFilter filterNetworkLogsAvailable = new IntentFilter(
                BasicAdminReceiver.ACTION_NETWORK_LOGS_AVAILABLE);

        registerTestCaseReceiver(mContext, mNetworkLogsReceiver, filterNetworkLogsAvailable);

        // visit websites that shouldn't be logged as network logging isn't enabled yet
        for (int i = 0; i < NOT_LOGGED_URLS_LIST.length; i++) {
            connectToWebsite(NOT_LOGGED_URLS_LIST[i], shouldLog(i));
        }

        // enable network logging and start the logging scenario
        setNetworkLoggingEnabled(true);

        // TODO: here test that facts about logging are shown in the UI

        // Fetch and verify the batches of events.
        generateBatches();
    }

    private boolean shouldLog(int sample) {
        return sample % LOGGING_FREQUENCY == 0;
    }

    private void generateBatches() throws Exception {
        // visit websites to verify their dns lookups are logged
        for (int i = 0; i < LOGGED_URLS_LIST.length; i++) {
            connectToWebsite(LOGGED_URLS_LIST[i], shouldLog(i));
        }

        // generate enough traffic to fill the batches.
        int fakeReqNo = 0;
        for (int i = 0; i < mBatchesRequested; i++) {
            fakeReqNo += generateFakeTraffic();
        }

        // if DeviceAdminReceiver#onNetworkLogsAvailable() hasn't been triggered yet, wait for up to
        // 3 minutes per batch just in case
        final int timeoutMs = TIMEOUT_PER_BATCH_MS * mBatchesRequested;
        Log.d(TAG, ""Waiting up to "" + timeoutMs + ""ms for"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/NetworkLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.DevicePolicySafetyCheckerIntegrationTest"	"DevicePolicySafetyCheckerIntegrationTester"	""	"1: admin"	"([59:/com/android/cts/deviceowner/DevicePolicySafetyCheckerIntegrationTest.java]:[admin]:[59]:method_text:[    };    /**     * Tests that all safety-aware operations are properly implemented.     */   ]) :|: public void test/*
 *.
 */
package com.android.cts.deviceowner;

import static android.app.admin.DevicePolicyManager.OPERATION_CREATE_AND_MANAGE_USER;
import static android.app.admin.DevicePolicyManager.OPERATION_REBOOT;
import static android.app.admin.DevicePolicyManager.OPERATION_REMOVE_USER;
import static android.app.admin.DevicePolicyManager.OPERATION_REQUEST_BUGREPORT;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_APPLICATION_HIDDEN;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_APPLICATION_RESTRICTIONS;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_CAMERA_DISABLED;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_FACTORY_RESET_PROTECTION_POLICY;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_GLOBAL_PRIVATE_DNS;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_KEEP_UNINSTALLED_PACKAGES;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_KEYGUARD_DISABLED;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_LOCK_TASK_FEATURES;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_LOCK_TASK_PACKAGES;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_LOGOUT_ENABLED;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_OVERRIDE_APNS_ENABLED;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_PACKAGES_SUSPENDED;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_STATUS_BAR_DISABLED;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_SYSTEM_SETTING;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_SYSTEM_UPDATE_POLICY;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_TRUST_AGENT_CONFIGURATION;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_USER_CONTROL_DISABLED_PACKAGES;
import static android.app.admin.DevicePolicyManager.OPERATION_START_USER_IN_BACKGROUND;
import static android.app.admin.De"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/DevicePolicySafetyCheckerIntegrationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.DevicePolicySafetyCheckerIntegrationTest"	"testIsSafeOperation"	""	"1: admin"	"([1:/com/android/cts/deviceowner/DevicePolicySafetyCheckerIntegrationTest.java]:[admin]:[1]:method_text:[;    }    /**     * Tests {@link android.app.admin.UnsafeStateException} properties.     */   ]) :|: public void testIsSafeOperation() {
        mTester.testIsSafeOperation(mDevicePolicyManager);
    }

    /**
     * Tests {@link android.app.admin.UnsafeStateException} properties.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/DevicePolicySafetyCheckerIntegrationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.DevicePolicySafetyCheckerIntegrationTest"	"testUnsafeStateException"	""	"1: admin"	"([2:/com/android/cts/deviceowner/DevicePolicySafetyCheckerIntegrationTest.java]:[admin]:[2]:method_text:[  * Tests {@link android.app.admin.DeviceAdminReceiver#onOperationSafetyStateChanged()}.     */   ]) :|: public void testUnsafeStateException() {
        mTester.testUnsafeStateException(mDevicePolicyManager, getWho());
    }

    /**
     * Tests {@link android.app.admin.DeviceAdminReceiver#onOperationSafetyStateChanged()}.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/DevicePolicySafetyCheckerIntegrationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.SensorToggleRestrictionTest"	"testMicrophoneToggle_RestrictionSet_CannotChangeSensorPrivacy"	""	"4: Microphone UserManager.DISALLOW microphone admin"	"([1:/com/android/cts/deviceowner/SensorToggleRestrictionTest.java]:[admin]:[1]:method_text:[                m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.MICROPHONE)));    }   ]) :|: public void testMicrophoneToggle_RestrictionSet_CannotChangeSensorPrivacy() {
        if (!mSensorPrivacyManager.supportsSensorToggle(SensorPrivacyManager.Sensors.MICROPHONE)) {
            return;
        }
        assertFalse(""Microphone sensor privacy should be off by default"",
                ShellIdentityUtils.invokeMethodWithShellPermissions(mSensorPrivacyManager,
                        m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.MICROPHONE)));

        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_MICROPHONE_TOGGLE);
        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(mSensorPrivacyManager,
                m -> m.setSensorPrivacy(OTHER, SensorPrivacyManager.Sensors.MICROPHONE, true));

        assertFalse(""Microphone sensor privacy should not be enabled given admin restriction"",
                ShellIdentityUtils.invokeMethodWithShellPermissions(mSensorPrivacyManager,
                        m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.MICROPHONE)));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SensorToggleRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.SensorToggleRestrictionTest"	"testMicrophoneToggle_RestrictionSet_ResetSensorPrivacy"	""	"3: Microphone UserManager.DISALLOW microphone"	"([6:/com/android/cts/deviceowner/SensorToggleRestrictionTest.java]:[microphone]:[6]:method_text:[            }        }        fail(""Microphone sensor privacy did not get reset in time"");    }}]) :|: public void testMicrophoneToggle_RestrictionSet_ResetSensorPrivacy() {
        if (!mSensorPrivacyManager.supportsSensorToggle(SensorPrivacyManager.Sensors.MICROPHONE)) {
            return;
        }
        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(mSensorPrivacyManager,
                m -> m.setSensorPrivacy(OTHER, SensorPrivacyManager.Sensors.MICROPHONE, true));

        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_MICROPHONE_TOGGLE);

        long deadline = System.nanoTime() + RESTRICTION_WAITING_TIMEOUT_NANO;
        while (System.nanoTime() < deadline) {
            if (!ShellIdentityUtils.invokeMethodWithShellPermissions(mSensorPrivacyManager,
                    m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.MICROPHONE))) {
                return;
            }
        }
        fail(""Microphone sensor privacy did not get reset in time"");
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SensorToggleRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.SensorToggleRestrictionTest"	"testCameraToggle_RestrictionSet_CannotChangeSensorPrivacy"	""	"2: UserManager.DISALLOW admin"	"([1:/com/android/cts/deviceowner/SensorToggleRestrictionTest.java]:[admin]:[1]:method_text:[                    m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.CAMERA)));    }   ]) :|: public void testCameraToggle_RestrictionSet_CannotChangeSensorPrivacy() {
        if (!mSensorPrivacyManager.supportsSensorToggle(SensorPrivacyManager.Sensors.CAMERA)) {
            return;
        }
        assertFalse(""Camera sensor privacy should be off by default"",
                ShellIdentityUtils.invokeMethodWithShellPermissions(mSensorPrivacyManager,
                        m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.CAMERA)));

        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_CAMERA_TOGGLE);
        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(mSensorPrivacyManager,
                m -> m.setSensorPrivacy(OTHER, SensorPrivacyManager.Sensors.CAMERA, true));

        assertFalse(""Camera sensor privacy should not be enabled given admin restriction"",
                ShellIdentityUtils.invokeMethodWithShellPermissions(mSensorPrivacyManager,
                        m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.CAMERA)));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SensorToggleRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceowner.SensorToggleRestrictionTest"	"testCameraToggle_RestrictionSet_ResetSensorPrivacy"	""	"1: UserManager.DISALLOW"	"([1:/com/android/cts/deviceowner/SensorToggleRestrictionTest.java]:[UserManager.DISALLOW]:[1]:method_text:[            }        }        fail(""Camera sensor privacy did not get reset in time"");    }   ]) :|: public void testCameraToggle_RestrictionSet_ResetSensorPrivacy() {
        if (!mSensorPrivacyManager.supportsSensorToggle(SensorPrivacyManager.Sensors.CAMERA)) {
            return;
        }
        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(mSensorPrivacyManager,
                m -> m.setSensorPrivacy(OTHER, SensorPrivacyManager.Sensors.CAMERA, true));

        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_CAMERA_TOGGLE);

        long deadline = System.nanoTime() + RESTRICTION_WAITING_TIMEOUT_NANO;
        while (System.nanoTime() < deadline) {
            if (!ShellIdentityUtils.invokeMethodWithShellPermissions(mSensorPrivacyManager,
                    m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.CAMERA))) {
                return;
            }
        }
        fail(""Camera sensor privacy did not get reset in time"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SensorToggleRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.packageinstaller.ClearDeviceOwnerTest"	"testClearDeviceOwner"	""	"1: admin"	"([3:/com/android/cts/packageinstaller/ClearDeviceOwnerTest.java]:[admin]:[3]:method_text:[   Thread.sleep(100);        }        assertFalse(mDevicePolicyManager.isAdminActive(cn));    }}]) :|: public void testClearDeviceOwner() {
    }

    private void waitForActiveAdminRemoved(ComponentName cn) throws InterruptedException {
        for (int i = 0; i < 1000 && mDevicePolicyManager.isAdminActive(cn); i++) {
            Thread.sleep(100);
        }
        assertFalse(mDevicePolicyManager.isAdminActive(cn));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/PackageInstaller/src/com/android/cts/packageinstaller/ClearDeviceOwnerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.packageinstaller.ManualPackageInstallTest"	"testManualInstallBlocked"	""	"1: admin"	"([1:/com/android/cts/packageinstaller/ManualPackageInstallTest.java]:[admin]:[1]:method_text:[       .res(settingsPackageName + "":id/"" + resId)                .pkg(settingsPackageName);    }}]) :|: public void testManualInstallBlocked() throws Exception {
        synchronized (mPackageInstallerTimeoutLock) {
            mCallbackReceived = false;
            mCallbackStatus = PACKAGE_INSTALLER_STATUS_UNDEFINED;
        }
        // Calls the original installPackage which does not click through the install button.
        Log.d(TAG, ""Installing "" + TEST_APP_LOCATION);
        super.installPackage(TEST_APP_LOCATION);
        synchronized (mPackageInstallerTimeoutLock) {
            try {
                mPackageInstallerTimeoutLock.wait(PACKAGE_INSTALLER_TIMEOUT_MS);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                Log.e(TAG, ""Interrupted"", e);
            }
            assertTrue(mCallbackReceived);
            assertEquals(PackageInstaller.STATUS_PENDING_USER_ACTION, mCallbackStatus);
        }

        mCallbackIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        Log.d(TAG, ""Starting "" + mCallbackIntent + "" on user "" + UserHandle.myUserId());
        mContext.startActivity(mCallbackIntent);

        automateDismissInstallBlockedDialog();

        // Assuming installation is not synchronous, we should wait a while before checking.
        Thread.sleep(INSTALL_WAIT_TIME);
        assertFalse(isPackageInstalled(TEST_APP_PKG));
    }

    @Override
    protected void installPackage(String packageLocation) throws Exception {
        super.installPackage(packageLocation);

        synchronized (mPackageInstallerTimeoutLock) {
            try {
                mPackageInstallerTimeoutLock.wait(PACKAGE_INSTALLER_TIMEOUT_MS);
            } catch (InterruptedException e) {
            }
            assertTrue(mCallbackReceived);
            assertEquals(PackageInstaller.STATUS_PENDING_USER_ACTION, mCallbackStatus);
        }

        // Use a receiver to listen for package install.
        synchronized (mPackageInstallerTimeoutLock) {
            mCallbackReceived = false;
            mCallbackStatus"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/PackageInstaller/src/com/android/cts/packageinstaller/ManualPackageInstallTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.packageinstaller.SilentPackageInstallTest"	"testSilentInstallUninstall"	""	"1: silent"	"([1:/com/android/cts/packageinstaller/SilentPackageInstallTest.java]:[silent]:[1]:method_text:[   assertTrue(tryUninstallPackage());        assertFalse(isPackageInstalled(TEST_APP_PKG));    }}]) :|: public void testSilentInstallUninstall() throws Exception {
        // install the app
        assertInstallPackage();

        // uninstall the app again
        assertTrue(tryUninstallPackage());
        assertFalse(isPackageInstalled(TEST_APP_PKG));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/PackageInstaller/src/com/android/cts/packageinstaller/SilentPackageInstallTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.transferowner.TransferDeviceOwnerIncomingTest"	"testTransferPoliciesAreRetainedAfterTransfer"	""	"1: admin"	"([1:/com/android/cts/transferowner/TransferDeviceOwnerIncomingTest.java]:[admin]:[1]:method_text:[wStart()                && policy1.getInstallWindowEnd() == policy2.getInstallWindowEnd());    }}]) :|: 
    public void testTransferPoliciesAreRetainedAfterTransfer() {
        assertTrue(mDevicePolicyManager.isAdminActive(mIncomingComponentName));
        assertTrue(mDevicePolicyManager.isDeviceOwnerApp(mIncomingComponentName.getPackageName()));
        assertTrue(mDevicePolicyManager.getCameraDisabled(mIncomingComponentName));
        assertEquals(Collections.singletonList(""test.package""),
                mDevicePolicyManager.getKeepUninstalledPackages(mIncomingComponentName));
        assertEquals(
                DevicePolicyManager.PASSWORD_QUALITY_NUMERIC,
                mDevicePolicyManager.getPasswordQuality(mIncomingComponentName));
        assertEquals(123, mDevicePolicyManager.getPasswordMinimumLength(mIncomingComponentName));
        assertSystemPoliciesEqual(SystemUpdatePolicy.createPostponeInstallPolicy(),
                mDevicePolicyManager.getSystemUpdatePolicy());
        assertThrows(SecurityException.class, () -> {
            mDevicePolicyManager.getParentProfileInstance(mIncomingComponentName);
        });
    }

    private void assertSystemPoliciesEqual(SystemUpdatePolicy policy1, SystemUpdatePolicy policy2) {
        assertTrue(policy1.getPolicyType() == policy2.getPolicyType()
                && policy1.getInstallWindowStart() == policy2.getInstallWindowStart()
                && policy1.getInstallWindowEnd() == policy2.getInstallWindowEnd());
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/TransferDeviceOwnerIncomingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.transferowner.TransferProfileOwnerIncomingTest"	"testTransferPoliciesAreRetainedAfterTransfer"	""	"1: admin"	"([1:/com/android/cts/transferowner/TransferProfileOwnerIncomingTest.java]:[admin]:[1]:method_text:[targetParentProfileInstance.getPasswordExpirationTimeout(mIncomingComponentName));        }    }}]) :|: 
    public void testTransferPoliciesAreRetainedAfterTransfer() {
        int passwordLength = 123;
        int passwordExpirationTimeout = 456;
        assertTrue(mDevicePolicyManager.isAdminActive(mIncomingComponentName));
        assertTrue(mDevicePolicyManager.isProfileOwnerApp(mIncomingComponentName.getPackageName()));
        assertTrue(mDevicePolicyManager.getCameraDisabled(mIncomingComponentName));
        assertTrue(mDevicePolicyManager.getCrossProfileCallerIdDisabled(mIncomingComponentName));
        assertEquals(
                DevicePolicyManager.PASSWORD_QUALITY_NUMERIC,
                mDevicePolicyManager.getPasswordQuality(mIncomingComponentName));
        assertEquals(
                passwordLength,
                mDevicePolicyManager.getPasswordMinimumLength(mIncomingComponentName));


        DevicePolicyManager targetParentProfileInstance =
                mDevicePolicyManager.getParentProfileInstance(mIncomingComponentName);
        if (mHasSecureLockScreen) {
            assertEquals(
                    passwordExpirationTimeout,
                    targetParentProfileInstance.getPasswordExpirationTimeout(mIncomingComponentName));
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/TransferProfileOwnerIncomingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferIncomingTest"	"testIsAffiliationId1"	""	"1: admin"	"([2:/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java]:[admin]:[2]:method_text:[ assertEquals(1, affiliationIds.size());        return affiliationIds.iterator().next();    }   ]) :|: 
    public void testIsAffiliationId1() {
        assertEquals(""id.number.1"", getAffiliationId());
    }

    private String getAffiliationId() {
        ComponentName admin = mIncomingComponentName;
        DevicePolicyManager dpm = (DevicePolicyManager)
                mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
        Set<String> affiliationIds = dpm.getAffiliationIds(admin);
        assertNotNull(affiliationIds);
        assertEquals(1, affiliationIds.size());
        return affiliationIds.iterator().next();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnTest"	"testDisallowConfigVpn"	""	"2: UserManager.DISALLOW admin"	"([2:/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java]:[admin]:[2]:method_text:[ADMIN_RECEIVER_COMPONENT,                    UserManager.DISALLOW_CONFIG_VPN);        }    }   ]) :|: public void testDisallowConfigVpn() throws Exception {
        mDevicePolicyManager.addUserRestriction(
                ADMIN_RECEIVER_COMPONENT, UserManager.DISALLOW_CONFIG_VPN);
        try {
            testAlwaysOnVpn();
        } finally {
            // clear the user restriction
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    UserManager.DISALLOW_CONFIG_VPN);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnTest"	"testAlwaysOnVpn"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java]:[admin]:[1]:method_text:[lockdown */ true, /* allowlist */ false);        VpnTestHelper.checkPing(TEST_ADDRESS);    }   ]) :|: public void testAlwaysOnVpn() throws Exception {
        // test always-on is null by default
        assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));

        VpnTestHelper.waitForVpn(mContext, VPN_PACKAGE,
                /* usable */ true, /* lockdown */ true, /* allowlist */ false);

        VpnTestHelper.checkPing(TEST_ADDRESS);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnTest"	"testAllowedApps"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java]:[admin]:[1]:method_text:[/ true, /* allowlist */ false);        assertTrue(VpnTestHelper.isNetworkVpn(mContext));    }   ]) :|: public void testAllowedApps() throws Exception {
        final Bundle restrictions = new Bundle();
        restrictions.putStringArray(RESTRICTION_ALLOWED, new String[] {mPackageName});
        mDevicePolicyManager.setApplicationRestrictions(ADMIN_RECEIVER_COMPONENT, VPN_PACKAGE,
                restrictions);
        VpnTestHelper.waitForVpn(mContext, VPN_PACKAGE,
                /* usable */ true,  /* lockdown */ true, /* allowlist */ false);
        assertTrue(VpnTestHelper.isNetworkVpn(mContext));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnTest"	"testDisallowedApps"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java]:[admin]:[1]:method_text:[orkVpn(mContext));    }    // Tests that changes to lockdown allowlist are applied correctly.   ]) :|: public void testDisallowedApps() throws Exception {
        final Bundle restrictions = new Bundle();
        restrictions.putStringArray(RESTRICTION_DISALLOWED, new String[] {mPackageName});
        mDevicePolicyManager.setApplicationRestrictions(ADMIN_RECEIVER_COMPONENT, VPN_PACKAGE,
                restrictions);
        VpnTestHelper.waitForVpn(mContext, VPN_PACKAGE,
                /* usable */ false,  /* lockdown */ true, /* allowlist */ false);
        assertFalse(VpnTestHelper.isNetworkVpn(mContext));
    }

    // Tests that changes to lockdown allowlist are applied correctly."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnTest"	"testVpnLockdownUpdateAllowlist"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java]:[admin]:[1]:method_text:[isterQuietly();    }    // Tests that when VPN comes up, allowlisted app switches over to it.   ]) :|: public void testVpnLockdownUpdateAllowlist() throws Exception {
        waitForConnectivity(""VPN is off"");

        // VPN won't start.
        final Bundle restrictions = new Bundle();
        restrictions.putBoolean(RESTRICTION_DONT_ESTABLISH, true);
        mDevicePolicyManager.setApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, VPN_PACKAGE, restrictions);

        // VPN service is started asynchronously, we need to wait for it to avoid stale service
        // instance interfering with the next test.
        final BlockingBroadcastReceiver receiver = VpnTestHelper.registerOnStartReceiver(mContext);

        VpnTestHelper.setAlwaysOnVpn(
                mContext, VPN_PACKAGE, /* lockdown */ false, /* allowlist */ false);
        assertConnectivity(true, ""VPN service not started, no lockdown"");
        assertNotNull(receiver.awaitForBroadcast(VPN_ON_START_TIMEOUT_MS));

        VpnTestHelper.setAlwaysOnVpn(
                mContext, VPN_PACKAGE, /* lockdown */ true, /* allowlist */ false);
        // Wait for loss of connectivity instead of assertConnectivity(false)
        // to mitigate flakiness due to asynchronicity.
        waitForNoConnectivity(""VPN in lockdown, service not started"");
        assertNotNull(receiver.awaitForBroadcast(VPN_ON_START_TIMEOUT_MS));

        VpnTestHelper.setAlwaysOnVpn(
                mContext, VPN_PACKAGE, /* lockdown */ true, /* allowlist */ true);
        assertConnectivity(true, ""VPN in lockdown, service not started, app allowlisted"");
        assertNotNull(receiver.awaitForBroadcast(VPN_ON_START_TIMEOUT_MS));

        VpnTestHelper.setAlwaysOnVpn(
                mContext, VPN_PACKAGE, /* lockdown */ true, /* allowlist */ false);
        // Wait for loss of connectivity instead of assertConnectivity(false)
        // to mitigate flakiness due to asynchronicity.
        waitForNoConnectivity(""VPN in lockdown, service not started"");
        assertNotNull(receiver.awaitForBroadcast(VPN_ON_START_TIMEOUT_MS));"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnTest"	"testVpnLockdownAllowlistVpnComesUp"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java]:[admin]:[2]:method_text:[PN.        VpnTestHelper.checkPing(TEST_ADDRESS);        receiver.unregisterQuietly();    }   ]) :|: public void testVpnLockdownAllowlistVpnComesUp() throws Exception {
        waitForConnectivity(""VPN is off"");

        // VPN won't start initially.
        final Bundle restrictions = new Bundle();
        restrictions.putBoolean(RESTRICTION_DONT_ESTABLISH, true);
        mDevicePolicyManager.setApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, VPN_PACKAGE, restrictions);

        // VPN service is started asynchronously, we need to wait for it to avoid stale service
        // instance interfering with the next test.
        final BlockingBroadcastReceiver receiver = VpnTestHelper.registerOnStartReceiver(mContext);

        VpnTestHelper.setAlwaysOnVpn(
                mContext, VPN_PACKAGE,  /* lockdown */ true, /* allowlist */ true);
        assertConnectivity(true, ""VPN in lockdown, service not started, app allowlisted"");
        assertNotNull(receiver.awaitForBroadcast(VPN_ON_START_TIMEOUT_MS));

        // Make VPN workable again and restart.
        mDevicePolicyManager.setApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, VPN_PACKAGE, null);
        VpnTestHelper.waitForVpn(mContext, VPN_PACKAGE,
                /* usable */ true,  /* lockdown */ true, /* allowlist */ true);

        // Now we should be on VPN.
        VpnTestHelper.checkPing(TEST_ADDRESS);

        receiver.unregisterQuietly();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnTest"	"testSetNonVpnAlwaysOn"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java]:[admin]:[2]:method_text:[    fail(""Connectivity isn't available while expected: "" + message);            }        }    }}]) :|: public void testSetNonVpnAlwaysOn() throws Exception {
        // Treat this CTS DPC as an non-vpn app, since it doesn't register
        // android.net.VpnService intent filter in AndroidManifest.xml.
        try {
            mDevicePolicyManager.setAlwaysOnVpnPackage(
                    ADMIN_RECEIVER_COMPONENT, mPackageName, true);
            fail(""setAlwaysOnVpnPackage should not accept non-vpn package"");
        } catch (UnsupportedOperationException e) {
            // success
        }
        assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));
    }

    private void waitForConnectivity(String message) throws InterruptedException {
        long deadline = System.nanoTime() + CONNECTIVITY_WAIT_TIME_NS;
        while (System.nanoTime() < deadline) {
            try {
                new Socket(CONNECTIVITY_CHECK_HOST, 80);
                // Domain resolved, we have connectivity.
                return;
            } catch (IOException e) {
                // Log.e(String, String, Throwable) will swallow UnknownHostException,
                // so manually print it out here.
                Log.e(TAG, ""No connectivity yet: "" + e.toString());
                Thread.sleep(2000);
            }
        }
        fail(""Connectivity isn't available: "" + message);
    }

    private void waitForNoConnectivity(String message) throws Exception {
        long deadline = System.nanoTime() + CONNECTIVITY_WAIT_TIME_NS;
        while (System.nanoTime() < deadline) {
            try {
                new Socket(CONNECTIVITY_CHECK_HOST, 80);
                // Domain resolved, we have connectivity.
            } catch (IOException e) {
                // No connectivity
                return;
            }
            Thread.sleep(2000);
        }
        fail(""Connectivity still available after deadline: "" + message);
    }

    private void assertConnectivity(boolean shouldHaveConnectivity, String message) {
        try {
            new So"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest"	"testCaCertsOperations"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[admin]:[5]:method_text:[ONENT, null);        installCaCert(cert);        assertResult(""installCaCert"", false);    }   ]) :|: public void testCaCertsOperations() throws InterruptedException, GeneralSecurityException,
           KeyStoreException, IOException {
        final byte[] cert = TestCertificates.TEST_CA.getBytes();
        final Certificate caCert = CertificateFactory.getInstance(""X.509"")
                .generateCertificate(new ByteArrayInputStream(cert));


        mDpm.setCertInstallerPackage(ADMIN_RECEIVER_COMPONENT, CERT_INSTALLER_PACKAGE);
        assertEquals(CERT_INSTALLER_PACKAGE,
                mDpm.getCertInstallerPackage(ADMIN_RECEIVER_COMPONENT));

        // Exercise installCaCert()
        KeyStore keyStore = KeyStore.getInstance(""AndroidCAStore"");
        keyStore.load(null, null);
        assertNull(keyStore.getCertificateAlias(caCert));
        installCaCert(cert);
        assertResult(""installCaCert"", true);
        assertTrue(""Certificate is not installed properly"", mDpm.hasCaCertInstalled(
                ADMIN_RECEIVER_COMPONENT, cert));

        // Exercise getInstalledCaCerts()
        verifyCaCert(cert);
        assertResult(""getInstalledCaCerts()"", true);

        // Verify that the CA cert was marked as installed by the Device Owner / Profile Owner.
        final String alias = keyStore.getCertificateAlias(caCert);
        assertNotNull(alias);
        verifyOwnerInstalledStatus(alias, true);

        // Exercise uninstallCaCert()
        removeCaCert(cert);
        assertResult(""uninstallCaCert()"", true);
        assertFalse(""Certificate is not removed properly"", mDpm.hasCaCertInstalled(
                ADMIN_RECEIVER_COMPONENT, cert));

        // Verify that the CA cert is no longer reported as installed by the Device Owner / Profile
        // Owner.
        verifyOwnerInstalledStatus(alias, false);

        // Clear delegated cert installer.
        // Tests after this are expected to fail.
        mDpm.setCertInstallerPackage(ADMIN_RECEIVER_COMPONENT, null);

        installCaCert(cert);
        assertResult(""installCaCert"", false);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest"	"testInstallKeyPair"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[admin]:[3]:method_text:[N+, @{link IllegalArgumentException } should be thrown if the package     * is missing.     */   ]) :|: public void testInstallKeyPair() throws InterruptedException, KeyChainException {
        final String alias = ""delegated-cert-installer-test-key"";

        // Clear delegated cert installer.
        mDpm.setCertInstallerPackage(ADMIN_RECEIVER_COMPONENT, null);
        // The app is not the cert installer , it shouldn't have have privilege to call
        // installKeyPair().
        installKeyPair(TestCertificates.TEST_KEY, TestCertificates.TEST_CERT, alias);
        assertResult(""installKeyPair"", false);

        // Set the app to be cert installer.
        mDpm.setCertInstallerPackage(ADMIN_RECEIVER_COMPONENT, CERT_INSTALLER_PACKAGE);
        assertEquals(CERT_INSTALLER_PACKAGE,
                mDpm.getCertInstallerPackage(ADMIN_RECEIVER_COMPONENT));

        // Exercise installKeyPair()
        installKeyPair(TestCertificates.TEST_KEY, TestCertificates.TEST_CERT, alias);
        assertResult(""installKeyPair"", true);
    }

    /**
     * If DPC is targeting N+, @{link IllegalArgumentException } should be thrown if the package
     * is missing.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest"	"testSetNotExistCertInstallerPackage"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[admin]:[2]:method_text:[                      mDpm.getCertInstallerPackage(ADMIN_RECEIVER_COMPONENT)));        }    }   ]) :|: public void testSetNotExistCertInstallerPackage() throws Exception {
        boolean shouldThrowException = getTargetApiLevel() >= Build.VERSION_CODES.N;
        try {
            mDpm.setCertInstallerPackage(
                    ADMIN_RECEIVER_COMPONENT, NOT_EXIST_CERT_INSTALLER_PACKAGE);
            if (shouldThrowException) {
                fail(""Did not throw IllegalArgumentException"");
            }
        } catch (IllegalArgumentException ex) {
            if (!shouldThrowException) {
                fail(""Should not throw exception"");
            }
            MoreAsserts.assertContainsRegex(""is not installed on the current user"",
                        ex.getMessage());
        }
        if (!shouldThrowException) {
            assertTrue(""Cert install delegate was not set on uninstalled package"",
                    NOT_EXIST_CERT_INSTALLER_PACKAGE.equals(
                            mDpm.getCertInstallerPackage(ADMIN_RECEIVER_COMPONENT)));
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest"	"testSettingDelegatedCertInstallerAPICompatibility_oldSetNewGet"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[admin]:[6]:method_text:[tePackages(ADMIN_RECEIVER_COMPONENT,                DELEGATION_CERT_INSTALL)).isEmpty();    }   ]) :|: public void testSettingDelegatedCertInstallerAPICompatibility_oldSetNewGet() {
        // Set a delegated cert installer using the deprecated API and verify that the same
        // package is considered as the delegated cert installer using the new API.
        mDpm.setCertInstallerPackage(ADMIN_RECEIVER_COMPONENT, CERT_INSTALLER_PACKAGE);
        assertThat(mDpm.getCertInstallerPackage(ADMIN_RECEIVER_COMPONENT)).isEqualTo(
                CERT_INSTALLER_PACKAGE);
        assertThat(mDpm.getDelegatePackages(ADMIN_RECEIVER_COMPONENT,
                DELEGATION_CERT_INSTALL)).containsExactly(CERT_INSTALLER_PACKAGE);

        // Remove a delegate using the old API, make sure no delegates are found using
        // the new API.
        mDpm.setCertInstallerPackage(ADMIN_RECEIVER_COMPONENT, null);
        assertThat(mDpm.getCertInstallerPackage(ADMIN_RECEIVER_COMPONENT)).isNull();
        assertThat(mDpm.getDelegatePackages(ADMIN_RECEIVER_COMPONENT,
                DELEGATION_CERT_INSTALL)).isEmpty();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest"	"testSettingDelegatedCertInstallerAPICompatibility_newSetOldGet"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[admin]:[6]:method_text:[y();        assertThat(mDpm.getCertInstallerPackage(ADMIN_RECEIVER_COMPONENT)).isNull();    }   ]) :|: public void testSettingDelegatedCertInstallerAPICompatibility_newSetOldGet() {
        // Set a delegate using the new API, verify that the deprecated API returns the same
        // delegate.
        mDpm.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, CERT_INSTALLER_PACKAGE,
                CERT_INSTALL_SCOPES);
        assertThat(mDpm.getDelegatePackages(ADMIN_RECEIVER_COMPONENT,
                DELEGATION_CERT_INSTALL)).containsExactly(CERT_INSTALLER_PACKAGE);
        assertThat(mDpm.getCertInstallerPackage(ADMIN_RECEIVER_COMPONENT)).isEqualTo(
                CERT_INSTALLER_PACKAGE);

        // Remove the delegate using the new API, verify that the deprecated API returns null
        // as the current delegated cert installer.
        mDpm.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, CERT_INSTALLER_PACKAGE, Arrays.asList());
        assertThat(mDpm.getDelegatePackages(ADMIN_RECEIVER_COMPONENT,
                DELEGATION_CERT_INSTALL)).isEmpty();
        assertThat(mDpm.getCertInstallerPackage(ADMIN_RECEIVER_COMPONENT)).isNull();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest"	"testCanReadEnrollmentSpecificId"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[admin]:[1]:method_text:[   intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);        mContext.sendBroadcast(intent);    }}]) :|: public void testCanReadEnrollmentSpecificId() throws InterruptedException {
        // Set the organization ID only if not already set, to avoid potential conflict
        // with other tests.
        if (mDpm.getEnrollmentSpecificId().isEmpty()) {
            mDpm.setOrganizationId(""SOME_ID"");
        }
        mDpm.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, CERT_INSTALLER_PACKAGE,
                CERT_INSTALL_SCOPES);

        readEnrollmentId();
        assertResult(""testCanReadEnrollmentSpecificId"", true);
    }

    private void installCaCert(byte[] cert) {
        Intent intent = new Intent();
        intent.setAction(ACTION_INSTALL_CERT);
        intent.setComponent(CERT_INSTALLER_COMPONENT);
        intent.putExtra(EXTRA_CERT_DATA, cert);
        intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
        mContext.sendBroadcast(intent);
    }

    private void removeCaCert(byte[] cert) {
        Intent intent = new Intent();
        intent.setAction(ACTION_REMOVE_CERT);
        intent.setComponent(CERT_INSTALLER_COMPONENT);
        intent.putExtra(EXTRA_CERT_DATA, cert);
        intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
        mContext.sendBroadcast(intent);
    }

    private void verifyCaCert(byte[] cert) {
        Intent intent = new Intent();
        intent.setAction(ACTION_VERIFY_CERT);
        intent.setComponent(CERT_INSTALLER_COMPONENT);
        intent.putExtra(EXTRA_CERT_DATA, cert);
        intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
        mContext.sendBroadcast(intent);
    }

    private void verifyOwnerInstalledStatus(String alias, boolean expectOwnerInstalled) {
        final List<String> ownerInstalledCerts =
                mDpm.getOwnerInstalledCaCerts(Process.myUserHandle());
        assertNotNull(ownerInstalledCerts);
        assertEquals(expectOwnerInstalled, ownerInstalledCerts.contains(alias));
    }

    private void assertResult(String testName, Boolean expectSuccess) throws InterruptedException {
        assertTrue("""	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.CommonCriteriaModeTest"	"testSettingCommonCriteriaMode"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java]:[admin]:[4]:method_text:[DevicePolicyManager.setCommonCriteriaModeEnabled(ADMIN_RECEIVER_COMPONENT, false);        }    }}]) :|: public void testSettingCommonCriteriaMode() {
        try {
            // Default to false
            assertFalse(mDevicePolicyManager.isCommonCriteriaModeEnabled(ADMIN_RECEIVER_COMPONENT));
            assertFalse(mDevicePolicyManager.isCommonCriteriaModeEnabled(null));

            mDevicePolicyManager.setCommonCriteriaModeEnabled(ADMIN_RECEIVER_COMPONENT, true);
            assertTrue(mDevicePolicyManager.isCommonCriteriaModeEnabled(ADMIN_RECEIVER_COMPONENT));
            assertTrue(mDevicePolicyManager.isCommonCriteriaModeEnabled(null));
        } finally {
            mDevicePolicyManager.setCommonCriteriaModeEnabled(ADMIN_RECEIVER_COMPONENT, false);
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenParentTest"	"isNotNull"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/ApplicationHiddenParentTest.java]:[admin]:[5]:method_text:[IVER_COMPONENT,                SYSTEM_PACKAGE_TO_HIDE, false);        super.tearDown();    }   ]) :|: public void test/*
 *.
 */

package com.android.cts.deviceandprofileowner;

import static com.google.common.truth.Truth.assertThat;

import static org.testng.Assert.assertThrows;

import android.app.admin.DevicePolicyManager;
import android.content.pm.PackageManager;

public class ApplicationHiddenParentTest extends BaseDeviceAdminTest {

    private DevicePolicyManager mParentDevicePolicyManager;
    private PackageManager mPackageManager;

    private static final String SYSTEM_PACKAGE_TO_HIDE = ""com.android.keychain"";
    private static final String NON_SYSTEM_NON_INSTALLED_PACKAGE = ""com.android.cts.permissionapp"";
    private static final String NON_SYSTEM_INSTALLED_PACKAGE =
            ""com.android.cts.deviceandprofileowner"";

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mParentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        mPackageManager = mContext.getPackageManager();
        assertThat(mParentDevicePolicyManager).isNotNull();

        assertThat(mDevicePolicyManager.isProfileOwnerApp(ADMIN_RECEIVER_COMPONENT.getPackageName())).isTrue();
        assertThat(mDevicePolicyManager.isOrganizationOwnedDeviceWithManagedProfile()).isTrue();
    }

    @Override
    protected void tearDown() throws Exception {
        mParentDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                SYSTEM_PACKAGE_TO_HIDE, false);
        super.tearDown();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenParentTest"	"testSetApplicationHidden_systemPackage"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/ApplicationHiddenParentTest.java]:[admin]:[4]:method_text:[       assertThat(mPackageManager.getPackageInfo(SYSTEM_PACKAGE_TO_HIDE, 0)).isNotNull();    }   ]) :|: public void testSetApplicationHidden_systemPackage()
            throws PackageManager.NameNotFoundException {
        assertThat(mPackageManager.getPackageInfo(SYSTEM_PACKAGE_TO_HIDE, 0)).isNotNull();

        assertThat(mParentDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                SYSTEM_PACKAGE_TO_HIDE, true)).isTrue();
        assertThat(mParentDevicePolicyManager.isApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                SYSTEM_PACKAGE_TO_HIDE)).isTrue();
        assertThat(mPackageManager.getPackageInfo(SYSTEM_PACKAGE_TO_HIDE,
                PackageManager.MATCH_UNINSTALLED_PACKAGES)).isNotNull();

        assertThat(mParentDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                SYSTEM_PACKAGE_TO_HIDE, false)).isTrue();
        assertThat(mParentDevicePolicyManager.isApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                SYSTEM_PACKAGE_TO_HIDE)).isFalse();
        assertThat(mPackageManager.getPackageInfo(SYSTEM_PACKAGE_TO_HIDE, 0)).isNotNull();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenParentTest"	"testSetApplicationHidden_nonSystemPackage"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/ApplicationHiddenParentTest.java]:[admin]:[4]:method_text:[IN_RECEIVER_COMPONENT,                    NON_SYSTEM_NON_INSTALLED_PACKAGE);        });    }   ]) :|: public void testSetApplicationHidden_nonSystemPackage() {
        assertThrows(IllegalArgumentException.class, () -> {
            mParentDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                    NON_SYSTEM_NON_INSTALLED_PACKAGE, true);
            mParentDevicePolicyManager.isApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                    NON_SYSTEM_NON_INSTALLED_PACKAGE);
        });
        assertThrows(IllegalArgumentException.class, () -> {
            mParentDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                    NON_SYSTEM_NON_INSTALLED_PACKAGE, false);
            mParentDevicePolicyManager.isApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                    NON_SYSTEM_NON_INSTALLED_PACKAGE);
        });
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenParentTest"	"testSetApplicationHidden_nonSystemPackageStackTrace"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/ApplicationHiddenParentTest.java]:[admin]:[2]:method_text:[      assertThat(stackTrace1[i].toString()).isEqualTo(stackTrace2[i].toString());        }    }}]) :|: public void testSetApplicationHidden_nonSystemPackageStackTrace() {
        StackTraceElement[] stackTrace1 = new StackTraceElement[0];
        StackTraceElement[] stackTrace2 = new StackTraceElement[0];
        String message1 = """";
        String message2 = """";

        // Scenario 1: Non-system non-installed package
        try {
            mParentDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                    NON_SYSTEM_NON_INSTALLED_PACKAGE, true);
        } catch (IllegalArgumentException e) {
            stackTrace1 = e.getStackTrace();
            message1 = e.getMessage();
        }

        // Scenario 2: Non-system installed package
        try {
            mParentDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                    NON_SYSTEM_INSTALLED_PACKAGE, true);
        } catch (IllegalArgumentException e) {
            stackTrace2 = e.getStackTrace();
            message2 = e.getMessage();
        }

        // Ensure the messages and stack traces of both scenarios are equal
        assertThat(message1).isEqualTo(message2);
        assertThat(stackTrace1.length).isEqualTo(stackTrace2.length);
        for (int i = 0; i < stackTrace1.length; i++) {
            if (stackTrace1[i].getClassName().equals(this.getClass().getName())) {
                continue;
            }
            assertThat(stackTrace1[i].toString()).isEqualTo(stackTrace2[i].toString());
        }
    }

}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingParentTest"	"testUserRestrictionLogged"	""	"2: UserManager.DISALLOW admin"	"([2:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingParentTest.java]:[admin]:[2]:method_text:[estriction(ADMIN_RECEIVER_COMPONENT,                UserManager.DISALLOW_CONFIG_LOCATION);    }}]) :|: public void testUserRestrictionLogged() {
        mParentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONFIG_LOCATION);
        mParentDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONFIG_LOCATION);
    }

}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingParentTest"	"testCameraDisabledLogged"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingParentTest.java]:[admin]:[2]:method_text:[);        mParentDevicePolicyManager.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, false);    }   ]) :|: public void testCameraDisabledLogged() {
        mParentDevicePolicyManager.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, true);
        mParentDevicePolicyManager.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, false);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.WifiTest"	"testAddNetworkWithKeychainKey_granted"	""	"1: granted"	"([1:/com/android/cts/deviceandprofileowner/WifiTest.java]:[granted]:[1]:method_text:[Config();        mNetId = mWm.addNetwork(config);        assertNotEquals(-1, mNetId);    }   ]) :|: public void testAddNetworkWithKeychainKey_granted() throws Exception {
        prepareTestKeyPair(/* allowForWifi= */ true);
        final WifiConfiguration config = makeTestWifiConfig();

        mNetId = mWm.addNetwork(config);

        assertNotEquals(-1, mNetId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/WifiTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.WifiTest"	"testAddNetworkWithKeychainKey_notGranted"	""	"1: granted"	"([1:/com/android/cts/deviceandprofileowner/WifiTest.java]:[granted]:[1]:method_text:[ifiConfig();        mNetId = mWm.addNetwork(config);        assertEquals(-1, mNetId);    }   ]) :|: public void testAddNetworkWithKeychainKey_notGranted() throws Exception {
        prepareTestKeyPair(/* allowForWifi= */ false);
        final WifiConfiguration config = makeTestWifiConfig();

        mNetId = mWm.addNetwork(config);

        assertEquals(-1, mNetId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/WifiTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.WifiTest"	"testAddNetworkSuggestionWithKeychainKey_granted"	""	"1: granted"	"([1:/com/android/cts/deviceandprofileowner/WifiTest.java]:[granted]:[1]:method_text:[CCESS,                mWm.addNetworkSuggestions(Collections.singletonList(suggestion)));    }   ]) :|: public void testAddNetworkSuggestionWithKeychainKey_granted() throws Exception {
        prepareTestKeyPair(/* allowForWifi= */ true);
        final WifiNetworkSuggestion suggestion = makeWifiNetworkSuggestion();

        assertEquals(WifiManager.STATUS_NETWORK_SUGGESTIONS_SUCCESS,
                mWm.addNetworkSuggestions(Collections.singletonList(suggestion)));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/WifiTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.WifiTest"	"testAddNetworkSuggestionWithKeychainKey_notGranted"	""	"2: granted admin"	"([1:/com/android/cts/deviceandprofileowner/WifiTest.java]:[admin]:[1]:method_text:[A_EAP);        config.enterpriseConfig = makeWifiEnterpriseConfig();        return config;    }}]) :|: public void testAddNetworkSuggestionWithKeychainKey_notGranted() throws Exception {
        prepareTestKeyPair(/* allowForWifi= */ false);
        final WifiNetworkSuggestion suggestion = makeWifiNetworkSuggestion();

        assertEquals(WifiManager.STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALID,
                mWm.addNetworkSuggestions(Collections.singletonList(suggestion)));
    }

    private WifiEnterpriseConfig makeWifiEnterpriseConfig() throws Exception {
        WifiEnterpriseConfig enterpriseConfig = new WifiEnterpriseConfig();
        enterpriseConfig.setEapMethod(WifiEnterpriseConfig.Eap.TLS);
        enterpriseConfig.setDomainSuffixMatch(""some-domain.com"");
        enterpriseConfig.setIdentity(""user"");
        enterpriseConfig.setCaCertificate((X509Certificate) getCaCert());
        enterpriseConfig.setClientKeyPairAlias(TEST_ALIAS);
        return enterpriseConfig;
    }

    private WifiNetworkSuggestion makeWifiNetworkSuggestion() throws Exception {
        return new WifiNetworkSuggestion.Builder()
                .setSsid(TEST_SSID)
                .setWpa2EnterpriseConfig(makeWifiEnterpriseConfig())
                .build();
    }

    private void prepareTestKeyPair(boolean allowForWifi) throws Exception {
        assertTrue(mDevicePolicyManager.installKeyPair(ADMIN, getTestKey(),
                new Certificate[]{getUserCert()}, TEST_ALIAS,
                /* requestAccess= */ false));
        if (allowForWifi) {
            assertTrue(mDevicePolicyManager.grantKeyPairToWifiAuth(TEST_ALIAS));
        }
    }

    private WifiConfiguration makeTestWifiConfig() throws Exception {
        WifiConfiguration config = new WifiConfiguration();
        config.SSID = TEST_SSID;
        config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_EAP);
        config.enterpriseConfig = makeWifiEnterpriseConfig();
        return config;
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/WifiTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.WifiTest"	"emptyList"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/WifiTest.java]:[admin]:[5]:method_text:[        mDevicePolicyManager.removeKeyPair(ADMIN, TEST_ALIAS);        super.tearDown();    }   ]) :|: public void test/*
 *.
 */
package com.android.cts.deviceandprofileowner;

import static com.android.cts.devicepolicy.TestCertificates.getCaCert;
import static com.android.cts.devicepolicy.TestCertificates.getTestKey;
import static com.android.cts.devicepolicy.TestCertificates.getUserCert;

import static org.junit.Assert.assertNotEquals;

import android.content.ComponentName;
import android.content.pm.PackageManager;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiEnterpriseConfig;
import android.net.wifi.WifiManager;
import android.net.wifi.WifiNetworkSuggestion;
import android.text.TextUtils;

import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.Collections;

/**
 * Tests that require the WiFi feature.
 */
public class WifiTest extends BaseDeviceAdminTest {
    /** Mac address returned when the caller doesn't have access. */
    private static final String DEFAULT_MAC_ADDRESS = ""02:00:00:00:00:00"";

    public static final ComponentName ADMIN = new ComponentName(
            BasicAdminReceiver.class.getPackage().getName(),
            BasicAdminReceiver.class.getName());

    private static final String TEST_ALIAS = ""test_alias"";
    private static final String TEST_SSID = ""\""SomeNet\"""";

    private WifiManager mWm;
    private int mNetId = -1;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        mWm = mContext.getSystemService(WifiManager.class);
    }

    @Override
    protected void tearDown() throws Exception {
        if (mNetId != -1) {
            mWm.removeNetwork(mNetId);
        }
        // Remove all suggestions if any were added.
        mWm.removeNetworkSuggestions(Collections.emptyList());
        mDevicePolicyManager.removeKeyPair(ADMIN, TEST_ALIAS);

        super.tearDown();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/WifiTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.WifiTest"	"testGetWifiMacAddress"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/WifiTest.java]:[admin]:[1]:method_text:[ned an empty string.  WiFi not enabled?"",                TextUtils.isEmpty(macAddress));    }   ]) :|: public void testGetWifiMacAddress() {
        if (!mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WIFI)) {
            // wifi not supported.
            return;
        }
        final String macAddress = mDevicePolicyManager.getWifiMacAddress(ADMIN);

        assertFalse(""Device owner should be able to get the real MAC address"",
                DEFAULT_MAC_ADDRESS.equals(macAddress));
        assertFalse(""getWifiMacAddress() returned an empty string.  WiFi not enabled?"",
                TextUtils.isEmpty(macAddress));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/WifiTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.WifiTest"	"testCannotGetWifiMacAddress"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/WifiTest.java]:[admin]:[1]:method_text:[e able to get the MAC address"");        } catch (SecurityException expected) {        }    }   ]) :|: public void testCannotGetWifiMacAddress() {
        try {
            mDevicePolicyManager.getWifiMacAddress(ADMIN);
            fail(""Profile owner shouldn't be able to get the MAC address"");
        } catch (SecurityException expected) {
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/WifiTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testBadTokenShouldFail"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[1]:method_text:[tPasswordWithToken(ADMIN_RECEIVER_COMPONENT,                SHORT_PASSWORD, TOKEN1, 0));    }   ]) :|: public void testBadTokenShouldFail() {
        if (!mShouldRun) {
            return;
        }
        // resetting password with wrong token should fail
        assertFalse(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT,
                SHORT_PASSWORD, TOKEN1, 0));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testChangePasswordWithToken"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[4]:method_text:[,                COMPLEX_PASSWORD, TOKEN0, 0));        assertPasswordSufficiency(true);    }   ]) :|: public void testChangePasswordWithToken() {
        if (!mShouldRun) {
            return;
        }
        // try changing password with token
        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT,
                SHORT_PASSWORD, TOKEN0, 0));

        // Set a strong password constraint and expect the sufficiency check to fail
        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_NUMERIC);
        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 6);
        assertPasswordSufficiency(false);

        // try changing to a stronger password and verify it satisfies requested constraint
        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT,
                COMPLEX_PASSWORD, TOKEN0, 0));
        assertPasswordSufficiency(true);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testResetPasswordFailIfQualityNotMet"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[4]:method_text:[asswordWithToken(ADMIN_RECEIVER_COMPONENT,                COMPLEX_PASSWORD, TOKEN0, 0));    }   ]) :|: public void testResetPasswordFailIfQualityNotMet() {
        if (!mShouldRun) {
            return;
        }
        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_NUMERIC);
        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 6);

        assertFalse(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT,
                SHORT_PASSWORD, TOKEN0, 0));

        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT,
                COMPLEX_PASSWORD, TOKEN0, 0));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testPasswordMetricAfterResetPassword"	""	"1: admin"	"([9:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[9]:method_text:[wordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, 1);        assertPasswordSufficiency(true);    }   ]) :|: public void testPasswordMetricAfterResetPassword() {
        if (!mShouldRun) {
            return;
        }
        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                PASSWORD_QUALITY_COMPLEX);
        mDevicePolicyManager.setPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT, 1);
        mDevicePolicyManager.setPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT, 1);
        mDevicePolicyManager.setPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, 0);
        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT,
                COMPLEX_PASSWORD, TOKEN0, 0));

        // Change required complexity and verify new password satisfies it
        // First set a slightly stronger requirement and expect password sufficiency is false
        mDevicePolicyManager.setPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT, 3);
        mDevicePolicyManager.setPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT, 3);
        mDevicePolicyManager.setPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, 2);
        assertPasswordSufficiency(false);
        // Then sets the appropriate quality and verify it should pass
        mDevicePolicyManager.setPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, 1);
        assertPasswordSufficiency(true);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testClearPasswordWithToken"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[2]:method_text:[R_COMPONENT, null,                TOKEN0, 0));        assertFalse(km.isDeviceSecure());    }   ]) :|: public void testClearPasswordWithToken() {
        if (!mShouldRun) {
            return;
        }
        KeyguardManager km = mContext.getSystemService(KeyguardManager.class);
        // First set a password
        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT,
                SHORT_PASSWORD, TOKEN0, 0));
        assertTrue(km.isDeviceSecure());

        // clear password with token
        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT, null,
                TOKEN0, 0));
        assertFalse(km.isDeviceSecure());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testPasswordQuality_something"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[2]:method_text:[scription); // can't change.        assertPasswordSucceeds(""abcd1234"", caseDescription);    }   ]) :|: public void testPasswordQuality_something() {
        if (!mShouldRun) {
            return;
        }

        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                PASSWORD_QUALITY_SOMETHING);
        assertEquals(PASSWORD_QUALITY_SOMETHING,
                mDevicePolicyManager.getPasswordQuality(ADMIN_RECEIVER_COMPONENT));
        assertPasswordSufficiency(false);

        String caseDescription = ""initial"";
        assertPasswordSucceeds(""1234"", caseDescription);
        assertPasswordSucceeds(""abcd"", caseDescription); // can't change.
        assertPasswordSucceeds(""abcd1234"", caseDescription);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testPasswordQuality_numeric"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[6]:method_text:[ds(""abcd"", caseDescription);        assertPasswordSucceeds(""abcd1234"", caseDescription);    }   ]) :|: public void testPasswordQuality_numeric() {
        if (!mShouldRun) {
            return;
        }

        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_NUMERIC);
        assertEquals(PASSWORD_QUALITY_NUMERIC,
                mDevicePolicyManager.getPasswordQuality(ADMIN_RECEIVER_COMPONENT));
        assertPasswordSufficiency(false);            // failure

        String caseDescription = ""initial"";
        assertPasswordSucceeds(""1234"", caseDescription);
        assertPasswordSucceeds(""abcd"", caseDescription);
        assertPasswordSucceeds(""abcd1234"", caseDescription);

        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 10);
        caseDescription = ""minimum password length = 10"";
        assertEquals(10, mDevicePolicyManager.getPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT));
        assertPasswordSufficiency(false);

        assertPasswordFails(""1234"", caseDescription);
        assertPasswordFails(""abcd"", caseDescription);
        assertPasswordFails(""abcd1234"", caseDescription);

        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 4);
        caseDescription = ""minimum password length = 4"";
        assertEquals(4, mDevicePolicyManager.getPasswordMinimumLength(
                ADMIN_RECEIVER_COMPONENT));
        assertPasswordSufficiency(true);

        assertPasswordSucceeds(""1234"", caseDescription);
        assertPasswordSucceeds(""abcd"", caseDescription);
        assertPasswordSucceeds(""abcd1234"", caseDescription);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testPasswordQuality_alphabetic"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[6]:method_text:[ds(""abcd"", caseDescription);        assertPasswordSucceeds(""abcd1234"", caseDescription);    }   ]) :|: public void testPasswordQuality_alphabetic() {
        if (!mShouldRun) {
            return;
        }

        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                PASSWORD_QUALITY_ALPHABETIC);
        assertEquals(PASSWORD_QUALITY_ALPHABETIC,
                mDevicePolicyManager.getPasswordQuality(ADMIN_RECEIVER_COMPONENT));
        assertPasswordSufficiency(false);

        String caseDescription = ""initial"";
        assertPasswordFails(""1234"", caseDescription);      // can't change
        assertPasswordSucceeds(""abcd"", caseDescription);
        assertPasswordSucceeds(""abcd1234"", caseDescription);

        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 10);
        caseDescription = ""minimum password length = 10"";
        assertEquals(10, mDevicePolicyManager.getPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT));
        assertPasswordSufficiency(false);

        assertPasswordFails(""1234"", caseDescription);
        assertPasswordFails(""abcd"", caseDescription);
        assertPasswordFails(""abcd1234"", caseDescription);

        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 4);
        caseDescription = ""minimum password length = 4"";
        assertEquals(4, mDevicePolicyManager.getPasswordMinimumLength(
                ADMIN_RECEIVER_COMPONENT));
        assertPasswordSufficiency(true);

        assertPasswordFails(""1234"", caseDescription);
        assertPasswordSucceeds(""abcd"", caseDescription);
        assertPasswordSucceeds(""abcd1234"", caseDescription);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testPasswordQuality_alphanumeric"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[6]:method_text:[ls(""abcd"", caseDescription);        assertPasswordSucceeds(""abcd1234"", caseDescription);    }   ]) :|: public void testPasswordQuality_alphanumeric() {
        if (!mShouldRun) {
            return;
        }

        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                PASSWORD_QUALITY_ALPHANUMERIC);
        assertEquals(PASSWORD_QUALITY_ALPHANUMERIC,
                mDevicePolicyManager.getPasswordQuality(ADMIN_RECEIVER_COMPONENT));
        assertPasswordSufficiency(false);

        String caseDescription = ""initial"";
        assertPasswordFails(""1234"", caseDescription);
        assertPasswordFails(""abcd"", caseDescription);
        assertPasswordSucceeds(""abcd1234"", caseDescription);

        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 10);
        caseDescription = ""minimum password length = 10"";
        assertEquals(10, mDevicePolicyManager.getPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT));
        assertPasswordSufficiency(false);

        assertPasswordFails(""1234"", caseDescription);
        assertPasswordFails(""abcd"", caseDescription);
        assertPasswordFails(""abcd1234"", caseDescription);

        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 4);
        caseDescription = ""minimum password length = 4"";
        assertEquals(4, mDevicePolicyManager.getPasswordMinimumLength(
                ADMIN_RECEIVER_COMPONENT));
        assertPasswordSufficiency(true);

        assertPasswordFails(""1234"", caseDescription);
        assertPasswordFails(""abcd"", caseDescription);
        assertPasswordSucceeds(""abcd1234"", caseDescription);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testPasswordQuality_complexUpperCase"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[6]:method_text:[BCD"", caseDescription);        assertPasswordFails(""123"", caseDescription); // too short    }   ]) :|: public void testPasswordQuality_complexUpperCase() {
        if (!mShouldRun) {
            return;
        }

        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_COMPLEX);
        assertEquals(PASSWORD_QUALITY_COMPLEX,
                mDevicePolicyManager.getPasswordQuality(ADMIN_RECEIVER_COMPONENT));
        resetComplexPasswordRestrictions();

        String caseDescription = ""minimum UpperCase=0"";
        assertPasswordSucceeds(""abc1"", caseDescription);
        assertPasswordSucceeds(""aBc1"", caseDescription);
        assertPasswordSucceeds(""ABC1"", caseDescription);
        assertPasswordSucceeds(""ABCD"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short

        mDevicePolicyManager.setPasswordMinimumUpperCase(ADMIN_RECEIVER_COMPONENT, 1);
        assertEquals(1, mDevicePolicyManager.getPasswordMinimumUpperCase(ADMIN_RECEIVER_COMPONENT));
        caseDescription = ""minimum UpperCase=1"";
        assertPasswordFails(""abc1"", caseDescription);
        assertPasswordSucceeds(""aBc1"", caseDescription);
        assertPasswordSucceeds(""ABC1"", caseDescription);
        assertPasswordSucceeds(""ABCD"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short

        mDevicePolicyManager.setPasswordMinimumUpperCase(ADMIN_RECEIVER_COMPONENT, 3);
        assertEquals(3, mDevicePolicyManager.getPasswordMinimumUpperCase(ADMIN_RECEIVER_COMPONENT));
        caseDescription = ""minimum UpperCase=3"";
        assertPasswordFails(""abc1"", caseDescription);
        assertPasswordFails(""aBC1"", caseDescription);
        assertPasswordSucceeds(""ABC1"", caseDescription);
        assertPasswordSucceeds(""ABCD"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testPasswordQuality_complexLowerCase"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[6]:method_text:[bcd"", caseDescription);        assertPasswordFails(""123"", caseDescription); // too short    }   ]) :|: public void testPasswordQuality_complexLowerCase() {
        if (!mShouldRun) {
            return;
        }

        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_COMPLEX);
        assertEquals(PASSWORD_QUALITY_COMPLEX,
                mDevicePolicyManager.getPasswordQuality(ADMIN_RECEIVER_COMPONENT));
        resetComplexPasswordRestrictions();

        String caseDescription = ""minimum LowerCase=0"";
        assertPasswordSucceeds(""ABCD"", caseDescription);
        assertPasswordSucceeds(""aBC1"", caseDescription);
        assertPasswordSucceeds(""abc1"", caseDescription);
        assertPasswordSucceeds(""abcd"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short

        mDevicePolicyManager.setPasswordMinimumLowerCase(ADMIN_RECEIVER_COMPONENT, 1);
        assertEquals(1, mDevicePolicyManager.getPasswordMinimumLowerCase(ADMIN_RECEIVER_COMPONENT));
        caseDescription = ""minimum LowerCase=1"";
        assertPasswordFails(""ABCD"", caseDescription);
        assertPasswordSucceeds(""aBC1"", caseDescription);
        assertPasswordSucceeds(""abc1"", caseDescription);
        assertPasswordSucceeds(""abcd"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short

        mDevicePolicyManager.setPasswordMinimumLowerCase(ADMIN_RECEIVER_COMPONENT, 3);
        assertEquals(3, mDevicePolicyManager.getPasswordMinimumLowerCase(ADMIN_RECEIVER_COMPONENT));
        caseDescription = ""minimum LowerCase=3"";
        assertPasswordFails(""ABCD"", caseDescription);
        assertPasswordFails(""aBC1"", caseDescription);
        assertPasswordSucceeds(""abc1"", caseDescription);
        assertPasswordSucceeds(""abcd"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testPasswordQuality_complexLetters"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[6]:method_text:[bcd"", caseDescription);        assertPasswordFails(""123"", caseDescription); // too short    }   ]) :|: public void testPasswordQuality_complexLetters() {
        if (!mShouldRun) {
            return;
        }

        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_COMPLEX);
        assertEquals(PASSWORD_QUALITY_COMPLEX,
                mDevicePolicyManager.getPasswordQuality(ADMIN_RECEIVER_COMPONENT));
        resetComplexPasswordRestrictions();

        String caseDescription = ""minimum Letters=0"";
        assertPasswordFails(""1234"", caseDescription); // Numeric PIN not allowed
        assertPasswordSucceeds(""a123"", caseDescription);
        assertPasswordSucceeds(""abc1"", caseDescription);
        assertPasswordSucceeds(""abcd"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short

        mDevicePolicyManager.setPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT, 1);
        assertEquals(1, mDevicePolicyManager.getPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT));
        caseDescription = ""minimum Letters=1"";
        assertPasswordFails(""1234"", caseDescription);
        assertPasswordSucceeds(""a123"", caseDescription);
        assertPasswordSucceeds(""abc1"", caseDescription);
        assertPasswordSucceeds(""abcd"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short

        mDevicePolicyManager.setPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT, 3);
        assertEquals(3, mDevicePolicyManager.getPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT));
        caseDescription = ""minimum Letters=3"";
        assertPasswordFails(""1234"", caseDescription);
        assertPasswordFails(""a123"", caseDescription);
        assertPasswordSucceeds(""abc1"", caseDescription);
        assertPasswordSucceeds(""abcd"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testPasswordQuality_complexNumeric"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[6]:method_text:[Numeric PIN not allowed        assertPasswordFails(""123"", caseDescription); // too short    }   ]) :|: public void testPasswordQuality_complexNumeric() {
        if (!mShouldRun) {
            return;
        }

        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_COMPLEX);
        assertEquals(PASSWORD_QUALITY_COMPLEX,
                mDevicePolicyManager.getPasswordQuality(ADMIN_RECEIVER_COMPONENT));
        resetComplexPasswordRestrictions();

        String caseDescription = ""minimum Numeric=0"";
        assertPasswordSucceeds(""abcd"", caseDescription);
        assertPasswordSucceeds(""1abc"", caseDescription);
        assertPasswordSucceeds(""123a"", caseDescription);
        assertPasswordFails(""1234"", caseDescription); // Numeric PIN not allowed
        assertPasswordFails(""123"", caseDescription); // too short

        mDevicePolicyManager.setPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT, 1);
        assertEquals(1, mDevicePolicyManager.getPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT));
        caseDescription = ""minimum Numeric=1"";
        assertPasswordFails(""abcd"", caseDescription);
        assertPasswordSucceeds(""1abc"", caseDescription);
        assertPasswordSucceeds(""123a"", caseDescription);
        assertPasswordFails(""1234"", caseDescription); // Numeric PIN not allowed
        assertPasswordFails(""123"", caseDescription); // too short

        mDevicePolicyManager.setPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT, 3);
        assertEquals(3, mDevicePolicyManager.getPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT));
        caseDescription = ""minimum Numeric=3"";
        assertPasswordFails(""abcd"", caseDescription);
        assertPasswordFails(""1abc"", caseDescription);
        assertPasswordSucceeds(""123a"", caseDescription);
        assertPasswordFails(""1234"", caseDescription); // Numeric PIN not allowed
        assertPasswordFails(""123"", caseDescription); // too short
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testPasswordComplexity_settingComplexityClearsQuality"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[2]:method_text:[COMPLEXITY_MEDIUM,                mDevicePolicyManager.getRequiredPasswordComplexity());    }   ]) :|: public void testPasswordComplexity_settingComplexityClearsQuality() {
        if (!mShouldRun) {
            return;
        }

        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_COMPLEX);
        mDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_MEDIUM);
        assertEquals(PASSWORD_QUALITY_UNSPECIFIED,
                mDevicePolicyManager.getPasswordQuality(ADMIN_RECEIVER_COMPONENT));
        assertEquals(PASSWORD_COMPLEXITY_MEDIUM,
                mDevicePolicyManager.getRequiredPasswordComplexity());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testPasswordComplexity_settingQualityResetsComplexity"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[2]:method_text:[D_COMPLEXITY_NONE,                mDevicePolicyManager.getRequiredPasswordComplexity());    }   ]) :|: public void testPasswordComplexity_settingQualityResetsComplexity() {
        if (!mShouldRun) {
            return;
        }

        mDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_MEDIUM);
        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_COMPLEX);
        assertEquals(PASSWORD_QUALITY_COMPLEX,
                mDevicePolicyManager.getPasswordQuality(ADMIN_RECEIVER_COMPONENT));
        assertEquals(PASSWORD_COMPLEXITY_NONE,
                mDevicePolicyManager.getRequiredPasswordComplexity());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testPasswordComplexity_Medium"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[1]:method_text:[    assertEquals(PASSWORD_COMPLEXITY_HIGH, mDevicePolicyManager.getPasswordComplexity());    }   ]) :|: public void testPasswordComplexity_Medium() {
        if (!mShouldRun) {
            return;
        }

        mDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_MEDIUM);
        assertEquals(PASSWORD_QUALITY_UNSPECIFIED,
                mDevicePolicyManager.getPasswordQuality(ADMIN_RECEIVER_COMPONENT));
        assertEquals(PASSWORD_COMPLEXITY_MEDIUM,
                mDevicePolicyManager.getRequiredPasswordComplexity());

        String caseDescription = ""medium quality password"";
        assertPasswordSucceeds(""axtd"", caseDescription);
        assertPasswordSucceeds(""1axc"", caseDescription);
        assertPasswordSucceeds(""1363"", caseDescription);
        assertPasswordFails(""4444"", caseDescription);
        assertEquals(PASSWORD_COMPLEXITY_MEDIUM, mDevicePolicyManager.getPasswordComplexity());
        assertPasswordSucceeds(""1axc352ae63"", caseDescription);
        assertEquals(PASSWORD_COMPLEXITY_HIGH, mDevicePolicyManager.getPasswordComplexity());
        assertPasswordFails(""1234"", caseDescription); // repeating pattern
        assertEquals(PASSWORD_COMPLEXITY_HIGH, mDevicePolicyManager.getPasswordComplexity());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testPasswordQuality_complexSymbols"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[6]:method_text:[@#!"", caseDescription);        assertPasswordFails(""123"", caseDescription); // too short    }   ]) :|: public void testPasswordQuality_complexSymbols() {
        if (!mShouldRun) {
            return;
        }

        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_COMPLEX);
        assertEquals(PASSWORD_QUALITY_COMPLEX,
                mDevicePolicyManager.getPasswordQuality(ADMIN_RECEIVER_COMPONENT));
        resetComplexPasswordRestrictions();

        String caseDescription = ""minimum Symbols=0"";
        assertPasswordSucceeds(""abcd"", caseDescription);
        assertPasswordSucceeds(""_bc1"", caseDescription);
        assertPasswordSucceeds(""@#!1"", caseDescription);
        assertPasswordSucceeds(""_@#!"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short

        mDevicePolicyManager.setPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, 1);
        assertEquals(1, mDevicePolicyManager.getPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT));
        caseDescription = ""minimum Symbols=1"";
        assertPasswordFails(""abcd"", caseDescription);
        assertPasswordSucceeds(""_bc1"", caseDescription);
        assertPasswordSucceeds(""@#!1"", caseDescription);
        assertPasswordSucceeds(""_@#!"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short

        mDevicePolicyManager.setPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, 3);
        assertEquals(3, mDevicePolicyManager.getPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT));
        caseDescription = ""minimum Symbols=3"";
        assertPasswordFails(""abcd"", caseDescription);
        assertPasswordFails(""_bc1"", caseDescription);
        assertPasswordSucceeds(""@#!1"", caseDescription);
        assertPasswordSucceeds(""_@#!"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testPasswordQuality_complexNonLetter"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[6]:method_text:[25!"", caseDescription);        assertPasswordFails(""123"", caseDescription); // too short    }   ]) :|: public void testPasswordQuality_complexNonLetter() {
        if (!mShouldRun) {
            return;
        }

        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_COMPLEX);
        assertEquals(PASSWORD_QUALITY_COMPLEX,
                mDevicePolicyManager.getPasswordQuality(ADMIN_RECEIVER_COMPONENT));
        resetComplexPasswordRestrictions();

        String caseDescription = ""minimum NonLetter=0"";
        assertPasswordSucceeds(""Abcd"", caseDescription);
        assertPasswordSucceeds(""_bcd"", caseDescription);
        assertPasswordSucceeds(""3bcd"", caseDescription);
        assertPasswordSucceeds(""_@3c"", caseDescription);
        assertPasswordSucceeds(""_25!"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short

        mDevicePolicyManager.setPasswordMinimumNonLetter(ADMIN_RECEIVER_COMPONENT, 1);
        assertEquals(1, mDevicePolicyManager.getPasswordMinimumNonLetter(ADMIN_RECEIVER_COMPONENT));
        caseDescription = ""minimum NonLetter=1"";
        assertPasswordFails(""Abcd"", caseDescription);
        assertPasswordSucceeds(""_bcd"", caseDescription);
        assertPasswordSucceeds(""3bcd"", caseDescription);
        assertPasswordSucceeds(""_@3c"", caseDescription);
        assertPasswordSucceeds(""_25!"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short

        mDevicePolicyManager.setPasswordMinimumNonLetter(ADMIN_RECEIVER_COMPONENT, 3);
        assertEquals(3, mDevicePolicyManager.getPasswordMinimumNonLetter(ADMIN_RECEIVER_COMPONENT));
        caseDescription = ""minimum NonLetter=3"";
        assertPasswordFails(""Abcd"", caseDescription);
        assertPasswordFails(""_bcd"", caseDescription);
        assertPasswordFails(""3bcd"", caseDescription);
        assertPasswordSucceeds(""_@3c"", caseDescription);
        assertPasswordSucceeds(""_25!"", caseDescription);
        assertPasswordFails(""123"", caseDescription); // too short
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testResetPasswordWithTokenLogging"	""	"1: admin"	"([20:/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java]:[admin]:[20]:method_text:[T, 0);        mDevicePolicyManager.setPasswordMinimumNonLetter(ADMIN_RECEIVER_COMPONENT, 0);    }]) :|: public void testResetPasswordWithTokenLogging() {
        if (!mShouldRun) {
            return;
        }

        try (EnterpriseMetricsRecorder metrics = EnterpriseMetricsRecorder.create()) {
            mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT,
                    SHORT_PASSWORD, TOKEN0, 0);

            assertNotNull(metrics.query()
                    .whereType().isEqualTo(EventId.RESET_PASSWORD_WITH_TOKEN_VALUE)
                    .whereAdminPackageName().isEqualTo(PACKAGE_NAME)
                    .poll());
        }
    }

    private boolean setUpResetPasswordToken(boolean acceptFailure) {
        // set up a token
        assertFalse(mDevicePolicyManager.isResetPasswordTokenActive(ADMIN_RECEIVER_COMPONENT));

        try {
            // On devices with password token disabled, calling this method will throw
            // a security exception. If that's anticipated, then return early without failing.
            assertTrue(mDevicePolicyManager.setResetPasswordToken(ADMIN_RECEIVER_COMPONENT,
                    TOKEN0));
        } catch (SecurityException e) {
            if (acceptFailure &&
                    e.getMessage().equals(""Escrow token is disabled on the current user"")) {
                return false;
            } else {
                throw e;
            }
        }
        assertTrue(mDevicePolicyManager.isResetPasswordTokenActive(ADMIN_RECEIVER_COMPONENT));
        return true;
    }

    private void cleanUpResetPasswordToken() {
        // First remove device lock
        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);
        mDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_NONE);
        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT, null,
                TOKEN0, 0));

        // Then remove token and check it succeeds
        assertTrue(mDevicePolicyManager.clearRe"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.TimeManagementTest"	"testSetAutoTimeZoneEnabled"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/TimeManagementTest.java]:[admin]:[4]:method_text:[ertThat(mDevicePolicyManager.getAutoTimeZoneEnabled(ADMIN_RECEIVER_COMPONENT)).isFalse();    }   ]) :|: public void testSetAutoTimeZoneEnabled() {
        mDevicePolicyManager.setAutoTimeZoneEnabled(ADMIN_RECEIVER_COMPONENT, true);

        assertThat(mDevicePolicyManager.getAutoTimeZoneEnabled(ADMIN_RECEIVER_COMPONENT)).isTrue();

        mDevicePolicyManager.setAutoTimeZoneEnabled(ADMIN_RECEIVER_COMPONENT, false);

        assertThat(mDevicePolicyManager.getAutoTimeZoneEnabled(ADMIN_RECEIVER_COMPONENT)).isFalse();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/TimeManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.TimeManagementTest"	"testSetTime"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/TimeManagementTest.java]:[admin]:[2]:method_text:[RECEIVER_COMPONENT,                estimatedNow - TimeUnit.HOURS.toMillis(1))).isTrue();    }   ]) :|: public void testSetTime() {
        mDevicePolicyManager.setAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT, false);

        final long estimatedNow = mStartTimeWallClockMillis +
                TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - mStartTimeElapsedNanos);
        assertThat(mDevicePolicyManager.setTime(ADMIN_RECEIVER_COMPONENT,
                estimatedNow - TimeUnit.HOURS.toMillis(1))).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/TimeManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.TimeManagementTest"	"testSetTime_failWhenAutoTimeEnabled"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/TimeManagementTest.java]:[admin]:[2]:method_text:[        assertThat(mDevicePolicyManager.setTime(ADMIN_RECEIVER_COMPONENT, 0)).isFalse();    }   ]) :|: public void testSetTime_failWhenAutoTimeEnabled() {
        mDevicePolicyManager.setAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT, true);

        assertThat(mDevicePolicyManager.setTime(ADMIN_RECEIVER_COMPONENT, 0)).isFalse();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/TimeManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.TimeManagementTest"	"testSetTimeZone"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/TimeManagementTest.java]:[admin]:[2]:method_text:[       mDevicePolicyManager.setTimeZone(ADMIN_RECEIVER_COMPONENT, ""Singapore"")).isTrue();    }   ]) :|: public void testSetTimeZone() {
        mDevicePolicyManager.setAutoTimeZoneEnabled(ADMIN_RECEIVER_COMPONENT, false);

        assertThat(
                mDevicePolicyManager.setTimeZone(ADMIN_RECEIVER_COMPONENT, ""Singapore"")).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/TimeManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.TimeManagementTest"	"testSetTimeZone_failIfAutoTimeZoneEnabled"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/TimeManagementTest.java]:[admin]:[5]:method_text:[matedNow);        mDevicePolicyManager.setAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT, true);    }}]) :|: public void testSetTimeZone_failIfAutoTimeZoneEnabled() {
        mDevicePolicyManager.setAutoTimeZoneEnabled(ADMIN_RECEIVER_COMPONENT, true);

        assertThat(
                mDevicePolicyManager.setTimeZone(ADMIN_RECEIVER_COMPONENT, ""Singapore"")).isFalse();
    }

    private void saveTime() {
        mStartTimeWallClockMillis = System.currentTimeMillis();
        mStartTimeElapsedNanos = System.nanoTime();
    }

    private void restoreTime() {
        mDevicePolicyManager.setAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT, false);

        final long estimatedNow = mStartTimeWallClockMillis +
                TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - mStartTimeElapsedNanos);
        mDevicePolicyManager.setTime(ADMIN_RECEIVER_COMPONENT, estimatedNow);

        mDevicePolicyManager.setAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT, true);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/TimeManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.UnavailableSecureLockScreenTest"	"testResetWithTokenAndPasswordSufficiency"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/UnavailableSecureLockScreenTest.java]:[admin]:[6]:method_text:[      ADMIN_RECEIVER_COMPONENT, DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);        }    }}]) :|: public void testResetWithTokenAndPasswordSufficiency() throws Exception {
        // The password is always empty on devices which don't support the secure lock screen
        // feature.

        // Initially, when no password quality requirements are set, the empty password is
        // sufficient.
        assertPasswordSufficiency(true);
        try {

            // Resetting password should fail - it is not possible to set a password reset token or
            // a password on a device without the secure lock screen feature.
            assertFalse(mDevicePolicyManager.setResetPasswordToken(ADMIN_RECEIVER_COMPONENT, TOKEN));
            assertFalse(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT,
                    COMPLEX_PASSWORD, TOKEN, 0));

            // As soon as some requirement for minimal password quality is set...
            mDevicePolicyManager.setPasswordQuality(
                    ADMIN_RECEIVER_COMPONENT, DevicePolicyManager.PASSWORD_QUALITY_SOMETHING);

            // ... the password is not sufficient any more.
            assertPasswordSufficiency(false);

            // If the requirement for minimal password quality is removed later...
            mDevicePolicyManager.setPasswordQuality(
                    ADMIN_RECEIVER_COMPONENT, DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);

            // The empty password is sufficient again.
            assertPasswordSufficiency(true);
        } finally {
            mDevicePolicyManager.clearResetPasswordToken(ADMIN_RECEIVER_COMPONENT);
            mDevicePolicyManager.setPasswordQuality(
                    ADMIN_RECEIVER_COMPONENT, DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UnavailableSecureLockScreenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.CustomizationRestrictionsTest"	"testDisallowSetWallpaper_allowed"	""	"1: UserManager.DISALLOW"	"([3:/com/android/cts/deviceandprofileowner/CustomizationRestrictionsTest.java]:[UserManager.DISALLOW]:[3]:method_text:[ }        assertFalse(mUserManager.hasUserRestriction(UserManager.DISALLOW_SET_WALLPAPER));    }}]) :|: public void testDisallowSetWallpaper_allowed() throws Exception {
        final WallpaperManager wallpaperManager = WallpaperManager.getInstance(mContext);
        final Bitmap originalWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
        final Bitmap originalWallpaperCopy =
                originalWallpaper.copy(originalWallpaper.getConfig(), false);

        try (
                // Set restriction and subscribe for the broadcast.
                final RestrictionApplicator restr =
                        new RestrictionApplicator(UserManager.DISALLOW_SET_WALLPAPER);
                final BroadcastReceiverRegistrator bcast =
                        new BroadcastReceiverRegistrator(Intent.ACTION_WALLPAPER_CHANGED);
        ) {
            assertTrue(mUserManager.hasUserRestriction(UserManager.DISALLOW_SET_WALLPAPER));

            // Checking setBitmap() method.
            Bitmap oldWallpaper = originalWallpaperCopy;
            wallpaperManager.setBitmap(BitmapUtils.generateRandomBitmap(97, 73));
            bcast.waitForBroadcast();
            Bitmap newWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
            assertFalse(BitmapUtils.compareBitmaps(newWallpaper, oldWallpaper));

            // Checking setStream() method.
            oldWallpaper = newWallpaper;
            final Bitmap wallpaperForStream = BitmapUtils.generateRandomBitmap(83, 69);
            wallpaperManager.setStream(BitmapUtils.bitmapToInputStream(wallpaperForStream));
            bcast.waitForBroadcast();
            newWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
            assertFalse(BitmapUtils.compareBitmaps(newWallpaper, oldWallpaper));

            // Checking setResource() method.
            oldWallpaper = newWallpaper;
            wallpaperManager.setResource(R.raw.wallpaper);
            bcast.waitForBroadcast();
            newWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
            assertFalse(BitmapUtils.compareBitmaps(newWallpaper, oldWallp"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CustomizationRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.EnrollmentSpecificIdTest"	"testCorrectCalculationOfEsid"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/EnrollmentSpecificIdTest.java]:[admin]:[1]:method_text:[      encoded[--index] = alphabet[group];        }        return String.valueOf(encoded);    }}]) :|: public void testCorrectCalculationOfEsid() {
        mUiAutomation.adoptShellPermissionIdentity(PERMISSIONS_TO_ADOPT);
        mDevicePolicyManager.setOrganizationId(ORGANIZATION_ID);
        final String esidFromDpm = mDevicePolicyManager.getEnrollmentSpecificId();
        final String calculatedEsid = calculateEsid(ADMIN_RECEIVER_COMPONENT.getPackageName(),
                ORGANIZATION_ID);
        assertThat(esidFromDpm).isEqualTo(calculatedEsid);
    }

    private String calculateEsid(String profileOwnerPackage, String enterpriseIdString) {
        TelephonyManager telephonyService = mContext.getSystemService(TelephonyManager.class);
        assertThat(telephonyService).isNotNull();

        WifiManager wifiManager = mContext.getSystemService(WifiManager.class);
        assertThat(wifiManager).isNotNull();

        final byte[] serialNumber = getPaddedHardwareIdentifier(Build.getSerial()).getBytes();
        final byte[] imei = getPaddedHardwareIdentifier(telephonyService.getImei(0)).getBytes();
        final byte[] meid = getPaddedHardwareIdentifier(telephonyService.getMeid(0)).getBytes();

        final byte[] macAddress;
        final String[] macAddresses = wifiManager.getFactoryMacAddresses();
        if (macAddresses == null || macAddresses.length == 0) {
            macAddress = """".getBytes();
        } else {
            macAddress = macAddresses[0].getBytes();
        }

        final int totalIdentifiersLength = serialNumber.length + imei.length + meid.length
                + macAddress.length;
        final ByteBuffer fixedIdentifiers = ByteBuffer.allocate(totalIdentifiersLength);
        fixedIdentifiers.put(serialNumber);
        fixedIdentifiers.put(imei);
        fixedIdentifiers.put(meid);
        fixedIdentifiers.put(macAddress);

        final byte[] dpcPackage = getPaddedProfileOwnerName(profileOwnerPackage).getBytes();
        final byte[] enterpriseId = getPaddedEnterpriseId(enterpriseIdString).getBytes();
        final ByteBuffer info = B"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/EnrollmentSpecificIdTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ScreenCaptureDisabledTest"	"testSetScreenCaptureDisabled_false"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/ScreenCaptureDisabledTest.java]:[admin]:[4]:method_text:[       .that(mDevicePolicyManager.getScreenCaptureDisabled(/* admin= */ null)).isFalse();    }   ]) :|: public void testSetScreenCaptureDisabled_false() {
        mDevicePolicyManager.setScreenCaptureDisabled(ADMIN_RECEIVER_COMPONENT, false);
        assertWithMessage(""dpm.getScreenCaptureDisabled(%s)"",
                ADMIN_RECEIVER_COMPONENT.flattenToShortString())
                    .that(mDevicePolicyManager.getScreenCaptureDisabled(ADMIN_RECEIVER_COMPONENT))
                    .isFalse();
        assertWithMessage(""dpm.getScreenCaptureDisabled(null)"")
                .that(mDevicePolicyManager.getScreenCaptureDisabled(/* admin= */ null)).isFalse();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ScreenCaptureDisabledTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ScreenCaptureDisabledTest"	"testSetScreenCaptureDisabled_true"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/ScreenCaptureDisabledTest.java]:[admin]:[4]:method_text:[        .that(mDevicePolicyManager.getScreenCaptureDisabled(/* admin= */ null)).isTrue();    }   ]) :|: public void testSetScreenCaptureDisabled_true() {
        mDevicePolicyManager.setScreenCaptureDisabled(ADMIN_RECEIVER_COMPONENT, true);
        assertWithMessage(""dpm.getScreenCaptureDisabled(%s)"",
                ADMIN_RECEIVER_COMPONENT.flattenToShortString())
                     .that(mDevicePolicyManager.getScreenCaptureDisabled(ADMIN_RECEIVER_COMPONENT))
                     .isTrue();
        assertWithMessage(""dpm.getScreenCaptureDisabled(null)"")
                .that(mDevicePolicyManager.getScreenCaptureDisabled(/* admin= */ null)).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ScreenCaptureDisabledTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ScreenCaptureDisabledTest"	"testSetScreenCaptureDisabledOnParent_false"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/ScreenCaptureDisabledTest.java]:[admin]:[5]:method_text:[icePolicyManager.getScreenCaptureDisabled(/* admin= */ null))                .isFalse();    }   ]) :|: public void testSetScreenCaptureDisabledOnParent_false() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        parentDevicePolicyManager.setScreenCaptureDisabled(ADMIN_RECEIVER_COMPONENT, false);
        assertWithMessage(""parentDevicePolicyManager.getScreenCaptureDisabled(%s)"",
                ADMIN_RECEIVER_COMPONENT.flattenToShortString())
                     .that(parentDevicePolicyManager
                             .getScreenCaptureDisabled(ADMIN_RECEIVER_COMPONENT))
                     .isFalse();
        assertWithMessage(""parentDpm.getScreenCaptureDisabled(null)"")
                .that(parentDevicePolicyManager.getScreenCaptureDisabled(/* admin= */ null))
                .isFalse();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ScreenCaptureDisabledTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ScreenCaptureDisabledTest"	"testSetScreenCaptureDisabledOnParent_true"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/ScreenCaptureDisabledTest.java]:[admin]:[5]:method_text:[vicePolicyManager.getScreenCaptureDisabled(/* admin= */ null))                .isTrue();    }   ]) :|: public void testSetScreenCaptureDisabledOnParent_true() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        parentDevicePolicyManager.setScreenCaptureDisabled(ADMIN_RECEIVER_COMPONENT, true);
        assertWithMessage(""parentDevicePolicyManager.getScreenCaptureDisabled(%s)"",
                ADMIN_RECEIVER_COMPONENT.flattenToShortString())
                     .that(parentDevicePolicyManager
                             .getScreenCaptureDisabled(ADMIN_RECEIVER_COMPONENT))
                     .isTrue();
        assertWithMessage(""parentDpm.getScreenCaptureDisabled(null)"")
                .that(parentDevicePolicyManager.getScreenCaptureDisabled(/* admin= */ null))
                .isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ScreenCaptureDisabledTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyguardDisabledFeaturesTest"	"testSetKeyguardDisabledFeatures_onParentSilentIgnoreWhenCallerIsNotOrgOwnedPO"	""	"2: silent admin"	"([3:/com/android/cts/deviceandprofileowner/KeyguardDisabledFeaturesTest.java]:[admin]:[3]:method_text:[ger.getKeyguardDisabledFeatures(                ADMIN_RECEIVER_COMPONENT)).isEqualTo(0);    }   ]) :|: public void testSetKeyguardDisabledFeatures_onParentSilentIgnoreWhenCallerIsNotOrgOwnedPO() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);

        parentDevicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_CAMERA);

        assertThat(mDevicePolicyManager.getKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT)).isEqualTo(0);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyguardDisabledFeaturesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyguardDisabledFeaturesTest"	"testSetKeyguardDisabledFeatures"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/KeyguardDisabledFeaturesTest.java]:[admin]:[6]:method_text:[SABLE_SECURE_NOTIFICATIONS);        removeKeyguardDisableFeatures(mDevicePolicyManager);    }   ]) :|: public void testSetKeyguardDisabledFeatures() {
        mDevicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_CAMERA);

        // Check if the admin has disabled the camera specifically for the keyguard
        assertThat(mDevicePolicyManager.getKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT)).isEqualTo(
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_CAMERA);

        removeKeyguardDisableFeatures(mDevicePolicyManager);
        mDevicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_NOTIFICATIONS);

        // Check if the admin has disabled notifications specifically for the keyguard
        assertThat(mDevicePolicyManager.getKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT)).isEqualTo(
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_NOTIFICATIONS);
        removeKeyguardDisableFeatures(mDevicePolicyManager);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyguardDisabledFeaturesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyguardDisabledFeaturesTest"	"testSetKeyguardDisabledFeatures_onParent"	""	"1: admin"	"([8:/com/android/cts/deviceandprofileowner/KeyguardDisabledFeaturesTest.java]:[admin]:[8]:method_text:[MIN_RECEIVER_COMPONENT,                DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_NONE);    }}]) :|: public void testSetKeyguardDisabledFeatures_onParent() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);

        parentDevicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_CAMERA);

        // Check if the admin has disabled the camera specifically for the keyguard
        assertThat(parentDevicePolicyManager.getKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT)).isEqualTo(
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_CAMERA);

        removeKeyguardDisableFeatures(parentDevicePolicyManager);
        parentDevicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_NOTIFICATIONS);

        // Check if the admin has disabled notifications specifically for the keyguard
        assertThat(parentDevicePolicyManager.getKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT)).isEqualTo(
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_NOTIFICATIONS);
        removeKeyguardDisableFeatures(parentDevicePolicyManager);
    }

    private void removeKeyguardDisableFeatures(DevicePolicyManager devicePolicyManager) {
        devicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_NONE);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyguardDisabledFeaturesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PrintingPolicyTest"	"testPrintingPolicy"	""	"2: UserManager.DISALLOW admin"	"([1:/com/android/cts/deviceandprofileowner/PrintingPolicyTest.java]:[admin]:[1]:method_text:[   final String errorMessage = activity.getErrorMessage();        assertNull(errorMessage);    }}]) :|: public void testPrintingPolicy() throws Exception {
        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_PRINTING);
        final PrintActivity activity = launchActivity(""com.android.cts.deviceandprofileowner"",
                PrintActivity.class, null);
        final String errorMessage = activity.getErrorMessage();
        assertNull(errorMessage);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PrintingPolicyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AllowedAccountManagementTest"	"clearAllAccountManagementDisabled"	""	"2: UserManager.DISALLOW admin"	"([4:/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java]:[admin]:[4]:method_text:[MPONENT,                UserManager.DISALLOW_MODIFY_ACCOUNTS);        super.tearDown();    }   ]) :|: public void test/*
 *.
 */

package com.android.cts.deviceandprofileowner;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.accounts.AuthenticatorException;
import android.accounts.OperationCanceledException;
import android.app.admin.DevicePolicyManager;
import android.content.Context;
import android.os.Bundle;
import android.os.UserManager;

import java.io.IOException;

/**
 * These tests verify that the device / profile owner can use account management APIs to add
 * accounts even when policies are set. The policies tested are
 * {@link DevicePolicyManager#setAccountManagementDisabled} and
 * {@link UserManager#DISALLOW_MODIFY_ACCOUNTS}.
 *
 * This test depends on {@link com.android.cts.devicepolicy.accountmanagement.MockAccountService},
 * which provides authenticator for a mock account type.
 */
public class AllowedAccountManagementTest extends BaseDeviceAdminTest {

    // Account type for MockAccountAuthenticator
    private final static String ACCOUNT_TYPE_1 =
            ""com.android.cts.devicepolicy.accountmanagement.account.type"";
    private final static String ACCOUNT_TYPE_2 = ""com.placeholder.account"";
    private final static Account ACCOUNT = new Account(""user0"", ACCOUNT_TYPE_1);

    private AccountManager mAccountManager;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mAccountManager = (AccountManager) mContext.getSystemService(Context.ACCOUNT_SERVICE);
        clearAllAccountManagementDisabled();
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_MODIFY_ACCOUNTS);
    }

    @Override
    protected void tearDown() throws Exception {
        clearAllAccountManagementDisabled();
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_MODIFY_ACCOUNTS);
        super.tearDown();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AllowedAccountManagementTest"	"testUserRestriction_profileAndDeviceOwnerCanAddAndRemoveAccount"	""	"2: UserManager.DISALLOW admin"	"([1:/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java]:[admin]:[1]:method_text:[l).getResult();        assertTrue(result.getBoolean(AccountManager.KEY_BOOLEAN_RESULT));    }   ]) :|: public void testUserRestriction_profileAndDeviceOwnerCanAddAndRemoveAccount()
            throws AuthenticatorException, IOException, OperationCanceledException {
        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_MODIFY_ACCOUNTS);

        assertEquals(0, mAccountManager.getAccountsByType(ACCOUNT_TYPE_1).length);
        // Management is disabled, but the device / profile owner is still allowed to use the APIs
        Bundle result = mAccountManager.addAccount(ACCOUNT_TYPE_1,
                null, null, null, null, null, null).getResult();

        // Normally the expected result of addAccount() is AccountManager returning
        // an intent to start the authenticator activity for adding new accounts.
        // But MockAccountAuthenticator returns a new account straightway.
        assertEquals(ACCOUNT_TYPE_1, result.getString(AccountManager.KEY_ACCOUNT_TYPE));

        result = mAccountManager.removeAccount(ACCOUNT, null, null, null).getResult();
        assertTrue(result.getBoolean(AccountManager.KEY_BOOLEAN_RESULT));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AllowedAccountManagementTest"	"testAccountManagementDisabled_setterAndGetter"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java]:[admin]:[3]:method_text:[    assertEquals(0, mDevicePolicyManager.getAccountTypesWithManagementDisabled().length);    }   ]) :|: public void testAccountManagementDisabled_setterAndGetter() {
        // Some local tests: adding and removing disabled accounts and make sure
        // DevicePolicyManager keeps track of the disabled set correctly
        assertEquals(0, mDevicePolicyManager.getAccountTypesWithManagementDisabled().length);

        mDevicePolicyManager.setAccountManagementDisabled(ADMIN_RECEIVER_COMPONENT, ACCOUNT_TYPE_1,
                true);
        // Test if disabling ACCOUNT_TYPE_2 affects ACCOUNT_TYPE_1
        mDevicePolicyManager.setAccountManagementDisabled(ADMIN_RECEIVER_COMPONENT, ACCOUNT_TYPE_2,
                false);
        assertEquals(1, mDevicePolicyManager.getAccountTypesWithManagementDisabled().length);
        assertEquals(ACCOUNT_TYPE_1,
                mDevicePolicyManager.getAccountTypesWithManagementDisabled()[0]);

        mDevicePolicyManager.setAccountManagementDisabled(ADMIN_RECEIVER_COMPONENT, ACCOUNT_TYPE_1,
                false);
        assertEquals(0, mDevicePolicyManager.getAccountTypesWithManagementDisabled().length);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AllowedAccountManagementTest"	"testAccountManagementDisabled_profileAndDeviceOwnerCanAddAccount"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java]:[admin]:[1]:method_text:[        assertEquals(ACCOUNT_TYPE_1, result.getString(AccountManager.KEY_ACCOUNT_TYPE));    }   ]) :|: public void testAccountManagementDisabled_profileAndDeviceOwnerCanAddAccount()
            throws AuthenticatorException, IOException, OperationCanceledException {
        mDevicePolicyManager.setAccountManagementDisabled(ADMIN_RECEIVER_COMPONENT, ACCOUNT_TYPE_1,
                true);

        assertEquals(0, mAccountManager.getAccountsByType(ACCOUNT_TYPE_1).length);
        // Management is disabled, but the device / profile owner is still allowed to use the APIs
        Bundle result = mAccountManager.addAccount(ACCOUNT_TYPE_1,
                null, null, null, null, null, null).getResult();

        // Normally the expected result of addAccount() is AccountManager returning
        // an intent to start the authenticator activity for adding new accounts.
        // But MockAccountAuthenticator returns a new account straightway.
        assertEquals(ACCOUNT_TYPE_1, result.getString(AccountManager.KEY_ACCOUNT_TYPE));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AllowedAccountManagementTest"	"testRemoveAccount_noUserRestriction"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java]:[admin]:[1]:method_text:[       assertEquals(0, mDevicePolicyManager.getAccountTypesWithManagementDisabled().length);    }}]) :|: public void testRemoveAccount_noUserRestriction()
            throws AuthenticatorException, IOException, OperationCanceledException {
        // We only want to verify removeAccount can through to AccountManagerService without
        // throwing an Exception, so it's not necessary to add the account before removal.
        Bundle result = mAccountManager.removeAccount(ACCOUNT, null, null, null).getResult();
        assertTrue(result.getBoolean(AccountManager.KEY_BOOLEAN_RESULT));
    }

    private void clearAllAccountManagementDisabled() {
        for (String accountType : mDevicePolicyManager.getAccountTypesWithManagementDisabled()) {
            mDevicePolicyManager.setAccountManagementDisabled(ADMIN_RECEIVER_COMPONENT, accountType,
                    false);
        }
        assertEquals(0, mDevicePolicyManager.getAccountTypesWithManagementDisabled().length);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnUnsupportedTest"	"testAssertNoAlwaysOnVpn"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java]:[admin]:[1]:method_text:["",                mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));    }   ]) :|: public void testAssertNoAlwaysOnVpn() throws Exception {
        assertNull(""Always-on VPN already exists"",
                mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnUnsupportedTest"	"testClearAlwaysOnVpn"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java]:[admin]:[2]:method_text:["",                mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));    }   ]) :|: public void testClearAlwaysOnVpn() throws Exception {
        mDevicePolicyManager.setAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT, null, false);
        assertNull(""Failed to clear always-on package"",
                mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnUnsupportedTest"	"testSetSupportedVpnAlwaysOn"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java]:[admin]:[2]:method_text:[      VPN_PACKAGE, mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));    }   ]) :|: public void testSetSupportedVpnAlwaysOn() throws Exception {
        testAssertNoAlwaysOnVpn();
        mDevicePolicyManager.setAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT, VPN_PACKAGE, true);
        assertEquals(""Failed to set always-on package"",
                VPN_PACKAGE, mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnUnsupportedTest"	"testSetUnsupportedVpnAlwaysOn"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java]:[admin]:[2]:method_text:[ }        assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));    }}]) :|: public void testSetUnsupportedVpnAlwaysOn() throws Exception {
        testAssertNoAlwaysOnVpn();
        try {
            mDevicePolicyManager.setAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT, VPN_PACKAGE, true);
            fail(""setAlwaysOnVpnPackage should not accept an unsupported vpn package"");
        } catch (UnsupportedOperationException e) {
            // success
        }
        assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ContentCaptureRestrictionsTest"	"disableService"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/ContentCaptureRestrictionsTest.java]:[admin]:[2]:method_text:[ervice() {        runShellCommand(""cmd content_capture set temporary-service %d"", mUserId);    }}]) :|: API to get max duration constant from ContentCaptureManager
    private static final int MAX_TIME_TEMPORARY_SERVICE_CAN_BE_SET= 120000;

    private static final int SLEEP_TIME_WAITING_FOR_SERVICE_CONNECTION_MS = 100;

    private static final String SERVICE_NAME =
            ""com.android.cts.devicepolicy.contentcaptureservice/.SimpleContentCaptureService"";

    int mUserId;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        mUserId = getInstrumentation().getContext().getUserId();
    }

    @Override
    protected void tearDown() throws Exception {
        try {
            disableService();
        } finally {
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    DISALLOW_CONTENT_CAPTURE);
        }
        super.tearDown();
    }

    public void testDisallowContentCapture_allowed() throws Exception {
        enableService();

        final Intent launchIntent = new Intent();
        launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        launchIntent.setClassName(CONTENT_CAPTURE_PACKAGE_NAME, CONTENT_CAPTURE_ACTIVITY_NAME);
        final ContentCaptureActivity activity = launchActivity(
                ""com.android.cts.deviceandprofileowner"", ContentCaptureActivity.class, null);

        activity.waitContentCaptureEnabled(true);

        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, DISALLOW_CONTENT_CAPTURE);

        activity.waitContentCaptureEnabled(false);
    }

    private void enableService() throws Exception {
        runShellCommand(""settings put secure --user %d %s %d default"",
                mUserId, USER_SETUP_COMPLETE, 1);

        runShellCommand(""cmd content_capture set temporary-service %d %s %d"", mUserId,
                SERVICE_NAME, MAX_TIME_TEMPORARY_SERVICE_CAN_BE_SET);
        // TODO: ideally it should wait until the service's onConnected() is called, but that
        // would be too complicated
        Thread.sleep(SLEEP_TIM"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ContentCaptureRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PasswordRequirementsTest"	"testPasswordConstraintsDoesntThrowAndPreservesValuesPreR"	""	"1: admin"	"([16:/com/android/cts/deviceandprofileowner/PasswordRequirementsTest.java]:[admin]:[16]:method_text:[               mDevicePolicyManager.getPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT));    }   ]) :|: public void testPasswordConstraintsDoesntThrowAndPreservesValuesPreR() {
        // Pre-R password restrictions can be set in any order.
        mDevicePolicyManager.setPasswordQuality(
                ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_SOMETHING);
        // These shouldn't throw.
        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);
        mDevicePolicyManager.setPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);
        mDevicePolicyManager.setPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);
        mDevicePolicyManager.setPasswordMinimumUpperCase(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);
        mDevicePolicyManager.setPasswordMinimumLowerCase(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);
        mDevicePolicyManager.setPasswordMinimumNonLetter(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);
        mDevicePolicyManager.setPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);

        // Make sure these values are preserved and not reset when quality is set low.
        mDevicePolicyManager.setPasswordQuality(
                ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_UNSPECIFIED);
        assertEquals(TEST_VALUE,
                mDevicePolicyManager.getPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT));
        assertEquals(TEST_VALUE,
                mDevicePolicyManager.getPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT));
        assertEquals(TEST_VALUE,
                mDevicePolicyManager.getPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT));
        assertEquals(TEST_VALUE,
                mDevicePolicyManager.getPasswordMinimumUpperCase(ADMIN_RECEIVER_COMPONENT));
        assertEquals(TEST_VALUE,
                mDevicePolicyManager.getPasswordMinimumLowerCase(ADMIN_RECEIVER_COMPONENT));
        assertEquals(TEST_VALUE,
                mDevicePolicyManager.getPasswordMinimumNonLetter(ADMIN_RECEIVER_COMPONENT));
        assertEquals(TEST_VALUE,
                mDevicePolicyManager.getPasswordMinimu"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PasswordRequirementsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PasswordRequirementsTest"	"testSettingConstraintsWithLowQualityThrowsOnRPlus"	""	"1: admin"	"([8:/com/android/cts/deviceandprofileowner/PasswordRequirementsTest.java]:[admin]:[8]:method_text:[anager                .setPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));    }   ]) :|: public void testSettingConstraintsWithLowQualityThrowsOnRPlus() {
        // On R and above quality should be set first.
        mDevicePolicyManager.setPasswordQuality(
                ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_SOMETHING);

        assertThrows(IllegalStateException.class, () -> mDevicePolicyManager
                .setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));
        assertThrows(IllegalStateException.class, () -> mDevicePolicyManager
                .setPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));
        assertThrows(IllegalStateException.class, () -> mDevicePolicyManager
                .setPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));
        assertThrows(IllegalStateException.class, () -> mDevicePolicyManager
                .setPasswordMinimumUpperCase(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));
        assertThrows(IllegalStateException.class, () -> mDevicePolicyManager
                .setPasswordMinimumLowerCase(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));
        assertThrows(IllegalStateException.class, () -> mDevicePolicyManager
                .setPasswordMinimumNonLetter(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));
        assertThrows(IllegalStateException.class, () -> mDevicePolicyManager
                .setPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PasswordRequirementsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PasswordRequirementsTest"	"testSettingConstraintsWithNumericQualityOnlyLengthAllowedOnRPlus"	""	"1: admin"	"([8:/com/android/cts/deviceandprofileowner/PasswordRequirementsTest.java]:[admin]:[8]:method_text:[anager                .setPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));    }   ]) :|: public void testSettingConstraintsWithNumericQualityOnlyLengthAllowedOnRPlus() {
        // On R and above quality should be set first.
        mDevicePolicyManager.setPasswordQuality(
                ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_NUMERIC);

        // This should be allowed now.
        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);

        // These are still not allowed.
        assertThrows(IllegalStateException.class, () -> mDevicePolicyManager
                .setPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));
        assertThrows(IllegalStateException.class, () -> mDevicePolicyManager
                .setPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));
        assertThrows(IllegalStateException.class, () -> mDevicePolicyManager
                .setPasswordMinimumUpperCase(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));
        assertThrows(IllegalStateException.class, () -> mDevicePolicyManager
                .setPasswordMinimumLowerCase(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));
        assertThrows(IllegalStateException.class, () -> mDevicePolicyManager
                .setPasswordMinimumNonLetter(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));
        assertThrows(IllegalStateException.class, () -> mDevicePolicyManager
                .setPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, TEST_VALUE));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PasswordRequirementsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PasswordRequirementsTest"	"testSettingConstraintsWithComplexQualityAndResetWithLowerQuality"	""	"1: admin"	"([18:/com/android/cts/deviceandprofileowner/PasswordRequirementsTest.java]:[admin]:[18]:method_text:[,                mDevicePolicyManager.getPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT));    }}]) :|: public void testSettingConstraintsWithComplexQualityAndResetWithLowerQuality() {
        // On R and above when quality is lowered, irrelevant requirements are getting reset.
        mDevicePolicyManager.setPasswordQuality(
                ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_COMPLEX);
        // These shouldn't throw anymore
        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);
        mDevicePolicyManager.setPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);
        mDevicePolicyManager.setPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);
        mDevicePolicyManager.setPasswordMinimumUpperCase(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);
        mDevicePolicyManager.setPasswordMinimumLowerCase(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);
        mDevicePolicyManager.setPasswordMinimumNonLetter(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);
        mDevicePolicyManager.setPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, TEST_VALUE);

        // Downgrade to NUMERIC, only length makes sense after that.
        mDevicePolicyManager.setPasswordQuality(
                ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_NUMERIC);

        // Length shouldn't be reset
        assertEquals(TEST_VALUE,
                mDevicePolicyManager.getPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT));

        // But other requirements should.
        assertEquals(DEFAULT_NUMERIC,
                mDevicePolicyManager.getPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT));
        assertEquals(DEFAULT_LETTERS,
                mDevicePolicyManager.getPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT));
        assertEquals(DEFAULT_UPPERCASE,
                mDevicePolicyManager.getPasswordMinimumUpperCase(ADMIN_RECEIVER_COMPONENT));
        assertEquals(DEFAULT_LOWERCASE,
                mDevicePolicyManager.getPasswordMinimumLowerCase(ADMIN_RECEIVER_COMPONENT));
        assertEquals(DEFAULT_NON_LETTER,
                mDevicePolicyManager.getPasswo"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PasswordRequirementsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AffiliationTest"	"testSetLockTaskPackagesClearedIfUserBecomesUnaffiliated"	""	"1: admin"	"([9:/com/android/cts/deviceandprofileowner/AffiliationTest.java]:[admin]:[9]:method_text:[throw expected SecurityException"");        } catch (SecurityException expected) {        }    }}]) :|: 
    public void testSetLockTaskPackagesClearedIfUserBecomesUnaffiliated() {
        final String[] packages = {""package1"", ""package2""};
        mDevicePolicyManager.setLockTaskPackages(ADMIN_RECEIVER_COMPONENT, packages);
        assertArrayEquals(packages,
                mDevicePolicyManager.getLockTaskPackages(ADMIN_RECEIVER_COMPONENT));
        assertTrue(mDevicePolicyManager.isLockTaskPermitted(""package1""));
        assertFalse(mDevicePolicyManager.isLockTaskPermitted(""package3""));

        final Set<String> previousAffiliationIds =
                mDevicePolicyManager.getAffiliationIds(ADMIN_RECEIVER_COMPONENT);
        try {
            // Clearing affiliation ids for this user. Lock task methods unavailable.
            setAffiliationIds(Collections.emptySet());
            checkLockTaskMethodsThrow();
            assertFalse(mDevicePolicyManager.isLockTaskPermitted(""package1""));

            // Affiliating the user again. Previously set packages have been cleared.
            setAffiliationIds(previousAffiliationIds);
            assertEquals(0,
                    mDevicePolicyManager.getLockTaskPackages(ADMIN_RECEIVER_COMPONENT).length);
            assertFalse(mDevicePolicyManager.isLockTaskPermitted(""package1""));
        } finally {
            mDevicePolicyManager.setAffiliationIds(ADMIN_RECEIVER_COMPONENT,
                    previousAffiliationIds);
        }
    }

    private void setAffiliationIds(Set<String> ids) {
        mDevicePolicyManager.setAffiliationIds(ADMIN_RECEIVER_COMPONENT, ids);
        assertEquals(ids, mDevicePolicyManager.getAffiliationIds(ADMIN_RECEIVER_COMPONENT));
    }

    private void checkLockTaskMethodsThrow() {
        try {
            mDevicePolicyManager.setLockTaskPackages(ADMIN_RECEIVER_COMPONENT, new String[0]);
            fail(""setLockTaskPackages did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }
        try {
            mDevicePolicyManager.getLockTaskPackages"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AffiliationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SecondaryLockscreenTest"	"testSetSecondaryLockscreenEnabled"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/SecondaryLockscreenTest.java]:[admin]:[1]:method_text:[SecondaryLockscreenEnabled(Process.myUserHandle()));        verifyHomeLauncherIsShown();    }   ]) :|: 
    @Ignore(""b/184280023"")
    public void testSetSecondaryLockscreenEnabled() throws Exception {
        enterKeyguardPin();
        assertTrue(""Lockscreen title not shown"",
                mUiDevice.wait(Until.hasObject(By.text(SimpleKeyguardService.TITLE_LABEL)),
                        UI_AUTOMATOR_WAIT_TIME_MILLIS));

        mDevicePolicyManager.setSecondaryLockscreenEnabled(ADMIN_RECEIVER_COMPONENT, false);

        // Verify that the lockscreen is dismissed after disabling the feature
        assertFalse(mDevicePolicyManager.isSecondaryLockscreenEnabled(Process.myUserHandle()));
        verifyHomeLauncherIsShown();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecondaryLockscreenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SecondaryLockscreenTest"	"testSetSecondaryLockscreen_ineligibleAdmin_throwsSecurityException"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/SecondaryLockscreenTest.java]:[admin]:[3]:method_text:[        return resolveInfos.isEmpty() ? null : resolveInfos.get(0).activityInfo.packageName;    }}]) :|: (expected = SecurityException.class)
    public void testSetSecondaryLockscreen_ineligibleAdmin_throwsSecurityException() {
        final ComponentName badAdmin = new ComponentName(""com.foo.bar"", "".NonProfileOwnerReceiver"");
        mDevicePolicyManager.setSecondaryLockscreenEnabled(badAdmin, true);
    }

    private void enterKeyguardPin() throws Exception {
        mUiDevice.executeShellCommand(""input keyevent KEYCODE_SLEEP"");
        mUiDevice.executeShellCommand(""input keyevent KEYCODE_WAKEUP"");
        assertTrue(""Keyguard unexpectedly not shown"",
                mUiDevice.wait(Until.hasObject(
                        By.res(""com.android.systemui"", ""keyguard_status_view"")),
                                UI_AUTOMATOR_WAIT_TIME_MILLIS));
        mUiDevice.executeShellCommand(""wm dismiss-keyguard"");
        assertTrue(""Keyguard pin entry unexpectedly not shown"",
                mUiDevice.wait(Until.hasObject(By.res(""com.android.systemui"", ""pinEntry"")),
                        UI_AUTOMATOR_WAIT_TIME_MILLIS));
        mUiDevice.executeShellCommand(""input text 1234"");
        mUiDevice.executeShellCommand(""input keyevent KEYCODE_ENTER"");
    }

    private void verifyHomeLauncherIsShown() {
        String launcherPackageName = getLauncherPackageName();
        assertTrue(""Lockscreen title is unexpectedly shown"",
                mUiDevice.wait(Until.gone(By.text(SimpleKeyguardService.TITLE_LABEL)),
                        UI_AUTOMATOR_WAIT_TIME_MILLIS));
        assertTrue(String.format(""Launcher (%s) is not shown"", launcherPackageName),
                mUiDevice.wait(Until.hasObject(By.pkg(launcherPackageName)),
                        UI_AUTOMATOR_WAIT_TIME_MILLIS));
    }

    private void verifySecondaryLockscreenIsShown() {
        String launcherPackageName = getLauncherPackageName();
        assertTrue(""Lockscreen title is unexpectedly not shown"",
                mUiDevice.wait(Until.hasObject(By.text(SimpleKeyguardService.TITLE_LABEL)),"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecondaryLockscreenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.InputMethodsTest"	"testPermittedInputMethods"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/InputMethodsTest.java]:[admin]:[6]:method_text:[tMethods(ADMIN_RECEIVER_COMPONENT))                .containsExactlyElementsIn(packages);    }   ]) :|: public void testPermittedInputMethods() {
        // All input methods are allowed.
        mDevicePolicyManager.setPermittedInputMethods(ADMIN_RECEIVER_COMPONENT, null);
        assertThat(
                mDevicePolicyManager.getPermittedInputMethods(ADMIN_RECEIVER_COMPONENT)).isNull();

        // Only system input methods are allowed.
        mDevicePolicyManager.setPermittedInputMethods(ADMIN_RECEIVER_COMPONENT, new ArrayList<>());
        assertThat(
                mDevicePolicyManager.getPermittedInputMethods(ADMIN_RECEIVER_COMPONENT)).isEmpty();

        // Some random methods.
        final List<String> packages = Arrays.asList(""com.google.pkg.one"", ""com.google.pkg.two"");
        mDevicePolicyManager.setPermittedInputMethods(ADMIN_RECEIVER_COMPONENT, packages);
        assertThat(
                mDevicePolicyManager.getPermittedInputMethods(ADMIN_RECEIVER_COMPONENT))
                .containsExactlyElementsIn(packages);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/InputMethodsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.InputMethodsTest"	"testPermittedInputMethodsOnParent"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/InputMethodsTest.java]:[admin]:[5]:method_text:[cyManager.getPermittedInputMethods(                ADMIN_RECEIVER_COMPONENT)).isEmpty();    }   ]) :|: public void testPermittedInputMethodsOnParent() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        // All input methods are allowed.
        parentDevicePolicyManager.setPermittedInputMethods(ADMIN_RECEIVER_COMPONENT, null);
        assertThat(parentDevicePolicyManager.getPermittedInputMethods(
                ADMIN_RECEIVER_COMPONENT)).isNull();

        // Only system input methods are allowed.
        parentDevicePolicyManager.setPermittedInputMethods(ADMIN_RECEIVER_COMPONENT,
                new ArrayList<>());
        assertThat(parentDevicePolicyManager.getPermittedInputMethods(
                ADMIN_RECEIVER_COMPONENT)).isEmpty();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/InputMethodsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.InputMethodsTest"	"testPermittedInputMethodsOnParentThrowsIfPackageListIsNotEmptyOrNull"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/InputMethodsTest.java]:[admin]:[2]:method_text:[r                        .setPermittedInputMethods(ADMIN_RECEIVER_COMPONENT, packages));    }   ]) :|: public void testPermittedInputMethodsOnParentThrowsIfPackageListIsNotEmptyOrNull() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        final List<String> packages = Arrays.asList(""com.google.pkg.one"", ""com.google.pkg.two"");

        assertThrows(IllegalArgumentException.class,
                () -> parentDevicePolicyManager
                        .setPermittedInputMethods(ADMIN_RECEIVER_COMPONENT, packages));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/InputMethodsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.InputMethodsTest"	"testPermittedInputMethodsThrowsIfWrongAdmin"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/InputMethodsTest.java]:[admin]:[5]:method_text:[ throw when passed invalid admin"");        } catch (SecurityException expected) {        }    }}]) :|: public void testPermittedInputMethodsThrowsIfWrongAdmin() {
        try {
            mDevicePolicyManager.setPermittedInputMethods(badAdmin, null);
            fail(""setPermittedInputMethods didn't throw when passed invalid admin"");
        } catch (SecurityException expected) {
        }
        try {
            mDevicePolicyManager.getPermittedInputMethods(badAdmin);
            fail(""getPermittedInputMethods didn't throw when passed invalid admin"");
        } catch (SecurityException expected) {
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/InputMethodsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AccessibilityServicesTest"	"testPermittedAccessibilityServices"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/AccessibilityServicesTest.java]:[admin]:[6]:method_text:[Services(ADMIN_RECEIVER_COMPONENT))                .containsExactlyElementsIn(packages);    }   ]) :|: public void testPermittedAccessibilityServices() {
        // All accessibility services are allowed.
        mDevicePolicyManager.setPermittedAccessibilityServices(ADMIN_RECEIVER_COMPONENT, null);
        assertThat(mDevicePolicyManager.
                getPermittedAccessibilityServices(ADMIN_RECEIVER_COMPONENT))
                .isNull();

        // Only system accessibility services are allowed.
        mDevicePolicyManager.setPermittedAccessibilityServices(ADMIN_RECEIVER_COMPONENT,
                new ArrayList<>());
        assertThat(mDevicePolicyManager.
                getPermittedAccessibilityServices(ADMIN_RECEIVER_COMPONENT))
                .isEmpty();

        // Some random services.
        final List<String> packages = Arrays.asList(""com.google.pkg.one"", ""com.google.pkg.two"");
        mDevicePolicyManager.setPermittedAccessibilityServices(ADMIN_RECEIVER_COMPONENT, packages);
        assertThat(mDevicePolicyManager.
                getPermittedAccessibilityServices(ADMIN_RECEIVER_COMPONENT))
                .containsExactlyElementsIn(packages);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AccessibilityServicesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AccessibilityServicesTest"	"testPermittedAccessibilityServicesThrowsIfWrongAdmin"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/AccessibilityServicesTest.java]:[admin]:[5]:method_text:[ throw when passed invalid admin"");        } catch (SecurityException expected) {        }    }}]) :|: public void testPermittedAccessibilityServicesThrowsIfWrongAdmin() {
        try {
            mDevicePolicyManager.setPermittedAccessibilityServices(badAdmin, null);
            fail(""setPermittedAccessibilityServices didn't throw when passed invalid admin"");
        } catch (SecurityException expected) {
        }
        try {
            mDevicePolicyManager.getPermittedAccessibilityServices(badAdmin);
            fail(""getPermittedAccessibilityServices didn't throw when passed invalid admin"");
        } catch (SecurityException expected) {
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AccessibilityServicesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testSetPermissionGrantStateLogged"	""	"2: granted admin"	"([3:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[admin]:[3]:method_text:[_COMPONENT, PACKAGE_NAME,                READ_CONTACTS, PERMISSION_GRANT_STATE_DEFAULT);    }   ]) :|: public void testSetPermissionGrantStateLogged() throws InterruptedException {
        mDevicePolicyManager.setPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PACKAGE_NAME, READ_CONTACTS, PERMISSION_GRANT_STATE_GRANTED);
        mDevicePolicyManager.setPermissionGrantState(ADMIN_RECEIVER_COMPONENT, PACKAGE_NAME,
                READ_CONTACTS, PERMISSION_GRANT_STATE_DENIED);
        mDevicePolicyManager.setPermissionGrantState(ADMIN_RECEIVER_COMPONENT, PACKAGE_NAME,
                READ_CONTACTS, PERMISSION_GRANT_STATE_DEFAULT);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testSetUserRestrictionLogged"	""	"2: UserManager.DISALLOW admin"	"([10:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[admin]:[10]:method_text:[tion(ADMIN_RECEIVER_COMPONENT,                UserManager.DISALLOW_CONTENT_SUGGESTIONS);    }   ]) :|: public void testSetUserRestrictionLogged() {
        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONFIG_LOCATION);
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONFIG_LOCATION);

        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_ADJUST_VOLUME);
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_ADJUST_VOLUME);

        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_AUTOFILL);
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_AUTOFILL);

        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONTENT_CAPTURE);
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONTENT_CAPTURE);

        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONTENT_SUGGESTIONS);
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONTENT_SUGGESTIONS);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testPasswordMethodsLogged"	""	"1: admin"	"([9:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[admin]:[9]:method_text:[D);        mDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_HIGH);    }   ]) :|: public void testPasswordMethodsLogged() {
        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.PASSWORD_QUALITY_COMPLEX);
        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 13);
        mDevicePolicyManager.setPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT, 14);
        mDevicePolicyManager.setPasswordMinimumNonLetter(ADMIN_RECEIVER_COMPONENT, 15);
        mDevicePolicyManager.setPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT, 16);
        mDevicePolicyManager.setPasswordMinimumLowerCase(ADMIN_RECEIVER_COMPONENT, 17);
        mDevicePolicyManager.setPasswordMinimumUpperCase(ADMIN_RECEIVER_COMPONENT, 18);
        mDevicePolicyManager.setPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, 19);
        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                PASSWORD_QUALITY_UNSPECIFIED);
        mDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_HIGH);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testSetKeyguardDisabledFeaturesLogged"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[admin]:[4]:method_text:[sabledFeatures(ADMIN_RECEIVER_COMPONENT,                KEYGUARD_DISABLE_FEATURES_NONE);    }   ]) :|: public void testSetKeyguardDisabledFeaturesLogged() {
        mDevicePolicyManager.setKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT, KEYGUARD_DISABLE_FEATURES_NONE);
        mDevicePolicyManager.setKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT, KEYGUARD_DISABLE_FINGERPRINT);
        mDevicePolicyManager.setKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT, KEYGUARD_DISABLE_TRUST_AGENTS);
        mDevicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                KEYGUARD_DISABLE_FEATURES_NONE);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testSetKeyguardDisabledSecureCameraLogged"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[admin]:[1]:method_text:[abledFeatures(                ADMIN_RECEIVER_COMPONENT, KEYGUARD_DISABLE_SECURE_CAMERA);    }   ]) :|: public void testSetKeyguardDisabledSecureCameraLogged() {
        mDevicePolicyManager.setKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT, KEYGUARD_DISABLE_SECURE_CAMERA);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testSetSecureSettingLogged"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[admin]:[6]:method_text:[MIN_RECEIVER_COMPONENT,                DEFAULT_INPUT_METHOD, defaultInputMethodInitial);    }   ]) :|: public void testSetSecureSettingLogged()
            throws InterruptedException {
        final ContentResolver contentResolver = mContext.getContentResolver();
        final int skipFirstUseHintsInitial =
                Settings.Secure.getInt(contentResolver, SKIP_FIRST_USE_HINTS, 0);
        mDevicePolicyManager.setSecureSetting(ADMIN_RECEIVER_COMPONENT,
                SKIP_FIRST_USE_HINTS, ""1"");
        mDevicePolicyManager.setSecureSetting(ADMIN_RECEIVER_COMPONENT,
                SKIP_FIRST_USE_HINTS, ""0"");
        mDevicePolicyManager.setSecureSetting(ADMIN_RECEIVER_COMPONENT,
                SKIP_FIRST_USE_HINTS, String.valueOf(skipFirstUseHintsInitial));

        final String defaultInputMethodInitial =
                Settings.Secure.getString(contentResolver, DEFAULT_INPUT_METHOD);
        mDevicePolicyManager.setSecureSetting(ADMIN_RECEIVER_COMPONENT,
                DEFAULT_INPUT_METHOD, ""com.example.input"");
        mDevicePolicyManager.setSecureSetting(ADMIN_RECEIVER_COMPONENT,
                DEFAULT_INPUT_METHOD, null);
        mDevicePolicyManager.setSecureSetting(ADMIN_RECEIVER_COMPONENT,
                DEFAULT_INPUT_METHOD, defaultInputMethodInitial);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testSetPermissionPolicyLogged"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[admin]:[3]:method_text:[.setPermissionPolicy(ADMIN_RECEIVER_COMPONENT,                PERMISSION_POLICY_PROMPT);    }   ]) :|: public void testSetPermissionPolicyLogged() {
        mDevicePolicyManager.setPermissionPolicy(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_POLICY_AUTO_DENY);
        mDevicePolicyManager.setPermissionPolicy(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_POLICY_AUTO_GRANT);
        mDevicePolicyManager.setPermissionPolicy(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_POLICY_PROMPT);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testSetAutoTimeRequired"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[admin]:[3]:method_text:[        mDevicePolicyManager.setAutoTimeRequired(ADMIN_RECEIVER_COMPONENT, initialValue);    }   ]) :|: public void testSetAutoTimeRequired() {
        final boolean initialValue = mDevicePolicyManager.getAutoTimeRequired();
        mDevicePolicyManager.setAutoTimeRequired(ADMIN_RECEIVER_COMPONENT, true);
        mDevicePolicyManager.setAutoTimeRequired(ADMIN_RECEIVER_COMPONENT, false);
        mDevicePolicyManager.setAutoTimeRequired(ADMIN_RECEIVER_COMPONENT, initialValue);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testSetAutoTimeEnabled"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[admin]:[4]:method_text:[        mDevicePolicyManager.setAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT, initialValue);    }   ]) :|: public void testSetAutoTimeEnabled() {
        final boolean initialValue = mDevicePolicyManager.getAutoTimeEnabled(
                ADMIN_RECEIVER_COMPONENT);
        mDevicePolicyManager.setAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT, true);
        mDevicePolicyManager.setAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT, false);
        mDevicePolicyManager.setAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT, initialValue);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testEnableSystemAppLogged"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[admin]:[1]:method_text:[   mDevicePolicyManager.enableSystemApp(ADMIN_RECEIVER_COMPONENT, systemPackageToEnable);    }   ]) :|: public void testEnableSystemAppLogged() {
        final String systemPackageToEnable =
                InstrumentationRegistry.getArguments().getString(PARAM_APP_TO_ENABLE);
        mDevicePolicyManager.enableSystemApp(ADMIN_RECEIVER_COMPONENT, systemPackageToEnable);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testEnableSystemAppWithIntentLogged"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[admin]:[1]:method_text:[oEnable);        mDevicePolicyManager.enableSystemApp(ADMIN_RECEIVER_COMPONENT, intent);    }   ]) :|: public void testEnableSystemAppWithIntentLogged() {
        final String systemPackageToEnable =
                InstrumentationRegistry.getArguments().getString(PARAM_APP_TO_ENABLE);
        final Intent intent =
                mContext.getPackageManager().getLaunchIntentForPackage(systemPackageToEnable);
        mDevicePolicyManager.enableSystemApp(ADMIN_RECEIVER_COMPONENT, intent);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testSetUninstallBlockedLogged"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[admin]:[2]:method_text:[ mDevicePolicyManager.setUninstallBlocked(ADMIN_RECEIVER_COMPONENT, PACKAGE_NAME, false);    }   ]) :|: public void testSetUninstallBlockedLogged() {
        mDevicePolicyManager.setUninstallBlocked(ADMIN_RECEIVER_COMPONENT, PACKAGE_NAME, true);
        mDevicePolicyManager.setUninstallBlocked(ADMIN_RECEIVER_COMPONENT, PACKAGE_NAME, false);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testDisallowAdjustVolumeMutedLogged"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[admin]:[4]:method_text:[       mDevicePolicyManager.setMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT, initialValue);    }   ]) :|: public void testDisallowAdjustVolumeMutedLogged() {
        final boolean initialValue =
                mDevicePolicyManager.isMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT);
        mDevicePolicyManager.setMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT, false);
        mDevicePolicyManager.setMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT, true);
        mDevicePolicyManager.setMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT, initialValue);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testSetPersonalAppsSuspendedLogged"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[admin]:[2]:method_text:[ue);        mDevicePolicyManager.setPersonalAppsSuspended(ADMIN_RECEIVER_COMPONENT, false);    }}]) :|: public void testSetPersonalAppsSuspendedLogged() {
        mDevicePolicyManager.setPersonalAppsSuspended(ADMIN_RECEIVER_COMPONENT, true);
        mDevicePolicyManager.setPersonalAppsSuspended(ADMIN_RECEIVER_COMPONENT, false);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SupportMessageTest"	"testMaximumLengthPrefixIsSaved"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/SupportMessageTest.java]:[admin]:[2]:method_text:[R_COMPONENT, LongMessage.LONG);        assertEquals(LongMessage.LONG, getLongMessage());    }   ]) :|: public void testMaximumLengthPrefixIsSaved() {
        // Save and restore a string of exactly the maximum length
        setShortMessage(ShortMessage.MAX_LENGTH);

        /*
         * Save and restore a ""short message"" string that is too large -- this may only store the
         * first N characters, not the whole thing, so we need to use {@link String#startsWith}
         * here.
         */
        mDevicePolicyManager.setShortSupportMessage(ADMIN_RECEIVER_COMPONENT,
                ShortMessage.TOO_LONG);
        assertStartsWith(ShortMessage.TOO_LONG.subSequence(0, MAX_SHORT_MSG_LENGTH),
                getShortMessage());

        // Long support messages should not be affected; verify that.
        mDevicePolicyManager.setLongSupportMessage(ADMIN_RECEIVER_COMPONENT, LongMessage.LONG);
        assertEquals(LongMessage.LONG, getLongMessage());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SupportMessageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SupportMessageTest"	"testSetOrGetSupportMessageWithNullAdminFails"	""	"1: admin"	"([10:/com/android/cts/deviceandprofileowner/SupportMessageTest.java]:[admin]:[10]:method_text:['"" + expectPrefix + ""'\n"" +                 ""            got: '"" + actual + ""'"");        }    }}]) :|: public void testSetOrGetSupportMessageWithNullAdminFails() {
        // Short support message
        try {
            mDevicePolicyManager.setShortSupportMessage(null, ShortMessage.SIMPLE);
            fail(""Exception should have been thrown for null admin ComponentName"");
        } catch (NullPointerException expected) {
        }
        try {
            CharSequence message = mDevicePolicyManager.getShortSupportMessage(null);
            fail(""Exception should have been thrown for null admin ComponentName"");
        } catch (NullPointerException expected) {
        }

        // Long support message
        try {
            mDevicePolicyManager.setLongSupportMessage(null, LongMessage.SIMPLE);
            fail(""Exception should have been thrown for null admin ComponentName"");
        } catch (NullPointerException expected) {
        }

        try {
            CharSequence message = mDevicePolicyManager.getLongSupportMessage(null);
            fail(""Exception should have been thrown for null admin ComponentName"");
        } catch (NullPointerException expected) {
        }
    }

    /**
     * Delete all admin-set support messsages.
     */
    private void clearSupportMessages() {
        setShortMessage(null);
        setLongMessage(null);
    }

    /**
     * Update the short support message.
     *
     * @throws AssertionError in the case that the message could not be set.
     */
    private void setShortMessage(CharSequence message) {
        mDevicePolicyManager.setShortSupportMessage(ADMIN_RECEIVER_COMPONENT, message);
        assertEquals(message, getShortMessage());
    }

    /**
     * Update the long support message.
     *
     * @throws AssertionError in the case that the message could not be set.
     */
    private void setLongMessage(CharSequence message) {
        mDevicePolicyManager.setLongSupportMessage(ADMIN_RECEIVER_COMPONENT, message);
        assertEquals(message, getLongMessage());
    }

    private CharSequence getShortMessage("	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SupportMessageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"PermissionBroadcastReceiver"	""	"6: granted ACCESS_BACKGROUND_LOCATION BODY_SENSORS ACTIVITY_RECOGNITION admin ACCESS_COARSE_LOCATION"	"([2:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[ACCESS_COARSE_LOCATION]:[2]:method_text:[er(mReceiver);        mDevice.removeWatcher(CRASH_WATCHER_ID);        super.tearDown();    }   ]) :|: public void test/*
 *.
 */
package com.android.cts.deviceandprofileowner;

import static android.Manifest.permission.READ_CONTACTS;
import static android.Manifest.permission.WRITE_CONTACTS;
import static android.app.admin.DevicePolicyManager.PERMISSION_GRANT_STATE_DEFAULT;
import static android.app.admin.DevicePolicyManager.PERMISSION_GRANT_STATE_DENIED;
import static android.app.admin.DevicePolicyManager.PERMISSION_GRANT_STATE_GRANTED;
import static android.app.admin.DevicePolicyManager.PERMISSION_POLICY_AUTO_DENY;
import static android.app.admin.DevicePolicyManager.PERMISSION_POLICY_AUTO_GRANT;
import static android.app.admin.DevicePolicyManager.PERMISSION_POLICY_PROMPT;
import static android.content.pm.PackageManager.PERMISSION_DENIED;
import static android.content.pm.PackageManager.PERMISSION_GRANTED;

import android.Manifest.permission;
import android.app.UiAutomation;
import android.app.admin.DevicePolicyManager;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.support.test.uiautomator.By;
import android.support.test.uiautomator.BySelector;
import android.support.test.uiautomator.UiDevice;
import android.support.test.uiautomator.UiObject2;
import android.util.Log;

import com.android.cts.devicepolicy.PermissionBroadcastReceiver;
import com.android.cts.devicepolicy.PermissionUtils;

import com.google.android.collect.Sets;

import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

/**
 * Test Runtime Permissions APIs in DevicePolicyManager.
 */
public class PermissionsTest extends BaseDeviceAdminTest {

    private static final String TAG = ""PermissionsTest"";

    private static final String PERMISSION_APP_PACKAGE_NAME = ""com.android.cts.permissionapp"";
    private static final String PRE_M_APP_PACKAGE_NAME
            = ""com.android.cts.launcherapps.simplepremapp"";
    private static final String PERMISSIONS_ACTIVITY_NAME
            = PERMISSION_APP_PACKAGE_NAME + "".Per"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionGrantStateDenied_otherPermissionIsGranted"	""	"2: granted admin"	"([2:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[admin]:[2]:method_text:[tStateA);            setPermissionGrantState(CUSTOM_PERM_B_NAME, grantStateB);        }    }   ]) :|: public void testPermissionGrantStateDenied_otherPermissionIsGranted() throws Exception {
        int grantStateA = mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_APP_PACKAGE_NAME, CUSTOM_PERM_A_NAME);
        int grantStateB = mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_APP_PACKAGE_NAME, CUSTOM_PERM_B_NAME);
        try {
            setPermissionGrantState(CUSTOM_PERM_A_NAME, PERMISSION_GRANT_STATE_GRANTED);
            setPermissionGrantState(CUSTOM_PERM_B_NAME, PERMISSION_GRANT_STATE_DENIED);

            assertPermissionGrantState(CUSTOM_PERM_A_NAME, PERMISSION_GRANT_STATE_GRANTED);
            assertPermissionGrantState(CUSTOM_PERM_B_NAME, PERMISSION_GRANT_STATE_DENIED);

            /*
             * CUSTOM_PERM_A_NAME and CUSTOM_PERM_B_NAME are in the same permission group and one is
             * granted the other one is not.
             *
             * It should not be possible to get the permission that was denied via policy granted by
             * requesting it.
             */
            assertCannotRequestPermissionFromActivity(CUSTOM_PERM_B_NAME);
        } finally {
            // Restore original state
            setPermissionGrantState(CUSTOM_PERM_A_NAME, grantStateA);
            setPermissionGrantState(CUSTOM_PERM_B_NAME, grantStateB);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionGrantStateGranted"	""	"1: granted"	"([3:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[granted]:[3]:method_text:[SION_GRANT_STATE_GRANTED);        assertCanRequestPermissionFromActivity(READ_CONTACTS);    }   ]) :|: public void testPermissionGrantStateGranted() throws Exception {
        setPermissionGrantState(READ_CONTACTS, PERMISSION_GRANT_STATE_GRANTED);

        assertPermissionGrantState(READ_CONTACTS, PERMISSION_GRANT_STATE_GRANTED);
        assertCanRequestPermissionFromActivity(READ_CONTACTS);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionGrantStateGranted_permissionRemainsGranted"	""	"2: granted admin"	"([1:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[admin]:[1]:method_text:[ original state            setPermissionGrantState(READ_CONTACTS, grantState);        }    }   ]) :|: public void testPermissionGrantStateGranted_permissionRemainsGranted() throws Exception {
        int grantState = mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_APP_PACKAGE_NAME, READ_CONTACTS);
        try {
            setPermissionGrantState(READ_CONTACTS, PERMISSION_GRANT_STATE_GRANTED);

            assertHasPermissionFromActivity(READ_CONTACTS);

            // Should stay granted
            setPermissionGrantState(READ_CONTACTS, PERMISSION_GRANT_STATE_DEFAULT);

            assertHasPermissionFromActivity(READ_CONTACTS);
        } finally {
            // Restore original state
            setPermissionGrantState(READ_CONTACTS, grantState);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionGrantStateGranted_mixedPolicies"	""	"2: granted admin"	"([2:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[admin]:[2]:method_text:[(READ_CONTACTS, grantState);            setPermissionPolicy(permissionPolicy);        }    }   ]) :|: public void testPermissionGrantStateGranted_mixedPolicies() throws Exception {
        int grantState = mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_APP_PACKAGE_NAME, READ_CONTACTS);
        int permissionPolicy = mDevicePolicyManager.getPermissionPolicy(ADMIN_RECEIVER_COMPONENT);
        try {
            setPermissionGrantState(READ_CONTACTS, PERMISSION_GRANT_STATE_GRANTED);

            // Check permission by launching an activity and requesting the permission
            setPermissionPolicy(PERMISSION_POLICY_AUTO_GRANT);

            assertPermissionPolicy(PERMISSION_POLICY_AUTO_GRANT);
            assertCanRequestPermissionFromActivity(READ_CONTACTS);

            setPermissionPolicy(PERMISSION_POLICY_AUTO_DENY);

            assertPermissionPolicy(PERMISSION_POLICY_AUTO_DENY);
            assertCanRequestPermissionFromActivity(READ_CONTACTS);

            setPermissionPolicy(PERMISSION_POLICY_PROMPT);

            assertPermissionPolicy(PERMISSION_POLICY_PROMPT);
            assertCanRequestPermissionFromActivity(READ_CONTACTS);
        } finally {
            // Restore original state
            setPermissionGrantState(READ_CONTACTS, grantState);
            setPermissionPolicy(permissionPolicy);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionGrantStateGranted_userNotifiedOfLocationPermission"	""	"1: granted"	"([3:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[granted]:[3]:method_text:[nit.SECONDS));            NotificationListener.getInstance().clearListeners();        }    }   ]) :|: public void testPermissionGrantStateGranted_userNotifiedOfLocationPermission()
            throws Exception {
        for (String locationPermission : LOCATION_PERMISSIONS) {
            // TODO(b/161359841): move NotificationListener to app/common
            CountDownLatch notificationLatch = initPermissionNotificationLatch();

            setPermissionGrantState(locationPermission, PERMISSION_GRANT_STATE_GRANTED);

            assertPermissionGrantState(locationPermission, PERMISSION_GRANT_STATE_GRANTED);
            assertTrue(String.format(""Did not receive notification for permission %s"",
                    locationPermission), notificationLatch.await(60, TimeUnit.SECONDS));
            NotificationListener.getInstance().clearListeners();
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionGrantState_developmentPermission"	""	"1: granted"	"([1:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[granted]:[1]:method_text:[(DEVELOPMENT_PERMISSION, PERMISSION_DENIED,                PERMISSION_APP_PACKAGE_NAME);    }   ]) :|: public void testPermissionGrantState_developmentPermission() {
        assertCannotSetPermissionGrantStateDevelopmentPermission(PERMISSION_GRANT_STATE_DENIED);
        assertCannotSetPermissionGrantStateDevelopmentPermission(PERMISSION_GRANT_STATE_DEFAULT);
        assertCannotSetPermissionGrantStateDevelopmentPermission(PERMISSION_GRANT_STATE_GRANTED);
    }

    private void assertCannotSetPermissionGrantStateDevelopmentPermission(int value) {
        unableToSetPermissionGrantState(DEVELOPMENT_PERMISSION, value);

        assertPermissionGrantState(DEVELOPMENT_PERMISSION, PERMISSION_GRANT_STATE_DEFAULT);
        PermissionUtils.checkPermission(DEVELOPMENT_PERMISSION, PERMISSION_DENIED,
                PERMISSION_APP_PACKAGE_NAME);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionGrantState_preMApp_preQDeviceAdmin"	""	"2: granted admin"	"([3:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[admin]:[3]:method_text:[missionAndAppOps(permission, PERMISSION_GRANTED,                PRE_M_APP_PACKAGE_NAME);    }   ]) :|: public void testPermissionGrantState_preMApp_preQDeviceAdmin() throws Exception {
        // These tests are to make sure that pre-M apps are not granted/denied runtime permissions
        // by a profile owner that targets pre-Q
        assertCannotSetPermissionGrantStatePreMApp(READ_CONTACTS, PERMISSION_GRANT_STATE_DENIED);
        assertCannotSetPermissionGrantStatePreMApp(READ_CONTACTS, PERMISSION_GRANT_STATE_GRANTED);
    }

    private void assertCannotSetPermissionGrantStatePreMApp(String permission, int value)
            throws Exception {
        assertFalse(mDevicePolicyManager.setPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PRE_M_APP_PACKAGE_NAME, permission, value));
        assertEquals(mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PRE_M_APP_PACKAGE_NAME, permission), PERMISSION_GRANT_STATE_DEFAULT);

        // Install runtime permissions should always be granted
        PermissionUtils.checkPermission(permission, PERMISSION_GRANTED, PRE_M_APP_PACKAGE_NAME);
        PermissionUtils.checkPermissionAndAppOps(permission, PERMISSION_GRANTED,
                PRE_M_APP_PACKAGE_NAME);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionGrantState_preMApp"	""	"2: granted admin"	"([2:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[admin]:[2]:method_text:[  break;            default:                fail(""unsupported policy value"");        }    }   ]) :|: public void testPermissionGrantState_preMApp() throws Exception {
        // These tests are to make sure that pre-M apps can be granted/denied runtime permissions
        // by a profile owner targets Q or later
        assertCanSetPermissionGrantStatePreMApp(READ_CONTACTS, PERMISSION_GRANT_STATE_DENIED);
        assertCanSetPermissionGrantStatePreMApp(READ_CONTACTS, PERMISSION_GRANT_STATE_GRANTED);
    }

    private void assertCanSetPermissionGrantStatePreMApp(String permission, int value)
            throws Exception {
        assertTrue(mDevicePolicyManager.setPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PRE_M_APP_PACKAGE_NAME, permission, value));
        assertEquals(mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PRE_M_APP_PACKAGE_NAME, permission), value);

        // Install time permissions should always be granted
        PermissionUtils.checkPermission(permission, PERMISSION_GRANTED, PRE_M_APP_PACKAGE_NAME);

        // For pre-M apps the access to the data might be prevented via app-ops. Hence check that
        // they are correctly set
        switch (value) {
            case PERMISSION_GRANT_STATE_GRANTED:
                PermissionUtils.checkPermissionAndAppOps(permission, PERMISSION_GRANTED,
                        PRE_M_APP_PACKAGE_NAME);
                break;
            case PERMISSION_GRANT_STATE_DENIED:
                PermissionUtils.checkPermissionAndAppOps(permission, PERMISSION_DENIED,
                        PRE_M_APP_PACKAGE_NAME);
                break;
            default:
                fail(""unsupported policy value"");
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionPolicyAutoGrant_multiplePermissionsInGroup"	""	"2: granted admin"	"([1:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[admin]:[1]:method_text:[   // Restore original state            setPermissionPolicy(permissionPolicy);        }    }   ]) :|: public void testPermissionPolicyAutoGrant_multiplePermissionsInGroup() throws Exception {
        int permissionPolicy = mDevicePolicyManager.getPermissionPolicy(ADMIN_RECEIVER_COMPONENT);
        try {
            setPermissionPolicy(PERMISSION_POLICY_AUTO_GRANT);

            // Both permissions should be granted
            assertPermissionPolicy(PERMISSION_POLICY_AUTO_GRANT);
            assertCanRequestPermissionFromActivity(READ_CONTACTS);
            assertCanRequestPermissionFromActivity(WRITE_CONTACTS);
        } finally {
            // Restore original state
            setPermissionPolicy(permissionPolicy);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionPrompts"	""	"1: granted"	"([2:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[granted]:[2]:method_text:[rmission(READ_CONTACTS, PERMISSION_GRANTED,                PERMISSION_APP_PACKAGE_NAME);    }   ]) :|: public void testPermissionPrompts() throws Exception {
        // register a crash watcher
        mDevice.registerWatcher(CRASH_WATCHER_ID, () -> {
            UiObject2 button = mDevice.findObject(CRASH_POPUP_BUTTON_SELECTOR);
            if (button != null) {
                UiObject2 text = mDevice.findObject(CRASH_POPUP_TEXT_SELECTOR);
                Log.d(TAG, ""Removing an error dialog: "" + text != null ? text.getText() : null);
                button.click();
                return true;
            }
            return false;
        });
        mDevice.runWatchers();
        setPermissionPolicy(PERMISSION_POLICY_PROMPT);

        assertPermissionPolicy(PERMISSION_POLICY_PROMPT);
        PermissionUtils.launchActivityAndRequestPermission(mReceiver, mDevice, READ_CONTACTS,
                PERMISSION_DENIED, PERMISSION_APP_PACKAGE_NAME, PERMISSIONS_ACTIVITY_NAME);
        PermissionUtils.checkPermission(READ_CONTACTS, PERMISSION_DENIED,
                PERMISSION_APP_PACKAGE_NAME);
        PermissionUtils.launchActivityAndRequestPermission(mReceiver, mDevice, READ_CONTACTS,
                PERMISSION_GRANTED, PERMISSION_APP_PACKAGE_NAME, PERMISSIONS_ACTIVITY_NAME);
        PermissionUtils.checkPermission(READ_CONTACTS, PERMISSION_GRANTED,
                PERMISSION_APP_PACKAGE_NAME);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testSensorsRelatedPermissionsCannotBeGranted"	""	"1: granted"	"([6:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[granted]:[6]:method_text:[  } finally {                revokePermission(sensorPermission);            }        }    }   ]) :|: public void testSensorsRelatedPermissionsCannotBeGranted() throws Exception {
        for (String sensorPermission : SENSORS_PERMISSIONS) {
            try {
                // The permission cannot be granted.
                assertFailedToSetPermissionGrantState(
                        sensorPermission, DevicePolicyManager.PERMISSION_GRANT_STATE_GRANTED);

                // But the user can grant it.
                PermissionUtils.launchActivityAndRequestPermission(mReceiver, mDevice,
                        sensorPermission, PERMISSION_GRANTED, PERMISSION_APP_PACKAGE_NAME,
                        PERMISSIONS_ACTIVITY_NAME);

                // And the package manager should show it as granted.
                PermissionUtils.checkPermission(sensorPermission, PERMISSION_GRANTED,
                        PERMISSION_APP_PACKAGE_NAME);
            } finally {
                revokePermission(sensorPermission);
            }
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testSensorsRelatedPermissionsNotGrantedViaPolicy"	""	"1: granted"	"([5:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[granted]:[5]:method_text:[  } finally {                revokePermission(sensorPermission);            }        }    }   ]) :|: public void testSensorsRelatedPermissionsNotGrantedViaPolicy() throws Exception {
        setPermissionPolicy(PERMISSION_POLICY_AUTO_GRANT);
        for (String sensorPermission : SENSORS_PERMISSIONS) {
            try {
                // The permission is not granted by default.
                PermissionUtils.checkPermission(sensorPermission, PERMISSION_DENIED,
                        PERMISSION_APP_PACKAGE_NAME);
                // But the user can grant it.
                PermissionUtils.launchActivityAndRequestPermission(mReceiver, mDevice,
                        sensorPermission,
                        PERMISSION_GRANTED, PERMISSION_APP_PACKAGE_NAME, PERMISSIONS_ACTIVITY_NAME);

                // And the package manager should show it as granted.
                PermissionUtils.checkPermission(sensorPermission, PERMISSION_GRANTED,
                        PERMISSION_APP_PACKAGE_NAME);
            } finally {
                revokePermission(sensorPermission);
            }
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testStateOfSensorsRelatedPermissionsCannotBeRead"	""	"3: granted admin ACCESS_COARSE_LOCATION"	"([1:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[ PERMISSION_DENIED,                PERMISSION_APP_PACKAGE_NAME, PERMISSIONS_ACTIVITY_NAME);    }}]) :|: public void testStateOfSensorsRelatedPermissionsCannotBeRead() throws Exception {
        for (String sensorPermission : SENSORS_PERMISSIONS) {
            try {
                // The admin tries to grant the permission.
                setPermissionGrantState(sensorPermission, PERMISSION_GRANT_STATE_GRANTED);

                // But the user denies it.
                PermissionUtils.launchActivityAndRequestPermission(mReceiver, mDevice,
                        sensorPermission, PERMISSION_DENIED, PERMISSION_APP_PACKAGE_NAME,
                        PERMISSIONS_ACTIVITY_NAME);

                // And the admin cannot learn of it.
                assertPermissionGrantState(sensorPermission, PERMISSION_GRANT_STATE_DEFAULT);
            } finally {
                revokePermission(sensorPermission);
            }
        }
    }

    private void revokePermission(String sensorPermission) {
        if (LOCATION_PERMISSIONS.contains(sensorPermission)) {
            mUiAutomation.revokeRuntimePermission(PERMISSION_APP_PACKAGE_NAME,
                    permission.ACCESS_FINE_LOCATION);
            mUiAutomation.revokeRuntimePermission(PERMISSION_APP_PACKAGE_NAME,
                    permission.ACCESS_COARSE_LOCATION);
        } else {
            mUiAutomation.revokeRuntimePermission(PERMISSION_APP_PACKAGE_NAME, sensorPermission);
        }
    }

    private void assertFailedToSetPermissionGrantState(String permission, int value) {
        assertTrue(mDevicePolicyManager.setPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_APP_PACKAGE_NAME, permission, value));
        assertEquals(mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_APP_PACKAGE_NAME, permission),
                DevicePolicyManager.PERMISSION_GRANT_STATE_DEFAULT);
        assertEquals(mContext.getPackageManager().checkPermission(permission,
                PERMISSION_APP_PACKAGE_NAME),
                PackageManager.PERMISSION_DENIED)"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionGrantStateDenied_permissionRemainsDenied"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[admin]:[1]:method_text:[ original state            setPermissionGrantState(READ_CONTACTS, grantState);        }    }   ]) :|: public void testPermissionGrantStateDenied_permissionRemainsDenied() throws Exception {
        int grantState = mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_APP_PACKAGE_NAME, READ_CONTACTS);
        try {
            setPermissionGrantState(READ_CONTACTS, PERMISSION_GRANT_STATE_DENIED);

            assertNoPermissionFromActivity(READ_CONTACTS);

            // Should stay denied
            setPermissionGrantState(READ_CONTACTS, PERMISSION_GRANT_STATE_DEFAULT);

            assertNoPermissionFromActivity(READ_CONTACTS);
        } finally {
            // Restore original state
            setPermissionGrantState(READ_CONTACTS, grantState);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionGrantStateDenied_mixedPolicies"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[admin]:[2]:method_text:[(READ_CONTACTS, grantState);            setPermissionPolicy(permissionPolicy);        }    }   ]) :|: public void testPermissionGrantStateDenied_mixedPolicies() throws Exception {
        int grantState = mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_APP_PACKAGE_NAME, READ_CONTACTS);
        int permissionPolicy = mDevicePolicyManager.getPermissionPolicy(ADMIN_RECEIVER_COMPONENT);
        try {
            setPermissionGrantState(READ_CONTACTS, PERMISSION_GRANT_STATE_DENIED);

            // Check no permission by launching an activity and requesting the permission
            // Should stay denied if grant state is denied
            setPermissionPolicy(PERMISSION_POLICY_AUTO_GRANT);

            assertPermissionPolicy(PERMISSION_POLICY_AUTO_GRANT);
            assertCannotRequestPermissionFromActivity(READ_CONTACTS);

            setPermissionPolicy(PERMISSION_POLICY_AUTO_DENY);

            assertPermissionPolicy(PERMISSION_POLICY_AUTO_DENY);
            assertCannotRequestPermissionFromActivity(READ_CONTACTS);

            setPermissionPolicy(PERMISSION_POLICY_PROMPT);

            assertPermissionPolicy(PERMISSION_POLICY_PROMPT);
            assertCannotRequestPermissionFromActivity(READ_CONTACTS);
        } finally {
            // Restore original state
            setPermissionGrantState(READ_CONTACTS, grantState);
            setPermissionPolicy(permissionPolicy);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionPolicyAutoDeny_permissionLocked"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[admin]:[2]:method_text:[(READ_CONTACTS, grantState);            setPermissionPolicy(permissionPolicy);        }    }   ]) :|: public void testPermissionPolicyAutoDeny_permissionLocked() throws Exception {
        int grantState = mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_APP_PACKAGE_NAME, READ_CONTACTS);
        int permissionPolicy = mDevicePolicyManager.getPermissionPolicy(ADMIN_RECEIVER_COMPONENT);
        try {
            setPermissionGrantState(READ_CONTACTS, PERMISSION_GRANT_STATE_DENIED);
            setPermissionGrantState(READ_CONTACTS, PERMISSION_GRANT_STATE_DEFAULT);
            testPermissionPolicyAutoDeny();

            // Permission should be locked, so changing the policy should not change the grant state
            setPermissionPolicy(PERMISSION_POLICY_PROMPT);

            assertPermissionPolicy(PERMISSION_POLICY_PROMPT);
            assertCannotRequestPermissionFromActivity(READ_CONTACTS);

            setPermissionPolicy(PERMISSION_POLICY_AUTO_GRANT);

            assertPermissionPolicy(PERMISSION_POLICY_AUTO_GRANT);
            assertCannotRequestPermissionFromActivity(READ_CONTACTS);
        } finally {
            // Restore original state
            setPermissionGrantState(READ_CONTACTS, grantState);
            setPermissionPolicy(permissionPolicy);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionPolicyAutoGrant_permissionLocked"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[admin]:[2]:method_text:[(READ_CONTACTS, grantState);            setPermissionPolicy(permissionPolicy);        }    }   ]) :|: public void testPermissionPolicyAutoGrant_permissionLocked() throws Exception {
        int grantState = mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_APP_PACKAGE_NAME, READ_CONTACTS);
        int permissionPolicy = mDevicePolicyManager.getPermissionPolicy(ADMIN_RECEIVER_COMPONENT);
        try {
            setPermissionGrantState(READ_CONTACTS, PERMISSION_GRANT_STATE_DEFAULT);
            setPermissionPolicy(PERMISSION_POLICY_AUTO_GRANT);

            assertPermissionPolicy(PERMISSION_POLICY_AUTO_GRANT);
            assertCanRequestPermissionFromActivity(READ_CONTACTS);

            // permission should be locked, so changing the policy should not change the grant state
            setPermissionPolicy(PERMISSION_POLICY_PROMPT);

            assertPermissionPolicy(PERMISSION_POLICY_PROMPT);
            assertCanRequestPermissionFromActivity(READ_CONTACTS);

            setPermissionPolicy(PERMISSION_POLICY_AUTO_DENY);

            assertPermissionPolicy(PERMISSION_POLICY_AUTO_DENY);
            assertCanRequestPermissionFromActivity(READ_CONTACTS);
        } finally {
            // Restore original state
            setPermissionGrantState(READ_CONTACTS, grantState);
            setPermissionPolicy(permissionPolicy);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PersonalAppsSuspensionTest"	"testSuspendPersonalApps"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java]:[admin]:[2]:method_text:[MIN))                .isEqualTo(DevicePolicyManager.PERSONAL_APPS_SUSPENDED_EXPLICITLY);    }   ]) :|: 
    public void testSuspendPersonalApps() {
        mDpm.setPersonalAppsSuspended(ADMIN, true);
        assertThat(mDpm.getPersonalAppsSuspendedReasons(ADMIN))
                .isEqualTo(DevicePolicyManager.PERSONAL_APPS_SUSPENDED_EXPLICITLY);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PersonalAppsSuspensionTest"	"testUnsuspendPersonalApps"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java]:[admin]:[2]:method_text:[sons(ADMIN))                .isEqualTo(DevicePolicyManager.PERSONAL_APPS_NOT_SUSPENDED);    }   ]) :|: 
    public void testUnsuspendPersonalApps() {
        mDpm.setPersonalAppsSuspended(ADMIN, false);
        assertThat(mDpm.getPersonalAppsSuspendedReasons(ADMIN))
                .isEqualTo(DevicePolicyManager.PERSONAL_APPS_NOT_SUSPENDED);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PersonalAppsSuspensionTest"	"testSetManagedProfileMaximumTimeOff1Sec"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java]:[admin]:[1]:method_text:[dProfileMaximumTimeOff1Sec() {        mDpm.setManagedProfileMaximumTimeOff(ADMIN, 1000);    }   ]) :|: 
    public void testSetManagedProfileMaximumTimeOff1Sec() {
        mDpm.setManagedProfileMaximumTimeOff(ADMIN, 1000);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PersonalAppsSuspensionTest"	"testSetManagedProfileMaximumTimeOff1Year"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java]:[admin]:[1]:method_text:[ear() {        mDpm.setManagedProfileMaximumTimeOff(ADMIN, TimeUnit.DAYS.toMillis(365));    }   ]) :|: 
    public void testSetManagedProfileMaximumTimeOff1Year() {
        mDpm.setManagedProfileMaximumTimeOff(ADMIN, TimeUnit.DAYS.toMillis(365));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PersonalAppsSuspensionTest"	"testSetManagedProfileMaximumTimeOff"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java]:[admin]:[4]:method_text:[(ADMIN, 0);        assertThat(mDpm.getManagedProfileMaximumTimeOff(ADMIN)).isEqualTo(0);    }   ]) :|: 
    public void testSetManagedProfileMaximumTimeOff() {
        final long timeout = 123456789;
        mDpm.setManagedProfileMaximumTimeOff(ADMIN, timeout);
        assertThat(mDpm.getManagedProfileMaximumTimeOff(ADMIN)).isEqualTo(timeout);
        mDpm.setManagedProfileMaximumTimeOff(ADMIN, 0);
        assertThat(mDpm.getManagedProfileMaximumTimeOff(ADMIN)).isEqualTo(0);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PersonalAppsSuspensionTest"	"testPersonalAppsSuspendedByTimeout"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java]:[admin]:[1]:method_text:[N))                .isEqualTo(DevicePolicyManager.PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUT);    }}]) :|: 
    public void testPersonalAppsSuspendedByTimeout() {
        assertThat(mDpm.getPersonalAppsSuspendedReasons(ADMIN))
                .isEqualTo(DevicePolicyManager.PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUT);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PasswordExpirationTest"	"testPasswordExpires"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/PasswordExpirationTest.java]:[admin]:[1]:method_text:[            mOnPasswordExpiryTimeoutCalled.await(testWaitTimeMs, TimeUnit.MILLISECONDS));    }   ]) :|: public void testPasswordExpires() throws Exception {
        final long testTimeoutMs = 5000;
        // Set a significantly longer wait time to check that the countDownLatch is called to prevent
        // tests flakiness due to setups delays.
        final long testWaitTimeMs = 300000;
        mDevicePolicyManager.setPasswordExpirationTimeout(ADMIN_RECEIVER_COMPONENT, testTimeoutMs);
        assertTrue(""The password expiry timeout was not triggered."",
                mOnPasswordExpiryTimeoutCalled.await(testWaitTimeMs, TimeUnit.MILLISECONDS));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PasswordExpirationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PasswordExpirationTest"	"testNoNegativeTimeout"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/PasswordExpirationTest.java]:[admin]:[1]:method_text:[legalArgumentException e) {}    }    // TODO: investigate this test's failure. b/110976462    /*]) :|: public void testNoNegativeTimeout() {
        final long testTimeoutMs = -1;
        try {
            mDevicePolicyManager.setPasswordExpirationTimeout(ADMIN_RECEIVER_COMPONENT, testTimeoutMs);
            fail(""Setting a negative value for a timeout is expected to throw an exception."");
        } catch (IllegalArgumentException e) {}
    }

    // TODO: investigate this test's failure. b/110976462
    /*"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PasswordExpirationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PasswordExpirationTest"	"testPasswordNotYetExpiredIsInEffect"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/PasswordExpirationTest.java]:[admin]:[1]:method_text:[         mOnPasswordExpiryTimeoutCalled.await(testTimeoutMs, TimeUnit.MILLISECONDS));    }    */}]) :|: public void testPasswordNotYetExpiredIsInEffect() throws Exception {
        final long testTimeoutMs = 5000;
        mDevicePolicyManager.setPasswordExpirationTimeout(ADMIN_RECEIVER_COMPONENT, testTimeoutMs);
        assertFalse(""The password expiry timeout was triggered too early."",
                mOnPasswordExpiryTimeoutCalled.await(testTimeoutMs, TimeUnit.MILLISECONDS));
    }
    */
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PasswordExpirationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ClearApplicationDataTest"	"testClearApplicationData_activeAdmin"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/ClearApplicationDataTest.java]:[admin]:[3]:method_text:[ources().getString(provisioning_app_id);        } else {            return null;        }    }}]) :|: public void testClearApplicationData_activeAdmin() throws Exception {
        clearApplicationDataTest(DEVICE_ADMIN_PKG, /* shouldSucceed */ false);
    }

    private void clearApplicationDataTest(String packageName, boolean shouldSucceed)
            throws Exception {
        mDevicePolicyManager.clearApplicationUserData(ADMIN_RECEIVER_COMPONENT,
                packageName, AsyncTask.THREAD_POOL_EXECUTOR,
                (String pkg, boolean succeeded) -> {
                    assertEquals(packageName, pkg);
                    assertEquals(shouldSucceed, succeeded);
                    mSemaphore.release();
                });
        assertTrue(""Clearing application data took too long"",
                mSemaphore.tryAcquire(CLEAR_APPLICATION_DATA_TIMEOUT_S, TimeUnit.SECONDS));
    }

    private String getDeviceProvisioningPackageName() {
        final int provisioning_app_id = mContext.getResources().getIdentifier(
                ""config_deviceProvisioningPackage"", ""string"", ""android"");
        if (provisioning_app_id > 0) {
            return mContext.getResources().getString(provisioning_app_id);
        } else {
            return null;
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ClearApplicationDataTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.CaCertManagementTest"	"testCanRetrieveListOfInstalledCaCerts"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/CaCertManagementTest.java]:[admin]:[1]:method_text:[wn();    }    /**     * Test: a valid cert should be installable and also removable.     */   ]) :|: public void testCanRetrieveListOfInstalledCaCerts() {
        List<byte[]> caCerts = mDevicePolicyManager.getInstalledCaCerts(mAdmin);
        assertNotNull(caCerts);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        uninstallAllUserCaCerts();
    }

    @Override
    protected void tearDown() throws Exception {
        uninstallAllUserCaCerts();
        super.tearDown();
    }

    /**
     * Test: a valid cert should be installable and also removable.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CaCertManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.CaCertManagementTest"	"testCanUninstallAllUserCaCerts"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/CaCertManagementTest.java]:[admin]:[5]:method_text:[id uninstallAllUserCaCerts() {        mDevicePolicyManager.uninstallAllUserCaCerts(mAdmin);    }}]) :|: public void testCanUninstallAllUserCaCerts() throws GeneralSecurityException {
        assertTrue(installCaCert(FAKE_RSA_1.caCertificate));
        assertTrue(installCaCert(FAKE_DSA_1.caCertificate));

        uninstallAllUserCaCerts();
        assertUninstalled(FAKE_RSA_1.caCertificate);
        assertUninstalled(FAKE_DSA_1.caCertificate);
    }

    private void assertInstalled(byte[] caBytes) throws GeneralSecurityException {
        assertTrue(isCaCertInstalledAndTrusted(caBytes));
    }

    private void assertUninstalled(byte[] caBytes) throws GeneralSecurityException {
        assertFalse(isCaCertInstalledAndTrusted(caBytes));
    }

    private static X509TrustManager getFirstX509TrustManager(TrustManagerFactory tmf) {
        for (TrustManager trustManager : tmf.getTrustManagers()) {
             if (trustManager instanceof X509TrustManager) {
                 return (X509TrustManager) trustManager;
             }
        }
        throw new RuntimeException(""Unable to find X509TrustManager"");
    }

    /**
     * Whether a given cert, or one a lot like it, has been installed system-wide and is available
     * to all apps.
     *
     * <p>A CA certificate is ""installed"" if it matches all of the following conditions:
     * <ul>
     *   <li>{@link DevicePolicyManager#hasCaCertInstalled} returns {@code true}.</li>
     *   <li>{@link DevicePolicyManager#getInstalledCaCerts} lists a matching certificate (not
     *       necessarily exactly the same) in its response.</li>
     *   <li>Any new instances of {@link TrustManager} should report the certificate among their
     *       accepted issuer list -- older instances may keep the set of issuers they were created
     *       with until explicitly refreshed.</li>
     *
     * @return {@code true} if installed by all metrics, {@code false} if not installed by any
     *         metric. In any other case an {@link AssertionError} will be thrown.
     */
    private boolean isCaCertInstalledAndTrusted(byte["	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CaCertManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnMultiStageTest"	"testAlwaysOnSetAfterReboot"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/AlwaysOnVpnMultiStageTest.java]:[admin]:[2]:method_text:[er reboot"",                Collections.singleton(mContext.getPackageName()), allowlist);    }   ]) :|: public void testAlwaysOnSetAfterReboot() throws Exception {
        VpnTestHelper.waitForVpn(mContext, null,
                /* usable */ true, /* lockdown */ true, /* allowlist */ true);
        VpnTestHelper.checkPing(TEST_ADDRESS);
        final Set<String> allowlist =
                mDevicePolicyManager.getAlwaysOnVpnLockdownWhitelist(ADMIN_RECEIVER_COMPONENT);
        assertTrue(""Lockdown bit lost after reboot"",
                mDevicePolicyManager.isAlwaysOnVpnLockdownEnabled(ADMIN_RECEIVER_COMPONENT));
        assertNotNull(""allowlist is lost after reboot"", allowlist);
        assertEquals(""allowlist changed after reboot"",
                Collections.singleton(mContext.getPackageName()), allowlist);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnMultiStageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnMultiStageTest"	"testNetworkBlocked"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnMultiStageTest.java]:[admin]:[1]:method_text:[stants.ENETUNREACH) ||                       (e.errno == OsConstants.EACCES));        }    }   ]) :|: public void testNetworkBlocked() throws Exception {
        // After the vpn app being force-stop, expect that always-on package stays the same
        assertEquals(VPN_PACKAGE, mDevicePolicyManager.getAlwaysOnVpnPackage(
                ADMIN_RECEIVER_COMPONENT));
        for(int i = 0; i < MAX_NUMBER_OF_ATTEMPTS && VpnTestHelper.isNetworkVpn(mContext); ++i) {
            Thread.sleep(TimeUnit.SECONDS.toMillis(1));
        }
        assertFalse(VpnTestHelper.isNetworkVpn(mContext));
        // Expect the network is still locked down after the vpn app process is killed
        try {
            VpnTestHelper.tryPosixConnect(TEST_ADDRESS);
            fail(""sendIcmpMessage doesn't throw Exception during network lockdown"");
        } catch (ErrnoException e) {
            // Os.connect returns ENETUNREACH or EACCES errno after the vpn app process is killed
            assertTrue((e.errno == OsConstants.ENETUNREACH) ||
                       (e.errno == OsConstants.EACCES));
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnMultiStageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnMultiStageTest"	"testAlwaysOnVpnDisabled"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/AlwaysOnVpnMultiStageTest.java]:[admin]:[2]:method_text:[ge(ADMIN_RECEIVER_COMPONENT));        assertFalse(VpnTestHelper.isNetworkVpn(mContext));    }   ]) :|: public void testAlwaysOnVpnDisabled() throws Exception {
        // Wait until always-on vpn package is being removed (with 1 minute timeout).
        for (int i = 0; i < 60; i++) {
            if (mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT) == null) {
                break;
            }
            Thread.sleep(1000);  // 1 second.
        }

        // After the vpn app being uninstalled, check that always-on vpn is null
        assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));
        assertFalse(VpnTestHelper.isNetworkVpn(mContext));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnMultiStageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnMultiStageTest"	"testSetNonExistingPackage"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/AlwaysOnVpnMultiStageTest.java]:[admin]:[3]:method_text:[        assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));    }   ]) :|: public void testSetNonExistingPackage() throws Exception {
        assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));

        // Verify it throws NameNotFoundException for non-existing package after uninstallation
        try {
            mDevicePolicyManager.setAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT, VPN_PACKAGE,
                    true);
            fail(""setAlwaysOnVpnPackage should not accept non-vpn package"");
        } catch (PackageManager.NameNotFoundException e) {
            // success
        }

        assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnMultiStageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnMultiStageTest"	"testCleanup"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnMultiStageTest.java]:[admin]:[1]:method_text:[{        mDevicePolicyManager.setAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT, null, false);    }}]) :|: public void testCleanup() throws Exception {
        mDevicePolicyManager.setAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT, null, false);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnMultiStageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.NetworkLoggingTest"	"testSetNetworkLogsEnabled_true"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java]:[admin]:[2]:method_text:[e);        assertThat(mDpm.isNetworkLoggingEnabled(ADMIN_RECEIVER_COMPONENT)).isTrue();    }   ]) :|: 
    public void testSetNetworkLogsEnabled_true() {
        mDpm.setNetworkLoggingEnabled(ADMIN_RECEIVER_COMPONENT, true);

        assertThat(mDpm.isNetworkLoggingEnabled(ADMIN_RECEIVER_COMPONENT)).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.NetworkLoggingTest"	"testSetNetworkLogsEnabled_false"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java]:[admin]:[2]:method_text:[);        assertThat(mDpm.isNetworkLoggingEnabled(ADMIN_RECEIVER_COMPONENT)).isFalse();    }   ]) :|: 
    public void testSetNetworkLogsEnabled_false() {
        mDpm.setNetworkLoggingEnabled(ADMIN_RECEIVER_COMPONENT, false);

        assertThat(mDpm.isNetworkLoggingEnabled(ADMIN_RECEIVER_COMPONENT)).isFalse();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.NetworkLoggingTest"	"testSetDelegateScope_delegationNetworkLogging"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java]:[admin]:[2]:method_text:[IVER_COMPONENT, DELEGATE_APP_PKG))                .contains(DELEGATION_NETWORK_LOGGING);    }   ]) :|: 
    public void testSetDelegateScope_delegationNetworkLogging() {
        mDpm.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, DELEGATE_APP_PKG,
                Arrays.asList(DELEGATION_NETWORK_LOGGING));

        assertThat(mDpm.getDelegatedScopes(ADMIN_RECEIVER_COMPONENT, DELEGATE_APP_PKG))
                .contains(DELEGATION_NETWORK_LOGGING);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.NetworkLoggingTest"	"testSetDelegateScope_noDelegation"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java]:[admin]:[4]:method_text:[(""Did not get DeviceAdminReceiver#onNetworkLogsAvailable callback"");            }        }    }}]) :|: 
    public void testSetDelegateScope_noDelegation() {
        mDpm.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, DELEGATE_APP_PKG,
                Arrays.asList());

        assertThat(mDpm.getDelegatedScopes(ADMIN_RECEIVER_COMPONENT, DELEGATE_APP_PKG))
                .doesNotContain(DELEGATION_NETWORK_LOGGING);
    }

    private void connectToWebsite(String server) {
        HttpURLConnection urlConnection = null;
        try {
            final URL url = new URL(""https://"" + server);
            urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setConnectTimeout(2000);
            urlConnection.setReadTimeout(2000);
            urlConnection.getResponseCode();
        } catch (IOException e) {
            Log.w(TAG, ""Failed to connect to "" + server, e);
        } finally {
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
        }
    }

    private class NetworkLogsReceiver extends BroadcastReceiver {

        private final CountDownLatch mBatchCountDown = new CountDownLatch(1);

        @Override
        public void onReceive(Context context, Intent intent) {
            if (ACTION_NETWORK_LOGS_AVAILABLE.equals(intent.getAction())) {
                final long token =
                        intent.getLongExtra(EXTRA_NETWORK_LOGS_BATCH_TOKEN, FAKE_BATCH_TOKEN);
                final List<NetworkEvent> events =
                        mDpm.retrieveNetworkLogs(ADMIN_RECEIVER_COMPONENT, token);
                if (events == null) {
                    fail(""Failed to retrieve batch of network logs with batch token "" + token);
                } else {
                    mNetworkEvents.addAll(events);
                    mBatchCountDown.countDown();
                }
            }
        }

        private void waitForBroadcast() throws InterruptedException {
            mReceiver.mBatchCountDown.await(3, TimeUnit.MINUTES);
            if (mReceiver.mBatchCountDown.getCount() > 0)"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SetSystemSettingTest"	"testSetBrightness"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/SetSystemSettingTest.java]:[admin]:[2]:method_text:[nessWithValue(TEST_BRIGHTNESS_1);       testSetBrightnessWithValue(TEST_BRIGHTNESS_2);    }  } ]) :|: public void testSetBrightness() {
    final int mode = Settings.System.getInt(mContext.getContentResolver(),
        Settings.System.SCREEN_BRIGHTNESS_MODE, SCREEN_BRIGHTNESS_MODE_AUTOMATIC);
    if(mode == SCREEN_BRIGHTNESS_MODE_AUTOMATIC) {

        mDevicePolicyManager.setSystemSetting(ADMIN_RECEIVER_COMPONENT,
          Settings.System.SCREEN_BRIGHTNESS_MODE, ""0"");

        testSetBrightnessWithValue(TEST_BRIGHTNESS_1);
        testSetBrightnessWithValue(TEST_BRIGHTNESS_2);
        mDevicePolicyManager.setSystemSetting(ADMIN_RECEIVER_COMPONENT,
            Settings.System.SCREEN_BRIGHTNESS_MODE,
              mode == SCREEN_BRIGHTNESS_MODE_AUTOMATIC? ""1"" : ""0"");
    }
    else {
       testSetBrightnessWithValue(TEST_BRIGHTNESS_1);
       testSetBrightnessWithValue(TEST_BRIGHTNESS_2);
    }
  }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SetSystemSettingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SetSystemSettingTest"	"testSetSystemSettingsFailsForNotAllowedSettings"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/SetSystemSettingTest.java]:[admin]:[1]:method_text:[ception."");    } catch (SecurityException e) {      // Should throw SecurityException.    }  }}]) :|: public void testSetSystemSettingsFailsForNotAllowedSettings() throws Exception {
    try {
      mDevicePolicyManager.setSystemSetting(ADMIN_RECEIVER_COMPONENT,
          Settings.System.TEXT_AUTO_REPLACE, ""0"");
      fail(""Didn't throw security exception."");
    } catch (SecurityException e) {
      // Should throw SecurityException.
    }
  }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SetSystemSettingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ApplicationRestrictionsTest"	"testSetApplicationRestrictions"	""	"1: admin"	"([10:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java]:[admin]:[10]:method_text:[icationRestrictions(                ADMIN_RECEIVER_COMPONENT, OTHER_PACKAGE).isEmpty());    }   ]) :|: public void testSetApplicationRestrictions() {
        // Test setting restrictions
        mDevicePolicyManager.setApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, APP_RESTRICTIONS_TARGET_PKG, BUNDLE_0);
        mDevicePolicyManager.setApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, OTHER_PACKAGE, BUNDLE_1);

        // Retrieve restrictions locally and make sure they are what we put in.
        assertBundle0(mDevicePolicyManager.getApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, APP_RESTRICTIONS_TARGET_PKG));
        assertBundle1(mDevicePolicyManager.getApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, OTHER_PACKAGE));

        // Check that the target app can retrieve the same restrictions.
        assertBundle0(waitForRestrictionsValueFromTestActivity());

        // Test overwriting
        mDevicePolicyManager.setApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, APP_RESTRICTIONS_TARGET_PKG, BUNDLE_1);
        assertBundle1(mDevicePolicyManager.getApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, APP_RESTRICTIONS_TARGET_PKG));
        assertBundle1(waitForRestrictionsValueFromTestActivity());

        mDevicePolicyManager.setApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, APP_RESTRICTIONS_TARGET_PKG, new Bundle());
        assertTrue(mDevicePolicyManager.getApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, APP_RESTRICTIONS_TARGET_PKG).isEmpty());
        assertTrue(waitForRestrictionsValueFromTestActivity().isEmpty());

        mDevicePolicyManager.setApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, OTHER_PACKAGE, null);
        assertTrue(mDevicePolicyManager.getApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, OTHER_PACKAGE).isEmpty());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ApplicationRestrictionsTest"	"testCanRetrieveOwnRestrictionsViaUserManager"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java]:[admin]:[4]:method_text:[R_COMPONENT, packageName));        assertBundle1(waitForRestrictionsChangedBroadcast());    }   ]) :|: public void testCanRetrieveOwnRestrictionsViaUserManager() {
        final String packageName = mContext.getPackageName();

        mDevicePolicyManager.setApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, packageName, BUNDLE_0);
        assertBundle0(mDevicePolicyManager.getApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, packageName));

        // Check that we got the restrictions changed callback.
        assertBundle0(waitForRestrictionsChangedBroadcast());

        mDevicePolicyManager.setApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, packageName, BUNDLE_1);
        assertBundle1(mDevicePolicyManager.getApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, packageName));
        assertBundle1(waitForRestrictionsChangedBroadcast());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ApplicationRestrictionsTest"	"testSetApplicationRestrictionsManagingPackage"	""	"1: admin"	"([7:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java]:[admin]:[7]:method_text:[ictionsManagingPackage(                            ADMIN_RECEIVER_COMPONENT));        }    }   ]) :|: public void testSetApplicationRestrictionsManagingPackage() throws NameNotFoundException {
        final String previousValue = mDevicePolicyManager.getApplicationRestrictionsManagingPackage(
                ADMIN_RECEIVER_COMPONENT);
        try {
            mDevicePolicyManager.setApplicationRestrictionsManagingPackage(
                    ADMIN_RECEIVER_COMPONENT, APP_RESTRICTIONS_TARGET_PKG);
            assertEquals(APP_RESTRICTIONS_TARGET_PKG,
                    mDevicePolicyManager.getApplicationRestrictionsManagingPackage(
                            ADMIN_RECEIVER_COMPONENT));
            mDevicePolicyManager.setApplicationRestrictionsManagingPackage(
                    ADMIN_RECEIVER_COMPONENT, null);
            assertNull(mDevicePolicyManager.getApplicationRestrictionsManagingPackage(
                    ADMIN_RECEIVER_COMPONENT));
        } finally {
            mDevicePolicyManager.setApplicationRestrictionsManagingPackage(
                    ADMIN_RECEIVER_COMPONENT, previousValue);
            assertEquals(previousValue,
                    mDevicePolicyManager.getApplicationRestrictionsManagingPackage(
                            ADMIN_RECEIVER_COMPONENT));
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ApplicationRestrictionsTest"	"testSetApplicationRestrictionsManagingPackageForNotInstalledPackage"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java]:[admin]:[3]:method_text:[       }        return mUserManager.getApplicationRestrictions(mContext.getPackageName());    }}]) :|: public void testSetApplicationRestrictionsManagingPackageForNotInstalledPackage()
            throws NameNotFoundException {
        try {
            mDevicePolicyManager.setApplicationRestrictionsManagingPackage(ADMIN_RECEIVER_COMPONENT,
                    OTHER_PACKAGE);
            fail(""Not throwing exception for not installed package name"");
        } catch (NameNotFoundException expected) {
            MoreAsserts.assertContainsRegex(OTHER_PACKAGE, expected.getMessage());
        } finally {
            mDevicePolicyManager.setApplicationRestrictionsManagingPackage(ADMIN_RECEIVER_COMPONENT,
                    null);
            assertNull(mDevicePolicyManager.getApplicationRestrictionsManagingPackage(
                    ADMIN_RECEIVER_COMPONENT));
        }
    }

    // Should be consistent with assertBundle0
    private static Bundle createBundle0() {
        Bundle result = new Bundle();
        // Tests for 6 allowed types: Integer, Boolean, String, String[], Bundle and Parcelable[]
        // Also test for string escaping handling
        result.putBoolean(""boolean_0"", false);
        result.putBoolean(""boolean_1"", true);
        result.putInt(""integer"", 0x7fffffff);
        // If a null is stored, """" will be read back
        result.putString(""empty"", """");
        result.putString(""string"", ""text"");
        result.putStringArray(""string[]"", TEST_STRINGS);

        // Adding a bundle, which contain 2 nested restrictions - bundle_string and bundle_int
        Bundle bundle = new Bundle();
        bundle.putString(""bundle_string"", ""bundle_string"");
        bundle.putInt(""bundle_int"", 1);
        result.putBundle(""bundle"", bundle);

        // Adding an array of 2 bundles
        Bundle[] bundleArray = new Bundle[2];
        bundleArray[0] = new Bundle();
        bundleArray[0].putString(""bundle_array_string"", ""bundle_array_string"");
        // Put bundle inside bundle
        bundleArray[0].putBundle(""bundle_array_bundle"", bundle);
        bundleArray[1"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PasswordMinimumRestrictionsTest"	"testPasswordMinimumRestriction"	""	"1: admin"	"([8:/com/android/cts/deviceandprofileowner/PasswordMinimumRestrictionsTest.java]:[admin]:[8]:method_text:[        invokeGetMethod(METHOD_LIST[i], mParentDpm, ADMIN_RECEIVER_COMPONENT));        }    }   ]) :|: public void testPasswordMinimumRestriction() throws Exception {
        for (int i = 0; i < METHOD_LIST.length; i++) {
            invokeSetMethod(METHOD_LIST[i], mDevicePolicyManager, ADMIN_RECEIVER_COMPONENT,
                    TEST_PASSWORD_LENGTH + i);
            invokeSetMethod(METHOD_LIST[i], mParentDpm, ADMIN_RECEIVER_COMPONENT,
                    TEST_PASSWORD_LENGTH + 2 * i);

            // Passing the admin component returns the value set for that admin, rather than
            // aggregated values.
            assertEquals(
                    getMethodName(METHOD_LIST[i])
                            + "" failed to get expected value on mDevicePolicyManager."",
                    TEST_PASSWORD_LENGTH + i, invokeGetMethod(METHOD_LIST[i], mDevicePolicyManager,
                            ADMIN_RECEIVER_COMPONENT));

            // Passing the admin component returns the value set for that admin, rather than
            // aggregated values.
            assertEquals(
                    getMethodName(METHOD_LIST[i]) + "" failed to get expected value on mParentDpm."",
                    TEST_PASSWORD_LENGTH + 2 * i,
                    invokeGetMethod(METHOD_LIST[i], mParentDpm, ADMIN_RECEIVER_COMPONENT));
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PasswordMinimumRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PasswordMinimumRestrictionsTest"	"testSetPasswordMinimumRestrictionWithNull"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/PasswordMinimumRestrictionsTest.java]:[admin]:[2]:method_text:[     }                // Expected to throw NullPointerException.            }        }    }   ]) :|: public void testSetPasswordMinimumRestrictionWithNull() {
        // Test with mDevicePolicyManager.
        for (String method : METHOD_LIST) {
            try {
                invokeSetMethod(method, mDevicePolicyManager, null, TEST_PASSWORD_LENGTH);
                fail(""Exception should have been thrown for null admin ComponentName"");
            } catch (Exception e) {
                if (!(e.getCause() instanceof NullPointerException)) {
                    fail(""Failed to execute set method: "" + setMethodName(method));
                }
                // Expected to throw NullPointerException.
            }
        }

        // Test with mParentDpm.
        for (String method : METHOD_LIST) {
            try {
                invokeSetMethod(method, mParentDpm, null, TEST_PASSWORD_LENGTH);
                fail(""Exception should have been thrown for null admin ComponentName"");
            } catch (Exception e) {
                if (!(e.getCause() instanceof NullPointerException)) {
                    fail(""Failed to execute set method: "" + setMethodName(method));
                }
                // Expected to throw NullPointerException.
            }
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PasswordMinimumRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PasswordMinimumRestrictionsTest"	"testGetPasswordMinimumRestrictionWithNullAdmin"	""	"1: admin"	"([23:/com/android/cts/deviceandprofileowner/PasswordMinimumRestrictionsTest.java]:[admin]:[23]:method_text:[ }    private String getMethodName(String methodName) {        return ""get"" + methodName;    }}]) :|: public void testGetPasswordMinimumRestrictionWithNullAdmin() throws Exception {
        for (int i = 0; i < METHOD_LIST.length; i++) {
            // Check getMethod with null admin. It should return the aggregated value (which is the
            // only value set so far).
            invokeSetMethod(METHOD_LIST[i], mDevicePolicyManager, ADMIN_RECEIVER_COMPONENT,
                    TEST_PASSWORD_LENGTH_LOW + i);
            assertEquals(getMethodName(METHOD_LIST[i]) + "" failed."", TEST_PASSWORD_LENGTH_LOW + i,
                    invokeGetMethod(METHOD_LIST[i], mDevicePolicyManager, null));

            // Set strict password minimum restriction using parent instance.
            invokeSetMethod(METHOD_LIST[i], mParentDpm, ADMIN_RECEIVER_COMPONENT,
                    TEST_PASSWORD_LENGTH + i);
            // With null admin, the restriction should be the aggregate of all admins.
            assertEquals(getMethodName(METHOD_LIST[i]) + "" failed."", TEST_PASSWORD_LENGTH + i,
                    invokeGetMethod(METHOD_LIST[i], mDevicePolicyManager, null));
            // With null admin, the restriction should be the aggregate of all admins.
            assertEquals(getMethodName(METHOD_LIST[i]) + "" failed."", TEST_PASSWORD_LENGTH + i,
                    invokeGetMethod(METHOD_LIST[i], mParentDpm, null));

            // Passing the admin component returns the value set for that admin, rather than
            // aggregated values.
            assertEquals(getMethodName(METHOD_LIST[i]) + "" failed."", TEST_PASSWORD_LENGTH_LOW + i,
                    invokeGetMethod(METHOD_LIST[i], mDevicePolicyManager,
                            ADMIN_RECEIVER_COMPONENT));
            assertEquals(getMethodName(METHOD_LIST[i]) + "" failed."", TEST_PASSWORD_LENGTH + i,
                    invokeGetMethod(METHOD_LIST[i], mParentDpm, ADMIN_RECEIVER_COMPONENT));

            // Set strict password minimum restriction on current admin.
            invokeSetMethod(METHOD_LIST[i], mDevicePolicyM"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PasswordMinimumRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenTest"	"testSetApplicationHidden"	""	"1: admin"	"([8:/com/android/cts/deviceandprofileowner/ApplicationHiddenTest.java]:[admin]:[8]:method_text:[ PACKAGE_TO_HIDE))                .isFalse();        mReceiver.waitForAddedBroadcast();    }   ]) :|: public void testSetApplicationHidden() throws Exception {
        assertWithMessage(""setApplicationHidden(%s, %s, true)"", ADMIN_RECEIVER_COMPONENT,
                PACKAGE_TO_HIDE)
                        .that(mDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                                PACKAGE_TO_HIDE, true))
                        .isTrue();
        assertWithMessage(""isApplicationHidden(%s, %s)"", ADMIN_RECEIVER_COMPONENT, PACKAGE_TO_HIDE)
                .that(mDevicePolicyManager
                        .isApplicationHidden(ADMIN_RECEIVER_COMPONENT, PACKAGE_TO_HIDE))
                .isTrue();
        mReceiver.waitForRemovedBroadcast();
        assertWithMessage(""setApplicationHidden(%s, %s, false)"", ADMIN_RECEIVER_COMPONENT,
                PACKAGE_TO_HIDE)
                        .that(mDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                                PACKAGE_TO_HIDE, false))
                        .isTrue();
        assertWithMessage(""isApplicationHidden(%s, %s)"", ADMIN_RECEIVER_COMPONENT, PACKAGE_TO_HIDE)
                .that(mDevicePolicyManager
                        .isApplicationHidden(ADMIN_RECEIVER_COMPONENT, PACKAGE_TO_HIDE))
                .isFalse();
        mReceiver.waitForAddedBroadcast();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenTest"	"testCannotHideActiveAdmin"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/ApplicationHiddenTest.java]:[admin]:[3]:method_text:[                                PACKAGE_NAME, true))                        .isFalse();    }   ]) :|: public void testCannotHideActiveAdmin() throws Exception {
        assertWithMessage(""setApplicationHidden(%s, %s, true)"", ADMIN_RECEIVER_COMPONENT,
                PACKAGE_NAME)
                        .that(mDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                                PACKAGE_NAME, true))
                        .isFalse();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenTest"	"testCannotHideNonExistingPackage"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/ApplicationHiddenTest.java]:[admin]:[2]:method_text:[                     NONEXISTING_PACKAGE_NAME, true))                        .isFalse();    }   ]) :|: public void testCannotHideNonExistingPackage() throws Exception {
        assertWithMessage(""setApplicationHidden(%s, %s, true)"", ADMIN_RECEIVER_COMPONENT,
                NONEXISTING_PACKAGE_NAME)
                        .that(mDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                                NONEXISTING_PACKAGE_NAME, true))
                        .isFalse();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenTest"	"testCannotHidePolicyExemptApps"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/ApplicationHiddenTest.java]:[admin]:[3]:method_text:[r "" + mContext.getUserId()                    + "" in "" + TIMEOUT_SECONDS + ""s."");        }    }}]) :|: public void testCannotHidePolicyExemptApps() throws Exception {
        Set<String> policyExemptApps = mDevicePolicyManager.getPolicyExemptApps();
        Log.v(mTag, ""policyExemptApps: "" + policyExemptApps);
        if (policyExemptApps.isEmpty()) return;

        policyExemptApps.forEach((app) -> {
            try {
                boolean hidden = mDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                        app, true);

                assertWithMessage(""setApplicationHidden(%s, true)"", app).that(hidden).isFalse();
            } finally {
                maybeUnhideApp(app);
            }
        });
    }

    private void maybeUnhideApp(String app) {
        if (mDevicePolicyManager.isApplicationHidden(ADMIN_RECEIVER_COMPONENT, app)) {
            mDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT, app, false);
        }
    }

    private final class ApplicationHiddenReceiver extends BroadcastReceiver {
        private static final int TIMEOUT_SECONDS = 60;
        private final Semaphore mAddedSemaphore = new Semaphore(0);
        private final Semaphore mRemovedSemaphore = new Semaphore(0);

        @Override
        public void onReceive(Context context, Intent intent) {
            Log.v(mTag, ""Received intent on user "" + context.getUserId() + "": ""
                    + Utils.toString(intent));
            Uri uri = intent.getData();
            if (uri == null) {
                return;
            }
            String pkgName = uri.getSchemeSpecificPart();
            if (!PACKAGE_TO_HIDE.equals(pkgName)) {
                return;
            }
            String action = intent.getAction();
            switch(action) {
                case Intent.ACTION_PACKAGE_ADDED:
                    Log.d(mTag, ""Received PACKAGE_ADDED broadcast"");
                    mAddedSemaphore.release();
                    break;
                case Intent.ACTION_PACKAGE_REMOVED:
                    Log.d(mTag, ""Received ACTION"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AdminConfiguredNetworksTest"	"testSetConfiguredNetworksLockdownState"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/AdminConfiguredNetworksTest.java]:[admin]:[6]:method_text:[er.hasLockdownAdminConfiguredNetworks(                ADMIN_RECEIVER_COMPONENT)).isFalse();    }]) :|: public void testSetConfiguredNetworksLockdownState() {
        mDevicePolicyManager.setConfiguredNetworksLockdownState(ADMIN_RECEIVER_COMPONENT,
                true);

        assertThat(mDevicePolicyManager.hasLockdownAdminConfiguredNetworks(
                ADMIN_RECEIVER_COMPONENT)).isTrue();

        mDevicePolicyManager.setConfiguredNetworksLockdownState(ADMIN_RECEIVER_COMPONENT,
                false);

        assertThat(mDevicePolicyManager.hasLockdownAdminConfiguredNetworks(
                ADMIN_RECEIVER_COMPONENT)).isFalse();
    }

}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AdminConfiguredNetworksTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DeviceIdAttestationTest"	"testFailsWithoutProfileOwnerIdsGrant"	""	"1: granted"	"([1:/com/android/cts/deviceandprofileowner/DeviceIdAttestationTest.java]:[granted]:[1]:method_text:[eration request succeeds once the profile owner was granted    // access to device identifiers.   ]) :|: public void testFailsWithoutProfileOwnerIdsGrant() {
        KeyGenerationUtils.generateKeyWithDeviceIdAttestationExpectingFailure(mDevicePolicyManager,
                getWho());
    }

    // Test that the same key generation request succeeds once the profile owner was granted
    // access to device identifiers."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DeviceIdAttestationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DeviceIdAttestationTest"	"testSucceedsWithProfileOwnerIdsGrant"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/DeviceIdAttestationTest.java]:[admin]:[1]:method_text:[    }    }    protected ComponentName getWho() {        return ADMIN_RECEIVER_COMPONENT;    }}]) :|: public void testSucceedsWithProfileOwnerIdsGrant() {
        if (mDevicePolicyManager.isDeviceIdAttestationSupported()) {
            KeyGenerationUtils.generateKeyWithDeviceIdAttestationExpectingSuccess(
                    mDevicePolicyManager, getWho());
        }
    }

    protected ComponentName getWho() {
        return ADMIN_RECEIVER_COMPONENT;
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DeviceIdAttestationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.GetPasswordExpirationTest"	"testGetPasswordExpiration"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/GetPasswordExpirationTest.java]:[admin]:[3]:method_text:[yManager.getPasswordExpiration(ADMIN_RECEIVER_COMPONENT))                .isEqualTo(0L);    }   ]) :|: public void testGetPasswordExpiration() throws Exception {
        final long[] testTimeouts = new long[] {
                86400000L /* 1 day */, 864000000L /* 10 days */, 8640000000L /* 100 days */};
        for (long testTimeout : testTimeouts) {
            mDevicePolicyManager.setPasswordExpirationTimeout(
                    ADMIN_RECEIVER_COMPONENT, testTimeout);
            checkPasswordExpiration(""Password expiration time incorrect"", testTimeout, 5000);
        }
        // Set password expiration timeout to 0 clears the expiration date.
        mDevicePolicyManager.setPasswordExpirationTimeout(ADMIN_RECEIVER_COMPONENT, 0L);
        assertThat(mDevicePolicyManager.getPasswordExpiration(ADMIN_RECEIVER_COMPONENT))
                .isEqualTo(0L);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/GetPasswordExpirationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.GetPasswordExpirationTest"	"testGetPasswordExpirationUpdatedAfterPasswordReset_beforeReset"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/GetPasswordExpirationTest.java]:[admin]:[1]:method_text:[ checkPasswordExpiration(""Password expiration time incorrect"", TIMEOUT_RESET_TEST, 5000);    }   ]) :|: public void testGetPasswordExpirationUpdatedAfterPasswordReset_beforeReset() throws Exception {
        mDevicePolicyManager.setPasswordExpirationTimeout(
                ADMIN_RECEIVER_COMPONENT, TIMEOUT_RESET_TEST);
        checkPasswordExpiration(""Password expiration time incorrect"", TIMEOUT_RESET_TEST, 5000);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/GetPasswordExpirationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.GetPasswordExpirationTest"	"testGetPasswordExpirationUpdatedAfterPasswordReset_afterReset"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/GetPasswordExpirationTest.java]:[admin]:[1]:method_text:[olicyManager.getPasswordExpiration(                ADMIN_RECEIVER_COMPONENT)) <= tolerance);    }]) :|: public void testGetPasswordExpirationUpdatedAfterPasswordReset_afterReset() throws Exception {
        checkPasswordExpiration(""Password expiration time not refreshed correctly""
                + "" after reseting password"", TIMEOUT_RESET_TEST, 10000);
    }

    private void checkPasswordExpiration(String error, long timeout, long tolerance) {
        assertTrue(error, abs(System.currentTimeMillis() + timeout
                - mDevicePolicyManager.getPasswordExpiration(
                ADMIN_RECEIVER_COMPONENT)) <= tolerance);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/GetPasswordExpirationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.MeteredDataRestrictionTest"	"testSetMeteredDataDisabledPackages"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/MeteredDataRestrictionTest.java]:[admin]:[4]:method_text:[      // has not come up yet.        } while (latestNetId == 0 || latestNetId == oldNetId);    }}]) :|: public void testSetMeteredDataDisabledPackages() {
        final List<String> restrictedPkgs = new ArrayList<>();
        restrictedPkgs.add(METERED_DATA_APP_PKG);
        final List<String> excludedPkgs = mDevicePolicyManager.setMeteredDataDisabledPackages(
                ADMIN_RECEIVER_COMPONENT, restrictedPkgs);
        assertTrue(""Packages not restricted: "" + excludedPkgs, excludedPkgs.isEmpty());

        List<String> actualRestrictedPkgs = mDevicePolicyManager.getMeteredDataDisabledPackages(
                ADMIN_RECEIVER_COMPONENT);
        assertEquals(""Actual restricted pkgs: "" + actualRestrictedPkgs,
                1, actualRestrictedPkgs.size());
        assertTrue(""Actual restricted pkgs: "" + actualRestrictedPkgs,
                actualRestrictedPkgs.contains(METERED_DATA_APP_PKG));
        verifyAppNetworkState(true);

        restrictedPkgs.clear();
        mDevicePolicyManager.setMeteredDataDisabledPackages(ADMIN_RECEIVER_COMPONENT,
                restrictedPkgs);
        actualRestrictedPkgs = mDevicePolicyManager.getMeteredDataDisabledPackages(
                ADMIN_RECEIVER_COMPONENT);
        assertTrue(""Actual restricted pkgs: "" + actualRestrictedPkgs,
                actualRestrictedPkgs.isEmpty());
        verifyAppNetworkState(false);
    }

    private void verifyAppNetworkState(boolean blocked) {
        final Bundle extras = new Bundle();
        extras.putBinder(EXTRA_MESSENGER, mCallbackMessenger.getBinder());
        mNetworkInfos.clear();
        final Intent launchIntent = new Intent()
                .setClassName(METERED_DATA_APP_PKG, METERED_DATA_APP_MAIN_ACTIVITY)
                .putExtras(extras)
                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        mContext.startActivity(launchIntent);

        try {
            final NetworkInfo networkInfo = mNetworkInfos.poll(WAIT_FOR_NETWORK_INFO_TIMEOUT_SEC,
                    TimeUnit.SECONDS);
            if (networkInfo == null) {
                fail(""Timed out waiting f"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/MeteredDataRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SecurityLoggingTest"	"testSetDelegateScope_noDelegation"	""	"2: UserManager.DISALLOW admin"	"([49:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[admin]:[49]:method_text:[vents.size() + "" events):"");        events.forEach((event) -> Log.d(TAG, toString(event)));    }}]) :|: public void testSetDelegateScope_noDelegation() {
        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, DELEGATE_APP_PKG,
                Arrays.asList());

        assertThat(mDevicePolicyManager.getDelegatedScopes(
                ADMIN_RECEIVER_COMPONENT, DELEGATE_APP_PKG))
                .doesNotContain(DELEGATION_SECURITY_LOGGING);
    }

    private void generateKey(String keyAlias) throws Exception {
        final KeyPairGenerator generator = KeyPairGenerator.getInstance(""RSA"", ""AndroidKeyStore"");
        generator.initialize(
                new KeyGenParameterSpec.Builder(keyAlias, KeyProperties.PURPOSE_SIGN).build());
        final KeyPair keyPair = generator.generateKeyPair();
        assertNotNull(keyPair);
    }

    private void verifyKeyGeneratedEventPresent(List<SecurityEvent> events, String alias) {
        findEvent(""key generated"", events,
                e -> e.getTag() == TAG_KEY_GENERATED
                        && getInt(e, SUCCESS_INDEX) == SUCCESS_VALUE
                        && getString(e, ALIAS_INDEX).contains(alias)
                        && getInt(e, UID_INDEX) == Process.myUid());
    }

    private void importKey(String alias) throws Exception{
        final KeyStore ks = KeyStore.getInstance(""AndroidKeyStore"");
        ks.load(null);
        ks.setEntry(alias, new KeyStore.SecretKeyEntry(new SecretKeySpec(new byte[32], ""AES"")),
                new KeyProtection.Builder(KeyProperties.PURPOSE_ENCRYPT).build());
    }

    private void verifyKeyImportedEventPresent(List<SecurityEvent> events, String alias) {
        findEvent(""key imported"", events,
                e -> e.getTag() == TAG_KEY_IMPORT
                        && getInt(e, SUCCESS_INDEX) == SUCCESS_VALUE
                        && getString(e, ALIAS_INDEX).contains(alias)
                        && getInt(e, UID_INDEX) == Process.myUid());
    }

    private void deleteKey(String keyAlias) throws Exception {
        final KeyStore ks = KeyStore.getInst"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SecurityLoggingTest"	"testRetrievingSecurityLogsThrowsSecurityException"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[admin]:[1]:method_text:[ there's one user on the device or     * all secondary users / profiles are affiliated.     */   ]) :|: public void testRetrievingSecurityLogsThrowsSecurityException() {
        try {
            mDevicePolicyManager.retrieveSecurityLogs(ADMIN_RECEIVER_COMPONENT);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }
    }

    /**
     * Test: retrieving previous security logs can only be done if there's one user on the device or
     * all secondary users / profiles are affiliated.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SecurityLoggingTest"	"testRetrievingPreviousSecurityLogsThrowsSecurityException"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[admin]:[1]:method_text:[ed as a result of host     * side actions and by {@link #testGenerateLogs()} are there.     */   ]) :|: public void testRetrievingPreviousSecurityLogsThrowsSecurityException() {
        try {
            mDevicePolicyManager.retrievePreRebootSecurityLogs(ADMIN_RECEIVER_COMPONENT);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }
    }

    /**
     * Test: retrieves security logs and verifies that all events generated as a result of host
     * side actions and by {@link #testGenerateLogs()} are there.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SecurityLoggingTest"	"testVerifyGeneratedLogs"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[admin]:[2]:method_text:[            }        }    }    /**     * Generates events for positive test cases.     */   ]) :|: public void testVerifyGeneratedLogs() throws Exception {
        forceSecurityLogs();

        final List<SecurityEvent> events = getEvents();

        verifyAutomaticEventsPresent(events);
        verifyKeystoreEventsPresent(events);
        verifyKeyChainEventsPresent(events);
        verifyAdminEventsPresent(events);
        verifyAdbShellCommand(events); // Event generated from host side logic
        if (mDevicePolicyManager.isOrganizationOwnedDeviceWithManagedProfile()) {
            verifyEventsRedacted(events);
        }
    }

    private void forceSecurityLogs() throws Exception {
        UiDevice.getInstance(InstrumentationRegistry.getInstrumentation())
                .executeShellCommand(""dpm force-security-logs"");
    }

    private void verifyAutomaticEventsPresent(List<SecurityEvent> events) {
        verifyOsStartupEventPresent(events);
        verifyLoggingStartedEventPresent(events);
        verifyCryptoSelfTestEventPresent(events);
    }

    private void verifyKeyChainEventsPresent(List<SecurityEvent> events) {
        verifyCertInstalledEventPresent(events);
        verifyCertUninstalledEventPresent(events);
    }

    private void verifyKeystoreEventsPresent(List<SecurityEvent> events) {
        verifyKeyGeneratedEventPresent(events, GENERATED_KEY_ALIAS);
        verifyKeyDeletedEventPresent(events, GENERATED_KEY_ALIAS);
        verifyKeyImportedEventPresent(events, IMPORTED_KEY_ALIAS);
        verifyKeyDeletedEventPresent(events, IMPORTED_KEY_ALIAS);
    }

    private void verifyAdminEventsPresent(List<SecurityEvent> events) {
        if (mHasSecureLockScreen) {
            verifyPasswordComplexityEventsPresent(events);
            verifyNewStylePasswordComplexityEventPresent(events);
        }
        verifyLockingPolicyEventsPresent(events);
        verifyUserRestrictionEventsPresent(events);
        verifyCameraPolicyEvents(events);
    }
    private void verifyAdbShellCommand(List<SecurityEvent> events) {
        // Won't be able to loca"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SecurityLoggingTest"	"testGenerateLogs"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[admin]:[3]:method_text:[tches. Shared preference     * is used to store these numbers between test invocations.     */   ]) :|: public void testGenerateLogs() throws Exception {
        generateKeystoreEvents();
        generateKeyChainEvents();
        generateAdminEvents();
    }

    private void generateKeyChainEvents() {
        installCaCert();
        uninstallCaCert();
    }

    private void generateKeystoreEvents() throws Exception {
        generateKey(GENERATED_KEY_ALIAS);
        deleteKey(GENERATED_KEY_ALIAS);
        importKey(IMPORTED_KEY_ALIAS);
        deleteKey(IMPORTED_KEY_ALIAS);
    }

    private void generateAdminEvents() {
        if (mHasSecureLockScreen) {
            generatePasswordComplexityEvents();
            generateNewStylePasswordComplexityEvents();
        }
        generateLockingPolicyEvents();
        generateUserRestrictionEvents();
        generateCameraPolicyEvents();
    }

    /**
     * Fetches and checks the events.
     */
    private List<SecurityEvent> getEvents() throws Exception {
        List<SecurityEvent> events = null;
        // Retry once after seeping for 1 second, in case ""dpm force-security-logs"" hasn't taken
        // effect just yet.
        for (int i = 0; i < 2 && events == null; i++) {
            events = mDevicePolicyManager.retrieveSecurityLogs(ADMIN_RECEIVER_COMPONENT);
            Log.v(TAG, ""getEvents(), batch #"" + i + "": ""  + (events == null ? -1 : events.size())
                    + "" events"");
            if (events == null) sleep(1000);
        }

        Log.d(TAG, ""getEvents(): received "" + events.size() + "" events"");
        if (VERBOSE) dumpSecurityLogs(events);

        try {
            verifySecurityLogs(events);
        } catch (AssertionFailedError e) {
            dumpSecurityLogs(events);
            throw e;
        }

        return events;
    }

    /**
     * Test: check that there are no gaps between ids in two consecutive batches. Shared preference
     * is used to store these numbers between test invocations.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SecurityLoggingTest"	"testEnablingSecurityLogging"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[admin]:[3]:method_text:[g. This test has a side effect: security logging is     * disabled after its execution.     */   ]) :|: public void testEnablingSecurityLogging() {
        assertFalse(mDevicePolicyManager.isSecurityLoggingEnabled(ADMIN_RECEIVER_COMPONENT));
        mDevicePolicyManager.setSecurityLoggingEnabled(ADMIN_RECEIVER_COMPONENT, true);
        assertTrue(mDevicePolicyManager.isSecurityLoggingEnabled(ADMIN_RECEIVER_COMPONENT));
    }

    /**
     * Test: Test disabling security logging. This test has a side effect: security logging is
     * disabled after its execution.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SecurityLoggingTest"	"testDisablingSecurityLogging"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[admin]:[3]:method_text:[ng security logs should be rate limited - subsequent attempts should return     * null.     */   ]) :|: public void testDisablingSecurityLogging() {
        mDevicePolicyManager.setSecurityLoggingEnabled(ADMIN_RECEIVER_COMPONENT, false);
        assertFalse(mDevicePolicyManager.isSecurityLoggingEnabled(ADMIN_RECEIVER_COMPONENT));

        // Verify that logs are actually not available.
        assertNull(mDevicePolicyManager.retrieveSecurityLogs(ADMIN_RECEIVER_COMPONENT));
    }

    /**
     * Test: retrieving security logs should be rate limited - subsequent attempts should return
     * null.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SecurityLoggingTest"	"testSecurityLoggingRetrievalRateLimited"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[admin]:[3]:method_text:[ssertNull(mDevicePolicyManager.retrieveSecurityLogs(ADMIN_RECEIVER_COMPONENT));        }    }   ]) :|: public void testSecurityLoggingRetrievalRateLimited() {
        final List<SecurityEvent> logs = mDevicePolicyManager.retrieveSecurityLogs(
                ADMIN_RECEIVER_COMPONENT);
        // if logs is null it means that that attempt was rate limited => test PASS
        if (logs != null) {
            assertNull(mDevicePolicyManager.retrieveSecurityLogs(ADMIN_RECEIVER_COMPONENT));
            assertNull(mDevicePolicyManager.retrieveSecurityLogs(ADMIN_RECEIVER_COMPONENT));
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SecurityLoggingTest"	"testSetDelegateScope_delegationSecurityLogging"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[admin]:[2]:method_text:[      ADMIN_RECEIVER_COMPONENT, DELEGATE_APP_PKG)).contains(DELEGATION_SECURITY_LOGGING);    }   ]) :|: public void testSetDelegateScope_delegationSecurityLogging() {
        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, DELEGATE_APP_PKG,
                Arrays.asList(DELEGATION_SECURITY_LOGGING));

        assertThat(mDevicePolicyManager.getDelegatedScopes(
                ADMIN_RECEIVER_COMPONENT, DELEGATE_APP_PKG)).contains(DELEGATION_SECURITY_LOGGING);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PolicyTransparencyTest"	"testUserRestrictions"	""	"2: UserManager.DISALLOW admin"	"([6:/com/android/cts/deviceandprofileowner/PolicyTransparencyTest.java]:[admin]:[6]:method_text:[t = mDevicePolicyManager.createAdminSupportIntent(restriction);        assertNull(intent);    }}]) :|: public void testUserRestrictions() throws Exception {
        // Test with a few random user restrictions:
        runTestForRestriction(UserManager.DISALLOW_ADJUST_VOLUME);
        runTestForRestriction(UserManager.DISALLOW_CONFIG_WIFI);
        runTestForRestriction(UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE);
    }

    private void runTestForRestriction(String restriction) throws Exception {
        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);

        Intent intent = mDevicePolicyManager.createAdminSupportIntent(restriction);
        assertNotNull(intent);
        assertEquals(ADMIN_RECEIVER_COMPONENT,
                (ComponentName) intent.getParcelableExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN));
        assertEquals(restriction, intent.getStringExtra(DevicePolicyManager.EXTRA_RESTRICTION));

        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);
        intent = mDevicePolicyManager.createAdminSupportIntent(restriction);
        assertNull(intent);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PolicyTransparencyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PolicyTransparencyTest"	"testCameraDisabled"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/PolicyTransparencyTest.java]:[admin]:[6]:method_text:[(                DevicePolicyManager.POLICY_DISABLE_CAMERA);        assertNull(intent);    }   ]) :|: public void testCameraDisabled() throws Exception {
        mDevicePolicyManager.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, true);

        Intent intent = mDevicePolicyManager.createAdminSupportIntent(
                DevicePolicyManager.POLICY_DISABLE_CAMERA);
        assertNotNull(intent);
        assertEquals(ADMIN_RECEIVER_COMPONENT,
                (ComponentName) intent.getParcelableExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN));
        assertEquals(DevicePolicyManager.POLICY_DISABLE_CAMERA,
                intent.getStringExtra(DevicePolicyManager.EXTRA_RESTRICTION));

        mDevicePolicyManager.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, false);
        intent = mDevicePolicyManager.createAdminSupportIntent(
                DevicePolicyManager.POLICY_DISABLE_CAMERA);
        assertNull(intent);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PolicyTransparencyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PolicyTransparencyTest"	"testScreenCaptureDisabled"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/PolicyTransparencyTest.java]:[admin]:[6]:method_text:[          DevicePolicyManager.POLICY_DISABLE_SCREEN_CAPTURE);        assertNull(intent);    }   ]) :|: public void testScreenCaptureDisabled() throws Exception {
        mDevicePolicyManager.setScreenCaptureDisabled(ADMIN_RECEIVER_COMPONENT, true);

        Intent intent = mDevicePolicyManager.createAdminSupportIntent(
                DevicePolicyManager.POLICY_DISABLE_SCREEN_CAPTURE);
        assertNotNull(intent);
        assertEquals(ADMIN_RECEIVER_COMPONENT,
                (ComponentName) intent.getParcelableExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN));
        assertEquals(DevicePolicyManager.POLICY_DISABLE_SCREEN_CAPTURE,
                intent.getStringExtra(DevicePolicyManager.EXTRA_RESTRICTION));

        mDevicePolicyManager.setScreenCaptureDisabled(ADMIN_RECEIVER_COMPONENT, false);
        intent = mDevicePolicyManager.createAdminSupportIntent(
                DevicePolicyManager.POLICY_DISABLE_SCREEN_CAPTURE);
        assertNull(intent);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PolicyTransparencyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AutofillRestrictionsTest"	"disableService"	""	"2: UserManager.DISALLOW admin"	"([2:/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java]:[admin]:[2]:method_text:[riction(ADMIN_RECEIVER_COMPONENT, DISALLOW_AUTOFILL);        }        super.tearDown();    }   ]) :|: public void test/*
 *.
 */

package com.android.cts.deviceandprofileowner;

import static android.os.UserManager.DISALLOW_AUTOFILL;
import static android.provider.Settings.Secure.AUTOFILL_SERVICE;
import static android.provider.Settings.Secure.USER_SETUP_COMPLETE;

import android.content.Intent;

public class AutofillRestrictionsTest extends BaseDeviceAdminTest {

    private static final String SERVICE_NAME =
            ""com.android.cts.devicepolicy.autofillapp/.SimpleAutofillService"";
    private static final String AUTOFILL_PACKAGE_NAME = ""com.android.cts.devicepolicy.autofillapp"";
    private static final String AUTOFILL_ACTIVITY_NAME = AUTOFILL_PACKAGE_NAME + "".SimpleActivity"";

    // Before, autofill_service was a cloned service, so it was only set in the default user,
    // and we were using a guard to decide how to set it.
    // Autofill_service has been changed now to be a per-user service so we are currently
    // setting this to false.
    private final boolean USES_CLONED_SETTINGS = false;

    int mUserId;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        mUserId = getInstrumentation().getContext().getUserId();
    }

    @Override
    protected void tearDown() throws Exception {
        try {
            disableService();
        } finally {
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, DISALLOW_AUTOFILL);
        }
        super.tearDown();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AutofillRestrictionsTest"	"testDisallowAutofill_allowed"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java]:[admin]:[1]:method_text:[+ mUserId + "": "" + expected                + ""; actual: "" + actual + "" after 0.5 seconds"");    }}]) :|: public void testDisallowAutofill_allowed() throws Exception {
        enableService();

        final boolean enabledBefore = launchActivityAndGetEnabled();
        assertTrue(enabledBefore);

        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, DISALLOW_AUTOFILL);

        // Must try a couple times because it will be disabled asynchronously.
        for (int i = 1; i <= 15; i++) {
            final boolean disabledAfter = !launchActivityAndGetEnabled();
            if (disabledAfter) {
                return;
            }
            Thread.sleep(100);
        }
        fail(""Not disabled after a period of time"");
    }

    private boolean launchActivityAndGetEnabled() throws Exception {
        final Intent launchIntent = new Intent();
        launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        launchIntent.setClassName(AUTOFILL_PACKAGE_NAME, AUTOFILL_ACTIVITY_NAME);
        final AutofillActivity activity = launchActivity(""com.android.cts.deviceandprofileowner"",
                AutofillActivity.class, null);
        return activity.isAutofillEnabled();
    }

    private void enableService() throws Exception {
        runShellCommand(""settings put secure --user %d %s %d default"",
                mUserId, USER_SETUP_COMPLETE, 1);

        if (USES_CLONED_SETTINGS) {
            runShellCommand(""settings put secure %s %s default"", AUTOFILL_SERVICE, SERVICE_NAME);
        } else {
            runShellCommand(""settings put --user %d secure %s %s default"",
                    mUserId, AUTOFILL_SERVICE, SERVICE_NAME);
        }
        waitForServiceSettingSaved(SERVICE_NAME);
    }

    private void disableService() {
        if (USES_CLONED_SETTINGS) {
            runShellCommand(""settings delete secure %s"", AUTOFILL_SERVICE);
        } else {
            runShellCommand(""settings delete --user %d secure %s"", mUserId, AUTOFILL_SERVICE);
        }
    }

    private void waitForServiceSettingSaved(String expected) throws Exception {"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ApplicationRestrictionsIsCallerDelegateHelper"	"isCallerApplicationRestrictionsManagingPackage"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsIsCallerDelegateHelper.java]:[admin]:[2]:method_text:[st {    private static final String APP_RESTRICTIONS_TARGET_PKG = ""com.android.cts.delegate"";   ]) :|: public void test/*
 *.
 */
package com.android.cts.deviceandprofileowner;

import static com.google.common.truth.Truth.assertThat;

import android.app.admin.DevicePolicyManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.test.InstrumentationTestCase;

/**
 * Helper to set app restriction managing package for
 * {@link DevicePolicyManager#isCallerApplicationRestrictionsManagingPackage()}.
 * <p>The method name starts with ""test"" to be recognized by {@link InstrumentationTestCase}.
 */
public class ApplicationRestrictionsIsCallerDelegateHelper extends BaseDeviceAdminTest {

    private static final String APP_RESTRICTIONS_TARGET_PKG = ""com.android.cts.delegate"";"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationRestrictionsIsCallerDelegateHelper.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ApplicationRestrictionsIsCallerDelegateHelper"	"testSetApplicationRestrictionsManagingPackageToDelegate"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsIsCallerDelegateHelper.java]:[admin]:[2]:method_text:[nager.getApplicationRestrictionsManagingPackage(                ADMIN_RECEIVER_COMPONENT));    }}]) :|: public void testSetApplicationRestrictionsManagingPackageToDelegate()
            throws NameNotFoundException {
        mDevicePolicyManager.setApplicationRestrictionsManagingPackage(
            ADMIN_RECEIVER_COMPONENT, APP_RESTRICTIONS_TARGET_PKG);
        assertThat(APP_RESTRICTIONS_TARGET_PKG)
            .isEqualTo(mDevicePolicyManager.getApplicationRestrictionsManagingPackage(
                ADMIN_RECEIVER_COMPONENT));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationRestrictionsIsCallerDelegateHelper.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.OrgOwnedProfileOwnerParentTest"	"testUnableToAddAndClearBaseUserRestrictions_onParent"	""	"2: UserManager.DISALLOW admin"	"([2:/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java]:[admin]:[2]:method_text:[ger.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,                        restriction));    }   ]) :|: public void testUnableToAddAndClearBaseUserRestrictions_onParent() {
        testUnableToAddBaseUserRestriction(UserManager.DISALLOW_REMOVE_MANAGED_PROFILE);
        testUnableToClearBaseUserRestriction(UserManager.DISALLOW_REMOVE_MANAGED_PROFILE);
        testUnableToAddBaseUserRestriction(UserManager.DISALLOW_ADD_USER);
        testUnableToClearBaseUserRestriction(UserManager.DISALLOW_ADD_USER);
    }

    private void testUnableToAddBaseUserRestriction(String restriction) {
        assertThrows(SecurityException.class,
                () -> mParentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                        restriction));
    }

    private void testUnableToClearBaseUserRestriction(String restriction) {
        assertThrows(SecurityException.class,
                () -> mParentDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                        restriction));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.OrgOwnedProfileOwnerParentTest"	"testAddGetAndClearUserRestriction_onParent"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java]:[admin]:[4]:method_text:[ns(ADMIN_RECEIVER_COMPONENT);        assertThat(restrictions.get(restriction)).isNull();    }   ]) :|: public void testAddGetAndClearUserRestriction_onParent() {
        int locationMode = 1;
        try {
            locationMode = runWithShellPermissionIdentity(
                    () -> Settings.Secure.getIntForUser(mContentResolver,
                            Settings.Secure.LOCATION_MODE, UserHandle.USER_SYSTEM));

            for (String restriction : PROFILE_OWNER_ORGANIZATION_OWNED_GLOBAL_RESTRICTIONS) {
                testAddGetAndClearUserRestriction_onParent(restriction);
            }
            for (String restriction : PROFILE_OWNER_ORGANIZATION_OWNED_LOCAL_RESTRICTIONS) {
                testAddGetAndClearUserRestriction_onParent(restriction);
            }
        } finally {
            // Restore the location mode setting after adding and removing the
            // DISALLOW_SHARE_LOCATION user restriction. This is because, modifying this user
            // restriction causes the location mode setting to be turned off.
            final int finalLocationMode = locationMode;
            runWithShellPermissionIdentity(() -> Settings.Secure.putIntForUser(mContentResolver,
                    Settings.Secure.LOCATION_MODE, finalLocationMode, UserHandle.USER_SYSTEM));
        }
    }

    private void testAddGetAndClearUserRestriction_onParent(String restriction) {
        mParentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);

        Bundle restrictions = mParentDevicePolicyManager.getUserRestrictions(
                ADMIN_RECEIVER_COMPONENT);
        assertThat(restrictions.get(restriction)).isNotNull();

        mParentDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);

        restrictions = mParentDevicePolicyManager.getUserRestrictions(ADMIN_RECEIVER_COMPONENT);
        assertThat(restrictions.get(restriction)).isNull();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.OrgOwnedProfileOwnerParentTest"	"testCanSetPasswordQualityOnParent"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java]:[admin]:[3]:method_text:[uality(ADMIN_RECEIVER_COMPONENT,                    PASSWORD_QUALITY_UNSPECIFIED);        }    }]) :|: public void testCanSetPasswordQualityOnParent() {
        mParentDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                PASSWORD_QUALITY_COMPLEX);
        try {
            assertThat(mParentDevicePolicyManager.getPasswordQuality(
                    ADMIN_RECEIVER_COMPONENT)).isEqualTo(PASSWORD_QUALITY_COMPLEX);
            assertThat(mParentDevicePolicyManager.isActivePasswordSufficient()).isFalse();
        } finally {
            // Cleanup
            mParentDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                    PASSWORD_QUALITY_UNSPECIFIED);
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.RequiredStrongAuthTimeoutTest"	"testSetRequiredStrongAuthTimeout"	""	"1: admin"	"([17:/com/android/cts/deviceandprofileowner/RequiredStrongAuthTimeoutTest.java]:[admin]:[17]:method_text:[throw IllegalArgumentException"");        } catch (IllegalArgumentException iae) {        }    }}]) :|: public void testSetRequiredStrongAuthTimeout() throws Exception {
        // aggregation should be the default if unset by any admin
        assertEquals(mDevicePolicyManager.getRequiredStrongAuthTimeout(null),
                DEFAULT_STRONG_AUTH_TIMEOUT_MS);

        // admin not participating by default
        assertEquals(mDevicePolicyManager.getRequiredStrongAuthTimeout(ADMIN), 0);

        //clamping from the top
        mDevicePolicyManager.setRequiredStrongAuthTimeout(ADMIN,
                DEFAULT_STRONG_AUTH_TIMEOUT_MS + ONE_MINUTE);
        assertEquals(mDevicePolicyManager.getRequiredStrongAuthTimeout(ADMIN),
                DEFAULT_STRONG_AUTH_TIMEOUT_MS);
        assertEquals(mDevicePolicyManager.getRequiredStrongAuthTimeout(null),
                DEFAULT_STRONG_AUTH_TIMEOUT_MS);

        // 0 means the admin is not participating, so default should be returned
        mDevicePolicyManager.setRequiredStrongAuthTimeout(ADMIN, 0);
        assertEquals(mDevicePolicyManager.getRequiredStrongAuthTimeout(ADMIN), 0);
        assertEquals(mDevicePolicyManager.getRequiredStrongAuthTimeout(null),
                DEFAULT_STRONG_AUTH_TIMEOUT_MS);

        // clamping from the bottom
        mDevicePolicyManager.setRequiredStrongAuthTimeout(ADMIN,
                MINIMUM_STRONG_AUTH_TIMEOUT_MS - ONE_MINUTE);
        assertEquals(mDevicePolicyManager.getRequiredStrongAuthTimeout(ADMIN),
                MINIMUM_STRONG_AUTH_TIMEOUT_MS);
        assertEquals(mDevicePolicyManager.getRequiredStrongAuthTimeout(null),
                MINIMUM_STRONG_AUTH_TIMEOUT_MS);

        // values within range
        mDevicePolicyManager.setRequiredStrongAuthTimeout(ADMIN, MIN_PLUS_ONE_MINUTE);
        assertEquals(mDevicePolicyManager.getRequiredStrongAuthTimeout(ADMIN), MIN_PLUS_ONE_MINUTE);
        assertEquals(mDevicePolicyManager.getRequiredStrongAuthTimeout(null), MIN_PLUS_ONE_MINUTE);

        mDevicePolicyManager.setRequiredStrongAuthTimeout(ADMIN, MAX_MINUS_ONE_MINUTE);"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/RequiredStrongAuthTimeoutTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegatedCertInstallerHelper"	"testManualSetCertInstallerDelegate"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerHelper.java]:[admin]:[3]:method_text:[_COMPONENT,                DELEGATION_CERT_SELECTION).contains(CERT_INSTALLER_PACKAGE));    }   ]) :|: public void testManualSetCertInstallerDelegate() {
        mDpm.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, CERT_INSTALLER_PACKAGE,
                CERT_INSTALL_SCOPES);
        assertTrue(mDpm.getDelegatePackages(ADMIN_RECEIVER_COMPONENT,
                DELEGATION_CERT_INSTALL).contains(CERT_INSTALLER_PACKAGE));
        assertTrue(mDpm.getDelegatePackages(ADMIN_RECEIVER_COMPONENT,
                DELEGATION_CERT_SELECTION).contains(CERT_INSTALLER_PACKAGE));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerHelper.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegatedCertInstallerHelper"	"testManualClearCertInstallerDelegate"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerHelper.java]:[admin]:[3]:method_text:[_COMPONENT,                DELEGATION_CERT_SELECTION).contains(CERT_INSTALLER_PACKAGE));    }   ]) :|: public void testManualClearCertInstallerDelegate() {
        mDpm.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, CERT_INSTALLER_PACKAGE, Arrays.asList());
        assertFalse(mDpm.getDelegatePackages(ADMIN_RECEIVER_COMPONENT,
                DELEGATION_CERT_INSTALL).contains(CERT_INSTALLER_PACKAGE));
        assertFalse(mDpm.getDelegatePackages(ADMIN_RECEIVER_COMPONENT,
                DELEGATION_CERT_SELECTION).contains(CERT_INSTALLER_PACKAGE));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerHelper.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegatedCertInstallerHelper"	"testManualGenerateKeyAndGrantAccess"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerHelper.java]:[admin]:[2]:method_text:[MIN_RECEIVER_COMPONENT, PRE_SELECTED_ALIAS,                    CERT_INSTALLER_PACKAGE));    }   ]) :|: public void testManualGenerateKeyAndGrantAccess() {
        KeyGenerationUtils.generateRsaKey(mDpm, ADMIN_RECEIVER_COMPONENT, PRE_SELECTED_ALIAS);
        assertTrue(mDpm.grantKeyPairToApp(ADMIN_RECEIVER_COMPONENT, PRE_SELECTED_ALIAS,
                    CERT_INSTALLER_PACKAGE));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerHelper.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegatedCertInstallerHelper"	"testManualRemoveKeyGrant"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerHelper.java]:[admin]:[1]:method_text:[p(ADMIN_RECEIVER_COMPONENT, PRE_SELECTED_ALIAS,                CERT_INSTALLER_PACKAGE));    }   ]) :|: public void testManualRemoveKeyGrant() {
        assertTrue(mDpm.revokeKeyPairFromApp(ADMIN_RECEIVER_COMPONENT, PRE_SELECTED_ALIAS,
                CERT_INSTALLER_PACKAGE));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerHelper.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegatedCertInstallerHelper"	"testManualClearGeneratedKey"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerHelper.java]:[admin]:[1]:method_text:[ey() {        assertTrue(mDpm.removeKeyPair(ADMIN_RECEIVER_COMPONENT, PRE_SELECTED_ALIAS));    }}]) :|: public void testManualClearGeneratedKey() {
        assertTrue(mDpm.removeKeyPair(ADMIN_RECEIVER_COMPONENT, PRE_SELECTED_ALIAS));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerHelper.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.TrustAgentInfoTest"	"PersistableBundle"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/TrustAgentInfoTest.java]:[admin]:[5]:method_text:[           DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_NONE);        super.tearDown();    }   ]) :|: public void test/*
 *.
 */

package com.android.cts.deviceandprofileowner;

import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.os.PersistableBundle;

import java.util.List;


public class TrustAgentInfoTest extends BaseDeviceAdminTest {
    private static final String BUNDLE_KEY = ""testing"";
    private static final String BUNDLE_VALUE = ""value"";
    private static final PersistableBundle CONFIG = new PersistableBundle();
    private static final ComponentName TRUST_AGENT_COMPONENT =
            new ComponentName(""com.trustagent"", ""com.trustagent.xxx"");
    private static final ComponentName NOT_CONFIGURED_TRUST_AGENT_COMPONENT =
            new ComponentName(""com.trustagent.not_configured"", ""com.trustagent.xxx"");

    static {
        CONFIG.putString(BUNDLE_KEY, BUNDLE_VALUE);
    }

    @Override
    protected void tearDown() throws Exception {
        mDevicePolicyManager.setTrustAgentConfiguration(ADMIN_RECEIVER_COMPONENT,
                TRUST_AGENT_COMPONENT, null);
        assertNull(mDevicePolicyManager.getTrustAgentConfiguration(
                ADMIN_RECEIVER_COMPONENT, TRUST_AGENT_COMPONENT));
        mDevicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_NONE);
        super.tearDown();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/TrustAgentInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.TrustAgentInfoTest"	"testSetAndGetTrustAgentConfiguration"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/TrustAgentInfoTest.java]:[admin]:[3]:method_text:[e bundle = actual.get(0);        assertEquals(BUNDLE_VALUE, bundle.getString(BUNDLE_KEY));    }}]) :|: public void testSetAndGetTrustAgentConfiguration() {
        // Set the config
        mDevicePolicyManager.setTrustAgentConfiguration(ADMIN_RECEIVER_COMPONENT,
                TRUST_AGENT_COMPONENT, CONFIG);
        // Should able to get the config just set.
        List<PersistableBundle> configs =
                mDevicePolicyManager.getTrustAgentConfiguration(
                        ADMIN_RECEIVER_COMPONENT, TRUST_AGENT_COMPONENT);
        assertPersistableBundleList(configs);
        // Try to get the config of an trust agent that is not configured.
        configs = mDevicePolicyManager
                .getTrustAgentConfiguration(null, NOT_CONFIGURED_TRUST_AGENT_COMPONENT);
        assertNull(configs);
        // Try to get the aggregated list when trust agents is not disabled.
        configs = mDevicePolicyManager
                .getTrustAgentConfiguration(null, TRUST_AGENT_COMPONENT);
        assertNull(configs);
        // Try to get the aggregated list when trust agents is disabled.
        mDevicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_TRUST_AGENTS);
        // Try to get the aggregated list of a trust agent that is not configured.
        configs = mDevicePolicyManager
                .getTrustAgentConfiguration(null, NOT_CONFIGURED_TRUST_AGENT_COMPONENT);
        assertNull(configs);
        configs = mDevicePolicyManager
                .getTrustAgentConfiguration(null, TRUST_AGENT_COMPONENT);
        assertPersistableBundleList(configs);
    }

    private static void assertPersistableBundleList(List<PersistableBundle> actual) {
        assertNotNull(actual);
        assertEquals(1, actual.size());
        PersistableBundle bundle = actual.get(0);
        assertEquals(BUNDLE_VALUE, bundle.getString(BUNDLE_KEY));
    }

}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/TrustAgentInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testCanInstallAndRemoveValidRsaKeypair"	""	"1: granted"	"([3:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[granted]:[3]:method_text:[      }        // Verify alias is actually deleted.        assertGranted(alias, false);    }   ]) :|: public void testCanInstallAndRemoveValidRsaKeypair() throws Exception {
        final String alias = ""com.android.test.valid-rsa-key-1"";

        // Install keypair.
        assertThat(mDevicePolicyManager.installKeyPair(getWho(), mFakePrivKey, mFakeCert, alias))
                .isTrue();
        try {
            // Request and retrieve using the alias.
            assertGranted(alias, false);
            assertThat(new KeyChainAliasFuture(alias).get()).isEqualTo(alias);
            assertGranted(alias, true);

            // Verify key is at least something like the one we put in.
            assertThat(KeyChain.getPrivateKey(mActivity, alias).getAlgorithm()).isEqualTo(""RSA"");
        } finally {
            // Delete regardless of whether the test succeeded.
            assertThat(mDevicePolicyManager.removeKeyPair(getWho(), alias)).isTrue();
        }
        // Verify alias is actually deleted.
        assertGranted(alias, false);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testCanInstallWithAutomaticAccess"	""	"1: granted"	"([6:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[granted]:[6]:method_text:[n.get(i - 1).verify(certChain.get(i).getPublicKey());        }        return certChain;    }   ]) :|: public void testCanInstallWithAutomaticAccess() throws Exception {
        final String grant = ""com.android.test.autogrant-key-1"";
        final String withhold = ""com.android.test.nongrant-key-1"";

        // Install keypairs.
        assertThat(
                mDevicePolicyManager.installKeyPair(
                        getWho(), mFakePrivKey, new Certificate[] {mFakeCert}, grant, true))
                .isTrue();
        assertThat(
                mDevicePolicyManager.installKeyPair(
                        getWho(), mFakePrivKey, new Certificate[] {mFakeCert}, withhold, false))
                .isTrue();
        try {
            // Verify only the requested key was actually granted.
            assertGranted(grant, true);
            assertGranted(withhold, false);

            // Verify the granted key is actually obtainable in PrivateKey form.
            assertThat(KeyChain.getPrivateKey(mActivity, grant).getAlgorithm()).isEqualTo(""RSA"");
        } finally {
            // Delete both keypairs.
            assertThat(mDevicePolicyManager.removeKeyPair(getWho(), grant)).isTrue();
            assertThat(mDevicePolicyManager.removeKeyPair(getWho(), withhold)).isTrue();
        }
        // Verify they're actually gone.
        assertGranted(grant, false);
        assertGranted(withhold, false);
    }

    private List<Certificate> loadCertificateChain(String assetName) throws Exception {
        final Collection<Certificate> certs = loadCertificatesFromAsset(assetName);
        final ArrayList<Certificate> certChain = new ArrayList(certs);
        // Check the cert chain
        assertThat(certs.size()).isGreaterThan(1);
        for (int i = 1; i < certChain.size(); i++) {
            certChain.get(i - 1).verify(certChain.get(i).getPublicKey());
        }
        return certChain;
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testCanInstallCertChain"	""	"1: granted"	"([4:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[granted]:[4]:method_text:[;        }        // Verify they're actually gone.        assertGranted(alias, false);    }   ]) :|: public void testCanInstallCertChain() throws Exception {
        // Use assets/generate-client-cert-chain.sh to regenerate the client cert chain.
        final PrivateKey privKey = loadPrivateKeyFromAsset(""user-cert-chain.key"");
        final Certificate[] certChain = loadCertificateChain(""user-cert-chain.crt"")
                .toArray(new Certificate[0]);
        final String alias = ""com.android.test.clientkeychain"";

        // Install keypairs.
        assertThat(mDevicePolicyManager.installKeyPair(getWho(), privKey, certChain, alias, true))
                .isTrue();
        try {
            // Verify only the requested key was actually granted.
            assertGranted(alias, true);

            // Verify the granted key is actually obtainable in PrivateKey form.
            assertThat(KeyChain.getPrivateKey(mActivity, alias).getAlgorithm()).isEqualTo(""RSA"");

            // Verify the certificate chain is correct
            assertThat(KeyChain.getCertificateChain(mActivity, alias)).isEqualTo(certChain);
        } finally {
            // Delete both keypairs.
            assertThat(mDevicePolicyManager.removeKeyPair(getWho(), alias)).isTrue();
        }
        // Verify they're actually gone.
        assertGranted(alias, false);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testGrantsDoNotPersistBetweenInstallations"	""	"1: granted"	"([3:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[granted]:[3]:method_text:[      assertThat(mDevicePolicyManager.removeKeyPair(getWho(), alias)).isTrue();        }    }   ]) :|: public void testGrantsDoNotPersistBetweenInstallations() throws Exception {
        final String alias = ""com.android.test.persistent-key-1"";

        // Install keypair.
        assertThat(
                mDevicePolicyManager.installKeyPair(
                        getWho(), mFakePrivKey, new Certificate[] {mFakeCert}, alias, true))
                .isTrue();
        try {
            assertGranted(alias, true);
        } finally {
            // Delete and verify.
            assertThat(mDevicePolicyManager.removeKeyPair(getWho(), alias)).isTrue();
        }
        assertGranted(alias, false);

        // Install again.
        assertThat(
                mDevicePolicyManager.installKeyPair(
                        getWho(), mFakePrivKey, new Certificate[] {mFakeCert}, alias, false))
                .isTrue();
        try {
            assertGranted(alias, false);
        } finally {
            // Delete.
            assertThat(mDevicePolicyManager.removeKeyPair(getWho(), alias)).isTrue();
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testNotUserSelectableAliasCanBeChosenViaPolicy"	""	"1: granted"	"([2:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[granted]:[2]:method_text:[_PADDING_RSA_PKCS1)            .setIsStrongBoxBacked(useStrongBox)            .build();    }   ]) :|: public void testNotUserSelectableAliasCanBeChosenViaPolicy() throws Exception {
        final String alias = ""com.android.test.not-selectable-key-1"";

        // Install keypair.
        assertThat(
                mDevicePolicyManager.installKeyPair(
                        getWho(), mFakePrivKey, new Certificate[] {mFakeCert}, alias, 0))
                .isTrue();
        try {
            // Request and retrieve using the alias.
            assertGranted(alias, false);
            assertThat(new KeyChainAliasFuture(alias).get()).isEqualTo(alias);
            assertGranted(alias, true);
        } finally {
            // Delete regardless of whether the test succeeded.
            assertThat(mDevicePolicyManager.removeKeyPair(getWho(), alias)).isTrue();
        }
    }

    byte[] signDataWithKey(String algoIdentifier, PrivateKey privateKey) throws Exception {
        byte[] data = new String(""hello"").getBytes();
        Signature sign = Signature.getInstance(algoIdentifier);
        sign.initSign(privateKey);
        sign.update(data);
        return sign.sign();
    }

    void verifySignature(String algoIdentifier, PublicKey publicKey, byte[] signature)
            throws Exception {
        byte[] data = new String(""hello"").getBytes();
        Signature verify = Signature.getInstance(algoIdentifier);
        verify.initVerify(publicKey);
        verify.update(data);
        assertThat(verify.verify(signature)).isTrue();
    }

    void verifySignatureOverData(String algoIdentifier, KeyPair keyPair) throws Exception {
        verifySignature(algoIdentifier, keyPair.getPublic(),
                signDataWithKey(algoIdentifier, keyPair.getPrivate()));
    }

    private KeyGenParameterSpec buildRsaKeySpec(String alias, boolean useStrongBox) {
        return new KeyGenParameterSpec.Builder(
                alias,
                KeyProperties.PURPOSE_SIGN | KeyProperties.PURPOSE_VERIFY)
            .setKeySize(2048)
            .setDigests(KeyProperties.DIGEST_SHA2"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testGetKeyPairGrants_NotGranted"	""	"1: granted"	"([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[granted]:[1]:method_text:[false);        assertThat(mDevicePolicyManager.getKeyPairGrants(TEST_ALIAS)).isEmpty();    }   ]) :|: public void testGetKeyPairGrants_NotGranted() {
        mDevicePolicyManager.installKeyPair(getWho(), mFakePrivKey, new Certificate[]{mFakeCert},
                TEST_ALIAS, /* requestAccess= */ false);

        assertThat(mDevicePolicyManager.getKeyPairGrants(TEST_ALIAS)).isEmpty();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testGetKeyPairGrants_GrantedAtInstall"	""	"1: granted"	"([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[granted]:[1]:method_text:[               .isEqualTo(Map.of(Process.myUid(), singleton(getWho().getPackageName())));    }   ]) :|: public void testGetKeyPairGrants_GrantedAtInstall() {
        mDevicePolicyManager.installKeyPair(getWho(), mFakePrivKey, new Certificate[]{mFakeCert},
                TEST_ALIAS, /* requestAccess= */ true);

        assertThat(mDevicePolicyManager.getKeyPairGrants(TEST_ALIAS))
                .isEqualTo(Map.of(Process.myUid(), singleton(getWho().getPackageName())));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testGetKeyPairGrants_GrantedExplicitly"	""	"1: granted"	"([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[granted]:[1]:method_text:[               .isEqualTo(Map.of(Process.myUid(), singleton(getWho().getPackageName())));    }   ]) :|: public void testGetKeyPairGrants_GrantedExplicitly() {
        mDevicePolicyManager.installKeyPair(getWho(), mFakePrivKey, new Certificate[]{mFakeCert},
                TEST_ALIAS, /* requestAccess= */ false);
        mDevicePolicyManager.grantKeyPairToApp(getWho(), TEST_ALIAS, getWho().getPackageName());

        assertThat(mDevicePolicyManager.getKeyPairGrants(TEST_ALIAS))
                .isEqualTo(Map.of(Process.myUid(), singleton(getWho().getPackageName())));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testIsWifiGrant_default"	""	"1: granted"	"([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[granted]:[1]:method_text:[       assertThat(mDevicePolicyManager.isKeyPairGrantedToWifiAuth(TEST_ALIAS)).isFalse();    }   ]) :|: public void testIsWifiGrant_default() {
        mDevicePolicyManager.installKeyPair(getWho(), mFakePrivKey, new Certificate[]{mFakeCert},
                TEST_ALIAS, /* requestAccess= */ false);

        assertThat(mDevicePolicyManager.isKeyPairGrantedToWifiAuth(TEST_ALIAS)).isFalse();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testIsWifiGrant_allowed"	""	"1: granted"	"([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[granted]:[1]:method_text:[        assertThat(mDevicePolicyManager.isKeyPairGrantedToWifiAuth(TEST_ALIAS)).isTrue();    }   ]) :|: public void testIsWifiGrant_allowed() {
        mDevicePolicyManager.installKeyPair(getWho(), mFakePrivKey, new Certificate[]{mFakeCert},
                TEST_ALIAS, /* requestAccess= */ false);
        assertTrue(mDevicePolicyManager.grantKeyPairToWifiAuth(TEST_ALIAS));

        assertThat(mDevicePolicyManager.isKeyPairGrantedToWifiAuth(TEST_ALIAS)).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testIsWifiGrant_denied"	""	"1: granted"	"([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[granted]:[1]:method_text:[       assertThat(mDevicePolicyManager.isKeyPairGrantedToWifiAuth(TEST_ALIAS)).isFalse();    }   ]) :|: public void testIsWifiGrant_denied() {
        mDevicePolicyManager.installKeyPair(getWho(), mFakePrivKey, new Certificate[]{mFakeCert},
                TEST_ALIAS, /* requestAccess= */ false);
        assertTrue(mDevicePolicyManager.grantKeyPairToWifiAuth(TEST_ALIAS));
        assertTrue(mDevicePolicyManager.revokeKeyPairFromWifiAuth(TEST_ALIAS));

        assertThat(mDevicePolicyManager.isKeyPairGrantedToWifiAuth(TEST_ALIAS)).isFalse();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testRevokeKeyPairFromApp_keyNotUsable"	""	"2: granted admin"	"([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[admin]:[1]:method_text:[nSupported() {        return Build.VERSION.DEVICE_INITIAL_SDK_INT >= Build.VERSION_CODES.O;    }}]) :|: public void testRevokeKeyPairFromApp_keyNotUsable() throws Exception {
        mDevicePolicyManager.installKeyPair(getWho(), mFakePrivKey, new Certificate[] {mFakeCert},
                TEST_ALIAS, /* requestAccess=*/ true);
        // Key is requested from KeyChain prior to revoking the grant.
        final PrivateKey key = KeyChain.getPrivateKey(mContext, TEST_ALIAS);
        // Ensure the key is usable prior to being revoked.
        signDataWithKey(""SHA256withRSA"", key);
        mDevicePolicyManager.revokeKeyPairFromApp(getWho(), TEST_ALIAS, getWho().getPackageName());

        // Key shouldn't be valid after the grant is revoked.
        assertThrows(InvalidKeyException.class, () -> signDataWithKey(""SHA256withRSA"", key));
    }

    private void assertGranted(String alias, boolean expected)
            throws InterruptedException, KeyChainException {
        boolean granted = (KeyChain.getPrivateKey(mActivity, alias) != null);
        assertWithMessage(""Grant for alias: \"""" + alias + ""\"""").that(granted).isEqualTo(expected);
    }

    private static PrivateKey getPrivateKey(final byte[] key, String type)
            throws NoSuchAlgorithmException, InvalidKeySpecException {
        return KeyFactory.getInstance(type).generatePrivate(
                new PKCS8EncodedKeySpec(key));
    }

    private static Certificate getCertificate(byte[] cert) throws CertificateException {
        return CertificateFactory.getInstance(""X.509"").generateCertificate(
                new ByteArrayInputStream(cert));
    }

    private Collection<Certificate> loadCertificatesFromAsset(String assetName) {
        try {
            final CertificateFactory certFactory = CertificateFactory.getInstance(""X.509"");
            AssetManager am = mActivity.getAssets();
            InputStream is = am.open(assetName);
            return (Collection<Certificate>) certFactory.generateCertificates(is);
        } catch (IOException | CertificateException e) {
            e.printStackTrace();"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"finish"	""	"1: admin"	"([6:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[admin]:[6]:method_text:[      mDevicePolicyManager.removeKeyPair(getWho(), TEST_ALIAS);        super.tearDown();    }   ]) :|: public void test/*
 *.
 */
package com.android.cts.deviceandprofileowner;

import static android.app.admin.DevicePolicyManager.ID_TYPE_BASE_INFO;
import static android.app.admin.DevicePolicyManager.ID_TYPE_IMEI;
import static android.app.admin.DevicePolicyManager.ID_TYPE_INDIVIDUAL_ATTESTATION;
import static android.app.admin.DevicePolicyManager.ID_TYPE_MEID;
import static android.app.admin.DevicePolicyManager.ID_TYPE_SERIAL;
import static android.keystore.cts.CertificateUtils.createCertificate;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import static org.testng.Assert.assertThrows;

import static java.util.Collections.singleton;

import android.content.ComponentName;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.keystore.cts.Attestation;
import android.keystore.cts.AuthorizationList;
import android.net.Uri;
import android.os.Build;
import android.os.Process;
import android.security.AttestedKeyPair;
import android.security.KeyChain;
import android.security.KeyChainAliasCallback;
import android.security.KeyChainException;
import android.security.keystore.KeyGenParameterSpec;
import android.security.keystore.KeyProperties;
import android.security.keystore.StrongBoxUnavailableException;
import android.support.test.uiautomator.UiDevice;
import android.telephony.TelephonyManager;

import com.android.compatibility.common.util.FakeKeys.FAKE_RSA_1;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.GeneralSecurityException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testNullAdminComponentIsDenied"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[admin]:[2]:method_text:[thrown for null ComponentName"");        } catch (SecurityException expected) {        }    }   ]) :|: public void testNullAdminComponentIsDenied() throws Exception {
        final String alias = ""com.android.test.null-admin-1"";
        try {
            mDevicePolicyManager.installKeyPair(null, mFakePrivKey, mFakeCert, alias);
            fail(""Exception should have been thrown for null ComponentName"");
        } catch (SecurityException expected) {
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testAddUserRestrictionDisallowConfigDateTime_onParent"	""	"2: UserManager.DISALLOW admin"	"([2:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[admin]:[2]:method_text:[riction(ADMIN_RECEIVER_COMPONENT,                UserManager.DISALLOW_CONFIG_DATE_TIME);    }   ]) :|: public void testAddUserRestrictionDisallowConfigDateTime_onParent() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        assertNotNull(parentDevicePolicyManager);

        parentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONFIG_DATE_TIME);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testHasUserRestrictionDisallowConfigDateTime"	""	"1: UserManager.DISALLOW"	"([1:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[UserManager.DISALLOW]:[1]:method_text:[ger.                hasUserRestriction(UserManager.DISALLOW_CONFIG_DATE_TIME)).isTrue();    }   ]) :|: public void testHasUserRestrictionDisallowConfigDateTime() {
        assertThat(mUserManager.
                hasUserRestriction(UserManager.DISALLOW_CONFIG_DATE_TIME)).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testUserRestrictionDisallowConfigDateTimeIsNotPersisted"	""	"1: UserManager.DISALLOW"	"([1:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[UserManager.DISALLOW]:[1]:method_text:[            Thread.sleep(100);        }        fail(""The restriction didn't go away."");    }   ]) :|: public void testUserRestrictionDisallowConfigDateTimeIsNotPersisted() throws Exception {
        final long deadline = System.nanoTime() + TimeUnit.SECONDS.toNanos(30);
        while (System.nanoTime() <= deadline) {
            if (!mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_DATE_TIME)) {
                return;
            }
            Thread.sleep(100);
        }
        fail(""The restriction didn't go away."");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testAddUserRestrictionDisallowAddUser_onParent"	""	"2: UserManager.DISALLOW admin"	"([2:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[admin]:[2]:method_text:[UserRestriction(ADMIN_RECEIVER_COMPONENT,                UserManager.DISALLOW_ADD_USER);    }   ]) :|: public void testAddUserRestrictionDisallowAddUser_onParent() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        assertNotNull(parentDevicePolicyManager);

        parentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_ADD_USER);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testHasUserRestrictionDisallowAddUser"	""	"1: UserManager.DISALLOW"	"([1:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[UserManager.DISALLOW]:[1]:method_text:[dUser() {        assertThat(hasUserRestriction(UserManager.DISALLOW_ADD_USER)).isTrue();    }   ]) :|: public void testHasUserRestrictionDisallowAddUser() {
        assertThat(hasUserRestriction(UserManager.DISALLOW_ADD_USER)).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testClearUserRestrictionDisallowAddUser"	""	"2: UserManager.DISALLOW admin"	"([2:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[admin]:[2]:method_text:[UserRestriction(ADMIN_RECEIVER_COMPONENT,                UserManager.DISALLOW_ADD_USER);    }   ]) :|: public void testClearUserRestrictionDisallowAddUser() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);

        parentDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_ADD_USER);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testCanOpenCamera"	""	"3: UserManager.DISALLOW microphone DISALLOW_SAFE_BOOT"	"([1:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[DISALLOW_SAFE_BOOT]:[1]:method_text:[not used in test.                    // UserManager.DISALLOW_DEBUGGING_FEATURES            );   ]) :|: public void testCanOpenCamera() throws Exception {
        checkCanOpenCamera(true);
    }

    private void checkCanOpenCamera(boolean canOpen) throws Exception {
        // If the device does not support a camera it will return an empty camera ID list.
        if (mCameraManager.getCameraIdList() == null
                || mCameraManager.getCameraIdList().length == 0) {
            return;
        }
        int retries = 10;
        boolean successToOpen = !canOpen;
        while (successToOpen != canOpen && retries > 0) {
            retries--;
            Thread.sleep(500);
            successToOpen = CameraUtils.blockUntilOpenCamera(mCameraManager, mBackgroundHandler);
        }
        assertEquals(String.format(""Timed out waiting the value to change to %b (actual=%b)"",
                canOpen, successToOpen), canOpen, successToOpen);
    }

    private static final Set<String> PROFILE_OWNER_ORGANIZATION_OWNED_LOCAL_RESTRICTIONS =
            ImmutableSet.of(
                    UserManager.DISALLOW_BLUETOOTH,
                    UserManager.DISALLOW_BLUETOOTH_SHARING,
                    UserManager.DISALLOW_CONFIG_BLUETOOTH,
                    UserManager.DISALLOW_CONFIG_CELL_BROADCASTS,
                    UserManager.DISALLOW_CONFIG_LOCATION,
                    UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS,
                    UserManager.DISALLOW_CONFIG_TETHERING,
                    UserManager.DISALLOW_CONFIG_WIFI,
                    UserManager.DISALLOW_CONTENT_CAPTURE,
                    UserManager.DISALLOW_CONTENT_SUGGESTIONS,
                    UserManager.DISALLOW_DATA_ROAMING,
                    UserManager.DISALLOW_SAFE_BOOT,
                    UserManager.DISALLOW_SHARE_LOCATION,
                    UserManager.DISALLOW_SMS,
                    UserManager.DISALLOW_USB_FILE_TRANSFER,
                    UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA,
                    UserManager.DISALLOW_OUTGOING_CALLS,
                    UserManager.DISALL"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testPerProfileUserRestriction_onParent"	""	"2: UserManager.DISALLOW admin"	"([3:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[admin]:[3]:method_text:[ISALLOW_CONFIG_DATE_TIME,                    UserManager.DISALLOW_AIRPLANE_MODE            );   ]) :|: public void testPerProfileUserRestriction_onParent() throws Settings.SettingNotFoundException {
        mUiAutomation.adoptShellPermissionIdentity(
                ""android.permission.INTERACT_ACROSS_USERS_FULL"",
                ""android.permission.CREATE_USERS"");

        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        assertNotNull(parentDevicePolicyManager);

        int locationMode = Settings.Secure.getIntForUser(mContentResolver,
                Settings.Secure.LOCATION_MODE, UserHandle.USER_SYSTEM);

        for (String restriction : PROFILE_OWNER_ORGANIZATION_OWNED_LOCAL_RESTRICTIONS) {
            try {
                boolean hasRestrictionOnManagedProfile = mUserManager.hasUserRestriction(
                        restriction);

                parentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);
                // Assert user restriction on personal profile has been added
                assertThat(hasUserRestriction(restriction)).isTrue();
                // Assert user restriction on managed profile has not changed
                assertThat(mUserManager.hasUserRestriction(restriction)).isEqualTo(
                        hasRestrictionOnManagedProfile);
            } finally {
                parentDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                        restriction);
                assertThat(hasUserRestriction(restriction)).isFalse();
            }
        }

        // Restore the location mode setting after adding and removing the
        // DISALLOW_SHARE_LOCATION user restriction. This is because, modifying this user
        // restriction causes the location mode setting to be turned off.
        Settings.Secure.putIntForUser(mContentResolver, Settings.Secure.LOCATION_MODE, locationMode,
                UserHandle.USER_SYSTEM);
    }

    private static final Set<String> PROFILE_OWNER_"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"dropShellPermissionIdentity"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[admin]:[3]:method_text:[ad.sleep(1000);        }        throw new AssertionError(""Failed to get UiAutomation"");    }   ]) :|: public void test/*
 *.
 */

package com.android.cts.deviceandprofileowner;

import static com.android.cts.deviceandprofileowner.BaseDeviceAdminTest.ADMIN_RECEIVER_COMPONENT;

import static com.google.common.truth.Truth.assertThat;

import android.app.UiAutomation;
import android.app.admin.DevicePolicyManager;
import android.content.ContentResolver;
import android.content.Context;
import android.hardware.camera2.CameraManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.UserHandle;
import android.os.UserManager;
import android.provider.Settings;
import android.test.InstrumentationTestCase;
import android.util.Log;

import com.android.cts.devicepolicy.CameraUtils;

import com.google.common.collect.ImmutableSet;

import java.util.Set;
import java.util.concurrent.TimeUnit;

public class UserRestrictionsParentTest extends InstrumentationTestCase {

    private static final String TAG = ""UserRestrictionsParentTest"";

    protected Context mContext;
    private ContentResolver mContentResolver;
    private UiAutomation mUiAutomation;
    private DevicePolicyManager mDevicePolicyManager;
    private UserManager mUserManager;

    private CameraManager mCameraManager;

    private HandlerThread mBackgroundThread;
    private static final long GET_UIAUTOMATION_TIMEOUT_NS = TimeUnit.SECONDS.toNanos(60);

    /**
     * A {@link Handler} for running tasks in the background.
     */
    private Handler mBackgroundHandler;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mContext = getInstrumentation().getContext();
        mContentResolver = mContext.getContentResolver();
        mUiAutomation = getUiAutomation();

        mDevicePolicyManager = (DevicePolicyManager)
                mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
        assertNotNull(mDevicePolicyManager);

        mCameraManager = (CameraManager) mContext.getSystemService(Context.CAMERA_SERVICE);"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testAddUserRestrictionCameraDisabled_onParent"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[admin]:[3]:method_text:[etCameraDisabled(ADMIN_RECEIVER_COMPONENT);        assertThat(actualDisabled).isTrue();    }   ]) :|: public void testAddUserRestrictionCameraDisabled_onParent() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        parentDevicePolicyManager.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, true);
        boolean actualDisabled =
                parentDevicePolicyManager.getCameraDisabled(ADMIN_RECEIVER_COMPONENT);

        assertThat(actualDisabled).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testRemoveUserRestrictionCameraEnabled_onParent"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[admin]:[3]:method_text:[tCameraDisabled(ADMIN_RECEIVER_COMPONENT);        assertThat(actualDisabled).isFalse();    }   ]) :|: public void testRemoveUserRestrictionCameraEnabled_onParent() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        parentDevicePolicyManager.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, false);
        boolean actualDisabled =
                parentDevicePolicyManager.getCameraDisabled(ADMIN_RECEIVER_COMPONENT);

        assertThat(actualDisabled).isFalse();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testPerDeviceUserRestriction_onParent"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[admin]:[5]:method_text:[    Log.e(TAG, ""Interrupted exception thrown while stopping background thread."");        }    }}]) :|: public void testPerDeviceUserRestriction_onParent() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        assertNotNull(parentDevicePolicyManager);

        for (String restriction : PROFILE_OWNER_ORGANIZATION_OWNED_GLOBAL_RESTRICTIONS) {
            try {
                parentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);
                // Assert user restriction on personal profile has been added
                assertThat(hasUserRestriction(restriction)).isTrue();
                // Assert user restriction on managed profile has been added
                assertThat(mUserManager.hasUserRestriction(restriction)).isTrue();
            } finally {
                parentDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                        restriction);
                assertThat(hasUserRestriction(restriction)).isFalse();
                assertThat(mUserManager.hasUserRestriction(restriction)).isFalse();
            }
        }
    }

    private boolean hasUserRestriction(String key) {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        Bundle userRestrictions =
                parentDevicePolicyManager.getUserRestrictions(ADMIN_RECEIVER_COMPONENT);
        return userRestrictions.getBoolean(key);
    }

    /**
     * Starts a background thread and its {@link Handler}.
     */
    private void startBackgroundThread() {
        mBackgroundThread = new HandlerThread(""CameraBackground"");
        mBackgroundThread.start();
        mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
    }

    /**
     * Stops the background thread and its {@link Handler}.
     */
    private void stopBackgroundThread() {
        mBackgroundThread.quitSafely();
        try {
            mBackgroundThread.join();"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PersistentIntentResolvingTest"	"testAddAndClearPersistentPreferredActivitiesYieldsResolverActivity"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java]:[admin]:[2]:method_text:[sistentPreferredActivity(ADMIN_RECEIVER_COMPONENT, filter,                targetComponent);    }}]) :|: public void testAddAndClearPersistentPreferredActivitiesYieldsResolverActivity() {
        addPersistentPreferredActivity();
        mDevicePolicyManager.clearPackagePersistentPreferredActivities(ADMIN_RECEIVER_COMPONENT,
                PACKAGE_NAME);

        sendExampleIntent();
        SystemClock.sleep(5000);

        // Default behavior: intent results in resolver activity, since there are two potential
        // receivers. No intent is received.
        synchronized(this) {
            assertFalse(mReceivedConfirmationFrom1);
            assertFalse(mReceivedConfirmationFrom2);
        }
    }

    public class ConfirmReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {
            if (intent.getAction().equals(ExampleIntentReceivingActivity1.CONFIRM_ACTION)) {
                synchronized (PersistentIntentResolvingTest.this) {
                    mReceivedConfirmationFrom1 = true;
                }
            } else if (intent.getAction().equals(ExampleIntentReceivingActivity2
                            .CONFIRM_ACTION)) {
                synchronized (PersistentIntentResolvingTest.this) {
                    mReceivedConfirmationFrom2 = true;
                }
            }
        }
    }

    private void sendExampleIntent() {
        Intent exampleIntent = new Intent(EXAMPLE_ACTION);
        exampleIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        mContext.startActivity(exampleIntent);
    }

    private void addPersistentPreferredActivity() {
        IntentFilter filter = new IntentFilter();
        filter.addAction(EXAMPLE_ACTION);
        filter.addCategory(Intent.CATEGORY_DEFAULT);
        ComponentName targetComponent = new ComponentName(PACKAGE_NAME,
                ExampleIntentReceivingActivity2.class.getName());
        mDevicePolicyManager.addPersistentPreferredActivity(ADMIN_RECEIVER_COMPONENT, filter,
                targetComponent);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AudioRestrictionTest"	"testDisallowUnmuteMicrophone"	""	"4: Microphone UserManager.DISALLOW microphone admin"	"([2:/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java]:[admin]:[2]:method_text:[null$"", line))) {                return true;            }        }        return false;    }}]) :|: public void testDisallowUnmuteMicrophone() throws Exception {
        if (!mPackageManager.hasSystemFeature(PackageManager.FEATURE_MICROPHONE)) {
            return;
        }

        try {
            mAudioManager.setMicrophoneMute(false);
            if (mAudioManager.isMicrophoneMute()) {
                Log.w(TAG, ""Mic seems muted by hardware! Please unmute and rerrun the test."");
                return;
            }

            // Disallow the microphone to be unmuted.
            mDevicePolicyManager.addUserRestriction(
                    ADMIN_RECEIVER_COMPONENT, UserManager.DISALLOW_UNMUTE_MICROPHONE);
            waitUntil(true, new Callable<Boolean>() {
                @Override
                public Boolean call() throws Exception {
                    return mAudioManager.isMicrophoneMute();
                }
            });
            // Verify that we can't unmute the microphone.
            mAudioManager.setMicrophoneMute(false);
            assertTrue(mAudioManager.isMicrophoneMute());
        } finally {
            // Clear the restriction
            mDevicePolicyManager.clearUserRestriction(
                    ADMIN_RECEIVER_COMPONENT, UserManager.DISALLOW_UNMUTE_MICROPHONE);
            waitUntil(false, new Callable<Boolean>() {
                @Override
                public Boolean call() throws Exception {
                    return mAudioManager.isMicrophoneMute();
                }
            });
        }
    }

    private <T> void waitUntil(T expected, Callable<T> c) throws Exception {
        final long start = SystemClock.elapsedRealtime();
        final int TIMEOUT_MS = 5 * 1000;

        T actual;
        while (!Objects.equals(expected, actual = c.call())) {
            if ((SystemClock.elapsedRealtime() - start) >= TIMEOUT_MS) {
                fail(String.format(""Timed out waiting the value to change to %s (actual=%s)"",
                        expected, actual));
            }
            Thread.sleep(200);
        }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AudioRestrictionTest"	"testDisallowAdjustVolume_muted"	""	"2: UserManager.DISALLOW admin"	"([7:/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java]:[admin]:[7]:method_text:[ePolicyManager.setMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT, initVolumeMuted);        }    }   ]) :|: public void testDisallowAdjustVolume_muted() throws Exception {
        if (!mPackageManager.hasSystemFeature(PackageManager.FEATURE_AUDIO_OUTPUT)) {
            return;
        }

        // If we check that some value did not change, we must wait until the action is applied.
        // Method waitUntil() may check old value before changes took place.
        final int WAIT_TIME_MS = 1000;
        final boolean initVolumeMuted =
                mDevicePolicyManager.isMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT);
        try {
            // Unmute volume, if necessary.
            if (initVolumeMuted) {
                mDevicePolicyManager.setMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT, false);
                waitUntil(false, mCheckIfMasterVolumeMuted);
            }

            // DISALLOW_ADJUST_VOLUME must mute volume.
            mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    UserManager.DISALLOW_ADJUST_VOLUME);
            waitUntil(true, mCheckIfMasterVolumeMuted);

            // Unmute should not have effect because the restriction does not allow this.
            mDevicePolicyManager.setMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT, false);
            Thread.sleep(WAIT_TIME_MS);
            assertTrue(mDevicePolicyManager.isMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT));
        } finally {
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    UserManager.DISALLOW_ADJUST_VOLUME);
            mDevicePolicyManager.setMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT, initVolumeMuted);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AudioRestrictionTest"	"testDisallowAdjustVolume"	""	"2: UserManager.DISALLOW admin"	"([3:/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java]:[admin]:[3]:method_text:[}        mediaPlayer.stop();        mediaPlayer.release();        mediaPlayer = null;    }   ]) :|: public void testDisallowAdjustVolume() throws Exception {
        if (!mPackageManager.hasSystemFeature(PackageManager.FEATURE_AUDIO_OUTPUT)
                || mUseFixedVolume || mUseFullVolume) {
            return;
        }

        Uri uri = Uri.parse(""android.resource://"" + mContext.getPackageName() + ""/"" + R.raw.ringer);
        MediaPlayer mediaPlayer = new MediaPlayer();
        mediaPlayer.setDataSource(mContext, uri);
        mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
        mediaPlayer.prepare();
        mediaPlayer.setLooping(true);
        mediaPlayer.start();

        try {
            // Set volume of music to be 1.
            mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, /* flag= */ 0);

            // Disallow adjusting volume.
            mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    UserManager.DISALLOW_ADJUST_VOLUME);
            waitUntil(true, mCheckIfMasterVolumeMuted);

            // Verify that volume can't be changed.
            mAudioManager.adjustVolume(AudioManager.ADJUST_RAISE, /* flag= */ 0);
            assertEquals(1, mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC));

            // Allowing adjusting volume.
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    UserManager.DISALLOW_ADJUST_VOLUME);
            waitUntil(false, mCheckIfMasterVolumeMuted);

            // Verify the volume can be changed now.
            mAudioManager.adjustVolume(AudioManager.ADJUST_RAISE,  /* flag= */ 0);
            waitUntil(2, new Callable<Integer>() {
                @Override
                public Integer call() throws Exception {
                    return mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
                }
            });
        } finally {
            // Clear the restriction.
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    UserManager.DIS"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AudioRestrictionTest"	"isFullVolumeDevice"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java]:[admin]:[2]:method_text:[lumeDevice();    }    // Here we test that DISALLOW_ADJUST_VOLUME disallows to unmute volume.   ]) :|: public void test/*
 *.
 */

package com.android.cts.deviceandprofileowner;

import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.net.Uri;
import android.provider.Settings;
import android.os.SystemClock;
import android.os.UserManager;
import android.util.Log;

import java.util.Objects;
import java.util.concurrent.Callable;
import java.util.regex.Pattern;

public class AudioRestrictionTest extends BaseDeviceAdminTest {
    private static final String TAG = AudioRestrictionTest.class.getSimpleName();
    private AudioManager mAudioManager;
    private PackageManager mPackageManager;
    private boolean mUseFixedVolume;
    private boolean mUseFullVolume;
    private final Callable<Boolean> mCheckIfMasterVolumeMuted = new Callable<Boolean>() {
        @Override
        public Boolean call() throws Exception {
            return mDevicePolicyManager.isMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT);
        }
    };

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
        mPackageManager = mContext.getPackageManager();
        mUseFixedVolume = mContext.getResources().getBoolean(
                Resources.getSystem().getIdentifier(""config_useFixedVolume"", ""bool"", ""android""));
        mUseFullVolume = isFullVolumeDevice();
    }

    // Here we test that DISALLOW_ADJUST_VOLUME disallows to unmute volume."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SuspendPackageTest"	"testSuspendNotSuspendablePackages"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/SuspendPackageTest.java]:[admin]:[3]:method_text:[);        assertWithMessage(""package %s suspension"", pkg).that(actual).isEqualTo(expected);    }}]) :|: public void testSuspendNotSuspendablePackages() throws Exception {
        String launcherPackage = getDefaultLauncher(getInstrumentation());
        String dpcPackage = ADMIN_RECEIVER_COMPONENT.getPackageName();
        String[] notHandledPackages = setSuspendedPackages(/* suspend= */ true,
                launcherPackage, dpcPackage);
        // no package should be handled.
        assertWithMessage(""not handled packages"").that(notHandledPackages).asList()
                .containsExactly(launcherPackage, dpcPackage);

        Set<String> exemptApps = mDevicePolicyManager.getPolicyExemptApps();
        if (exemptApps.isEmpty()) {
            Log.v(TAG, ""testSuspendNotSuspendablePackages(): no exempt apps"");
            return;
        }

        Log.v(TAG, ""testSuspendNotSuspendablePackages(): testing exempt apps: "" + exemptApps);
        notHandledPackages = setSuspendedPackages(/* suspend= */ true, exemptApps);
        assertWithMessage(""exempt apps not suspended"").that(notHandledPackages).asList()
            .containsExactlyElementsIn(exemptApps);
    }

    private String[] setSuspendedPackages(boolean suspend, Collection<String> pkgs) {
        String[] pkgsArray = new String[pkgs.size()];
        pkgs.toArray(pkgsArray);
        return setSuspendedPackages(suspend, pkgsArray);
    }

    private String[] setSuspendedPackages(boolean suspend, String... pkgs) {
        Log.d(TAG, ""Calling setPackagesSuspended("" + suspend + "", "" + Arrays.toString(pkgs));
        String[] notHandled =
                mDevicePolicyManager.setPackagesSuspended(ADMIN_RECEIVER_COMPONENT, pkgs, suspend);
        Log.d(TAG, ""Returning "" + Arrays.toString(notHandled));
        return notHandled;
    }

    private void assertPackageSuspended(String pkg) throws Exception {
        assertPackageSuspension(pkg, /* expected= */ true);
    }

    private void assertPackageNotSuspended(String pkg) throws Exception {
        assertPackageSuspension(pkg, /* expected= */ false);
    }

    pr"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SuspendPackageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.FactoryResetProtectionPolicyTest"	"testSetFactoryResetProtectionPolicy"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/FactoryResetProtectionPolicyTest.java]:[admin]:[2]:method_text:[        assertThat(result).isNotNull();        assertPoliciesAreEqual(policy, result);    }   ]) :|: public void testSetFactoryResetProtectionPolicy() {
        if (!mDevicePolicyManager.isFactoryResetProtectionPolicySupported()) {
            return;
        }

        List<String> accounts = new ArrayList<>();
        accounts.add(""Account 1"");
        accounts.add(""Account 2"");

        FactoryResetProtectionPolicy policy = new FactoryResetProtectionPolicy.Builder()
                .setFactoryResetProtectionAccounts(accounts)
                .setFactoryResetProtectionEnabled(false)
                .build();

        mDevicePolicyManager.setFactoryResetProtectionPolicy(ADMIN_RECEIVER_COMPONENT, policy);

        FactoryResetProtectionPolicy result = mDevicePolicyManager.getFactoryResetProtectionPolicy(
                ADMIN_RECEIVER_COMPONENT);

        assertThat(result).isNotNull();
        assertPoliciesAreEqual(policy, result);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/FactoryResetProtectionPolicyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.FactoryResetProtectionPolicyTest"	"testSetFactoryResetProtectionPolicy_nullPolicy"	""	"1: admin"	"([4:/com/android/cts/deviceandprofileowner/FactoryResetProtectionPolicyTest.java]:[admin]:[4]:method_text:[ccounts) {        assertThat(actualAccounts).containsExactlyElementsIn(expectedAccounts);    }}]) :|: public void testSetFactoryResetProtectionPolicy_nullPolicy() {
        if (!mDevicePolicyManager.isFactoryResetProtectionPolicySupported()) {
            return;
        }

        // Set a non-default policy
        FactoryResetProtectionPolicy policy = new FactoryResetProtectionPolicy.Builder()
                .setFactoryResetProtectionAccounts(new ArrayList<>())
                .setFactoryResetProtectionEnabled(false)
                .build();
        mDevicePolicyManager.setFactoryResetProtectionPolicy(ADMIN_RECEIVER_COMPONENT, policy);

        // Get the policy and assert it is not equal to the default policy
        FactoryResetProtectionPolicy result = mDevicePolicyManager.getFactoryResetProtectionPolicy(
                ADMIN_RECEIVER_COMPONENT);
        assertThat(result).isNotNull();
        assertPoliciesAreEqual(policy, result);

        // Set null policy
        mDevicePolicyManager.setFactoryResetProtectionPolicy(ADMIN_RECEIVER_COMPONENT, null);

        // Get the policy and assert it is equal to the default policy
        result = mDevicePolicyManager.getFactoryResetProtectionPolicy(ADMIN_RECEIVER_COMPONENT);
        assertThat(result).isNull();
    }

    private void assertPoliciesAreEqual(FactoryResetProtectionPolicy expectedPolicy,
            FactoryResetProtectionPolicy actualPolicy) {
        assertThat(actualPolicy.isFactoryResetProtectionEnabled()).isEqualTo(
                expectedPolicy.isFactoryResetProtectionEnabled());
        assertAccountsAreEqual(expectedPolicy.getFactoryResetProtectionAccounts(),
                actualPolicy.getFactoryResetProtectionAccounts());
    }

    private void assertAccountsAreEqual(List<String> expectedAccounts,
            List<String> actualAccounts) {
        assertThat(actualAccounts).containsExactlyElementsIn(expectedAccounts);
    }

}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/FactoryResetProtectionPolicyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ContentSuggestionsRestrictionsTest"	"disableService"	""	"2: UserManager.DISALLOW admin"	"([2:/com/android/cts/deviceandprofileowner/ContentSuggestionsRestrictionsTest.java]:[admin]:[2]:method_text:[T,                    DISALLOW_CONTENT_SUGGESTIONS);        }        super.tearDown();    }   ]) :|: public void test/*
 *
 */

package com.android.cts.deviceandprofileowner;

import static android.os.UserManager.DISALLOW_CONTENT_SUGGESTIONS;

import static com.android.cts.deviceandprofileowner.ContentSuggestionsActivity.CONTENT_SUGGESTIONS_ACTIVITY_NAME;
import static com.android.cts.deviceandprofileowner.ContentSuggestionsActivity.CONTENT_SUGGESTIONS_PACKAGE_NAME;

import android.content.Intent;

public class ContentSuggestionsRestrictionsTest extends BaseDeviceAdminTest {

    private static final int MAX_TIME_TEMPORARY_SERVICE_CAN_BE_SET= 12000;

    private static final int SLEEP_TIME_WAITING_FOR_SERVICE_CONNECTION_MS = 100;

    private static final String SERVICE_NAME =
            ""com.android.cts.devicepolicy.contentsuggestions/.SimpleContentSuggestionsService"";

    int mUserId;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        mUserId = getInstrumentation().getContext().getUserId();
    }

    @Override
    protected void tearDown() throws Exception {
        try {
            disableService();
        } finally {
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    DISALLOW_CONTENT_SUGGESTIONS);
        }
        super.tearDown();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ContentSuggestionsRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.ContentSuggestionsRestrictionsTest"	"testDisallowContentSuggestions_allowed"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/ContentSuggestionsRestrictionsTest.java]:[admin]:[1]:method_text:[ce() {        runShellCommand(""cmd content_suggestions set temporary-service %d"", mUserId);    }}]) :|: public void testDisallowContentSuggestions_allowed() throws Exception {
        enableService();

        final boolean enabledBefore = launchActivityAndGetEnabled();
        assertTrue(enabledBefore);

        mDevicePolicyManager.addUserRestriction(
                ADMIN_RECEIVER_COMPONENT, DISALLOW_CONTENT_SUGGESTIONS);

        // Must try a couple times because it will be disabled asynchronously.
        for (int i = 1; i <= 5; i++) {
            final boolean disabledAfter = !launchActivityAndGetEnabled();
            if (disabledAfter) {
                return;
            }
            Thread.sleep(100);
        }
        fail(""Not disabled after 2.5s"");
    }

    private boolean launchActivityAndGetEnabled() throws Exception {
        final Intent launchIntent = new Intent();
        launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        launchIntent.setClassName(
                CONTENT_SUGGESTIONS_PACKAGE_NAME, CONTENT_SUGGESTIONS_ACTIVITY_NAME);
        final ContentSuggestionsActivity activity = launchActivity(
                ""com.android.cts.deviceandprofileowner"", ContentSuggestionsActivity.class, null);
        return activity.isContentSuggestionsEnabled();
    }

    private void enableService() throws Exception {
        runShellCommand(""cmd content_suggestions set temporary-service %d %s %d"", mUserId,
                SERVICE_NAME, MAX_TIME_TEMPORARY_SERVICE_CAN_BE_SET);
        // TODO: ideally it should wait until the service's onConnected() is called, but that
        // would be too complicated
        Thread.sleep(SLEEP_TIME_WAITING_FOR_SERVICE_CONNECTION_MS);
    }

    private void disableService() {
        runShellCommand(""cmd content_suggestions set temporary-service %d"", mUserId);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ContentSuggestionsRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AccountManagementParentTest"	"testSetAccountManagementDisabledOnParent"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java]:[admin]:[1]:method_text:[      assertThat(mDevicePolicyManager.getAccountTypesWithManagementDisabled()).isEmpty();    }   ]) :|: public void testSetAccountManagementDisabledOnParent() {
        DevicePolicyManager parentDevicePolicyManager = getParentInstance();

        parentDevicePolicyManager.setAccountManagementDisabled(ADMIN_RECEIVER_COMPONENT,
                SOME_ACCOUNT_TYPE, true);
        assertThat(
                parentDevicePolicyManager.getAccountTypesWithManagementDisabled()).asList()
                .containsExactly(SOME_ACCOUNT_TYPE);
        // Ensure that account management is not restricted on the managed profile itself.
        assertThat(mDevicePolicyManager.getAccountTypesWithManagementDisabled()).isEmpty();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.AccountManagementParentTest"	"testEnableAccountManagement"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java]:[admin]:[5]:method_text:[ssertThat(parentDevicePolicyManager).isNotNull();        return parentDevicePolicyManager;    }}]) :|: public void testEnableAccountManagement() {
        DevicePolicyManager parentDevicePolicyManager = getParentInstance();

        parentDevicePolicyManager.setAccountManagementDisabled(ADMIN_RECEIVER_COMPONENT,
                SOME_ACCOUNT_TYPE, false);
        assertThat(parentDevicePolicyManager.getAccountTypesWithManagementDisabled()).isEmpty();
    }

    private DevicePolicyManager getParentInstance() {
        assertThat(mDevicePolicyManager.isAdminActive(ADMIN_RECEIVER_COMPONENT)).isTrue();
        assertThat(mDevicePolicyManager.isProfileOwnerApp(
                ADMIN_RECEIVER_COMPONENT.getPackageName())).isTrue();
        assertThat(mDevicePolicyManager.isOrganizationOwnedDeviceWithManagedProfile()).isTrue();

        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        assertThat(parentDevicePolicyManager).isNotNull();

        return parentDevicePolicyManager;
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegationTest"	"emptyList"	""	"2: granted admin"	"([12:/com/android/cts/deviceandprofileowner/DelegationTest.java]:[admin]:[12]:method_text:[PONENT,                DELEGATE_PKG, Collections.emptyList());        super.tearDown();    }   ]) :|: public void test/*
 *.
 */

package com.android.cts.deviceandprofileowner;

import static android.app.admin.DevicePolicyManager.DELEGATION_APP_RESTRICTIONS;
import static android.app.admin.DevicePolicyManager.DELEGATION_BLOCK_UNINSTALL;
import static android.app.admin.DevicePolicyManager.DELEGATION_CERT_INSTALL;
import static android.app.admin.DevicePolicyManager.DELEGATION_CERT_SELECTION;
import static android.app.admin.DevicePolicyManager.DELEGATION_ENABLE_SYSTEM_APP;
import static android.app.admin.DevicePolicyManager.DELEGATION_NETWORK_LOGGING;
import static android.app.admin.DevicePolicyManager.DELEGATION_SECURITY_LOGGING;
import static android.app.admin.DevicePolicyManager.EXTRA_DELEGATION_SCOPES;

import static com.google.common.truth.Truth.assertThat;

import static org.junit.Assert.assertThrows;

import android.app.admin.DevicePolicyManager;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Process;
import android.os.UserManager;
import android.test.MoreAsserts;
import android.util.Log;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;


/**
 * Test that an app granted delegation scopes via {@link DevicePolicyManager#setDelegatedScopes} is
 * notified of its new scopes by a broadcast.
 */
public class DelegationTest extends BaseDeviceAdminTest {
    private static final String TAG = ""DelegationTest"";

    private static final String DELEGATE_PKG = ""com.android.cts.delegate"";
    private static final String DELEGATE_ACTIVITY_NAME =
            DELEGATE_PKG + "".DelegatedScopesReceiverActivity"";
    private static final String DELEGATE_SERVICE_NAME =
            DELEGATE_PKG + "".DelegatedScopesReceiverService"";
    private static final String TEST_PKG = ""com.android.cts.apprestrictio"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegationTest"	"testCantDelegateToUninstalledPackage"	""	"2: granted admin"	"([2:/com/android/cts/deviceandprofileowner/DelegationTest.java]:[admin]:[2]:method_text:[              .getDelegatedScopes(ADMIN_RECEIVER_COMPONENT, NON_EXISTENT_PKG).isEmpty());    }   ]) :|: public void testCantDelegateToUninstalledPackage() {
        // Prepare the package name and scopes to be delegated.
        final String NON_EXISTENT_PKG = ""com.android.nonexistent.delegate"";
        final List<String> scopes = Arrays.asList(
                DELEGATION_CERT_INSTALL,
                DELEGATION_ENABLE_SYSTEM_APP);
        try {
            // Trying to delegate to non existent package should throw.
            mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT,
                    NON_EXISTENT_PKG, scopes);
            fail(""Should throw when delegating to non existent package"");
        } catch(IllegalArgumentException expected) {
        }
        // Assert no scopes were delegated.
        assertTrue(""Delegation scopes granted to non existent package"", mDevicePolicyManager
                .getDelegatedScopes(ADMIN_RECEIVER_COMPONENT, NON_EXISTENT_PKG).isEmpty());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegationTest"	"testDelegateReceivesScopeChangedBroadcast"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/DelegationTest.java]:[admin]:[1]:method_text:[legated scopes do not match broadcasted scopes"",                scopes, reportedScopes);    }   ]) :|: public void testDelegateReceivesScopeChangedBroadcast() throws InterruptedException {
        if (UserManager.isHeadlessSystemUserMode()) {
            // TODO(b/190627898): this test launched an activity to receive the broadcast from DPM,
            // but headless system user cannot launch activity. To make things worse, the intent
            // is only sent to registered receivers, so we cannot use the existing receivers from
            // DpmWrapper, we would need to start a service on user 0 to receive the broadcast,
            // which would require a lot of changes:
            // - calling APIs / Shell commands to allow an app in the bg to start a service
            // - add a ""launchIntent()"" method on DpmWrapper so the intent is launched by user 0
            //
            // It might not be worth to make these changes, but rather wait for the test refactoring
            Log.i(TAG, ""Skipping testDelegateReceivesScopeChangedBroadcast() on headless system ""
                    + ""user mode"");
            return;
        }

        // Prepare the scopes to be delegated.
        final List<String> scopes = Arrays.asList(
                DELEGATION_CERT_INSTALL,
                DELEGATION_APP_RESTRICTIONS,
                DELEGATION_BLOCK_UNINSTALL,
                DELEGATION_ENABLE_SYSTEM_APP);

        // Start delegate so it can receive the scopes changed broadcast from DevicePolicyManager.
        startAndWaitDelegateActivity();

        // Set the delegated scopes.
        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, DELEGATE_PKG, scopes);

        // Wait until the delegate reports its new scopes.
        String reportedScopes[] = waitReportedScopes();

        // Check that the reported scopes correspond to scopes we delegated.
        assertNotNull(""Received null scopes from delegate"", reportedScopes);
        MoreAsserts.assertContentsInAnyOrder(""Delegated scopes do not match broadcasted scopes"",
                scopes, repo"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegationTest"	"testCanRetrieveDelegates"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/DelegationTest.java]:[admin]:[2]:method_text:[kage"", getDelegatePackages(DELEGATION_CERT_INSTALL)                .contains(TEST_PKG));    }   ]) :|: public void testCanRetrieveDelegates() {
        final List<String> someScopes = Arrays.asList(
                DELEGATION_APP_RESTRICTIONS,
                DELEGATION_ENABLE_SYSTEM_APP);
        final List<String> otherScopes = Arrays.asList(
                DELEGATION_BLOCK_UNINSTALL,
                DELEGATION_ENABLE_SYSTEM_APP);

        // In the beginning there are no delegates.
        assertTrue(""No delegates should be found"", getDelegatePackages(DELEGATION_APP_RESTRICTIONS)
                .isEmpty());
        assertTrue(""No delegates should be found"", getDelegatePackages(DELEGATION_BLOCK_UNINSTALL)
                .isEmpty());
        assertTrue(""No delegates should be found"", getDelegatePackages(DELEGATION_ENABLE_SYSTEM_APP)
                .isEmpty());

        // After delegating scopes to two packages.
        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT,
                DELEGATE_PKG, someScopes);
        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT,
                TEST_PKG, otherScopes);

        // The expected delegates are returned.
        assertTrue(""Expected delegate not found"", getDelegatePackages(DELEGATION_APP_RESTRICTIONS)
                .contains(DELEGATE_PKG));
        assertTrue(""Expected delegate not found"", getDelegatePackages(DELEGATION_BLOCK_UNINSTALL)
                .contains(TEST_PKG));
        assertTrue(""Expected delegate not found"", getDelegatePackages(DELEGATION_ENABLE_SYSTEM_APP)
                .contains(DELEGATE_PKG));
        assertTrue(""Expected delegate not found"", getDelegatePackages(DELEGATION_ENABLE_SYSTEM_APP)
                .contains(TEST_PKG));

        // Packages are only returned in their recpective scopes.
        assertFalse(""Unexpected delegate package"", getDelegatePackages(DELEGATION_APP_RESTRICTIONS)
                .contains(TEST_PKG));
        assertFalse(""Unexpected delegate package"", getDelegatePackages(DELEGATION_BLOCK_UNINSTALL)
                .contains(DELEG"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegationTest"	"testDeviceOwnerOrManagedPoOnlyDelegations"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/DelegationTest.java]:[admin]:[3]:method_text:[                DELEGATE_PKG, Collections.singletonList(scope)));            }        }    }   ]) :|: public void testDeviceOwnerOrManagedPoOnlyDelegations() throws Exception {
        final String [] doOrManagedPoDelegations = { DELEGATION_NETWORK_LOGGING };
        final boolean isDeviceOwner = mDevicePolicyManager.isDeviceOwnerApp(
                mContext.getPackageName());
        final boolean isManagedProfileOwner = mDevicePolicyManager.getProfileOwner() != null
                && mDevicePolicyManager.isManagedProfile(ADMIN_RECEIVER_COMPONENT);
        for (String scope : doOrManagedPoDelegations) {
            if (isDeviceOwner || isManagedProfileOwner) {
                try {
                    mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, DELEGATE_PKG,
                            Collections.singletonList(scope));
                } catch (SecurityException e) {
                    fail(""DO or managed PO fails to delegate "" + scope + "" exception: "" + e);
                    Log.e(TAG, ""DO or managed PO fails to delegate "" + scope, e);
                }
            } else {
                assertThrows(""PO not in a managed profile shouldn't be able to delegate "" + scope,
                        SecurityException.class,
                        () -> mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT,
                                DELEGATE_PKG, Collections.singletonList(scope)));
            }
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegationTest"	"testDeviceOwnerOrOrgOwnedManagedPoOnlyDelegations"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/DelegationTest.java]:[admin]:[3]:method_text:[                DELEGATE_PKG, Collections.singletonList(scope)));            }        }    }   ]) :|: public void testDeviceOwnerOrOrgOwnedManagedPoOnlyDelegations() throws Exception {
        final String [] doOrOrgOwnedManagedPoDelegations = { DELEGATION_SECURITY_LOGGING };
        final boolean isDeviceOwner = mDevicePolicyManager.isDeviceOwnerApp(
                mContext.getPackageName());
        final boolean isOrgOwnedManagedProfileOwner = mDevicePolicyManager.getProfileOwner() != null
                && mDevicePolicyManager.isManagedProfile(ADMIN_RECEIVER_COMPONENT)
                && mDevicePolicyManager.isOrganizationOwnedDeviceWithManagedProfile();
        for (String scope : doOrOrgOwnedManagedPoDelegations) {
            if (isDeviceOwner || isOrgOwnedManagedProfileOwner) {
                try {
                    mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, DELEGATE_PKG,
                            Collections.singletonList(scope));
                } catch (SecurityException e) {
                    fail(""DO or organization-owned managed PO fails to delegate "" + scope
                            + "" exception: "" + e);
                    Log.e(TAG, ""DO or organization-owned managed PO fails to delegate "" + scope, e);
                }
            } else {
                assertThrows(""PO not in an organization-owned managed profile shouldn't be able to ""
                        + ""delegate "" + scope,
                        SecurityException.class,
                        () -> mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT,
                                DELEGATE_PKG, Collections.singletonList(scope)));
            }
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.DelegationTest"	"testExclusiveDelegations"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/DelegationTest.java]:[admin]:[5]:method_text:[eivedScopeReportSemaphore.tryAcquire(10, TimeUnit.SECONDS));        return mReceivedScopes;    }}]) :|: public void testExclusiveDelegations() throws Exception {
        final List<String> exclusiveDelegations = new ArrayList<>(Arrays.asList(
                DELEGATION_CERT_SELECTION));
        if (mDevicePolicyManager.isDeviceOwnerApp(mContext.getPackageName())) {
            exclusiveDelegations.add(DELEGATION_NETWORK_LOGGING);
            exclusiveDelegations.add(DELEGATION_SECURITY_LOGGING);
        }
        for (String scope : exclusiveDelegations) {
            testExclusiveDelegation(scope);
        }
    }

    private void testExclusiveDelegation(String scope) throws Exception {

        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT,
                DELEGATE_PKG, Collections.singletonList(scope));
        // Set exclusive scope on TEST_PKG should lead to the scope being removed from the
        // previous delegate DELEGATE_PKG
        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT,
                TEST_PKG, Collections.singletonList(scope));


        assertThat(mDevicePolicyManager.getDelegatedScopes(ADMIN_RECEIVER_COMPONENT, TEST_PKG))
                .containsExactly(scope);
        assertThat(mDevicePolicyManager.getDelegatedScopes(ADMIN_RECEIVER_COMPONENT, DELEGATE_PKG))
                .isEmpty();
    }

    private List<String> getDelegatePackages(String scope) {
        List<String> packages = mDevicePolicyManager.getDelegatePackages(ADMIN_RECEIVER_COMPONENT,
                scope);
        Log.d(TAG, ""getDelegatePackages("" + scope + ""): "" + packages);
        return packages;
    }

    private void startAndWaitDelegateActivity() throws InterruptedException {
        ComponentName componentName = new ComponentName(DELEGATE_PKG, DELEGATE_ACTIVITY_NAME);
        Log.d(TAG, ""Starting "" + componentName + "" on user "" + Process.myUserHandle());
        mContext.startActivity(new Intent()
                .setComponent(componentName)
                .addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_NEW_TA"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PasswordQualityAndComplexityTest"	"testCannotSetComplexityWithQualityOnParent"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/PasswordQualityAndComplexityTest.java]:[admin]:[1]:method_text:[asswordComplexity(                        DevicePolicyManager.PASSWORD_COMPLEXITY_LOW));    }   ]) :|: public void testCannotSetComplexityWithQualityOnParent() {
        mDevicePolicyManager.setRequiredPasswordComplexity(
                PASSWORD_COMPLEXITY_NONE);
        mParentDpm.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_SOMETHING);

        assertThrows(IllegalStateException.class, () ->
                mDevicePolicyManager.setRequiredPasswordComplexity(
                        DevicePolicyManager.PASSWORD_COMPLEXITY_LOW));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PasswordQualityAndComplexityTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.PasswordQualityAndComplexityTest"	"testCannotSetQualityOnParentWithComplexity"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/PasswordQualityAndComplexityTest.java]:[admin]:[2]:method_text:[    // Clear complexity        dpm.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_NONE);    }}]) :|: public void testCannotSetQualityOnParentWithComplexity() {
        mDevicePolicyManager.setRequiredPasswordComplexity(
                DevicePolicyManager.PASSWORD_COMPLEXITY_LOW);

        assertThrows(IllegalStateException.class, () ->
                mParentDpm.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                        PASSWORD_QUALITY_SOMETHING));
    }

    private static void clearQualityAndComplexity(DevicePolicyManager dpm) {
        // Clear quality
        dpm.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_UNSPECIFIED);
        // Clear complexity
        dpm.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_NONE);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PasswordQualityAndComplexityTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.LockScreenInfoTest"	"testSetLockInfoWithNullAdminFails"	""	"1: admin"	"([5:/com/android/cts/deviceandprofileowner/LockScreenInfoTest.java]:[admin]:[5]:method_text:[o());    }    protected ComponentName getWho() {        return ADMIN_RECEIVER_COMPONENT;    }}]) :|: public void testSetLockInfoWithNullAdminFails() {
        final String message = ""nulladmin"";

        // Set message
        try {
            mDevicePolicyManager.setDeviceOwnerLockScreenInfo(null, message);
            fail(""Exception should have been thrown for null admin ComponentName"");
        } catch (NullPointerException expected) {
        }
    }

    /**
     * Sets device owner lock screen info on behalf of the current device owner admin.
     *
     * @throws AssertionError if the setting did not take effect.
     */
    private void setLockInfo(String message) {
        mDevicePolicyManager.setDeviceOwnerLockScreenInfo(getWho(), message);
        assertEquals(message, mDevicePolicyManager.getDeviceOwnerLockScreenInfo());
    }

    protected ComponentName getWho() {
        return ADMIN_RECEIVER_COMPONENT;
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/LockScreenInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SensorPermissionGrantTest"	"testAdminCanGrantSensorsPermissions"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/SensorPermissionGrantTest.java]:[admin]:[2]:method_text:[() {        assertThat(mDevicePolicyManager.canAdminGrantSensorsPermissions()).isTrue();    }   ]) :|: public void testAdminCanGrantSensorsPermissions() {
        assertThat(mDevicePolicyManager.canAdminGrantSensorsPermissions()).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SensorPermissionGrantTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.SensorPermissionGrantTest"	"testAdminCannotGrantSensorsPermission"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/SensorPermissionGrantTest.java]:[admin]:[2]:method_text:[on() {        assertThat(mDevicePolicyManager.canAdminGrantSensorsPermissions()).isFalse();    }}]) :|: public void testAdminCannotGrantSensorsPermission() {
        assertThat(mDevicePolicyManager.canAdminGrantSensorsPermissions()).isFalse();
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SensorPermissionGrantTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.StorageEncryptionTest"	"testSetStorageEncryption_enabled"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/StorageEncryptionTest.java]:[admin]:[2]:method_text:[etStorageEncryption(ADMIN_RECEIVER_COMPONENT))                .isEqualTo(mIsSystemUser);    }   ]) :|: public void testSetStorageEncryption_enabled() {
        if (mDevicePolicyManager.getStorageEncryptionStatus() == ENCRYPTION_STATUS_UNSUPPORTED) {
            return;
        }
        assertThat(mDevicePolicyManager.setStorageEncryption(ADMIN_RECEIVER_COMPONENT, true))
                .isEqualTo(mIsSystemUser ? ENCRYPTION_STATUS_ACTIVE
                        : ENCRYPTION_STATUS_UNSUPPORTED);
        assertThat(mDevicePolicyManager.getStorageEncryption(ADMIN_RECEIVER_COMPONENT))
                .isEqualTo(mIsSystemUser);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/StorageEncryptionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.StorageEncryptionTest"	"testSetStorageEncryption_disabled"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/StorageEncryptionTest.java]:[admin]:[2]:method_text:[  assertThat(mDevicePolicyManager.getStorageEncryption(ADMIN_RECEIVER_COMPONENT)).isFalse();    }}]) :|: public void testSetStorageEncryption_disabled() {
        if (mDevicePolicyManager.getStorageEncryptionStatus() == ENCRYPTION_STATUS_UNSUPPORTED) {
            return;
        }
        assertThat(mDevicePolicyManager.setStorageEncryption(ADMIN_RECEIVER_COMPONENT, false))
                .isEqualTo(mIsSystemUser ? ENCRYPTION_STATUS_INACTIVE
                        : ENCRYPTION_STATUS_UNSUPPORTED);
        assertThat(mDevicePolicyManager.getStorageEncryption(ADMIN_RECEIVER_COMPONENT)).isFalse();
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/StorageEncryptionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest"	"testFreezePeriodCannotSetIfTooCloseToPrevious"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java]:[admin]:[1]:method_text:[eeze period is exactly 60 days away.        setPolicyWithFreezePeriod(""04-30"", ""04-30"");    }   ]) :|: public void testFreezePeriodCannotSetIfTooCloseToPrevious() throws Exception {
        setSystemDate(LocalDate.of(2018, 2, 28));
        setPolicyWithFreezePeriod(""01-01"", ""03-01"", ""06-01"", ""06-30"");
        // Clear policy
        mDevicePolicyManager.setSystemUpdatePolicy(ADMIN_RECEIVER_COMPONENT, null);
        // Set to a conflict period (too close with previous period [2-28, 2-28]) should fail,
        // despite the previous policy was cleared from the system just now.
        try {
            setPolicyWithFreezePeriod(""04-29"", ""04-30"");
            fail(""Did no flag invalid period"");
        } catch (ValidationFailedException e) {
            assertEquals(e.getMessage(),
                    ValidationFailedException.ERROR_COMBINED_FREEZE_PERIOD_TOO_CLOSE,
                    e.getErrorCode());
        }
        // This should succeed as the new freeze period is exactly 60 days away.
        setPolicyWithFreezePeriod(""04-30"", ""04-30"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest"	"testWriteValidationFailedExceptionToParcel"	""	"1: admin"	"([3:/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java]:[admin]:[3]:method_text:[ finally {            mContext.unregisterReceiver(receiver);        }        return true;    }}]) :|: public void testWriteValidationFailedExceptionToParcel() {
        final List<FreezePeriod> freezePeriods =
            ImmutableList.of(new FreezePeriod(MonthDay.of(1, 10), MonthDay.of(1, 9)));
        try {
            SystemUpdatePolicy.createAutomaticInstallPolicy().setFreezePeriods(freezePeriods);
            fail(""ValidationFailedException not thrown for invalid freeze period."");
        } catch (ValidationFailedException e) {
            final Parcel parcel = Parcel.obtain();
            e.writeToParcel(parcel, 0);
            parcel.setDataPosition(0);

            final ValidationFailedException copy =
                ValidationFailedException.CREATOR.createFromParcel(parcel);

            assertThat(copy).isNotNull();
            assertThat(e.getErrorCode()).isEqualTo(copy.getErrorCode());
            assertThat(e.getMessage()).isEqualTo(copy.getMessage());
        }
    }

    private void assertSystemUpdatePoliciesEqual(SystemUpdatePolicy policy,
            SystemUpdatePolicy copy) {
        assertThat(policy.getInstallWindowStart()).isEqualTo(copy.getInstallWindowStart());
        assertThat(policy.getInstallWindowEnd()).isEqualTo(copy.getInstallWindowEnd());
        assertFreezePeriodListsEqual(policy.getFreezePeriods(), copy.getFreezePeriods());
        assertThat(policy.getPolicyType()).isEqualTo(copy.getPolicyType());
    }

    private void assertFreezePeriodListsEqual(List<FreezePeriod> original,
            List<FreezePeriod> copy) {
        assertThat(original).isNotNull();
        assertThat(copy).isNotNull();
        assertThat(original.size()).isEqualTo(copy.size());
        for (FreezePeriod period1 : original) {
            assertThat(period1).isNotNull();
            assertFreezePeriodListContains(copy, period1);
        }
        for (FreezePeriod period1 : copy) {
            assertThat(period1).isNotNull();
            assertFreezePeriodListContains(original, period1);
        }
    }

    private void assertFreezePeriodListContains(Li"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.systemupdate.InstallUpdateTest"	"testInstallUpdate_charging_aboveThreshold_passesBatteryCheck"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/systemupdate/InstallUpdateTest.java]:[admin]:[1]:method_text:[ry()) {            resetBatteryState();            resetDevicePolicyConstants();        }    }}]) :|: public void testInstallUpdate_charging_aboveThreshold_passesBatteryCheck() throws Exception {
        if (!isDeviceAB()) {
            return;
        }
        try {
            setChargingBatteryThreshold(TEST_BATTERY_THRESHOLD);
            setChargingBatteryLevelAndWait(TEST_BATTERY_THRESHOLD);
            // Positive CTS tests aren't possible, so we verify that we get the file-related error
            // rather than the battery one.
            assertUpdateError(""wrongSize.zip"", UPDATE_ERROR_UPDATE_FILE_INVALID);
        } finally {
            resetBatteryState();
            resetDevicePolicyConstants();
        }
    }

    private void assertUpdateError(String fileName, int expectedErrorCode) {
        Log.v(TAG, ""assertUpdateError("" + fileName + "", "" + expectedErrorCode + "")"");
        AtomicInteger errorCode = new AtomicInteger();
        // Poll until the error code matches our expectation to deal with delays in propagation
        PollingCheck.waitFor(() -> {
            try {
                errorCode.set(getUpdateError(fileName));
            } catch (InterruptedException e) {
                throw new IllegalStateException(e);
            }
            return errorCode.get() == expectedErrorCode; });
        assertWithMessage(""error code when updating %s"", fileName).that(errorCode.get())
                .isEqualTo(expectedErrorCode);
    }

    private int getUpdateError(String fileName) throws InterruptedException {
        CountDownLatch latch = new CountDownLatch(1);
        Uri uri = Uri.fromFile(new File(TEST_SYSTEM_UPDATES_DIR, fileName));
        Log.d(TAG, ""Calling installSystemUpdate() on "" + Process.myUserHandle() + "" using "" + uri);
        mDevicePolicyManager.installSystemUpdate(ADMIN_RECEIVER_COMPONENT, uri,
                Runnable::run, new InstallSystemUpdateCallback() {
                    @Override
                    public void onInstallUpdateError(int errorCode, String errorMessage) {
                        Log.d(TAG, ""onInsta"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/InstallUpdateTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"	"getDisallowedRestrictions"	""	"3: UserManager.DISALLOW microphone DISALLOW_SAFE_BOOT"	"([1:/com/android/cts/deviceandprofileowner/userrestrictions/SecondaryProfileOwnerUserRestrictionsTest.java]:[DISALLOW_SAFE_BOOT]:[1]:method_text:[etting all DO restrictions. Global restrictions should be     * visible on other users.     */   ]) :|: public void test/*
 *.
 */
package com.android.cts.deviceandprofileowner.userrestrictions;

import android.os.UserManager;

import java.util.Arrays;
import java.util.HashSet;

public class SecondaryProfileOwnerUserRestrictionsTest extends BaseUserRestrictionsTest {
    public static final String[] ALLOWED = new String[] {
            // UserManager.DISALLOW_CONFIG_WIFI, // Has unrecoverable side effects.
            UserManager.DISALLOW_MODIFY_ACCOUNTS,
            UserManager.DISALLOW_INSTALL_APPS,
            UserManager.DISALLOW_UNINSTALL_APPS,
            // UserManager.DISALLOW_SHARE_LOCATION, // Has unrecoverable side effects.
            // UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES, // Has unrecoverable side effects.
            // UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY, // Same as above.
            UserManager.DISALLOW_CONFIG_BLUETOOTH,
            UserManager.DISALLOW_CONFIG_CREDENTIALS,
            UserManager.DISALLOW_REMOVE_USER,
            // UserManager.DISALLOW_DEBUGGING_FEATURES, // Need for CTS
            UserManager.DISALLOW_CONFIG_VPN,
            // UserManager.ENSURE_VERIFY_APPS, // Has unrecoverable side effects.
            UserManager.DISALLOW_APPS_CONTROL,
            UserManager.DISALLOW_UNMUTE_MICROPHONE,
            UserManager.DISALLOW_ADJUST_VOLUME,
            UserManager.DISALLOW_OUTGOING_CALLS,
            UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS,
            UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE,
            UserManager.DISALLOW_OUTGOING_BEAM,
            UserManager.ALLOW_PARENT_PROFILE_APP_LINKING,
            UserManager.DISALLOW_SET_USER_ICON,
            UserManager.DISALLOW_AUTOFILL,
            UserManager.DISALLOW_CONTENT_CAPTURE,
            UserManager.DISALLOW_CONTENT_SUGGESTIONS,
            UserManager.DISALLOW_UNIFIED_PASSWORD,
    };

    public static final String[] DISALLOWED = new String[] {
            UserManager.DISALLOW_USB_FILE_TRANSFER,
            UserManager.DISALLOW_CONFIG_TET"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/SecondaryProfileOwnerUserRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.userrestrictions.ProfileGlobalRestrictionsTest"	"testSetProfileGlobalRestrictions"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/userrestrictions/ProfileGlobalRestrictionsTest.java]:[admin]:[1]:method_text:[   mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, ENSURE_VERIFY_APPS);    }   ]) :|: public void testSetProfileGlobalRestrictions() throws Exception {
        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, ENSURE_VERIFY_APPS);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/ProfileGlobalRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.userrestrictions.ProfileGlobalRestrictionsTest"	"testClearProfileGlobalRestrictions"	""	"1: admin"	"([1:/com/android/cts/deviceandprofileowner/userrestrictions/ProfileGlobalRestrictionsTest.java]:[admin]:[1]:method_text:[ mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, ENSURE_VERIFY_APPS);    }   ]) :|: public void testClearProfileGlobalRestrictions() throws Exception  {
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, ENSURE_VERIFY_APPS);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/ProfileGlobalRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.userrestrictions.CheckNoOwnerRestrictionsTest"	"testNoOwnerRestrictions"	""	"2: UserManager.DISALLOW microphone"	"([2:/com/android/cts/deviceandprofileowner/userrestrictions/CheckNoOwnerRestrictionsTest.java]:[microphone]:[2]:method_text:[Manager.class).hasUserRestriction(                UserManager.DISALLOW_UNMUTE_MICROPHONE));    }}]) :|: public void testNoOwnerRestrictions() {
        assertFalse(""DISALLOW_UNMUTE_MICROPHONE is still set"",
                mContext.getSystemService(UserManager.class).hasUserRestriction(
                UserManager.DISALLOW_UNMUTE_MICROPHONE));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/CheckNoOwnerRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.userrestrictions.DeviceOwnerUserRestrictionsTest"	"getDisallowedRestrictions"	""	"3: UserManager.DISALLOW microphone DISALLOW_SAFE_BOOT"	"([1:/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java]:[DISALLOW_SAFE_BOOT]:[1]:method_text:[e that {@link UserManager} understands that it is applied but not as a base restriction.     */   ]) :|: public void test/*
 *.
 */
package com.android.cts.deviceandprofileowner.userrestrictions;

import android.os.Process;
import android.os.UserHandle;
import android.os.UserManager;

public class DeviceOwnerUserRestrictionsTest extends BaseUserRestrictionsTest {
    public static final String[] ALLOWED = new String[] {
            // UserManager.DISALLOW_CONFIG_WIFI, // Has unrecoverable side effects.
            UserManager.DISALLOW_MODIFY_ACCOUNTS,
            UserManager.DISALLOW_INSTALL_APPS,
            UserManager.DISALLOW_UNINSTALL_APPS,
            // UserManager.DISALLOW_SHARE_LOCATION, // Has unrecoverable side effects.
            // UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES, // Has unrecoverable side effects.
            UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY,
            UserManager.DISALLOW_CONFIG_BLUETOOTH,
            UserManager.DISALLOW_USB_FILE_TRANSFER,
            UserManager.DISALLOW_CONFIG_CREDENTIALS,
            UserManager.DISALLOW_REMOVE_USER,
            // UserManager.DISALLOW_DEBUGGING_FEATURES, // Need for CTS
            UserManager.DISALLOW_CONFIG_VPN,
            UserManager.DISALLOW_CONFIG_TETHERING,
            UserManager.DISALLOW_NETWORK_RESET,
            UserManager.DISALLOW_FACTORY_RESET,
            UserManager.DISALLOW_ADD_USER,
            // UserManager.ENSURE_VERIFY_APPS, // Has unrecoverable side effects.
            UserManager.DISALLOW_CONFIG_CELL_BROADCASTS,
            UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS,
            UserManager.DISALLOW_APPS_CONTROL,
            UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA,
            UserManager.DISALLOW_UNMUTE_MICROPHONE,
            UserManager.DISALLOW_ADJUST_VOLUME,
            UserManager.DISALLOW_OUTGOING_CALLS,
            UserManager.DISALLOW_SMS,
            UserManager.DISALLOW_FUN,
            UserManager.DISALLOW_CREATE_WINDOWS,
            UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS,
            UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE,"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.userrestrictions.DeviceOwnerUserRestrictionsTest"	"testHasBaseUserRestrictions"	""	"1: admin"	"([2:/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java]:[admin]:[2]:method_text:[    hasBaseUserRestriction(r, userHandle));                return;            }        }    }}]) :|: public void testHasBaseUserRestrictions() {
        final UserHandle userHandle = Process.myUserHandle();
        for (String r : ALL_USER_RESTRICTIONS) {
            if(!hasBaseUserRestriction(r, userHandle)) {
                mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, r);
                assertTrue(""Restriction "" + r + "" expected"",
                        mUserManager.hasUserRestriction(r, userHandle));
                assertFalse(""Restriction "" + r + "" not expected as a baseRestriction"",
                        hasBaseUserRestriction(r, userHandle));

                mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, r);
                assertFalse(""Restriction "" + r + "" not expected"",
                        mUserManager.hasUserRestriction(r, userHandle));
                assertFalse(""Restriction "" + r + "" not expected as a baseRestriction"",
                        hasBaseUserRestriction(r, userHandle));
                return;
            }
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest"	"assertClearDefaultRestrictions"	""	"4: UserManager.DISALLOW microphone admin DISALLOW_SAFE_BOOT"	"([2:/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java]:[DISALLOW_SAFE_BOOT]:[2]:method_text:[abledRestrictions();    /**     * Test restrictions that should be enabled by default     */   ]) :|: public void test/*
 *.
 */
package com.android.cts.deviceandprofileowner.userrestrictions;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Process;
import android.os.UserHandle;
import android.os.UserManager;

import com.android.compatibility.common.util.ShellIdentityUtils;
import com.android.cts.deviceandprofileowner.BaseDeviceAdminTest;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

public abstract class BaseUserRestrictionsTest extends BaseDeviceAdminTest {
    protected static final String[] ALL_USER_RESTRICTIONS = new String[]{
            UserManager.DISALLOW_CONFIG_WIFI,
            UserManager.DISALLOW_MODIFY_ACCOUNTS,
            UserManager.DISALLOW_INSTALL_APPS,
            UserManager.DISALLOW_UNINSTALL_APPS,
            UserManager.DISALLOW_SHARE_LOCATION,
            UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES,
            UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY,
            UserManager.DISALLOW_CONFIG_BLUETOOTH,
            UserManager.DISALLOW_USB_FILE_TRANSFER,
            UserManager.DISALLOW_CONFIG_CREDENTIALS,
            UserManager.DISALLOW_REMOVE_USER,
            UserManager.DISALLOW_DEBUGGING_FEATURES,
            UserManager.DISALLOW_CONFIG_VPN,
            UserManager.DISALLOW_CONFIG_TETHERING,
            UserManager.DISALLOW_NETWORK_RESET,
            UserManager.DISALLOW_FACTORY_RESET,
            UserManager.DISALLOW_ADD_USER,
            UserManager.ENSURE_VERIFY_APPS,
            UserManager.DISALLOW_CONFIG_CELL_BROADCASTS,
            UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS,
            UserManager.DISALLOW_APPS_CONTROL,
            UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA,
            UserManager.DISALLOW_UNMUTE_MICROPHONE,
            UserManager.DISALLOW_ADJUST_VOLUME,
            UserManage"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest"	"testBroadcast"	""	"2: UserManager.DISALLOW admin"	"([2:/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java]:[admin]:[2]:method_text:[;        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);    }}]) :|: public void testBroadcast() throws Exception {
        final CountDownLatch latch = new CountDownLatch(1);
        final IntentFilter filter = new IntentFilter(UserManager.ACTION_USER_RESTRICTIONS_CHANGED);
        mContext.registerReceiver(new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                latch.countDown();
            }
        }, filter);

        final String restriction = UserManager.DISALLOW_CONFIG_WIFI;
        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);

        assertTrue(""Didn't receive broadcast"", latch.await(120, TimeUnit.SECONDS));

        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.certinstaller.CertSelectionDelegateTest"	"finish"	""	"1: admin"	"([6:/com/android/cts/certinstaller/CertSelectionDelegateTest.java]:[admin]:[6]:method_text:[ void tearDown() throws Exception {        mActivity.finish();        super.tearDown();    }   ]) :|: public void test/*
 *.
 */
package com.android.cts.certinstaller;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import static org.junit.Assert.assertNull;

import android.app.Activity;
import android.app.admin.DelegatedAdminReceiver;
import android.app.admin.DevicePolicyManager;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Process;
import android.security.KeyChain;
import android.security.KeyChainAliasCallback;
import android.support.test.uiautomator.UiDevice;
import android.test.InstrumentationTestCase;

import com.android.compatibility.common.util.FakeKeys.FAKE_RSA_1;

import java.io.ByteArrayInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

/**
 * Tests a delegate app with DELEGATION_CERT_SELECTION receives the
 * {@link android.app.admin.DelegatedAdminReceiver#onChoosePrivateKeyAlias} callback when a
 * requesting app (in this case, ourselves) invokes {@link KeyChain#choosePrivateKeyAlias},
 * and is able to force a designated cert to be returned.
 *
 * This test is driven by hostside {@code DeviceAndProfileOwnerTest#testDelegationCertSelection},
 * which grants this app DELEGATION_CERT_SELECTION permission and executes tests in this class.
 */
public class CertSelectionDelegateTest extends InstrumentationTestCase {

    private static final long KEYCHAIN_TIMEOUT_MINS = 1;

    private Context mContext;
    private DevicePolicyManager mDpm;
    private Activity mActivity;"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/CertSelectionDelegateTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.certinstaller.CertSelectionDelegateTest"	"testCanSelectKeychainKeypairs"	""	"1: admin"	"([2:/com/android/cts/certinstaller/CertSelectionDelegateTest.java]:[admin]:[2]:method_text:[ android.app.admin.DelegatedAdminReceiver#onChoosePrivateKeyAlias}    // receives {@code null}.   ]) :|: public void testCanSelectKeychainKeypairs() throws Exception {
        assertThat(mDpm.getDelegatedScopes(null, mContext.getPackageName())).contains(
                DevicePolicyManager.DELEGATION_CERT_SELECTION);

        final String alias = ""com.android.test.valid-rsa-key-1"";
        final PrivateKey privKey = getPrivateKey(FAKE_RSA_1.privateKey, ""RSA"");
        final Certificate cert = getCertificate(FAKE_RSA_1.caCertificate);
        // Install keypair.
        assertThat(mDpm.installKeyPair(null, privKey, cert, alias)).isTrue();
        try {
            assertThat(new KeyChainAliasFuture(alias).get()).isEqualTo(alias);

            // Verify key is at least something like the one we put in.
            assertThat(KeyChain.getPrivateKey(mActivity, alias).getAlgorithm()).isEqualTo(""RSA"");
        } finally {
            // Delete regardless of whether the test succeeded.
            assertThat(mDpm.removeKeyPair(null, alias)).isTrue();
        }
    }

    // Tests that if the delegated app returns {@link
    // android.security.KeyChain.KEY_ALIAS_SELECTION_DENIED}
    // the caller of {@link android.app.admin.DelegatedAdminReceiver#onChoosePrivateKeyAlias}
    // receives {@code null}."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/CertSelectionDelegateTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.certinstaller.DirectDelegatedCertInstallerTest"	"testIsWifiGrant_default"	""	"1: granted"	"([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[granted]:[1]:method_text:[s= */ false);        assertThat(mDpm.isKeyPairGrantedToWifiAuth(TEST_ALIAS)).isFalse();    }   ]) :|: public void testIsWifiGrant_default() {
        mDpm.installKeyPair(null, mTestPrivateKey, new Certificate[]{mTestCertificate},
                TEST_ALIAS, /* requestAccess= */ false);

        assertThat(mDpm.isKeyPairGrantedToWifiAuth(TEST_ALIAS)).isFalse();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.certinstaller.DirectDelegatedCertInstallerTest"	"testIsWifiGrant_allowed"	""	"1: granted"	"([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[granted]:[1]:method_text:[(TEST_ALIAS));        assertThat(mDpm.isKeyPairGrantedToWifiAuth(TEST_ALIAS)).isTrue();    }   ]) :|: public void testIsWifiGrant_allowed() {
        mDpm.installKeyPair(null, mTestPrivateKey, new Certificate[]{mTestCertificate},
                TEST_ALIAS, /* requestAccess= */ false);
        assertTrue(mDpm.grantKeyPairToWifiAuth(TEST_ALIAS));

        assertThat(mDpm.isKeyPairGrantedToWifiAuth(TEST_ALIAS)).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.certinstaller.DirectDelegatedCertInstallerTest"	"testIsWifiGrant_denied"	""	"1: granted"	"([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[granted]:[1]:method_text:[    }    private Context getContext() {        return getInstrumentation().getContext();    }}]) :|: public void testIsWifiGrant_denied() {
        mDpm.installKeyPair(null, mTestPrivateKey, new Certificate[]{mTestCertificate},
                TEST_ALIAS, /* requestAccess= */ false);
        assertTrue(mDpm.grantKeyPairToWifiAuth(TEST_ALIAS));
        assertTrue(mDpm.revokeKeyPairFromWifiAuth(TEST_ALIAS));

        assertThat(mDpm.isKeyPairGrantedToWifiAuth(TEST_ALIAS)).isFalse();
    }

    private PrivateKey rsaKeyFromString(String key) throws Exception {
        final PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(
                Base64.decode(key, Base64.DEFAULT));
        return KeyFactory.getInstance(""RSA"").generatePrivate(keySpec);
    }

    private Certificate certificateFromString(String cert) throws Exception {
        return CertificateFactory.getInstance(""X.509"").generateCertificate(
                new Base64InputStream(new ByteArrayInputStream(cert.getBytes()), Base64.DEFAULT));
    }

    private static boolean containsCertificate(List<byte[]> certificates, byte[] toMatch)
            throws CertificateException {
        Certificate certificateToMatch = readCertificate(toMatch);
        for (byte[] certBuffer : certificates) {
            Certificate cert = readCertificate(certBuffer);
            if (certificateToMatch.equals(cert)) {
                return true;
            }
        }
        return false;
    }

    private static Certificate readCertificate(byte[] certBuffer) throws CertificateException {
        final CertificateFactory certFactory = CertificateFactory.getInstance(""X.509"");
        return certFactory.generateCertificate(new ByteArrayInputStream(certBuffer));
    }

    private Context getContext() {
        return getInstrumentation().getContext();
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.certinstaller.DirectDelegatedCertInstallerTest"	"testAccessToDeviceIdentifiers"	""	"1: admin"	"([2:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[admin]:[2]:method_text:[Exception e) {            fail(""Should have permission to access IMEI: "" + e);        }    }   ]) :|: public void testAccessToDeviceIdentifiers() {
        final String adminPackageName = ""com.android.cts.deviceandprofileowner"";
        if (mDpm.isDeviceOwnerApp(adminPackageName)) {
            validateCanAccessDeviceIdentifiers();
        } else {
            validateNoAccessToIdentifier();
        }
    }

    private void validateNoAccessToIdentifier() {
        assertThrows(SecurityException.class, () -> Build.getSerial());

        if (!mHasTelephony) {
            return;
        }

        assertWithMessage(""Telephony service must be available."")
                .that(mTelephonyManager).isNotNull();

        assertThrows(SecurityException.class, () -> mTelephonyManager.getImei());
    }

    public void validateCanAccessDeviceIdentifiers() {
        assertThat(Build.getSerial()).doesNotMatch(Build.UNKNOWN);

        if (!mHasTelephony) {
            return;
        }

        assertWithMessage(""Telephony service must be available."")
                .that(mTelephonyManager).isNotNull();

        try {
            mTelephonyManager.getImei();
        } catch (SecurityException e) {
            fail(""Should have permission to access IMEI: "" + e);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest"	"testOnlyDeviceOwnerCanHaveMoreThanOneTargetUser"	""	"1: admin"	"([1:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[admin]:[1]:method_text:[**     * If the intent is implicit, expected to throw {@link IllegalArgumentException}.     */   ]) :|: public void testOnlyDeviceOwnerCanHaveMoreThanOneTargetUser() {
        if (!mDpm.isDeviceOwnerApp(AdminReceiver.getComponentName(mContext).getPackageName())) {
            assertEquals(1, mTargetUsers.size());
        }
    }

    /**
     * If the intent is implicit, expected to throw {@link IllegalArgumentException}.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest"	"testCannotBind_unprotectedCrossUserService"	""	"1: admin"	"([1:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[admin]:[1]:method_text:[ }    /**     * Talk to a DPC package that is neither device owner nor profile owner.     */   ]) :|: public void testCannotBind_unprotectedCrossUserService() throws Exception {
        final Intent serviceIntent = new Intent(mContext, UnprotectedCrossUserService.class);
        for (UserHandle targetUser : mTargetUsers) {
            try {
                bind(serviceIntent, EMPTY_SERVICE_CONNECTION, targetUser);
                fail(""SecurityException should be thrown for target user "" + targetUser);
            } catch (SecurityException ex) {
                MoreAsserts.assertContainsRegex(
                        ""must be protected by BIND_DEVICE_ADMIN"", ex.getMessage());
            }
        }
    }

    /**
     * Talk to a DPC package that is neither device owner nor profile owner.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest"	"testCrossProfileCall_getUserHandle"	""	"1: admin"	"([2:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[admin]:[2]:method_text:[ace CrossUserCallable<T> {        T call(ICrossUserService service) throws RemoteException;    }}]) :|: public void testCrossProfileCall_getUserHandle() throws Exception {
        for (UserHandle targetUser : mTargetUsers) {
            assertCrossProfileCall(targetUser, service -> service.getUserHandle(), targetUser);
        }
    }

    /**
     * Convenient method for you to execute a cross user call and assert the return value of it.
     * @param expected The expected result of the cross user call.
     * @param callable It is called when the service is bound, use this to make the service call.
     * @param targetUserHandle Which user are we talking to.
     * @param <T> The return type of the service call.
     */
    private <T> void assertCrossProfileCall(
            T expected, CrossUserCallable<T> callable, UserHandle targetUserHandle)
            throws Exception {
        final LinkedBlockingQueue<IInterface> queue = new LinkedBlockingQueue<>();
        final ServiceConnection serviceConnection = new ServiceConnection() {
            @Override
            public void onServiceConnected(ComponentName name, IBinder service) {
                Log.d(TAG, ""onServiceConnected is called in "" + Thread.currentThread().getName());
                // Ensure onServiceConnected is running in main thread.
                if (Looper.myLooper() != Looper.getMainLooper()) {
                    // Not running in main thread, failed the test.
                    Log.e(TAG, ""onServiceConnected is not running in main thread!"");
                    queue.add(NOT_IN_MAIN_THREAD_POISON_PILL);
                    return;
                }
                queue.add(ICrossUserService.Stub.asInterface(service));
            }

            @Override
            public void onServiceDisconnected(ComponentName name) {
                Log.d(TAG, ""onServiceDisconnected is called"");
            }
        };
        final Intent serviceIntent = new Intent(mContext, ProtectedCrossUserService.class);
        assertTrue(bind(serviceIntent, serviceConnection, targetUserHandle));
        IInt"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.BindDeviceAdminServiceFailsTest"	"testNoBindDeviceAdminTargetUsers"	""	"1: admin"	"([3:/com/android/cts/comp/BindDeviceAdminServiceFailsTest.java]:[admin]:[3]:method_text:[Receiver.getComponentName(mContext));        assertEquals(0, allowedTargetUsers.size());    }   ]) :|: public void testNoBindDeviceAdminTargetUsers() {
        List<UserHandle> allowedTargetUsers = mDpm.getBindDeviceAdminTargetUsers(
                AdminReceiver.getComponentName(mContext));
        assertEquals(0, allowedTargetUsers.size());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceFailsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.BindDeviceAdminServiceFailsTest"	"testCannotBind"	""	"1: admin"	"([4:/com/android/cts/comp/BindDeviceAdminServiceFailsTest.java]:[admin]:[4]:method_text:[t),                serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE, userHandle);    }}]) :|: public void testCannotBind() throws Exception {
        UserHandle otherProfile = Utils.getOtherProfile(mContext);
        if (otherProfile != null) {
            checkCannotBind(AdminReceiver.COMP_DPC_PACKAGE_NAME, otherProfile);
            checkCannotBind(AdminReceiver.COMP_DPC_2_PACKAGE_NAME, otherProfile);
        }
    }

    private void checkCannotBind(String targetPackageName, UserHandle otherProfile) {
        try {
            final Intent serviceIntent = new Intent();
            serviceIntent.setClassName(targetPackageName, ProtectedCrossUserService.class.getName());
            bind(serviceIntent, EMPTY_SERVICE_CONNECTION, otherProfile);
            fail(""SecurityException should be thrown"");
        } catch (SecurityException ex) {
            MoreAsserts.assertContainsRegex(
                    ""Not allowed to bind to target user id"", ex.getMessage());
        }
    }

    private boolean bind(Intent serviceIntent, ServiceConnection serviceConnection,
            UserHandle userHandle) {
        return mDpm.bindDeviceAdminServiceAsUser(AdminReceiver.getComponentName(mContext),
                serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE, userHandle);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceFailsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.DeviceWideLoggingFeaturesTest"	"testRetrievingLogsThrowsSecurityException"	""	"1: admin"	"([3:/com/android/cts/comp/DeviceWideLoggingFeaturesTest.java]:[admin]:[3]:method_text:[ow expected SecurityException"");        } catch (SecurityException expected) {        }    }   ]) :|: public void testRetrievingLogsThrowsSecurityException() {
        try {
            mDevicePolicyManager.retrieveSecurityLogs(mAdminComponent);
            fail(""retrieveSecurityLogs did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }

        try {
            mDevicePolicyManager.retrievePreRebootSecurityLogs(mAdminComponent);
            fail(""retrievePreRebootSecurityLogs did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }

        try {
            mDevicePolicyManager.retrieveNetworkLogs(mAdminComponent, NETWORK_LOGGING_BATCH_TOKEN);
            fail(""retrieveNetworkLogs did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/DeviceWideLoggingFeaturesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.DeviceWideLoggingFeaturesTest"	"testRetrievingLogsDoesNotThrowException"	""	"1: admin"	"([3:/com/android/cts/comp/DeviceWideLoggingFeaturesTest.java]:[admin]:[3]:method_text:[  mDevicePolicyManager.retrieveNetworkLogs(mAdminComponent, NETWORK_LOGGING_BATCH_TOKEN);    }   ]) :|: public void testRetrievingLogsDoesNotThrowException() {
        mDevicePolicyManager.retrieveSecurityLogs(mAdminComponent);
        mDevicePolicyManager.retrievePreRebootSecurityLogs(mAdminComponent);
        mDevicePolicyManager.retrieveNetworkLogs(mAdminComponent, NETWORK_LOGGING_BATCH_TOKEN);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/DeviceWideLoggingFeaturesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.DeviceWideLoggingFeaturesTest"	"testRequestBugreportThrowsSecurityException"	""	"1: admin"	"([1:/com/android/cts/comp/DeviceWideLoggingFeaturesTest.java]:[admin]:[1]:method_text:[ow expected SecurityException"");        } catch (SecurityException expected) {        }    }   ]) :|: public void testRequestBugreportThrowsSecurityException() {
        try {
            mDevicePolicyManager.requestBugreport(mAdminComponent);
            fail(""requestBugreport did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/DeviceWideLoggingFeaturesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.DeviceWideLoggingFeaturesTest"	"testRequestBugreportDoesNotThrowException"	""	"1: admin"	"([1:/com/android/cts/comp/DeviceWideLoggingFeaturesTest.java]:[admin]:[1]:method_text:[DoesNotThrowException() {        mDevicePolicyManager.requestBugreport(mAdminComponent);    }   ]) :|: public void testRequestBugreportDoesNotThrowException() {
        mDevicePolicyManager.requestBugreport(mAdminComponent);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/DeviceWideLoggingFeaturesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.DeviceWideLoggingFeaturesTest"	"testEnablingNetworkAndSecurityLogging"	""	"1: admin"	"([6:/com/android/cts/comp/DeviceWideLoggingFeaturesTest.java]:[admin]:[6]:method_text:[true);        assertTrue(mDevicePolicyManager.isNetworkLoggingEnabled(mAdminComponent));    }   ]) :|: public void testEnablingNetworkAndSecurityLogging() {
        assertFalse(mDevicePolicyManager.isSecurityLoggingEnabled(mAdminComponent));
        assertFalse(mDevicePolicyManager.isNetworkLoggingEnabled(mAdminComponent));

        mDevicePolicyManager.setSecurityLoggingEnabled(mAdminComponent, true);
        assertTrue(mDevicePolicyManager.isSecurityLoggingEnabled(mAdminComponent));
        mDevicePolicyManager.setNetworkLoggingEnabled(mAdminComponent, true);
        assertTrue(mDevicePolicyManager.isNetworkLoggingEnabled(mAdminComponent));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/DeviceWideLoggingFeaturesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.DeviceWideLoggingFeaturesTest"	"testDisablingNetworkAndSecurityLogging"	""	"1: admin"	"([4:/com/android/cts/comp/DeviceWideLoggingFeaturesTest.java]:[admin]:[4]:method_text:[onent));        assertFalse(mDevicePolicyManager.isNetworkLoggingEnabled(mAdminComponent));    }}]) :|: public void testDisablingNetworkAndSecurityLogging() {
        mDevicePolicyManager.setSecurityLoggingEnabled(mAdminComponent, false);
        mDevicePolicyManager.setNetworkLoggingEnabled(mAdminComponent, false);
        assertFalse(mDevicePolicyManager.isSecurityLoggingEnabled(mAdminComponent));
        assertFalse(mDevicePolicyManager.isNetworkLoggingEnabled(mAdminComponent));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/DeviceWideLoggingFeaturesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.ManagementTest"	"testIsManagedProfile"	""	"1: admin"	"([3:/com/android/cts/comp/ManagementTest.java]:[admin]:[3]:method_text:[Manager.isManagedProfile(                AdminReceiver.getComponentName(getContext())));    }   ]) :|: public void testIsManagedProfile() {
        assertNotNull(mDevicePolicyManager);
        assertTrue(mDevicePolicyManager.isAdminActive(
                AdminReceiver.getComponentName(getContext())));
        assertTrue(mDevicePolicyManager.isProfileOwnerApp(getContext().getPackageName()));
        assertTrue(mDevicePolicyManager.isManagedProfile(
                AdminReceiver.getComponentName(getContext())));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/ManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.ManagementTest"	"testIsDeviceOwner"	""	"1: admin"	"([3:/com/android/cts/comp/ManagementTest.java]:[admin]:[3]:method_text:[file is enabled.     * Otherwise, {@link Utils#getOtherProfile} won't return a profile.     */   ]) :|: public void testIsDeviceOwner() {
        assertNotNull(mDevicePolicyManager);
        assertTrue(mDevicePolicyManager.isAdminActive(
                AdminReceiver.getComponentName(getContext())));
        assertTrue(mDevicePolicyManager.isDeviceOwnerApp(getContext().getPackageName()));
        assertFalse(mDevicePolicyManager.isManagedProfile(
                AdminReceiver.getComponentName(getContext())));
    }

    /**
     * Assumes that the managed profile is enabled.
     * Otherwise, {@link Utils#getOtherProfile} won't return a profile.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/ManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.ManagementTest"	"testOtherProfilesEqualsBindTargetUsers"	""	"1: admin"	"([2:/com/android/cts/comp/ManagementTest.java]:[admin]:[2]:method_text:[llowedTargetUsers.size());        assertEquals(otherProfile, allowedTargetUsers.get(0));    }   ]) :|: public void testOtherProfilesEqualsBindTargetUsers() {
        UserHandle otherProfile = Utils.getOtherProfile(mContext);
        assertNotNull(otherProfile);

        List<UserHandle> allowedTargetUsers = mDevicePolicyManager.getBindDeviceAdminTargetUsers(
                AdminReceiver.getComponentName(mContext));
        assertEquals(1, allowedTargetUsers.size());
        assertEquals(otherProfile, allowedTargetUsers.get(0));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/ManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.ManagementTest"	"testCreateSecondaryUser"	""	"1: admin"	"([4:/com/android/cts/comp/ManagementTest.java]:[admin]:[4]:method_text:[, ""secondary-user"",                admin, null, DevicePolicyManager.SKIP_SETUP_WIZARD));    }   ]) :|: public void testCreateSecondaryUser() throws Exception {
        ComponentName admin = AdminReceiver.getComponentName(mContext);
        assertNotNull(mDevicePolicyManager.createAndManageUser(admin, ""secondary-user"",
                admin, null, DevicePolicyManager.SKIP_SETUP_WIZARD));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/ManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.ManagementTest"	"testNoBindDeviceAdminTargetUsers"	""	"1: admin"	"([3:/com/android/cts/comp/ManagementTest.java]:[admin]:[3]:method_text:[r.getBindDeviceAdminTargetUsers(                AdminReceiver.getComponentName(mContext)));    }}]) :|: public void testNoBindDeviceAdminTargetUsers() {
        MoreAsserts.assertEmpty(mDevicePolicyManager.getBindDeviceAdminTargetUsers(
                AdminReceiver.getComponentName(mContext)));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/ManagementTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.provisioning.ManagedProfileProvisioningTest"	"testProvisioningCorpOwnedManagedProfile"	""	"2: silent admin"	"([2:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[admin]:[2]:method_text:[ntent) {        return intent != null && intent.getExtras().containsKey(Intent.EXTRA_USER);    }}]) :|: public void testProvisioningCorpOwnedManagedProfile() throws Exception {
        Intent intent = new Intent(ACTION_PROVISION_MANAGED_PROFILE)
            .putExtra(DevicePolicyManager.EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME,
                    AdminReceiver.getComponentName(getContext()))
            .putExtra(DevicePolicyManager.EXTRA_PROVISIONING_SKIP_ENCRYPTION, true)
            // this flag for Corp owned only
            .putExtra(DevicePolicyManager.EXTRA_PROVISIONING_SKIP_USER_CONSENT, true);

        SilentProvisioningTestManager provisioningManager =
                new SilentProvisioningTestManager(getContext());
        assertFalse(provisioningManager.startProvisioningAndWait(intent));
        assertFalse(isExtraUserPresent(provisioningManager.getReceviedProfileProvisionedIntent()));
    }

    private boolean isExtraUserPresent(Intent intent) {
        return intent != null && intent.getExtras().containsKey(Intent.EXTRA_USER);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.provisioning.AffiliationTest"	"testSetAffiliationId2"	""	"1: admin"	"([4:/com/android/cts/comp/provisioning/AffiliationTest.java]:[admin]:[4]:method_text:[ dpm.setAffiliationIds(admin, ids);        assertEquals(ids, dpm.getAffiliationIds(admin));    }}]) :|: public void testSetAffiliationId2() {
        setAffiliationId(""id.number.2"");
    }

    private void setAffiliationId(String id) {
        ComponentName admin = AdminReceiver.getComponentName(getContext());
        DevicePolicyManager dpm = (DevicePolicyManager)
                mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
        Set<String> ids = Collections.singleton(id);
        dpm.setAffiliationIds(admin, ids);
        assertEquals(ids, dpm.getAffiliationIds(admin));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/AffiliationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.provisioning.UserRestrictionTest"	"testAddDisallowRemoveUserRestriction"	""	"1: UserManager.DISALLOW"	"([1:/com/android/cts/comp/provisioning/UserRestrictionTest.java]:[UserManager.DISALLOW]:[1]:method_text:[veUserRestriction() {        setUserRestriction(UserManager.DISALLOW_REMOVE_USER, true);    }   ]) :|: public void testAddDisallowRemoveUserRestriction() {
        setUserRestriction(UserManager.DISALLOW_REMOVE_USER, true);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/UserRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.comp.provisioning.UserRestrictionTest"	"testClearDisallowRemoveUserRestriction"	""	"2: UserManager.DISALLOW admin"	"([4:/com/android/cts/comp/provisioning/UserRestrictionTest.java]:[admin]:[4]:method_text:[ction);        } else {            dpm.clearUserRestriction(admin, restriction);        }    }}]) :|: public void testClearDisallowRemoveUserRestriction() {
        setUserRestriction(UserManager.DISALLOW_REMOVE_USER, false);
    }

    private void setUserRestriction(String restriction, boolean add) {
        DevicePolicyManager dpm = getContext().getSystemService(DevicePolicyManager.class);
        ComponentName admin = AdminReceiver.getComponentName(getContext());
        if (add) {
            dpm.addUserRestriction(admin, restriction);
        } else {
            dpm.clearUserRestriction(admin, restriction);
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/UserRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileIntentFilterTest"	"CrossProfileIntentFilterTest"	""	"1: admin"	"([3:/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java]:[admin]:[3]:method_text:[nager.clearCrossProfileIntentFilters(ADMIN_RECEIVER_COMPONENT);        super.tearDown();    }   ]) :|: public void test/*
 *.
 */
package com.android.cts.managedprofile;

import static com.android.cts.managedprofile.BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT;
import static com.google.common.truth.Truth.assertThat;

import android.app.admin.DevicePolicyManager;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.test.ActivityInstrumentationTestCase2;

import androidx.test.InstrumentationRegistry;

import java.util.List;

/**
 * Test for {@link DevicePolicyManager#addCrossProfileIntentFilter} API.
 *
 * <p>Note that it expects that there is an activity responding to {@code PrimaryUserActivity
 * .ACTION} in the primary profile, one to {@code ManagedProfileActivity.ACTION} in the secondary
 * profile, and one to {@code AllUsersActivity.ACTION} in both profiles.
 */
public class CrossProfileIntentFilterTest extends ActivityInstrumentationTestCase2<TestActivity> {

    private PackageManager mPackageManager;
    private DevicePolicyManager mDevicePolicyManager;

    public CrossProfileIntentFilterTest() {
        super(TestActivity.class);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        // As the way to access Instrumentation is changed in the new runner, we need to inject it
        // manually into ActivityInstrumentationTestCase2. ActivityInstrumentationTestCase2 will
        // be marked as deprecated and replaced with ActivityTestRule.
        injectInstrumentation(InstrumentationRegistry.getInstrumentation());
        mPackageManager = getActivity().getPackageManager();
        mDevicePolicyManager = (DevicePolicyManager)
                getActivity().getSystemService(Context.DEVICE_POLICY_SERVICE);
    }

    @Override
    protected void tearDown() throws Exception {
        mDevicePolicyManager.clearCrossProfileIntentFilters(ADMIN_RECEIVER_COMPONENT);
        super.tea"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileIntentFilterTest"	"testClearCrossProfileIntentFilters"	""	"1: admin"	"([2:/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java]:[admin]:[2]:method_text:[ManagedProfileActivity.ACTION);        assertTrue(getActivity().checkActivityStarted());    }   ]) :|: public void testClearCrossProfileIntentFilters() {
        IntentFilter testIntentFilter = new IntentFilter();
        testIntentFilter.addAction(PrimaryUserActivity.ACTION);
        mDevicePolicyManager.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT,
                testIntentFilter, DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);
        final List<ResolveInfo> activities =
                mPackageManager.queryIntentActivities(
                        new Intent(PrimaryUserActivity.ACTION), /* flags = */ 0);
        assertThat(activities).hasSize(1);
        assertThat(activitiesIncludeCrossProfileIntentForwarderActivity(activities)).isTrue();

        mDevicePolicyManager.clearCrossProfileIntentFilters(ADMIN_RECEIVER_COMPONENT);

        assertTrue(mPackageManager.queryIntentActivities(
                new Intent(PrimaryUserActivity.ACTION), /* flags = */ 0).isEmpty());
        getActivity().startActivity(ManagedProfileActivity.ACTION);
        assertTrue(getActivity().checkActivityStarted());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileIntentFilterTest"	"testAddCrossProfileIntentFilter_primary"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java]:[admin]:[1]:method_text:[ty(PrimaryUserActivity.ACTION);        assertTrue(getActivity().checkActivityStarted());    }   ]) :|: public void testAddCrossProfileIntentFilter_primary() {
        assertEquals(0, mPackageManager.queryIntentActivities(
                new Intent(PrimaryUserActivity.ACTION), /* flags = */ 0).size());

        IntentFilter testIntentFilter = new IntentFilter();
        testIntentFilter.addAction(PrimaryUserActivity.ACTION);
        mDevicePolicyManager.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT,
                testIntentFilter, DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);

        final List<ResolveInfo> activities =
                mPackageManager.queryIntentActivities(
                        new Intent(PrimaryUserActivity.ACTION), /* flags = */ 0);
        assertThat(activities).hasSize(1);
        assertThat(activitiesIncludeCrossProfileIntentForwarderActivity(activities)).isTrue();
        getActivity().startActivity(PrimaryUserActivity.ACTION);
        assertTrue(getActivity().checkActivityStarted());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileIntentFilterTest"	"testAddCrossProfileIntentFilter_all"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java]:[admin]:[1]:method_text:[ presented which        // requires human intervention, so we won't be testing like that    }   ]) :|: public void testAddCrossProfileIntentFilter_all() {
        assertEquals(1, mPackageManager.queryIntentActivities(
                new Intent(AllUsersActivity.ACTION), /* flags = */ 0).size());

        IntentFilter testIntentFilter = new IntentFilter();
        testIntentFilter.addAction(AllUsersActivity.ACTION);
        mDevicePolicyManager.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT,
                testIntentFilter, DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);

        final List<ResolveInfo> activities =
                mPackageManager.queryIntentActivities(
                        new Intent(AllUsersActivity.ACTION), /* flags = */ 0);
        assertThat(activities).hasSize(2);
        assertThat(activitiesIncludeCrossProfileIntentForwarderActivity(activities)).isTrue();
        // If we used startActivity(), the user would have a disambiguation dialog presented which
        // requires human intervention, so we won't be testing like that
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileIntentFilterTest"	"testAddCrossProfileIntentFilter_work"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java]:[admin]:[1]:method_text:[rderActivity()) {                return true;            }        }        return false;    }}]) :|: public void testAddCrossProfileIntentFilter_work() {
        assertEquals(1, mPackageManager.queryIntentActivities(
                new Intent(ManagedProfileActivity.ACTION), /* flags = */ 0).size());

        IntentFilter testIntentFilter = new IntentFilter();
        testIntentFilter.addAction(ManagedProfileActivity.ACTION);
        mDevicePolicyManager.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT,
                testIntentFilter, DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);

        // We should still be resolving in the profile
        final List<ResolveInfo> activities =
                mPackageManager.queryIntentActivities(
                        new Intent(ManagedProfileActivity.ACTION), /* flags = */ 0);
        assertThat(activities).hasSize(1);
        assertThat(activitiesIncludeCrossProfileIntentForwarderActivity(activities)).isFalse();
        getActivity().startActivity(ManagedProfileActivity.ACTION);
        assertTrue(getActivity().checkActivityStarted());
    }

    private boolean activitiesIncludeCrossProfileIntentForwarderActivity(
            List<ResolveInfo> activities) {
        for (ResolveInfo activity : activities) {
            if (activity.isCrossProfileIntentForwarderActivity()) {
                return true;
            }
        }
        return false;
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.DisallowSharingIntoProfileTest"	"testDisableSharingIntoProfile"	""	"2: UserManager.DISALLOW admin"	"([2:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[admin]:[2]:method_text:[vityInfo.name)) {                return true;            }        }        return false;    }}]) :|: public void testDisableSharingIntoProfile() throws Exception {
        setSharingEnabled(false);
    }

    private void setSharingEnabled(boolean enabled) throws InterruptedException {
        final CountDownLatch latch = new CountDownLatch(1);
        BroadcastReceiver receiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                latch.countDown();
            }
        };
        IntentFilter filter = new IntentFilter();
        filter.addAction(DevicePolicyManager.ACTION_DATA_SHARING_RESTRICTION_APPLIED);
        mContext.registerReceiver(receiver, filter);
        try {
            if (enabled) {
                mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                        UserManager.DISALLOW_SHARE_INTO_MANAGED_PROFILE);
            } else {
                mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                        UserManager.DISALLOW_SHARE_INTO_MANAGED_PROFILE);
            }
            // Wait for the restriction to apply
            assertTrue(""Restriction not applied after 60 seconds"", latch.await(60, SECONDS));
        } finally {
            mContext.unregisterReceiver(receiver);
        }
    }

    private void assertCrossProfileIntentsResolvability(List<Intent> intents,
            ResolveInfo expectedForwarder, boolean expectForwardable) {
        for (Intent intent : intents) {
            List<ResolveInfo> resolveInfoList = mContext.getPackageManager().queryIntentActivities(
                    intent,
                    PackageManager.MATCH_DEFAULT_ONLY);
            if (expectForwardable) {
                assertTrue(""Expect "" + intent + "" to be forwardable, but resolve list""
                        + "" does not contain expected intent forwarder "" + expectedForwarder,
                        containsResolveInfo(resolveInfoList, expectedForwarder));
            } else {
                assertFalse(""Expect"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.DisallowSharingIntoProfileTest"	"testSetUp"	""	"1: admin"	"([3:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[admin]:[3]:method_text:[     * {@link #DisallowSharingIntoProfileTest} class for the mechanism behind this test.     */   ]) :|: public void testSetUp() throws Exception {
        // toggle the restriction to reset system's built-in cross profile intent filters,
        // simulating the default state of a work profile created by ManagedProvisioning
        testDisableSharingIntoProfile();
        testEnableSharingIntoProfile();

        PackageManager pm = mContext.getPackageManager();
        if (pm.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {
            sharingIntentsToPersonal.addAll(sharingIntentsToPersonalIfCameraExists);
        }

        mDevicePolicyManager.clearCrossProfileIntentFilters(ADMIN_RECEIVER_COMPONENT);
        // Set up cross profile intent filters so we can resolve these to find out framework's
        // intent forwarder activity as ground truth
        mDevicePolicyManager.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT,
                new IntentFilter(KNOWN_ACTION_TO_PERSONAL),
                DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);
        mDevicePolicyManager.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT,
                new IntentFilter(KNOWN_ACTION_TO_PROFILE),
                DevicePolicyManager.FLAG_MANAGED_CAN_ACCESS_PARENT);
    }

    /**
     * Test sharing initiated from the personal side are mainly driven from the host side, see
     * ManagedProfileTest.testDisallowSharingIntoProfileFromPersonal() See javadoc of
     * {@link #DisallowSharingIntoProfileTest} class for the mechanism behind this test.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.WifiTest"	"isWifiEnabled"	""	"1: admin"	"([1:/com/android/cts/managedprofile/WifiTest.java]:[admin]:[1]:method_text:[   *   <li>Network with SSID {@link WifiTest#NETWORK_SSID} is created.</li>     * </ul>     */   ]) :|: public void test/*
 *.
 */

package com.android.cts.managedprofile;

import static com.android.compatibility.common.util.WifiConfigCreator.SECURITY_TYPE_NONE;

import android.app.admin.DevicePolicyManager;
import android.content.Context;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiManager;
import android.os.SystemClock;
import android.test.AndroidTestCase;

import com.android.compatibility.common.util.SystemUtil;
import com.android.compatibility.common.util.WifiConfigCreator;

import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * Driven by the host-side test: com.android.cts.devicepolicy.ManagedProfileTest
 *
 * Each of these tests can run independently but have side-effects. The side-effects are used as
 * building blocks to test various cleanup routines, for example that networks belonging to one
 * user are deleted
 */
public class WifiTest extends AndroidTestCase {
    private static final String TAG = WifiTest.class.getSimpleName();

    // Unique SSID to use for this test (max SSID length is 32)
    private static final String NETWORK_SSID = ""com.android.cts.xwde7ktvh8rmjuhr"";

    // Time duration to allow before assuming that a WiFi operation failed and ceasing to wait.
    private static final long UPDATE_TIMEOUT_MS = TimeUnit.MINUTES.toMillis(5);
    private static final long UPDATE_INTERVAL_MS = TimeUnit.SECONDS.toMillis(1);

    private WifiConfigCreator mWifiConfigCreator;

    // Shared WifiManager instance.
    private WifiManager mWifiManager;

    @Override
    public void setUp() throws Exception {
        super.setUp();
        mWifiConfigCreator = new WifiConfigCreator(getContext());
        mWifiManager = (WifiManager) getContext().getSystemService(Context.WIFI_SERVICE);
        if (!mWifiManager.isWifiEnabled()) {
            SystemUtil.runShellCommand(""svc wifi enable"");
            awaitWifiEnabledState(true);
        }
    }

    /**
     * Add a network through the WifiManager API. Verifies that the"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/WifiTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.WifiTest"	"testCannotGetWifiMacAddress"	""	"1: admin"	"([1:/com/android/cts/managedprofile/WifiTest.java]:[admin]:[1]:method_text:[               return config;                }            }        }        return null;    }}]) :|: public void testCannotGetWifiMacAddress() {
        DevicePolicyManager dpm = getContext().getSystemService(DevicePolicyManager.class);
        try {
            dpm.getWifiMacAddress(BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT);
            fail(""Managed Profile owner shouldn't be able to get the MAC address"");
        } catch (SecurityException expected) {

        }
    }

    /**
     * Block until a network configuration with a certain SSID either exists or ceases to.
     * Wait for up to {@link WifiTest#UPDATE_TIMEOUT_MS} milliseconds, in increments of
     * {@link WifiTest#UPDATE_INTERVAL_MS}.
     */
    private boolean awaitNetworkState(String ssid, boolean exists) {
        for (int probes = 0; probes * UPDATE_INTERVAL_MS <= UPDATE_TIMEOUT_MS; probes++) {
            if (probes != 0) {
                SystemClock.sleep(UPDATE_INTERVAL_MS);
            }
            if ((getNetworkForSsid(ssid) != null) == exists) {
                return true;
            }
        }
        return false;
    }

    /**
     * Block until {@link WifiManager#isWifiEnabled()} returns {@param enabled}. Wait for up to
     * {@link WifiTest#UPDATE_TIMEOUT_MS} milliseconds, in increments of
     * {@link WifiTest#UPDATE_INTERVAL_MS}.
     */
    private void awaitWifiEnabledState(boolean enabled) throws RuntimeException {
        for (int probes = 0; probes * UPDATE_INTERVAL_MS <= UPDATE_TIMEOUT_MS; probes++) {
            if (probes != 0) {
                SystemClock.sleep(UPDATE_INTERVAL_MS);
            }
            if (mWifiManager.isWifiEnabled() == enabled) {
                return;
            }
        }
        throw new RuntimeException(""Waited too long for wifi enabled state = "" + enabled);
    }

    /**
     * Internal method to find an existing {@link WifiConfiguration} with the given SSID.
     *
     * @return A {@link WifiConfiguration} matching the specification, or {@code null} if no such
     *         configuration exists.
     */
    private WifiCo"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/WifiTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ResetPasswordWithTokenTest"	"testSetupWorkProfile"	""	"1: admin"	"([1:/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java]:[admin]:[1]:method_text:[r.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT, PASSWORD0,                token, 0));    }   ]) :|: public void testSetupWorkProfile() {
        testSetResetPasswordToken();
        // Reset password on the work profile will enable separate work challenge for it.
        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT, PASSWORD0,
                token, 0));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ResetPasswordWithTokenTest"	"testResetPasswordBeforeUnlock"	""	"1: admin"	"([4:/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java]:[admin]:[4]:method_text:[""Did not throw expected exception."");        } catch (IllegalStateException expected) {}    }   ]) :|: public void testResetPasswordBeforeUnlock() {
        UserManager um = mContext.getSystemService(UserManager.class);
        assertFalse(um.isUserUnlocked());
        assertTrue(mDevicePolicyManager.isResetPasswordTokenActive(ADMIN_RECEIVER_COMPONENT));
        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT, PASSWORD1,
                token, 0));

        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.PASSWORD_QUALITY_NUMERIC);
        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 6);
        try {
            mDevicePolicyManager.isActivePasswordSufficient();
            fail(""Did not throw expected exception."");
        } catch (IllegalStateException expected) {}
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ResetPasswordWithTokenTest"	"testClearPasswordBeforeUnlock"	""	"1: admin"	"([2:/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java]:[admin]:[2]:method_text:[isUserUnlocked());        assertTrue(mDevicePolicyManager.isActivePasswordSufficient());    }   ]) :|: public void testClearPasswordBeforeUnlock() {
        UserManager um = mContext.getSystemService(UserManager.class);
        assertFalse(um.isUserUnlocked());
        assertTrue(mDevicePolicyManager.isResetPasswordTokenActive(ADMIN_RECEIVER_COMPONENT));
        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT, null,
                token, 0));

        // When password is cleared, the system should automatically unlock the user.
        final BlockingBroadcastReceiver receiver = new BlockingBroadcastReceiver(mContext,
                Intent.ACTION_USER_UNLOCKED);
        receiver.register();
        try {
            // Give the broadcast long enough time, as unlocking user could be slow.
            assertNotNull(receiver.awaitForBroadcast(90_000));
        } finally {
            receiver.unregisterQuietly();
        }
        assertTrue(um.isUserUnlocked());
        assertTrue(mDevicePolicyManager.isActivePasswordSufficient());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ResetPasswordWithTokenTest"	"testSetResetPasswordToken"	""	"1: admin"	"([2:/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java]:[admin]:[2]:method_text:[      assertTrue(mDevicePolicyManager.isResetPasswordTokenActive(ADMIN_RECEIVER_COMPONENT));    }}]) :|: public void testSetResetPasswordToken() {
        assertTrue(mDevicePolicyManager.setResetPasswordToken(ADMIN_RECEIVER_COMPONENT, token));
        assertTrue(mDevicePolicyManager.isResetPasswordTokenActive(ADMIN_RECEIVER_COMPONENT));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ActivePasswordSufficientForDeviceTest"	"testActivePsswordSufficientForDevice_IrrelevantProfilePolicy"	""	"1: admin"	"([2:/com/android/cts/managedprofile/ActivePasswordSufficientForDeviceTest.java]:[admin]:[2]:method_text:[ assertTrue(mParentDevicePolicyManager.isActivePasswordSufficientForDeviceRequirement());    }   ]) :|: public void testActivePsswordSufficientForDevice_IrrelevantProfilePolicy() {
        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_NUMERIC);
        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 4);
        mDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_MEDIUM);
        assertTrue(mParentDevicePolicyManager.isActivePasswordSufficientForDeviceRequirement());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ActivePasswordSufficientForDeviceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ActivePasswordSufficientForDeviceTest"	"testActivePsswordSufficientForDevice_UnifiedPassword_BothPolicies"	""	"1: admin"	"([3:/com/android/cts/managedprofile/ActivePasswordSufficientForDeviceTest.java]:[admin]:[3]:method_text:[          fail(""Failed to clear user credential: "" + commandOutput);            }        }    }}]) :|: public void testActivePsswordSufficientForDevice_UnifiedPassword_BothPolicies() {
        changeUserCredential(""1234"", null, USER_SYSTEM);
        try {
            mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                    PASSWORD_QUALITY_ALPHANUMERIC);
            mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 4);
            mParentDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_LOW);

            assertFalse(mDevicePolicyManager.isActivePasswordSufficient());
            assertTrue(mParentDevicePolicyManager.isActivePasswordSufficientForDeviceRequirement());
        } finally {
            mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                    PASSWORD_QUALITY_UNSPECIFIED);
            mParentDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_NONE);
            changeUserCredential(null, ""1234"", USER_SYSTEM);
        }
    }

    //TODO: reinstate test once LockSettingsShellCommand allows setting password for profiles
    // that have unified challenge b/176230819
    private void toTestActivePsswordSufficientForDevice_SeparatePassword_BothPolicies() {
        final int myUserId = UserHandle.getUserId(Process.myUid());
        changeUserCredential(""1234"", null, USER_SYSTEM);
        changeUserCredential(""asdf12"", ""1234"", myUserId); // This currently fails
        try {
            mDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_LOW);
            mParentDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_HIGH);

            assertTrue(mDevicePolicyManager.isActivePasswordSufficient());
            assertFalse(
                    mParentDevicePolicyManager.isActivePasswordSufficientForDeviceRequirement());
        } finally {
            mDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_NONE);
            mParentDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXIT"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ActivePasswordSufficientForDeviceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.PrimaryUserTest"	"PrimaryUserTest"	""	"1: admin"	"([1:/com/android/cts/managedprofile/PrimaryUserTest.java]:[admin]:[1]:method_text:[istry.getInstrumentation());        mPackageManager = getActivity().getPackageManager();    }   ]) :|: public void test/*
 *.
 */

package com.android.cts.managedprofile;

import android.app.admin.DevicePolicyManager;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.test.ActivityInstrumentationTestCase2;

import androidx.test.InstrumentationRegistry;

/**
 * Test for {@link DevicePolicyManager#addCrossProfileIntentFilter} API, for
 * {@code DevicePolicyManager.FLAG_MANAGED_CAN_ACCESS_PARENT}.
 *
 * Note that it expects that there is an activity responding to {@code PrimaryUserActivity.ACTION}
 * in the primary profile, one to {@code ManagedProfileActivity.ACTION} in the secondary profile,
 * and one to {@code AllUsersActivity.ACTION} in both profiles.
 *
 * Note that the {code DevicePolicyManager#clearCrossProfileIntentFilters} as well as more complex
 * test scenarios can be found in {@link ManagedProfileTest}.
 */
public class PrimaryUserTest extends ActivityInstrumentationTestCase2<TestActivity> {

    private PackageManager mPackageManager;

    public PrimaryUserTest() {
        super(TestActivity.class);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        // As the way to access Instrumentation is changed in the new runner, we need to inject it
        // manually into ActivityInstrumentationTestCase2. ActivityInstrumentationTestCase2 will
        // be marked as deprecated and replaced with ActivityTestRule.
        injectInstrumentation(InstrumentationRegistry.getInstrumentation());
        mPackageManager = getActivity().getPackageManager();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PrimaryUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.WipeDataNotificationTest"	"testWipeDataWithoutReasonVerification"	""	"1: admin"	"([1:/com/android/cts/managedprofile/WipeDataNotificationTest.java]:[admin]:[1]:method_text:[ com.android.cts.managedprofile/.WipeDataReceiver"";        SystemUtil.runShellCommand(cmd);    }}]) :|: public void testWipeDataWithoutReasonVerification() throws Exception {
        int profileId = getProfileId();
        assertTrue(""Invalid profileId"", profileId > 0);

        CountDownLatch notificationLatch = initWipeNotificationLatch("""", """");
        sendWipeProfileBroadcast(WipeDataReceiver.ACTION_WIPE_DATA_WITHOUT_REASON, profileId);

        assertFalse(""Wipe notification found"",
                notificationLatch.await(NOTIF_TIMEOUT_SECONDS, TimeUnit.SECONDS));
        NotificationListener.getInstance().clearListeners();
    }

    private int getProfileId() {
        int profileId = -1;
        final Bundle testArguments = InstrumentationRegistry.getArguments();
        if (testArguments.containsKey(""profileId"")) {
            profileId = Integer.parseInt(testArguments.getString(""profileId""));
        }
        return profileId;
    }

    private CountDownLatch initWipeNotificationLatch(@NonNull String notificationTitle,
            @NonNull String notificationText) {
        CountDownLatch notificationCounterLatch = new CountDownLatch(1);
        NotificationListener.getInstance().addListener((notification) -> {
            if (notification.getNotification().getChannelId().equals(
                    SystemNotificationChannels.DEVICE_ADMIN)) {
                assertEquals(""Wipe notification title not found"", notificationTitle,
                        notification.getNotification().extras.getString(Notification.EXTRA_TITLE));
                // do not check reason text if param is empty == ignore notif. text
                if (!TextUtils.isEmpty(notificationText)) {
                    assertEquals(""Wipe notification content not found"", notificationText,
                            notification.getNotification().extras.getString(
                                    Notification.EXTRA_TEXT));
                }
                notificationCounterLatch.countDown();
            }
        });
        return notificationCounterLatch;
    }

    private void sendW"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/WipeDataNotificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.PrimaryUserAdminHelper"	"testClearDeviceAdmin"	""	"1: admin"	"([9:/com/android/cts/managedprofile/PrimaryUserAdminHelper.java]:[admin]:[9]:method_text:[       }        }        assertFalse(""Clear device admin failed"", mDpm.isAdminActive(cn));    }}]) :|: public void testClearDeviceAdmin() throws Exception {
        ComponentName cn = PrimaryUserDeviceAdmin.ADMIN_RECEIVER_COMPONENT;
        if (mDpm.isAdminActive(cn)) {
            mDpm.removeActiveAdmin(cn);
            // Wait until device admin is not active (with 2 minutes timeout).
            for (int i = 0; i < 2 * 60 && mDpm.isAdminActive(cn); i++) {
                Thread.sleep(1000);  // 1 second.
            }
        }
        assertFalse(""Clear device admin failed"", mDpm.isAdminActive(cn));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PrimaryUserAdminHelper.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.SettingsIntentsTest"	"testSecurity"	""	"1: admin"	"([1:/com/android/cts/managedprofile/SettingsIntentsTest.java]:[admin]:[1]:method_text:[Activity(                new Intent(Settings.ACTION_SECURITY_SETTINGS), 0 /* flags */));    }   ]) :|: public void testSecurity() {
        // This leads to device administrators, screenlock etc.
        assertNotNull(mPackageManager.resolveActivity(
                new Intent(Settings.ACTION_SECURITY_SETTINGS), 0 /* flags */));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/SettingsIntentsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.NotificationListenerTest"	"testSetEmptyAllowlist"	""	"1: admin"	"([1:/com/android/cts/managedprofile/NotificationListenerTest.java]:[admin]:[1]:method_text:[edProfileTest.ADMIN_RECEIVER_COMPONENT,                Collections.<String>emptyList());    }   ]) :|: 
    public void testSetEmptyAllowlist() throws Exception {
        mDpm.setPermittedCrossProfileNotificationListeners(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT,
                Collections.<String>emptyList());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/NotificationListenerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.NotificationListenerTest"	"testAddListenerToAllowlist"	""	"1: admin"	"([1:/com/android/cts/managedprofile/NotificationListenerTest.java]:[admin]:[1]:method_text:[ECEIVER_COMPONENT,                Collections.singletonList(mContext.getPackageName()));    }   ]) :|: 
    public void testAddListenerToAllowlist() throws Exception {
        mDpm.setPermittedCrossProfileNotificationListeners(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT,
                Collections.singletonList(mContext.getPackageName()));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/NotificationListenerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.NotificationListenerTest"	"testSetNullAllowlist"	""	"1: admin"	"([1:/com/android/cts/managedprofile/NotificationListenerTest.java]:[admin]:[1]:method_text:[icationListeners(                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT, null);    }   ]) :|: 
    public void testSetNullAllowlist() throws Exception {
        mDpm.setPermittedCrossProfileNotificationListeners(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT, null);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/NotificationListenerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.NotificationListenerTest"	"testSetAndGetPermittedCrossProfileNotificationListeners"	""	"1: admin"	"([2:/com/android/cts/managedprofile/NotificationListenerTest.java]:[admin]:[2]:method_text:[         return mListenerConnectedLatch.await(TIMEOUT_SECONDS, TimeUnit.SECONDS);        }    }}]) :|: 
    public void testSetAndGetPermittedCrossProfileNotificationListeners() {
        List<String> packageList = ImmutableList.of(""package1"", ""package2"");

        mDpm.setPermittedCrossProfileNotificationListeners(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT, packageList);
        List<String> actualPackageList = mDpm.getPermittedCrossProfileNotificationListeners(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT);

        assertThat(actualPackageList).isEqualTo(packageList);
    }

    private void cancelProfileNotification() throws IOException {
        mDevice.executeShellCommand(
                ""am start --user "" + mProfileUserId + "" -a CANCEL_NOTIFICATION -n ""
                + SENDER_COMPONENT);
    }

    private void cancelPersonalNotification() throws IOException {
        mDevice.executeShellCommand(
                ""am start -a CANCEL_NOTIFICATION -n ""
                + SENDER_COMPONENT);
    }

    private void sendProfileNotification() throws IOException {
        mDevice.executeShellCommand(
                ""am start --user "" + mProfileUserId + "" -a POST_NOTIFICATION -n ""
                + SENDER_COMPONENT);
    }

    private void sendPersonalNotification() throws IOException {
        mDevice.executeShellCommand(
                ""am start -a POST_NOTIFICATION -n ""
                + SENDER_COMPONENT);
    }

    private void toggleNotificationListener(boolean enable) throws Exception {
        String testListener = new ComponentName(
                mContext, CrossProfileNotificationListenerService.class).flattenToString();
        mDevice.executeShellCommand(""cmd notification ""
                + (enable ?  ""allow_listener "" : ""disallow_listener "")
                + testListener);
        Log.i(TAG, ""Toggled notification listener state"" + testListener + "" to state "" + enable);
        if (enable) {
            assertThat(mReceiver.waitForListenerConnected()).isTrue();
        }
    }

    private int getParam(Bundle"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/NotificationListenerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CameraPolicyTest"	"testDisableCameraInManagedProfile"	""	"1: admin"	"([2:/com/android/cts/managedprofile/CameraPolicyTest.java]:[admin]:[2]:method_text:[ertTrue(mDevicePolicyManager.getCameraDisabled(null));        checkCanOpenCamera(false);    }   ]) :|: public void testDisableCameraInManagedProfile() throws Exception {
        mDevicePolicyManager.setCameraDisabled(mManagedProfileAdminComponent, true);
        assertTrue(mDevicePolicyManager.getCameraDisabled(mManagedProfileAdminComponent));
        assertTrue(mDevicePolicyManager.getCameraDisabled(null));
        checkCanOpenCamera(false);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CameraPolicyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CameraPolicyTest"	"testEnableCameraInManagedProfile"	""	"1: admin"	"([2:/com/android/cts/managedprofile/CameraPolicyTest.java]:[admin]:[2]:method_text:[ null;        } catch (InterruptedException e) {            e.printStackTrace();        }    }}]) :|: public void testEnableCameraInManagedProfile() throws Exception {
        mDevicePolicyManager.setCameraDisabled(mManagedProfileAdminComponent, false);
        assertFalse(mDevicePolicyManager.getCameraDisabled(mManagedProfileAdminComponent));
        assertFalse(mDevicePolicyManager.getCameraDisabled(null));
        checkCanOpenCamera(true);
    }


    /**
     * Beginning with Android 7.0, the camera restriction policy isn't kept in the
     * system property(""sys.secpolicy.camera.off_<userId>"") anymore, CameraService
     * now checks if camera is disabled via AppOpsService.
     *
     * The propagation of camera retriction policy from DevicePolicyManagerService
     * to UserManagerService and then finally to AppOpsService is NOT synchronous,
     * so here #blockUntilOpenCamera is called many times until policy is enforced
     * or timed out.
     *
     * @see android.app.AppOpsManager#checkOp(String, int, String)
     * @see android.app.AppOpsManager.OnOpChangedListener
     */
    private void checkCanOpenCamera(boolean canOpen) throws Exception {
        int retries = 10;
        boolean successToOpen = !canOpen;
        while (successToOpen != canOpen && retries > 0) {
            retries--;
            Thread.sleep(500);
            successToOpen = CameraUtils
                    .blockUntilOpenCamera(mCameraManager, mBackgroundHandler);
        }
        assertEquals(String.format(""Timed out waiting the value to change to %b (actual=%b)"",
                    canOpen, successToOpen), canOpen, successToOpen);
    }

    /**
     * Starts a background thread and its {@link Handler}.
     */
    private void startBackgroundThread() {
        mBackgroundThread = new HandlerThread(""CameraBackground"");
        mBackgroundThread.start();
        mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
    }

    /**
     * Stops the background thread and its {@link Handler}.
     */
    private void stopBackgroundThread() {
        mBackgroundThread.q"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CameraPolicyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ContactsTest"	"assertNoPhotoUri"	""	"1: admin"	"([1:/com/android/cts/managedprofile/ContactsTest.java]:[admin]:[1]:method_text:[PolicyManager) mContext                .getSystemService(Context.DEVICE_POLICY_SERVICE);    }   ]) :|: public void test/*
 *.
 */

package com.android.cts.managedprofile;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.annotation.TargetApi;
import android.app.admin.DevicePolicyManager;
import android.content.ContentProviderOperation;
import android.content.ContentResolver;
import android.content.Context;
import android.content.OperationApplicationException;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.database.Cursor;
import android.database.DatabaseUtils;
import android.graphics.Rect;
import android.net.Uri;
import android.os.Build;
import android.os.RemoteException;
import android.provider.ContactsContract;
import android.provider.ContactsContract.CommonDataKinds.Callable;
import android.provider.ContactsContract.CommonDataKinds.Email;
import android.provider.ContactsContract.CommonDataKinds.Phone;
import android.provider.ContactsContract.CommonDataKinds.Photo;
import android.provider.ContactsContract.Contacts;
import android.provider.ContactsContract.Directory;
import android.provider.ContactsContract.PhoneLookup;
import android.provider.ContactsContract.RawContacts;
import android.test.AndroidTestCase;
import android.util.Log;

import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;

public class ContactsTest extends AndroidTestCase {

    private static final String TAG = ""ContactsTest"";

    private static final String TEST_ACCOUNT_NAME = AccountAuthenticator.ACCOUNT_NAME;
    private static final String TEST_ACCOUNT_TYPE = AccountAuthenticator.ACCOUNT_TYPE;
    // details of a sample primary contact
    private static final String PRIMARY_CONTACT_DISPLAY_NAME = ""Primary"";
    private static final String PRIMARY_CONTACT_PHONE = ""00000001"";
    private static final String PRIMARY_CONTACT_EMAIL = ""one@primary.com"";
    private static"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ContactsTest"	"testSetCrossProfileCallerIdDisabled_true"	""	"1: admin"	"([1:/com/android/cts/managedprofile/ContactsTest.java]:[admin]:[1]:method_text:[CallerIdDisabled(                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT, true);    }   ]) :|: public void testSetCrossProfileCallerIdDisabled_true() {
        assertTrue(isManagedProfile());
        mDevicePolicyManager.setCrossProfileCallerIdDisabled(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT, true);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ContactsTest"	"testSetCrossProfileCallerIdDisabled_false"	""	"1: admin"	"([1:/com/android/cts/managedprofile/ContactsTest.java]:[admin]:[1]:method_text:[allerIdDisabled(                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT, false);    }   ]) :|: public void testSetCrossProfileCallerIdDisabled_false() {
        assertTrue(isManagedProfile());
        mDevicePolicyManager.setCrossProfileCallerIdDisabled(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT, false);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ContactsTest"	"testSetCrossProfileContactsSearchDisabled_true"	""	"1: admin"	"([2:/com/android/cts/managedprofile/ContactsTest.java]:[admin]:[2]:method_text:[ontactsSearchDisabled(                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT));    }   ]) :|: public void testSetCrossProfileContactsSearchDisabled_true() {
        assertTrue(isManagedProfile());
        mDevicePolicyManager.setCrossProfileContactsSearchDisabled(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT, true);
        assertTrue(mDevicePolicyManager.getCrossProfileContactsSearchDisabled(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ContactsTest"	"testSetCrossProfileContactsSearchDisabled_false"	""	"1: admin"	"([2:/com/android/cts/managedprofile/ContactsTest.java]:[admin]:[2]:method_text:[ontactsSearchDisabled(                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT));    }   ]) :|: public void testSetCrossProfileContactsSearchDisabled_false() {
        assertTrue(isManagedProfile());
        mDevicePolicyManager.setCrossProfileContactsSearchDisabled(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT, false);
        assertFalse(mDevicePolicyManager.getCrossProfileContactsSearchDisabled(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ContactsTest"	"testSetBluetoothContactSharingDisabled_setterAndGetter"	""	"1: admin"	"([4:/com/android/cts/managedprofile/ContactsTest.java]:[admin]:[4]:method_text:[ontactSharingDisabled(                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT));    }   ]) :|: public void testSetBluetoothContactSharingDisabled_setterAndGetter() {
        mDevicePolicyManager.setBluetoothContactSharingDisabled(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT, false);
        assertFalse(mDevicePolicyManager.getBluetoothContactSharingDisabled(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT));
        mDevicePolicyManager.setBluetoothContactSharingDisabled(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT, true);
        assertTrue(mDevicePolicyManager.getBluetoothContactSharingDisabled(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ContactsTest"	"testQuickContact"	""	"1: admin"	"([3:/com/android/cts/managedprofile/ContactsTest.java]:[admin]:[3]:method_text:[ArgumentException is not thrown"");        } catch (IllegalArgumentException ex) {        }    }}]) :|: public void testQuickContact() throws Exception {
        showQuickContactInternal(null);
        showQuickContactInternal(Directory.ENTERPRISE_DEFAULT);
        showQuickContactInternal(getEnterpriseRemoteDirectoryId());
    }

    private void showQuickContactInternal(Long directoryId) throws Exception {
        final Uri phoneLookupUri =
                Uri.withAppendedPath(
                        PhoneLookup.ENTERPRISE_CONTENT_FILTER_URI, MANAGED_CONTACT_PHONE);
        if (directoryId != null) {
            phoneLookupUri.buildUpon().appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,
                    String.valueOf(directoryId)).build();
        }
        final Cursor cursor =
                getContext().getContentResolver().query(phoneLookupUri, null, null, null, null);
        try {
            assertTrue(cursor.moveToFirst());
            final long contactId =
                    cursor.getLong(cursor.getColumnIndex(ContactsContract.PhoneLookup._ID));
            final String lookupKey =
                    cursor.getString(
                            cursor.getColumnIndex(ContactsContract.PhoneLookup.LOOKUP_KEY));
            final Uri lookupUri = Contacts.getLookupUri(contactId, lookupKey);
            // TODO: It is better to verify the uri received by quick contacts, but it is difficult
            // to verify it as the quick contacts in managed profile is started. We now just make
            // sure no exception is thrown due to invalid uri (eg: directory id is missing).
            // Also, consider using UiAutomator to verify the activtiy is started.
            ContactsContract.QuickContact.showQuickContact(getContext(), (Rect) null, lookupUri,
                    ContactsContract.QuickContact.MODE_LARGE, null);
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
    }

    private long getPrimaryRemoteDirectoryId() {
        assertFalse(isManagedProfile());
        return get"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.DevicePolicyLoggingTest"	"testSetProfileNameLogged"	""	"1: admin"	"([1:/com/android/cts/managedprofile/DevicePolicyLoggingTest.java]:[admin]:[1]:method_text:[gged() {        mDevicePolicyManager.setProfileName(ADMIN_RECEIVER_COMPONENT, ""Test name"");    }}]) :|: public void testSetProfileNameLogged() {
        mDevicePolicyManager.setProfileName(ADMIN_RECEIVER_COMPONENT, ""Test name"");
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DevicePolicyLoggingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.BluetoothSharingRestrictionTest"	"testOppDisabledWhenRestrictionSet"	""	"2: UserManager.DISALLOW admin"	"([2:/com/android/cts/managedprofile/BluetoothSharingRestrictionTest.java]:[admin]:[2]:method_text:[         TestCase.fail(component + "" isn't available as a handler for "" + intent);        }    }}]) :|: public void testOppDisabledWhenRestrictionSet() throws Exception {
        if (BluetoothAdapter.getDefaultAdapter() == null) {
            // No Bluetooth - nothing to test.
            return;
        }

        // The restriction is active by default for managed profiles.
        assertBluetoothSharingAvailable(mContext, false);

        // Remove the user restriction.
        mDevicePolicyManager.clearUserRestriction(
                ADMIN_RECEIVER_COMPONENT, UserManager.DISALLOW_BLUETOOTH_SHARING);
        // Bluetooth sharing should become available.
        assertBluetoothSharingAvailable(mContext, true);

        // Add the user restriction back (which is the default state).
        mDevicePolicyManager.addUserRestriction(
                ADMIN_RECEIVER_COMPONENT, UserManager.DISALLOW_BLUETOOTH_SHARING);
        // Bluetooth sharing should be disabled once again.
        assertBluetoothSharingAvailable(mContext, false);
    }

    /** Verifies restriction enforcement. */
    private static void assertRestrictionEnforced(Context context, boolean enforced) {
        final UserManager um = (UserManager) context.getSystemService(Context.USER_SERVICE);
        assertEquals(""Invalid restriction enforcement status"", enforced,
                um.getUserRestrictions().getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING, false));
    }

    /**
     * Builds an intent to share an image file. If Bluetooth sharing is allowed, it should be
     * handled by {@link #OPP_LAUNCHER_COMPONENT}.
     */
    private static Intent fileSharingIntent() {
        final Intent result = new Intent(Intent.ACTION_SEND);
        final Uri uri = Uri.parse(""content://foo/bar"");
        result.setDataAndType(uri, ""image/*"");
        return result;
    }

    /**
     * Verifies bluetooth sharing availability.
     */
    static void assertBluetoothSharingAvailable(Context context, boolean available)
            throws Exception {
        // Check restriction.
        assertRestrictionEnforced"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/BluetoothSharingRestrictionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileWidgetTest"	"testCrossProfileWidgetProviderAdded"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileWidgetTest.java]:[admin]:[1]:method_text:[This test verifies that the widget provider was successfully removed from the allowlist.     */   ]) :|: public void testCrossProfileWidgetProviderAdded() {
        List<String> providers = mDevicePolicyManager.getCrossProfileWidgetProviders(
                ADMIN_RECEIVER_COMPONENT);
        assertEquals(1, providers.size());
        assertTrue(providers.contains(WIDGET_PROVIDER_PKG));
        // check that widget can be found inside the profile
        assertTrue(containsWidgetProviderPkg(mAppWidgetManager.getInstalledProviders()));
    }

    /**
     * This test verifies that the widget provider was successfully removed from the allowlist.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileWidgetTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileWidgetTest"	"testCrossProfileWidgetProviderRemoved"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileWidgetTest.java]:[admin]:[1]:method_text:[PackageName())) {                return true;            }        }        return false;    }}]) :|: public void testCrossProfileWidgetProviderRemoved() {
        List<String> providers = mDevicePolicyManager.getCrossProfileWidgetProviders(
                ADMIN_RECEIVER_COMPONENT);
        assertTrue(providers.isEmpty());
        // Check that widget can still be found inside the profile
        assertTrue(containsWidgetProviderPkg(mAppWidgetManager.getInstalledProviders()));
    }

    private boolean containsWidgetProviderPkg(List<AppWidgetProviderInfo> widgets) {
        for (AppWidgetProviderInfo widget : widgets) {
            if (WIDGET_PROVIDER_PKG.equals(widget.provider.getPackageName())) {
                return true;
            }
        }
        return false;
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileWidgetTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.DevicePolicyManagerParentSupportTest"	"testSetAndGetPasswordHistoryLength_onParent"	""	"1: admin"	"([2:/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java]:[admin]:[2]:method_text:[NENT);        assertThat(actualPasswordHistoryLength).isEqualTo(passwordHistoryLength);    }   ]) :|: public void testSetAndGetPasswordHistoryLength_onParent() {
        if (!mHasSecureLockScreen) {
            return;
        }
        final int passwordHistoryLength = 5;

        mParentDevicePolicyManager.setPasswordHistoryLength(
                ADMIN_RECEIVER_COMPONENT, passwordHistoryLength);
        final int actualPasswordHistoryLength =
                mParentDevicePolicyManager.getPasswordHistoryLength(ADMIN_RECEIVER_COMPONENT);

        assertThat(actualPasswordHistoryLength).isEqualTo(passwordHistoryLength);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.DevicePolicyManagerParentSupportTest"	"testSetAndGetPasswordExpirationTimeout_onParent"	""	"1: admin"	"([2:/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java]:[admin]:[2]:method_text:[        assertThat(actualPasswordExpirationTimeout).isEqualTo(passwordExpirationTimeout);    }   ]) :|: public void testSetAndGetPasswordExpirationTimeout_onParent() {
        if (!mHasSecureLockScreen) {
            return;
        }
        final int passwordExpirationTimeout = 432000000;

        mParentDevicePolicyManager.setPasswordExpirationTimeout(
                ADMIN_RECEIVER_COMPONENT, passwordExpirationTimeout);
        final long actualPasswordExpirationTimeout =
                mParentDevicePolicyManager.getPasswordExpirationTimeout(ADMIN_RECEIVER_COMPONENT);

        assertThat(actualPasswordExpirationTimeout).isEqualTo(passwordExpirationTimeout);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.DevicePolicyManagerParentSupportTest"	"testGetPasswordExpiration_onParent"	""	"1: admin"	"([2:/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java]:[admin]:[2]:method_text:[ assertThat(actualPasswordExpiration).isAtLeast(passwordExpirationTimeout + currentTime);    }   ]) :|: public void testGetPasswordExpiration_onParent() {
        if (!mHasSecureLockScreen) {
            return;
        }
        final long passwordExpirationTimeout = 432000000;
        final long currentTime = System.currentTimeMillis();

        mParentDevicePolicyManager.setPasswordExpirationTimeout(
                ADMIN_RECEIVER_COMPONENT, passwordExpirationTimeout);
        final long actualPasswordExpiration =
                mParentDevicePolicyManager.getPasswordExpiration(ADMIN_RECEIVER_COMPONENT);

        assertThat(actualPasswordExpiration).isAtLeast(passwordExpirationTimeout + currentTime);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.DevicePolicyManagerParentSupportTest"	"testSetPasswordQuality_onParent_isNotSupported"	""	"1: admin"	"([1:/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java]:[admin]:[1]:method_text:[        mParentDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, quality);    }   ]) :|: public void testSetPasswordQuality_onParent_isNotSupported() {
        assertThrows(SecurityException.class,
                () -> setPasswordQuality(PASSWORD_QUALITY_NUMERIC_COMPLEX));
    }

    private void setPasswordQuality(int quality) {
        mParentDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, quality);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.DevicePolicyManagerParentSupportTest"	"testIsActivePasswordSufficient_onParent_respectsProfileQualityWhenUnified"	""	"1: admin"	"([3:/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java]:[admin]:[3]:method_text:[y(                    ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_UNSPECIFIED);        }    }   ]) :|: public void testIsActivePasswordSufficient_onParent_respectsProfileQualityWhenUnified() {
        mDevicePolicyManager.setPasswordQuality(
                ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_UNSPECIFIED);
        assertThat(mParentDevicePolicyManager.isActivePasswordSufficient()).isTrue();
        mDevicePolicyManager.setPasswordQuality(
                ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_NUMERIC_COMPLEX);
        try {
            assertThat(mParentDevicePolicyManager.isActivePasswordSufficient()).isFalse();
        } finally {
            mDevicePolicyManager.setPasswordQuality(
                    ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_UNSPECIFIED);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.DevicePolicyManagerParentSupportTest"	"testSetAndGetMaximumFailedPasswordsForWipe_onParent"	""	"1: admin"	"([2:/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java]:[admin]:[2]:method_text:[assertThat(actualMaximumFailedPasswordsForWipe).isEqualTo(maximumFailedPasswordsForWipe);    }   ]) :|: public void testSetAndGetMaximumFailedPasswordsForWipe_onParent() {
        if (!mHasSecureLockScreen) {
            return;
        }
        final int maximumFailedPasswordsForWipe = 15;

        mParentDevicePolicyManager.setMaximumFailedPasswordsForWipe(
                ADMIN_RECEIVER_COMPONENT, maximumFailedPasswordsForWipe);
        final int actualMaximumFailedPasswordsForWipe =
                mParentDevicePolicyManager.getMaximumFailedPasswordsForWipe(
                        ADMIN_RECEIVER_COMPONENT);

        assertThat(actualMaximumFailedPasswordsForWipe).isEqualTo(maximumFailedPasswordsForWipe);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.DevicePolicyManagerParentSupportTest"	"testSetAndGetMaximumTimeToLock_onParent"	""	"1: admin"	"([2:/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java]:[admin]:[2]:method_text:[ER_COMPONENT);        assertThat(actualMaximumTimeToLock).isEqualTo(maximumTimeToLock);    }   ]) :|: public void testSetAndGetMaximumTimeToLock_onParent() {
        final int maximumTimeToLock = 6000;

        mParentDevicePolicyManager.setMaximumTimeToLock(
                ADMIN_RECEIVER_COMPONENT, maximumTimeToLock);
        final long actualMaximumTimeToLock =
                mParentDevicePolicyManager.getMaximumTimeToLock(ADMIN_RECEIVER_COMPONENT);

        assertThat(actualMaximumTimeToLock).isEqualTo(maximumTimeToLock);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.DevicePolicyManagerParentSupportTest"	"testSetAndGetKeyguardDisabledFeatures_onParent"	""	"1: admin"	"([2:/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java]:[admin]:[2]:method_text:[     assertThat(actualKeyguardDisabledFeatures).isEqualTo(KEYGUARD_DISABLE_TRUST_AGENTS);    }   ]) :|: public void testSetAndGetKeyguardDisabledFeatures_onParent() {
        mParentDevicePolicyManager.setKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT, KEYGUARD_DISABLE_TRUST_AGENTS);
        long actualKeyguardDisabledFeatures =
                mParentDevicePolicyManager.getKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT);

        assertThat(actualKeyguardDisabledFeatures).isEqualTo(KEYGUARD_DISABLE_TRUST_AGENTS);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.DevicePolicyManagerParentSupportTest"	"testSetAndGetTrustAgentConfiguration_onParent"	""	"1: admin"	"([2:/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java]:[admin]:[2]:method_text:[KE_COMPONENT).get(0);        assertThat(actualConfiguration.get(key)).isEqualTo(value);    }   ]) :|: public void testSetAndGetTrustAgentConfiguration_onParent() {
        if (!mHasSecureLockScreen) {
            return;
        }
        final PersistableBundle configuration = new PersistableBundle();
        final String key = ""key"";
        final String value = ""value"";
        configuration.putString(key, value);

        mParentDevicePolicyManager.setTrustAgentConfiguration(
                ADMIN_RECEIVER_COMPONENT, FAKE_COMPONENT, configuration);
        final PersistableBundle actualConfiguration =
                mParentDevicePolicyManager.getTrustAgentConfiguration(
                        ADMIN_RECEIVER_COMPONENT, FAKE_COMPONENT).get(0);

        assertThat(actualConfiguration.get(key)).isEqualTo(value);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.DevicePolicyManagerParentSupportTest"	"testSetAndGetRequiredStrongAuthTimeout_onParent"	""	"1: admin"	"([2:/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java]:[admin]:[2]:method_text:[redStrongAuthTimeout);    }    public abstract class FakeComponent extends BroadcastReceiver {}}]) :|: public void testSetAndGetRequiredStrongAuthTimeout_onParent() {
        if (!mHasSecureLockScreen) {
            return;
        }
        final int requiredStrongAuthTimeout = 4600000;

        mParentDevicePolicyManager.setRequiredStrongAuthTimeout(
                ADMIN_RECEIVER_COMPONENT, requiredStrongAuthTimeout);
        final long actualRequiredStrongAuthTimeout =
                mParentDevicePolicyManager.getRequiredStrongAuthTimeout(ADMIN_RECEIVER_COMPONENT);

        assertThat(actualRequiredStrongAuthTimeout).isEqualTo(requiredStrongAuthTimeout);
    }

    public abstract class FakeComponent extends BroadcastReceiver {}
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CurrentApiHelperTest"	"testGetPublicApisIncludeMethods"	""	"1: granted"	"([1:/com/android/cts/managedprofile/CurrentApiHelperTest.java]:[granted]:[1]:method_text:[tApiHelper#getPublicApis} excludes private, hidden or {@code @SystemApi}     * methods.     */   ]) :|: public void testGetPublicApisIncludeMethods() throws Exception {
        Method publicMethod = mClazz.getMethod(""lockNow"");
        assertTrue(mPublicApis.contains(publicMethod));
        publicMethod = mClazz.getMethod(""isProfileOwnerApp"", String.class);
        assertTrue(mPublicApis.contains(publicMethod));
        publicMethod = mClazz.getMethod(""resetPassword"", String.class, int.class);
        assertTrue(mPublicApis.contains(publicMethod));
        publicMethod = mClazz.getMethod(""hasGrantedPolicy"", ComponentName.class, int.class);
        assertTrue(mPublicApis.contains(publicMethod));
        publicMethod = mClazz.getMethod(""installCaCert"", ComponentName.class, Class.forName(""[B""));
        assertTrue(mPublicApis.contains(publicMethod));
    }

    /**
     * Test: {@link CurrentApiHelper#getPublicApis} excludes private, hidden or {@code @SystemApi}
     * methods.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CurrentApiHelperTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileCalendarTest"	"testCrossProfileCalendarPackage"	""	"1: admin"	"([8:/com/android/cts/managedprofile/CrossProfileCalendarTest.java]:[admin]:[8]:method_text:[ONENT.getPackageName();        return mDevicePolicyManager.isProfileOwnerApp(adminPackage);    }}]) :|: public void testCrossProfileCalendarPackage() {
        requireRunningOnManagedProfile();

        Set<String> allowlist = mDevicePolicyManager.getCrossProfileCalendarPackages(
                ADMIN_RECEIVER_COMPONENT);
        assertThat(allowlist).isEmpty();

        mDevicePolicyManager.setCrossProfileCalendarPackages(
                ADMIN_RECEIVER_COMPONENT, new ArraySet<String>(Arrays.asList(MANAGED_PROFILE_PKG)));
        allowlist = mDevicePolicyManager.getCrossProfileCalendarPackages(
                ADMIN_RECEIVER_COMPONENT);
        assertThat(allowlist.size()).isEqualTo(1);
        assertThat(allowlist.contains(MANAGED_PROFILE_PKG)).isTrue();

        mDevicePolicyManager.setCrossProfileCalendarPackages(
                ADMIN_RECEIVER_COMPONENT, Collections.emptySet());
        allowlist = mDevicePolicyManager.getCrossProfileCalendarPackages(
                ADMIN_RECEIVER_COMPONENT);
        assertThat(allowlist).isEmpty();
    }

    // This method is to guard that particular tests are supposed to run on managed profile.
    private void requireRunningOnManagedProfile() {
        assertThat(isManagedProfile()).isTrue();
    }

    private boolean isManagedProfile() {
        String adminPackage = ADMIN_RECEIVER_COMPONENT.getPackageName();
        return mDevicePolicyManager.isProfileOwnerApp(adminPackage);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileCalendarTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ProfileTimeoutTestHelper"	"testSetWorkProfileTimeout"	""	"1: admin"	"([2:/com/android/cts/managedprofile/ProfileTimeoutTestHelper.java]:[admin]:[2]:method_text:[to set timeout"",                TIMEOUT_MS, mDpm.getMaximumTimeToLock(ADMIN_COMPONENT));    }   ]) :|: public void testSetWorkProfileTimeout() {
        assertProfileOwner();
        mDpm.setMaximumTimeToLock(ADMIN_COMPONENT, TIMEOUT_MS);
        assertEquals(""Failed to set timeout"",
                TIMEOUT_MS, mDpm.getMaximumTimeToLock(ADMIN_COMPONENT));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProfileTimeoutTestHelper.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ProfileTimeoutTestHelper"	"testDeviceNotLocked"	""	"1: admin"	"([2:/com/android/cts/managedprofile/ProfileTimeoutTestHelper.java]:[admin]:[2]:method_text:[IN_COMPONENT.getPackageName()));        assertTrue(mDpm.isManagedProfile(ADMIN_COMPONENT));    }}]) :|: public void testDeviceNotLocked() {
        assertFalse(""Device locked"", mKm.isDeviceLocked());
    }

    private void assertProfileOwner() {
        assertTrue(mDpm.isProfileOwnerApp(ADMIN_COMPONENT.getPackageName()));
        assertTrue(mDpm.isManagedProfile(ADMIN_COMPONENT));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProfileTimeoutTestHelper.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ParentProfileTest"	"testCannotCallAutoTimeMethodsOnParentProfile"	""	"1: admin"	"([2:/com/android/cts/managedprofile/ParentProfileTest.java]:[admin]:[2]:method_text:[          () -> mParentDevicePolicyManager.getAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT));    }   ]) :|: public void testCannotCallAutoTimeMethodsOnParentProfile() {
        assertThrows(SecurityException.class,
                () -> mParentDevicePolicyManager.setAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT,
                        true));

        assertThrows(SecurityException.class,
                () -> mParentDevicePolicyManager.getAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ParentProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.ParentProfileTest"	"testCannotCallSetDefaultSmsApplicationOnParentProfile"	""	"1: admin"	"([1:/com/android/cts/managedprofile/ParentProfileTest.java]:[admin]:[1]:method_text:[aultSmsApplication(ADMIN_RECEIVER_COMPONENT,                        messagesPackageName));    }}]) :|: public void testCannotCallSetDefaultSmsApplicationOnParentProfile() {
        String messagesPackageName = ""com.google.android.apps.messaging"";
        assertThrows(SecurityException.class,
                () -> mParentDevicePolicyManager.setDefaultSmsApplication(ADMIN_RECEIVER_COMPONENT,
                        messagesPackageName));
    }

}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ParentProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.TrustAgentInfoTest"	"PersistableBundle"	""	"1: admin"	"([1:/com/android/cts/managedprofile/TrustAgentInfoTest.java]:[admin]:[1]:method_text:[ isParent */);        enableTrustAgents(false /* isParent */);        super.tearDown();    }   ]) :|: public void test/*
 *.
 */

package com.android.cts.managedprofile;

import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.os.PersistableBundle;
import android.test.MoreAsserts;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static com.android.cts.managedprofile.TrustAgentInfoTest.AssertConfigMode.*;

public class TrustAgentInfoTest extends BaseManagedProfileTest {
    private static final String BUNDLE_KEY = ""testing"";
    private static final String BUNDLE_PARENT_VALUE = ""parent"";
    private static final String BUNDLE_CHILD_VALUE = ""child"";
    private static final PersistableBundle CHILD_CONFIG = new PersistableBundle();
    private static final PersistableBundle PARENT_CONFIG = new PersistableBundle();
    private static final ComponentName TRUST_AGENT_COMPONENT =
            new ComponentName(""com.trustagent"", ""com.trustagent.xxx"");

    static {
        CHILD_CONFIG.putString(BUNDLE_KEY, BUNDLE_CHILD_VALUE);
        PARENT_CONFIG.putString(BUNDLE_KEY, BUNDLE_PARENT_VALUE);
    }

    enum AssertConfigMode {
        ASSERT_PARENT_CONFIG, ASSERT_CHILD_CONFIG, ASSERT_BOTH
    }

    @Override
    protected void tearDown() throws Exception {
        clearTrustAgentConfiguration(true /* isParent */);
        clearTrustAgentConfiguration(false /* isParent */);
        enableTrustAgents(true /* isParent */);
        enableTrustAgents(false /* isParent */);
        super.tearDown();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/TrustAgentInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.TrustAgentInfoTest"	"testSetTrustAgentConfiguration_bothHaveTrustAgentConfigAndNonUnified"	""	"1: admin"	"([6:/com/android/cts/managedprofile/TrustAgentInfoTest.java]:[admin]:[6]:method_text:[ing(BUNDLE_KEY));        }        MoreAsserts.assertEquals(expectedValues, actualValues);    }}]) :|: public void testSetTrustAgentConfiguration_bothHaveTrustAgentConfigAndNonUnified() {
        // Precondition: separate challenge for the managed profile should have been enabled.

        // Set both trust agents.
        setTrustAgentConfiguration(false /* isParent */);
        setTrustAgentConfiguration(true /* isParent */);
        disableTrustAgents(false /* isParent */);
        disableTrustAgents(true /* isParent */);

        List<PersistableBundle> parentConfig =
                mParentDevicePolicyManager.getTrustAgentConfiguration(
                        null, TRUST_AGENT_COMPONENT);
        List<PersistableBundle> childConfig =
                mDevicePolicyManager.getTrustAgentConfiguration(
                        null, TRUST_AGENT_COMPONENT);
        // Separate credential in managed profile, should only get its own config.
        assertPersistableBundleListEquals(ASSERT_PARENT_CONFIG, parentConfig);
        assertPersistableBundleListEquals(ASSERT_CHILD_CONFIG, childConfig);
    }

    private void setAndGetTrustAgentConfigurationInternal(boolean isParent) {
        // Set the config
        setTrustAgentConfiguration(isParent);
        // Case when trust agents is not disabled
        List<PersistableBundle> configs = getDevicePolicyManager(isParent)
                .getTrustAgentConfiguration(null, TRUST_AGENT_COMPONENT);
        assertNull(configs);
        // Case when trust agents is disabled
        disableTrustAgents(isParent);
        configs = getDevicePolicyManager(isParent)
                .getTrustAgentConfiguration(null, TRUST_AGENT_COMPONENT);
        assertPersistableBundleListEquals(isParent ?
                ASSERT_PARENT_CONFIG : ASSERT_CHILD_CONFIG, configs);
    }

    private void disableTrustAgents(boolean isParent) {
        getDevicePolicyManager(isParent).setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_TRUST_AGENTS);
    }

    private void enableTrustAgents(boolean is"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/TrustAgentInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.IsUsingUnifiedPasswordTest"	"testNotUsingUnifiedPassword"	""	"1: admin"	"([1:/com/android/cts/managedprofile/IsUsingUnifiedPasswordTest.java]:[admin]:[1]:method_text:[      assertFalse(mDevicePolicyManager.isUsingUnifiedPassword(ADMIN_RECEIVER_COMPONENT));    }   ]) :|: public void testNotUsingUnifiedPassword() {
        assertFalse(mDevicePolicyManager.isUsingUnifiedPassword(ADMIN_RECEIVER_COMPONENT));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/IsUsingUnifiedPasswordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.IsUsingUnifiedPasswordTest"	"testUsingUnifiedPassword"	""	"1: admin"	"([1:/com/android/cts/managedprofile/IsUsingUnifiedPasswordTest.java]:[admin]:[1]:method_text:[{        assertTrue(mDevicePolicyManager.isUsingUnifiedPassword(ADMIN_RECEIVER_COMPONENT));    }}]) :|: public void testUsingUnifiedPassword() {
        assertTrue(mDevicePolicyManager.isUsingUnifiedPassword(ADMIN_RECEIVER_COMPONENT));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/IsUsingUnifiedPasswordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileTest"	"testSetCrossProfilePackages_notProfileOwner_throwsSecurityException"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileTest.java]:[admin]:[1]:method_text:[      fail(""SecurityException excepted."");        } catch (SecurityException ignored) {}    }   ]) :|: public void testSetCrossProfilePackages_notProfileOwner_throwsSecurityException() {
        try {
            mDevicePolicyManager.setCrossProfilePackages(
                    NON_ADMIN_RECEIVER, TEST_CROSS_PROFILE_PACKAGES);
            fail(""SecurityException excepted."");
        } catch (SecurityException ignored) {}
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileTest"	"testGetCrossProfilePackages_notProfileOwner_throwsSecurityException"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileTest.java]:[admin]:[1]:method_text:[      fail(""SecurityException expected."");        } catch (SecurityException ignored) {}    }   ]) :|: public void testGetCrossProfilePackages_notProfileOwner_throwsSecurityException() {
        try {
            mDevicePolicyManager.getCrossProfilePackages(NON_ADMIN_RECEIVER);
            fail(""SecurityException expected."");
        } catch (SecurityException ignored) {}
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileTest"	"testGetCrossProfilePackages_notSet_returnsEmpty"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileTest.java]:[admin]:[1]:method_text:[icyManager.getCrossProfilePackages(ADMIN_RECEIVER_COMPONENT))                .isEmpty();    }   ]) :|: public void testGetCrossProfilePackages_notSet_returnsEmpty() {
        assertThat(mDevicePolicyManager.getCrossProfilePackages(ADMIN_RECEIVER_COMPONENT))
                .isEmpty();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileTest"	"testGetCrossProfilePackages_whenSet_returnsEqual"	""	"1: admin"	"([2:/com/android/cts/managedprofile/CrossProfileTest.java]:[admin]:[2]:method_text:[kages(ADMIN_RECEIVER_COMPONENT))                .isEqualTo(TEST_CROSS_PROFILE_PACKAGES);    }   ]) :|: public void testGetCrossProfilePackages_whenSet_returnsEqual() {
        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, TEST_CROSS_PROFILE_PACKAGES);
        assertThat(mDevicePolicyManager.getCrossProfilePackages(ADMIN_RECEIVER_COMPONENT))
                .isEqualTo(TEST_CROSS_PROFILE_PACKAGES);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileTest"	"testGetCrossProfilePackages_whenSetTwice_returnsLatestNotConcatenated"	""	"1: admin"	"([3:/com/android/cts/managedprofile/CrossProfileTest.java]:[admin]:[3]:method_text:[ once the metric assertion logic in hostside can handle     * unordered metric entries.     */   ]) :|: public void testGetCrossProfilePackages_whenSetTwice_returnsLatestNotConcatenated() {
        final Set<String> packages1 = Collections.singleton(""test.package.name.1"");
        final Set<String> packages2 = Collections.singleton(""test.package.name.2"");

        mDevicePolicyManager.setCrossProfilePackages(ADMIN_RECEIVER_COMPONENT, packages1);
        mDevicePolicyManager.setCrossProfilePackages(ADMIN_RECEIVER_COMPONENT, packages2);

        assertThat(mDevicePolicyManager.getCrossProfilePackages(ADMIN_RECEIVER_COMPONENT))
                .isEqualTo(packages2);
    }

    /**
     * Sets {@code com.android.cts.testapps.testapp1} as cross-profile. This can
     * then be used for writing host-side tests. Note that the state is cleared after running any
     * test in this class, so this method should not be used to attempt to perform a sequence of
     * device-side calls.
     * TODO (b/175017211): switch back to setting all packages in
     * {@link #ALL_CROSS_PROFILE_PACKAGES} once the metric assertion logic in hostside can handle
     * unordered metric entries.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileTest"	"testSetCrossProfilePackages_noAsserts"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileTest.java]:[admin]:[1]:method_text:[         ADMIN_RECEIVER_COMPONENT, Sets.newHashSet(""com.android.cts.testapps.testapp1""));    }   ]) :|: public void testSetCrossProfilePackages_noAsserts() throws Exception {
        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, Sets.newHashSet(""com.android.cts.testapps.testapp1""));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileTest"	"testSetCrossProfilePackages_firstTime_doesNotResetAnyAppOps"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileTest.java]:[admin]:[1]:method_text:[AGES);        assertThatPackagesHaveAppOpMode(ALL_CROSS_PROFILE_PACKAGES, MODE_ALLOWED);    }   ]) :|: public void testSetCrossProfilePackages_firstTime_doesNotResetAnyAppOps() throws Exception {
        explicitlySetInteractAcrossProfilesAppOps(MODE_ALLOWED);
        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, ALL_CROSS_PROFILE_PACKAGES);
        assertThatPackagesHaveAppOpMode(ALL_CROSS_PROFILE_PACKAGES, MODE_ALLOWED);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileTest"	"testSetCrossProfilePackages_unchanged_doesNotResetAnyAppOps"	""	"1: admin"	"([2:/com/android/cts/managedprofile/CrossProfileTest.java]:[admin]:[2]:method_text:[GES);        assertThatPackagesHaveAppOpMode(ALL_CROSS_PROFILE_PACKAGES, MODE_ALLOWED);    }   ]) :|: public void testSetCrossProfilePackages_unchanged_doesNotResetAnyAppOps() throws Exception {
        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, ALL_CROSS_PROFILE_PACKAGES);
        explicitlySetInteractAcrossProfilesAppOps(MODE_ALLOWED);

        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, ALL_CROSS_PROFILE_PACKAGES);

        assertThatPackagesHaveAppOpMode(ALL_CROSS_PROFILE_PACKAGES, MODE_ALLOWED);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileTest"	"testSetCrossProfilePackages_noPackagesUnset_doesNotResetAnyAppOps"	""	"1: admin"	"([2:/com/android/cts/managedprofile/CrossProfileTest.java]:[admin]:[2]:method_text:[GES);        assertThatPackagesHaveAppOpMode(ALL_CROSS_PROFILE_PACKAGES, MODE_ALLOWED);    }   ]) :|: public void testSetCrossProfilePackages_noPackagesUnset_doesNotResetAnyAppOps()
            throws Exception {
        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, SUBLIST_CROSS_PROFILE_PACKAGES);
        explicitlySetInteractAcrossProfilesAppOps(MODE_ALLOWED);

        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, ALL_CROSS_PROFILE_PACKAGES);

        assertThatPackagesHaveAppOpMode(ALL_CROSS_PROFILE_PACKAGES, MODE_ALLOWED);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileTest"	"testSetCrossProfilePackages_somePackagesUnset_doesNotResetAppOpsIfStillSet"	""	"1: admin"	"([2:/com/android/cts/managedprofile/CrossProfileTest.java]:[admin]:[2]:method_text:[;        assertThatPackagesHaveAppOpMode(SUBLIST_CROSS_PROFILE_PACKAGES, MODE_ALLOWED);    }   ]) :|: public void testSetCrossProfilePackages_somePackagesUnset_doesNotResetAppOpsIfStillSet()
            throws Exception {
        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, ALL_CROSS_PROFILE_PACKAGES);
        explicitlySetInteractAcrossProfilesAppOps(MODE_ALLOWED);

        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, SUBLIST_CROSS_PROFILE_PACKAGES);

        assertThatPackagesHaveAppOpMode(SUBLIST_CROSS_PROFILE_PACKAGES, MODE_ALLOWED);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileTest"	"testSetCrossProfilePackages_resetsAppOpOfUnsetPackages"	""	"1: admin"	"([2:/com/android/cts/managedprofile/CrossProfileTest.java]:[admin]:[2]:method_text:[ES);        assertThatPackagesHaveAppOpMode(DIFF_CROSS_PROFILE_PACKAGES, MODE_DEFAULT);    }   ]) :|: public void testSetCrossProfilePackages_resetsAppOpOfUnsetPackages() throws Exception {
        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, ALL_CROSS_PROFILE_PACKAGES);
        explicitlySetInteractAcrossProfilesAppOps(MODE_ALLOWED);

        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, SUBLIST_CROSS_PROFILE_PACKAGES);

        assertThatPackagesHaveAppOpMode(DIFF_CROSS_PROFILE_PACKAGES, MODE_DEFAULT);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileTest"	"testSetCrossProfilePackages_resetsAppOpOfUnsetPackagesOnOtherProfile"	""	"1: admin"	"([2:/com/android/cts/managedprofile/CrossProfileTest.java]:[admin]:[2]:method_text:[ once the metric     * assertion logic in hostside can handle unordered metric entries.     */   ]) :|: public void testSetCrossProfilePackages_resetsAppOpOfUnsetPackagesOnOtherProfile()
            throws Exception {
        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, ALL_CROSS_PROFILE_PACKAGES);
        explicitlySetInteractAcrossProfilesAppOps(MODE_ALLOWED);

        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, SUBLIST_CROSS_PROFILE_PACKAGES);

        assertThatPackagesHaveAppOpMode(
                DIFF_CROSS_PROFILE_PACKAGES, MODE_DEFAULT, UserHandle.of(0));
    }

    /**
     * Sets each of the packages in {@link #ALL_CROSS_PROFILE_PACKAGES} as cross-profile, then sets
     * them again to {@link #ALL_BUT_ONE_CROSS_PROFILE_PACKAGES}, with all app-ops explicitly set as
     * allowed before-hand. This should result in resetting package {@code
     * com.android.cts.testapps.testapp4}. This can then be used for writing host-side tests.
     * TODO (b/175017211): switch back to {@link #SUBLIST_CROSS_PROFILE_PACKAGES} once the metric
     * assertion logic in hostside can handle unordered metric entries.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileTest"	"testSetCrossProfilePackages_resetsAppOps_noAsserts"	""	"1: admin"	"([2:/com/android/cts/managedprofile/CrossProfileTest.java]:[admin]:[2]:method_text:[SS_PROFILE_PACKAGES} and not to packages {@link     * #SUBLIST_CROSS_PROFILE_PACKAGES}.     */   ]) :|: public void testSetCrossProfilePackages_resetsAppOps_noAsserts() throws Exception {
        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, ALL_CROSS_PROFILE_PACKAGES);
        explicitlySetInteractAcrossProfilesAppOps(MODE_ALLOWED);

        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, ALL_BUT_ONE_CROSS_PROFILE_PACKAGES);
    }

    /**
     * Assumes that the host-side test performs the assertion of the broadcast itself. The broadcast
     * should be sent to packages {@link #DIFF_CROSS_PROFILE_PACKAGES} and not to packages {@link
     * #SUBLIST_CROSS_PROFILE_PACKAGES}.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileTest"	"testSetCrossProfilePackages_sendsBroadcastWhenResettingAppOps_noAsserts"	""	"1: admin"	"([5:/com/android/cts/managedprofile/CrossProfileTest.java]:[admin]:[5]:method_text:[ new HashSet<>());    }    private static class NonAdminReceiver extends DeviceAdminReceiver {}}]) :|: public void testSetCrossProfilePackages_sendsBroadcastWhenResettingAppOps_noAsserts()
            throws Exception {
        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, ALL_CROSS_PROFILE_PACKAGES);
        explicitlySetInteractAcrossProfilesAppOps(MODE_ALLOWED);

        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, SUBLIST_CROSS_PROFILE_PACKAGES);
    }

    private void explicitlySetInteractAcrossProfilesAppOps(int mode) throws Exception {
        for (String packageName : ALL_CROSS_PROFILE_PACKAGES) {
            explicitlySetInteractAcrossProfilesAppOp(packageName, mode);
        }
    }

    private void explicitlySetInteractAcrossProfilesAppOp(String packageName, int mode)
            throws Exception {
        for (UserHandle profile : mUserManager.getUserProfiles()) {
            if (isPackageInstalledForUser(packageName, profile)) {
                explicitlySetInteractAcrossProfilesAppOp(packageName, mode, profile);
            }
        }
    }

    private boolean isPackageInstalledForUser(String packageName, UserHandle user) {
        try {
            sUiAutomation.adoptShellPermissionIdentity(INTERACT_ACROSS_USERS_PERMISSION);
            mContext.createContextAsUser(user, /* flags= */ 0).getPackageManager()
                    .getPackageInfo(packageName, /* flags= */ 0);
            return true;
        } catch (PackageManager.NameNotFoundException e) {
            return false;
        } finally {
            sUiAutomation.dropShellPermissionIdentity();
        }
    }

    private void explicitlySetInteractAcrossProfilesAppOp(
            String packageName, int mode, UserHandle userHandle) throws Exception {
        sUiAutomation.adoptShellPermissionIdentity(
                MANAGE_APP_OPS_MODES_PERMISSION,
                UPDATE_APP_OPS_STATS_PERMISSION,
                INTERACT_ACROSS_USERS_PERMISSION);
        mAppOpsManager.setUidMode(
                AppOps"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.OrganizationInfoTest"	"testDefaultOrganizationColor"	""	"1: admin"	"([1:/com/android/cts/managedprofile/OrganizationInfoTest.java]:[admin]:[1]:method_text:[ger.toHexString(defaultColor),                DEFAULT_ORGANIZATION_COLOR, defaultColor);    }   ]) :|: public void testDefaultOrganizationColor() {
        int defaultColor = mDevicePolicyManager.getOrganizationColor(ADMIN_RECEIVER_COMPONENT);
        assertEquals(""Default color returned: "" + Integer.toHexString(defaultColor),
                DEFAULT_ORGANIZATION_COLOR, defaultColor);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/OrganizationInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.OrganizationInfoTest"	"testSetOrganizationColor"	""	"1: admin"	"([4:/com/android/cts/managedprofile/OrganizationInfoTest.java]:[admin]:[4]:method_text:[icePolicyManager.setOrganizationColor(ADMIN_RECEIVER_COMPONENT, previousColor);        }    }   ]) :|: public void testSetOrganizationColor() {
        int previousColor = mDevicePolicyManager.getOrganizationColor(ADMIN_RECEIVER_COMPONENT);

        try {
            final int[] colors = {
                Color.TRANSPARENT,
                Color.WHITE,
                Color.RED,
                Color.GREEN,
                Color.BLUE,
                0x7FFE5B35 /* HTML name: ""Sunset orange"". Opacity: 50%. */
            };

            for (int color : colors) {
                mDevicePolicyManager.setOrganizationColor(ADMIN_RECEIVER_COMPONENT, color);
                assertEquals(color | 0xFF000000 /* opacity always enforced to 100% */,
                        mDevicePolicyManager.getOrganizationColor(ADMIN_RECEIVER_COMPONENT));
            }
        } finally {
            // Put the organization color back how it was.
            mDevicePolicyManager.setOrganizationColor(ADMIN_RECEIVER_COMPONENT, previousColor);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/OrganizationInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.OrganizationInfoTest"	"testSetOrGetOrganizationColorWithNullAdminFails"	""	"1: admin"	"([3:/com/android/cts/managedprofile/OrganizationInfoTest.java]:[admin]:[3]:method_text:[n thrown for null admin ComponentName"");        } catch (Exception expected) {        }    }   ]) :|: public void testSetOrGetOrganizationColorWithNullAdminFails() {
        try {
            mDevicePolicyManager.setOrganizationColor(null, Color.GRAY);
            fail(""Exception should have been thrown for null admin ComponentName"");
        } catch (Exception expected) {
        }

        try {
            int color = mDevicePolicyManager.getOrganizationColor(null);
            fail(""Exception should have been thrown for null admin ComponentName"");
        } catch (Exception expected) {
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/OrganizationInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.OrganizationInfoTest"	"testDefaultOrganizationNameIsNull"	""	"1: admin"	"([1:/com/android/cts/managedprofile/OrganizationInfoTest.java]:[admin]:[1]:method_text:[ionName(                ADMIN_RECEIVER_COMPONENT);        assertNull(organizationName);    }   ]) :|: public void testDefaultOrganizationNameIsNull() {
        CharSequence organizationName = mDevicePolicyManager.getOrganizationName(
                ADMIN_RECEIVER_COMPONENT);
        assertNull(organizationName);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/OrganizationInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.OrganizationInfoTest"	"testSetOrganizationName"	""	"1: admin"	"([4:/com/android/cts/managedprofile/OrganizationInfoTest.java]:[admin]:[4]:method_text:[onName(ADMIN_RECEIVER_COMPONENT,                    previousOrganizationName);        }    }   ]) :|: public void testSetOrganizationName() {
        CharSequence previousOrganizationName = mDevicePolicyManager.getOrganizationName(
                ADMIN_RECEIVER_COMPONENT);

        try {
            final CharSequence name = ""test-set-name"";
            mDevicePolicyManager.setOrganizationName(ADMIN_RECEIVER_COMPONENT, name);
            CharSequence organizationName = mDevicePolicyManager.getOrganizationName(
                    ADMIN_RECEIVER_COMPONENT);
            assertEquals(name, organizationName);
        } finally {
            mDevicePolicyManager.setOrganizationName(ADMIN_RECEIVER_COMPONENT,
                    previousOrganizationName);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/OrganizationInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.OrganizationInfoTest"	"testSetOrGetOrganizationNameWithNullAdminFails"	""	"1: admin"	"([4:/com/android/cts/managedprofile/OrganizationInfoTest.java]:[admin]:[4]:method_text:[been thrown for null admin ComponentName"");        } catch (Exception expected) {        }    }}]) :|: public void testSetOrGetOrganizationNameWithNullAdminFails() {
        try {
            mDevicePolicyManager.setOrganizationName(null, ""null-admin-fails"");
            fail(""Exception should have been thrown for null admin ComponentName"");
        } catch (Exception expected) {
        }

        try {
            mDevicePolicyManager.getOrganizationName(null);
            fail(""Exception should have been thrown for null admin ComponentName"");
        } catch (Exception expected) {
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/OrganizationInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileUtils"	"testDisallowCrossProfileCopyPaste"	""	"2: UserManager.DISALLOW admin"	"([1:/com/android/cts/managedprofile/CrossProfileUtils.java]:[admin]:[1]:method_text:[ADMIN_RECEIVER_COMPONENT,                UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE);    }   ]) :|: public void testDisallowCrossProfileCopyPaste() {
        DevicePolicyManager dpm = (DevicePolicyManager)
               getContext().getSystemService(Context.DEVICE_POLICY_SERVICE);
        dpm.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileUtils"	"testAllowCrossProfileCopyPaste"	""	"2: UserManager.DISALLOW admin"	"([1:/com/android/cts/managedprofile/CrossProfileUtils.java]:[admin]:[1]:method_text:[rManager.DISALLOW_CROSS_PROFILE_COPY_PASTE);    }    // Disables all browsers in current user   ]) :|: public void testAllowCrossProfileCopyPaste() {
        DevicePolicyManager dpm = (DevicePolicyManager)
               getContext().getSystemService(Context.DEVICE_POLICY_SERVICE);
        dpm.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE);
    }

    // Disables all browsers in current user"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileUtils"	"testAddParentCanAccessManagedFilters"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileUtils.java]:[admin]:[1]:method_text:[, getIntentFilter(),                DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);    }   ]) :|: public void testAddParentCanAccessManagedFilters() {
        testRemoveAllFilters();

        final DevicePolicyManager dpm = (DevicePolicyManager) getContext().getSystemService(
                Context.DEVICE_POLICY_SERVICE);
        dpm.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT, getIntentFilter(),
                DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileUtils"	"testAddManagedCanAccessParentFilters"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileUtils.java]:[admin]:[1]:method_text:[;        intentFilter.addAction(ACTION_OBSERVE_URI_CHANGE);        return intentFilter;    }   ]) :|: public void testAddManagedCanAccessParentFilters() {
        testRemoveAllFilters();

        final DevicePolicyManager dpm = (DevicePolicyManager) getContext().getSystemService(
                Context.DEVICE_POLICY_SERVICE);
        dpm.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT, getIntentFilter(),
                DevicePolicyManager.FLAG_MANAGED_CAN_ACCESS_PARENT);
    }

    public IntentFilter getIntentFilter() {
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(ACTION_READ_FROM_URI);
        intentFilter.addAction(ACTION_WRITE_TO_URI);
        intentFilter.addAction(ACTION_TAKE_PERSISTABLE_URI_PERMISSION);
        intentFilter.addAction(ACTION_COPY_TO_CLIPBOARD);
        intentFilter.addAction(ACTION_NOTIFY_URI_CHANGE);
        intentFilter.addAction(ACTION_OBSERVE_URI_CHANGE);
        return intentFilter;
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileUtils"	"testRemoveAllFilters"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileUtils.java]:[admin]:[1]:method_text:[CE_POLICY_SERVICE);        dpm.clearCrossProfileIntentFilters(ADMIN_RECEIVER_COMPONENT);    }   ]) :|: public void testRemoveAllFilters() {
        final DevicePolicyManager dpm = (DevicePolicyManager) getContext().getSystemService(
                Context.DEVICE_POLICY_SERVICE);
        dpm.clearCrossProfileIntentFilters(ADMIN_RECEIVER_COMPONENT);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileUtils"	"testDisableAllBrowsers"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileUtils.java]:[admin]:[1]:method_text:[ApplicationHidden(ADMIN_RECEIVER_COMPONENT, ri.activityInfo.packageName, true);        }    }   ]) :|: public void testDisableAllBrowsers() {
        PackageManager pm = (PackageManager) getContext().getPackageManager();
        DevicePolicyManager dpm = (DevicePolicyManager)
               getContext().getSystemService(Context.DEVICE_POLICY_SERVICE);
        Intent webIntent = new Intent(Intent.ACTION_VIEW);
        webIntent.setData(Uri.parse(""http://com.android.cts.intent.receiver""));
        List<ResolveInfo> ris = pm.queryIntentActivities(webIntent, PackageManager.MATCH_ALL /* all browser*/);
        for (ResolveInfo ri : ris) {
            Log.d(TAG, ""Hiding "" + ri.activityInfo.packageName);
            dpm.setApplicationHidden(ADMIN_RECEIVER_COMPONENT, ri.activityInfo.packageName, true);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.managedprofile.CrossProfileUtils"	"testSetCrossProfilePackages"	""	"1: admin"	"([1:/com/android/cts/managedprofile/CrossProfileUtils.java]:[admin]:[1]:method_text:[    }        }        fail(""cross profile package param not found."");        return null;    }}]) :|: public void testSetCrossProfilePackages(){
        final DevicePolicyManager dpm = (DevicePolicyManager) getContext().getSystemService(
                Context.DEVICE_POLICY_SERVICE);
        final Set<String> packages = Collections.singleton(getCrossProfilePackage());
        dpm.setCrossProfilePackages(ADMIN_RECEIVER_COMPONENT, packages);

    }

    private String getCrossProfilePackage() {
        final Bundle testArguments = InstrumentationRegistry.getArguments();
        if (testArguments.containsKey(PARAM_CROSS_PROFILE_PACKAGE)) {
            try {
                return testArguments.getString(PARAM_CROSS_PROFILE_PACKAGE);
            } catch (NumberFormatException ignore) {
            }
        }
        fail(""cross profile package param not found."");
        return null;
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.accountcheck.AccountCheckTest"	"testCleanUpNonTestOwner"	""	"1: admin"	"([12:/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java]:[admin]:[12]:method_text:[    }    /**     * Test there are no preconfigured accounts that don't accept DO/PO.     */   ]) :|: public void testCleanUpNonTestOwner() throws Exception {
        final ComponentName admin = new ComponentName(
                ""com.android.cts.devicepolicy.accountcheck.nontestonly"",
                ""com.android.cts.devicepolicy.accountcheck.owner.AdminReceiver"");

        if (mDevicePolicyManager.isDeviceOwnerApp(admin.getPackageName())) {
            Log.i(TAG, ""testCleanUpNonTestOwner: Removing as DO"");
            mDevicePolicyManager.clearDeviceOwnerApp(admin.getPackageName());
        }

        if (mDevicePolicyManager.isProfileOwnerApp(admin.getPackageName())) {
            Log.i(TAG, ""testCleanUpNonTestOwner: Removing as PO"");
            mDevicePolicyManager.clearProfileOwner(admin);
        }

        if (mDevicePolicyManager.isAdminActive(admin)) {
            Log.i(TAG, ""testCleanUpNonTestOwner: Removing as DA"");
            mDevicePolicyManager.removeActiveAdmin(admin);

            final long timeout = SystemClock.elapsedRealtime() + 60 * 1000;
            while (SystemClock.elapsedRealtime() < timeout
                    && mDevicePolicyManager.isAdminActive(admin)) {
                Thread.sleep(100);
            }
        }
        // Give the system a breath.
        Thread.sleep(5000);
    }

    /**
     * Test there are no preconfigured accounts that don't accept DO/PO.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/AccountCheck/Auth/src/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.delegate.AppRestrictionsIsCallerDelegateHelper"	"isCallerApplicationRestrictionsManagingPackage"	""	"1: admin"	"([1:/com/android/cts/delegate/AppRestrictionsIsCallerDelegateHelper.java]:[admin]:[1]:method_text:[           getInstrumentation().getContext().getSystemService(DevicePolicyManager.class);    }   ]) :|: public void test/*
 *.
 */

package com.android.cts.delegate;

import static com.google.common.truth.Truth.assertThat;

import android.app.admin.DevicePolicyManager;
import android.test.InstrumentationTestCase;

/**
 *  A helper for testing the {@link
 *  DevicePolicyManager#isCallerApplicationRestrictionsManagingPackage()} method.
 *  <p>The method names start with ""test"" to be recognized by {@link InstrumentationTestCase}.
 */
public class AppRestrictionsIsCallerDelegateHelper extends InstrumentationTestCase {

    private DevicePolicyManager mDevicePolicyManager;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mDevicePolicyManager =
            getInstrumentation().getContext().getSystemService(DevicePolicyManager.class);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/AppRestrictionsIsCallerDelegateHelper.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.delegate.GeneralDelegateTest"	"testGetsExpectedDelegationScopes"	""	"1: admin"	"([1:/com/android/cts/delegate/GeneralDelegateTest.java]:[admin]:[1]:method_text:[d scopes do not match expected scopes"",                delegatedScopes, expectedScopes);    }   ]) :|: public void testGetsExpectedDelegationScopes() {
        Bundle arguments = InstrumentationRegistry.getArguments();
        String[] expectedScopes = arguments.getString(PARAM_SCOPES).split("","");
        List<String> delegatedScopes = mDpm.getDelegatedScopes(/* admin= */ null,
                mContext.getPackageName());
        Log.v(TAG, ""delegatedScopes: "" + delegatedScopes);

        assertNotNull(""Received null scopes"", delegatedScopes);
        MoreAsserts.assertContentsInAnyOrder(""Delegated scopes do not match expected scopes"",
                delegatedScopes, expectedScopes);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/GeneralDelegateTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.delegate.GeneralDelegateTest"	"testSettingAdminComponentNameThrowsException"	""	"1: admin"	"([2:/com/android/cts/delegate/GeneralDelegateTest.java]:[admin]:[2]:method_text:[        MoreAsserts.assertContainsRegex(""No active admin"", expected.getMessage());        }    }}]) :|: public void testSettingAdminComponentNameThrowsException() {
        final String myPackageName = getInstrumentation().getContext().getPackageName();
        final ComponentName myComponentName = new ComponentName(myPackageName,
                GeneralDelegateTest.class.getName());

        try {
            mDpm.setUninstallBlocked(myComponentName, myPackageName, true);
            fail(""Expected SecurityException not thrown"");
        } catch (SecurityException expected) {
            MoreAsserts.assertContainsRegex(""No active admin"", expected.getMessage());
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/GeneralDelegateTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.delegate.NetworkLoggingDelegateTest"	"isHeadlessSystemUserMode"	""	"1: admin"	"([3:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[admin]:[3]:method_text:[) {            TestAppHelper.unregisterTestCaseReceiver(mContext, mReceiver);        }    }   ]) :|: public void test/*
 *.
 */
package com.android.cts.delegate;

import static android.app.admin.DeviceAdminReceiver.ACTION_NETWORK_LOGS_AVAILABLE;

import static com.android.cts.delegate.DelegateTestUtils.assertExpectException;

import static com.google.common.truth.Truth.assertThat;

import android.app.admin.DevicePolicyManager;
import android.content.IntentFilter;
import android.os.UserManager;
import android.util.Log;

import com.android.bedstead.dpmwrapper.TestAppHelper;
import com.android.cts.delegate.DelegateTestUtils.DelegatedLogsReceiver;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.concurrent.CountDownLatch;

/**
 * Tests that a delegate app with DELEGATION_NETWORK_LOGGING is able to control and access
 * network logging.
 */
public final class NetworkLoggingDelegateTest extends BaseJUnit3TestCase {

    private static final String TAG = ""NetworkLoggingDelegateTest"";

    private static final String[] URL_LIST = {
            ""example.edu"",
            ""ipv6.google.com"",
            ""google.co.jp"",
            ""google.fr"",
            ""google.com.br"",
            ""google.com.tr"",
            ""google.co.uk"",
            ""google.de""
    };

    // TODO(b/176993670): receiver needed to forward intents from device owner user to current user
    // on headless system user mode. Might be removed once tests are refactor to use proper IPC.
    private DelegatedLogsReceiver mReceiver;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        if (UserManager.isHeadlessSystemUserMode()) {
            mReceiver = new DelegatedLogsReceiver();
            TestAppHelper.registerTestCaseReceiver(mContext, mReceiver,
                    new IntentFilter(ACTION_NETWORK_LOGS_AVAILABLE));
        }

        DelegatedLogsReceiver.sBatchCountDown = new CountDownLatch(1);
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();

        if (mReceiver !="	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.delegate.PermissionGrantDelegateTest"	"testCannotAccessApis"	""	"1: granted"	"([1:/com/android/cts/delegate/PermissionGrantDelegateTest.java]:[granted]:[1]:method_text:[   mDpm.getPermissionGrantState(null, TEST_APP_PKG, TEST_PERMISSION);                });    }   ]) :|: public void testCannotAccessApis() {
        assertFalse(""DelegateApp should not be a permisssion grant delegate"",
            amIPermissionGrantDelegate());

        // Exercise setPermissionPolicy.
        assertExpectException(SecurityException.class,
                ""Calling identity is not authorized"", () -> {
                    mDpm.setPermissionPolicy(null, PERMISSION_POLICY_AUTO_GRANT);
                });
        assertFalse(""Permission policy should not have been set"",
                PERMISSION_POLICY_AUTO_GRANT == mDpm.getPermissionPolicy(null));

        // Exercise setPermissionGrantState.
        assertExpectException(SecurityException.class,
                ""Calling identity is not authorized"", () -> {
                    mDpm.setPermissionGrantState(null, TEST_APP_PKG, TEST_PERMISSION,
                            PERMISSION_GRANT_STATE_GRANTED);
                });

        // Exercise getPermissionGrantState.
        assertExpectException(SecurityException.class,
                ""Calling identity is not authorized"", () -> {
                    mDpm.getPermissionGrantState(null, TEST_APP_PKG, TEST_PERMISSION);
                });
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/PermissionGrantDelegateTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DevicePolicySafetyCheckerIntegrationTester"	"testOnOperationSafetyStateChanged"	""	"2: UserManager.DISALLOW admin"	"([17:/com/android/cts/devicepolicy/DevicePolicySafetyCheckerIntegrationTester.java]:[admin]:[17]:method_text:[ssionsNoReturn(dpm,                (obj) -> obj.setNextOperationSafety(operation, reason));    }}]) :|: public void testOnOperationSafetyStateChanged(Context context, DevicePolicyManager dpm) {
        // Currently there's just one reason...
        int reason = OPERATION_SAFETY_REASON_DRIVING_DISTRACTION;
        // Operation doesn't really matter
        int operation = OPERATION_LOCK_NOW;
        Log.d(TAG, ""testOnOperationSafetyStateChanged(): dpm="" + dpm
                + "", reason="" + operationSafetyReasonToString(reason)
                + "", operation="" + operationToString(operation));
        OperationSafetyChangedCallback receiver = OperationSafetyChangedCallback.register(context);
        try {
            setOperationUnsafe(dpm, operation, reason);
            // Must force OneTimeSafetyChecker to generate the event by calling the unsafe operation
            assertThrows(UnsafeStateException.class, () -> dpm.lockNow());

            Log.d(TAG, ""Waiting isSafe=false event"");
            assertNextEvent(receiver, reason, /* isSafe= */ false);

            // OneTimeSafetyChecker automatically disables itself after one operation, which in turn
            // triggers another event
            Log.d(TAG, ""Waiting isSafe=true event"");
            assertNextEvent(receiver, reason, /* isSafe= */ true);
        } finally {
            receiver.unregister(context);
        }
    }

    private void assertNextEvent(OperationSafetyChangedCallback receiver,
            int reason, boolean isSafe) {
        OperationSafetyChangedEvent event = receiver.getNextEvent();
        Log.v(TAG, ""Received event: "" + event);
        assertWithMessage(""event (%s) reason"", event).that(event.reason).isEqualTo(reason);
        assertWithMessage(""event (%s) safety state"", event).that(event.isSafe).isEqualTo(isSafe);
    }

    /**
     * Gets the device / profile owner-specific operations.
     *
     * <p>By default it returns an empty array, but sub-classes can override to add its supported
     * operations.
     */
    protected int[] getSafetyAwareOperations() {
        return ne"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/common/src/com/android/cts/devicepolicy/DevicePolicySafetyCheckerIntegrationTester.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DevicePolicySafetyCheckerIntegrationTester"	"isEmpty"	""	"1: admin"	"([25:/com/android/cts/devicepolicy/DevicePolicySafetyCheckerIntegrationTester.java]:[admin]:[25]:method_text:[        }    }    /**     * Tests {@link DevicePolicyManager#isSafeOperation(int)}.     */   ]) :|: public void test/*
 *.
 */
package com.android.cts.devicepolicy;

import static android.app.admin.DevicePolicyManager.OPERATION_LOCK_NOW;
import static android.app.admin.DevicePolicyManager.OPERATION_LOGOUT_USER;
import static android.app.admin.DevicePolicyManager.OPERATION_REMOVE_ACTIVE_ADMIN;
import static android.app.admin.DevicePolicyManager.OPERATION_REMOVE_KEY_PAIR;
import static android.app.admin.DevicePolicyManager.OPERATION_SAFETY_REASON_DRIVING_DISTRACTION;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_ALWAYS_ON_VPN_PACKAGE;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_MASTER_VOLUME_MUTED;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_PERMISSION_GRANT_STATE;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_PERMISSION_POLICY;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_RESTRICTIONS_PROVIDER;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_USER_RESTRICTION;
import static android.app.admin.DevicePolicyManager.operationSafetyReasonToString;
import static android.app.admin.DevicePolicyManager.operationToString;

import static com.google.common.truth.Truth.assertWithMessage;

import static org.junit.Assert.fail;
import static org.testng.Assert.assertThrows;
import static org.testng.Assert.expectThrows;

import android.app.admin.DevicePolicyManager;
import android.app.admin.UnsafeStateException;
import android.content.ComponentName;
import android.content.Context;
import android.os.UserManager;
import android.util.Log;

import com.android.compatibility.common.util.ShellIdentityUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Set;

/**
 * Helper class to test that DPM calls fail when determined by the
 * {@link android.app.admin.DevicePolicySafetyChecker}; it provides the base infra, so it can be
 * used by both device and profile owner tests.
 */
public class DevicePolicySafetyCheckerIntegration"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/common/src/com/android/cts/devicepolicy/DevicePolicySafetyCheckerIntegrationTester.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.DevicePolicySafetyCheckerIntegrationTester"	"testUnsafeStateException"	""	"1: admin"	"([6:/com/android/cts/devicepolicy/DevicePolicySafetyCheckerIntegrationTester.java]:[admin]:[6]:method_text:[  * Tests {@link android.app.admin.DeviceAdminReceiver#onOperationSafetyStateChanged()}.     */   ]) :|: public void testUnsafeStateException(DevicePolicyManager dpm, ComponentName admin) {
        // Currently there's just one reason...
        int reason = OPERATION_SAFETY_REASON_DRIVING_DISTRACTION;
        // Operation doesn't really matter
        int operation = OPERATION_LOCK_NOW;
        Log.d(TAG, ""testUnsafeStateException(): dpm="" + dpm + "", admin="" + admin
                + "", reason="" + operationSafetyReasonToString(reason)
                + "", operation="" + operationToString(operation));

        setOperationUnsafe(dpm, operation, reason);
        UnsafeStateException e = expectThrows(UnsafeStateException.class,
                () -> runCommonOrSpecificOperation(dpm, admin, operation, /* overloaded= */ false));

        int actualOperation = e.getOperation();
        assertWithMessage(""operation (%s)"", operationToString(actualOperation))
                .that(actualOperation).isEqualTo(operation);
        List<Integer> actualReasons = e.getReasons();
        assertWithMessage(""reasons"").that(actualReasons).hasSize(1);
        int actualReason = actualReasons.get(0);
        assertWithMessage(""reason (%s)"", operationSafetyReasonToString(actualReason))
                .that(actualReason).isEqualTo(reason);
    }

    /**
     * Tests {@link android.app.admin.DeviceAdminReceiver#onOperationSafetyStateChanged()}.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/common/src/com/android/cts/devicepolicy/DevicePolicySafetyCheckerIntegrationTester.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.profileowner.DevicePolicySafetyCheckerIntegrationTest"	"DevicePolicySafetyCheckerIntegrationTester"	""	"1: admin"	"([2:/com/android/cts/profileowner/DevicePolicySafetyCheckerIntegrationTest.java]:[admin]:[2]:method_text:[ster();    /**     * Tests that all safety-aware operations are properly implemented.     */   ]) :|: public void test/*
 *.
 */
package com.android.cts.profileowner;

import android.app.admin.DevicePolicyManager;

import com.android.cts.devicepolicy.DevicePolicySafetyCheckerIntegrationTester;

// TODO(b/174859111): move to automotive-only section
/**
 * Tests that DPM calls fail when determined by the
 * {@link android.app.admin.DevicePolicySafetyChecker}.
 */
public final class DevicePolicySafetyCheckerIntegrationTest extends BaseProfileOwnerTest {

    private final DevicePolicySafetyCheckerIntegrationTester mTester =
            new DevicePolicySafetyCheckerIntegrationTester();

    /**
     * Tests that all safety-aware operations are properly implemented.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/DevicePolicySafetyCheckerIntegrationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.profileowner.DevicePolicySafetyCheckerIntegrationTest"	"testIsSafeOperation"	""	"1: admin"	"([1:/com/android/cts/profileowner/DevicePolicySafetyCheckerIntegrationTest.java]:[admin]:[1]:method_text:[;    }    /**     * Tests {@link android.app.admin.UnsafeStateException} properties.     */   ]) :|: public void testIsSafeOperation() {
        mTester.testIsSafeOperation(mDevicePolicyManager);
    }

    /**
     * Tests {@link android.app.admin.UnsafeStateException} properties.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/DevicePolicySafetyCheckerIntegrationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.profileowner.DevicePolicySafetyCheckerIntegrationTest"	"testUnsafeStateException"	""	"1: admin"	"([2:/com/android/cts/profileowner/DevicePolicySafetyCheckerIntegrationTest.java]:[admin]:[2]:method_text:[  * Tests {@link android.app.admin.DeviceAdminReceiver#onOperationSafetyStateChanged()}.     */   ]) :|: public void testUnsafeStateException() {
        mTester.testUnsafeStateException(mDevicePolicyManager, getWho());
    }

    /**
     * Tests {@link android.app.admin.DeviceAdminReceiver#onOperationSafetyStateChanged()}.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/DevicePolicySafetyCheckerIntegrationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.customizationapp.CustomizationTest"	"testSetWallpaper_disallowed"	""	"1: UserManager.DISALLOW"	"([1:/com/android/cts/customizationapp/CustomizationTest.java]:[UserManager.DISALLOW]:[1]:method_text:[(mContext);        assertTrue(BitmapUtils.compareBitmaps(newWallpaper, originalWallpaper));    }}]) :|: public void testSetWallpaper_disallowed() throws Exception {
        final WallpaperManager wallpaperManager = WallpaperManager.getInstance(mContext);
        final Bitmap originalWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
        final Bitmap referenceWallpaper = BitmapUtils.generateRandomBitmap(97, 73);
        final UserManager userManager =
                (UserManager) mContext.getSystemService(Context.USER_SERVICE);
        assertTrue(userManager.hasUserRestriction(UserManager.DISALLOW_SET_WALLPAPER));

        // Checking setBitmap() method.
        wallpaperManager.setBitmap(referenceWallpaper);
        Thread.sleep(WAITING_TIME_MS);
        Bitmap newWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
        assertTrue(BitmapUtils.compareBitmaps(newWallpaper, originalWallpaper));

        // Checking setStream() method.
        wallpaperManager.setStream(BitmapUtils.bitmapToInputStream(referenceWallpaper));
        Thread.sleep(WAITING_TIME_MS);
        newWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
        assertTrue(BitmapUtils.compareBitmaps(newWallpaper, originalWallpaper));

        // Checking setResource() method.
        wallpaperManager.setResource(R.raw.wallpaper);
        Thread.sleep(WAITING_TIME_MS);
        newWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
        assertTrue(BitmapUtils.compareBitmaps(newWallpaper, originalWallpaper));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CustomizationApp/src/com/android/cts/customizationapp/CustomizationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.crossprofileappstest.CrossProfileAppsPermissionToInteractTest"	"TestApis"	""	"1: admin"	"([4:/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java]:[admin]:[4]:method_text:[ry.getInstrumentation().getUiAutomation()                .dropShellPermissionIdentity();    }   ]) :|: /*
 *.
 */

package com.android.cts.crossprofileappstest;

import static com.google.common.truth.Truth.assertThat;

import static org.junit.Assert.fail;

import android.app.AppOpsManager;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.CrossProfileApps;
import android.content.pm.PackageManager;
import android.os.Binder;
import android.os.Bundle;
import android.os.UserHandle;
import android.os.UserManager;

import androidx.test.InstrumentationRegistry;
import androidx.test.runner.AndroidJUnit4;

import com.android.bedstead.nene.TestApis;
import com.android.bedstead.nene.permissions.PermissionContext;

import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Collections;

@RunWith(AndroidJUnit4.class)
public class CrossProfileAppsPermissionToInteractTest {
    public static final String MANAGE_APP_OPS_MODES_PERMISSION =
            ""android.permission.MANAGE_APP_OPS_MODES"";
    public static final String INTERACT_ACROSS_PROFILES_PERMISSION =
            ""android.permission.INTERACT_ACROSS_PROFILES"";
    public static final String INTERACT_ACROSS_USERS_PERMISSION =
            ""android.permission.INTERACT_ACROSS_USERS"";
    public static final String INTERACT_ACROSS_USERS_FULL_PERMISSION =
            ""android.permission.INTERACT_ACROSS_USERS_FULL"";
    public static final String ACTION_MANAGE_CROSS_PROFILE_ACCESS =
            ""android.settings.MANAGE_CROSS_PROFILE_ACCESS"";

    private static final ComponentName ADMIN_RECEIVER_COMPONENT =
            new ComponentName(
                    AdminReceiver.class.getPackage().getName(), AdminReceiver.class.getName());
    private static final String PARAM_CROSS_PROFILE_PACKAGE = ""crossProfilePackage"";
    private static final TestApis sTestApis = new TestApis();

    private final Context mContext = InstrumentationRegistry.getContext();
    private final Cros"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.crossprofileappstest.CrossProfileAppsPermissionToInteractTest"	"testSetCrossProfilePackages_noAsserts"	""	"1: admin"	"([1:/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java]:[admin]:[1]:method_text:[ndException e) {                    // Do nothing                }            }        }    }}]) :|: 
    public void testSetCrossProfilePackages_noAsserts() {
        final DevicePolicyManager devicePolicyManager =
                (DevicePolicyManager) mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
        devicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, Collections.singleton(getCrossProfilePackage()));
    }

    private String getCrossProfilePackage() {
        final Bundle testArguments = InstrumentationRegistry.getArguments();
        if (testArguments.containsKey(PARAM_CROSS_PROFILE_PACKAGE)) {
            try {
                return testArguments.getString(PARAM_CROSS_PROFILE_PACKAGE);
            } catch (NumberFormatException ignore) {
            }
        }
        fail(""cross profile package param not found."");
        return null;
    }

    private void setAppOpOnCurrentProfile(int mode) {
        try (PermissionContext p = sTestApis.permissions().withPermission(
                MANAGE_APP_OPS_MODES_PERMISSION)) {
            mAppOpsManager.setMode(AppOpsManager.OPSTR_INTERACT_ACROSS_PROFILES,
                    Binder.getCallingUid(), mContext.getPackageName(), mode);
        }
    }

    private void setAppOpOnAllProfiles(int mode) {
        setAppOpOnAllProfiles(mode, /* includeCallingProfile= */ true);
    }

    private void setAppOpOnAllProfiles(int mode, boolean includeCallingProfile) {
        try (PermissionContext p = sTestApis.permissions().withPermission(
                MANAGE_APP_OPS_MODES_PERMISSION, INTERACT_ACROSS_USERS_PERMISSION)) {
            for (UserHandle profile : mContext.getSystemService(
                    UserManager.class).getAllProfiles()) {
                if (!includeCallingProfile && profile.getIdentifier() == mContext.getUserId()) {
                    continue;
                }
                try {
                    final int uid = mContext.createContextAsUser(profile, /* flags= */ 0)
                            .getPackageManager().getPackageUid("	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.devicepolicy.singleadmin.ProvisioningSingleAdminTest"	"testManagedProfileProvisioning"	""	"2: silent admin"	"([2:/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java]:[admin]:[2]:method_text:[TestManager(mContext);        assertTrue(provisioningMgr.startProvisioningAndWait(intent));    }}]) :|: 
    public void testManagedProfileProvisioning() throws InterruptedException {
        assertProvisioningSucceeds(createProvisioningIntent());
    }

    private Intent createProvisioningIntent() {
        return new Intent(ACTION_PROVISION_MANAGED_PROFILE)
                .putExtra(EXTRA_PROVISIONING_SKIP_ENCRYPTION, true)
                .putExtra(EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME, ADMIN_RECEIVER_PACKAGE);
    }

    private void assertProvisioningSucceeds(Intent intent) throws InterruptedException {
        SilentProvisioningTestManager provisioningMgr = new SilentProvisioningTestManager(mContext);
        assertTrue(provisioningMgr.startProvisioningAndWait(intent));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/SingleAdminApp/src/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.SustainedPerformance.cts.SustainedPerformanceHostTest"	"currentTimeMillis"	"CtsSustainedPerformanceHostTestCases"	"1: re_tag:(?<!/)C\-1\-1"	"([1:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[re_tag:(?<!/)C\-1\-1]:[1]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");    }   ]) :|: public void test/*
 *.
 */

package android.sustainedPerformance.cts;

import com.android.compatibility.common.util.CddTest;
import com.android.ddmlib.IShellOutputReceiver;
import com.android.ddmlib.Log;
import com.android.ddmlib.MultiLineReceiver;
import com.android.tradefed.device.ITestDevice;
import com.android.tradefed.testtype.DeviceTestCase;
import java.util.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
/**
 * Test to check if device implements Sustained Performance Mode
 */
@CddTest(requirement=""8.5/C-0-1,C-1-1,C-1-2"")
public class SustainedPerformanceHostTest extends DeviceTestCase {

    ITestDevice device;
    private static final String PACKAGE = ""com.android.gputest"";
    private static final String CLASS = ""GPUStressTestActivity"";
    private static final String START_COMMAND = String.format(
            ""am start -W -a android.intent.action.MAIN -n %s/%s.%s"",
            PACKAGE, PACKAGE, CLASS);
    private static final String START_COMMAND_MODE = String.format(
            ""am start -W -a android.intent.action.MAIN -n %s/%s.%s --ez SustainedPerformanceMode true"",
            PACKAGE, PACKAGE, CLASS);
    private static final String STOP_COMMAND = String.format(
            ""am force-stop %s"", PACKAGE);
    private static final String TEST_PACKAGE = ""android.test.app"";
    private static final String TEST_CLASS = ""DeviceTestActivity"";
    private static final String START_TEST_COMMAND = String.format(
            ""am start -W -a android.intent.action.MAIN -n %s/%s.%s"",
            TEST_PACKAGE, TEST_PACKAGE, TEST_CLASS);
    private static final String DHRYSTONE = ""/data/local/tmp/"";
    private static final String LOG_TAG = ""sustainedPerfTest"";

    private static ArrayList<Double> appResultsWithMode = new ArrayList<Double>();
    private static ArrayList<Double> appResultsWithoutMode = new ArrayList<Double>();
    private static ArrayList<Double> dhrystoneResultsWithMode = new"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.webkit.WebViewHostSideMultipleProfileTest"	"testManagedProfile"	""	"3: android.software.managed_users android.software.managed managed_users"	"([1:/com/android/cts/webkit/WebViewHostSideMultipleProfileTest.java]:[managed_users]:[1]:method_text:[st-side test if the device-side test fails.                        .setCheckResults(true));    }}]) :|: 
    public void testManagedProfile() throws DeviceNotAvailableException, TargetSetupError {
        Assume.assumeTrue(isMultiUsersSupported() && isManagedProfileSupported());

        mUserId = createUser(SECONDARY_USER_NAME + System.currentTimeMillis(), true);
        startUser(mUserId);
        installTestApkForUser(mUserId);
        setProfileOwnwer(mUserId, PROFILE_OWNER_CLASS);

        assertWebViewDeviceTestAsUserPasses(this, ""testCreateWebViewAndNavigate"", mUserId);
    }

    private void installTestApkForUser(int userId) throws DeviceNotAvailableException {
        try {
            // TODO: it would be nice to use BaseHostJUnit4Test#installPackageAsUser instead.
            // However, this method removes installed package for all users after test is finished.
            // Therefore it breaks other tests that rely on targetprep which installs test APK once
            // before tests are executed.
            // See b/178367954.
            File file = getTestInformation().getDependencyFile(DEVICE_TEST_APK, true);

            // --dont-kill is to avoid the test app being killed if ActivityManager is slow to
            // respond to the install event.
            // See b/202824003.
            String output = mDevice.installPackageForUser(file, true, false, userId, ""--dont-kill"");
            if (output != null) {
                stopAndRemoveUser(userId);
                Assert.fail(""Failed to install test apk "" + output);
            }
        } catch (FileNotFoundException e) {
            stopAndRemoveUser(userId);
            Assert.fail(""Failed to install test apk "" + DEVICE_TEST_APK);
        }
    }

    private int createUser(String profileName, boolean isManaged)
            throws DeviceNotAvailableException {
        String command = isManaged ?
                ""pm create-user --profileOf %d --managed %s"" :
                ""pm create-user --profileOf %d %s"";
        command = String.format(command, mDevice.getPrimaryUserId(), profileName)"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/webkit/src/com/android/cts/webkit/WebViewHostSideMultipleProfileTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.host.blob.BlobStoreMultiUserTest"	"isTrue"	"CtsBlobStoreHostTestCases"	"1: granted"	"([1:/com/android/cts/host/blob/BlobStoreMultiUserTest.java]:[granted]:[1]:method_text:[aryUserId > 0) {            testInfo.getDevice().removeUser(mSecondaryUserId);        }    }   ]) :|: /*
 *.
 */
package com.android.cts.host.blob;

import static org.junit.Assume.assumeTrue;

import static com.google.common.truth.Truth.assertThat;

import com.android.tradefed.invoker.TestInformation;
import com.android.tradefed.testtype.DeviceJUnit4ClassRunner;
import com.android.tradefed.testtype.junit4.AfterClassWithInfo;
import com.android.tradefed.testtype.junit4.BeforeClassWithInfo;
import com.android.tradefed.util.Pair;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Map;

@RunWith(DeviceJUnit4ClassRunner.class)
public class BlobStoreMultiUserTest extends BaseBlobStoreHostTest {
    private static final String TEST_CLASS = TARGET_PKG + "".DataCleanupTest"";

    private static int mPrimaryUserId;
    private static int mSecondaryUserId;

    @BeforeClassWithInfo
    public static void setUpClass(TestInformation testInfo) throws Exception {
        assumeTrue(""Multi-user is not supported on this device"",
                isMultiUserSupported(testInfo.getDevice()));

        mPrimaryUserId = testInfo.getDevice().getPrimaryUserId();
        mSecondaryUserId = testInfo.getDevice().createUser(""Test_User"");
        assertThat(testInfo.getDevice().startUser(mSecondaryUserId)).isTrue();
    }

    @Before
    public void setUp() throws Exception {
        for (String apk : new String[] {TARGET_APK, TARGET_APK_DEV}) {
            installPackageAsUser(apk, true /* grantPermissions */, mPrimaryUserId, ""-t"");
            installPackageAsUser(apk, true /* grantPermissions */, mSecondaryUserId, ""-t"");
        }
        // We would verify access with and without the app holding the assist role, so we don't
        // want the ACCESS_BLOBS_ACROSS_USERS permission to be granted by default.
        installPackageAsUser(TARGET_APK_ASSIST, false /* grantPermissions */, mPrimaryUserId);
        installPackageAsUser(TARGET_APK_ASSIST, false /* grantPermissions */, mSecondaryUserId);
    }

    @AfterClassWithInfo
    public static v"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/blobstore/src/com/android/cts/host/blob/BlobStoreMultiUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.session.cts.MediaSessionManagerHostTest"	"testGetActiveSessionsFull_managedProfiles"	"CtsMediaHostTestCases"	"3: android.software.managed_users android.software.managed managed_users"	"([1:/android/media/session/cts/MediaSessionManagerHostTest.java]:[managed_users]:[1]:method_text:[ediaSession"", newUser);        removeUser(newUser);    }    @AppModeFull    @RequiresDevice   ]) :|: public void testGetActiveSessionsFull_managedProfiles() throws Exception {
        testGetActiveSessions_managedProfiles(false);
    }

    private void testGetActiveSessions_managedProfiles(boolean instant)
            throws Exception {
        if (!hasDeviceFeature(""android.software.managed_users"")) {
            CLog.logAndDisplay(LogLevel.INFO,
                    ""Device doesn't support managed profiles. Test won't run."");
            return;
        }

        // Test if another managed profile can get the session.
        // Remove the created user first not to exceed system's user number limit.
        int newUser = createAndStartManagedProfile(getDevice().getPrimaryUserId());
        installAppAsUser(DEVICE_SIDE_TEST_APK, newUser, instant);
        setAllowGetActiveSessionForTest(true, newUser);
        runTestAsUser(""testGetActiveSessions_noMediaSession"", newUser);
        removeUser(newUser);
    }

    @AppModeFull
    @RequiresDevice"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/media/src/android/media/session/cts/MediaSessionManagerHostTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.metrics.cts.MediaMetricsAtomTests"	"isNotNull"	"CtsMediaHostTestCases"	"1: microphone"	"([2:/android/media/metrics/cts/MediaMetricsAtomTests.java]:[microphone]:[2]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ]) :|: public void test/*
 *.
 */

package android.media.metrics.cts;

import static com.google.common.truth.Truth.assertThat;

import android.cts.statsdatom.lib.AtomTestUtils;
import android.cts.statsdatom.lib.ConfigUtils;
import android.cts.statsdatom.lib.DeviceUtils;
import android.cts.statsdatom.lib.ReportUtils;

import com.android.os.AtomsProto;
import com.android.os.StatsLog;
import com.android.tradefed.build.IBuildInfo;
import com.android.tradefed.testtype.DeviceTestCase;
import com.android.tradefed.testtype.IBuildReceiver;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class MediaMetricsAtomTests extends DeviceTestCase implements IBuildReceiver {
    public static final String TEST_APK = ""CtsMediaMetricsHostTestApp.apk"";
    public static final String TEST_PKG = ""android.media.metrics.cts"";
    private static final String FEATURE_AUDIO_OUTPUT = ""android.hardware.audio.output"";
    private static final String FEATURE_MICROPHONE = ""android.hardware.microphone"";
    private static final int MAX_BUFFER_CAPACITY = 30 * 1024 * 1024; // 30M
    private IBuildInfo mCtsBuild;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        assertThat(mCtsBuild).isNotNull();
        DeviceUtils.installTestApp(getDevice(), TEST_APK, TEST_PKG, mCtsBuild);
        ConfigUtils.removeConfig(getDevice());
        ReportUtils.clearReports(getDevice());
        Thread.sleep(AtomTestUtils.WAIT_TIME_LONG);
    }

    @Override
    protected void tearDown() throws Exception {
        ConfigUtils.removeConfig(getDevice());
        ReportUtils.clearReports(getDevice());
        DeviceUtils.uninstallTestApp(getDevice(), TEST_PKG);
        super.tearDown();
    }

    @Override
    public void setBuild(IBuildInfo buildInfo) {
        mCtsBuild = buildInfo;
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/media/src/android/media/metrics/cts/MediaMetricsAtomTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.metrics.cts.MediaMetricsAtomTests"	"testAAudioMmapInputStream"	"CtsMediaHostTestCases"	"1: microphone"	"([1:/android/media/metrics/cts/MediaMetricsAtomTests.java]:[microphone]:[1]:method_text:[ametricsAAudioStreamReported is pushed to verify     * the data is collected correctly.     */   ]) :|: public void testAAudioMmapInputStream() throws Exception {
        runAAudioTestAndValidate(
                FEATURE_MICROPHONE,
                AtomsProto.MediametricsAAudioStreamReported.Direction.DIRECTION_INPUT_VALUE,
                ""testAAudioMmapInputStream"");
    }

    /**
     * The test try to create and then close aaudio output stream with mmap path via media metrics
     * atom host side test app on the DUT.
     * After that, the event metric data for MediametricsAAudioStreamReported is pushed to verify
     * the data is collected correctly.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/media/src/android/media/metrics/cts/MediaMetricsAtomTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.metrics.cts.MediaMetricsAtomTests"	"testAAudioLegacyInputStream"	"CtsMediaHostTestCases"	"1: microphone"	"([1:/android/media/metrics/cts/MediaMetricsAtomTests.java]:[microphone]:[1]:method_text:[ametricsAAudioStreamReported is pushed to verify     * the data is collected correctly.     */   ]) :|: public void testAAudioLegacyInputStream() throws Exception {
        runAAudioTestAndValidate(
                FEATURE_MICROPHONE,
                AtomsProto.MediametricsAAudioStreamReported.Direction.DIRECTION_INPUT_VALUE,
                ""testAAudioLegacyInputStream"");
    }

    /**
     * The test try to create and then close aaudio output stream with legacy path via media metrics
     * atom host side test app on the DUT.
     * After that, the event metric data for MediametricsAAudioStreamReported is pushed to verify
     * the data is collected correctly.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/media/src/android/media/metrics/cts/MediaMetricsAtomTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.car.cts.PowerPolicyHostTest"	"testPowerPolicySilentMode"	"CtsCarHostTestCases"	"1: silent"	"([16:/android/car/cts/PowerPolicyHostTest.java]:[silent]:[16]:method_text:[vents but {@code SHUTDOWN_PREPARE} shall not have any impact     * to CPMS power state.     */   ]) :|: 
    public void testPowerPolicySilentMode() throws Exception {
        String testcase = ""testPowerPolicySilentModeFull:"";
        String teststep;
        PowerPolicyTestHelper testHelper;

        SilentModeInfo smInfo = getSilentModeInfo();
        Assume.assumeTrue(""HW does not support silent mode. Skip the test"",
                smInfo.getMonitoringHWStateSignal());

        teststep = ""switch to forced silent"";
        enterForcedSilentMode();
        testHelper = getTestHelper(testcase, 1, teststep);
        testHelper.checkCurrentState(PowerPolicyConstants.CarPowerState.ON);
        testHelper.checkCurrentPolicy(PowerPolicyDef.IdSet.NO_USER_INTERACTION);
        testHelper.checkSilentModeStatus(true);
        testHelper.checkSilentModeFull(SilentModeInfo.FORCED_SILENT);
        testHelper.checkCurrentPowerComponents(PowerPolicyDef.PolicySet.NO_USER_INTERACT);

        teststep = ""restore to normal mode"";
        leaveForcedSilentMode();
        testHelper = getTestHelper(testcase, 2, teststep);
        testHelper.checkCurrentState(PowerPolicyConstants.CarPowerState.ON);
        testHelper.checkCurrentPolicy(PowerPolicyDef.IdSet.DEFAULT_ALL_ON);
        testHelper.checkSilentModeStatus(false);
        testHelper.checkSilentModeFull(SilentModeInfo.NO_SILENT);
        testHelper.checkCurrentPowerComponents(PowerPolicyDef.PolicySet.DEFAULT_ALL_ON);
    }

    /**
     * Tests the error conditions for CPMS at the ON state.
     *
     * <p>All other VHAL events but {@code SHUTDOWN_PREPARE} shall not have any impact
     * to CPMS power state.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/car/src/android/car/cts/PowerPolicyHostTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.car.cts.PowerPolicyHostTest"	"testPowerPolicyChange"	"CtsCarHostTestCases"	"1: silent"	"([24:/android/car/cts/PowerPolicyHostTest.java]:[silent]:[24]:method_text:[       testHelper.turnOffComponent();        testHelper.waitUntilPowerStateChangeTo(false);    }}]) :|: 
    public void testPowerPolicyChange() throws Exception {
        String testcase = ""testPowerPolicyChange:"";
        int expectedTotalPolicies = PowerPolicyDef.PolicySet.TOTAL_DEFAULT_REGISTERED_POLICIES;
        int stepNo = 0;
        String teststep;
        PowerPolicyTestHelper testHelper;

        teststep = ""check the inital power policies"";
        testHelper = getTestHelper(testcase, stepNo++, teststep);
        testHelper.checkCurrentState(PowerPolicyConstants.CarPowerState.ON);
        testHelper.checkCurrentPolicy(PowerPolicyDef.IdSet.DEFAULT_ALL_ON);
        testHelper.checkTotalRegisteredPolicies(expectedTotalPolicies);

        // create two power policies, test1 and test2, for power policy change test
        defineAndCheckPolicyTest1(testcase, stepNo++, ++expectedTotalPolicies);
        defineAndCheckPolicyTest2(testcase, stepNo++, ++expectedTotalPolicies);

        teststep = ""apply power policy test1"";
        applyPowerPolicy(PowerPolicyDef.IdSet.TEST1);
        testHelper = getTestHelper(testcase, stepNo++, teststep);
        testHelper.checkCurrentPolicy(PowerPolicyDef.IdSet.TEST1);

        teststep = ""apply power policy test2"";
        applyPowerPolicy(PowerPolicyDef.IdSet.TEST2);
        testHelper = getTestHelper(testcase, stepNo++, teststep);
        testHelper.checkCurrentPolicy(PowerPolicyDef.IdSet.TEST2);

        teststep = ""revert power policy back to the default"";
        applyPowerPolicy(PowerPolicyDef.IdSet.DEFAULT_ALL_ON);
        testHelper = getTestHelper(testcase, stepNo++, teststep);
        testHelper.checkCurrentPolicy(PowerPolicyDef.IdSet.DEFAULT_ALL_ON);

        // add ""test power policy listener"" here so that one reboot clears all
        defineAndCheckPolicyListenerTest(testcase, stepNo++, ++expectedTotalPolicies);
        String clientTestcase = ""PowerPolicyListenerTest"";
        PowerPolicyTestResult testResult = new PowerPolicyTestResult(mTestAnalyzer);
        String clientAction = ""DUMP_LISTENER"";
        String"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/car/src/android/car/cts/PowerPolicyHostTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.server.cts.PowerIncidentTest"	"testPowerServiceDump"	"CtsIncidentHostTestCases"	"1: admin"	"([1:/com/android/server/cts/PowerIncidentTest.java]:[admin]:[1]:method_text:[           assertTrue(0 <= wl.getUid());            assertTrue(0 <= wl.getPid());        }    }}]) :|: public void testPowerServiceDump() throws Exception {
        final PowerManagerServiceDumpProto dump =
                getDump(PowerManagerServiceDumpProto.parser(), ""dumpsys power --proto"");

        verifyPowerManagerServiceDumpProto(dump, PRIVACY_NONE);
    }

    static void verifyPowerManagerServiceDumpProto(PowerManagerServiceDumpProto dump, int filterLevel) {
        assertTrue(dump.getBatteryLevel() >= 0);
        assertTrue(dump.getBatteryLevel() <= 100);

        assertTrue(
                PowerManagerInternalProto.Wakefulness.getDescriptor()
                        .getValues()
                        .contains(dump.getWakefulness().getValueDescriptor()));
        assertTrue(
                BatteryPluggedStateEnum.getDescriptor()
                        .getValues()
                        .contains(dump.getPlugType().getValueDescriptor()));
        assertTrue(
                IntentProto.DockState.getDescriptor()
                        .getValues()
                        .contains(dump.getDockState().getValueDescriptor()));

        final PowerServiceSettingsAndConfigurationDumpProto settingsAndConfiguration =
                dump.getSettingsAndConfiguration();
        assertTrue(settingsAndConfiguration.getMinimumScreenOffTimeoutConfigMs() > 0);
        assertTrue(settingsAndConfiguration.getMaximumScreenDimDurationConfigMs() >= 0);
        assertTrue(settingsAndConfiguration.getMaximumScreenDimRatioConfig() > 0);
        assertTrue(settingsAndConfiguration.getScreenOffTimeoutSettingMs() > 0);
        // Default value is -1.
        assertTrue(settingsAndConfiguration.getSleepTimeoutSettingMs() >= -1);
        assertTrue(settingsAndConfiguration.getMaximumScreenOffTimeoutFromDeviceAdminMs() > 0);
        // -1 is used to disable, so is valid.
        assertTrue(settingsAndConfiguration.getUserActivityTimeoutOverrideFromWindowManagerMs() >= -1);
        final PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/incident/src/com/android/server/cts/PowerIncidentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.keysets.KeySetPermissionsTest"	"testHasPerm"	""	"1: granted"	"([2:/com/android/cts/keysets/KeySetPermissionsTest.java]:[granted]:[2]:method_text:[ pm.checkPermission(KEYSET_PERM_NAME, KEYSET_APP_PKG) == PackageManager.PERMISSION_GRANTED);    }}]) :|: public void testHasPerm() throws Exception {
        PackageManager pm = getContext().getPackageManager();
        assertTrue(KEYSET_PERM_NAME + "" not granted to "" + KEYSET_APP_PKG,
                pm.checkPermission(KEYSET_PERM_NAME, KEYSET_APP_PKG) == PackageManager.PERMISSION_GRANTED);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/keysets/testApp/src/com/android/cts/keysets/KeySetPermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.escalatepermission.PermissionEscalationTest"	"testRuntimePermissionsAreNotGranted"	""	"1: granted"	"([1:/com/android/cts/escalatepermission/PermissionEscalationTest.java]:[granted]:[1]:method_text:[ssion(Manifest.permission.STEAL_AUDIO2),                PackageManager.PERMISSION_DENIED);    } }]) :|: 
    public void testRuntimePermissionsAreNotGranted() throws Exception {
        // TODO (b/172366747): It is weird that the permission cannot become a runtime permission
        //                     during runtime but can become one during reboot.
        Context context = InstrumentationRegistry.getTargetContext();

        // Ensure permission is now dangerous but denied
        PermissionInfo stealAudio1Permission1 = context.getPackageManager()
                .getPermissionInfo(Manifest.permission.STEAL_AUDIO1, 0);
        assertSame(""Signature permission can become dangerous after reboot"",
                PermissionInfo.PROTECTION_DANGEROUS, (stealAudio1Permission1.protectionLevel
                        & PermissionInfo.PROTECTION_MASK_BASE));

        assertSame(""Permission should be denied"",
                context.checkSelfPermission(Manifest.permission.STEAL_AUDIO1),
                PackageManager.PERMISSION_DENIED);

        // Ensure permission is now dangerous but denied
        PermissionInfo stealAudio1Permission2 = context.getPackageManager()
                .getPermissionInfo(Manifest.permission.STEAL_AUDIO2, 0);
        assertSame(""Signature permission can become dangerous after reboot"",
                PermissionInfo.PROTECTION_DANGEROUS, (stealAudio1Permission2.protectionLevel
                        & PermissionInfo.PROTECTION_MASK_BASE));

        assertSame(""Permission should be denied"",
                context.checkSelfPermission(Manifest.permission.STEAL_AUDIO2),
                PackageManager.PERMISSION_DENIED);
    }
 }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EscalateToRuntimePermissions/src/com/android/cts/escalatepermission/PermissionEscalationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.ephemeralapp1.ClientTest"	"testInstallPermissionNotGranted"	""	"1: granted"	"([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[granted]:[1]:method_text:[on(Manifest.permission.SET_ALARM),                is(PackageManager.PERMISSION_DENIED));    }   ]) :|: 
    public void testInstallPermissionNotGranted() throws Exception {
        assertThat(InstrumentationRegistry.getContext()
                    .checkCallingOrSelfPermission(Manifest.permission.SET_ALARM),
                is(PackageManager.PERMISSION_DENIED));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/EphemeralApp1/src/com/android/cts/ephemeralapp1/ClientTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.ephemeralapp1.ClientTest"	"testInstallPermissionGranted"	""	"1: granted"	"([2:/com/android/cts/ephemeralapp1/ClientTest.java]:[granted]:[2]:method_text:[on(Manifest.permission.INTERNET),                is(PackageManager.PERMISSION_GRANTED));    }   ]) :|: 
    public void testInstallPermissionGranted() throws Exception {
        assertThat(InstrumentationRegistry.getContext()
                    .checkCallingOrSelfPermission(Manifest.permission.INTERNET),
                is(PackageManager.PERMISSION_GRANTED));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/EphemeralApp1/src/com/android/cts/ephemeralapp1/ClientTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.ephemeralapp1.ClientTest"	"testInstallPermissionNotGrantedInPackageInfo"	""	"1: granted"	"([2:/com/android/cts/ephemeralapp1/ClientTest.java]:[granted]:[2]:method_text:[  assertThat(isPermissionGrantedInPackageInfo(Manifest.permission.SET_ALARM), is(false));    }   ]) :|: 
    @AsbSecurityTest(cveBugId = 140256621)
    public void testInstallPermissionNotGrantedInPackageInfo() throws Exception {
        assertThat(isPermissionGrantedInPackageInfo(Manifest.permission.SET_ALARM), is(false));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/EphemeralApp1/src/com/android/cts/ephemeralapp1/ClientTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.ephemeralapp1.ClientTest"	"testInstallPermissionGrantedInPackageInfo"	""	"1: granted"	"([4:/com/android/cts/ephemeralapp1/ClientTest.java]:[granted]:[4]:method_text:[sFlags[permissionIndex]                & PackageInfo.REQUESTED_PERMISSION_GRANTED) != 0;    }   ]) :|: 
    @AsbSecurityTest(cveBugId = 140256621)
    public void testInstallPermissionGrantedInPackageInfo() throws Exception {
        assertThat(isPermissionGrantedInPackageInfo(Manifest.permission.INTERNET), is(true));
    }

    private static boolean isPermissionGrantedInPackageInfo(String permissionName)
            throws Exception {
        final Context context = InstrumentationRegistry.getContext();
        final PackageInfo packageInfo = context.getPackageManager().getPackageInfo(
                context.getPackageName(), PackageManager.GET_PERMISSIONS);
        final int permissionIndex = Arrays.asList(packageInfo.requestedPermissions).indexOf(
                permissionName);
        assertThat(permissionIndex, is(not(-1)));
        return (packageInfo.requestedPermissionsFlags[permissionIndex]
                & PackageInfo.REQUESTED_PERMISSION_GRANTED) != 0;
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/EphemeralApp1/src/com/android/cts/ephemeralapp1/ClientTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.ephemeralapp1.ClientTest"	"testReadPhoneNumbersPermission"	""	"1: granted"	"([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[granted]:[1]:method_text:[    } catch (SecurityException e) {            fail(""Permission not granted"");        }    }   ]) :|: 
    public void testReadPhoneNumbersPermission() throws Throwable {
        final Context context = InstrumentationRegistry.getContext();
        if (!context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_TELEPHONY)) {
            return;
        }

        try {
            final TelephonyManager telephonyManager =
                    (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
            final String nmbr = telephonyManager.getLine1Number();
        } catch (SecurityException e) {
            fail(""Permission not granted"");
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/EphemeralApp1/src/com/android/cts/ephemeralapp1/ClientTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.ephemeralapp1.ClientTest"	"testAccessCoarseLocationPermission"	""	"1: granted"	"([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[granted]:[1]:method_text:[   } catch (SecurityException e) {            fail(""Permission not granted."");        }    }   ]) :|: 
    public void testAccessCoarseLocationPermission() {
        final Context context = InstrumentationRegistry.getContext();

        final LocationManager locationManager =
                (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);

        final Criteria criteria = new Criteria();
        criteria.setAccuracy(Criteria.ACCURACY_COARSE);
        final String bestProvider = locationManager.getBestProvider(criteria, false);
        try {
            final String provider =
                    bestProvider == null ? LocationManager.NETWORK_PROVIDER : bestProvider;
            locationManager.getLastKnownLocation(provider);
        } catch (SecurityException e) {
            fail(""Permission not granted."");
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/EphemeralApp1/src/com/android/cts/ephemeralapp1/ClientTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest"	"testPackageVisibility_currentUser"	""	"1: granted"	"([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[granted]:[1]:method_text:[}    /** Tests getting installed packages for all users, with cross user permission granted */   ]) :|: 
    public void testPackageVisibility_currentUser() throws Exception {
        final PackageManager pm = mContext.getPackageManager();
        final List<PackageInfo> packageList =
                pm.getInstalledPackagesAsUser(0, mContext.getUserId());
        assertFalse(isAppInPackageList(TINY_PKG, packageList));
    }

    /** Tests getting installed packages for all users, with cross user permission granted */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ApplicationVisibilityCrossUserApp/src/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest"	"testPackageVisibility_anyUserCrossUserNoGrant"	""	"1: granted"	"([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[granted]:[1]:method_text:[    /** Tests getting installed packages for another user, with cross user permission granted */   ]) :|: 
    public void testPackageVisibility_anyUserCrossUserNoGrant() throws Exception {
        final PackageManager pm = mContext.getPackageManager();
        try {
            ungrantAcrossUsersPermission();
            final List<PackageInfo> packageList =
                    pm.getInstalledPackagesAsUser(MATCH_KNOWN_PACKAGES, mContext.getUserId());
            fail(""Should have received a security exception"");
        } catch (SecurityException ignore) {}
    }

    /** Tests getting installed packages for another user, with cross user permission granted */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ApplicationVisibilityCrossUserApp/src/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest"	"testApplicationVisibility_currentUser"	""	"1: granted"	"([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[granted]:[1]:method_text:[   /** Tests getting installed applications for all users, with cross user permission granted */   ]) :|: 
    public void testApplicationVisibility_currentUser() throws Exception {
        final PackageManager pm = mContext.getPackageManager();
        final List<ApplicationInfo> applicationList =
                pm.getInstalledApplicationsAsUser(0, mContext.getUserId());
        assertFalse(isAppInApplicationList(TINY_PKG, applicationList));
    }

    /** Tests getting installed applications for all users, with cross user permission granted */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ApplicationVisibilityCrossUserApp/src/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest"	"testApplicationVisibility_anyUserCrossUserNoGrant"	""	"1: granted"	"([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[granted]:[1]:method_text:[/** Tests getting installed applications for another user, with cross user permission granted */   ]) :|: 
    public void testApplicationVisibility_anyUserCrossUserNoGrant() throws Exception {
        final PackageManager pm = mContext.getPackageManager();
        try {
            ungrantAcrossUsersPermission();
            final List<ApplicationInfo> applicationList =
                    pm.getInstalledApplicationsAsUser(MATCH_KNOWN_PACKAGES, mContext.getUserId());
            fail(""Should have received a security exception"");
        } catch (SecurityException ignore) {}
    }

    /** Tests getting installed applications for another user, with cross user permission granted */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ApplicationVisibilityCrossUserApp/src/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest"	"testGetPackagesForUidVisibility_currentUser"	""	"1: granted"	"([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[granted]:[1]:method_text:[    /** Tests getting installed packages for primary user, with cross user permission granted */   ]) :|: 
    public void testGetPackagesForUidVisibility_currentUser() throws Exception {
        final PackageManager pm = mContext.getPackageManager();
        final int userId = mContext.getUserId();
        final int firstAppUid = UserHandle.getUid(userId, Process.FIRST_APPLICATION_UID);
        final int lastAppUid = UserHandle.getUid(userId, Process.LAST_APPLICATION_UID);
        boolean found = false;
        for (int appUid = firstAppUid; appUid < lastAppUid; appUid++) {
            found = isAppInPackageNamesArray(TINY_PKG, pm.getPackagesForUid(appUid));
            if (found) break;
        }
        assertFalse(found);
    }

    /** Tests getting installed packages for primary user, with cross user permission granted */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ApplicationVisibilityCrossUserApp/src/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.locationpolicy.LocationPolicyTest"	"testLocationPolicyPermissions"	""	"2: granted ACCESS_COARSE_LOCATION"	"([2:/android/appsecurity/cts/locationpolicy/LocationPolicyTest.java]:[ACCESS_COARSE_LOCATION]:[2]:method_text:[h (SecurityException ignore) {              // That's what we want!            }        }    }}]) :|: 
    @AsbSecurityTest(cveBugId = 148414207)
    public void testLocationPolicyPermissions() throws Exception {
        assertNotNull(mContext);
        PackageManager pm = mContext.getPackageManager();
        assertNotNull(pm);
        assertNotEquals(
            PackageManager.PERMISSION_GRANTED,
            pm.checkPermission(Manifest.permission.ACCESS_FINE_LOCATION,
            mContext.getPackageName()));
        assertNotEquals(
            PackageManager.PERMISSION_GRANTED,
            pm.checkPermission(Manifest.permission.ACCESS_COARSE_LOCATION,
            mContext.getPackageName()));
        UserManager manager = mContext.getSystemService(UserManager.class);
        if (manager.isSystemUser()) {
            return;
        }
        if (pm.hasSystemFeature(PackageManager.FEATURE_TELEPHONY)) {
            TelephonyManager tele = mContext.getSystemService(TelephonyManager.class);
            try {
                tele.getCellLocation();
            fail(
                ""ACCESS_FINE_LOCATION and ACCESS_COARSE_LOCATION Permissions not granted. Should""
                  + "" have received a security exception when invoking getCellLocation()."");
            } catch (SecurityException ignore) {
              // That's what we want!
            }
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/LocationPolicyApp/src/android/appsecurity/cts/locationpolicy/LocationPolicyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.documentclient.DocumentsClientTest"	"testAfterMoveDocumentInStorage_revokeUriPermission"	""	"1: granted"	"([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[granted]:[1]:method_text:[NATION_DIRECTORY_PATH);        executeShellCommand(""rm -rf "" + TEST_SOURCE_DIRECTORY_PATH);    }}]) :|: public void testAfterMoveDocumentInStorage_revokeUriPermission() throws Exception {
        if (!supportedHardware()) return;

        final Context context = getInstrumentation().getContext();
        final Uri initUri = DocumentsContract.buildDocumentUri(STORAGE_AUTHORITY,
                ""primary:"" + Environment.DIRECTORY_DOWNLOADS);

        // create the source directory
        final Uri sourceUri = assertCreateDocumentSuccess(initUri, TEST_SOURCE_DIRECTORY_NAME,
                Document.MIME_TYPE_DIR);

        // create the target directory
        final Uri targetUri = assertCreateDocumentSuccess(sourceUri, TEST_TARGET_DIRECTORY_NAME,
                Document.MIME_TYPE_DIR);
        final int permissionFlag = FLAG_GRANT_READ_URI_PERMISSION | FLAG_GRANT_WRITE_URI_PERMISSION;

        // check permission for the target uri
        assertEquals(PackageManager.PERMISSION_GRANTED,
                context.checkCallingOrSelfUriPermission(targetUri, permissionFlag));

        // create the destination directory
        final Uri destinationUri = assertCreateDocumentSuccess(initUri,
                TEST_DESTINATION_DIRECTORY_NAME, Document.MIME_TYPE_DIR);

        final ContentResolver resolver = context.getContentResolver();
        final Uri movedFileUri = DocumentsContract.moveDocument(resolver, targetUri, sourceUri,
                destinationUri);
        assertTrue(movedFileUri != null);

        // after moving the document,  the permission of targetUri is revoked
        assertEquals(PackageManager.PERMISSION_DENIED,
                context.checkCallingOrSelfUriPermission(targetUri, permissionFlag));

        // create the target directory again, it still has no permission for targetUri
        executeShellCommand(""mkdir "" + TEST_TARGET_DIRECTORY_PATH);

        assertEquals(PackageManager.PERMISSION_DENIED,
                context.checkCallingOrSelfUriPermission(targetUri, permissionFlag));
    }

    private Uri assertCreateDocumentSuccess(@Nullable Uri in"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/DocumentClient/src/com/android/cts/documentclient/DocumentsClientTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.mediastorageapp.MediaStorageTest"	"testMediaEscalation_RequestDelete_notShowConfirmDialog"	""	"1: granted"	"([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[granted]:[1]:method_text:[ure(String feature) {        return mContext.getPackageManager().hasSystemFeature(feature);    }}]) :|: 
    public void testMediaEscalation_RequestDelete_notShowConfirmDialog() throws Exception {
        doMediaEscalation_RequestDelete(true /* allowAccess */,
                true /* shouldCheckDialogShownValue */, false /* isDialogShownExpected */);
    }

    private void doMediaEscalation_RequestDelete(boolean allowAccess,
            boolean shouldCheckDialogShownValue, boolean isDialogShownExpected) throws Exception {
        doMediaEscalation_RequestDelete(MediaStorageTest::createAudio, allowAccess,
                shouldCheckDialogShownValue, isDialogShownExpected);
        doMediaEscalation_RequestDelete(MediaStorageTest::createVideo, allowAccess,
                shouldCheckDialogShownValue, isDialogShownExpected);
        doMediaEscalation_RequestDelete(MediaStorageTest::createImage, allowAccess,
                shouldCheckDialogShownValue, isDialogShownExpected);
        doMediaEscalation_RequestDelete(MediaStorageTest::createPlaylist, allowAccess,
                shouldCheckDialogShownValue, isDialogShownExpected);
        doMediaEscalation_RequestDelete(MediaStorageTest::createSubtitle, allowAccess,
                shouldCheckDialogShownValue, isDialogShownExpected);
    }

    private void doMediaEscalation_RequestDelete(Callable<Uri> create, boolean allowAccess,
            boolean shouldCheckDialogShownValue, boolean isDialogShownExpected) throws Exception {
        final Uri red = create.call();
        clearMediaOwner(red, mUserId);

        try (Cursor c = mContentResolver.query(red, null, null, null)) {
            assertEquals(1, c.getCount());
        }

        if (allowAccess) {
            doEscalation(MediaStore.createDeleteRequest(mContentResolver, Arrays.asList(red)),
                    true /* allowAccess */, shouldCheckDialogShownValue, isDialogShownExpected);
            try (Cursor c = mContentResolver.query(red, null, null, null)) {
                assertEquals(0, c.getCount());
            }
        } else {
            doEscalation(M"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/MediaStorageApp/src/com/android/cts/mediastorageapp/MediaStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.splitapp.SplitAppTest"	"testInheritUpdatedBase_withRevisionA"	""	"1: granted"	"([2:/com/android/cts/splitapp/SplitAppTest.java]:[granted]:[2]:method_text:[  getContext().enforceCallingOrSelfPermission(android.Manifest.permission.VIBRATE, null);    }   ]) :|: 
    public void testInheritUpdatedBase_withRevisionA() throws Exception {
        final Resources r = getContext().getResources();
        final PackageManager pm = getContext().getPackageManager();

        // Resources should have been updated
        assertEquals(true, r.getBoolean(R.bool.my_receiver_enabled));

        assertEquals(""blue-revision"", r.getString(R.string.my_string1));
        assertEquals(""purple-revision"", r.getString(R.string.my_string2));

        assertEquals(0xff00ffff, r.getColor(R.color.my_color));
        assertEquals(456, r.getInteger(R.integer.my_integer));

        // Also, new resources could be found
        assertEquals(""new string"", r.getString(r.getIdentifier(
                ""my_new_string"", ""string"", PKG)));

        assertAssetContents(r, ""fileA.txt"", ""FILEA"");
        assertAssetContents(r, ""dir/dirfileA.txt"", ""DIRFILEA"");

        // Activity of ACTION_MAIN should have been updated to .revision_a.MyActivity
        Intent intent = new Intent(Intent.ACTION_MAIN);
        intent.addCategory(Intent.CATEGORY_LAUNCHER);
        intent.setPackage(PKG);
        final List<String> activityNames = pm.queryIntentActivities(intent, 0).stream()
                .map(info -> info.activityInfo.name).collect(Collectors.toList());
        assertThat(activityNames).contains(""com.android.cts.splitapp.revision_a.MyActivity"");

        // Receiver of DATE_CHANGED should have been updated to .revision_a.MyReceiver
        intent = new Intent(Intent.ACTION_DATE_CHANGED);
        intent.setPackage(PKG);
        final List<String> receiverNames = pm.queryBroadcastReceivers(intent, 0).stream()
                .map(info -> info.activityInfo.name).collect(Collectors.toList());
        assertThat(receiverNames).contains(""com.android.cts.splitapp.revision_a.MyReceiver"");

        // Provider should have been updated to .revision_a.MyProvider
        final ProviderInfo info = pm.resolveContentProvider(""com.android.cts.splitapp"", 0);
        assertEquals(""c"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/SplitApp/src/com/android/cts/splitapp/SplitAppTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.v3rotationtests.V3RotationTest"	"testHasPerm"	""	"1: granted"	"([2:/android/appsecurity/cts/v3rotationtests/V3RotationTest.java]:[granted]:[2]:method_text:[SSION_NAME, COMPANION_PKG)                        == PackageManager.PERMISSION_GRANTED);    }   ]) :|: public void testHasPerm() throws Exception {
        PackageManager pm = getContext().getPackageManager();
        assertTrue(PERMISSION_NAME + "" not granted to "" + COMPANION_PKG,
                pm.checkPermission(PERMISSION_NAME, COMPANION_PKG)
                        == PackageManager.PERMISSION_GRANTED);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/V3SigningSchemeRotation/src/android/appsecurity/cts/v3rotationtests/V3RotationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.v3rotationtests.V3RotationTest"	"testHasNoPerm"	""	"1: granted"	"([2:/android/appsecurity/cts/v3rotationtests/V3RotationTest.java]:[granted]:[2]:method_text:[SSION_NAME, COMPANION_PKG)                        == PackageManager.PERMISSION_GRANTED);    }   ]) :|: public void testHasNoPerm() throws Exception {
        PackageManager pm = getContext().getPackageManager();
        assertFalse(PERMISSION_NAME + "" granted to "" + COMPANION_PKG,
                pm.checkPermission(PERMISSION_NAME, COMPANION_PKG)
                        == PackageManager.PERMISSION_GRANTED);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/V3SigningSchemeRotation/src/android/appsecurity/cts/v3rotationtests/V3RotationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.DirectBootHostTest"	"testDirectBootNone"	"CtsAppSecurityHostTestCases"	"1: admin"	"([2:/android/appsecurity/cts/DirectBootHostTest.java]:[admin]:[2]:method_text:[super(getDevice(), getBuild(), getAbi());            addArg(""--force-queryable"");        }    }}]) :|: 
    public void testDirectBootNone() throws Exception {
        assumeSupportedDevice();
        assumeFalse(""Device has native FBE; skipping test"",
                MODE_NATIVE.equals(getFbeMode()));
        doDirectBootTest(MODE_NONE);
    }

    public void doDirectBootTest(String mode) throws Exception {
        boolean doTest = true;
        try {
            // Set up test app and secure lock screens
            new InstallMultiple().addFile(APK).run();
            new InstallMultiple().addFile(OTHER_APK).run();

            // To receive boot broadcasts, kick our other app out of stopped state
            getDevice().executeShellCommand(""am start -a android.intent.action.MAIN""
                    + "" --user current""
                    + "" -c android.intent.category.LAUNCHER com.android.cts.splitapp/.MyActivity"");

            // Give enough time for PackageManager to persist stopped state
            Thread.sleep(15000);

            runDeviceTestsAsCurrentUser(PKG, CLASS, ""testSetUp"");

            // Give enough time for vold to update keys
            Thread.sleep(15000);

            // Reboot system into known state with keys ejected
            if (MODE_EMULATED.equals(mode)) {
                final String res = getDevice().executeShellCommand(""sm set-emulate-fbe true"");
                if (res != null && res.contains(""Emulation not supported"")) {
                    doTest = false;
                }
                getDevice().waitForDeviceNotAvailable(SHUTDOWN_TIME_MS);
                getDevice().waitForDeviceOnline(120000);
            } else {
                getDevice().rebootUntilOnline();
            }
            waitForBootCompleted(getDevice());

            if (doTest) {
                if (MODE_NONE.equals(mode)) {
                    runDeviceTestsAsCurrentUser(PKG, CLASS, ""testVerifyUnlockedAndDismiss"");
                } else {
                    runDeviceTestsAsCurrentUser(PKG, CLASS, ""testVerifyLockedAndDismiss"");
                }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DirectBootHostTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.DeviceIdentifierTest"	"testDeviceIdentifierAccessWithAppOpGranted"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/DeviceIdentifierTest.java]:[granted]:[1]:method_text:[         ""Output for command "" + command + "": "" + getDevice().executeShellCommand(command));    }}]) :|: public void testDeviceIdentifierAccessWithAppOpGranted() throws Exception {
        setDeviceIdentifierAccessAppOp(DEVICE_IDENTIFIER_PKG, true);
        Utils.runDeviceTestsAsCurrentUser(getDevice(), DEVICE_IDENTIFIER_PKG,
                DEVICE_IDENTIFIER_CLASS,
                DEVICE_IDENTIFIER_TEST_METHOD);
    }

    private void setDeviceIdentifierAccessAppOp(String packageName, boolean allowed)
            throws DeviceNotAvailableException {
        String command =
                ""appops set --user "" + getDevice().getCurrentUser() + "" "" + packageName + "" ""
                        + ""READ_DEVICE_IDENTIFIERS "" + (allowed ? ""allow"" : ""deny"");
        LogUtil.CLog.d(
                ""Output for command "" + command + "": "" + getDevice().executeShellCommand(command));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DeviceIdentifierTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.KeySetHostTest"	"testUpgradeKSWithMultipleUpgradeKeySetsFirstKey"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/KeySetHostTest.java]:[granted]:[1]:method_text:[sion after changing to a new     * signature, for which a permission should be granted.     */   ]) :|: public void testUpgradeKSWithMultipleUpgradeKeySetsFirstKey() throws Exception {
        String installResult = testPackageUpgrade(KEYSET_PKG, A_SIGNED_A_OR_B_UPGRADE,
                A_SIGNED_A_UPGRADE);
        assertNull(String.format(""failed to upgrade keyset app from one signed by key-a""
                + ""to one signed by first upgrade keyset key-a, Reason: %s"", installResult),
                installResult);
        installResult = testPackageUpgrade(KEYSET_PKG, A_SIGNED_A_OR_B_UPGRADE,
                B_SIGNED_B_UPGRADE);
        assertNull(String.format(""failed to upgrade keyset app from one signed by key-a""
                + ""to one signed by second upgrade keyset key-b, Reason: %s"", installResult),
                installResult);
    }

    /**
     * Helper method which installs a package defining a permission and a package
     * using the permission, and then rotates the signing keys for one of them.
     * A device-side test is then used to ascertain whether or not the permission
     * was appropriately gained or lost.
     *
     * @param permDefApk - apk to install which defines the sig-permissoin
     * @param permUseApk - apk to install which declares it uses the permission
     * @param upgradeApk - apk to install which upgrades one of the first two
     * @param hasPermBeforeUpgrade - whether we expect the consuming app to have
     *        the permission before the upgrade takes place.
     * @param hasPermAfterUpgrade - whether we expect the consuming app to have
     *        the permission after the upgrade takes place.
     */
    private void testKeyRotationPerm(String permDefApk, String permUseApk,
            String upgradeApk, boolean hasPermBeforeUpgrade,
            boolean hasPermAfterUpgrade) throws Exception {
        try {

            /* cleanup test apps that might be installed from previous partial test run */
            mDevice.uninstallPackage(KEYSET_PKG);
            mDevice.uninstallPackage(KEYSET_PERM_DEF_PKG);"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/KeySetHostTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.KeySetHostTest"	"testUpgradeSigPermGained"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/KeySetHostTest.java]:[granted]:[1]:method_text:[nging to a new     * signature, from one for which a permission was previously granted.     */   ]) :|: public void testUpgradeSigPermGained() throws Exception {
        testKeyRotationPerm(PERM_DEF_A_SIGNED, PERM_USE_B_SIGNED, PERM_USE_A_SIGNED,
                false, true);
    }

    /*
     * Check if an apk loses signature-level permission after changing to a new
     * signature, from one for which a permission was previously granted.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/KeySetHostTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PermissionEscalationTest"	"testNoPermissionEscalationAfterReboot"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/PermissionEscalationTest.java]:[granted]:[1]:method_text:[ Utils.runDeviceTestsAsCurrentUser(getDevice(), packageName, testClassName, testMethodName);    }}]) :|: public void testNoPermissionEscalationAfterReboot() throws Exception {
        assertNull(getDevice().installPackage(mBuildHelper.getTestFile(
                APK_DECLARE_NON_RUNTIME_PERMISSIONS), false, false));
        assertNull(getDevice().installPackage(mBuildHelper.getTestFile(
                APK_ESCLATE_TO_RUNTIME_PERMISSIONS), true, false));
        getDevice().reboot();
        runDeviceTests(ESCALATE_PERMISSION_PKG,
                ""com.android.cts.escalatepermission.PermissionEscalationTest"",
                ""testRuntimePermissionsAreNotGranted"");
    }

    private void runDeviceTests(String packageName, String testClassName, String testMethodName)
            throws DeviceNotAvailableException {
        Utils.runDeviceTestsAsCurrentUser(getDevice(), packageName, testClassName, testMethodName);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PermissionEscalationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.ApkVerityInstallTest"	"isIncrementalDeliveryV2Feature"	"CtsAppSecurityHostTestCases"	"2: silent silent silently silently"	"([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[silently]:[1]:method_text:[();        install.run(expectingSuccess);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ]) :|: 
    @Parameters(method = ""installAndUpdate"")
    public void testInstallSplitOnlyMissingSignature(boolean installIncremental,
            boolean updateIncremental, boolean isSupported) throws Exception {
        assumePreconditions(installIncremental || updateIncremental);
        new InstallMultiple(installIncremental)
                .addFile(BASE_APK)
                .addFile(BASE_APK + FSV_SIG_SUFFIX)
                .run();
        verifyFsverityInstall(installIncremental, BASE_APK);

        InstallMultiple install = new InstallMultiple(updateIncremental)
                .inheritFrom(PACKAGE_NAME)
                .addFile(SPLIT_APK);

        // S with IncFsV1 silently skips fs-verity signatures.
        boolean expectingSuccess =
                isSupported && installIncremental && !isIncrementalDeliveryV2Feature();
        install.run(expectingSuccess);
    }

    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApkVerityInstallTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.EphemeralTest"	"testInstallPermissionNotGranted"	"CtsAppSecurityHostTestCases"	"1: granted"	"([2:/android/appsecurity/cts/EphemeralTest.java]:[granted]:[2]:method_text:[evice(), EPHEMERAL_1_PKG, TEST_CLASS,                ""testInstallPermissionNotGranted"");    }   ]) :|: 
    public void testInstallPermissionNotGranted() throws Exception {
        if (mIsUnsupportedDevice) {
            return;
        }
        Utils.runDeviceTestsAsCurrentUser(getDevice(), EPHEMERAL_1_PKG, TEST_CLASS,
                ""testInstallPermissionNotGranted"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.EphemeralTest"	"testInstallPermissionGranted"	"CtsAppSecurityHostTestCases"	"1: granted"	"([2:/android/appsecurity/cts/EphemeralTest.java]:[granted]:[2]:method_text:[etDevice(), EPHEMERAL_1_PKG, TEST_CLASS,                ""testInstallPermissionGranted"");    }   ]) :|: 
    public void testInstallPermissionGranted() throws Exception {
        if (mIsUnsupportedDevice) {
            return;
        }
        Utils.runDeviceTestsAsCurrentUser(getDevice(), EPHEMERAL_1_PKG, TEST_CLASS,
                ""testInstallPermissionGranted"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.EphemeralTest"	"testInstallPermissionNotGrantedInPackageInfo"	"CtsAppSecurityHostTestCases"	"1: granted"	"([2:/android/appsecurity/cts/EphemeralTest.java]:[granted]:[2]:method_text:[MERAL_1_PKG, TEST_CLASS,                ""testInstallPermissionNotGrantedInPackageInfo"");    }   ]) :|: 
    @AsbSecurityTest(cveBugId = 140256621)
    public void testInstallPermissionNotGrantedInPackageInfo() throws Exception {
        if (mIsUnsupportedDevice) {
            return;
        }
        Utils.runDeviceTestsAsCurrentUser(getDevice(), EPHEMERAL_1_PKG, TEST_CLASS,
                ""testInstallPermissionNotGrantedInPackageInfo"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.EphemeralTest"	"testInstallPermissionGrantedInPackageInfo"	"CtsAppSecurityHostTestCases"	"1: granted"	"([2:/android/appsecurity/cts/EphemeralTest.java]:[granted]:[2]:method_text:[tedInPackageInfo"");    }    /** Test for android.permission.INSTANT_APP_FOREGROUND_SERVICE */   ]) :|: 
    @AsbSecurityTest(cveBugId = 140256621)
    public void testInstallPermissionGrantedInPackageInfo() throws Exception {
        if (mIsUnsupportedDevice) {
            return;
        }
        Utils.runDeviceTestsAsCurrentUser(getDevice(), EPHEMERAL_1_PKG, TEST_CLASS,
                ""testInstallPermissionGrantedInPackageInfo"");
    }

    /** Test for android.permission.INSTANT_APP_FOREGROUND_SERVICE */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.EphemeralTest"	"testStartForegroundService"	"CtsAppSecurityHostTestCases"	"1: RECORD_AUDIO"	"([1:/android/appsecurity/cts/EphemeralTest.java]:[RECORD_AUDIO]:[1]:method_text:[       ""testStartForegroundService"");    }    /** Test for android.permission.RECORD_AUDIO */   ]) :|: 
    public void testStartForegroundService() throws Exception {
        if (mIsUnsupportedDevice) {
            return;
        }
        // Make sure the test package does not have INSTANT_APP_FOREGROUND_SERVICE
        getDevice().executeShellCommand(""cmd package revoke "" + EPHEMERAL_1_PKG
                + "" android.permission.INSTANT_APP_FOREGROUND_SERVICE"");
        Utils.runDeviceTestsAsCurrentUser(getDevice(), EPHEMERAL_1_PKG, TEST_CLASS,
                ""testStartForegroundService"");
    }

    /** Test for android.permission.RECORD_AUDIO */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.EphemeralTest"	"testReadPhoneNumbersPermission"	"CtsAppSecurityHostTestCases"	"1: ACCESS_COARSE_LOCATION"	"([1:/android/appsecurity/cts/EphemeralTest.java]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[adPhoneNumbersPermission"");    }    /** Test for android.permission.ACCESS_COARSE_LOCATION */   ]) :|: 
    public void testReadPhoneNumbersPermission() throws Exception {
        if (mIsUnsupportedDevice) {
            return;
        }
        Utils.runDeviceTestsAsCurrentUser(getDevice(), EPHEMERAL_1_PKG, TEST_CLASS,
                ""testReadPhoneNumbersPermission"");
    }

    /** Test for android.permission.ACCESS_COARSE_LOCATION */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testInstallV3KeyRotationToAncestorWithRollback"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[1]:method_text:[ull-and-roll-caps.apk"");        assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-1.apk"");    }   ]) :|: public void testInstallV3KeyRotationToAncestorWithRollback() throws Exception {
        // tests that a v3 signed APK with RSA key can be upgraded by one of its past certs if it
        // has granted that cert the rollback capability
        assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-2-with-por_1_2-full-and-roll-caps.apk"");
        assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-1.apk"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testInstallV3KeyRotationSharedUidNoCap"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[1]:method_text:[         ""v3-rsa-pkcs1-sha256-2048-2-with-por_1_2-no-shUid-cap-sharedUid-companion.apk"");    }   ]) :|: public void testInstallV3KeyRotationSharedUidNoCap() throws Exception {
        // tests that a v3 signed sharedUid APK cannot be sharedUid with apps with its older
        // signing certificate, when it has not granted that certificate the sharedUid capability
        assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-1-sharedUid.apk"");
        assertInstallFails(
                ""v3-rsa-pkcs1-sha256-2048-2-with-por_1_2-no-shUid-cap-sharedUid-companion.apk"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testInstallV3KeyRotationOlderSharedUidNoCap"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[1]:method_text:[-companion.apk"");        assertInstallFails(""v3-rsa-pkcs1-sha256-2048-1-sharedUid.apk"");    }   ]) :|: public void testInstallV3KeyRotationOlderSharedUidNoCap() throws Exception {
        // tests that a sharedUid APK signed with an old certificate cannot install with
        // an app having a proof-of-rotation structure that hasn't granted the older
        // certificate the sharedUid capability
        assertInstallSucceeds(
                ""v3-rsa-pkcs1-sha256-2048-2-with-por_1_2-no-shUid-cap-sharedUid-companion.apk"");
        assertInstallFails(""v3-rsa-pkcs1-sha256-2048-1-sharedUid.apk"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testInstallV3NoRotationSharedUid"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[1]:method_text:[mpanion.apk"");        assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-2-sharedUid.apk"");    }   ]) :|: public void testInstallV3NoRotationSharedUid() throws Exception {
        // tests that a sharedUid APK signed with a new certificate installs with
        // an app having a proof-of-rotation structure that hasn't granted an older
        // certificate the sharedUid capability
        assertInstallSucceeds(
                ""v3-rsa-pkcs1-sha256-2048-2-with-por_1_2-no-shUid-cap-sharedUid-companion.apk"");
        assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-2-sharedUid.apk"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testInstallV3NoRotationSigPerm"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[1]:method_text:[  Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasPerm"");    }   ]) :|: public void testInstallV3NoRotationSigPerm() throws Exception {
        // make sure that an APK, which wants to use a signature permission defined by an APK, which
        // has not granted that capability to older signing certificates, can still install
        assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-2-with-por_1_2-no-perm-cap-permdef.apk"");
        assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-2-permcli-companion.apk"");
        Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasPerm"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testInstallV3CommonSignerInLineageWithPermCap"	"CtsAppSecurityHostTestCases"	"1: granted"	"([2:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[2]:method_text:[  Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasPerm"");    }   ]) :|: public void testInstallV3CommonSignerInLineageWithPermCap() throws Exception {
        // If an APK requesting a signature permission has a common signer in the lineage with the
        // APK declaring the permission, and that signer is granted the permission capability in
        // the declaring APK, then the permission should be granted to the requesting app even
        // if their signers have diverged.
        assertInstallFromBuildSucceeds(
                ""v3-ec-p256-with-por_1_2_3-1-no-caps-2-default-declperm.apk"");
        assertInstallFromBuildSucceeds(""v3-ec-p256-with-por_1_2_4-companion-usesperm.apk"");
        Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasPerm"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testInstallV3CommonSignerInLineageNoCaps"	"CtsAppSecurityHostTestCases"	"1: granted"	"([2:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[2]:method_text:[Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasNoPerm"");    }   ]) :|: public void testInstallV3CommonSignerInLineageNoCaps() throws Exception {
        // If an APK requesting a signature permission has a common signer in the lineage with the
        // APK declaring the permission, but the signer in the lineage has not been granted the
        // permission capability the permission should not be granted to the requesting app.
        assertInstallFromBuildSucceeds(""v3-ec-p256-with-por_1_2_3-no-caps-declperm.apk"");
        assertInstallFromBuildSucceeds(""v3-ec-p256-with-por_1_2_4-companion-usesperm.apk"");
        Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasNoPerm"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testKnownSignerPermGrantedWhenCurrentSignerInResource"	"CtsAppSecurityHostTestCases"	"1: granted"	"([3:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[3]:method_text:[Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasNoPerm"");    }   ]) :|: public void testKnownSignerPermGrantedWhenCurrentSignerInResource() throws Exception {
        // The knownSigner protection flag allows an app to declare other trusted signing
        // certificates in an array resource; if a requesting app's current signer is in this array
        // of trusted certificates then the permission should be granted.
        assertInstallFromBuildSucceeds(""v3-rsa-2048-decl-knownSigner-ec-p256-1-3.apk"");
        assertInstallFromBuildSucceeds(""v3-ec-p256_3-companion-uses-knownSigner.apk"");
        Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasPerm"");

        // If the declaring app changes the trusted certificates on an update any requesting app
        // that no longer meets the requirements based on its signing identity should have the
        // permission revoked. This app update only trusts ec-p256_1 but the app that was previously
        // granted the permission based on its signing identity is signed by ec-p256_3.
        assertInstallFromBuildSucceeds(""v3-rsa-2048-decl-knownSigner-str-res-ec-p256-1.apk"");
        Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasNoPerm"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testKnownSignerPermCurrentSignerNotInResource"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[1]:method_text:[Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasNoPerm"");    }   ]) :|: public void testKnownSignerPermCurrentSignerNotInResource() throws Exception {
        // If an app requesting a knownSigner permission does not meet the requirements for a
        // signature permission and is not signed by any of the trusted certificates then the
        // permission should not be granted.
        assertInstallFromBuildSucceeds(""v3-rsa-2048-decl-knownSigner-ec-p256-1-3.apk"");
        assertInstallFromBuildSucceeds(""v3-ec-p256_2-companion-uses-knownSigner.apk"");
        Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasNoPerm"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testKnownSignerPermGrantedWhenSignerInLineageInResource"	"CtsAppSecurityHostTestCases"	"1: granted"	"([3:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[3]:method_text:[Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasNoPerm"");    }   ]) :|: public void testKnownSignerPermGrantedWhenSignerInLineageInResource() throws Exception {
        // If an app requesting a knownSigner permission was previously signed by a certificate
        // that is trusted by the declaring app then the permission should be granted.
        assertInstallFromBuildSucceeds(""v3-rsa-2048-decl-knownSigner-ec-p256-1-3.apk"");
        assertInstallFromBuildSucceeds(""v3-ec-p256-with-por_1_2-companion-uses-knownSigner.apk"");
        Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasPerm"");

        // If the declaring app changes the permission to no longer use the knownSigner flag then
        // any app granted the permission based on a signing identity from the set of trusted
        // certificates should have the permission revoked.
        assertInstallFromBuildSucceeds(""v3-rsa-2048-declperm.apk"");
        Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasNoPerm"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testKnownSignerPermSignerInLineageMatchesStringResource"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[1]:method_text:[  Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasPerm"");    }   ]) :|: public void testKnownSignerPermSignerInLineageMatchesStringResource() throws Exception {
        // The knownSigner protection flag allows an app to declare a single known trusted
        // certificate digest using a string resource instead of a string-array resource. This test
        // verifies the knownSigner permission is granted to a requesting app if the single trusted
        // cert is in the requesting app's lineage.
        assertInstallFromBuildSucceeds(""v3-rsa-2048-decl-knownSigner-str-res-ec-p256-1.apk"");
        assertInstallFromBuildSucceeds(""v3-ec-p256-with-por_1_2-companion-uses-knownSigner.apk"");
        Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasPerm"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testKnownSignerPermSignerInLineageMatchesStringConst"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[1]:method_text:[  Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasPerm"");    }   ]) :|: public void testKnownSignerPermSignerInLineageMatchesStringConst() throws Exception {
        // The knownSigner protection flag allows an app to declare a single known trusted
        // certificate digest using a string constant as the knownCerts attribute value instead of a
        // resource. This test verifies the knownSigner permission is granted to a requesting app if
        // the single trusted cert is in the requesting app's lineage.
        assertInstallFromBuildSucceeds(""v3-rsa-2048-decl-knownSigner-str-const-ec-p256-1.apk"");
        assertInstallFromBuildSucceeds(""v3-ec-p256-with-por_1_2-companion-uses-knownSigner.apk"");
        Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasPerm"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testInstallV3SigPermDoubleDefNewerSucceeds"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[1]:method_text:[  assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-2-with_por_1_2-permdef-companion.apk"");    }   ]) :|: public void testInstallV3SigPermDoubleDefNewerSucceeds() throws Exception {
        // make sure that if an app defines a signature permission already defined by another app,
        // it successfully installs if the other app's signing cert is in its past signing certs and
        // the signature permission capability is granted
        assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-1-permdef.apk"");
        assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-2-with_por_1_2-permdef-companion.apk"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testInstallV3SigPermDoubleDefOlderSucceeds"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[1]:method_text:[companion.apk"");        assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-1-permdef.apk"");    }   ]) :|: public void testInstallV3SigPermDoubleDefOlderSucceeds() throws Exception {
        // make sure that if an app defines a signature permission already defined by another app,
        // it successfully installs if it is in the other app's past signing certs and the signature
        // permission capability is granted
        assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-2-with_por_1_2-permdef-companion.apk"");
        assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-1-permdef.apk"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testInstallV3SigPermDoubleDefNewerNoCapFails"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[1]:method_text:[            ""v3-rsa-pkcs1-sha256-2048-2-with_por_1_2-no-perm-cap-permdef-companion.apk"");    }   ]) :|: public void testInstallV3SigPermDoubleDefNewerNoCapFails() throws Exception {
        // make sure that if an app defines a signature permission already defined by another app,
        // it fails to install if the other app's signing cert is in its past signing certs but the
        // signature permission capability is not granted
        assertInstallSucceeds(""v3-rsa-pkcs1-sha256-2048-1-permdef.apk"");
        assertInstallFails(
                ""v3-rsa-pkcs1-sha256-2048-2-with_por_1_2-no-perm-cap-permdef-companion.apk"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.PkgInstallSignatureVerificationTest"	"testInstallV3SigPermDoubleDefOlderNoCapFails"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[granted]:[1]:method_text:[ef-companion.apk"");        assertInstallFails(""v3-rsa-pkcs1-sha256-2048-1-permdef.apk"");    }   ]) :|: public void testInstallV3SigPermDoubleDefOlderNoCapFails() throws Exception {
        // make sure that if an app defines a signature permission already defined by another app,
        // it fails to install if it is in the other app's past signing certs but the signature
        // permission capability is not granted
        assertInstallSucceeds(
                ""v3-rsa-pkcs1-sha256-2048-2-with_por_1_2-no-perm-cap-permdef-companion.apk"");
        assertInstallFails(""v3-rsa-pkcs1-sha256-2048-1-permdef.apk"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.ExternalStorageHostTest"	"testCreateRequest_userDenied"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/ExternalStorageHostTest.java]:[granted]:[1]:method_text:[    * the system will show the user confirmation dialog.     *     * @throws Exception     */   ]) :|: 
    public void testCreateRequest_userDenied() throws Exception {
        installPackage(MEDIA.apk);

        int user = getDevice().getCurrentUser();

        runDeviceTests(MEDIA.pkg, MEDIA.clazz,
                ""testMediaEscalationWithDenied_RequestWrite"", user);
        runDeviceTests(MEDIA.pkg, MEDIA.clazz,
                ""testMediaEscalationWithDenied_RequestDelete"", user);
        runDeviceTests(MEDIA.pkg, MEDIA.clazz,
                ""testMediaEscalationWithDenied_RequestTrash"", user);
        runDeviceTests(MEDIA.pkg, MEDIA.clazz,
                ""testMediaEscalationWithDenied_RequestUnTrash"", user);
    }

    /**
     * If the app is NOT granted {@link android.Manifest.permission#READ_EXTERNAL_STORAGE}
     * and {@link android.Manifest.permission#MANAGE_EXTERNAL_STORAGE}
     * when it calls MediaStore#createTrashRequest,
     * MediaStore#createDeleteRequest, or MediaStore#createWriteRequest,
     * the system will show the user confirmation dialog.
     *
     * @throws Exception
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ExternalStorageHostTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.ExternalStorageHostTest"	"testCreateRequest_noRESAndMES_showConfirmDialog"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/ExternalStorageHostTest.java]:[granted]:[1]:method_text:[    * the system will show the user confirmation dialog.     *     * @throws Exception     */   ]) :|: 
    public void testCreateRequest_noRESAndMES_showConfirmDialog() throws Exception {
        installPackage(MEDIA.apk);

        int user = getDevice().getCurrentUser();

        // grant permissions
        updatePermissions(MEDIA.pkg, user, new String[] {
                PERM_ACCESS_MEDIA_LOCATION,
        }, true);
        // revoke permissions
        updatePermissions(MEDIA.pkg, user, new String[] {
                PERM_READ_EXTERNAL_STORAGE,
                PERM_WRITE_EXTERNAL_STORAGE,
        }, false);


        // revoke the app ops permission
        updateAppOp(MEDIA.pkg, user, APP_OPS_MANAGE_EXTERNAL_STORAGE, false);

        // grant the app ops permission
        updateAppOp(MEDIA.pkg, user, APP_OPS_MANAGE_MEDIA, true);

        runDeviceTests(MEDIA.pkg, MEDIA.clazz,
                ""testMediaEscalation_RequestWrite_showConfirmDialog"", user);
    }

    /**
     * If the app is NOT granted {@link android.Manifest.permission#MANAGE_MEDIA},
     * when it calls MediaStore#createTrashRequest,
     * MediaStore#createDeleteRequest, or MediaStore#createWriteRequest,
     * the system will show the user confirmation dialog.
     *
     * @throws Exception
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ExternalStorageHostTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.ExternalStorageHostTest"	"testCreateRequest_noMANAGEMEDIA_showConfirmDialog"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/ExternalStorageHostTest.java]:[granted]:[1]:method_text:[he     * system will show the user confirmation dialog.     *     * @throws Exception     */   ]) :|: 
    public void testCreateRequest_noMANAGEMEDIA_showConfirmDialog() throws Exception {
        installPackage(MEDIA.apk);

        int user = getDevice().getCurrentUser();
        // grant permissions
        updatePermissions(MEDIA.pkg, user, new String[] {
                PERM_READ_EXTERNAL_STORAGE,
                PERM_ACCESS_MEDIA_LOCATION,
        }, true);

        // revoke the app ops permission
        updateAppOp(MEDIA.pkg, user, APP_OPS_MANAGE_MEDIA, false);

        runDeviceTests(MEDIA.pkg, MEDIA.clazz,
                ""testMediaEscalation_RequestWrite_showConfirmDialog"", user);
        runDeviceTests(MEDIA.pkg, MEDIA.clazz,
                ""testMediaEscalation_RequestTrash_showConfirmDialog"", user);
        runDeviceTests(MEDIA.pkg, MEDIA.clazz,
                ""testMediaEscalation_RequestDelete_showConfirmDialog"", user);
    }

    /**
     * If the app is granted {@link android.Manifest.permission#MANAGE_MEDIA},
     * {@link android.Manifest.permission#READ_EXTERNAL_STORAGE}, without
     * {@link android.Manifest.permission#ACCESS_MEDIA_LOCATION},
     * when it calls MediaStore#createTrashRequest or
     * MediaStore#createDeleteRequest, The system will NOT show the user
     * confirmation dialog. When it calls MediaStore#createWriteRequest, the
     * system will show the user confirmation dialog.
     *
     * @throws Exception
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ExternalStorageHostTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.ExternalStorageHostTest"	"testCreateRequest_withNoAML_showConfirmDialog"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/ExternalStorageHostTest.java]:[granted]:[1]:method_text:[, the system will NOT show the user confirmation dialog.     *     * @throws Exception     */   ]) :|: 
    public void testCreateRequest_withNoAML_showConfirmDialog() throws Exception {
        installPackage(MEDIA.apk);

        int user = getDevice().getCurrentUser();
        // grant permissions
        updatePermissions(MEDIA.pkg, user, new String[] {
                PERM_READ_EXTERNAL_STORAGE,
        }, true);
        // revoke permission
        updatePermissions(MEDIA.pkg, user, new String[] {
                PERM_ACCESS_MEDIA_LOCATION,
        }, false);

        // grant the app ops permission
        updateAppOp(MEDIA.pkg, user, APP_OPS_MANAGE_MEDIA, true);

        // show confirm dialog in requestWrite
        runDeviceTests(MEDIA.pkg, MEDIA.clazz,
                ""testMediaEscalation_RequestWrite_showConfirmDialog"", user);

        // not show confirm dialog in requestTrash and requestDelete
        runDeviceTests(MEDIA.pkg, MEDIA.clazz,
                ""testMediaEscalation_RequestTrash_notShowConfirmDialog"", user);
        runDeviceTests(MEDIA.pkg, MEDIA.clazz,
                ""testMediaEscalation_RequestDelete_notShowConfirmDialog"", user);
    }

    /**
     * If the app is granted {@link android.Manifest.permission#MANAGE_MEDIA},
     * {@link android.Manifest.permission#READ_EXTERNAL_STORAGE}, and
     * {@link android.Manifest.permission#ACCESS_MEDIA_LOCATION},
     * when it calls MediaStore#createWriteRequest, MediaStore#createTrashRequest or
     * MediaStore#createDeleteRequest, the system will NOT show the user confirmation dialog.
     *
     * @throws Exception
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ExternalStorageHostTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.ApplicationVisibilityTest"	"testPackageListCrossUserGrant"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[granted]:[1]:method_text:[              ""testPackageVisibility_anyUserCrossUserGrant"",                testUserId);    }   ]) :|: 
    @AppModeFull(reason = ""instant applications cannot be granted INTERACT_ACROSS_USERS"")
    public void testPackageListCrossUserGrant() throws Exception {
        if (!mSupportsMultiUser) {
            return;
        }

        final int installUserId = getInstallUserId();
        final int testUserId = getTestUserId();

        installTestAppForUser(TINY_APK, installUserId);
        installTestAppForUser(TEST_WITH_PERMISSION_APK, testUserId);

        Utils.runDeviceTests(
                getDevice(),
                TEST_WITH_PERMISSION_PKG,
                "".ApplicationVisibilityCrossUserTest"",
                ""testPackageVisibility_currentUser"",
                testUserId);
        Utils.runDeviceTests(
                getDevice(),
                TEST_WITH_PERMISSION_PKG,
                "".ApplicationVisibilityCrossUserTest"",
                ""testPackageVisibility_anyUserCrossUserGrant"",
                testUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApplicationVisibilityTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.ApplicationVisibilityTest"	"testPackageListOtherUserCrossUserGrant"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[granted]:[1]:method_text:[PackageVisibility_otherUserGrant"",                testUserId,                testArgs);    }   ]) :|: 
    @AppModeFull(reason = ""instant applications cannot be granted INTERACT_ACROSS_USERS"")
    public void testPackageListOtherUserCrossUserGrant() throws Exception {
        if (!mSupportsMultiUser) {
            return;
        }

        final int installUserId = getInstallUserId();
        final int testUserId = getTestUserId();
        final Map<String, String> testArgs = new HashMap<>();
        testArgs.put(""testUser"", Integer.toString(installUserId));

        installTestAppForUser(TINY_APK, installUserId);
        installTestAppForUser(TEST_WITH_PERMISSION_APK, testUserId);

        Utils.runDeviceTests(
                getDevice(),
                TEST_WITH_PERMISSION_PKG,
                "".ApplicationVisibilityCrossUserTest"",
                ""testPackageVisibility_otherUserGrant"",
                testUserId,
                testArgs);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApplicationVisibilityTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.ApplicationVisibilityTest"	"testApplicationListCrossUserGrant"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[granted]:[1]:method_text:[          ""testApplicationVisibility_anyUserCrossUserGrant"",                testUserId);    }   ]) :|: 
    @AppModeFull(reason = ""instant applications cannot be granted INTERACT_ACROSS_USERS"")
    public void testApplicationListCrossUserGrant() throws Exception {
        if (!mSupportsMultiUser) {
            return;
        }

        final int installUserId = getInstallUserId();
        final int testUserId = getTestUserId();

        installTestAppForUser(TINY_APK, installUserId);
        installTestAppForUser(TEST_WITH_PERMISSION_APK, testUserId);

        Utils.runDeviceTests(
                getDevice(),
                TEST_WITH_PERMISSION_PKG,
                "".ApplicationVisibilityCrossUserTest"",
                ""testApplicationVisibility_currentUser"",
                testUserId);
        Utils.runDeviceTests(
                getDevice(),
                TEST_WITH_PERMISSION_PKG,
                "".ApplicationVisibilityCrossUserTest"",
                ""testApplicationVisibility_anyUserCrossUserGrant"",
                testUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApplicationVisibilityTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.ApplicationVisibilityTest"	"testApplicationListOtherUserCrossUserGrant"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[granted]:[1]:method_text:[icationVisibility_otherUserGrant"",                testUserId,                testArgs);    }   ]) :|: 
    @AppModeFull(reason = ""instant applications cannot be granted INTERACT_ACROSS_USERS"")
    public void testApplicationListOtherUserCrossUserGrant() throws Exception {
        if (!mSupportsMultiUser) {
            return;
        }

        final int installUserId = getInstallUserId();
        final int testUserId = getTestUserId();
        final Map<String, String> testArgs = new HashMap<>();
        testArgs.put(""testUser"", Integer.toString(installUserId));

        installTestAppForUser(TINY_APK, installUserId);
        installTestAppForUser(TEST_WITH_PERMISSION_APK, testUserId);

        Utils.runDeviceTests(
                getDevice(),
                TEST_WITH_PERMISSION_PKG,
                "".ApplicationVisibilityCrossUserTest"",
                ""testApplicationVisibility_otherUserGrant"",
                testUserId,
                testArgs);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApplicationVisibilityTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appsecurity.cts.ApplicationVisibilityTest"	"testGetPackagesForUidCrossUserGrant"	"CtsAppSecurityHostTestCases"	"1: granted"	"([1:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[granted]:[1]:method_text:[""testGetPackagesForUidVisibility_anotherUserCrossUserGrant"",                testUserId);    }   ]) :|: 
    @AppModeFull(reason = ""instant applications cannot be granted INTERACT_ACROSS_USERS"")
    public void testGetPackagesForUidCrossUserGrant() throws Exception {
        if (!mSupportsMultiUser) {
            return;
        }

        final int installUserId = getInstallUserId();
        final int testUserId = getTestUserId();

        installTestAppForUser(TINY_APK, installUserId);
        installTestAppForUser(TEST_WITH_PERMISSION_APK, testUserId);

        Utils.runDeviceTests(
                getDevice(),
                TEST_WITH_PERMISSION_PKG,
                "".ApplicationVisibilityCrossUserTest"",
                ""testGetPackagesForUidVisibility_currentUser"",
                testUserId);
        Utils.runDeviceTests(
                getDevice(),
                TEST_WITH_PERMISSION_PKG,
                "".ApplicationVisibilityCrossUserTest"",
                ""testGetPackagesForUidVisibility_anotherUserCrossUserGrant"",
                testUserId);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApplicationVisibilityTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.cts.statsdatom.statsd.UidAtomTests"	"testForegroundServiceAccessAppOp"	"CtsStatsdAtomHostTestCases"	"1: RECORD_AUDIO"	"([1:/android/cts/statsdatom/statsd/UidAtomTests.java]:[RECORD_AUDIO]:[1]:method_text:[tWithMessage(""Wrong count for "" + opName).that(count).isEqualTo(expectedCount);        }    }   ]) :|: public void testForegroundServiceAccessAppOp() throws Exception {
        final int atomTag = Atom.FOREGROUND_SERVICE_APP_OP_SESSION_ENDED_FIELD_NUMBER;
        final String name = ""testForegroundServiceAccessAppOp"";

        ConfigUtils.uploadConfigForPushedAtomWithUid(getDevice(), DeviceUtils.STATSD_ATOM_TEST_PKG,
                atomTag, /*useUidAttributionChain=*/false);

        DeviceUtils.runDeviceTestsOnStatsdApp(getDevice(), "".AtomTests"", name);

        // Sorted list of events in order in which they occurred.
        List<EventMetricData> data = ReportUtils.getEventMetricDataList(getDevice());

        assertWithMessage(""Wrong atom size"").that(data.size()).isEqualTo(3);
        for (int i = 0; i < data.size(); i++) {
            ForegroundServiceAppOpSessionEnded atom
                    = data.get(i).getAtom().getForegroundServiceAppOpSessionEnded();
            final int opName = atom.getAppOpName().getNumber();
            final int acceptances = atom.getCountOpsAccepted();
            final int rejections = atom.getCountOpsRejected();
            final int count = acceptances + rejections;
            int expectedCount = 0;
            switch (opName) {
                case AppOpEnum.APP_OP_CAMERA_VALUE:
                    expectedCount = 3;
                    break;
                case AppOpEnum.APP_OP_FINE_LOCATION_VALUE:
                    expectedCount = 1;
                    break;
                case AppOpEnum.APP_OP_RECORD_AUDIO_VALUE:
                    expectedCount = 2;
                    break;
                case AppOpEnum.APP_OP_COARSE_LOCATION_VALUE:
                    // fall-through
                default:
                    fail(""Unexpected opName "" + opName);
            }
            assertWithMessage(""Wrong count for "" + opName).that(count).isEqualTo(expectedCount);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/statsd/UidAtomTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.cts.statsdatom.appops.AppOpsTests"	"testAppOps"	"CtsStatsdAtomHostTestCases"	"1: granted"	"([2:/android/cts/statsdatom/appops/AppOpsTests.java]:[granted]:[2]:method_text:[insKey(op)) {            return 0;        }        return TRANSFORMED_FROM_OP.get(op) + 1;    }]) :|: public void testAppOps() throws Exception {
        // Set up what to collect
        ConfigUtils.uploadConfigForPulledAtom(getDevice(), DeviceUtils.STATSD_ATOM_TEST_PKG,
                AtomsProto.Atom.APP_OPS_FIELD_NUMBER);

        DeviceUtils.runDeviceTestsOnStatsdApp(getDevice(), "".AtomTests"", ""testAppOps"");
        Thread.sleep(AtomTestUtils.WAIT_TIME_SHORT);

        // Pull a report
        AtomTestUtils.sendAppBreadcrumbReportedAtom(getDevice());
        Thread.sleep(AtomTestUtils.WAIT_TIME_SHORT);

        ArrayList<Integer> expectedOps = new ArrayList<>();
        Set<Integer> transformedOps = new HashSet<>(TRANSFORMED_FROM_OP.values());
        for (int i = 0; i < NUM_APP_OPS; i++) {
            if (!transformedOps.contains(i)) {
                expectedOps.add(i);
            }
        }

        for (Descriptors.EnumValueDescriptor valueDescriptor :
                AtomsProto.AttributedAppOps.getDefaultInstance().getOp().getDescriptorForType()
                        .getValues()) {
            if (valueDescriptor.getOptions().hasDeprecated()) {
                // Deprecated app op, remove from list of expected ones.
                expectedOps.remove(expectedOps.indexOf(valueDescriptor.getNumber()));
            }
        }
        for (AtomsProto.Atom atom : ReportUtils.getGaugeMetricAtoms(getDevice())) {

            AtomsProto.AppOps appOps = atom.getAppOps();
            if (appOps.getPackageName().equals(DeviceUtils.STATSD_ATOM_TEST_PKG)) {
                if (appOps.getOpId().getNumber() == -1) {
                    continue;
                }
                long totalNoted = appOps.getTrustedForegroundGrantedCount()
                        + appOps.getTrustedBackgroundGrantedCount()
                        + appOps.getTrustedForegroundRejectedCount()
                        + appOps.getTrustedBackgroundRejectedCount();
                int expectedNoted =
                        appOps.getOpId().getNumber() + 1
                                +"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/appops/AppOpsTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.cts.statsdatom.appops.AppOpsTests"	"isNotNull"	"CtsStatsdAtomHostTestCases"	"1: RECORD_AUDIO"	"([6:/android/cts/statsdatom/appops/AppOpsTests.java]:[RECORD_AUDIO]:[6]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ]) :|: public void test/*
 *.
 */

package android.cts.statsdatom.appops;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import android.cts.statsdatom.lib.AtomTestUtils;
import android.cts.statsdatom.lib.ConfigUtils;
import android.cts.statsdatom.lib.DeviceUtils;
import android.cts.statsdatom.lib.ReportUtils;

import com.android.os.AtomsProto;
import com.android.tradefed.build.IBuildInfo;
import com.android.tradefed.testtype.DeviceTestCase;
import com.android.tradefed.testtype.IBuildReceiver;

import com.google.protobuf.Descriptors;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class AppOpsTests extends DeviceTestCase implements IBuildReceiver {
    private static final int NUM_APP_OPS = AtomsProto.AttributedAppOps.getDefaultInstance().getOp().
            getDescriptorForType().getValues().size() - 1;

    /**
     * Some ops are only available to specific dynamic uids and are otherwise transformed to less
     * privileged ops. For example, RECORD_AUDIO_HOTWORD is downgraded to RECORD_AUDIO. This stores
     * a mapping from an op to the op it can be transformed from.
     */
    private static final Map<Integer, Integer> TRANSFORMED_FROM_OP = new HashMap<>();

    static {
        final int APP_OP_RECORD_AUDIO = 27;
        final int APP_OP_RECORD_AUDIO_HOTWORD = 102;

        // Temporarily commented out until the Trusted Hotword requirement is enforced again.
//        TRANSFORMED_FROM_OP.put(APP_OP_RECORD_AUDIO, APP_OP_RECORD_AUDIO_HOTWORD);
    }

    private IBuildInfo mCtsBuild;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        assertThat(mCtsBuild).isNotNull();
        ConfigUtils.removeConfig(getDevice());
        ReportUtils.clearReports(getDevice());
        DeviceUtils.installStatsdTestApp(getDevice(), mCtsBuild);
        Thread.sleep(AtomTestUtils.WAIT_TIME_L"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/appops/AppOpsTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.cts.statsdatom.permissionstate.DangerousPermissionStateTests"	"isNotNull"	"CtsStatsdAtomHostTestCases"	"1: granted"	"([1:/android/cts/statsdatom/permissionstate/DangerousPermissionStateTests.java]:[granted]:[1]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ]) :|: public void test/*
 *.
 */

package android.cts.statsdatom.permissionstate;

import static com.google.common.truth.Truth.assertThat;

import android.cts.statsdatom.lib.AtomTestUtils;
import android.cts.statsdatom.lib.ConfigUtils;
import android.cts.statsdatom.lib.DeviceUtils;
import android.cts.statsdatom.lib.ReportUtils;

import com.android.os.AtomsProto;
import com.android.tradefed.build.IBuildInfo;
import com.android.tradefed.testtype.DeviceTestCase;
import com.android.tradefed.testtype.IBuildReceiver;

import java.util.ArrayList;
import java.util.List;

public class DangerousPermissionStateTests extends DeviceTestCase implements IBuildReceiver {
    private static final int FLAG_PERMISSION_USER_SENSITIVE_WHEN_GRANTED = 1 << 8;

    private IBuildInfo mCtsBuild;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        assertThat(mCtsBuild).isNotNull();
        ConfigUtils.removeConfig(getDevice());
        ReportUtils.clearReports(getDevice());
        DeviceUtils.installStatsdTestApp(getDevice(), mCtsBuild);
        Thread.sleep(AtomTestUtils.WAIT_TIME_LONG);
    }

    @Override
    protected void tearDown() throws Exception {
        ConfigUtils.removeConfig(getDevice());
        ReportUtils.clearReports(getDevice());
        DeviceUtils.uninstallStatsdTestApp(getDevice());
        super.tearDown();
    }

    @Override
    public void setBuild(IBuildInfo buildInfo) {
        mCtsBuild = buildInfo;
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/permissionstate/DangerousPermissionStateTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.cts.statsdatom.permissionstate.DangerousPermissionStateTests"	"testDangerousPermissionState"	"CtsStatsdAtomHostTestCases"	"1: granted"	"([2:/android/cts/statsdatom/permissionstate/DangerousPermissionStateTests.java]:[granted]:[2]:method_text:[     }            }        }        assertThat(verifiedKnowPermissionState).isTrue();    }   ]) :|: public void testDangerousPermissionState() throws Exception {

        final int FLAG_PERMISSION_USER_SENSITIVE_WHEN_DENIED = 1 << 9;
        final int PROTECTION_FLAG_DANGEROUS = 1;
        final int PROTECTION_FLAG_INSTANT = 0x1000;

        // Set up what to collect
        ConfigUtils.uploadConfigForPulledAtom(getDevice(), DeviceUtils.STATSD_ATOM_TEST_PKG,
                AtomsProto.Atom.DANGEROUS_PERMISSION_STATE_FIELD_NUMBER);

        boolean verifiedKnowPermissionState = false;

        // Pull a report
        AtomTestUtils.sendAppBreadcrumbReportedAtom(getDevice());
        Thread.sleep(AtomTestUtils.WAIT_TIME_SHORT);

        int testAppId = getAppId(DeviceUtils.getStatsdTestAppUid(getDevice()));

        for (AtomsProto.Atom atom : ReportUtils.getGaugeMetricAtoms(getDevice())) {
            AtomsProto.DangerousPermissionState permissionState = atom.getDangerousPermissionState();

            assertThat(permissionState.getPermissionName()).isNotNull();
            assertThat(permissionState.getUid()).isAtLeast(0);
            assertThat(permissionState.getPackageName()).isNotNull();

            if (getAppId(permissionState.getUid()) == testAppId) {

                if (permissionState.getPermissionName().contains(
                        ""ACCESS_FINE_LOCATION"")) {
                    assertThat(permissionState.getIsGranted()).isTrue();
                    assertThat(permissionState.getPermissionFlags() & ~(
                            FLAG_PERMISSION_USER_SENSITIVE_WHEN_DENIED
                                    | FLAG_PERMISSION_USER_SENSITIVE_WHEN_GRANTED))
                            .isEqualTo(0);
                    assertThat(permissionState.getProtectionFlags()).isEqualTo(
                            PROTECTION_FLAG_DANGEROUS | PROTECTION_FLAG_INSTANT
                    );

                    verifiedKnowPermissionState = true;
                }
            }
        }

        assertThat(verifiedKnowPermissionState).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/permissionstate/DangerousPermissionStateTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.cts.statsdatom.permissionstate.DangerousPermissionStateTests"	"testDangerousPermissionStateSampled"	"CtsStatsdAtomHostTestCases"	"1: granted"	"([2:/android/cts/statsdatom/permissionstate/DangerousPermissionStateTests.java]:[granted]:[2]:method_text:[dle#getAppId     */    private static int getAppId(int uid) {        return uid % 100000;    }}]) :|: public void testDangerousPermissionStateSampled() throws Exception {
        // get full atom for reference
        ConfigUtils.uploadConfigForPulledAtom(getDevice(), DeviceUtils.STATSD_ATOM_TEST_PKG,
                AtomsProto.Atom.DANGEROUS_PERMISSION_STATE_FIELD_NUMBER);

        AtomTestUtils.sendAppBreadcrumbReportedAtom(getDevice());
        Thread.sleep(AtomTestUtils.WAIT_TIME_SHORT);

        List<AtomsProto.DangerousPermissionState> fullDangerousPermissionState = new ArrayList<>();
        for (AtomsProto.Atom atom : ReportUtils.getGaugeMetricAtoms(getDevice())) {
            fullDangerousPermissionState.add(atom.getDangerousPermissionState());
        }

        ConfigUtils.removeConfig(getDevice());
        ReportUtils.clearReports(getDevice()); // Clears data.
        List<AtomsProto.Atom> gaugeMetricDataList = null;

        // retries in case sampling returns full list or empty list - which should be extremely rare
        for (int attempt = 0; attempt < 10; attempt++) {
            // Set up what to collect
            ConfigUtils.uploadConfigForPulledAtom(getDevice(), DeviceUtils.STATSD_ATOM_TEST_PKG,
                    AtomsProto.Atom.DANGEROUS_PERMISSION_STATE_SAMPLED_FIELD_NUMBER);

            // Pull a report
            AtomTestUtils.sendAppBreadcrumbReportedAtom(getDevice());
            Thread.sleep(AtomTestUtils.WAIT_TIME_SHORT);

            gaugeMetricDataList = ReportUtils.getGaugeMetricAtoms(getDevice());
            if (gaugeMetricDataList.size() > 0
                    && gaugeMetricDataList.size() < fullDangerousPermissionState.size()) {
                break;
            }
            ConfigUtils.removeConfig(getDevice());
            ReportUtils.clearReports(getDevice()); // Clears data.
        }
        assertThat(gaugeMetricDataList.size()).isGreaterThan(0);
        assertThat(gaugeMetricDataList.size()).isLessThan(fullDangerousPermissionState.size());

        long lastUid = -1;
        int fullIndex = 0;

        for (AtomsPro"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/permissionstate/DangerousPermissionStateTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.server.cts.device.statsdatom.AtomTests"	"testForegroundServiceAccessAppOp"	""	"1: RECORD_AUDIO"	"([2:/com/android/server/cts/device/statsdatom/AtomTests.java]:[RECORD_AUDIO]:[2]:method_text:[p(500);        // TODO(b/149098800): Start fgs a second time and log OPSTR_CAMERA again    }   ]) :|: 
    public void testForegroundServiceAccessAppOp() throws Exception {
        Context context = InstrumentationRegistry.getContext();
        Intent fgsIntent = new Intent(context, StatsdCtsForegroundService.class);
        AppOpsManager appOpsManager = context.getSystemService(AppOpsManager.class);

        // No foreground service session
        noteAppOp(appOpsManager, AppOpsManager.OPSTR_COARSE_LOCATION);
        sleep(500);

        // Foreground service session 1
        context.startService(fgsIntent);
        while (!checkIfServiceRunning(context, StatsdCtsForegroundService.class.getName())) {
            sleep(50);
        }
        noteAppOp(appOpsManager, AppOpsManager.OPSTR_CAMERA);
        noteAppOp(appOpsManager, AppOpsManager.OPSTR_FINE_LOCATION);
        noteAppOp(appOpsManager, AppOpsManager.OPSTR_CAMERA);
        startAppOp(appOpsManager, AppOpsManager.OPSTR_RECORD_AUDIO);
        noteAppOp(appOpsManager, AppOpsManager.OPSTR_RECORD_AUDIO);
        startAppOp(appOpsManager, AppOpsManager.OPSTR_CAMERA);
        sleep(500);
        context.stopService(fgsIntent);

        // No foreground service session
        noteAppOp(appOpsManager, AppOpsManager.OPSTR_COARSE_LOCATION);
        sleep(500);

        // TODO(b/149098800): Start fgs a second time and log OPSTR_CAMERA again
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/AtomTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextCrossProfileHostTest"	"testCreateContextAsUser_sameProfileGroup_withInteractAcrossUsersPermission_createsContext"	"CtsSyncContentHostTestCases"	"3: android.software.managed_users android.software.managed managed_users"	"([1:/android/content/cts/ContextCrossProfileHostTest.java]:[managed_users]:[1]:method_text:[ers"");        } catch (DeviceNotAvailableException e) {            return false;        }    }}]) :|: 
    public void testCreateContextAsUser_sameProfileGroup_withInteractAcrossUsersPermission_createsContext()
            throws Exception {
        assumeTrue(supportsManagedUsers());
        int userInSameProfileGroup = createProfile(mParentUserId);
        getDevice().startUser(userInSameProfileGroup, /* waitFlag= */true);
        mTestArgs.put(""testUser"", Integer.toString(userInSameProfileGroup));
        getDevice().installPackageForUser(
                mApkFile, /* reinstall= */true, /* grantPermissions= */true,
                userInSameProfileGroup, /* extraArgs= */""-t"", /* extraArgs= */""--force-queryable"");

        CompatibilityBuildHelper buildHelper = new CompatibilityBuildHelper(mCtsBuild);
        File testServiceApkFile = buildHelper.getTestFile(TEST_SERVICE_WITH_PERMISSION_APK);
        getDevice().installPackageForUser(
                testServiceApkFile, /* reinstall= */true, /* grantPermissions= */true,
                userInSameProfileGroup, /* extraArgs= */""-t"", /* extraArgs= */""--force-queryable"");

        runDeviceTests(
                getDevice(),
                TEST_WITH_PERMISSION_PKG,
                "".ContextCrossProfileDeviceTest"",
                ""testCreateContextAsUser_sameProfileGroup_withInteractAcrossUsersPermission_createsContext"",
                mParentUserId,
                mTestArgs,
                /* timeout= */60L,
                TimeUnit.SECONDS);
    }

    boolean supportsManagedUsers() {
        try {
            return getDevice().hasFeature(""feature:android.software.managed_users"");
        } catch (DeviceNotAvailableException e) {
            return false;
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/content/src/android/content/cts/ContextCrossProfileHostTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.inputmethodservice.cts.hostside.MultiUserTest"	"testProfileUserInstant"	"CtsInputMethodServiceHostTestCases"	"3: android.software.managed_users android.software.managed managed_users"	"([1:/android/inputmethodservice/cts/hostside/MultiUserTest.java]:[managed_users]:[1]:method_text:[                .setTestMethodName(testInfo.testMethod)                .setUserId(userId));    }}]) :|: 
    public void testProfileUserInstant() throws Exception {
        testProfileUser(true);
    }

    private void testProfileUser(boolean instant) throws Exception {
        assumeTrue(getDevice().hasFeature(""android.software.managed_users""));

        final int primaryUserId = getDevice().getPrimaryUserId();
        final int profileUserId = createProfile(primaryUserId);

        getDevice().startUser(profileUserId, true /* waitFlag */);

        installPossibleInstantPackage(DeviceTestConstants.APK, primaryUserId, instant);
        installPossibleInstantPackage(DeviceTestConstants.APK, profileUserId, instant);

        // Work around b/31009094.
        assertTestApkIsReadyAfterInstallation(profileUserId);

        assertIme1NotExistInApiResult(primaryUserId);
        assertIme1NotExistInApiResult(profileUserId);
        assertIme1ImplicitlyEnabledSubtypeNotExist(primaryUserId);
        assertIme1ImplicitlyEnabledSubtypeNotExist(profileUserId);

        // Install IME1 then enable/set it as the current IME for the primary user.
        installPackageAsUser(Ime1Constants.APK, true, primaryUserId, ""-r"");
        waitUntilImeIsInShellCommandResult(Ime1Constants.IME_ID, primaryUserId);
        shell(ShellCommandUtils.enableIme(Ime1Constants.IME_ID, primaryUserId));
        shell(ShellCommandUtils.setCurrentImeSync(Ime1Constants.IME_ID, primaryUserId));

        // Install IME2 then enable/set it as the current IME for the profile user.
        installPackageAsUser(Ime2Constants.APK, true, profileUserId, ""-r"");
        waitUntilImeIsInShellCommandResult(Ime2Constants.IME_ID, profileUserId);
        shell(ShellCommandUtils.enableIme(Ime2Constants.IME_ID, profileUserId));
        shell(ShellCommandUtils.setCurrentImeSync(Ime2Constants.IME_ID, profileUserId));

        // Primary User: IME1:enabled, IME2:N/A
        assertIme1ExistsInApiResult(primaryUserId);
        assertIme1EnabledInApiResult(primaryUserId);
        assertIme2NotExistInApiResult(primaryUserId);"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/inputmethodservice/hostside/src/android/inputmethodservice/cts/hostside/MultiUserTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testCreateFilesInRandomPlaces_hasW"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[estrictions imposed by MediaProvider.     * <p> Assumes we have WRITE_EXTERNAL_STORAGE.     */   ]) :|: 
    public void testCreateFilesInRandomPlaces_hasW() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ false);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);
        // Can create file under root dir
        assertCanCreateFile(new File(TestUtils.getExternalStorageDir(), ""LegacyFileAccessTest.txt""));

        // Can create music file under DCIM
        assertCanCreateFile(new File(TestUtils.getDcimDir(), ""LegacyFileAccessTest.mp3""));

        // Can create random file under external files dir
        assertCanCreateFile(new File(TestUtils.getExternalFilesDir(),
                ""LegacyFileAccessTest""));

        // However, even legacy apps can't create files under other app's directories
        final File otherAppDir = new File(TestUtils.getAndroidDataDir(), ""com.android.shell"");
        final File file = new File(otherAppDir, ""LegacyFileAccessTest.txt"");

        // otherAppDir was already created by the host test
        try {
            file.createNewFile();
            fail(""File creation expected to fail: "" + file);
        } catch (IOException expected) {
        }
    }

    /**
     * Tests that legacy apps bypass dir creation/deletion restrictions imposed by MediaProvider.
     * <p> Assumes we have WRITE_EXTERNAL_STORAGE.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testMkdirInRandomPlaces_hasW"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[  }    /**     * Tests that an app can't access external storage without permissions.     */   ]) :|: 
    public void testMkdirInRandomPlaces_hasW() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ false);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);
        // Can create a top-level direcotry
        final File topLevelDir = new File(TestUtils.getExternalStorageDir(), ""LegacyFileAccessTest"");
        assertCanCreateDir(topLevelDir);

        final File otherAppDir = new File(TestUtils.getAndroidDataDir(), ""com.android.shell"");

        // However, even legacy apps can't create dirs under other app's directories
        final File subDir = new File(otherAppDir, ""LegacyFileAccessTest"");
        // otherAppDir was already created by the host test
        assertThat(subDir.mkdir()).isFalse();

        // Try to list a directory and fail because it requires READ permission
        assertThat(TestUtils.getMusicDir().list()).isNull();
    }

    /**
     * Tests that an app can't access external storage without permissions.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testCantAccessExternalStorage"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[ally {            fileInMediaDir.delete();        }    }    // test read storage permission   ]) :|: 
    public void testCantAccessExternalStorage() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ false);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ false);
        // Can't create file under root dir
        final File newTxtFile = new File(TestUtils.getExternalStorageDir(),
                ""LegacyFileAccessTest.txt"");
        try {
            newTxtFile.createNewFile();
            fail(""File creation expected to fail: "" + newTxtFile);
        } catch (IOException expected) {
        }

        // Can't create music file under /MUSIC
        final File newMusicFile = new File(TestUtils.getMusicDir(), ""LegacyFileAccessTest.mp3"");
        try {
            newMusicFile.createNewFile();
            fail(""File creation expected to fail: "" + newMusicFile);
        } catch (IOException expected) {
        }

        // Can't create a top-level direcotry
        final File topLevelDir = new File(TestUtils.getExternalStorageDir(), ""LegacyFileAccessTest"");
        assertThat(topLevelDir.mkdir()).isFalse();

        // Can't read existing file
        final File existingFile = getShellFile();

        try {
            createFileInExternalDir(existingFile);
            MediaStore.scanFile(getContentResolver(), existingFile);
            Os.open(existingFile.getPath(), OsConstants.O_RDONLY, /*mode*/ 0);
            fail(""Opening file for read expected to fail: "" + existingFile);
        } catch (ErrnoException expected) {
        }

        // Can't delete file
        assertThat(existingFile.delete()).isFalse();

        // try to list a directory and fail
        assertThat(TestUtils.getMusicDir().list()).isNull();
        assertThat(TestUtils.getExternalStorageDir().list()).isNull();

        // However, even without permissions, we can access our own external dir
        final File fileInDataDir =
                new File(TestUtils.getExternalFilesDir(),
                        ""Le"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testReadOnlyExternalStorage_hasR"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[ }    }    /**     * Test that legacy app with storage permission can list all files     */   ]) :|: 
    public void testReadOnlyExternalStorage_hasR() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ false);
        // can list directory content
        assertThat(TestUtils.getMusicDir().list()).isNotNull();

        // try to write a file and fail
        final File existingFile = getShellFile();

        // can open file for read
        FileDescriptor fd = null;
        try {
            createFileInExternalDir(existingFile);
            MediaStore.scanFile(getContentResolver(), existingFile);
            fd = Os.open(existingFile.getPath(), OsConstants.O_RDONLY, /*mode*/ 0);
        } finally {
            if (fd != null) {
                Os.close(fd);
            }
        }

        try {
            fd = Os.open(existingFile.getPath(), OsConstants.O_WRONLY, /*mode*/ 0);
            Os.close(fd);
            fail(""Opening file for write expected to fail: "" + existingFile);
        } catch (ErrnoException expected) {
        }

        // try to create file and fail, because it requires WRITE
        final File newFile = new File(TestUtils.getMusicDir(), ""LegacyFileAccessTest.mp3"");
        try {
            newFile.createNewFile();
            fail(""Creating file expected to fail: "" + newFile);
        } catch (IOException expected) {
        }

        // try to mkdir and fail, because it requires WRITE
        final File newDir = new File(TestUtils.getExternalStorageDir(), ""LegacyFileAccessTest"");
        try {
            assertThat(newDir.mkdir()).isFalse();
        } finally {
            newDir.delete();
        }
    }

    /**
     * Test that legacy app with storage permission can list all files
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testListFiles_hasR"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[  }    /**     * Test that URI returned on inserting hidden file is valid after scan.     */   ]) :|: 
    public void testListFiles_hasR() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ false);
        final File shellFile = getShellFile();

        createFileInExternalDir(shellFile);
        MediaStore.scanFile(getContentResolver(), getShellFile());
        // can list a non-media file created by other package.
        assertThat(Arrays.asList(shellFile.getParentFile().list()))
                .contains(shellFile.getName());
    }

    /**
     * Test that URI returned on inserting hidden file is valid after scan.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testInsertHiddenFile"	""	"1: granted"	"([1:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[1]:method_text:[EXTERNAL_STORAGE permission bypasses rename     * restrictions imposed by MediaProvider     */   ]) :|: 
    public void testInsertHiddenFile() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        final File dcimDir = getDcimDir();
        final String hiddenImageFileName = "".hidden"" + IMAGE_FILE_NAME;
        final File hiddenImageFile = new File(dcimDir, hiddenImageFileName);
        try {
            ContentValues values = new ContentValues();
            values.put(MediaStore.MediaColumns.DATA, hiddenImageFile.getAbsolutePath());
            Uri uri = getContentResolver().insert(getImageContentUri(), values);
            try (OutputStream fos = getContentResolver().openOutputStream(uri, ""rw"")) {
                fos.write(BYTES_DATA1);
            }
            MediaStore.scanFile(getContentResolver(), hiddenImageFile);
            final String[] projection = {MediaStore.MediaColumns.DISPLAY_NAME};
            try (Cursor c = getContentResolver().query(uri, projection, null, null, null)) {
                assertThat(c.moveToFirst()).isTrue();
                assertThat(c.getString(0)).isEqualTo(hiddenImageFileName);
            }
        } finally {
            hiddenImageFile.delete();
        }
    }

    /**
     * Test that rename for legacy app with WRITE_EXTERNAL_STORAGE permission bypasses rename
     * restrictions imposed by MediaProvider
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testCanRename_hasRW"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[ith only READ_EXTERNAL_STORAGE can only rename files in app external     * directories.     */   ]) :|: 
    public void testCanRename_hasRW() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);

        final File musicFile1 = new File(TestUtils.getDcimDir(), ""LegacyFileAccessTest.mp3"");
        final File musicFile2 = new File(TestUtils.getExternalStorageDir(),
                ""LegacyFileAccessTest.mp3"");
        final File musicFile3 = new File(TestUtils.getMoviesDir(), ""LegacyFileAccessTest.mp3"");
        final File nonMediaDir1 = new File(TestUtils.getDcimDir(), ""LegacyFileAccessTest"");
        final File nonMediaDir2 = new File(TestUtils.getExternalStorageDir(),
                ""LegacyFileAccessTest"");
        final File pdfFile1 = new File(nonMediaDir1, ""LegacyFileAccessTest.pdf"");
        final File pdfFile2 = new File(nonMediaDir2, ""LegacyFileAccessTest.pdf"");
        try {
            // can rename a file to root directory.
            assertThat(musicFile1.createNewFile()).isTrue();
            assertCanRenameFile(musicFile1, musicFile2);

            // can rename a music file to Movies directory.
            assertCanRenameFile(musicFile2, musicFile3);

            assertThat(nonMediaDir1.mkdir()).isTrue();
            assertThat(pdfFile1.createNewFile()).isTrue();
            // can rename directory to root directory.
            assertCanRenameDirectory(
                    nonMediaDir1, nonMediaDir2, new File[] {pdfFile1}, new File[] {pdfFile2});
        } finally {
            musicFile1.delete();
            musicFile2.delete();
            musicFile3.delete();

            pdfFile1.delete();
            pdfFile2.delete();
            nonMediaDir1.delete();
            nonMediaDir2.delete();
        }
    }

    /**
     * Test that legacy app with only READ_EXTERNAL_STORAGE can only rename files in app external
     * directories.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testCantRename_hasR"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[app with no storage permission can only rename files in app external     * directories.     */   ]) :|: 
    public void testCantRename_hasR() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ false);

        final File shellFile1 = getShellFile();
        final File shellFile2 = new File(TestUtils.getDownloadDir(), ""LegacyFileAccessTest_shell"");
        final File mediaFile1 =
                new File(TestUtils.getExternalMediaDir(),
                        ""LegacyFileAccessTest1"");
        final File mediaFile2 =
                new File(TestUtils.getExternalMediaDir(),
                        ""LegacyFileAccessTest2"");
        try {
            createFileInExternalDir(shellFile1);
            MediaStore.scanFile(getContentResolver(), shellFile1);
            // app can't rename shell file.
            assertCantRenameFile(shellFile1, shellFile2);
            // app can't move shell file to its media directory.
            assertCantRenameFile(shellFile1, mediaFile1);
            // However, even without permissions, app can rename files in its own external media
            // directory.
            assertThat(mediaFile1.createNewFile()).isTrue();
            assertThat(mediaFile1.renameTo(mediaFile2)).isTrue();
            assertThat(mediaFile2.exists()).isTrue();
        } finally {
            mediaFile1.delete();
            mediaFile2.delete();
        }
    }

    /**
     * Test that legacy app with no storage permission can only rename files in app external
     * directories.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testCantRename_noStoragePermission"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[NIQUE constraint error while updating db     * rows corresponding to renamed directory.     */   ]) :|: 
    public void testCantRename_noStoragePermission() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ false);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ false);

        final File shellFile1 = getShellFile();
        final File shellFile2 = new File(TestUtils.getDownloadDir(), ""LegacyFileAccessTest_shell"");
        final File mediaFile1 =
                new File(TestUtils.getExternalMediaDir(),
                        ""LegacyFileAccessTest1"");
        final File mediaFile2 =
                new File(TestUtils.getExternalMediaDir(),
                        ""LegacyFileAccessTest2"");
        try {
            createFileInExternalDir(shellFile1);
            MediaStore.scanFile(getContentResolver(), shellFile1);
            // app can't rename shell file.
            assertCantRenameFile(shellFile1, shellFile2);
            // app can't move shell file to its media directory.
            assertCantRenameFile(shellFile1, mediaFile1);
            // However, even without permissions, app can rename files in its own external media
            // directory.
            assertThat(mediaFile1.createNewFile()).isTrue();
            assertThat(mediaFile1.renameTo(mediaFile2)).isTrue();
            assertThat(mediaFile2.exists()).isTrue();
        } finally {
            mediaFile1.delete();
            mediaFile2.delete();
        }
    }

    /**
     * b/156046098, Test that MediaProvider doesn't throw UNIQUE constraint error while updating db
     * rows corresponding to renamed directory.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testCanDeleteAllFiles_hasRW"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[ase. And,     * MediaColumns.OWNER_PACKAGE_NAME is updated with calling package's name.     */   ]) :|: 
    public void testCanDeleteAllFiles_hasRW() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);

        final File videoFile = new File(TestUtils.getExternalStorageDir(), VIDEO_FILE_NAME);
        final File otherAppPdfFile = new File(TestUtils.getDownloadDir(), NONMEDIA_FILE_NAME);

        try {
            assertThat(videoFile.createNewFile()).isTrue();
            assertDirectoryContains(videoFile.getParentFile(), videoFile);

            assertThat(getFileRowIdFromDatabase(videoFile)).isNotEqualTo(-1);
            // Legacy app can delete its own file.
            assertThat(videoFile.delete()).isTrue();
            // Deleting the file will remove videoFile entry from database.
            assertThat(getFileRowIdFromDatabase(videoFile)).isEqualTo(-1);

            assertThat(createFileAs(APP_B_NO_PERMS, otherAppPdfFile.getAbsolutePath())).isTrue();
            assertThat(getFileRowIdFromDatabase(otherAppPdfFile)).isNotEqualTo(-1);
            // Legacy app with write permission can delete the pdfFile owned by TestApp.
            assertThat(otherAppPdfFile.delete()).isTrue();
            // Deleting the pdfFile also removes pdfFile from database.
            //TODO(b/148841336): W_E_S doesn't grant legacy apps write access to other apps' files
            // on a public volume, which is different from the behaviour on a primary external.
//            assertThat(getFileRowIdFromDatabase(otherAppPdfFile)).isEqualTo(-1);
        } finally {
            deleteFileAsNoThrow(APP_B_NO_PERMS, otherAppPdfFile.getAbsolutePath());
            videoFile.delete();
        }
    }

    /**
     * Test that file created by legacy app is inserted to MediaProvider database. And,
     * MediaColumns.OWNER_PACKAGE_NAME is updated with calling package's name.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testLegacyAppCanOwnAFile_hasW"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[IdFromDatabase(videoFile));        } finally {            videoFile.delete();        }    }   ]) :|: 
    public void testLegacyAppCanOwnAFile_hasW() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);

        final File videoFile = new File(TestUtils.getExternalStorageDir(), VIDEO_FILE_NAME);
        try {
            assertThat(videoFile.createNewFile()).isTrue();

            // videoFile is inserted to database, non-legacy app can see this videoFile on 'ls'.
            assertThat(listAs(APP_A_HAS_RES, TestUtils.getExternalStorageDir().getAbsolutePath()))
                    .contains(VIDEO_FILE_NAME);

            // videoFile is in database, row ID for videoFile can not be -1.
            assertNotEquals(-1, getFileRowIdFromDatabase(videoFile));
            assertEquals(THIS_PACKAGE_NAME, getFileOwnerPackageFromDatabase(videoFile));

            assertTrue(videoFile.delete());
            // videoFile is removed from database on delete, hence row ID is -1.
            assertEquals(-1, getFileRowIdFromDatabase(videoFile));
        } finally {
            videoFile.delete();
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testCreateAndRenameDoesntLeaveStaleDBRow_hasRW"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[*     * b/150147690,b/150193381: Test that file rename doesn't delete any existing Uri.     */   ]) :|: 
    public void testCreateAndRenameDoesntLeaveStaleDBRow_hasRW() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);

        final File videoFile = new File(TestUtils.getDcimDir(), VIDEO_FILE_NAME);
        final File renamedVideoFile = new File(TestUtils.getDcimDir(), ""Renamed_"" + VIDEO_FILE_NAME);
        final ContentResolver cr = getContentResolver();

        try {
            assertThat(videoFile.createNewFile()).isTrue();
            assertThat(videoFile.renameTo(renamedVideoFile)).isTrue();

            // Insert new renamedVideoFile to database
            final Uri uri = TestUtils.insertFileUsingDataColumn(renamedVideoFile);
            assertNotNull(uri);

            // Query for all images/videos in the device.
            // This shouldn't list videoFile which was renamed to renamedVideoFile.
            final ArrayList<String> imageAndVideoFiles = getImageAndVideoFilesFromDatabase();
            assertThat(imageAndVideoFiles).contains(renamedVideoFile.getName());
            assertThat(imageAndVideoFiles).doesNotContain(videoFile.getName());
        } finally {
            videoFile.delete();
            renamedVideoFile.delete();
        }
    }

    /**
     * b/150147690,b/150193381: Test that file rename doesn't delete any existing Uri.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testRenameDoesntInvalidateUri_hasRW"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[    * b/150498564,b/150274099: Test that apps can rename files that are not in database.     */   ]) :|: 
    public void testRenameDoesntInvalidateUri_hasRW() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);

        final File imageFile = new File(TestUtils.getDcimDir(), IMAGE_FILE_NAME);
        final File temporaryImageFile = new File(TestUtils.getDcimDir(), IMAGE_FILE_NAME + ""_.tmp"");
        final ContentResolver cr = getContentResolver();

        try {
            assertThat(imageFile.createNewFile()).isTrue();
            try (final FileOutputStream fos = new FileOutputStream(imageFile)) {
                fos.write(BYTES_DATA1);
            }
            // Insert this file to database.
            final Uri uri = TestUtils.insertFileUsingDataColumn(imageFile);
            assertNotNull(uri);

            Files.copy(imageFile, temporaryImageFile);
            // Write more bytes to temporaryImageFile
            try (final FileOutputStream fos = new FileOutputStream(temporaryImageFile, true)) {
                fos.write(BYTES_DATA2);
            }
            assertThat(imageFile.delete()).isTrue();
            temporaryImageFile.renameTo(imageFile);

            // Previous uri of imageFile is unaltered after delete & rename.
            final Uri scannedUri = MediaStore.scanFile(cr, imageFile);
            assertThat(scannedUri.getLastPathSegment()).isEqualTo(uri.getLastPathSegment());

            final byte[] expected = (STR_DATA1 + STR_DATA2).getBytes();
            assertFileContent(imageFile, expected);
        } finally {
            imageFile.delete();
            temporaryImageFile.delete();
        }
    }

    /**
     * b/150498564,b/150274099: Test that apps can rename files that are not in database.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testCanRenameAFileWithNoDBRow_hasRW"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[st that legacy apps creating files for existing db row doesn't upsert and set IS_PENDING     */   ]) :|: 
    public void testCanRenameAFileWithNoDBRow_hasRW() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);

        final File directoryNoMedia = new File(TestUtils.getDcimDir(), "".directoryNoMedia"");
        final File imageInNoMediaDir = new File(directoryNoMedia, IMAGE_FILE_NAME);
        final File renamedImageInDCIM = new File(TestUtils.getDcimDir(), IMAGE_FILE_NAME);
        final File noMediaFile = new File(directoryNoMedia, "".nomedia"");
        final ContentResolver cr = getContentResolver();

        try {
            if (!directoryNoMedia.exists()) {
                assertThat(directoryNoMedia.mkdirs()).isTrue();
            }
            assertThat(noMediaFile.createNewFile()).isTrue();
            assertThat(imageInNoMediaDir.createNewFile()).isTrue();
            // Remove imageInNoMediaDir from database.
            MediaStore.scanFile(cr, directoryNoMedia);

            // Query for all images/videos in the device. This shouldn't list imageInNoMediaDir
            assertThat(getImageAndVideoFilesFromDatabase())
                    .doesNotContain(imageInNoMediaDir.getName());

            // Rename shouldn't throw error even if imageInNoMediaDir is not in database.
            assertThat(imageInNoMediaDir.renameTo(renamedImageInDCIM)).isTrue();
            // We can insert renamedImageInDCIM to database
            ContentValues values = new ContentValues();
            values.put(MediaStore.MediaColumns.DATA, renamedImageInDCIM.getAbsolutePath());
            final Uri uri = TestUtils.insertFileUsingDataColumn(renamedImageInDCIM);
            assertNotNull(uri);
        } finally {
            imageInNoMediaDir.delete();
            renamedImageInDCIM.delete();
            noMediaFile.delete();
            directoryNoMedia.delete();
        }
    }

    /**
     * Test that legacy apps creating files for exis"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testCreateDoesntUpsert"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[ld delete the inserted db row.            deleteWithMediaProviderNoThrow(uri);        }    }   ]) :|: 
    public void testCreateDoesntUpsert() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);

        final File file = new File(TestUtils.getDcimDir(), IMAGE_FILE_NAME);
        Uri uri = null;
        try {
            uri = TestUtils.insertFileUsingDataColumn(file);
            assertNotNull(uri);

            assertTrue(file.createNewFile());

            try (Cursor c = TestUtils.queryFile(file,
                    new String[] {MediaStore.MediaColumns.IS_PENDING})) {
                // This file will not have IS_PENDING=1 because create didn't set IS_PENDING.
                assertTrue(c.moveToFirst());
                assertEquals(c.getInt(0), 0);
            }
        } finally {
            file.delete();
            // If create file fails, we should delete the inserted db row.
            deleteWithMediaProviderNoThrow(uri);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testLegacyAppUpdatingOwnershipOfExistingEntry"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[ediaProvider doesn't throw error on usage of unsupported     * or empty/null MIME type.     */   ]) :|: 
    public void testLegacyAppUpdatingOwnershipOfExistingEntry() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);

        final File fullPath = new File(TestUtils.getDcimDir(),
                ""OwnershipChange"" + IMAGE_FILE_NAME);
        final String relativePath = ""DCIM/OwnershipChange"" + IMAGE_FILE_NAME;
        try {
            createImageEntryAs(APP_B_NO_PERMS, relativePath);
            assertThat(fullPath.createNewFile()).isTrue();

            // We have transferred ownership away from APP_B_NO_PERMS so reads / writes
            // should no longer work.
            assertThat(canOpenFileAs(APP_B_NO_PERMS, fullPath, false /* forWrite */)).isFalse();
            assertThat(canOpenFileAs(APP_B_NO_PERMS, fullPath, true /* forWrite */)).isFalse();
        } finally {
            deleteFileAsNoThrow(APP_B_NO_PERMS, fullPath.getAbsolutePath());
            fullPath.delete();
        }
    }

    /**
     * b/156717256,b/156336269: Test that MediaProvider doesn't throw error on usage of unsupported
     * or empty/null MIME type.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testInsertWithUnsupportedMimeType"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[ } finally {                deleteWithMediaProviderNoThrow(uri);            }        }    }   ]) :|: 
    public void testInsertWithUnsupportedMimeType() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);

        final String IMAGE_FILE_DISPLAY_NAME = ""LegacyStorageTest_file_"" + NONCE;
        final File imageFile = new File(TestUtils.getDcimDir(), IMAGE_FILE_DISPLAY_NAME + "".jpg"");

        for (String mimeType : new String[] {
            ""image/*"", """", null, ""foo/bar""
        }) {
            Uri uri = null;
            try {
                ContentValues values = new ContentValues();
                values.put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DCIM);
                if (TextUtils.isEmpty(mimeType)) {
                    values.put(MediaStore.MediaColumns.DISPLAY_NAME, imageFile.getName());
                } else {
                    values.put(MediaStore.MediaColumns.DISPLAY_NAME, IMAGE_FILE_DISPLAY_NAME);
                }
                values.put(MediaStore.MediaColumns.MIME_TYPE, mimeType);

                uri = getContentResolver().insert(getImageContentUri(), values, Bundle.EMPTY);
                assertNotNull(uri);

                try (final OutputStream fos = getContentResolver().openOutputStream(uri, ""rw"")) {
                    fos.write(BYTES_DATA1);
                }

                // Closing the file should trigger a scan, we still scan again to ensure MIME type
                // is extracted from file extension
                assertNotNull(MediaStore.scanFile(getContentResolver(), imageFile));

                final String[] projection = {MediaStore.MediaColumns.DISPLAY_NAME,
                        MediaStore.MediaColumns.MIME_TYPE};
                try (Cursor c = getContentResolver().query(uri, projection, null, null, null)) {
                    assertTrue(c.moveToFirst());
                    assertEquals(c.getCount(), 1);
                    assertEquals(c.getStr"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testLegacySystemGalleryCanRenameImagesAndVideosWithoutDbUpdates"	""	"1: granted"	"([1:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[1]:method_text:[e.delete();            denyAppOpsToUid(Process.myUid(), SYSTEM_GALERY_APPOPS);        }    }   ]) :|: 
    public void testLegacySystemGalleryCanRenameImagesAndVideosWithoutDbUpdates() throws Exception {
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);

        final File otherAppVideoFile = new File(getDcimDir(), ""other_"" + VIDEO_FILE_NAME);
        final File videoFile = new File(getPicturesDir(), VIDEO_FILE_NAME);

        try {
            allowAppOpsToUid(Process.myUid(), SYSTEM_GALERY_APPOPS);

            // Create and write some data to the file
            assertThat(createFileAs(APP_B_NO_PERMS, otherAppVideoFile.getPath())).isTrue();
            try (FileOutputStream fos = new FileOutputStream(otherAppVideoFile)) {
                fos.write(BYTES_DATA1);
            }

            // Assert legacy system gallery can rename the file.
            assertCanRenameFile(otherAppVideoFile, videoFile, false /* checkDatabase */);
            assertFileContent(videoFile, BYTES_DATA1);
            // Database was not updated.
            assertThat(getFileRowIdFromDatabase(otherAppVideoFile)).isNotEqualTo(-1);
            assertThat(getFileRowIdFromDatabase(videoFile)).isEqualTo(-1);
        } finally {
            otherAppVideoFile.delete();
            videoFile.delete();
            denyAppOpsToUid(Process.myUid(), SYSTEM_GALERY_APPOPS);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testLegacySystemGalleryWithoutWESCannotRename"	""	"1: granted"	"([1:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[1]:method_text:[e.delete();            denyAppOpsToUid(Process.myUid(), SYSTEM_GALERY_APPOPS);        }    }   ]) :|: 
    public void testLegacySystemGalleryWithoutWESCannotRename() throws Exception {
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ false);

        final File otherAppVideoFile = new File(getDcimDir(), ""other_"" + VIDEO_FILE_NAME);
        final File videoFile = new File(getPicturesDir(), VIDEO_FILE_NAME);

        try {
            allowAppOpsToUid(Process.myUid(), SYSTEM_GALERY_APPOPS);

            // Create file of other app.
            assertThat(createFileAs(APP_B_NO_PERMS, otherAppVideoFile.getPath())).isTrue();

            // Check we cannot rename it.
            assertThat(otherAppVideoFile.renameTo(videoFile)).isFalse();
        } finally {
            otherAppVideoFile.delete();
            videoFile.delete();
            denyAppOpsToUid(Process.myUid(), SYSTEM_GALERY_APPOPS);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testLegacyWESCanRenameImagesAndVideosWithDbUpdates_hasW"	""	"1: granted"	"([1:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[1]:method_text:[nally {            otherAppVideoFile.delete();            videoFile.delete();        }    }   ]) :|: 
    public void testLegacyWESCanRenameImagesAndVideosWithDbUpdates_hasW() throws Exception {
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);

        final File otherAppVideoFile = new File(getDcimDir(), ""other_"" + VIDEO_FILE_NAME);
        final File videoFile = new File(getPicturesDir(), VIDEO_FILE_NAME);

        try {
            // Create and write some data to the file
            assertThat(createFileAs(APP_B_NO_PERMS, otherAppVideoFile.getPath())).isTrue();
            try (FileOutputStream fos = new FileOutputStream(otherAppVideoFile)) {
                fos.write(BYTES_DATA1);
            }

            // Assert legacy WES can rename the file (including database updated).
            assertCanRenameFile(otherAppVideoFile, videoFile);
            assertFileContent(videoFile, BYTES_DATA1);
        } finally {
            otherAppVideoFile.delete();
            videoFile.delete();
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.legacy.LegacyStorageTest"	"testScanUpdatesMetadataForNewlyAddedFile_hasRW"	""	"1: granted"	"([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[granted]:[2]:method_text:[ke sure inserting files from app private directories in legacy apps is allowed via DATA.     */   ]) :|: 
    public void testScanUpdatesMetadataForNewlyAddedFile_hasRW() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);

        final File jpgFile = new File(getPicturesDir(), IMAGE_FILE_NAME);
        try {
            // Copy the image content to jpgFile
            try (InputStream in =
                         getContext().getResources().openRawResource(R.raw.img_with_metadata);
                 FileOutputStream out = new FileOutputStream(jpgFile)) {
                FileUtils.copy(in, out);
                out.getFD().sync();
            }
            // Insert a new row for jpgFile.
            ContentValues values = new ContentValues();
            values.put(MediaStore.MediaColumns.DATA, jpgFile.getAbsolutePath());
            final Uri targetUri =
                    getContentResolver().insert(getImageContentUri(), values, Bundle.EMPTY);
            assertNotNull(targetUri);

            try (Cursor c = TestUtils.queryFile(jpgFile, MediaStore.MediaColumns.DATE_TAKEN)) {
                // Since the file is not yet scanned, no metadata is available
                assertThat(c.moveToFirst()).isTrue();
                assertThat(c.getString(0)).isNull();
            }

            // Scan the file to update the metadata. This scan shouldn't no-op
            final Uri scanUri = MediaStore.scanFile(getContentResolver(), jpgFile);
            assertNotNull(scanUri);

            // ScanFile was able to update the metadata hence we should see DATE_TAKEN value.
            try (Cursor c = TestUtils.queryFile(jpgFile, MediaStore.MediaColumns.DATE_TAKEN)) {
                assertThat(c.moveToFirst()).isTrue();
                assertThat(c.getString(0)).isNotNull();
            }
        } finally {
            jpgFile.delete();
        }
    }

    /**
     * Make sure inserting files from app private directories in legacy a"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.ScopedStorageTest"	"testAccess_file"	""	"1: granted"	"([1:/android/scopedstorage/cts/ScopedStorageTest.java]:[granted]:[1]:method_text:[.scanFile(getContentResolver(), shellPdfAtRoot);            myAppPdf.delete();        }    }   ]) :|: 
    public void testAccess_file() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);

        final File downloadDir = getDownloadDir();
        final File otherAppPdf = new File(downloadDir, ""other-"" + NONMEDIA_FILE_NAME);
        final File shellPdfAtRoot = new File(getExternalStorageDir(),
                ""shell-"" + NONMEDIA_FILE_NAME);
        final File otherAppImage = new File(getDcimDir(), ""other-"" + IMAGE_FILE_NAME);
        final File myAppPdf = new File(downloadDir, ""my-"" + NONMEDIA_FILE_NAME);
        final File doesntExistPdf = new File(downloadDir, ""nada-"" + NONMEDIA_FILE_NAME);

        try {
            assertThat(createFileAs(APP_B_NO_PERMS, otherAppPdf.getPath())).isTrue();
            assertThat(createFileAs(APP_B_NO_PERMS, otherAppImage.getPath())).isTrue();

            // We can read our image and pdf files.
            assertThat(myAppPdf.createNewFile()).isTrue();
            assertFileAccess_readWrite(myAppPdf);

            // We can read the other app's image file because we hold R_E_S, but we can
            // check only exists for the pdf files.
            assertFileAccess_readOnly(otherAppImage);
            assertFileAccess_existsOnly(otherAppPdf);
            assertAccess(doesntExistPdf, false, false, false);

            // We can check only exists for another app's files on root.
            createFileAsLegacyApp(shellPdfAtRoot);
            MediaStore.scanFile(getContentResolver(), shellPdfAtRoot);
            assertFileAccess_existsOnly(shellPdfAtRoot);
        } finally {
            deleteFileAsNoThrow(APP_B_NO_PERMS, otherAppPdf.getAbsolutePath());
            deleteFileAsNoThrow(APP_B_NO_PERMS, otherAppImage.getAbsolutePath());
            deleteAsLegacyApp(shellPdfAtRoot);
            MediaStore.scanFile(getContentResolver(), shellPdfAtRoot);
            myAppPdf.delete();
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/src/android/scopedstorage/cts/ScopedStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.ScopedStorageTest"	"testAccess_directory"	""	"1: granted"	"([2:/android/scopedstorage/cts/ScopedStorageTest.java]:[granted]:[2]:method_text:[ false, false);        } finally {            deleteAsLegacyApp(topLevelDir);        }    }   ]) :|: 
    public void testAccess_directory() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        pollForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, /*granted*/ true);
        File topLevelDir = new File(getExternalStorageDir(), ""Test"");
        try {
            // Let app B create a file in its data dir
            final File otherAppExternalDataDir = new File(getExternalFilesDir().getPath().replace(
                    THIS_PACKAGE_NAME, APP_B_NO_PERMS.getPackageName()));
            final File otherAppExternalDataSubDir = new File(otherAppExternalDataDir, ""subdir"");
            final File otherAppExternalDataFile = new File(otherAppExternalDataSubDir, ""abc.jpg"");
            assertThat(createFileAs(APP_B_NO_PERMS, otherAppExternalDataFile.getAbsolutePath()))
                    .isTrue();

            // We cannot read or write the file, but app B can.
            assertThat(canReadAndWriteAs(APP_B_NO_PERMS,
                    otherAppExternalDataFile.getAbsolutePath())).isTrue();
            assertCannotReadOrWrite(otherAppExternalDataFile);

            // We cannot read or write the dir, but app B can.
            assertThat(canReadAndWriteAs(APP_B_NO_PERMS,
                    otherAppExternalDataDir.getAbsolutePath())).isTrue();
            assertCannotReadOrWrite(otherAppExternalDataDir);

            // We cannot read or write the sub dir, but app B can.
            assertThat(canReadAndWriteAs(APP_B_NO_PERMS,
                    otherAppExternalDataSubDir.getAbsolutePath())).isTrue();
            assertCannotReadOrWrite(otherAppExternalDataSubDir);

            // We can read and write our own app dir, but app B cannot.
            assertThat(canReadAndWriteAs(APP_B_NO_PERMS,
                    getExternalFilesDir().getAbsolutePath())).isFalse();
            assertCanAccessMyAppFile(getExternalFilesDir());

            assertDirectoryAccess(getDcimDir(), /* exists */ true, /* canWrite"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/src/android/scopedstorage/cts/ScopedStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.ScopedStorageTest"	"testAndroidMedia"	""	"1: granted"	"([1:/android/scopedstorage/cts/ScopedStorageTest.java]:[granted]:[1]:method_text:[ERMS);        assertSharedStorageAccess(getDcimDir(), getDownloadDir(), APP_B_NO_PERMS);    }   ]) :|: 
    public void testAndroidMedia() throws Exception {
        // Check that the app does not have legacy external storage access
        if (isAtLeastS()) {
            assertThat(Environment.isExternalStorageLegacy()).isFalse();
        }

        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);

        final File myMediaDir = getExternalMediaDir();
        final File otherAppMediaDir = new File(myMediaDir.getAbsolutePath()
                .replace(THIS_PACKAGE_NAME, APP_B_NO_PERMS.getPackageName()));

        // Verify that accessing other app's /sdcard/Android/media behaves exactly like DCIM for
        // image files and exactly like Downloads for documents.
        assertSharedStorageAccess(otherAppMediaDir, otherAppMediaDir, APP_B_NO_PERMS);
        assertSharedStorageAccess(getDcimDir(), getDownloadDir(), APP_B_NO_PERMS);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/src/android/scopedstorage/cts/ScopedStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.ScopedStorageTest"	"testWallpaperApisReadExternalStorage"	""	"1: granted"	"([1:/android/scopedstorage/cts/ScopedStorageTest.java]:[granted]:[1]:method_text:[kFastDrawable();        wallpaperManager.getWallpaperFile(WallpaperManager.FLAG_SYSTEM);    }   ]) :|: 
    public void testWallpaperApisReadExternalStorage() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        WallpaperManager wallpaperManager = WallpaperManager.getInstance(getContext());
        wallpaperManager.getFastDrawable();
        wallpaperManager.peekFastDrawable();
        wallpaperManager.getWallpaperFile(WallpaperManager.FLAG_SYSTEM);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/src/android/scopedstorage/cts/ScopedStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.ScopedStorageTest"	"testOpenOtherPendingFilesFromFuse"	""	"1: granted"	"([1:/android/scopedstorage/cts/ScopedStorageTest.java]:[granted]:[1]:method_text:[       deleteFileAsNoThrow(APP_B_NO_PERMS, otherPendingFile.getAbsolutePath());        }    }   ]) :|: 
    public void testOpenOtherPendingFilesFromFuse() throws Exception {
        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);
        final File otherPendingFile = new File(getDcimDir(), IMAGE_FILE_NAME);
        try {
            assertCreateFilesAs(APP_B_NO_PERMS, otherPendingFile);

            // We can read other app's pending file from FUSE via filePath
            assertCanQueryAndOpenFile(otherPendingFile, ""r"");

            // We can also read other app's pending file via MediaStore API
            assertNotNull(openWithMediaProvider(otherPendingFile, ""r""));
        } finally {
            deleteFileAsNoThrow(APP_B_NO_PERMS, otherPendingFile.getAbsolutePath());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/src/android/scopedstorage/cts/ScopedStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.ScopedStorageTest"	"testClearPackageData"	""	"1: granted"	"([1:/android/scopedstorage/cts/ScopedStorageTest.java]:[granted]:[1]:method_text:[        }    }    /**     * Tests that an instant app can't access external storage.     */   ]) :|: 
    public void testClearPackageData() throws Exception {
        // Check that the app does not have legacy external storage access
        if (isAtLeastS()) {
            assertThat(Environment.isExternalStorageLegacy()).isFalse();
        }

        pollForPermission(Manifest.permission.READ_EXTERNAL_STORAGE, /*granted*/ true);

        File fileToRemain = new File(getPicturesDir(), IMAGE_FILE_NAME);
        String testAppPackageName = APP_B_NO_PERMS.getPackageName();
        File fileToBeDeleted =
                new File(
                        getAndroidMediaDir(),
                        String.format(""%s/%s"", testAppPackageName, IMAGE_FILE_NAME));
        File nestedFileToBeDeleted =
                new File(
                        getAndroidMediaDir(),
                        String.format(""%s/nesteddir/%s"", testAppPackageName, IMAGE_FILE_NAME));

        try {
            createAndCheckFileAsApp(APP_B_NO_PERMS, fileToRemain);
            createAndCheckFileAsApp(APP_B_NO_PERMS, fileToBeDeleted);
            createAndCheckFileAsApp(APP_B_NO_PERMS, nestedFileToBeDeleted);

            executeShellCommand(""pm clear --user "" + getCurrentUser() + "" "" + testAppPackageName);

            // Wait a max of 5 seconds for the cleaning after ""pm clear"" command to complete.
            int i = 0;
            while(i < 10 && getFileRowIdFromDatabase(fileToBeDeleted) != -1
                && getFileRowIdFromDatabase(nestedFileToBeDeleted) != -1) {
                Thread.sleep(500);
                i++;
            }

            assertThat(getFileOwnerPackageFromDatabase(fileToRemain)).isNull();
            assertThat(getFileRowIdFromDatabase(fileToRemain)).isNotEqualTo(-1);

            assertThat(getFileOwnerPackageFromDatabase(fileToBeDeleted)).isNull();
            assertThat(getFileRowIdFromDatabase(fileToBeDeleted)).isEqualTo(-1);

            assertThat(getFileOwnerPackageFromDatabase(nestedFileToBeDeleted)).isNull();
            assertThat(getFileRowIdFromDatab"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/src/android/scopedstorage/cts/ScopedStorageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.device.BypassDatabaseOperationsTest"	"getTestParameters"	""	"1: granted"	"([1:/android/scopedstorage/cts/device/BypassDatabaseOperationsTest.java]:[granted]:[1]:method_text:[ targeting     * targetSDK=31 or higher will not bypass database operations by default.     */   ]) :|: /*
 *.
 */

package android.scopedstorage.cts.device;

import static android.app.AppOpsManager.permissionToOp;
import static android.scopedstorage.cts.lib.TestUtils.allowAppOpsToUid;
import static android.scopedstorage.cts.lib.TestUtils.createFileAs;
import static android.scopedstorage.cts.lib.TestUtils.deleteFileAs;
import static android.scopedstorage.cts.lib.TestUtils.deleteFileAsNoThrow;
import static android.scopedstorage.cts.lib.TestUtils.denyAppOpsToUid;
import static android.scopedstorage.cts.lib.TestUtils.getContentResolver;
import static android.scopedstorage.cts.lib.TestUtils.getDcimDir;
import static android.scopedstorage.cts.lib.TestUtils.getPicturesDir;
import static android.scopedstorage.cts.lib.TestUtils.installApp;
import static android.scopedstorage.cts.lib.TestUtils.installAppWithStoragePermissions;
import static android.scopedstorage.cts.lib.TestUtils.renameFileAs;
import static android.scopedstorage.cts.lib.TestUtils.uninstallAppNoThrow;

import static androidx.test.InstrumentationRegistry.getContext;

import static com.google.common.truth.Truth.assertThat;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import android.Manifest;
import android.app.AppOpsManager;
import android.provider.MediaStore;
import android.scopedstorage.cts.lib.TestUtils;
import android.util.Log;

import androidx.test.filters.SdkSuppress;

import com.android.cts.install.lib.TestApp;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameter;
import org.junit.runners.Parameterized.Parameters;

import java.io.File;

/**
 * Device-side test suite to verify file path operations optionally bypassing database operations.
 */
@RunWith(Parameterized.class)
public class BypassDatabaseOperationsTest extends ScopedStorageBaseDeviceTest {
    static final String TAG = ""BypassDatabaseOperationsTest"";"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/device/src/android/scopedstorage/cts/device/BypassDatabaseOperationsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.device.RedactUriDeviceTest"	"testSharedRedactedUri_openFileForRead"	""	"1: granted"	"([1:/android/scopedstorage/cts/device/RedactUriDeviceTest.java]:[granted]:[1]:method_text:[     }    }    /*     * Verify that the app with redacted URI granted can query it.     **/   ]) :|: 
    public void testSharedRedactedUri_openFileForRead() throws Exception {
        forceStopApp(APP_B_NO_PERMS.getPackageName());
        final File img = stageImageFileWithMetadata(IMAGE_FILE_NAME);
        try {
            Uri redactedUri = shareAndGetRedactedUri(img, APP_B_NO_PERMS);
            assertThat(isFileOpenRedacted(APP_B_NO_PERMS, redactedUri)).isTrue();
        } finally {
            img.delete();
        }
    }

    /*
     * Verify that the app with redacted URI granted can query it.
     **/"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/device/src/android/scopedstorage/cts/device/RedactUriDeviceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.scopedstorage.cts.device.ScopedStorageDeviceTest"	"getTestParameters"	""	"1: granted"	"([1:/android/scopedstorage/cts/device/ScopedStorageDeviceTest.java]:[granted]:[1]:method_text:[  * Test that we enforce certain media types can only be created in certain directories.     */   ]) :|: /*
 *.
 */

package android.scopedstorage.cts.device;

import static android.app.AppOpsManager.permissionToOp;
import static android.os.ParcelFileDescriptor.MODE_CREATE;
import static android.os.ParcelFileDescriptor.MODE_READ_WRITE;
import static android.os.SystemProperties.getBoolean;
import static android.scopedstorage.cts.lib.RedactionTestHelper.assertExifMetadataMatch;
import static android.scopedstorage.cts.lib.RedactionTestHelper.assertExifMetadataMismatch;
import static android.scopedstorage.cts.lib.RedactionTestHelper.getExifMetadata;
import static android.scopedstorage.cts.lib.RedactionTestHelper.getExifMetadataFromRawResource;
import static android.scopedstorage.cts.lib.TestUtils.BYTES_DATA2;
import static android.scopedstorage.cts.lib.TestUtils.STR_DATA2;
import static android.scopedstorage.cts.lib.TestUtils.allowAppOpsToUid;
import static android.scopedstorage.cts.lib.TestUtils.assertCanRenameDirectory;
import static android.scopedstorage.cts.lib.TestUtils.assertCanRenameFile;
import static android.scopedstorage.cts.lib.TestUtils.assertCantRenameDirectory;
import static android.scopedstorage.cts.lib.TestUtils.assertCantRenameFile;
import static android.scopedstorage.cts.lib.TestUtils.assertDirectoryContains;
import static android.scopedstorage.cts.lib.TestUtils.assertFileContent;
import static android.scopedstorage.cts.lib.TestUtils.assertMountMode;
import static android.scopedstorage.cts.lib.TestUtils.assertThrows;
import static android.scopedstorage.cts.lib.TestUtils.canOpen;
import static android.scopedstorage.cts.lib.TestUtils.canOpenFileAs;
import static android.scopedstorage.cts.lib.TestUtils.canQueryOnUri;
import static android.scopedstorage.cts.lib.TestUtils.checkPermission;
import static android.scopedstorage.cts.lib.TestUtils.createFileAs;
import static android.scopedstorage.cts.lib.TestUtils.deleteFileAs;
import static android.scopedstorage.cts.lib.TestUtils.deleteFileAsNoThrow;
import static android.scopedstorage.cts.lib.TestUtils.deleteRecur"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/device/src/android/scopedstorage/cts/device/ScopedStorageDeviceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.compatibility.common.util.BaseDefaultPermissionGrantPolicyTest"	"isEmpty"	""	"2: granted ACCESS_COARSE_LOCATION"	"([1:/com/android/compatibility/common/util/BaseDefaultPermissionGrantPolicyTest.java]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[f brand vs. SHA256 hash            }            this.permissions = permissions;        }    }}]) :|: public void testDefaultGrantsWithRemoteExceptions(boolean preGrantsOnly) throws Exception {
        List<PackageInfo> allPackages = getAllPackages();
        Set<String> runtimePermNames = getRuntimePermissionNames(allPackages);
        ArrayMap<String, PackageInfo> packagesToVerify =
                getMsdkTargetingPackagesUsingRuntimePerms(allPackages, runtimePermNames);

        // Ignore CTS infrastructure
        packagesToVerify.remove(""android.tradefed.contentprovider"");

        SparseArray<UidState> pregrantUidStates = new SparseArray<>();

        addDefaultSystemHandlerPermissions(packagesToVerify, pregrantUidStates);

        // Add split permissions that were split from non-runtime permissions
        if (ApiLevelUtil.isAtLeast(Build.VERSION_CODES.Q)) {
            addSplitFromNonDangerousPermissions(packagesToVerify, pregrantUidStates);
        }

        // Add exceptions
        addExceptionsDefaultPermissions(packagesToVerify, runtimePermNames, pregrantUidStates);

        // packageName -> message -> [permission]
        ArrayMap<String, ArrayMap<String, ArraySet<String>>> violations = new ArrayMap();

        // Enforce default grants in the right state
        checkDefaultGrantsInCorrectState(packagesToVerify, pregrantUidStates, violations);

        // Nothing else should have default grants
        checkPackagesForUnexpectedGrants(packagesToVerify, runtimePermNames, violations,
                preGrantsOnly);

        logPregrantUidStates(pregrantUidStates);

        // Bail if we found any violations
        if (!violations.isEmpty()) {
            fail(createViolationsErrorString(violations));
        }
    }


    /**
     * Primarily invoked by business logic, set default permission grant exceptions for this
     * instance of the test class. This is an alternative to downloading the encrypted xml
     * file, a process which is now deprecated.
     *
     * @param pkg         the package name
     * @param sha256      the sha256 cert diges"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/common/device-side/util-axt/src/com/android/compatibility/common/util/BaseDefaultPermissionGrantPolicyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.verifier.managedprovisioning.VpnTestActivity"	"setPassFailButtonClickListeners"	""	"2: UserManager.DISALLOW admin"	"([6:/com/android/cts/verifier/managedprovisioning/VpnTestActivity.java]:[admin]:[6]:method_text:[    } else {            Log.w(TAG, ""Unexpected request code: "" + requestCode);        }    }   ]) :|: public void test/*
 *.
 */

package com.android.cts.verifier.managedprovisioning;

import android.app.AlertDialog;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.net.VpnService;
import android.net.VpnService.Builder;
import android.os.Bundle;
import android.os.ParcelFileDescriptor;
import android.os.UserManager;
import android.provider.Settings;
import android.util.Log;
import android.widget.TextView;
import android.net.VpnService;
import android.os.ParcelFileDescriptor;

import com.android.cts.verifier.PassFailButtons;
import com.android.cts.verifier.R;

import java.io.IOException;

/**
 * Activity to test Vpn configuration
 */
public class VpnTestActivity extends PassFailButtons.Activity {

    public static final String ACTION_VPN = ""com.android.cts.verifier.managedprovisioning.VPN"";

    public static class MyTestVpnService extends VpnService {
        /*
         * MyVpnTestService is just a stub. This class exists because the framework needs a class
         * inside the app to refer back to, just using VpnService itself won't work.
         */
    }

    private ParcelFileDescriptor descriptor = null;
    private ComponentName mAdminReceiverComponent;
    private DevicePolicyManager mDevicePolicyManager;
    private UserManager mUserManager;
    private static final String TAG = ""DeviceOwnerPositiveTestActivity"";
    private static final int REQUEST_VPN_CODE = 54321;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.vpn_test);
        setPassFailButtonClickListeners();
        mAdminReceiverComponent = new ComponentName(this, DeviceAdminTestReceiver.class.getName());
        mDevicePolicyManager = (DevicePolicyManager) getSystemService(
                Context.DEVICE_POLICY_SERVICE);
        mDevicePolicyManager.addUserRestriction(mAdminReceiverCompo"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/VpnTestActivity.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity"	"startTest"	""	"1: granted"	"([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[granted]:[1]:method_text:[}    }    private interface SetWifiCallback {        void onComplete(boolean isSuccess);    }}]) :|: public void testCompleted(MultiNetworkValidator validator) {
                    if (validator == mMultiNetworkValidators.get(mMultiNetworkValidators.size()
                            - 1)) {
                        // Done all tests.
                        boolean passed = true;
                        for (MultiNetworkValidator multiNetworkValidator :
                                mMultiNetworkValidators) {
                            passed = passed && multiNetworkValidator.mTestResult;
                        }
                        setTestResultAndFinish(passed);
                    } else if (!validator.mTestResult) {
                        setTestResultAndFinish(false);
                    } else {
                        for (int i = 0; i < mMultiNetworkValidators.size(); i++) {
                            if (mMultiNetworkValidators.get(i) == validator) {
                                mCurrentValidator = mMultiNetworkValidators.get(i + 1);
                                mTestNameView.setText(mCurrentValidator.mTestDescription);
                                mCurrentValidator.startTest();
                                break;
                            }
                        }
                    }
                }
            };
    private List<MultiNetworkValidator> mMultiNetworkValidators = Collections.emptyList();
    private final Runnable mTimeToCompletionRunnable = new Runnable() {
        @Override
        public void run() {
            mSecondsToCompletion--;
            if (mSecondsToCompletion > 0) {
                mStartButton.setText("""" + mSecondsToCompletion);
                mMainHandler.postDelayed(this, 1000);
            }
        }
    };

    // User interface elements.
    private Button mStartButton;
    private TextView mTestNameView;
    private TextView mTestInfoView;
    private EditText mAccessPointSsidEditText;
    private EditText mPskEditText;

    // Current state memebers.
    private MultiNetworkValidator"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.verifier.audio.AudioFrequencySpeakerActivity"	"OnBtnClickListener"	""	"2: Microphone microphone"	"([4:/com/android/cts/verifier/audio/AudioFrequencySpeakerActivity.java]:[microphone]:[4]:method_text:[ady_text));            enableLayout(R.id.audio_frequency_speaker_layout, false);        }    }}]) :|: public void test/*
 *.
 */

package com.android.cts.verifier.audio;

import com.android.cts.verifier.CtsVerifierReportLog;
import com.android.cts.verifier.R;
import com.android.cts.verifier.audio.wavelib.*;
import com.android.compatibility.common.util.ResultType;
import com.android.compatibility.common.util.ResultUnit;
import android.content.BroadcastReceiver;
import android.content.Intent;
import android.content.IntentFilter;

import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;

import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.SystemClock;

import android.util.Log;

import android.view.View;
import android.view.View.OnClickListener;

import android.widget.Button;
import android.widget.TextView;
import android.widget.ProgressBar;

/**
 * Tests Audio Device roundtrip latency by using a loopback plug.
 */
public class AudioFrequencySpeakerActivity extends AudioFrequencyActivity implements Runnable,
    AudioRecord.OnRecordPositionUpdateListener {
    private static final String TAG = ""AudioFrequencySpeakerActivity"";

    static final int TEST_STARTED = 900;
    static final int TEST_ENDED = 901;
    static final int TEST_MESSAGE = 902;
    static final double MIN_ENERGY_BAND_1 = -50.0;          //dB Full Scale
    static final double MAX_ENERGY_BAND_1_BASE = -60.0;     //dB Full Scale
    static final double MIN_FRACTION_POINTS_IN_BAND = 0.3;

    final OnBtnClickListener mBtnClickListener = new OnBtnClickListener();

    Button mLoopbackPlugReady;          //user signal to have connected USB Microphone
    Button mTestButton;                 //user to start test
    String mUsbDevicesInfo;             //usb device info for report
    TextView mResultText;
    TextView mUsbStatusText;
    ProgressBar mProgressBar;

    private boolean mIsRecording = false;
    private final Object mRecordingLock = new Object();
    private AudioRecord mRecorder;
    private int mMinRec"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/AudioFrequencySpeakerActivity.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.verifier.audio.AudioFrequencyVoiceRecognitionActivity"	"OnBtnClickListener"	""	"2: Microphone microphone"	"([11:/com/android/cts/verifier/audio/AudioFrequencyVoiceRecognitionActivity.java]:[microphone]:[11]:method_text:[STone),                20 * Math.log10(mRMSMaxTone));        showMessage(TEST_TONE, str);    }}]) :|: public void test/*
 *.
 */

package com.android.cts.verifier.audio;

import com.android.cts.verifier.CtsVerifierReportLog;
import com.android.cts.verifier.R;
import com.android.cts.verifier.audio.wavelib.*;
import com.android.compatibility.common.util.ResultType;
import com.android.compatibility.common.util.ResultUnit;

import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import android.widget.ProgressBar;

/**
 * Tests Audio built in Microphone response for Voice Recognition audio source feature.
 */
public class AudioFrequencyVoiceRecognitionActivity extends AudioFrequencyActivity {
    private static final String TAG = ""VoiceRecognition"";

    private static final int TEST_STARTED = 900;
    private static final int TEST_MESSAGE = 903;
    private static final int TEST_ENDED = 904;
    private static final int TEST_ENDED_ERROR = 905;
    private static final double MIN_FRACTION_POINTS_IN_BAND = 0.5;

    private static final double TONE_RMS_EXPECTED = -22.35; //VOICE_RECOGNITION levels
    private static final double TONE_RMS_MAX_ERROR = 3.0;
    private static final double RMS_SMOOTHING_PARAM = 0.9;

    private static final double MAX_VAL = Math.pow(2, 15);

    private static final int SOURCE_TONE = 0;
    private static final int SOURCE_NOISE = 1;

    private static final int TEST_NONE = -1;
    private static final int TEST_TONE = 0;
    private static final int TEST_NOISE = 1;
    private static final int TEST_USB_BACKGROUND = 2;
    private static final int TEST_USB_NOISE = 3;
    private static final int TEST_COUNT = 4;

    private static final int TEST_DURATION_DEFAULT_MS = 2000;
    private static final int TEST_DURATION_TONE_MS = TEST_DURATION_DEFAULT_MS;
    private static final int TEST_DURATION_NOISE"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/AudioFrequencyVoiceRecognitionActivity.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.verifier.audio.AudioFrequencyUnprocessedActivity"	"OnBtnClickListener"	""	"2: Microphone microphone"	"([11:/com/android/cts/verifier/audio/AudioFrequencyUnprocessedActivity.java]:[microphone]:[11]:method_text:[0) {                mPipe.write(mAudioShortArray, 0, nSamplesRead);            }        }    }}]) :|: public void test/*
 *.
 */

package com.android.cts.verifier.audio;

import com.android.cts.verifier.CtsVerifierReportLog;
import com.android.cts.verifier.R;
import com.android.cts.verifier.audio.wavelib.*;
import com.android.compatibility.common.util.ResultType;
import com.android.compatibility.common.util.ResultUnit;

import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioTrack;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.SystemClock;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import android.widget.ProgressBar;

/**
 * Tests Audio built in Microphone response for Unprocessed audio source feature.
 */
public class AudioFrequencyUnprocessedActivity extends AudioFrequencyActivity implements Runnable,
    AudioRecord.OnRecordPositionUpdateListener {
    private static final String TAG = ""AudioFrequencyUnprocessedActivity"";

    private static final int TEST_STARTED = 900;
    private static final int TEST_MESSAGE = 903;
    private static final int TEST_ENDED = 904;
    private static final int TEST_ENDED_ERROR = 905;
    private static final double MIN_FRACTION_POINTS_IN_BAND = 0.5;

    private static final double TONE_RMS_EXPECTED = -36.0;
    private static final double TONE_RMS_MAX_ERROR = 3.0;

    private static final double MAX_VAL = Math.pow(2, 15);
    private static final double CLIP_LEVEL = (MAX_VAL-10) / MAX_VAL;

    private static final int SOURCE_TONE = 0;
    private static final int SOURCE_NOISE = 1;

    private static final int TEST_NONE = -1;
    private static final int TEST_TONE = 0;
    private static final int TEST_NOISE = 1;
    private static final int TEST_USB_BACKGROUND = 2;
    private static final int TEST_USB_NOISE = 3;
    private static final int TEST_COUNT = 4;"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/AudioFrequencyUnprocessedActivity.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.verifier.audio.RingerModeActivity"	"isLowRamDevice"	""	"1: silent"	"([2:/com/android/cts/verifier/audio/RingerModeActivity.java]:[silent]:[2]:method_text:[eRingerDndOn());        tests.add(new TestSetRingerModePolicyAccessDndOn());        // TODO: Add a]) :|: /*
 *.
 */

package com.android.cts.verifier.audio;


import static android.media.AudioManager.ADJUST_LOWER;
import static android.media.AudioManager.ADJUST_RAISE;
import static android.media.AudioManager.ADJUST_SAME;
import static android.media.AudioManager.RINGER_MODE_NORMAL;
import static android.media.AudioManager.RINGER_MODE_SILENT;
import static android.media.AudioManager.RINGER_MODE_VIBRATE;
import static android.media.AudioManager.STREAM_MUSIC;
import static android.media.AudioManager.USE_DEFAULT_STREAM_TYPE;
import static android.media.AudioManager.VIBRATE_SETTING_OFF;
import static android.media.AudioManager.VIBRATE_SETTING_ON;
import static android.media.AudioManager.VIBRATE_SETTING_ONLY_SILENT;
import static android.media.AudioManager.VIBRATE_TYPE_NOTIFICATION;
import static android.media.AudioManager.VIBRATE_TYPE_RINGER;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import android.app.ActivityManager;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Vibrator;
import android.provider.Settings;
import android.util.Log;
import android.view.SoundEffectConstants;
import android.view.View;
import android.view.ViewGroup;

import com.android.cts.verifier.R;
import com.android.cts.verifier.notifications.InteractiveVerifierActivity;

import java.util.ArrayList;
import java.util.List;

/**
 * Contains tests that require {@link AudioManager#getRingerMode()} to be in a particular starting
 * state. Only runs on {@link ActivityManager#isLowRamDevice()} devices that don't support
 * {@link android.service.notification.ConditionProviderService}. Otherwise the tests live in
 * AudioManagerTests in non-verifier cts.
 */
public class RingerModeActivity extends Interac"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/RingerModeActivity.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.verifier.audio.RingerModeActivity"	"TestVolumeDndAffectedStream"	""	"1: silent"	"([22:/com/android/cts/verifier/audio/RingerModeActivity.java]:[silent]:[22]:method_text:[dioManager.getStreamVolume(AudioManager.STREAM_MUSIC));            status = PASS;        }    }]) :|: Api method to query the VolumPolicy
        //tests.add(new TestVolumeDndAffectedStream());
        tests.add(new TestVolume());
        tests.add(new TestMuteStreams());
        tests.add(new EnableSoundEffects());
        tests.add(new TestSoundEffects());
        return tests;
    }

    private int getVolumeDelta(int volume) {
        return 1;
    }

    private boolean hasAudioOutput() {
        return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_AUDIO_OUTPUT);
    }

    private void testStreamMuting(int stream) {
        if (stream == AudioManager.STREAM_VOICE_CALL) {
            // Voice call requires MODIFY_PHONE_STATE, so we should not be able to mute
            mAudioManager.adjustStreamVolume(stream, AudioManager.ADJUST_MUTE, 0);
            assertFalse(""Muting stream "" + stream + "" should require MODIFY_PHONE_STATE permission."",
                    mAudioManager.isStreamMute(stream));
        } else {
            mAudioManager.adjustStreamVolume(stream, AudioManager.ADJUST_MUTE, 0);
            assertTrue(""Muting stream "" + stream + "" failed."",
                    mAudioManager.isStreamMute(stream));

            mAudioManager.adjustStreamVolume(stream, AudioManager.ADJUST_UNMUTE, 0);
            assertFalse(""Unmuting stream "" + stream + "" failed."",
                    mAudioManager.isStreamMute(stream));

            mAudioManager.adjustStreamVolume(stream, AudioManager.ADJUST_TOGGLE_MUTE, 0);
            assertTrue(""Toggling mute on stream "" + stream + "" failed."",
                    mAudioManager.isStreamMute(stream));

            mAudioManager.adjustStreamVolume(stream, AudioManager.ADJUST_TOGGLE_MUTE, 0);
            assertFalse(""Toggling mute on stream "" + stream + "" failed."",
                    mAudioManager.isStreamMute(stream));

            mAudioManager.setStreamMute(stream, true);
            assertTrue(""Muting stream "" + stream + "" using setStreamMute failed"",
                    mAudioManager.isStreamMute(stream"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/RingerModeActivity.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.verifier.audio.AudioFrequencyMicActivity"	"OnBtnClickListener"	""	"2: Microphone microphone"	"([10:/com/android/cts/verifier/audio/AudioFrequencyMicActivity.java]:[microphone]:[10]:method_text:[) {                mPipe.write(mAudioShortArray, 0, nSamplesRead);            }        }    }}]) :|: public void test/*
 *.
 */

package com.android.cts.verifier.audio;

import com.android.cts.verifier.R;

import com.android.cts.verifier.CtsVerifierReportLog;
import com.android.cts.verifier.audio.wavelib.*;
import com.android.compatibility.common.util.ResultType;
import com.android.compatibility.common.util.ResultUnit;

import android.content.BroadcastReceiver;
import android.content.Intent;
import android.content.IntentFilter;

import android.media.AudioFormat;
import android.media.AudioTrack;
import android.media.AudioRecord;
import android.media.MediaRecorder;

import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.SystemClock;

import android.util.Log;

import android.view.View;
import android.view.View.OnClickListener;

import android.widget.Button;
import android.widget.TextView;
import android.widget.ProgressBar;

/**
 * Tests Audio built in Microphone response using external speakers and USB reference microphone.
 */
public class AudioFrequencyMicActivity extends AudioFrequencyActivity implements Runnable,
    AudioRecord.OnRecordPositionUpdateListener {
    private static final String TAG = ""AudioFrequencyMicActivity"";

    private static final int TEST_STARTED = 900;
    private static final int TEST_MESSAGE = 903;
    private static final int TEST_ENDED = 904;
    private static final int TEST_ENDED_ERROR = 905;

    private static final double MIN_ENERGY_BAND_1 = -50.0;          //dB Full Scale
    private static final double MAX_ENERGY_BAND_1_BASE = -60.0;     //dB Full Scale
    private static final double MIN_FRACTION_POINTS_IN_BAND = 0.3;
    private static final double MAX_VAL = Math.pow(2, 15);
    private static final double CLIP_LEVEL = (MAX_VAL-10) / MAX_VAL;

    private static final int TEST_NONE = -1;
    private static final int TEST_NOISE = 0;
    private static final int TEST_USB_BACKGROUND = 1;
    private static final int TEST_USB_NOISE = 2;
    private static final int TEST_COUNT = 3;
    priv"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/AudioFrequencyMicActivity.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.verifier.usb.device.UsbDeviceTestActivity"	"getAccessoryList"	""	"1: granted"	"([8:/com/android/cts/verifier/usb/device/UsbDeviceTestActivity.java]:[granted]:[8]:method_text:[     unregisterReceiver(mUsbDevicePermissionReceiver);        }        super.onDestroy();    }}]) :|: public void test/*
 *.
 */

package com.android.cts.verifier.usb.device;

import static com.android.cts.verifier.usb.Util.runAndAssertException;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.usb.UsbConfiguration;
import android.hardware.usb.UsbConstants;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbEndpoint;
import android.hardware.usb.UsbInterface;
import android.hardware.usb.UsbManager;
import android.hardware.usb.UsbRequest;
import android.os.Build;
import android.os.Bundle;
import android.util.ArraySet;
import android.util.Log;
import android.util.Pair;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.android.cts.verifier.PassFailButtons;
import com.android.cts.verifier.R;

import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicInteger;

public class UsbDeviceTestActivity extends PassFailButtons.Activity {
    private static final String ACTION_USB_PERMISSION ="	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/usb/device/UsbDeviceTestActivity.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.verifier.sensors.StepSensorPermissionTestActivity"	"StepSensorPermissionTestActivity"	""	"2: granted ACTIVITY_RECOGNITION"	"([2:/com/android/cts/verifier/sensors/StepSensorPermissionTestActivity.java]:[ACTIVITY_RECOGNITION]:[2]:method_text:[        @Override        public void onAccuracyChanged(Sensor sensor, int i) {        }    }}]) :|: public void test/*
 *.
 */

package com.android.cts.verifier.sensors;

import com.android.cts.verifier.sensors.base.SensorCtsVerifierTestActivity;

import android.Manifest;
import com.android.cts.verifier.R;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.net.Uri;
import android.provider.Settings;

import java.util.ArrayList;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

/**
 * Test cases to verify step sensor permissions
 */
public class StepSensorPermissionTestActivity extends SensorCtsVerifierTestActivity
        implements SensorEventListener {
    private static final int STEP_DETECT_DELAY_SECONDS = 30;
    private static final int STEP_COUNT_DELAY_SECONDS = 30;
    // Additional amount of time to give for receiving either a step detect or
    // count event in case the user hasn't started walking at the time the test
    // starts.
    private static final int ADDITIONAL_EVENT_DELAY_SECONDS = 2;

    private SensorManager mSensorManager;

    private boolean mHasAccelFeature = false;
    private boolean mHasStepCounterFeature = false;
    private boolean mHasStepDetectorFeature = false;
    private CountDownLatch mEventReceivedLatch = null;
    private Sensor mSensorUnderTest = null;
    private AccelRecorder mAccelRecorder = null;

    public StepSensorPermissionTestActivity() {
        super(StepSensorPermissionTestActivity.class);
    }

    @Override
    protected void activitySetUp() {
        mSensorManager = (SensorManager) getApplicationContext()
                .getSystemService(Context.SENSOR_SERVICE);

        mHasAccelFeature = getApplicationContext().getPackageManager().hasSystemFeature("	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/StepSensorPermissionTestActivity.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.devicepolicy.cts.NegativeCallAuthorizationTest"	"testHasKeyPair_failIfNotOwner"	"CtsDevicePolicyTestCases"	"1: admin"	"([1:/android/devicepolicy/cts/NegativeCallAuthorizationTest.java]:[admin]:[1]:method_text:[NotOwner() {        assertThrows(SecurityException.class, () -> sDpm.hasKeyPair(ALIAS));    }   ]) :|: 
    @RequireFeature(PackageManager.FEATURE_DEVICE_ADMIN)
    public void testHasKeyPair_failIfNotOwner() {
        assertThrows(SecurityException.class, () -> sDpm.hasKeyPair(ALIAS));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/NegativeCallAuthorizationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.devicepolicy.cts.NegativeCallAuthorizationTest"	"testGetKeyPairGrants_failIfNotOwner"	"CtsDevicePolicyTestCases"	"1: admin"	"([1:/android/devicepolicy/cts/NegativeCallAuthorizationTest.java]:[admin]:[1]:method_text:[Owner() {        assertThrows(SecurityException.class, () -> sDpm.getKeyPairGrants(ALIAS));    }}]) :|: 
    @RequireFeature(PackageManager.FEATURE_DEVICE_ADMIN)
    public void testGetKeyPairGrants_failIfNotOwner() {
        assertThrows(SecurityException.class, () -> sDpm.getKeyPairGrants(ALIAS));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/NegativeCallAuthorizationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.server.wm.BackgroundActivityLaunchTest"	"testBackgroundActivityNotBlockedWhenSystemAlertWindowGranted"	"CtsActivityManagerBackgroundActivityTestCases"	"1: granted"	"([1:/android/server/wm/BackgroundActivityLaunchTest.java]:[granted]:[1]:method_text:[ACKGROUND_ACTIVITY);        assertTrue(""Not able to start foreground activity"", result);    }   ]) :|: 
    public void testBackgroundActivityNotBlockedWhenSystemAlertWindowGranted() throws Exception {
        // enable appopp for SAW for this test
        AppOpsUtils.setOpMode(APP_A_PACKAGE_NAME, ""android:system_alert_window"", MODE_ALLOWED);
        assertEquals(AppOpsUtils.getOpMode(APP_A_PACKAGE_NAME, ""android:system_alert_window""),
                MODE_ALLOWED);

        // Start AppA background activity successfully as the package has SAW
        Intent intent = new Intent();
        intent.setComponent(APP_A_START_ACTIVITY_RECEIVER);
        mContext.sendBroadcast(intent);
        boolean result = waitForActivityFocused(APP_A_BACKGROUND_ACTIVITY);
        assertTrue(""Not able to start foreground activity"", result);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/backgroundactivity/src/android/server/wm/BackgroundActivityLaunchTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.server.wm.BackgroundActivityLaunchTest"	"testDeviceOwner"	"CtsActivityManagerBackgroundActivityTestCases"	"1: admin"	"([2:/android/server/wm/BackgroundActivityLaunchTest.java]:[admin]:[2]:method_text:[sertTaskStack(new ComponentName[]{APP_A_BACKGROUND_ACTIVITY}, APP_A_BACKGROUND_ACTIVITY);    }   ]) :|: 
    @SystemUserOnly(reason = ""Device owner must be SYSTEM user"")
    public void testDeviceOwner() throws Exception {
        // Send pendingIntent from AppA to AppB, and the AppB launch the pending intent to start
        // activity in App A
        if (!mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_DEVICE_ADMIN)) {
            return;
        }

        // Remove existing guest user. The device may already have a guest present if it is
        // configured with config_guestUserAutoCreated.
        //
        // In production flow the DO can only be created before device provisioning finishes
        // (e.g. during SUW), and we make sure the guest user in only created after the device
        // provision is finished. Ideally this test would use the provisioning flow and Device
        // Owner (DO) creation in a similar manner as that of production flow.
        removeGuestUser();

        String cmdResult = runShellCommand(""dpm set-device-owner --user 0 ""
                + APP_A_SIMPLE_ADMIN_RECEIVER.flattenToString());
        assertThat(cmdResult).contains(""Success"");
        EventReceiver receiver = new EventReceiver(
                Event.APP_A_START_BACKGROUND_ACTIVITY_BROADCAST_RECEIVED);
        Intent intent = new Intent();
        intent.setComponent(APP_A_START_ACTIVITY_RECEIVER);
        intent.putExtra(EVENT_NOTIFIER_EXTRA, receiver.getNotifier());

        mContext.sendBroadcast(intent);

        // Waits for final hoop in AppA to start looking for activity
        receiver.waitForEventOrThrow(BROADCAST_DELIVERY_TIMEOUT_MS);
        boolean result = waitForActivityFocused(APP_A_BACKGROUND_ACTIVITY);
        assertTrue(""Not able to launch background activity"", result);
        assertTaskStack(new ComponentName[]{APP_A_BACKGROUND_ACTIVITY}, APP_A_BACKGROUND_ACTIVITY);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/backgroundactivity/src/android/server/wm/BackgroundActivityLaunchTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.server.wm.MultiDisplaySecurityTests"	"testDisplayHasAccess_UIDCanPresentOnPrivateDisplay"	"CtsWindowManagerDeviceTestCases"	"1: granted"	"([1:/android/server/wm/MultiDisplaySecurityTests.java]:[granted]:[1]:method_text:[accessible on private display"",                isUidAccesibleOnDisplay(session2), true);    }   ]) :|: 
    public void testDisplayHasAccess_UIDCanPresentOnPrivateDisplay() {
        final VirtualDisplayLauncher virtualDisplayLauncher =
                mObjectTracker.manage(new VirtualDisplayLauncher());
        // Create a virtual private display.
        final DisplayContent newDisplay = virtualDisplayLauncher
                .setPublicDisplay(false)
                .createDisplay();
        // Launch an embeddable activity into the private display.
        // Assert that the UID can present on display.
        final ActivitySession session1 = virtualDisplayLauncher.launchActivityOnDisplay(
                DISPLAY_ACCESS_CHECK_EMBEDDING_ACTIVITY, newDisplay);
        assertEquals(""Activity which the UID should accessible on private display"",
                isUidAccesibleOnDisplay(session1), true);

        // Launch another embeddable activity with a different UID, verify that it will be
        // able to access the display where it was put.
        // Note that set withShellPermission as true in launchActivityOnDisplay is to
        // make sure ACTIVITY_EMBEDDING can be granted by shell.
        final ActivitySession session2 = virtualDisplayLauncher.launchActivityOnDisplay(
                SECOND_ACTIVITY, newDisplay,
                bundle -> bundle.putBoolean(EXTRA_DISPLAY_ACCESS_CHECK, true),
                true /* withShellPermission */, true /* waitForLaunch */);

        // Verify SECOND_ACTIVITY's UID has access to this virtual private display.
        assertEquals(""Second activity which the UID should accessible on private display"",
                isUidAccesibleOnDisplay(session2), true);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MultiDisplaySecurityTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.server.wm.MultiDisplaySecurityTests"	"testDisplayHasAccess_NoAccessWhenUIDNotPresentOnPrivateDisplay"	"CtsWindowManagerDeviceTestCases"	"1: granted"	"([1:/android/server/wm/MultiDisplaySecurityTests.java]:[granted]:[1]:method_text:[ccessible on private display"",                isUidAccesibleOnDisplay(session2), false);    }   ]) :|: 
    public void testDisplayHasAccess_NoAccessWhenUIDNotPresentOnPrivateDisplay() {
        final VirtualDisplayLauncher virtualDisplayLauncher =
                mObjectTracker.manage(new VirtualDisplayLauncher());
        // Create a virtual private display.
        final DisplayContent newDisplay = virtualDisplayLauncher
                .setPublicDisplay(false)
                .createDisplay();
        // Launch an embeddable activity into the private display.
        // Assume that the UID can access on display.
        final ActivitySession session1 = virtualDisplayLauncher.launchActivityOnDisplay(
                DISPLAY_ACCESS_CHECK_EMBEDDING_ACTIVITY, newDisplay);
        assertEquals(""Activity which the UID should accessible on private display"",
                isUidAccesibleOnDisplay(session1), true);

        // Verify SECOND_NO_EMBEDDING_ACTIVITY's UID can't access this virtual private display
        // since there is no entity with this UID on this display.
        // Note that set withShellPermission as false in launchActivityOnDisplay is to
        // prevent activity can launch when INTERNAL_SYSTEM_WINDOW granted by shell case.
        separateTestJournal();
        final ActivitySession session2 = virtualDisplayLauncher.launchActivityOnDisplay(
                SECOND_NO_EMBEDDING_ACTIVITY, newDisplay, null /* extrasConsumer */,
                false /* withShellPermission */, false /* waitForLaunch */);
        assertEquals(""Second activity which the UID should not accessible on private display"",
                isUidAccesibleOnDisplay(session2), false);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MultiDisplaySecurityTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.jobscheduler.cts.shareduidtests.ClipDataJobTest"	"testClipDataGrant"	"CtsJobSchedulerSharedUidTestCases"	"1: granted"	"([7:/android/jobscheduler/cts/shareduidtests/ClipDataJobTest.java]:[granted]:[7]:method_text:[orrectly fail when trying to grant permissions to things we don't     * have access to.     */   ]) :|: public void testClipDataGrant() throws Exception {
        // Start out with storage low, so job is enqueued but not executed yet.
        setStorageState(true);

        // We need to get a permission grant so that we can grant it to ourself.
        mProvider.call(""grant"", MY_PACKAGE, mFirstUriBundle);
        assertEquals(PackageManager.PERMISSION_GRANTED,
                getContext().checkUriPermission(mFirstUri, Process.myPid(),
                        Process.myUid(), Intent.FLAG_GRANT_READ_URI_PERMISSION));
        assertEquals(PackageManager.PERMISSION_GRANTED,
                getContext().checkUriPermission(mFirstUri, Process.myPid(),
                        Process.myUid(), Intent.FLAG_GRANT_WRITE_URI_PERMISSION));

        // Schedule the job, the system should now also be holding a URI grant for us.
        kTestEnvironment.setExpectedExecutions(1);
        mJobScheduler.schedule(mBuilder.setRequiresStorageNotLow(true)
                .setClipData(mFirstClipData, Intent.FLAG_GRANT_READ_URI_PERMISSION
                        | Intent.FLAG_GRANT_WRITE_URI_PERMISSION).build());

        // Remove the explicit grant, we should still have a grant due to the job.
        mProvider.call(""revoke"", MY_PACKAGE, mFirstUriBundle);
        assertEquals(PackageManager.PERMISSION_GRANTED,
                getContext().checkUriPermission(mFirstUri, Process.myPid(),
                        Process.myUid(), Intent.FLAG_GRANT_READ_URI_PERMISSION));
        assertEquals(PackageManager.PERMISSION_GRANTED,
                getContext().checkUriPermission(mFirstUri, Process.myPid(),
                        Process.myUid(), Intent.FLAG_GRANT_WRITE_URI_PERMISSION));

        // Now allow the job to run and wait for it.
        setStorageState(false);
        assertTrue(""Job with storage not low constraint did not fire when storage not low."",
                kTestEnvironment.awaitExecution());

        // Make sure the job still had the permission granted.
        assertEquals(Pack"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/JobSchedulerSharedUid/src/android/jobscheduler/cts/shareduidtests/ClipDataJobTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.jobscheduler.cts.shareduidtests.ClipDataJobTest"	"testClipDataGrantReschedule"	"CtsJobSchedulerSharedUidTestCases"	"1: granted"	"([7:/android/jobscheduler/cts/shareduidtests/ClipDataJobTest.java]:[granted]:[7]:method_text:[d up.        waitPermissionRevoke(mFirstUri, Intent.FLAG_GRANT_WRITE_URI_PERMISSION, 5000);    }}]) :|: public void testClipDataGrantReschedule() throws Exception {
        // We need to get a permission grant so that we can grant it to ourself.
        mProvider.call(""grant"", MY_PACKAGE, mFirstUriBundle);
        assertEquals(PackageManager.PERMISSION_GRANTED,
                getContext().checkUriPermission(mFirstUri, Process.myPid(),
                        Process.myUid(), Intent.FLAG_GRANT_READ_URI_PERMISSION));
        assertEquals(PackageManager.PERMISSION_GRANTED,
                getContext().checkUriPermission(mFirstUri, Process.myPid(),
                        Process.myUid(), Intent.FLAG_GRANT_WRITE_URI_PERMISSION));

        // Schedule the job, the system should now also be holding a URI grant for us.
        kTestEnvironment.setExpectedExecutions(1);
        mJobScheduler.schedule(mBuilder.setMinimumLatency(60*60*1000)
                .setClipData(mFirstClipData, Intent.FLAG_GRANT_READ_URI_PERMISSION
                        | Intent.FLAG_GRANT_WRITE_URI_PERMISSION).build());

        // Remove the explicit grant, we should still have a grant due to the job.
        mProvider.call(""revoke"", MY_PACKAGE, mFirstUriBundle);
        assertEquals(PackageManager.PERMISSION_GRANTED,
                getContext().checkUriPermission(mFirstUri, Process.myPid(),
                        Process.myUid(), Intent.FLAG_GRANT_READ_URI_PERMISSION));
        assertEquals(PackageManager.PERMISSION_GRANTED,
                getContext().checkUriPermission(mFirstUri, Process.myPid(),
                        Process.myUid(), Intent.FLAG_GRANT_WRITE_URI_PERMISSION));

        // Now reschedule the job to have it happen right now.
        mJobScheduler.schedule(mBuilder.setMinimumLatency(0)
                .setClipData(mFirstClipData, Intent.FLAG_GRANT_READ_URI_PERMISSION
                        | Intent.FLAG_GRANT_WRITE_URI_PERMISSION).build());
        assertTrue(""Job with storage not low constraint did not fire when storage not low."",
                kTestEnvironment.awaitExecutio"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/JobSchedulerSharedUid/src/android/jobscheduler/cts/shareduidtests/ClipDataJobTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.suspendapps.cts.DistractingPackageTest"	"testCannotRestrictUnderDisallowAppsControl"	"CtsSuspendAppsTestCases"	"2: UserManager.DISALLOW admin"	"([1:/android/suspendapps/cts/DistractingPackageTest.java]:[admin]:[1]:method_text:[N));        assertCannotRestrictUnderUserRestriction(UserManager.DISALLOW_APPS_CONTROL);    }   ]) :|: 
    public void testCannotRestrictUnderDisallowAppsControl() throws Exception {
        assumeTrue(FeatureUtil.hasSystemFeature(PackageManager.FEATURE_DEVICE_ADMIN));
        assertCannotRestrictUnderUserRestriction(UserManager.DISALLOW_APPS_CONTROL);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/DistractingPackageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.suspendapps.cts.DistractingPackageTest"	"testCannotRestrictUnderDisallowUninstallApps"	"CtsSuspendAppsTestCases"	"2: UserManager.DISALLOW admin"	"([4:/android/suspendapps/cts/DistractingPackageTest.java]:[admin]:[4]:method_text:[AGES, PackageManager.RESTRICTION_NONE,                ArrayUtils.emptyArray(String.class));    }}]) :|: 
    public void testCannotRestrictUnderDisallowUninstallApps() throws Exception {
        assumeTrue(FeatureUtil.hasSystemFeature(PackageManager.FEATURE_DEVICE_ADMIN));
        assertCannotRestrictUnderUserRestriction(UserManager.DISALLOW_UNINSTALL_APPS);
    }

    @After
    public void tearDown() throws Exception {
        final DevicePolicyManager dpm = mContext.getSystemService(DevicePolicyManager.class);
        if (dpm.isAdminActive(ComponentName.unflattenFromString(DEVICE_ADMIN_COMPONENT))) {
            final Bundle extras = createSingleKeyBundle(EXTRA_PACKAGE_NAME, TEST_APP_PACKAGE_NAME);
            requestDpmAction(ACTION_UNBLOCK_UNINSTALL, extras, mHandler);
            removeDeviceAdmin();
        }
        setDistractionFlagsAndAssertResult(ALL_TEST_PACKAGES, PackageManager.RESTRICTION_NONE,
                ArrayUtils.emptyArray(String.class));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/DistractingPackageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.suspendapps.cts.DistractingPackageTest"	"isEmpty"	"CtsSuspendAppsTestCases"	"1: admin"	"([7:/android/suspendapps/cts/DistractingPackageTest.java]:[admin]:[7]:method_text:[           failed) + ""; expected to fail: "" + Arrays.toString(expectedToFail));        }    }   ]) :|: /*
 *.
 */

package android.suspendapps.cts;

import static android.content.Intent.EXTRA_PACKAGE_NAME;
import static android.content.pm.PackageManager.RESTRICTION_HIDE_FROM_SUGGESTIONS;
import static android.content.pm.PackageManager.RESTRICTION_HIDE_NOTIFICATIONS;
import static android.suspendapps.cts.Constants.ALL_TEST_PACKAGES;
import static android.suspendapps.cts.Constants.DEVICE_ADMIN_COMPONENT;
import static android.suspendapps.cts.Constants.TEST_APP_PACKAGE_NAME;
import static android.suspendapps.cts.Constants.TEST_PACKAGE_ARRAY;
import static android.suspendapps.cts.SuspendTestUtils.addAndAssertProfileOwner;
import static android.suspendapps.cts.SuspendTestUtils.createSingleKeyBundle;
import static android.suspendapps.cts.SuspendTestUtils.removeDeviceAdmin;
import static android.suspendapps.cts.SuspendTestUtils.requestDpmAction;

import static com.android.suspendapps.testdeviceadmin.TestCommsReceiver.ACTION_ADD_USER_RESTRICTION;
import static com.android.suspendapps.testdeviceadmin.TestCommsReceiver.ACTION_BLOCK_UNINSTALL;
import static com.android.suspendapps.testdeviceadmin.TestCommsReceiver.ACTION_UNBLOCK_UNINSTALL;
import static com.android.suspendapps.testdeviceadmin.TestCommsReceiver.EXTRA_USER_RESTRICTION;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.junit.Assume.assumeTrue;

import android.annotation.NonNull;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.pm.LauncherApps;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.UserHandle;
import android.os.UserManager;

import androidx.test.InstrumentationRegistry;
import androidx.test.filters.SmallTest;
import androidx.test.runner.AndroidJUnit4;

import com.android.compatibility.common.util.FeatureUtil;
import com.android.compatib"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/DistractingPackageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.suspendapps.cts.DistractingPackageTest"	"testCannotRestrictWhenUninstallBlocked"	"CtsSuspendAppsTestCases"	"1: admin"	"([1:/android/suspendapps/cts/DistractingPackageTest.java]:[admin]:[1]:method_text:[ALL_TEST_PACKAGES, RESTRICTION_HIDE_FROM_SUGGESTIONS,                ALL_TEST_PACKAGES);    }   ]) :|: 
    public void testCannotRestrictWhenUninstallBlocked() throws Exception {
        assumeTrue(FeatureUtil.hasSystemFeature(PackageManager.FEATURE_DEVICE_ADMIN));
        addAndAssertProfileOwner();
        assertTrue(""Block uninstall request failed"", requestDpmAction(ACTION_BLOCK_UNINSTALL,
                createSingleKeyBundle(EXTRA_PACKAGE_NAME, TEST_APP_PACKAGE_NAME), mHandler));
        setDistractionFlagsAndAssertResult(ALL_TEST_PACKAGES, RESTRICTION_HIDE_NOTIFICATIONS,
                TEST_PACKAGE_ARRAY);
    }

    private void assertCannotRestrictUnderUserRestriction(String userRestriction) throws Exception {
        addAndAssertProfileOwner();
        final Bundle extras = createSingleKeyBundle(EXTRA_USER_RESTRICTION, userRestriction);
        assertTrue(""Request to add restriction"" + userRestriction + "" failed"",
                requestDpmAction(ACTION_ADD_USER_RESTRICTION, extras, mHandler));
        setDistractionFlagsAndAssertResult(ALL_TEST_PACKAGES, RESTRICTION_HIDE_FROM_SUGGESTIONS,
                ALL_TEST_PACKAGES);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/DistractingPackageTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.suspendapps.cts.DualSuspendTests"	"addAndAssertProfileOwner"	"CtsSuspendAppsTestCases"	"2: UserManager.DISALLOW admin"	"([11:/android/suspendapps/cts/DualSuspendTests.java]:[admin]:[11]:method_text:[dle(Intent.EXTRA_PACKAGE_NAME, TEST_APP_PACKAGE_NAME),                mReceiverHandler);    }   ]) :|: /*
 *.
 */

package android.suspendapps.cts;

import static android.content.Intent.EXTRA_PACKAGE_NAME;
import static android.os.UserManager.DISALLOW_APPS_CONTROL;
import static android.os.UserManager.DISALLOW_UNINSTALL_APPS;
import static android.suspendapps.cts.Constants.ALL_TEST_PACKAGES;
import static android.suspendapps.cts.Constants.DEVICE_ADMIN_COMPONENT;
import static android.suspendapps.cts.Constants.TEST_APP_PACKAGE_NAME;
import static android.suspendapps.cts.Constants.TEST_PACKAGE_ARRAY;
import static android.suspendapps.cts.SuspendTestUtils.addAndAssertProfileOwner;
import static android.suspendapps.cts.SuspendTestUtils.createSingleKeyBundle;
import static android.suspendapps.cts.SuspendTestUtils.removeDeviceAdmin;
import static android.suspendapps.cts.SuspendTestUtils.requestDpmAction;

import static com.android.suspendapps.testdeviceadmin.TestCommsReceiver.ACTION_ADD_USER_RESTRICTION;
import static com.android.suspendapps.testdeviceadmin.TestCommsReceiver.ACTION_BLOCK_UNINSTALL;
import static com.android.suspendapps.testdeviceadmin.TestCommsReceiver.ACTION_SUSPEND;
import static com.android.suspendapps.testdeviceadmin.TestCommsReceiver.ACTION_UNBLOCK_UNINSTALL;
import static com.android.suspendapps.testdeviceadmin.TestCommsReceiver.ACTION_UNSUSPEND;
import static com.android.suspendapps.testdeviceadmin.TestCommsReceiver.EXTRA_USER_RESTRICTION;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assume.assumeTrue;

import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;

import androidx.test.InstrumentationRegistry;
import androidx.test.filters.LargeTest;
import androidx.test.runner.AndroidJUnit4;

i"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/DualSuspendTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.suspendapps.cts.DualSuspendTests"	"testCannotSuspendUnderDisallowUninstallApps"	"CtsSuspendAppsTestCases"	"1: admin"	"([3:/android/suspendapps/cts/DualSuspendTests.java]:[admin]:[3]:method_text:[verHandler);        }        removeDeviceAdmin();        SuspendTestUtils.unsuspendAll();    }}]) :|: 
    public void testCannotSuspendUnderDisallowUninstallApps() throws Exception {
        assertCannotSuspendUnderUserRestriction(DISALLOW_UNINSTALL_APPS);
    }

    @After
    public void tearDown() throws Exception {
        if (mTestAppInterface != null) {
            mTestAppInterface.disconnect();
        }
        final DevicePolicyManager dpm = mContext.getSystemService(DevicePolicyManager.class);
        if (dpm.isAdminActive(ComponentName.unflattenFromString(DEVICE_ADMIN_COMPONENT))) {
            setSuspendViaDpm(false);
            final Bundle extras = createSingleKeyBundle(EXTRA_PACKAGE_NAME, TEST_APP_PACKAGE_NAME);
            requestDpmAction(ACTION_UNBLOCK_UNINSTALL, extras, mReceiverHandler);
        }
        removeDeviceAdmin();
        SuspendTestUtils.unsuspendAll();
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/DualSuspendTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.suspendapps.cts.SuspendPackagesTest"	"testOpRecordAudioOnSuspend"	"CtsSuspendAppsTestCases"	"1: RECORD_AUDIO"	"([1:/android/suspendapps/cts/SuspendPackagesTest.java]:[RECORD_AUDIO]:[1]:method_text:[   SuspendTestUtils.suspend(null, null, null);        assertOpDisallowed(recordAudioOp);    }   ]) :|: 
    public void testOpRecordAudioOnSuspend() throws Exception {
        final int recordAudioOp = AppOpsManager.permissionToOpCode(
                Manifest.permission.RECORD_AUDIO);
        SuspendTestUtils.suspend(null, null, null);
        assertOpDisallowed(recordAudioOp);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/SuspendPackagesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.suspendapps.cts.SuspendPackagesTest"	"addAndAssertDeviceOwner"	"CtsSuspendAppsTestCases"	"1: admin"	"([7:/android/suspendapps/cts/SuspendPackagesTest.java]:[admin]:[7]:method_text:[ackageManager();        mAppOpsManager = mContext.getSystemService(AppOpsManager.class);    }   ]) :|: /*
 *.
 */

package android.suspendapps.cts;

import static android.app.AppOpsManager.MODE_ALLOWED;
import static android.suspendapps.cts.Constants.ALL_TEST_PACKAGES;
import static android.suspendapps.cts.Constants.DEVICE_ADMIN_COMPONENT;
import static android.suspendapps.cts.Constants.DEVICE_ADMIN_PACKAGE;
import static android.suspendapps.cts.Constants.TEST_APP_PACKAGE_NAME;
import static android.suspendapps.cts.Constants.TEST_PACKAGE_ARRAY;
import static android.suspendapps.cts.SuspendTestUtils.areSameExtras;
import static android.suspendapps.cts.SuspendTestUtils.assertSameExtras;
import static android.suspendapps.cts.SuspendTestUtils.createExtras;
import static android.suspendapps.cts.SuspendTestUtils.removeDeviceAdmin;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assume.assumeTrue;

import android.Manifest;
import android.app.AppOpsManager;
import android.content.Context;
import android.content.Intent;
import android.content.pm.LauncherApps;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.PersistableBundle;
import android.os.UserHandle;
import android.platform.test.annotations.SystemUserOnly;
import android.util.Log;

import androidx.test.InstrumentationRegistry;
import androidx.test.filters.LargeTest;
import androidx.test.runner.AndroidJUnit4;

import com.android.compatibility.common.util.FeatureUtil;
import com.android.compatibility.common.util.SystemUtil;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Arrays;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;

@RunWith(AndroidJUnit4.class)
@LargeTest
public clas"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/SuspendPackagesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.suspendapps.cts.SuspendPackagesTest"	"testCanSuspendWhenDeviceOwner"	"CtsSuspendAppsTestCases"	"1: admin"	"([1:/android/suspendapps/cts/SuspendPackagesTest.java]:[admin]:[1]:method_text:[l.runShellCommand(""am get-current-user"");        return Integer.parseInt(result.trim());    }   ]) :|: 
    public void testCanSuspendWhenDeviceOwner() throws Exception {
        assumeTrue(FeatureUtil.hasSystemFeature(PackageManager.FEATURE_DEVICE_ADMIN));
        addAndAssertDeviceOwner();
        SuspendTestUtils.suspend(null, null, null);
    }

    private int getCurrentUserId() {
        final String result = SystemUtil.runShellCommand(""am get-current-user"");
        return Integer.parseInt(result.trim());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/SuspendPackagesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.suspendapps.cts.SuspendPackagesTest"	"testDeviceAdminUnsuspendable"	"CtsSuspendAppsTestCases"	"1: admin"	"([6:/android/suspendapps/cts/SuspendPackagesTest.java]:[admin]:[6]:method_text:[pToName(op) + "" allowed while package is suspended"",                MODE_ALLOWED, mode);    }   ]) :|: 
    public void testDeviceAdminUnsuspendable() throws Exception {
        assumeTrue(FeatureUtil.hasSystemFeature(PackageManager.FEATURE_DEVICE_ADMIN));
        addAndAssertDeviceAdmin();
        final String[] unsuspendablePkgs = SystemUtil.callWithShellPermissionIdentity(() ->
                mPackageManager.getUnsuspendablePackages(new String[]{DEVICE_ADMIN_PACKAGE}));
        assertTrue(""Device admin suspendable"", (unsuspendablePkgs.length == 1)
                && DEVICE_ADMIN_PACKAGE.equals(unsuspendablePkgs[0]));
    }

    private void assertOpDisallowed(int op) throws Exception {
        final int testUid = mPackageManager.getPackageUid(TEST_APP_PACKAGE_NAME, 0);
        final int mode = SystemUtil.callWithShellPermissionIdentity(
                () -> mAppOpsManager.checkOpNoThrow(op, testUid, TEST_APP_PACKAGE_NAME));
        assertNotEquals(""Op "" + AppOpsManager.opToName(op) + "" allowed while package is suspended"",
                MODE_ALLOWED, mode);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/SuspendPackagesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.suspendapps.cts.SuspendPackagesTest"	"testOpCameraOnSuspend"	"CtsSuspendAppsTestCases"	"1: admin"	"([1:/android/suspendapps/cts/SuspendPackagesTest.java]:[admin]:[1]:method_text:[lable(String[] packageNames, UserHandle user,                boolean replacing) {        }    }}]) :|: 
    public void testOpCameraOnSuspend() throws Exception {
        final int cameraOp = AppOpsManager.permissionToOpCode(Manifest.permission.CAMERA);
        SuspendTestUtils.suspend(null, null, null);
        assertOpDisallowed(cameraOp);
    }

    @After
    public void tearDown() throws Exception {
        if (mTestAppInterface != null) {
            mTestAppInterface.disconnect();
        }
        removeDeviceAdmin();
        SuspendTestUtils.unsuspendAll();
    }

    private abstract static class StubbedCallback extends LauncherApps.Callback {
        @Override
        public void onPackageRemoved(String packageName, UserHandle user) {
        }

        @Override
        public void onPackageAdded(String packageName, UserHandle user) {
        }

        @Override
        public void onPackageChanged(String packageName, UserHandle user) {
        }

        @Override
        public void onPackagesAvailable(String[] packageNames, UserHandle user, boolean replacing) {
        }

        @Override
        public void onPackagesUnavailable(String[] packageNames, UserHandle user,
                boolean replacing) {
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/SuspendPackagesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.mediapc.cts.EncoderInitializationLatencyTest"	"isRPerfClass"	"CtsMediaPerformanceClassTestCases"	"2: Microphone microphone"	"([4:/android/mediapc/cts/EncoderInitializationLatencyTest.java]:[microphone]:[4]:method_text:[s the stats min, max, avg     * of the encoder initialization latencies.     */    @LargeTest   ]) :|: /*
 *.
 */

package android.mediapc.cts;

import android.app.Instrumentation;
import android.content.Context;
import android.content.pm.PackageManager;
import android.media.MediaCodec;
import android.media.MediaCodecInfo;
import android.media.MediaCodecList;
import android.media.MediaFormat;
import android.media.MediaRecorder;
import android.os.Build;
import android.util.Log;
import android.util.Pair;
import android.view.Surface;

import androidx.test.filters.LargeTest;
import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.rule.ActivityTestRule;

import com.android.compatibility.common.util.CddTest;
import com.android.compatibility.common.util.ReportLog;
import com.android.compatibility.common.util.ReportLog.Metric;

import com.android.compatibility.common.util.DeviceReportLog;
import com.android.compatibility.common.util.ResultType;
import com.android.compatibility.common.util.ResultUnit;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import static android.mediapc.cts.CodecTestBase.selectCodecs;
import static android.mediapc.cts.CodecTestBase.selectHardwareCodecs;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assume.assumeFalse;
import static org.junit.Assume.assumeTrue;

/**
 * The following test class validates the codec initialization latency (time for codec create +
 * configure) for the audio encoders and hardware video encoders available in the device, under the
 * load condition (Transcode + MediaRecorder session Audio(Microphone) and 1080p Video(Camera)).
 */
@RunWith(Parameterized.class)
public class EncoderInitializationLatencyTest {
    private static final String LOG_TAG = EncoderInitializ"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/EncoderInitializationLatencyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.cts.runner.CtsTestRunListener"	"disableKeyguard"	""	"1: granted"	"([1:/com/android/cts/runner/CtsTestRunListener.java]:[granted]:[1]:method_text:[                    ""UI based tests may fail if keyguard is up"");        }    }    @Override   ]) :|: public void testRunStarted(Description description) throws Exception {
        mEnvironment = new TestEnvironment(getInstrumentation().getTargetContext());

        // We might want to move this to /sdcard, if is is mounted/writable.
        File cacheDir = getInstrumentation().getTargetContext().getCacheDir();
        System.setProperty(""java.io.tmpdir"", cacheDir.getAbsolutePath());

        // attempt to disable keyguard, if current test has permission to do so
        // TODO: move this to a better place, such as InstrumentationTestRunner
        // ?
        if (getInstrumentation().getContext().checkCallingOrSelfPermission(
                android.Manifest.permission.DISABLE_KEYGUARD)
                == PackageManager.PERMISSION_GRANTED) {
            Log.i(TAG, ""Disabling keyguard"");
            KeyguardManager keyguardManager =
                    (KeyguardManager) getInstrumentation().getContext().getSystemService(
                            Context.KEYGUARD_SERVICE);
            keyguardManager.newKeyguardLock(""cts"").disableKeyguard();
        } else {
            Log.i(TAG, ""Test lacks permission to disable keyguard. "" +
                    ""UI based tests may fail if keyguard is up"");
        }
    }

    @Override"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/core/runner-axt/src/com/android/cts/runner/CtsTestRunListener.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.hardware.camera2.cts.CameraManagerTest"	"testCameraManagerWithDnD"	"CtsCameraTestCases"	"1: granted"	"([2:/android/hardware/camera2/cts/CameraManagerTest.java]:[granted]:[2]:method_text:[        throw new IOException(""Could not read stdout of command: "" + command, e);        }    }}]) :|: 
    public void testCameraManagerWithDnD() throws Exception {
        String[] cameras = mCameraIdsUnderTest;
        if (cameras.length == 0) {
            Log.i(TAG, ""No cameras present, skipping test"");
            return;
        }
        // Allow the test package to adjust notification policy
        toggleNotificationPolicyAccess(mContext.getPackageName(),
                InstrumentationRegistry.getInstrumentation(), true);

        // Enable DnD filtering

        NotificationManager nm = mContext.getSystemService(NotificationManager.class);
        try {
            nm.setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_NONE);

            // Try to use the camera API

            for (String cameraId : cameras) {
                try {
                    CameraCharacteristics c = mCameraManager.getCameraCharacteristics(cameraId);
                    assertTrue(""Unable to get camera characteristics when DnD is enabled"",
                            c != null);
                } catch (RuntimeException e) {
                    fail(""RuntimeException thrown when attempting to access camera "" +
                            ""characteristics with DnD enabled. "" +
                            ""https://android-review.googlesource.com/c/platform/frameworks/base/+"" +
                            ""/747089/ may be missing."");
                }
            }
        } finally {
            // Restore notifications to normal

            nm.setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);
        }
    }

    private void toggleNotificationPolicyAccess(String packageName,
            Instrumentation instrumentation, boolean on) throws IOException {

        String command = "" cmd notification "" + (on ? ""allow_dnd "" : ""disallow_dnd "") + packageName;

        runCommand(command, instrumentation);

        NotificationManager nm = mContext.getSystemService(NotificationManager.class);
        assertEquals(""Notification Policy Access Grant is "" +"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.musicrecognition.cts.MusicRecognitionManagerTest"	"testRecordAudioOpsAreTracked"	"CtsMusicRecognitionTestCases"	"1: RECORD_AUDIO"	"([5:/android/musicrecognition/cts/MusicRecognitionManagerTest.java]:[RECORD_AUDIO]:[5]:method_text:[doptShellPermissionIdentity(                ""android.permission.MANAGE_MUSIC_RECOGNITION"");    }}]) :|: 
    public void testRecordAudioOpsAreTracked() {
        mWatcher.result = new MediaMetadata.Builder()
                .putString(MediaMetadata.METADATA_KEY_ARTIST, ""artist"")
                .putString(MediaMetadata.METADATA_KEY_TITLE, ""title"")
                .build();

        final String packageName = CtsMusicRecognitionService.SERVICE_PACKAGE;
        final int uid = Process.myUid();


        final Context context = getInstrumentation().getContext();

        final AppOpsManager appOpsManager = context.getSystemService(AppOpsManager.class);
        final AppOpsManager.OnOpActiveChangedListener listener = mock(
                AppOpsManager.OnOpActiveChangedListener.class);

        // Assert the app op is not started
        assertFalse(appOpsManager.isOpActive(AppOpsManager.OPSTR_RECORD_AUDIO, uid, packageName));

        // Start watching for record audio op
        appOpsManager.startWatchingActive(new String[] { AppOpsManager.OPSTR_RECORD_AUDIO },
                context.getMainExecutor(), listener);

        // Invoke API
        RecognitionRequest request = invokeMusicRecognitionApi();

        // The app op should start
        String expectedAttributionTag = ""CtsMusicRecognitionAttributionTag"";
        verify(listener, timeout(VERIFY_APPOP_CHANGE_TIMEOUT_MS))
                .onOpActiveChanged(eq(AppOpsManager.OPSTR_RECORD_AUDIO),
                eq(uid), eq(packageName), eq(expectedAttributionTag), eq(true),
                        anyInt(), anyInt());

        // Wait for streaming to finish.
        reset(listener);
        try {
            Thread.sleep(10000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // The app op should finish
        verify(listener, timeout(VERIFY_APPOP_CHANGE_TIMEOUT_MS))
                .onOpActiveChanged(eq(AppOpsManager.OPSTR_RECORD_AUDIO),
                        eq(uid), eq(packageName), eq(expectedAttributionTag), eq(false),
                        anyInt(), anyInt()"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/musicrecognition/src/android/musicrecognition/cts/MusicRecognitionManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.backup.cts.PermissionTest"	"testGrantDeniedRuntimePermission"	"CtsBackupTestCases"	"1: granted"	"([1:/android/backup/cts/PermissionTest.java]:[granted]:[1]:method_text:[  });    }    /**     * Test backup and restore of pre-M regular runtime permission.     */   ]) :|: public void testGrantDeniedRuntimePermission() throws Exception {
        if (!isBackupSupported()) {
            return;
        }
        grantPermission(APP, ACCESS_FINE_LOCATION);

        mBackupUtils.backupNowAndAssertSuccess(ANDROID_PACKAGE);
        resetApp(APP);
        mBackupUtils.restoreAndAssertSuccess(LOCAL_TRANSPORT_TOKEN, ANDROID_PACKAGE);

        eventually(() -> {
            assertEquals(PERMISSION_GRANTED, checkPermission(APP, ACCESS_FINE_LOCATION));
            assertEquals(PERMISSION_DENIED, checkPermission(APP, READ_CONTACTS));
        });
    }

    /**
     * Test backup and restore of pre-M regular runtime permission.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/backup/src/android/backup/cts/PermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.backup.cts.PermissionTest"	"testNoTriStateRuntimePermission"	"CtsBackupTestCases"	"2: granted ACCESS_BACKGROUND_LOCATION"	"([2:/android/backup/cts/PermissionTest.java]:[ACCESS_BACKGROUND_LOCATION]:[2]:method_text:[     });    }    /**     * Test backup and restore of foreground runtime permission.     */   ]) :|: public void testNoTriStateRuntimePermission() throws Exception {
        if (!isBackupSupported()) {
            return;
        }
        // Set a marker
        grantPermission(APP, WRITE_CONTACTS);

        // revoked is the default state. Hence mark the permissions as user set, so the permissions
        // are even backed up
        setFlag(APP, ACCESS_FINE_LOCATION, FLAG_PERMISSION_USER_SET);
        setFlag(APP, ACCESS_BACKGROUND_LOCATION, FLAG_PERMISSION_USER_SET);

        mBackupUtils.backupNowAndAssertSuccess(ANDROID_PACKAGE);
        resetApp(APP);
        mBackupUtils.restoreAndAssertSuccess(LOCAL_TRANSPORT_TOKEN, ANDROID_PACKAGE);

        eventually(() -> {
            // Wait until marker is set
            assertEquals(PERMISSION_GRANTED, checkPermission(APP, WRITE_CONTACTS));

            assertEquals(PERMISSION_DENIED, checkPermission(APP, ACCESS_FINE_LOCATION));
            assertEquals(PERMISSION_DENIED, checkPermission(APP, ACCESS_BACKGROUND_LOCATION));
            assertEquals(MODE_IGNORED, getAppOp(APP, ACCESS_FINE_LOCATION));
        });
    }

    /**
     * Test backup and restore of foreground runtime permission.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/backup/src/android/backup/cts/PermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.backup.cts.PermissionTest"	"testGrantForegroundRuntimePermission"	"CtsBackupTestCases"	"2: granted ACCESS_BACKGROUND_LOCATION"	"([2:/android/backup/cts/PermissionTest.java]:[ACCESS_BACKGROUND_LOCATION]:[2]:method_text:[e     * TODO: b/178522459 to fix the test once the foundamental issue has been fixed.     *///   ]) :|: public void testGrantForegroundRuntimePermission() throws Exception {
        if (!isBackupSupported()) {
            return;
        }
        grantPermission(APP, ACCESS_FINE_LOCATION);

        // revoked is the default state. Hence mark the permission as user set, so the permissions
        // are even backed up
        setFlag(APP, ACCESS_BACKGROUND_LOCATION, FLAG_PERMISSION_USER_SET);

        mBackupUtils.backupNowAndAssertSuccess(ANDROID_PACKAGE);
        resetApp(APP);
        mBackupUtils.restoreAndAssertSuccess(LOCAL_TRANSPORT_TOKEN, ANDROID_PACKAGE);

        eventually(() -> {
            assertEquals(PERMISSION_GRANTED, checkPermission(APP, ACCESS_FINE_LOCATION));
            assertEquals(PERMISSION_DENIED, checkPermission(APP, ACCESS_BACKGROUND_LOCATION));
            assertEquals(MODE_FOREGROUND, getAppOp(APP, ACCESS_FINE_LOCATION));
        });
    }

    /**
     * Test backup and restore of foreground runtime permission.
     *
     * Comment out the test since it's a JUnit 3 test which doesn't support @Ignore
     * TODO: b/178522459 to fix the test once the foundamental issue has been fixed.
     */
//"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/backup/src/android/backup/cts/PermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.backup.cts.PermissionTest"	"testGrantForegroundAndBackgroundRuntimePermission"	"CtsBackupTestCases"	"2: granted ACCESS_BACKGROUND_LOCATION"	"([2:/android/backup/cts/PermissionTest.java]:[ACCESS_BACKGROUND_LOCATION]:[2]:method_text:[     });    }    /**     * Test backup and restore of foreground runtime permission.     */   ]) :|: public void testGrantForegroundAndBackgroundRuntimePermission() throws Exception {
        if (!isBackupSupported()) {
            return;
        }
        grantPermission(APP, ACCESS_FINE_LOCATION);
        grantPermission(APP, ACCESS_BACKGROUND_LOCATION);

        mBackupUtils.backupNowAndAssertSuccess(ANDROID_PACKAGE);
        resetApp(APP);
        mBackupUtils.restoreAndAssertSuccess(LOCAL_TRANSPORT_TOKEN, ANDROID_PACKAGE);

        eventually(() -> {
            assertEquals(PERMISSION_GRANTED, checkPermission(APP, ACCESS_FINE_LOCATION));
            assertEquals(PERMISSION_GRANTED, checkPermission(APP, ACCESS_BACKGROUND_LOCATION));
            assertEquals(MODE_ALLOWED, getAppOp(APP, ACCESS_FINE_LOCATION));
        });
    }

    /**
     * Test backup and restore of foreground runtime permission.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/backup/src/android/backup/cts/PermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.backup.cts.PermissionTest"	"testDelayedRestore"	"CtsBackupTestCases"	"1: granted"	"([1:/android/backup/cts/PermissionTest.java]:[granted]:[1]:method_text:[ app));        } catch (Exception e) {            throw new RuntimeException(e);        }    }}]) :|: public void testDelayedRestore() throws Exception {
        if (!isBackupSupported()) {
            return;
        }
        grantPermission(APP, ACCESS_FINE_LOCATION);

        setAppOp(APP22, READ_CONTACTS, MODE_IGNORED);

        mBackupUtils.backupNowAndAssertSuccess(ANDROID_PACKAGE);

        uninstall(APP);
        uninstall(APP22);

        try {
            mBackupUtils.restoreAndAssertSuccess(LOCAL_TRANSPORT_TOKEN, ANDROID_PACKAGE);

            install(APP_APK);

            eventually(() -> assertEquals(PERMISSION_GRANTED,
                    checkPermission(APP, ACCESS_FINE_LOCATION)));

            install(APP22_APK);

            eventually(() -> assertEquals(MODE_IGNORED, getAppOp(APP22, READ_CONTACTS)));
        } finally {
            install(APP_APK);
            install(APP22_APK);
        }
    }

    private void install(String apk) {
        ShellUtils.runShellCommand(""pm install -r "" + apk);
    }

    private void uninstall(String packageName) {
        ShellUtils.runShellCommand(""pm uninstall "" + packageName);
    }

    private void resetApp(String packageName) {
        ShellUtils.runShellCommand(""pm clear "" + packageName);
        ShellUtils.runShellCommand(""appops reset "" + packageName);
    }

    /**
     * Make sure that a {@link Runnable} eventually finishes without throwing a {@link
     * Exception}.
     *
     * @param r The {@link Runnable} to run.
     */
    public static void eventually(@NonNull Runnable r) {
        long start = System.currentTimeMillis();

        while (true) {
            try {
                r.run();
                return;
            } catch (Throwable e) {
                if (System.currentTimeMillis() - start < TIMEOUT_MILLIS) {
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ignored) {
                        throw new RuntimeException(e);
                    }
                } else {
                    throw e;"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/backup/src/android/backup/cts/PermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.view.accessibility.cts.CaptioningManagerTest"	"testChangeListener"	"CtsAccessibilityTestCases"	"2: silent silently"	"([1:/android/view/accessibility/cts/CaptioningManagerTest.java]:[silently]:[1]:method_text:[    throw new AssertionError(""Fails silently when removing listener twice"", e);        }    }   ]) :|: 
    public void testChangeListener() {
        putSecureSetting(""accessibility_captioning_enabled"",""0"");
        putSecureSetting(""accessibility_captioning_preset"", ""1"");
        putSecureSetting(""accessibility_captioning_locale"", ""en_US"");
        putSecureSetting(""accessibility_captioning_font_scale"", ""1.0"");

        CaptioningChangeListener mockListener = mock(CaptioningChangeListener.class);
        mManager.addCaptioningChangeListener(mockListener);

        putSecureSetting(""accessibility_captioning_enabled"", ""1"");
        verify(mockListener, timeout(LISTENER_TIMEOUT)).onEnabledChanged(true);

        // Style change gets posted in a Runnable, so we need to wait for idle.
        putSecureSetting(""accessibility_captioning_preset"", ""-1"");
        getInstrumentation().waitForIdleSync();
        verify(mockListener, timeout(LISTENER_TIMEOUT)).onUserStyleChanged(anyObject());

        putSecureSetting(""accessibility_captioning_locale"", ""ja_JP"");
        verify(mockListener, timeout(LISTENER_TIMEOUT)).onLocaleChanged(anyObject());

        putSecureSetting(""accessibility_captioning_font_scale"", ""2.0"");
        verify(mockListener, timeout(LISTENER_TIMEOUT)).onFontScaleChanged(anyFloat());

        mManager.removeCaptioningChangeListener(mockListener);

        Mockito.reset(mockListener);

        putSecureSetting(""accessibility_captioning_enabled"",""0"");
        verifyZeroInteractions(mockListener);

        try {
            mManager.removeCaptioningChangeListener(mockListener);
        } catch (Exception e) {
            throw new AssertionError(""Fails silently when removing listener twice"", e);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/CaptioningManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.accessibilityservice.cts.AccessibilityEndToEndTest"	"testPackageNameCannotBeFakedAppWidget"	"CtsAccessibilityServiceTestCases"	"1: granted"	"([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[granted]:[1]:method_text:[();            revokeBindAppWidgetPermission();        }    }    @MediumTest    @Presubmit   ]) :|: 
    public void testPackageNameCannotBeFakedAppWidget() throws Exception {
        if (!hasAppWidgets()) {
            return;
        }

        sInstrumentation.runOnMainSync(() -> {
            // Set the activity to report fake package for events and nodes
            mActivity.setReportedPackageName(APP_WIDGET_PROVIDER_PACKAGE);

            // Make sure we cannot report nodes as if from the widget package
            AccessibilityNodeInfo root = sUiAutomation
                    .getRootInActiveWindow();
            assertPackageName(root, mActivity.getPackageName());
        });

        // Make sure we cannot send events as if from the widget package
        try {
            sUiAutomation.executeAndWaitForEvent(() ->
                sInstrumentation.runOnMainSync(() ->
                    mActivity.findViewById(R.id.button).requestFocus())
                , (AccessibilityEvent event) ->
                    event.getEventType() == AccessibilityEvent.TYPE_VIEW_FOCUSED
                            && event.getPackageName().equals(mActivity.getPackageName())
                , DEFAULT_TIMEOUT_MS);
        } catch (TimeoutException e) {
            fail(""Should not be able to send events from a widget package if no widget hosted"");
        }

        // Create a host and start listening.
        final AppWidgetHost host = new AppWidgetHost(sInstrumentation.getTargetContext(), 0);
        host.deleteHost();
        host.startListening();

        // Well, app do not have this permission unless explicitly granted
        // by the user. Now we will pretend for the user and grant it.
        grantBindAppWidgetPermission();

        // Allocate an app widget id to bind.
        final int appWidgetId = host.allocateAppWidgetId();
        try {
            // Grab a provider we defined to be bound.
            final AppWidgetProviderInfo provider = getAppWidgetProviderInfo();

            // Bind the widget.
            final boolean widgetBound = getAppWidgetManager()"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.speech.tts.cts.TextToSpeechServiceTest"	"testSpeakStopBehindOtherAudioPlayback"	"CtsSpeechTestCases"	"1: silent"	"([1:/android/speech/tts/cts/TextToSpeechServiceTest.java]:[silent]:[1]:method_text:[t.open();        assertTrue(""speak() stop callback timeout"", mTts.waitForStop(""stop""));    }   ]) :|: public void testSpeakStopBehindOtherAudioPlayback() throws Exception {
        final ConditionVariable synthesizeTextWait = new ConditionVariable();
        final ConditionVariable synthesizeTextStartEvent = new ConditionVariable();
        StubTextToSpeechService.sSynthesizeTextWait = synthesizeTextWait;
        StubTextToSpeechService.sSynthesizeTextStartEvent = synthesizeTextStartEvent;

        // Make the audio playback queue busy by putting a 30s of silence.
        getTts().stop();
        getTts().playSilentUtterance(30000, TextToSpeech.QUEUE_ADD, ""silence"");

        // speak(), wait it to starting in the service, and stop().
        int result = getTts().speak(UTTERANCE, TextToSpeech.QUEUE_ADD, null, ""stop"");
        assertEquals(""speak() failed"", TextToSpeech.SUCCESS, result);
        assertTrue(""synthesis not started"", synthesizeTextStartEvent.block(10000));
        getTts().stop();

        // Wake up the Stubs #onSynthesizeSpeech (one that will be stopped in-progress)
        synthesizeTextWait.open();

        assertTrue(""speak() stop callback timeout"", mTts.waitForStop(""stop""));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/speech/src/android/speech/tts/cts/TextToSpeechServiceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.security.SELinuxTargetSdkTest"	"testDex2oat"	"CtsSelinuxTargetSdkCurrentTestCases"	"1: granted granted granted granted"	"([1:/android/security/SELinuxTargetSdkTest.java]:[granted]:[1]:method_text:[opertyUtil.isVendorApiLevelNewerThan(28)) {            checkDex2oatAccess(false);        }    }}]) :|: public void testDex2oat() throws Exception {
        /*
         * Apps with a vendor image older than Q may access the dex2oat executable through
         * selinux policy on the vendor partition because the permission was granted in public
         * policy for appdomain.
         */
        if (PropertyUtil.isVendorApiLevelNewerThan(28)) {
            checkDex2oatAccess(false);
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/selinux/selinuxTargetSdkCurrent/src/android/security/SELinuxTargetSdkTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.systemintents.cts.TestManageOverlayPermissionIntents"	"testStartManageAppOverlayPermissionIntent_whenCallerHasPermission_succeedsOrThrowsActivityNotFound"	"CtsSystemIntentTestCases"	"1: granted"	"([1:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[granted]:[1]:method_text:[nt            }        });        // ActivityNotFoundException or no exception thrown    }   ]) :|: 
    public void testStartManageAppOverlayPermissionIntent_whenCallerHasPermission_succeedsOrThrowsActivityNotFound() {
        Intent intent = new Intent(Settings.ACTION_MANAGE_APP_OVERLAY_PERMISSION);
        intent.setData(Uri.fromParts(""package"", mContext.getPackageName(), null));
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

        SystemUtil.runWithShellPermissionIdentity(() -> {
            assertEquals(""Shell must have INTERNAL_SYSTEM_WINDOW permission to run test"",
                    PackageManager.PERMISSION_GRANTED,
                    mContext.checkSelfPermission(PERMISSION_INTERNAL_SYSTEM_WINDOW));

            try {
                mContext.startActivity(intent);
            } catch (ActivityNotFoundException e) {
                // Fall through - it's allowed to not handle the intent
            }
        });

        // ActivityNotFoundException or no exception thrown
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestManageOverlayPermissionIntents.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedStoragePermissionTest"	"cannotGrantStorageTargetingSdk22NotWhitelisted"	"CtsPermission2TestCases"	"1: granted"	"([3:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[granted]:[3]:method_text:[G, Manifest.permission.READ_EXTERNAL_STORAGE))                    .isTrue();        });    }   ]) :|: 
    @AppModeFull
    public void cannotGrantStorageTargetingSdk22NotWhitelisted() throws Exception {
        // Install with no whitelisted permissions.
        installApp(APK_USES_STORAGE_DEFAULT_22, Collections.emptySet());

        eventually(() -> {
            // Could not grant permission+app-op as targetSDK<29 and not whitelisted
            assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isFalse();

            // Permissions are always granted for pre-23 apps
            assertThat(isPermissionGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE))
                    .isTrue();
        });
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedStoragePermissionTest"	"cannotGrantStorageTargetingSdk22OptInNotWhitelisted"	"CtsPermission2TestCases"	"1: granted"	"([3:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[granted]:[3]:method_text:[G, Manifest.permission.READ_EXTERNAL_STORAGE))                    .isTrue();        });    }   ]) :|: 
    @AppModeFull
    public void cannotGrantStorageTargetingSdk22OptInNotWhitelisted() throws Exception {
        // Install with no whitelisted permissions.
        installApp(APK_USES_STORAGE_OPT_IN_22, Collections.emptySet());

        eventually(() -> {
            // Could not grant permission as targetSDK<29 and not whitelisted
            assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isFalse();

            // Permissions are always granted for pre-23 apps
            assertThat(isPermissionGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE))
                    .isTrue();
        });
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedStoragePermissionTest"	"canGrantStorageTargetingSdk22Whitelisted"	"CtsPermission2TestCases"	"1: granted"	"([1:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[granted]:[1]:method_text:[         assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());    }   ]) :|: 
    @AppModeFull
    public void canGrantStorageTargetingSdk22Whitelisted() throws Exception {
        // Install with whitelisted permissions.
        installApp(APK_USES_STORAGE_DEFAULT_22, null);

        // Could grant permission
        eventually(() ->
                assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedStoragePermissionTest"	"canGrantStorageTargetingSdk22OptInWhitelisted"	"CtsPermission2TestCases"	"1: granted"	"([1:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[granted]:[1]:method_text:[         assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());    }   ]) :|: 
    @AppModeFull
    public void canGrantStorageTargetingSdk22OptInWhitelisted() throws Exception {
        // Install with whitelisted permissions.
        installApp(APK_USES_STORAGE_OPT_IN_22, null);

        // Could grant permission
        eventually(() ->
                assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedStoragePermissionTest"	"cannotGrantStorageTargetingSdk28NotWhitelisted"	"CtsPermission2TestCases"	"1: granted"	"([1:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[granted]:[1]:method_text:[        assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isFalse());    }   ]) :|: 
    @AppModeFull
    public void cannotGrantStorageTargetingSdk28NotWhitelisted() throws Exception {
        // Install with no whitelisted permissions.
        installApp(APK_USES_STORAGE_DEFAULT_28, Collections.emptySet());

        // Could not grant permission as targetSDK<29 and not whitelisted
        eventually(() ->
                assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isFalse());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedStoragePermissionTest"	"cannotGrantStorageTargetingSdk28OptInNotWhitelisted"	"CtsPermission2TestCases"	"1: granted"	"([1:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[granted]:[1]:method_text:[        assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isFalse());    }   ]) :|: 
    @AppModeFull
    public void cannotGrantStorageTargetingSdk28OptInNotWhitelisted() throws Exception {
        // Install with no whitelisted permissions.
        installApp(APK_USES_STORAGE_OPT_IN_28, Collections.emptySet());

        // Could not grant permission as targetSDK<29 and not whitelisted
        eventually(() ->
                assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isFalse());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedStoragePermissionTest"	"canGrantStorageTargetingSdk28Whitelisted"	"CtsPermission2TestCases"	"1: granted"	"([1:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[granted]:[1]:method_text:[         assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());    }   ]) :|: 
    @AppModeFull
    public void canGrantStorageTargetingSdk28Whitelisted() throws Exception {
        // Install with whitelisted permissions.
        installApp(APK_USES_STORAGE_DEFAULT_28, null);

        // Could grant permission
        eventually(() ->
                assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedStoragePermissionTest"	"canGrantStorageTargetingSdk28OptInWhitelisted"	"CtsPermission2TestCases"	"1: granted"	"([1:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[granted]:[1]:method_text:[         assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());    }   ]) :|: 
    @AppModeFull
    public void canGrantStorageTargetingSdk28OptInWhitelisted() throws Exception {
        // Install with whitelisted permissions.
        installApp(APK_USES_STORAGE_OPT_IN_28, null);

        // Could grant permission
        eventually(() ->
                assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedStoragePermissionTest"	"canGrantStorageTargetingSdk29NotWhitelisted"	"CtsPermission2TestCases"	"1: granted"	"([1:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[granted]:[1]:method_text:[         assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());    }   ]) :|: 
    @AppModeFull
    public void canGrantStorageTargetingSdk29NotWhitelisted() throws Exception {
        // Install with no whitelisted permissions.
        installApp(APK_USES_STORAGE_DEFAULT_29, Collections.emptySet());

        // Could grant permission as targetSDK=29 apps can always grant
        eventually(() ->
                assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedStoragePermissionTest"	"canGrantStorageTargetingSdk29OptOutNotWhitelisted"	"CtsPermission2TestCases"	"1: granted"	"([1:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[granted]:[1]:method_text:[         assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());    }   ]) :|: 
    @AppModeFull
    public void canGrantStorageTargetingSdk29OptOutNotWhitelisted() throws Exception {
        // Install with no whitelisted permissions.
        installApp(APK_USES_STORAGE_OPT_OUT_29, Collections.emptySet());

        // Could grant permission as targetSDK=29 apps can always grant
        eventually(() ->
                assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedStoragePermissionTest"	"canGrantStorageTargetingSdk29Whitelisted"	"CtsPermission2TestCases"	"1: granted"	"([1:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[granted]:[1]:method_text:[         assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());    }   ]) :|: 
    @AppModeFull
    public void canGrantStorageTargetingSdk29Whitelisted() throws Exception {
        // Install with whitelisted permissions.
        installApp(APK_USES_STORAGE_DEFAULT_29, null);

        // Could grant permission as targetSDK=29 apps can always grant
        eventually(() ->
                assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedStoragePermissionTest"	"canGrantStorageTargetingSdk29OptOutWhitelisted"	"CtsPermission2TestCases"	"1: granted"	"([1:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[granted]:[1]:method_text:[         assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());    }   ]) :|: 
    @AppModeFull
    public void canGrantStorageTargetingSdk29OptOutWhitelisted() throws Exception {
        // Install with whitelisted permissions.
        installApp(APK_USES_STORAGE_OPT_OUT_29, null);

        // Could grant permission as targetSDK=29 apps can always grant
        eventually(() ->
                assertThat(isGranted(PKG, Manifest.permission.READ_EXTERNAL_STORAGE)).isTrue());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedStoragePermissionTest"	"testStorageTargetingSdk30CannotPreserveLegacyOnInstall"	"CtsPermission2TestCases"	"1: granted"	"([4:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[granted]:[4]:method_text:[    @After    public void uninstallApp() {        runShellCommand(""pm uninstall "" + PKG);    }}]) :|: 
    @AppModeFull
    public void testStorageTargetingSdk30CannotPreserveLegacyOnInstall() throws Exception {
        installApp(APK_USES_STORAGE_PRESERVED_OPT_OUT_30, null);

        assertHasIsolatedStorageAccess();
    }

    private void assertHasFullStorageAccess() throws Exception {
        runWithShellPermissionIdentity(() -> {
            AppOpsManager appOpsManager = getContext().getSystemService(AppOpsManager.class);
            final int uid = getContext().getPackageManager().getPackageUid(PKG, 0);
            eventually(() -> assertThat(appOpsManager.unsafeCheckOpRawNoThrow(
                    AppOpsManager.OPSTR_LEGACY_STORAGE,
                    uid, PKG)).isEqualTo(AppOpsManager.MODE_ALLOWED));
        });
    }

    private void assertHasIsolatedStorageAccess() throws Exception {
        runWithShellPermissionIdentity(() -> {
            AppOpsManager appOpsManager = getContext().getSystemService(AppOpsManager.class);
            final int uid = getContext().getPackageManager().getPackageUid(PKG, 0);
            eventually(() -> assertThat(appOpsManager.unsafeCheckOpRawNoThrow(
                    AppOpsManager.OPSTR_LEGACY_STORAGE,
                    uid, PKG)).isNotEqualTo(AppOpsManager.MODE_ALLOWED));
        });
    }

    private void assertCannotWhitelistStorage() throws Exception {
        final PackageManager packageManager = getContext().getPackageManager();

        runWithShellPermissionIdentity(() -> {
            // Assert added only to none whitelist.
            assertThat(packageManager.getWhitelistedRestrictedPermissions(PKG,
                    PackageManager.FLAG_PERMISSION_WHITELIST_SYSTEM
                            | PackageManager.FLAG_PERMISSION_WHITELIST_UPGRADE
                            | PackageManager.FLAG_PERMISSION_WHITELIST_INSTALLER))
                    .doesNotContain(permission.READ_EXTERNAL_STORAGE);
            assertThat(packageManager.getWhitelistedRestrictedPermissions(PKG,
                    PackageManag"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.NoCaptureAudioOutputPermissionTest"	"testCreateAudioRecord"	"CtsPermission2TestCases"	"1: microphone"	"([2:/android/permission2/cts/NoCaptureAudioOutputPermissionTest.java]:[microphone]:[2]:method_text:[ AudioRecord.STATE_INITIALIZED);        } finally {            record.release();        }    }}]) :|: public void testCreateAudioRecord() {
        int bufferSize = AudioRecord.getMinBufferSize(44100,
                AudioFormat.CHANNEL_IN_STEREO, AudioFormat.ENCODING_PCM_16BIT);

        if (bufferSize <= 0)
        {
            // getMinBufferSize() returns an invalid buffer size.
            // That could be because there is no microphone.  In that case,
            // use this buffer size to test AudioRecord creation.
            PackageManager packageManager = mContext.getPackageManager();
            if (!packageManager.hasSystemFeature(PackageManager.FEATURE_MICROPHONE)) {
                bufferSize = 44100;
            }
        }

        // The attempt to create the AudioRecord object succeeds even if the
        // app does not have permission, but the object is not usable.
        // The API should probably throw SecurityException but it was not originally
        // designed to do that and it's not clear we can change it now.
        AudioRecord record = new AudioRecord(AudioSource.REMOTE_SUBMIX, 44100,
                AudioFormat.CHANNEL_IN_STEREO, AudioFormat.ENCODING_PCM_16BIT, bufferSize);
        try {
            assertTrue(""AudioRecord state should not be INITIALIZED because the application""
                    + ""does not have permission to access the remote submix source"",
                    record.getState() != AudioRecord.STATE_INITIALIZED);
        } finally {
            record.release();
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/NoCaptureAudioOutputPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.PermissionMaxSdkVersionTest"	"testMaxSdkInPast"	"CtsPermission2TestCases"	"1: granted"	"([2:/android/permission2/cts/PermissionMaxSdkVersionTest.java]:[granted]:[2]:method_text:[ersion set to a future API level,     * the permission is being granted.     */    @SmallTest   ]) :|: public void testMaxSdkInPast() {
        int result = mContext.checkPermission(UNGRANTABLE_PERMISSION,
                Process.myPid(), Process.myUid());
        assertEquals(""Permissions with maxSdkVersion in the past should not be granted"",
                result,
                PackageManager.PERMISSION_DENIED);
    }

    /**
     * Verify that with android:maxSdkVersion set to a future API level,
     * the permission is being granted.
     */
    @SmallTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/PermissionMaxSdkVersionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.PermissionMaxSdkVersionTest"	"testMaxSdkInFuture"	"CtsPermission2TestCases"	"1: granted"	"([2:/android/permission2/cts/PermissionMaxSdkVersionTest.java]:[granted]:[2]:method_text:[uld be granted"",                result,                PackageManager.PERMISSION_GRANTED);    }}]) :|: public void testMaxSdkInFuture() {
        int result = mContext.checkPermission(GRANTABLE_PERMISSION,
                Process.myPid(), Process.myUid());
        assertEquals(""Permissions with maxSdkVersion in the future should be granted"",
                result,
                PackageManager.PERMISSION_GRANTED);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/PermissionMaxSdkVersionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedPermissionsTest"	"testDefaultAllRestrictedPermissionsWhitelistedAtInstall29"	"CtsPermission2TestCases"	"1: granted"	"([3:/android/permission2/cts/RestrictedPermissionsTest.java]:[granted]:[3]:method_text:[o restricted permission should be granted.        assertNoRestrictedPermissionGranted();    }   ]) :|: 
    @AppModeFull
    public void testDefaultAllRestrictedPermissionsWhitelistedAtInstall29() throws Exception {
        // Install with no changes to whitelisted permissions, not attempting to grant.
        installRestrictedPermissionUserApp(null /*whitelistedPermissions*/,
                Collections.EMPTY_SET /*grantedPermissions*/);

        // All restricted permission should be whitelisted.
        assertAllRestrictedPermissionWhitelisted();

        // No restricted permission should be granted.
        assertNoRestrictedPermissionGranted();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedPermissionsTest"	"testSomeRestrictedPermissionsWhitelistedAtInstall29"	"CtsPermission2TestCases"	"1: granted"	"([3:/android/permission2/cts/RestrictedPermissionsTest.java]:[granted]:[3]:method_text:[o restricted permission should be granted.        assertNoRestrictedPermissionGranted();    }   ]) :|: 
    @AppModeFull
    public void testSomeRestrictedPermissionsWhitelistedAtInstall29() throws Exception {
        // Whitelist only these permissions.
        final Set<String> whitelistedPermissions = new ArraySet<>(2);
        whitelistedPermissions.add(Manifest.permission.SEND_SMS);
        whitelistedPermissions.add(Manifest.permission.READ_CALL_LOG);

        // Install with some whitelisted permissions, not attempting to grant.
        installRestrictedPermissionUserApp(whitelistedPermissions,
                Collections.EMPTY_SET /*grantedPermissions*/);

        // Some restricted permission should be whitelisted.
        assertRestrictedPermissionWhitelisted(whitelistedPermissions);

        // No restricted permission should be granted.
        assertNoRestrictedPermissionGranted();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedPermissionsTest"	"testNoneRestrictedPermissionWhitelistedAtInstall29"	"CtsPermission2TestCases"	"1: granted"	"([3:/android/permission2/cts/RestrictedPermissionsTest.java]:[granted]:[3]:method_text:[o restricted permission should be granted.        assertNoRestrictedPermissionGranted();    }   ]) :|: 
    @AppModeFull
    public void testNoneRestrictedPermissionWhitelistedAtInstall29() throws Exception {
        // Install with all whitelisted permissions, not attempting to grant.
        installRestrictedPermissionUserApp(Collections.emptySet(),
                Collections.EMPTY_SET /*grantedPermissions*/);

        // No restricted permission should be whitelisted.
        assertNoRestrictedPermissionWhitelisted();

        // No restricted permission should be granted.
        assertNoRestrictedPermissionGranted();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedPermissionsTest"	"testSomeRestrictedPermissionsWhitelistedAtInstall22"	"CtsPermission2TestCases"	"1: granted"	"([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[granted]:[1]:method_text:[ld be whitelisted.        assertRestrictedPermissionWhitelisted(whitelistedPermissions);    }   ]) :|: 
    @AppModeFull
    @SystemUserOnly(reason = ""Secondary users have the DISALLOW_OUTGOING_CALLS user restriction"")
    public void testSomeRestrictedPermissionsWhitelistedAtInstall22() throws Exception {
        // Whitelist only these permissions.
        final Set<String> whitelistedPermissions = new ArraySet<>(2);
        whitelistedPermissions.add(Manifest.permission.SEND_SMS);
        whitelistedPermissions.add(Manifest.permission.READ_CALL_LOG);

        // Install with some whitelisted permissions
        installApp(APK_USES_SMS_CALL_LOG_22, whitelistedPermissions, null /*grantedPermissions*/);

        // Some restricted permission should be whitelisted.
        assertRestrictedPermissionWhitelisted(whitelistedPermissions);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedPermissionsTest"	"testNoneRestrictedPermissionWhitelistedAtInstall22"	"CtsPermission2TestCases"	"1: granted"	"([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[granted]:[1]:method_text:[cted permission should be whitelisted.        assertNoRestrictedPermissionWhitelisted();    }   ]) :|: 
    @AppModeFull
    public void testNoneRestrictedPermissionWhitelistedAtInstall22() throws Exception {
        // Install with all whitelisted permissions
        installApp(APK_USES_SMS_CALL_LOG_22, Collections.emptySet(),
                null /*grantedPermissions*/);

        // No restricted permission should be whitelisted.
        assertNoRestrictedPermissionWhitelisted();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedPermissionsTest"	"testSomeRestrictedPermissionsGrantedAtInstall"	"CtsPermission2TestCases"	"1: granted"	"([8:/android/permission2/cts/RestrictedPermissionsTest.java]:[granted]:[8]:method_text:[mission should be granted.        assertRestrictedPermissionGranted(grantedPermissions);    }   ]) :|: 
    @AppModeFull
    @SystemUserOnly(reason = ""Secondary users have the DISALLOW_OUTGOING_CALLS user restriction"")
    public void testSomeRestrictedPermissionsGrantedAtInstall() throws Exception {
        // Grant only these permissions.
        final Set<String> grantedPermissions = new ArraySet<>(1);
        grantedPermissions.add(Manifest.permission.SEND_SMS);
        grantedPermissions.add(Manifest.permission.READ_CALL_LOG);

        // Install with no whitelisted permissions attempting to grant.
        installRestrictedPermissionUserApp(null /*whitelistedPermissions*/, grantedPermissions);

        // All restricted permission should be whitelisted.
        assertAllRestrictedPermissionWhitelisted();

        // Some restricted permission should be granted.
        assertRestrictedPermissionGranted(grantedPermissions);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedPermissionsTest"	"testCanGrantSoftRestrictedNotWhitelistedPermissions"	"CtsPermission2TestCases"	"1: granted"	"([6:/android/permission2/cts/RestrictedPermissionsTest.java]:[granted]:[6]:method_text:[ionGranted(grantedPermissions);        } finally {            uninstallApp();        }    }   ]) :|: 
    @AppModeFull
    public void testCanGrantSoftRestrictedNotWhitelistedPermissions() throws Exception {
        try {
            final Set<String> grantedPermissions = new ArraySet<>();
            grantedPermissions.add(Manifest.permission.READ_EXTERNAL_STORAGE);
            grantedPermissions.add(permission.WRITE_EXTERNAL_STORAGE);

            installApp(APK_USES_STORAGE_DEFAULT_29, Collections.emptySet(), grantedPermissions);

            assertRestrictedPermissionGranted(grantedPermissions);
        } finally {
            uninstallApp();
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedPermissionsTest"	"testAllRestrictedPermissionsGrantedAtInstall"	"CtsPermission2TestCases"	"1: granted"	"([3:/android/permission2/cts/RestrictedPermissionsTest.java]:[granted]:[3]:method_text:[ restricted permission should be granted.        assertAllRestrictedPermissionGranted();    }   ]) :|: 
    @AppModeFull
    @SystemUserOnly(reason = ""Secondary users have the DISALLOW_SMS user restriction"")
    public void testAllRestrictedPermissionsGrantedAtInstall() throws Exception {
        // Install with whitelisted permissions attempting to grant.
        installRestrictedPermissionUserApp(null /*whitelistedPermissions*/,
                null);

        // All restricted permission should be whitelisted.
        assertAllRestrictedPermissionWhitelisted();

        // Some restricted permission should be granted.
        assertAllRestrictedPermissionGranted();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedPermissionsTest"	"isTrue"	"CtsPermission2TestCases"	"2: granted ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[umentation().getUiAutomation()                    .dropShellPermissionIdentity();        }    }}]) :|: 
    @AppModeFull
    @SystemUserOnly(reason = ""Secondary users have the DISALLOW_SMS user restriction"")
    public void shareUidBetweenRestrictedAndNotRestrictedApp() throws Exception {
        runShellCommand(
                ""pm install -g --force-queryable --restrict-permissions ""
                + APK_USES_SMS_RESTRICTED_SHARED_UID);
        runShellCommand(""pm install -g --force-queryable ""
                + APK_USES_SMS_NOT_RESTRICTED_SHARED_UID);

        eventually(
                () -> assertThat(isGranted(PKG_USES_SMS_RESTRICTED_SHARED_UID, READ_SMS)).isTrue());
        // The apps share a UID, hence the whitelisting is shared too
        assertThat(isGranted(PKG_USES_SMS_NOT_RESTRICTED_SHARED_UID, READ_SMS)).isTrue();
    }

    private static void installRestrictedPermissionUserApp(@NonNull SessionParams params)
            throws Exception {
        final CountDownLatch installLatch = new CountDownLatch(1);

        // Create an install result receiver.
        final BroadcastReceiver installReceiver = new BroadcastReceiver() {
            public void onReceive(Context context, Intent intent) {
                if (intent.getIntExtra(PackageInstaller.EXTRA_STATUS,
                        PackageInstaller.STATUS_FAILURE_INVALID)
                            == PackageInstaller.STATUS_SUCCESS) {
                    installLatch.countDown();
                }
            }
        };

        // Register the result receiver.
        final String action = ""android.permission2.cts.ACTION_INSTALL_COMMIT"";
        final IntentFilter intentFilter = new IntentFilter(action);
        getContext().registerReceiver(installReceiver, intentFilter);

        try {
            // Create a session.
            final PackageInstaller packageInstaller = getContext()
                    .getPackageManager().getPackageInstaller();
            final int sessionId = packageInstaller.createSession(params);
            final Session session = packageInstaller.openSession(sessio"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedPermissionsTest"	"testLocationBackgroundPermissionWhitelistedAtInstall29"	"CtsPermission2TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[       ACCESS_BACKGROUND_LOCATION)));        assertAllRestrictedPermissionWhitelisted();    }   ]) :|: 
    @AppModeFull
    public void testLocationBackgroundPermissionWhitelistedAtInstall29() throws Exception {
        installApp(APK_USES_LOCATION_29, null, new ArraySet<>(Arrays.asList(ACCESS_FINE_LOCATION,
                ACCESS_BACKGROUND_LOCATION)));
        assertAllRestrictedPermissionWhitelisted();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission2.cts.RestrictedPermissionsTest"	"testLocationBackgroundPermissionWhitelistedAtInstall22"	"CtsPermission2TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[       ACCESS_BACKGROUND_LOCATION)));        assertAllRestrictedPermissionWhitelisted();    }   ]) :|: 
    @AppModeFull
    public void testLocationBackgroundPermissionWhitelistedAtInstall22() throws Exception {
        installApp(APK_USES_LOCATION_22, null, new ArraySet<>(Arrays.asList(ACCESS_FINE_LOCATION,
                ACCESS_BACKGROUND_LOCATION)));
        assertAllRestrictedPermissionWhitelisted();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.sensorprivacy.cts.SensorPrivacyBaseTest.kt"	"testOpFinishedWhileToggleOn"	"CtsSensorPrivacyTestCases"	"2: RECORD_AUDIO microphone"	"([1:/android/sensorprivacy/cts/SensorPrivacyBaseTest.kt]:[microphone]:[1]:method_text:[             assertFalse(""Device isn't unlocked"", km.isDeviceLocked)            }        }    }}]) :|: 
    @AppModeFull(reason = ""Uses secondary app, instant apps have no visibility"")
    fun testOpFinishedWhileToggleOn() {
        setSensor(false)
        startTestApp()
        eventually {
            assertOpRunning(true)
        }
        setSensor(true)
        Thread.sleep(5000)
        eventually {
            assertOpRunning(false)
        }
        finishTestApp()
        Thread.sleep(1000)
        setSensor(false)
        Thread.sleep(1000)
        assertOpRunning(false)
    }

    private fun startTestApp() {
        val intent = Intent(MIC_CAM_ACTIVITY_ACTION)
                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                .addFlags(Intent.FLAG_ACTIVITY_MATCH_EXTERNAL)
        for (extra in extras) {
            intent.putExtra(extra, true)
        }
        context.startActivity(intent)
        // Wait for app to open
        UiAutomatorUtils.waitFindObject(By.textContains(ACTIVITY_TITLE_SNIP))
    }

    private fun finishTestApp() {
        // instant apps can't broadcast to other instant apps; use the shell
        runShellCommandOrThrow(""am broadcast"" +
                "" --user ${context.userId}"" +
                "" -a $FINISH_MIC_CAM_ACTIVITY_ACTION"" +
                "" -f ${Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}"")
    }

    protected fun setSensor(enable: Boolean) {
        runWithShellPermissionIdentity {
            spm.setSensorPrivacy(OTHER, sensor, enable)
        }
    }

    private fun isSensorPrivacyEnabled(): Boolean {
        return callWithShellPermissionIdentity {
            spm.isSensorPrivacyEnabled(sensor)
        }
    }

    private fun getOpForSensor(sensor: Int): String? {
        return when (sensor) {
            CAMERA -> AppOpsManager.OPSTR_CAMERA
            MICROPHONE -> AppOpsManager.OPSTR_RECORD_AUDIO
            else -> null
        }
    }

    private fun getOpForPackage(): AppOpsManager.PackageOps {
        return callWithShellPermissionIdentity {
            val uid = try {
                package"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/sensorprivacy/src/android/sensorprivacy/cts/SensorPrivacyBaseTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.sensorprivacy.cts.SensorPrivacyBaseTest.kt"	"isSensorPrivacyEnabled"	"CtsSensorPrivacyTestCases"	"1: microphone"	"([2:/android/sensorprivacy/cts/SensorPrivacyBaseTest.kt]:[microphone]:[2]:method_text:[arDown() {        finishTestApp()        Thread.sleep(3000)        setSensor(oldState)    }   ]) :|: /*
 *.
 */

package android.sensorprivacy.cts

import android.app.KeyguardManager
import android.app.AppOpsManager
import android.content.Intent
import android.content.pm.PackageManager
import android.hardware.SensorPrivacyManager
import android.hardware.SensorPrivacyManager.OnSensorPrivacyChangedListener
import android.os.PowerManager
import android.platform.test.annotations.AppModeFull
import android.hardware.SensorPrivacyManager.Sensors.CAMERA
import android.hardware.SensorPrivacyManager.Sensors.MICROPHONE
import android.hardware.SensorPrivacyManager.Sources.OTHER
import android.support.test.uiautomator.By
import android.view.KeyEvent
import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.uiautomator.UiDevice
import com.android.compatibility.common.util.SystemUtil.callWithShellPermissionIdentity
import com.android.compatibility.common.util.SystemUtil.eventually
import com.android.compatibility.common.util.SystemUtil.runShellCommandOrThrow
import com.android.compatibility.common.util.SystemUtil.runWithShellPermissionIdentity
import com.android.compatibility.common.util.UiAutomatorUtils
import org.junit.After
import org.junit.Assert.assertEquals
import org.junit.Assert.assertFalse
import org.junit.Assert.assertNull
import org.junit.Assert.assertTrue
import org.junit.Assume
import org.junit.Before
import org.junit.Test
import java.util.concurrent.CountDownLatch
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import java.util.regex.Pattern

abstract class SensorPrivacyBaseTest(
    val sensor: Int,
    vararg val extras: String
) {

    companion object {
        const val MIC_CAM_ACTIVITY_ACTION =
                ""android.sensorprivacy.cts.usemiccamera.action.USE_MIC_CAM""
        const val FINISH_MIC_CAM_ACTIVITY_ACTION =
                ""android.sensorprivacy.cts.usemiccamera.action.FINISH_USE_MIC_CAM""
        const val USE_MIC_EXTRA =
                ""android.sensorprivacy.cts.usemiccamera.extra.USE_MICROPHONE"""	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/sensorprivacy/src/android/sensorprivacy/cts/SensorPrivacyBaseTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.webkit.cts.HttpAuthHandlerTest"	"HttpAuthHandlerTest"	"CtsWebkitTestCases"	"1: granted"	"([1:/android/webkit/cts/HttpAuthHandlerTest.java]:[granted]:[1]:method_text:[ealm);        assertEquals(TestHtmlConstants.HELLO_WORLD_TITLE, mOnUiThread.getTitle());    }   ]) :|: public void test/*
 *.
 */

package android.webkit.cts;

import android.platform.test.annotations.AppModeFull;
import android.test.ActivityInstrumentationTestCase2;
import android.webkit.HttpAuthHandler;
import android.webkit.WebView;
import android.webkit.cts.WebViewSyncLoader.WaitForLoadedClient;

import com.android.compatibility.common.util.NullWebViewUtils;

import org.apache.http.HttpStatus;

@AppModeFull
public class HttpAuthHandlerTest extends ActivityInstrumentationTestCase2<WebViewCtsActivity> {

    private static final long TIMEOUT = 10000;

    private static final String WRONG_USERNAME = ""wrong_user"";
    private static final String WRONG_PASSWORD = ""wrong_password"";
    private static final String CORRECT_USERNAME = CtsTestServer.AUTH_USER;
    private static final String CORRECT_PASSWORD = CtsTestServer.AUTH_PASS;

    private CtsTestServer mWebServer;
    private WebViewOnUiThread mOnUiThread;

    public HttpAuthHandlerTest() {
        super(""android.webkit.cts"", WebViewCtsActivity.class);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        WebView webview = getActivity().getWebView();
        if (webview != null) {
            mOnUiThread = new WebViewOnUiThread(webview);
        }
    }

    @Override
    protected void tearDown() throws Exception {
        if (mOnUiThread != null) {
            mOnUiThread.cleanUp();
        }

        if (mWebServer != null) {
            mWebServer.shutdown();
        }
        super.tearDown();
    }

    private class ProceedHttpAuthClient extends WaitForLoadedClient {
        String realm;
        boolean useHttpAuthUsernamePassword;

        private int mMaxAuthAttempts;
        private String mUser;
        private String mPassword;
        private int mAuthCount;

        ProceedHttpAuthClient(int maxAuthAttempts, String user, String password) {
            super(mOnUiThread);
            mMaxAuthAttempts = maxAuthAttempts;
            mUser = user;"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/HttpAuthHandlerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.webkit.cts.HttpAuthHandlerTest"	"testProceed"	"CtsWebkitTestCases"	"1: granted"	"([1:/android/webkit/cts/HttpAuthHandlerTest.java]:[granted]:[1]:method_text:[       missingCredentialsAccessDenied(url);        correctCredentialsAccessGranted(url);    }   ]) :|: public void testProceed() throws Throwable {
        if (!NullWebViewUtils.isWebViewAvailable()) {
            return;
        }
        mWebServer = new CtsTestServer(getActivity());
        String url = mWebServer.getAuthAssetUrl(TestHtmlConstants.HELLO_WORLD_URL);

        incorrectCredentialsAccessDenied(url);
        missingCredentialsAccessDenied(url);
        correctCredentialsAccessGranted(url);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/HttpAuthHandlerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telecom.cts.ThirdPartyCallScreeningServiceTest"	"testNoPostCallActivityForIncomingEmergencyCall"	"CtsTelecomTestCases"	"2: granted silent"	"([5:/android/telecom/cts/ThirdPartyCallScreeningServiceTest.java]:[silent]:[5]:method_text:[D_CONTACTS, TEST_APP_PACKAGE)                        == PackageManager.PERMISSION_GRANTED);    }}]) :|: public void testNoPostCallActivityForIncomingEmergencyCall() throws Exception {
        if (!shouldTestTelecom(mContext)) {
            return;
        }
        setupForEmergencyCalling(TEST_EMERGENCY_NUMBER);
        mCallScreeningControl.setCallResponse(false /* shouldDisallowCall */,
                false /* shouldRejectCall */, false /* shouldSilenceCall */,
                false /* shouldSkipCallLog */, false /* shouldSkipNotification */);
        Bundle extras = new Bundle();
        extras.putParcelable(TelecomManager.EXTRA_INCOMING_CALL_ADDRESS, TEST_EMERGENCY_URI);
        extras.putBoolean(EXTRA_NETWORK_IDENTIFIED_EMERGENCY_CALL, true);
        mTelecomManager.addNewIncomingCall(TestUtils.TEST_PHONE_ACCOUNT_HANDLE, extras);

        // Wait until the new incoming call is processed.
        waitOnAllHandlers(getInstrumentation());
        mInCallCallbacks.getService().disconnectAllCalls();

        assertFalse(mCallScreeningControl.waitForActivity());
    }

    private void placeOutgoingCall(boolean addContact) throws Exception {
        // Setup content observer to notify us when we call log entry is added.
        CountDownLatch callLogEntryLatch = getCallLogEntryLatch();

        Uri contactUri = null;
        if (addContact) {
            contactUri = TestUtils.insertContact(mContentResolver,
                    TEST_OUTGOING_NUMBER.getSchemeSpecificPart());
        }

        try {
            Bundle extras = new Bundle();
            extras.putParcelable(TestUtils.EXTRA_PHONE_NUMBER, TEST_OUTGOING_NUMBER);
            // Create a new outgoing call.
            placeAndVerifyCall(extras);

            mInCallCallbacks.getService().disconnectAllCalls();
            assertNumCalls(mInCallCallbacks.getService(), 0);

            // Wait for it to log.
            callLogEntryLatch.await(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);
        } finally {
            if (addContact) {
                assertEquals(1, TestUtils.deleteContact(mContentResolver, contac"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/ThirdPartyCallScreeningServiceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telecom.cts.ThirdPartyInCallServiceTest"	"isDialerRoleAvailable"	"CtsTelecomTestCases"	"1: granted"	"([1:/android/telecom/cts/ThirdPartyInCallServiceTest.java]:[granted]:[1]:method_text:[    * the app holding the {@link RoleManager#ROLE_DIALER} role.     * @throws Exception     */   ]) :|: public void test/*
 *.
 */

package android.telecom.cts;

import static android.telecom.cts.TestUtils.WAIT_FOR_STATE_CHANGE_TIMEOUT_MS;

import android.Manifest;
import android.app.UiModeManager;
import android.app.role.RoleManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.IBinder;
import android.os.RemoteException;
import android.telecom.TelecomManager;
import android.telecom.cts.thirdptydialer.CtsThirdPtyDialerInCallServiceControl;
import android.telecom.cts.thirdptyincallservice.CtsThirdPartyInCallService;
import android.telecom.cts.thirdptyincallservice.CtsThirdPartyInCallServiceControl;
import android.telecom.cts.thirdptyincallservice.ICtsThirdPartyInCallServiceControl;
import android.util.Log;

import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

public class ThirdPartyInCallServiceTest extends BaseTelecomTestWithMockServices {

    private static final String TAG = ThirdPartyInCallServiceTest.class.getSimpleName();
    private Context mContext;
    private CtsRoleManagerAdapter mCtsRoleManagerAdapter;
    ICtsThirdPartyInCallServiceControl mICtsThirdPartyInCallServiceControl;
    private boolean mSkipNullUnboundLatch;
    private String mPreviousRoleHolder;
    private String mThirdPartyPackageName;
    private boolean mIsDialerRoleAvailable;

    @Override
    public void setUp() throws Exception {
        super.setUp();
        mContext = getInstrumentation().getContext();
        mCtsRoleManagerAdapter = new CtsRoleManagerAdapter(getInstrumentation());

        // Do not continue with tests if the Dialer role is not available.
        mIsDialerRoleAvailable = mCtsRoleManagerAdapter.isDialerRoleAvailable();
        if (!mIsDialerRoleAvailable) return;

        setUpControl();
        mICtsThirdPartyInCallServiceControl.resetLatchForServiceBound(false);
        mThirdPartyPackageName = Ct"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/ThirdPartyInCallServiceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telecom.cts.ThirdPartyInCallServiceTest"	"testPermissionGranted"	"CtsTelecomTestCases"	"1: granted"	"([1:/android/telecom/cts/ThirdPartyInCallServiceTest.java]:[granted]:[1]:method_text:[        }        bindLatch.await(WAIT_FOR_STATE_CHANGE_TIMEOUT_MS, TimeUnit.MILLISECONDS);    }}]) :|: public void testPermissionGranted() throws Exception {
        if (!mIsDialerRoleAvailable) return;

        assertFalse(mICtsThirdPartyInCallServiceControl.checkPermissionGrant(
                Manifest.permission.READ_VOICEMAIL));
        assertFalse(mICtsThirdPartyInCallServiceControl.checkPermissionGrant(
                Manifest.permission.WRITE_VOICEMAIL));
        mCtsRoleManagerAdapter.setDialerRoleHolder(mThirdPartyPackageName);
        assertTrue(mICtsThirdPartyInCallServiceControl.checkPermissionGrant(
                Manifest.permission.READ_VOICEMAIL));
        assertTrue(mICtsThirdPartyInCallServiceControl.checkPermissionGrant(
                Manifest.permission.WRITE_VOICEMAIL));
    }

    private void setUpControl() throws InterruptedException {
        Intent bindIntent = new Intent(CtsThirdPartyInCallServiceControl.CONTROL_INTERFACE_ACTION);
        // mContext is android.telecom.cts, which doesn't include thirdptyincallservice.
        ComponentName controlComponentName =
                ComponentName.createRelative(
                        CtsThirdPtyDialerInCallServiceControl.class.getPackage().getName(),
                        CtsThirdPtyDialerInCallServiceControl.class.getName());

        bindIntent.setComponent(controlComponentName);
        final CountDownLatch bindLatch = new CountDownLatch(1);
        boolean success = mContext.bindService(bindIntent, new ServiceConnection() {
            @Override
            public void onServiceConnected(ComponentName name, IBinder service) {
                Log.i(TAG, ""Service Connected: "" + name);
                mICtsThirdPartyInCallServiceControl =
                        ICtsThirdPartyInCallServiceControl.Stub.asInterface(service);
                bindLatch.countDown();
            }

            @Override
            public void onServiceDisconnected(ComponentName name) {
                mICtsThirdPartyInCallServiceControl = null;
            }
        }, Context.BIND_AUTO_CREATE);
        if"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/ThirdPartyInCallServiceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.os.cts.CompanionDeviceManagerTest.kt"	"InstrumentationTestCase"	""	"1: granted"	"([1:/android/os/cts/CompanionDeviceManagerTest.kt]:[granted]:[1]:method_text:[$address"")        }    }    @AppModeFull(reason = ""Companion API for non-instant apps only"")   ]) :|: /*
 *.
 */

package android.os.cts

import android.companion.CompanionDeviceManager
import android.content.pm.PackageManager.FEATURE_AUTOMOTIVE
import android.content.pm.PackageManager.FEATURE_COMPANION_DEVICE_SETUP
import android.content.pm.PackageManager.PERMISSION_GRANTED
import android.net.MacAddress
import android.os.Binder
import android.os.Bundle
import android.os.Parcelable
import android.os.UserHandle
import android.platform.test.annotations.AppModeFull
import android.test.InstrumentationTestCase
import android.util.Size
import android.util.SizeF
import android.util.SparseArray
import android.view.accessibility.AccessibilityNodeInfo
import android.view.accessibility.AccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE
import android.view.accessibility.AccessibilityNodeInfo.ACTION_SET_TEXT
import android.widget.EditText
import android.widget.TextView
import androidx.test.InstrumentationRegistry
import androidx.test.runner.AndroidJUnit4
import com.android.compatibility.common.util.MatcherUtils
import com.android.compatibility.common.util.MatcherUtils.hasIdThat
import com.android.compatibility.common.util.SystemUtil.eventually
import com.android.compatibility.common.util.SystemUtil.getEventually
import com.android.compatibility.common.util.SystemUtil.runShellCommand
import com.android.compatibility.common.util.SystemUtil.runShellCommandOrThrow
import com.android.compatibility.common.util.SystemUtil.runWithShellPermissionIdentity
import com.android.compatibility.common.util.ThrowingSupplier
import com.android.compatibility.common.util.UiAutomatorUtils.waitFindObject
import com.android.compatibility.common.util.children
import com.android.compatibility.common.util.click
import org.hamcrest.CoreMatchers.`is`
import org.hamcrest.CoreMatchers.containsString
import org.hamcrest.CoreMatchers.equalTo
import org.hamcrest.Matcher
import org.hamcrest.Matchers.empty
import org.hamcrest.Matchers.not
import org.junit.Assert.assertThat
import org.junit.Assume.assumeFa"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/CompanionDeviceManagerTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.os.cts.CompanionDeviceManagerTest.kt"	"testProfiles"	""	"1: granted"	"([2:/android/os/cts/CompanionDeviceManagerTest.kt]:[granted]:[2]:method_text:[ PERMISSION_GRANTED)    }    @AppModeFull(reason = ""Companion API for non-instant apps only"")   ]) :|: 
    fun testProfiles() {
        val packageName = ""android.os.cts.companiontestapp""
        installApk(
                ""--user ${UserHandle.myUserId()} /data/local/tmp/cts/os/CtsCompanionTestApp.apk"")
        startApp(packageName)

        waitFindNode(hasClassThat(`is`(equalTo(EditText::class.java.name))))
                .performAction(ACTION_SET_TEXT,
                        bundleOf(ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE to """"))
        waitForIdle()

        click(""Watch"")
        val device = getEventually({
            click(""Associate"")
            waitFindNode(hasIdThat(containsString(""device_list"")),
                    failMsg = ""Test requires a discoverable bluetooth device nearby"",
                    timeoutMs = 9_000)
                    .children
                    .find { it.className == TextView::class.java.name }
                    .assertNotNull { ""Empty device list"" }
        }, 90_000)
        device!!.click()

        eventually {
            assertThat(getAssociatedDevices(packageName), not(empty()))
        }
        val deviceAddress = getAssociatedDevices(packageName).last()

        runShellCommandOrThrow(""cmd companiondevice simulate_connect $deviceAddress"")
        assertPermission(packageName, ""android.permission.CALL_PHONE"", PERMISSION_GRANTED)

        runShellCommandOrThrow(""cmd companiondevice simulate_disconnect $deviceAddress"")
        assertPermission(packageName, ""android.permission.CALL_PHONE"", PERMISSION_GRANTED)
    }

    @AppModeFull(reason = ""Companion API for non-instant apps only"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/CompanionDeviceManagerTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.os.cts.AutoRevokeTest.kt"	"DisableAnimationRule"	""	"1: granted"	"([1:/android/os/cts/AutoRevokeTest.kt]:[granted]:[1]:method_text:[ cleanUp() {        goHome()    }    @AppModeFull(reason = ""Uses separate apps for testing"")   ]) :|: /*
 *.
 */

package android.os.cts

import android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_TOP_SLEEPING
import android.app.Instrumentation
import android.content.Context
import android.content.Intent
import android.content.Intent.ACTION_AUTO_REVOKE_PERMISSIONS
import android.content.Intent.FLAG_ACTIVITY_NEW_TASK
import android.content.pm.PackageManager
import android.content.pm.PackageManager.PERMISSION_DENIED
import android.content.pm.PackageManager.PERMISSION_GRANTED
import android.content.res.Resources
import android.net.Uri
import android.os.Build
import android.platform.test.annotations.AppModeFull
import android.support.test.uiautomator.By
import android.support.test.uiautomator.BySelector
import android.support.test.uiautomator.UiObject2
import android.support.test.uiautomator.UiObjectNotFoundException
import android.view.accessibility.AccessibilityNodeInfo
import android.widget.Switch
import androidx.test.InstrumentationRegistry
import androidx.test.filters.SdkSuppress
import androidx.test.runner.AndroidJUnit4
import com.android.compatibility.common.util.DisableAnimationRule
import com.android.compatibility.common.util.FreezeRotationRule
import com.android.compatibility.common.util.MatcherUtils.hasTextThat
import com.android.compatibility.common.util.SystemUtil
import com.android.compatibility.common.util.SystemUtil.callWithShellPermissionIdentity
import com.android.compatibility.common.util.SystemUtil.eventually
import com.android.compatibility.common.util.SystemUtil.getEventually
import com.android.compatibility.common.util.SystemUtil.runShellCommandOrThrow
import com.android.compatibility.common.util.SystemUtil.runWithShellPermissionIdentity
import com.android.compatibility.common.util.UI_ROOT
import com.android.compatibility.common.util.click
import com.android.compatibility.common.util.depthFirstSearch
import com.android.compatibility.common.util.uiDump
import com.android.modules.utils.build.SdkLevel
import org.hamcrest.CoreMatchers.contain"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/AutoRevokeTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.os.cts.AutoRevokeTest.kt"	"testUnusedApp_doesntGetSplitPermissionRevoked"	""	"1: granted"	"([2:/android/os/cts/AutoRevokeTest.kt]:[granted]:[2]:method_text:[NECT)            }        }    }    @AppModeFull(reason = ""Uses separate apps for testing"")   ]) :|: 
    fun testUnusedApp_doesntGetSplitPermissionRevoked() {
        assumeFalse(
            ""Auto doesn't support hibernation for pre-S apps"",
            isAutomotiveDevice())
        withUnusedThresholdMs(3L) {
            withDummyApp(APK_PATH_R_APP, APK_PACKAGE_NAME_R_APP) {
                // Setup
                startApp(APK_PACKAGE_NAME_R_APP)
                assertPermission(PERMISSION_GRANTED, APK_PACKAGE_NAME_R_APP, BLUETOOTH_CONNECT)
                killDummyApp(APK_PACKAGE_NAME_R_APP)
                Thread.sleep(500)

                // Run
                runAppHibernationJob(context, LOG_TAG)

                // Verify
                assertPermission(PERMISSION_GRANTED, APK_PACKAGE_NAME_R_APP, BLUETOOTH_CONNECT)
            }
        }
    }

    @AppModeFull(reason = ""Uses separate apps for testing"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/AutoRevokeTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.os.cts.AutoRevokeTest.kt"	"testUsedApp_doesntGetPermissionRevoked"	""	"1: granted"	"([2:/android/os/cts/AutoRevokeTest.kt]:[granted]:[2]:method_text:[NTED)            }        }    }    @AppModeFull(reason = ""Uses separate apps for testing"")   ]) :|: 
    fun testUsedApp_doesntGetPermissionRevoked() {
        withUnusedThresholdMs(100_000L) {
            withDummyApp {
                // Setup
                startApp()
                clickPermissionAllow()
                assertPermission(PERMISSION_GRANTED)
                killDummyApp()
                Thread.sleep(5)

                // Run
                runAppHibernationJob(context, LOG_TAG)
                Thread.sleep(1000)

                // Verify
                assertPermission(PERMISSION_GRANTED)
            }
        }
    }

    @AppModeFull(reason = ""Uses separate apps for testing"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/AutoRevokeTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.os.cts.AutoRevokeTest.kt"	"testPreMinAutoRevokeVersionUnusedApp_doesntGetPermissionRevoked"	""	"1: granted"	"([3:/android/os/cts/AutoRevokeTest.kt]:[granted]:[3]:method_text:[    }            }        }    }    @AppModeFull(reason = ""Uses separate apps for testing"")   ]) :|: 
    fun testPreMinAutoRevokeVersionUnusedApp_doesntGetPermissionRevoked() {
        withUnusedThresholdMs(3L) {
            withDummyApp(preMinVersionApkPath, preMinVersionAppPackageName) {
                withDummyApp {
                    startApp(preMinVersionAppPackageName)
                    clickPermissionAllow()
                    assertPermission(PERMISSION_GRANTED, preMinVersionAppPackageName)

                    killDummyApp(preMinVersionAppPackageName)

                    startApp()
                    clickPermissionAllow()
                    assertPermission(PERMISSION_GRANTED)

                    killDummyApp()
                    Thread.sleep(20)

                    // Run
                    runAppHibernationJob(context, LOG_TAG)
                    Thread.sleep(500)

                    // Verify
                    assertPermission(PERMISSION_DENIED)
                    assertPermission(PERMISSION_GRANTED, preMinVersionAppPackageName)
                }
            }
        }
    }

    @AppModeFull(reason = ""Uses separate apps for testing"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/AutoRevokeTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.os.cts.AutoRevokeTest.kt"	"testAutoRevoke_userAllowlisting"	""	"1: granted"	"([1:/android/os/cts/AutoRevokeTest.kt]:[granted]:[1]:method_text:[NTED)            }        }    }    @AppModeFull(reason = ""Uses separate apps for testing"")   ]) :|: 
    fun testAutoRevoke_userAllowlisting() {
        assumeFalse(context.packageManager.hasSystemFeature(PackageManager.FEATURE_AUTOMOTIVE))
        withUnusedThresholdMs(4L) {
            withDummyApp {
                // Setup
                startApp()
                clickPermissionAllow()
                assertAllowlistState(false)

                // Verify
                waitFindObject(byTextIgnoreCase(""Request allowlist"")).click()
                waitFindObject(byTextIgnoreCase(""Permissions"")).click()
                val autoRevokeEnabledToggle = getAllowlistToggle()
                assertTrue(autoRevokeEnabledToggle.isChecked())

                // Grant allowlist
                autoRevokeEnabledToggle.click()
                eventually {
                    assertFalse(getAllowlistToggle().isChecked())
                }

                // Run
                goBack()
                goBack()
                goBack()
                runAppHibernationJob(context, LOG_TAG)
                Thread.sleep(500L)

                // Verify
                startApp()
                assertAllowlistState(true)
                assertPermission(PERMISSION_GRANTED)
            }
        }
    }

    @AppModeFull(reason = ""Uses separate apps for testing"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/AutoRevokeTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.os.cts.AutoRevokeTest.kt"	"testInstallGrants_notRevokedImmediately"	""	"1: granted"	"([1:/android/os/cts/AutoRevokeTest.kt]:[granted]:[1]:method_text:[NTED)            }        }    }    @AppModeFull(reason = ""Uses separate apps for testing"")   ]) :|: 
    fun testInstallGrants_notRevokedImmediately() {
        withUnusedThresholdMs(TimeUnit.DAYS.toMillis(30)) {
            withDummyApp {
                // Setup
                goToPermissions()
                click(""Calendar"")
                click(""Allow"")
                goBack()
                goBack()
                goBack()

                // Run
                runAppHibernationJob(context, LOG_TAG)
                Thread.sleep(500)

                // Verify
                assertPermission(PERMISSION_GRANTED)
            }
        }
    }

    @AppModeFull(reason = ""Uses separate apps for testing"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/AutoRevokeTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.os.cts.AutoRevokeTest.kt"	"testAutoRevoke_allowlistingApis"	""	"1: granted"	"([1:/android/os/cts/AutoRevokeTest.kt]:[granted]:[1]:method_text:[rorMsg: () -> String): T {    return if (this == null) throw AssertionError(errorMsg()) else this}]) :|: 
    fun testAutoRevoke_allowlistingApis() {
        withDummyApp {
            val pm = context.packageManager
            runWithShellPermissionIdentity {
                assertFalse(pm.isAutoRevokeWhitelisted(supportedAppPackageName))
            }

            runWithShellPermissionIdentity {
                assertTrue(pm.setAutoRevokeWhitelisted(supportedAppPackageName, true))
            }
            eventually {
                runWithShellPermissionIdentity {
                    assertTrue(pm.isAutoRevokeWhitelisted(supportedAppPackageName))
                }
            }

            runWithShellPermissionIdentity {
                assertTrue(pm.setAutoRevokeWhitelisted(supportedAppPackageName, false))
            }
            eventually {
                runWithShellPermissionIdentity {
                    assertFalse(pm.isAutoRevokeWhitelisted(supportedAppPackageName))
                }
            }
        }
    }

    private fun isAutomotiveDevice(): Boolean {
        return context.packageManager.hasSystemFeature(PackageManager.FEATURE_AUTOMOTIVE)
    }

    private fun installApp() {
        installApk(supportedApkPath)
    }

    private fun isPackageInstalled(packageName: String): Boolean {
        val pm = context.packageManager

        return callWithShellPermissionIdentity {
            try {
                pm.getPackageInfo(packageName, 0)
                true
            } catch (e: PackageManager.NameNotFoundException) {
                false
            }
        }
    }

    private fun uninstallApp() {
        uninstallApp(supportedAppPackageName)
    }

    private fun startApp() {
        startApp(supportedAppPackageName)
    }

    private fun startAppAndAcceptPermission() {
        startApp()
        clickPermissionAllow()
        assertPermission(PERMISSION_GRANTED)
    }

    private fun goBack() {
        runShellCommandOrThrow(""input keyevent KEYCODE_BACK"")
    }

    private fun killDummyApp(pkg: String = supportedAppPackage"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/AutoRevokeTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.BassBoostTest"	"test3_2ParameterChangedListener"	""	"1: granted"	"([2:/android/media/audio/cts/BassBoostTest.java]:[granted]:[2]:method_text:[ost2 != null) {            mBassBoost2.release();            mBassBoost2 = null;        }    }}]) :|: public void test3_2ParameterChangedListener() throws Exception {
        if (!isBassBoostAvailable()) {
            return;
        }
        synchronized(mLock) {
            mInitialized = false;
            createListenerLooper(false, false, true);
            waitForLooperInitialization_l();

            getBassBoost(mSession);
            mChangedParameter = -1;
            mBassBoost.setStrength(TEST_STRENGTH);
            int looperWaitCount = MAX_LOOPER_WAIT_COUNT;
            while ((mChangedParameter == -1) && (looperWaitCount-- > 0)) {
                try {
                    mLock.wait();
                } catch(Exception e) {
                }
            }
            terminateListenerLooper();
            releaseBassBoost();
        }
        assertEquals(""parameter change not received"",
                BassBoost.PARAM_STRENGTH, mChangedParameter);
    }

    //-----------------------------------------------------------------
    // private methods
    //----------------------------------

    private void getBassBoost(int session) {
         if (mBassBoost == null || session != mSession) {
             if (session != mSession && mBassBoost != null) {
                 mBassBoost.release();
                 mBassBoost = null;
             }
             try {
                mBassBoost = new BassBoost(0, session);
                mSession = session;
            } catch (IllegalArgumentException e) {
                Log.e(TAG, ""getBassBoost() BassBoost not found exception: ""+e);
            } catch (UnsupportedOperationException e) {
                Log.e(TAG, ""getBassBoost() Effect library not loaded exception: ""+e);
            }
         }
         assertNotNull(""could not create mBassBoost"", mBassBoost);
    }

    private void releaseBassBoost() {
        if (mBassBoost != null) {
            mBassBoost.release();
            mBassBoost = null;
        }
    }

    private void waitForLooperInitialization_l() {
        int looperWaitCount = MAX_LO"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/BassBoostTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordAppOpTest"	"testRecordAppOps"	""	"3: RECORD_AUDIO Microphone microphone"	"([3:/android/media/audio/cts/AudioRecordAppOpTest.java]:[microphone]:[3]:method_text:[tContext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }}]) :|: 
    public void testRecordAppOps() {
        if (!hasMicrophone()) {
            return;
        }

        final String packageName = getContext().getPackageName();
        final int uid = Process.myUid();

        final AppOpsManager appOpsManager = getContext().getSystemService(AppOpsManager.class);
        final OnOpActiveChangedListener mockListener = mock(OnOpActiveChangedListener.class);
        final OnOpActiveChangedListener listener = new OnOpActiveChangedListener() {
            public void onOpActiveChanged(String op, int uid, String packageName, boolean active) {
                mockListener.onOpActiveChanged(op, uid, packageName, active);
            }
        };

        AudioRecord recorder = null;
        try {
            // Setup a recorder
            final AudioRecord candidateRecorder = new AudioRecord.Builder()
                    .setAudioSource(MediaRecorder.AudioSource.MIC)
                    .setBufferSizeInBytes(1024)
                    .setAudioFormat(new AudioFormat.Builder()
                            .setSampleRate(8000)
                            .setChannelMask(AudioFormat.CHANNEL_IN_MONO)
                            .setEncoding(AudioFormat.ENCODING_PCM_16BIT)
                            .build())
                    .build();

            // The app op should be reported as not started
            assertThat(appOpsManager.isOpActive(OPSTR_RECORD_AUDIO,
                    uid, packageName)).isFalse();

            // Start watching for app op active
            appOpsManager.startWatchingActive(new String[] { OPSTR_RECORD_AUDIO },
                    getContext().getMainExecutor(), listener);

            // Start recording
            candidateRecorder.startRecording();
            recorder = candidateRecorder;

            // The app op should start
            verify(mockListener, timeout(APP_OP_CHANGE_TIMEOUT_MILLIS)
                    .only()).onOpActiveChanged(eq(OPSTR_RECORD_AUDIO),
                    eq(uid), eq(pac"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordAppOpTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.RoutingTest"	"test_audioRecord_audioRouting_RoutingListener"	""	"1: microphone"	"([1:/android/media/audio/cts/RoutingTest.java]:[microphone]:[1]:method_text:[oRecord.release();        if (myLooper != null) {            myLooper.quit();        }    }   ]) :|: public void test_audioRecord_audioRouting_RoutingListener() {
        test_audioRecord_RoutingListener(true /*usesAudioRouting*/);
    }

    private void test_audioRecord_RoutingListener(boolean usesAudioRouting) {
        if (!mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_MICROPHONE)) {
            // Can't do it so skip this test
            return;
        }
        AudioRecord audioRecord = allocAudioRecord();

        // null listener
        if (usesAudioRouting) {
            audioRecord.addOnRoutingChangedListener(
                    (AudioRouting.OnRoutingChangedListener) null, null);
        } else {
            audioRecord.addOnRoutingChangedListener(
                    (AudioRecord.OnRoutingChangedListener) null, null);
        }

        AudioRecordRoutingListener listener = new AudioRecordRoutingListener();
        AudioRecordRoutingListener someOtherListener = new AudioRecordRoutingListener();

        // add a listener
        if (usesAudioRouting) {
            audioRecord.addOnRoutingChangedListener(
                    (AudioRouting.OnRoutingChangedListener) listener, null);
        } else {
            audioRecord.addOnRoutingChangedListener(
                    (AudioRecord.OnRoutingChangedListener) listener, null);
        }

        // remove listeners
        if (usesAudioRouting) {
            // remove a listener we didn't add
            audioRecord.removeOnRoutingChangedListener(
                    (AudioRouting.OnRoutingChangedListener) someOtherListener);
            // remove a valid listener
            audioRecord.removeOnRoutingChangedListener(
                    (AudioRouting.OnRoutingChangedListener) listener);
        } else {
            // remove a listener we didn't add
            audioRecord.removeOnRoutingChangedListener(
                    (AudioRecord.OnRoutingChangedListener) someOtherListener);
            // remove a valid listener
            audioRecord.removeOnRoutingChangedListener("	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/RoutingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.RoutingTest"	"test_audioRecord_preferredDevice"	""	"1: microphone"	"([1:/android/media/audio/cts/RoutingTest.java]:[microphone]:[1]:method_text:[ {                mAudioTrack.write(mAudioData, 0, mBufferSize);            }        }    }   ]) :|: public void test_audioRecord_preferredDevice() {
        if (!mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_MICROPHONE)) {
            // Can't do it so skip this test
            return;
        }

        AudioRecord audioRecord = allocAudioRecord();
        assertNotNull(audioRecord);

        // None selected (new AudioRecord), so check for default
        assertNull(audioRecord.getPreferredDevice());

        // resets to default
        assertTrue(audioRecord.setPreferredDevice(null));

        // test each device
        AudioDeviceInfo[] deviceList = mAudioManager.getDevices(AudioManager.GET_DEVICES_INPUTS);
        for (int index = 0; index < deviceList.length; index++) {
            assertTrue(audioRecord.setPreferredDevice(deviceList[index]));
            assertTrue(audioRecord.getPreferredDevice() == deviceList[index]);
        }

        // Check defaults again
        assertTrue(audioRecord.setPreferredDevice(null));
        assertNull(audioRecord.getPreferredDevice());

        audioRecord.release();
    }

    private class AudioTrackFiller implements Runnable {
        AudioTrack mAudioTrack;
        int mBufferSize;

        boolean mPlaying;

        short[] mAudioData;

        public AudioTrackFiller(AudioTrack audioTrack, int bufferSize) {
            mAudioTrack = audioTrack;
            mBufferSize = bufferSize;
            mPlaying = false;

            // setup audio data (silence will suffice)
            mAudioData = new short[mBufferSize];
            for (int index = 0; index < mBufferSize; index++) {
                mAudioData[index] = 0;
            }
        }

        public void start() { mPlaying = true; }
        public void stop() { mPlaying = false; }

        @Override
        public void run() {
            while (mAudioTrack != null && mPlaying) {
                mAudioTrack.write(mAudioData, 0, mBufferSize);
            }
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/RoutingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.RoutingTest"	"test_audioRecord_getRoutedDevice"	""	"1: microphone"	"([1:/android/media/audio/cts/RoutingTest.java]:[microphone]:[1]:method_text:[      if (start) {            mediaPlayer.start();        }        return mediaPlayer;    }   ]) :|: public void test_audioRecord_getRoutedDevice() throws Exception {
        if (!mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_MICROPHONE)) {
            return;
        }

        if (!DeviceUtils.hasInputDevice(mAudioManager)) {
            Log.i(TAG, ""No input devices. Test skipped"");
            return; // nothing to test here
        }

        int bufferSize =
                AudioRecord.getMinBufferSize(
                    41000,
                    AudioFormat.CHANNEL_OUT_DEFAULT,
                    AudioFormat.ENCODING_PCM_16BIT);
        AudioRecord audioRecord =
            new AudioRecord(
                MediaRecorder.AudioSource.DEFAULT,
                41000, AudioFormat.CHANNEL_OUT_DEFAULT,
                AudioFormat.ENCODING_PCM_16BIT,
                bufferSize);

        AudioRecordPuller puller = new AudioRecordPuller(audioRecord, bufferSize);
        puller.start();

        audioRecord.startRecording();

        Thread pullerThread = new Thread(puller);
        pullerThread.start();

        assertHasNonNullRoutedDevice(audioRecord);

        puller.stop();
        audioRecord.stop();
        audioRecord.release();
    }

    static class AudioRoutingListener implements AudioRouting.OnRoutingChangedListener
    {
        private boolean mCalled;
        private boolean mCallExpected;
        private CountDownLatch mCountDownLatch;

        AudioRoutingListener() {
            reset();
        }

        public void onRoutingChanged(AudioRouting audioRouting) {
            mCalled = true;
            mCountDownLatch.countDown();
        }

        void await(long timeoutMs) {
            try {
                mCountDownLatch.await(timeoutMs, TimeUnit.MILLISECONDS);
            } catch (InterruptedException e) {
            }
        }

        void setCallExpected(boolean flag) {
            mCallExpected = flag;
        }

        boolean isCallExpected() {
            return mCallExpected;
        }

        boolean isR"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/RoutingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.RoutingTest"	"test_mediaRecorder_preferredDevice"	""	"1: microphone"	"([2:/android/media/audio/cts/RoutingTest.java]:[microphone]:[2]:method_text:[ad.sleep(RECORD_TIME_MS);        mediaRecorder.stop();        mediaRecorder.release();    }   ]) :|: public void test_mediaRecorder_preferredDevice() throws Exception {
        if (!mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_MICROPHONE)
                || !MediaUtils.hasEncoder(MediaFormat.MIMETYPE_AUDIO_AAC)) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
            return;
        }

        MediaRecorder mediaRecorder = allocMediaRecorder();

        // None selected (new MediaPlayer), so check for default
        assertNull(mediaRecorder.getPreferredDevice());

        // resets to default
        assertTrue(mediaRecorder.setPreferredDevice(null));

        // test each device
        AudioDeviceInfo[] deviceList = mAudioManager.getDevices(AudioManager.GET_DEVICES_INPUTS);
        for (int index = 0; index < deviceList.length; index++) {
            if (!AVAILABLE_INPUT_DEVICES_TYPE.contains(deviceList[index].getType())) {
                // Only try to set devices whose type is contained in predefined set as preferred
                // device in case of permission denied when switching input device.
                continue;
            }
            assertTrue(mediaRecorder.setPreferredDevice(deviceList[index]));
            assertTrue(mediaRecorder.getPreferredDevice() == deviceList[index]);
        }

        // Check defaults again
        assertTrue(mediaRecorder.setPreferredDevice(null));
        assertNull(mediaRecorder.getPreferredDevice());
        Thread.sleep(RECORD_TIME_MS);

        mediaRecorder.stop();
        mediaRecorder.release();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/RoutingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.RoutingTest"	"test_mediaRecorder_getRoutedDeviceId"	""	"1: microphone"	"([2:/android/media/audio/cts/RoutingTest.java]:[microphone]:[2]:method_text:[ad.sleep(RECORD_TIME_MS);        mediaRecorder.stop();        mediaRecorder.release();    }   ]) :|: public void test_mediaRecorder_getRoutedDeviceId() throws Exception {
        if (!mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_MICROPHONE)
            || !MediaUtils.hasEncoder(MediaFormat.MIMETYPE_AUDIO_AAC)) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
            return;
        }

        MediaRecorder mediaRecorder = allocMediaRecorder();

        AudioDeviceInfo routedDevice = mediaRecorder.getRoutedDevice();
        assertNotNull(routedDevice); // we probably can't say anything more than this
        Thread.sleep(RECORD_TIME_MS);

        mediaRecorder.stop();
        mediaRecorder.release();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/RoutingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.RoutingTest"	"test_mediaRecorder_RoutingListener"	""	"1: microphone"	"([2:/android/media/audio/cts/RoutingTest.java]:[microphone]:[2]:method_text:[iaRecorder.release();        if (myLooper != null) {            myLooper.quit();        }    }}]) :|: public void test_mediaRecorder_RoutingListener() throws Exception {
        if (!mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_MICROPHONE)
            || !MediaUtils.hasEncoder(MediaFormat.MIMETYPE_AUDIO_AAC)) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
            return;
        }

        MediaRecorder mediaRecorder = allocMediaRecorder();

        // null listener
        mediaRecorder.addOnRoutingChangedListener(null, null);

        AudioRoutingListener listener = new AudioRoutingListener();
        AudioRoutingListener someOtherListener = new AudioRoutingListener();

        // add a listener
        mediaRecorder.addOnRoutingChangedListener(listener, null);

        // remove listeners we didn't add
        mediaRecorder.removeOnRoutingChangedListener(someOtherListener);
        // remove a valid listener
        mediaRecorder.removeOnRoutingChangedListener(listener);

        Looper myLooper = prepareIfNeededLooper();
        mediaRecorder.addOnRoutingChangedListener(listener, new Handler());
        mediaRecorder.removeOnRoutingChangedListener(listener);

        Thread.sleep(RECORD_TIME_MS);

        mediaRecorder.stop();
        mediaRecorder.release();
        if (myLooper != null) {
            myLooper.quit();
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/RoutingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordingConfigurationTest"	"testAudioManagerGetActiveRecordConfigurations"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordingConfigurationTest.java]:[microphone]:[1]:method_text:[(""Unexpected number of recording configs after stop"",                configs.size(), 0);    }   ]) :|: public void testAudioManagerGetActiveRecordConfigurations() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        AudioManager am = new AudioManager(getContext());
        assertNotNull(""Could not create AudioManager"", am);

        List<AudioRecordingConfiguration> configs = am.getActiveRecordingConfigurations();
        assertNotNull(""Invalid null array of record configurations before recording"", configs);

        assertEquals(AudioRecord.STATE_INITIALIZED, mAudioRecord.getState());
        mAudioRecord.startRecording();
        assertEquals(AudioRecord.RECORDSTATE_RECORDING, mAudioRecord.getRecordingState());
        Thread.sleep(TEST_TIMING_TOLERANCE_MS);

        // recording is active, verify there is an active record configuration
        configs = am.getActiveRecordingConfigurations();
        assertNotNull(""Invalid null array of record configurations during recording"", configs);
        assertTrue(""no active record configurations (empty array) during recording"",
                configs.size() > 0);
        final int nbConfigsDuringRecording = configs.size();

        // verify our recording shows as one of the recording configs
        assertTrue(""Test source/session not amongst active record configurations"",
                verifyAudioConfig(TEST_AUDIO_SOURCE, mAudioRecord.getAudioSessionId(),
                        mAudioRecord.getFormat(), mAudioRecord.getRoutedDevice(), configs));

        // testing public API here: verify no system-privileged info is exposed through reflection
        verifyPrivilegedInfoIsSafe(configs.get(0));

        // stopping recording: verify there are less active record configurations
        mAudioRecord.stop();
        Thread.sleep(SLEEP_AFTER_STOP_FOR_INACTIVITY_MS);
        configs = am.getActiveRecordingConfigurations();
        assertEquals(""Unexpected number of recording configs after stop"",
                configs.size(), 0);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordingConfigurationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordingConfigurationTest"	"testCallback"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordingConfigurationTest.java]:[microphone]:[1]:method_text:[    return;        }        doCallbackTest(false /* no custom Handler for callback */);    }   ]) :|: public void testCallback() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        doCallbackTest(false /* no custom Handler for callback */);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordingConfigurationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordingConfigurationTest"	"testCallbackHandler"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordingConfigurationTest.java]:[microphone]:[1]:method_text:[{                h.getLooper().quit();            }        }    }    @NonMediaMainlineTest   ]) :|: public void testCallbackHandler() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        doCallbackTest(true /* use custom Handler for callback */);
    }

    private void doCallbackTest(boolean useHandlerInCallback) throws Exception {
        final Handler h;
        if (useHandlerInCallback) {
            HandlerThread handlerThread = new HandlerThread(TAG);
            handlerThread.start();
            h = new Handler(handlerThread.getLooper());
        } else {
            h = null;
        }
        try {
            AudioManager am = new AudioManager(getContext());
            assertNotNull(""Could not create AudioManager"", am);

            MyAudioRecordingCallback callback = new MyAudioRecordingCallback(
                    mAudioRecord.getAudioSessionId(), TEST_AUDIO_SOURCE);
            am.registerAudioRecordingCallback(callback, h /*handler*/);

            assertEquals(AudioRecord.STATE_INITIALIZED, mAudioRecord.getState());
            mAudioRecord.startRecording();
            assertEquals(AudioRecord.RECORDSTATE_RECORDING, mAudioRecord.getRecordingState());
            callback.await(TEST_TIMING_TOLERANCE_MS);

            assertTrue(""AudioRecordingCallback not called after start"", callback.mCalled);
            Thread.sleep(TEST_TIMING_TOLERANCE_MS);

            final AudioDeviceInfo testDevice = mAudioRecord.getRoutedDevice();
            assertTrue(""AudioRecord null routed device after start"", testDevice != null);
            final boolean match = verifyAudioConfig(mAudioRecord.getAudioSource(),
                    mAudioRecord.getAudioSessionId(), mAudioRecord.getFormat(),
                    testDevice, callback.mConfigs);
            assertTrue(""Expected record configuration was not found"", match);

            // testing public API here: verify no system-privileged info is exposed through
            // reflection
            verifyPrivilegedInfoIsSafe(callback.mConfigs.get(0));

            // stopping recor"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordingConfigurationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordingConfigurationTest"	"testParcel"	""	"2: Microphone microphone"	"([3:/android/media/audio/cts/AudioRecordingConfigurationTest.java]:[microphone]:[3]:method_text:[       fail(""Exception thrown during reflection on config privileged fields"" + e);        }    }}]) :|: public void testParcel() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        AudioManager am = new AudioManager(getContext());
        assertNotNull(""Could not create AudioManager"", am);

        assertEquals(AudioRecord.STATE_INITIALIZED, mAudioRecord.getState());
        mAudioRecord.startRecording();
        assertEquals(AudioRecord.RECORDSTATE_RECORDING, mAudioRecord.getRecordingState());
        Thread.sleep(TEST_TIMING_TOLERANCE_MS);

        List<AudioRecordingConfiguration> configs = am.getActiveRecordingConfigurations();
        assertTrue(""Empty array of record configs during recording"", configs.size() > 0);
        assertEquals(0, configs.get(0).describeContents());

        // marshall a AudioRecordingConfiguration and compare to unmarshalled
        final Parcel srcParcel = Parcel.obtain();
        final Parcel dstParcel = Parcel.obtain();

        configs.get(0).writeToParcel(srcParcel, 0 /*no public flags for marshalling*/);
        final byte[] mbytes = srcParcel.marshall();
        dstParcel.unmarshall(mbytes, 0, mbytes.length);
        dstParcel.setDataPosition(0);
        final AudioRecordingConfiguration unmarshalledConf =
                AudioRecordingConfiguration.CREATOR.createFromParcel(dstParcel);

        assertNotNull(""Failure to unmarshall AudioRecordingConfiguration"", unmarshalledConf);
        assertEquals(""Source and destination AudioRecordingConfiguration not equal"",
                configs.get(0), unmarshalledConf);
    }

    static class MyAudioRecordingCallback extends AudioManager.AudioRecordingCallback {
        boolean mCalled;
        List<AudioRecordingConfiguration> mConfigs;
        private final int mTestSource;
        private final int mTestSession;
        private CountDownLatch mCountDownLatch;

        void reset() {
            mCountDownLatch = new CountDownLatch(1);
            mCalled = false;
            mConfigs = new ArrayList<AudioRecordingConfiguration>();
        }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordingConfigurationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.VirtualizerTest"	"test4_5ConsistentCapabilitiesWithEnabledDisabled"	""	"1: granted"	"([2:/android/media/audio/cts/VirtualizerTest.java]:[granted]:[2]:method_text:[!= null) {            mVirtualizer2.release();            mVirtualizer2 = null;        }    }}]) :|: public void test4_5ConsistentCapabilitiesWithEnabledDisabled() throws Exception {
        if (!isVirtualizerAvailable()) {
            return;
        }
        getVirtualizer(getSessionId());
        try {
            // 3: see size requirement in Virtualizer.getSpeakerAngles(int, int, int[])
            // 6: for number of channels of 5.1 masks in CHANNEL_MASKS
            int[] angles = new int[3*6];
            boolean[][] values = new boolean[VIRTUALIZATION_MODES.length][CHANNEL_MASKS.length];
            mVirtualizer.setEnabled(true);
            assertTrue(""invalid state from getEnabled"", mVirtualizer.getEnabled());
            for (int m = 0 ; m < VIRTUALIZATION_MODES.length ; m++) {
                for (int i = 0 ; i < CHANNEL_MASKS.length ; i++) {
                    Arrays.fill(angles,AudioFormat.CHANNEL_INVALID);
                    boolean canVirtualize = mVirtualizer.canVirtualize(CHANNEL_MASKS[i],
                            VIRTUALIZATION_MODES[m]);
                    boolean canGetAngles = mVirtualizer.getSpeakerAngles(CHANNEL_MASKS[i],
                            VIRTUALIZATION_MODES[m], angles);
                    assertTrue(""mismatch capability between canVirtualize() and getSpeakerAngles()"",
                            canVirtualize == canGetAngles);
                    values[m][i] = canVirtualize;
                }
            }

            mVirtualizer.setEnabled(false);
            assertTrue(""invalid state from getEnabled"", !mVirtualizer.getEnabled());
            for (int m = 0 ; m < VIRTUALIZATION_MODES.length ; m++) {
                for (int i = 0 ; i < CHANNEL_MASKS.length ; i++) {
                    Arrays.fill(angles,AudioFormat.CHANNEL_INVALID);
                    boolean canVirtualize = mVirtualizer.canVirtualize(CHANNEL_MASKS[i],
                            VIRTUALIZATION_MODES[m]);
                    boolean canGetAngles = mVirtualizer.getSpeakerAngles(CHANNEL_MASKS[i],
                            VIRTUALIZATION_MODES[m], a"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/VirtualizerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioPreProcessingTest"	"test1_1NsCreateAndRelease"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioPreProcessingTest.java]:[microphone]:[1]:method_text:[   //----------------------------------    //Test case 1.2: test setEnabled() and getEnabled()   ]) :|: public void test1_1NsCreateAndRelease() throws Exception {
        if (!hasMicrophone()) {
            return;
        }

        AudioRecord ar = getAudioRecord();
        assertNotNull(""could not create AudioRecord"", ar);

        boolean isAvailable = NoiseSuppressor.isAvailable();

        NoiseSuppressor ns = NoiseSuppressor.create(ar.getAudioSessionId());
        assertTrue(""NS not available but created or available and not created"",
                isAvailable == (ns != null));
        if (ns != null) {
            ns.release();
        }
        ar.release();
    }

    //-----------------------------------------------------------------
    // 1.2 - NS Enable/disable
    //----------------------------------

    //Test case 1.2: test setEnabled() and getEnabled()"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioPreProcessingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioPreProcessingTest"	"test1_2NsSetEnabledGetEnabled"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioPreProcessingTest.java]:[microphone]:[1]:method_text:[ion    //----------------------------------    //Test case 2.1: test AEC creation and release   ]) :|: public void test1_2NsSetEnabledGetEnabled() throws Exception {
        if (!hasMicrophone()) {
            return;
        }

        if (!NoiseSuppressor.isAvailable()) {
            return;
        }

        AudioRecord ar = getAudioRecord();
        assertNotNull(""could not create AudioRecord"", ar);

        NoiseSuppressor ns = NoiseSuppressor.create(ar.getAudioSessionId());
        assertNotNull(""could not create NoiseSupressor"", ns);
        try {
            ns.setEnabled(true);
            assertTrue(""invalid state from getEnabled"", ns.getEnabled());
            ns.setEnabled(false);
            assertFalse(""invalid state to getEnabled"", ns.getEnabled());
            // test passed
        } catch (IllegalStateException e) {
            fail(""setEnabled() in wrong state"");
        } finally {
            ns.release();
            ar.release();
        }
    }

    //-----------------------------------------------------------------
    // 2 - Acoustic Echo Canceller
    //----------------------------------

    //-----------------------------------------------------------------
    // 2.1 - creation
    //----------------------------------

    //Test case 2.1: test AEC creation and release"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioPreProcessingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioPreProcessingTest"	"test2_1AecCreateAndRelease"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioPreProcessingTest.java]:[microphone]:[1]:method_text:[/----------------------------------    //Test case 2.2: test AEC setEnabled() and getEnabled()   ]) :|: public void test2_1AecCreateAndRelease() throws Exception {
        if (!hasMicrophone()) {
            return;
        }

        AudioRecord ar = getAudioRecord();
        assertNotNull(""could not create AudioRecord"", ar);

        boolean isAvailable = AcousticEchoCanceler.isAvailable();

        AcousticEchoCanceler aec = AcousticEchoCanceler.create(ar.getAudioSessionId());
        assertTrue(""AEC not available but created or available and not created"",
                isAvailable == (aec != null));
        if (aec != null) {
            aec.release();
        }
        ar.release();
    }

    //-----------------------------------------------------------------
    // 2.2 - AEC Enable/disable
    //----------------------------------

    //Test case 2.2: test AEC setEnabled() and getEnabled()"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioPreProcessingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioPreProcessingTest"	"test2_2AecSetEnabledGetEnabled"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioPreProcessingTest.java]:[microphone]:[1]:method_text:[ion    //----------------------------------    //Test case 3.1: test AGC creation and release   ]) :|: public void test2_2AecSetEnabledGetEnabled() throws Exception {
        if (!hasMicrophone()) {
            return;
        }

        if (!AcousticEchoCanceler.isAvailable()) {
            return;
        }

        AudioRecord ar = getAudioRecord();
        assertNotNull(""could not create AudioRecord"", ar);

        AcousticEchoCanceler aec = AcousticEchoCanceler.create(ar.getAudioSessionId());
        assertNotNull(""could not create AcousticEchoCanceler"", aec);
        try {
            aec.setEnabled(true);
            assertTrue(""invalid state from getEnabled"", aec.getEnabled());
            aec.setEnabled(false);
            assertFalse(""invalid state to getEnabled"", aec.getEnabled());
            // test passed
        } catch (IllegalStateException e) {
            fail(""setEnabled() in wrong state"");
        } finally {
            aec.release();
            ar.release();
        }
    }

    //-----------------------------------------------------------------
    // 3 - Automatic Gain Control
    //----------------------------------

    //-----------------------------------------------------------------
    // 3.1 - creation
    //----------------------------------

    //Test case 3.1: test AGC creation and release"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioPreProcessingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioPreProcessingTest"	"test3_1AgcCreateAndRelease"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioPreProcessingTest.java]:[microphone]:[1]:method_text:[/----------------------------------    //Test case 3.2: test AGC setEnabled() and getEnabled()   ]) :|: public void test3_1AgcCreateAndRelease() throws Exception {
        if (!hasMicrophone()) {
            return;
        }

        AudioRecord ar = getAudioRecord();
        assertNotNull(""could not create AudioRecord"", ar);

        boolean isAvailable = AutomaticGainControl.isAvailable();

        AutomaticGainControl agc = AutomaticGainControl.create(ar.getAudioSessionId());
        assertTrue(""AGC not available but created or available and not created"",
                isAvailable == (agc != null));
        if (agc != null) {
            agc.release();
        }
        ar.release();
    }

    //-----------------------------------------------------------------
    // 3.2 - AEC Enable/disable
    //----------------------------------

    //Test case 3.2: test AGC setEnabled() and getEnabled()"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioPreProcessingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioPreProcessingTest"	"test3_2AgcSetEnabledGetEnabled"	""	"2: Microphone microphone"	"([3:/android/media/audio/cts/AudioPreProcessingTest.java]:[microphone]:[3]:method_text:[eption e) {            fail(""AudioRecord invalid parameter"");        }        return ar;    }}]) :|: public void test3_2AgcSetEnabledGetEnabled() throws Exception {
        if (!hasMicrophone()) {
            return;
        }

        if (!AutomaticGainControl.isAvailable()) {
            return;
        }

        AudioRecord ar = getAudioRecord();
        assertNotNull(""could not create AudioRecord"", ar);

        AutomaticGainControl agc = AutomaticGainControl.create(ar.getAudioSessionId());
        assertNotNull(""could not create AutomaticGainControl"", agc);
        try {
            agc.setEnabled(true);
            assertTrue(""invalid state from getEnabled"", agc.getEnabled());
            agc.setEnabled(false);
            assertFalse(""invalid state to getEnabled"", agc.getEnabled());
            // test passed
        } catch (IllegalStateException e) {
            fail(""setEnabled() in wrong state"");
        } finally {
            agc.release();
            ar.release();
        }
    }

    //-----------------------------------------------------------------
    // private methods
    //----------------------------------
    private boolean hasMicrophone() {
        return getContext().getPackageManager().hasSystemFeature(
                PackageManager.FEATURE_MICROPHONE);
    }

    private AudioRecord getAudioRecord() {
        AudioRecord ar = null;
        try {
            ar = new AudioRecord(MediaRecorder.AudioSource.DEFAULT,
                    SAMPLING_RATE,
                    AudioFormat.CHANNEL_CONFIGURATION_MONO,
                    AudioFormat.ENCODING_PCM_16BIT,
                    AudioRecord.getMinBufferSize(SAMPLING_RATE,
                            AudioFormat.CHANNEL_CONFIGURATION_MONO,
                            AudioFormat.ENCODING_PCM_16BIT) * 10);
            assertNotNull(""Could not create AudioRecord"", ar);
            assertEquals(""AudioRecord not initialized"",
                    AudioRecord.STATE_INITIALIZED, ar.getState());
        } catch (IllegalArgumentException e) {
            fail(""AudioRecord invalid parameter"");"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioPreProcessingTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.VolumeShaperTest"	"testPlayerTwoShapers"	""	"1: silent"	"([2:/android/media/audio/cts/VolumeShaperTest.java]:[silent]:[2]:method_text:[ that shaper advances in the presence of pause and stop (time based after start).    @LargeTest   ]) :|: public void testPlayerTwoShapers() throws Exception {
        final String TEST_NAME = ""testPlayerTwoShapers"";
        if (!hasAudioOutput()) {
            Log.w(TAG, ""AUDIO_OUTPUT feature not found. This system might not have a valid ""
                    + ""audio output HAL"");
            return;
        }

        final long durationMs = 10000;

        // Ramp configurations go from 0.f up to 1.f, Duck from 1.f to 0.f
        // With the two ramps combined, the audio should rise and then fall.
        final VolumeShaper.Configuration LONG_RAMP =
                new VolumeShaper.Configuration.Builder(VolumeShaper.Configuration.LINEAR_RAMP)
                    .setDuration(durationMs)
                    .build();
        final VolumeShaper.Configuration LONG_DUCK =
                new VolumeShaper.Configuration.Builder(LONG_RAMP)
                    .reflectTimes()
                    .build();

        for (int p = 0; p < PLAYER_TYPES; ++p) {
            try (   Player player = createPlayer(p);
                    VolumeShaper volumeShaperRamp = player.createVolumeShaper(LONG_RAMP);
                    VolumeShaper volumeShaperDuck = player.createVolumeShaper(LONG_DUCK);
                    ) {
                final String testName = TEST_NAME + "" "" + player.name();

                final float firstVolumeRamp = volumeShaperRamp.getVolume();
                final float firstVolumeDuck = volumeShaperDuck.getVolume();
                assertEquals(testName
                        + "" first ramp value should be 0.f, but is "" + firstVolumeRamp,
                        0.f, firstVolumeRamp, VOLUME_TOLERANCE);
                assertEquals(testName
                        + "" first duck value should be 1.f, but is "" + firstVolumeDuck,
                        1.f, firstVolumeDuck, VOLUME_TOLERANCE);
                player.start();

                Thread.sleep(1000);

                final float lastVolumeRamp = volumeShaperRamp.getVolume();
                final float l"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/VolumeShaperTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.VolumeShaperTest"	"testPlayerRunDuringPauseStop"	""	"1: silent"	"([5:/android/media/audio/cts/VolumeShaperTest.java]:[silent]:[5]:method_text:[d be greater than 0.f"",                volumeShaper.getVolume() > 0.f);    } // runStartSyncTest}]) :|: public void testPlayerRunDuringPauseStop() throws Exception {
        final String TEST_NAME = ""testPlayerRunDuringPauseStop"";
        if (!hasAudioOutput()) {
            Log.w(TAG, ""AUDIO_OUTPUT feature not found. This system might not have a valid ""
                    + ""audio output HAL"");
            return;
        }

        final VolumeShaper.Configuration config = LINEAR_RAMP;

        for (int p = 0; p < PLAYER_TYPES; ++p) {
            for (int pause = 0; pause < 2; ++pause) {

                if ((p == PLAYER_TYPE_MEDIA_PLAYER_NON_OFFLOADED
                        || p == PLAYER_TYPE_MEDIA_PLAYER_OFFLOADED) && pause == 0) {
                    // Do not test stop and MediaPlayer because a
                    // MediaPlayer stop requires prepare before starting.
                    continue;
                }

                try (   Player player = createPlayer(p);
                        VolumeShaper volumeShaper = player.createVolumeShaper(config);
                        ) {
                    final String testName = TEST_NAME + "" "" + player.name();

                    Log.d(TAG, testName + "" starting volume, should ramp up"");
                    volumeShaper.apply(VolumeShaper.Operation.PLAY);
                    assertEquals(testName + "" volume should be 0.f"",
                            0.f, volumeShaper.getVolume(), VOLUME_TOLERANCE);

                    player.start();
                    Thread.sleep(WARMUP_TIME_MS * 2);

                    Log.d(TAG, testName + "" applying "" + (pause != 0 ? ""pause"" : ""stop""));
                    if (pause == 1) {
                        player.pause();
                    } else {
                        player.stop();
                    }
                    Thread.sleep(RAMP_TIME_MS);

                    Log.d(TAG, testName + "" starting again"");
                    player.start();
                    Thread.sleep(WARMUP_TIME_MS * 2);

                    Log.d(TAG, testName + "" should be full volume"");"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/VolumeShaperTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.EnvReverbTest"	"test3_2ParameterChangedListener"	""	"1: granted"	"([2:/android/media/audio/cts/EnvReverbTest.java]:[granted]:[2]:method_text:[ (mReverb2 != null) {            mReverb2.release();            mReverb2 = null;        }    }}]) :|: public void test3_2ParameterChangedListener() throws Exception {
        if (!isEnvReverbAvailable()) {
            return;
        }
        synchronized(mLock) {
            mInitialized = false;
            createListenerLooper(false, false, true);
            waitForLooperInitialization_l();

            getReverb(0);
            mChangedParameter = -1;
            mReverb.setRoomLevel((short)0);

            int looperWaitCount = MAX_LOOPER_WAIT_COUNT;
            while ((mChangedParameter == -1) && (looperWaitCount-- > 0)) {
                try {
                    mLock.wait();
                } catch(Exception e) {
                }
            }
            terminateListenerLooper();
            releaseReverb();
        }
        assertEquals(""parameter change not received"",
                EnvironmentalReverb.PARAM_ROOM_LEVEL, mChangedParameter);
    }

    //-----------------------------------------------------------------
    // private methods
    //----------------------------------

    private void getReverb(int session) {
         if (mReverb == null || session != mSession) {
             if (session != mSession && mReverb != null) {
                 mReverb.release();
                 mReverb = null;
             }
             try {
                mReverb = new EnvironmentalReverb(0, session);
                mSession = session;
            } catch (IllegalArgumentException e) {
                Log.e(TAG, ""getReverb() EnvironmentalReverb not found exception: ""+e);
            } catch (UnsupportedOperationException e) {
                Log.e(TAG, ""getReverb() Effect library not loaded exception: ""+e);
            }
         }
         assertNotNull(""could not create mReverb"", mReverb);
    }

    private void releaseReverb() {
        if (mReverb != null) {
            mReverb.release();
            mReverb = null;
        }
    }

    private void waitForLooperInitialization_l() {
        int looperWaitCount = MAX_LOOPER_WAIT_COUNT;
        whil"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/EnvReverbTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.LoudnessEnhancerTest"	"test3_0MeasureGainChange"	""	"1: silent"	"([1:/android/media/audio/cts/LoudnessEnhancerTest.java]:[silent]:[1]:method_text:[r() {        if (mLE != null) {            mLE.release();            mLE = null;        }    }]) :|: public void test3_0MeasureGainChange() throws Exception {
        if (!hasAudioOutput()) {
            return;
        }
        AudioEffect vc = null;
        Visualizer visualizer = null;
        MediaPlayer mp = null;
        try {
            // this test will play a 1kHz sine wave with peaks at -40dB, and apply 6 db gain
            // using loudness enhancement
            mp = MediaPlayer.create(getContext(), R.raw.sine1khzm40db);
            final int LOUDNESS_GAIN = 600;
            final int MAX_MEASUREMENT_ERROR_MB = 200;
            assertNotNull(""null MediaPlayer"", mp);

            // creating a volume controller on output mix ensures that ro.audio.silent mutes
            // audio after the effects and not before
            vc = new AudioEffect(
                    AudioEffect.EFFECT_TYPE_NULL,
                    UUID.fromString(BUNDLE_VOLUME_EFFECT_UUID),
                    0,
                    mp.getAudioSessionId());
            vc.setEnabled(true);

            AudioManager am = (AudioManager) getContext().getSystemService(Context.AUDIO_SERVICE);
            assertNotNull(""null AudioManager"", am);
            int originalVolume = am.getStreamVolume(AudioManager.STREAM_MUSIC);
            am.setStreamVolume(AudioManager.STREAM_MUSIC,
                    am.getStreamMaxVolume(AudioManager.STREAM_MUSIC), 0);
            int sessionId = mp.getAudioSessionId();

            getLoudnessEnhancer(sessionId);
            visualizer = new Visualizer(sessionId);

            mp.setLooping(true);
            mp.start();

            visualizer.setEnabled(true);
            assertTrue(""visualizer not enabled"", visualizer.getEnabled());
            Thread.sleep(100);
            int status = visualizer.setMeasurementMode(Visualizer.MEASUREMENT_MODE_PEAK_RMS);
            Thread.sleep(500);
            assertEquals(""setMeasurementMode() for PEAK_RMS doesn't report success"",
                    Visualizer.SUCCESS, status);
            // make sure we're play"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/LoudnessEnhancerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioPlaybackCaptureTest"	"testPlaybackCaptureDoS"	""	"2: silent silently"	"([1:/android/media/audio/cts/AudioPlaybackCaptureTest.java]:[silently]:[1]:method_text:[rds) {                    audioRecord.release();                }            }        }    }}]) :|: 
    public void testPlaybackCaptureDoS() throws Exception {
        final int UPPER_BOUND_TO_CONCURENT_PLAYBACK_CAPTURE = 1000;
        final int MIN_NB_OF_CONCURENT_PLAYBACK_CAPTURE = 5;

        mAPCTestConfig.matchingUsages = new int[]{ AudioAttributes.USAGE_MEDIA };

        Stack<AudioRecord> audioRecords = new Stack<>();
        MediaPlayer mediaPlayer = createMediaPlayer(ALLOW_CAPTURE_BY_ALL,
                                                    R.raw.testwav_16bit_44100hz,
                                                    AudioAttributes.USAGE_MEDIA);
        try {
            mediaPlayer.start();

            // Lets create as many audio playback capture as we can
            try {
                for (int i = 0; i < UPPER_BOUND_TO_CONCURENT_PLAYBACK_CAPTURE; i++) {
                    audioRecords.push(createDefaultPlaybackCaptureRecord());
                }
                fail(""Playback capture never failed even with "" + audioRecords.size()
                        + "" concurrent ones. Are errors silently dropped ?"");
            } catch (Exception e) {
                assertThat(""Number of supported concurrent playback capture"", audioRecords.size(),
                           greaterThan(MIN_NB_OF_CONCURENT_PLAYBACK_CAPTURE));
            }

            // Should not be able to create a new audio playback capture record"",
            assertThrows(Exception.class, this::createDefaultPlaybackCaptureRecord);

            // Check that all record can all be started
            for (AudioRecord audioRecord : audioRecords) {
                audioRecord.startRecording();
            }

            // Check that they all record audio
            for (AudioRecord audioRecord : audioRecords) {
                ByteBuffer rawBuffer = readToBuffer(audioRecord, BUFFER_SIZE);
                assertFalse(""Expected data, but only silence was recorded"",
                            onlySilence(rawBuffer.asShortBuffer()));
            }

            // Stopping one AR must"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioPlaybackCaptureTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioTrackTest"	"testImmersiveChannelIndex"	""	"1: silent"	"([1:/android/media/audio/cts/AudioTrackTest.java]:[silent]:[1]:method_text:[tContext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }}]) :|: 
    public void testImmersiveChannelIndex() throws Exception {
        if (!hasAudioOutput()) {
            return;
        }

        final String TEST_NAME = ""testImmersiveChannelIndex"";
        final int TEST_FORMAT_ARRAY[] = {
                AudioFormat.ENCODING_PCM_FLOAT,
        };
        final int TEST_SR_ARRAY[] = {
                48000,  // do not set too high - costly in memory.
        };
        final int MAX_CHANNEL_BIT = 1 << (AudioSystem.FCC_24 - 1); // highest allowed channel.
        final int TEST_CONF_ARRAY[] = {
                (1 << AudioSystem.OUT_CHANNEL_COUNT_MAX) - 1,
                MAX_CHANNEL_BIT,      // likely silent - no physical device on top channel.
                MAX_CHANNEL_BIT | 1,  // first channel will likely have physical device.
        };
        final int TEST_WRITE_MODE_ARRAY[] = {
                AudioTrack.WRITE_BLOCKING,
                AudioTrack.WRITE_NON_BLOCKING,
        };
        final double TEST_SWEEP = 0;
        final int TEST_TRANSFER_MODE = AudioTrack.MODE_STREAM;
        final int TEST_STREAM_TYPE = AudioManager.STREAM_MUSIC;

        double frequency = 200; // frequency changes for each test
        for (int TEST_FORMAT : TEST_FORMAT_ARRAY) {
            for (int TEST_CONF : TEST_CONF_ARRAY) {
                for (int TEST_SR : TEST_SR_ARRAY) {
                    for (int TEST_WRITE_MODE : TEST_WRITE_MODE_ARRAY) {
                        for (int useDirect = 0; useDirect < 2; ++useDirect) {
                            playOnceStreamByteBuffer(
                                    TEST_NAME, frequency, TEST_SWEEP,
                                    TEST_STREAM_TYPE, TEST_SR, TEST_CONF, TEST_FORMAT,
                                    TEST_TRANSFER_MODE, TEST_WRITE_MODE,
                                    true /* useChannelIndex */, useDirect != 0);
                            frequency += 30; // increment test tone frequency
                        }
                    }
                }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioTrackTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testRecordNoDataForIdleUids"	""	"3: silent Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[1]:method_text:[lease();            }            resetMyUidState(packageName, currentUserId);        }    }   ]) :|: 
    public void testRecordNoDataForIdleUids() throws Exception {
        if (!hasMicrophone()) {
            return;
        }

        AudioRecord recorder = null;
        String packageName = InstrumentationRegistry.getTargetContext().getPackageName();
        int currentUserId = Process.myUserHandle().getIdentifier();

        // We will record audio for 20 sec from active and idle state expecting
        // the recording from active state to have data while from idle silence.
        try {
            // Ensure no race and UID active
            makeMyUidStateActive(packageName, currentUserId);

            // Setup a recorder
            final AudioRecord candidateRecorder = new AudioRecord.Builder()
                    .setAudioSource(MediaRecorder.AudioSource.MIC)
                    .setBufferSizeInBytes(1024)
                    .setAudioFormat(new AudioFormat.Builder()
                            .setSampleRate(8000)
                            .setChannelMask(AudioFormat.CHANNEL_IN_MONO)
                            .setEncoding(AudioFormat.ENCODING_PCM_16BIT)
                            .build())
                    .build();

            // Unleash it :P
            candidateRecorder.startRecording();
            recorder = candidateRecorder;

            final int sampleCount = AudioHelper.frameCountFromMsec(6000,
                    candidateRecorder.getFormat()) * candidateRecorder.getFormat()
                    .getChannelCount();
            final ShortBuffer buffer = ShortBuffer.allocate(sampleCount);

            // Read five seconds of data
            readDataTimed(recorder, 5000, buffer);
            // Ensure we read non-empty bytes. Some systems only
            // emulate audio devices and do not provide any actual audio data.
            if (isAudioSilent(buffer)) {
                Log.w(TAG, ""Recording does not produce audio data"");
                return;
            }

            // Start clean
            buffer.clear();"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testGetActiveRecordingConfiguration"	""	"4: silent Microphone microphone silently"	"([1:/android/media/audio/cts/AudioRecordTest.java]:[silently]:[1]:method_text:[nstrumentation().getTargetContext();    }    /*     * Microphone Direction API tests     */   ]) :|: 
    public void testGetActiveRecordingConfiguration() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        mAudioRecord.startRecording();
        assertEquals(AudioRecord.RECORDSTATE_RECORDING, mAudioRecord.getRecordingState());

        try {
            Thread.sleep(RECORD_DURATION_MS);
        } catch (InterruptedException e) {
        }

        AudioRecordingConfiguration config = mAudioRecord.getActiveRecordingConfiguration();
        checkRecordingConfig(config);

        mAudioRecord.release();
        // test no exception is thrown when querying immediately after release()
        // which is not a synchronous operation
        config = mAudioRecord.getActiveRecordingConfiguration();
        try {
            Thread.sleep(TEST_TIMING_TOLERANCE_MS);
        } catch (InterruptedException e) {
        }
        assertNull(""Recording configuration not null after release"",
                mAudioRecord.getActiveRecordingConfiguration());
    }

    private static void checkRecordingConfig(AudioRecordingConfiguration config) {
        assertNotNull(config);
        AudioFormat format = config.getClientFormat();
        assertEquals(AudioFormat.CHANNEL_IN_MONO, format.getChannelMask());
        assertEquals(AudioFormat.ENCODING_PCM_16BIT, format.getEncoding());
        assertEquals(SAMPLING_RATE_HZ, format.getSampleRate());
        assertEquals(MediaRecorder.AudioSource.MIC, config.getAudioSource());
        assertNotNull(config.getAudioDevice());
        assertNotNull(config.getClientEffects());
        assertNotNull(config.getEffects());
        // no requirement here, just testing the API
        config.isClientSilenced();
    }

    private AudioRecord createAudioRecord(
            int audioSource, int sampleRateInHz,
            int channelConfig, int audioFormat, int bufferSizeInBytes,
            boolean auditRecording, boolean isChannelIndex) {
        final AudioRecord record;
        if (auditRecording) {"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testAudioRecordProperties"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[1]:method_text:[NFIGURATION_DEFAULT, AudioFormat.ENCODING_PCM_16BIT);        assertTrue(bufferSize > 0);    }   ]) :|: 
    public void testAudioRecordProperties() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        assertEquals(AudioFormat.ENCODING_PCM_16BIT, mAudioRecord.getAudioFormat());
        assertEquals(MediaRecorder.AudioSource.DEFAULT, mAudioRecord.getAudioSource());
        assertEquals(1, mAudioRecord.getChannelCount());
        assertEquals(AudioFormat.CHANNEL_IN_MONO,
                mAudioRecord.getChannelConfiguration());
        assertEquals(AudioRecord.STATE_INITIALIZED, mAudioRecord.getState());
        assertEquals(SAMPLING_RATE_HZ, mAudioRecord.getSampleRate());
        assertEquals(AudioRecord.RECORDSTATE_STOPPED, mAudioRecord.getRecordingState());

        int bufferSize = AudioRecord.getMinBufferSize(SAMPLING_RATE_HZ,
                AudioFormat.CHANNEL_CONFIGURATION_DEFAULT, AudioFormat.ENCODING_PCM_16BIT);
        assertTrue(bufferSize > 0);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testAudioRecordOP"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[1]:method_text:[elease();        assertEquals(AudioRecord.STATE_UNINITIALIZED, mAudioRecord.getState());    }   ]) :|: 
    public void testAudioRecordOP() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        final int SLEEP_TIME = 10;
        final int RECORD_TIME = 10000;
        assertEquals(AudioRecord.STATE_INITIALIZED, mAudioRecord.getState());

        int markerInFrames = mAudioRecord.getSampleRate() / 2;
        assertEquals(AudioRecord.SUCCESS,
                mAudioRecord.setNotificationMarkerPosition(markerInFrames));
        assertEquals(markerInFrames, mAudioRecord.getNotificationMarkerPosition());
        int periodInFrames = mAudioRecord.getSampleRate();
        assertEquals(AudioRecord.SUCCESS,
                mAudioRecord.setPositionNotificationPeriod(periodInFrames));
        assertEquals(periodInFrames, mAudioRecord.getPositionNotificationPeriod());
        OnRecordPositionUpdateListener listener = new OnRecordPositionUpdateListener() {

            public void onMarkerReached(AudioRecord recorder) {
                mIsOnMarkerReachedCalled = true;
            }

            public void onPeriodicNotification(AudioRecord recorder) {
                mIsOnPeriodicNotificationCalled = true;
            }
        };
        mAudioRecord.setRecordPositionUpdateListener(listener);

        // use byte array as buffer
        final int BUFFER_SIZE = 102400;
        byte[] byteData = new byte[BUFFER_SIZE];
        long time = System.currentTimeMillis();
        mAudioRecord.startRecording();
        assertEquals(AudioRecord.RECORDSTATE_RECORDING, mAudioRecord.getRecordingState());
        while (System.currentTimeMillis() - time < RECORD_TIME) {
            Thread.sleep(SLEEP_TIME);
            mAudioRecord.read(byteData, 0, BUFFER_SIZE);
        }
        mAudioRecord.stop();
        assertEquals(AudioRecord.RECORDSTATE_STOPPED, mAudioRecord.getRecordingState());
        assertTrue(mIsOnMarkerReachedCalled);
        assertTrue(mIsOnPeriodicNotificationCalled);
        reset();

        // use short array as buffer
        short[] shor"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testAudioRecordBuilderDefault"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[1]:method_text:[ioRecord built with    // an incomplete AudioFormat matches the documentation / expected values   ]) :|: 
    public void testAudioRecordBuilderDefault() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        // constants for test
        final String TEST_NAME = ""testAudioRecordBuilderDefault"";
        // expected values below match the AudioRecord.Builder documentation
        final int expectedCapturePreset = MediaRecorder.AudioSource.DEFAULT;
        final int expectedChannel = AudioFormat.CHANNEL_IN_MONO;
        final int expectedEncoding = AudioFormat.ENCODING_PCM_16BIT;
        final int expectedState = AudioRecord.STATE_INITIALIZED;
        // use builder with default values
        final AudioRecord rec = new AudioRecord.Builder().build();
        // save results
        final int observedSource = rec.getAudioSource();
        final int observedChannel = rec.getChannelConfiguration();
        final int observedEncoding = rec.getAudioFormat();
        final int observedState = rec.getState();
        // release recorder before the test exits (either successfully or with an exception)
        rec.release();
        // compare results
        assertEquals(TEST_NAME + "": default capture preset"", expectedCapturePreset, observedSource);
        assertEquals(TEST_NAME + "": default channel config"", expectedChannel, observedChannel);
        assertEquals(TEST_NAME + "": default encoding"", expectedEncoding, observedEncoding);
        assertEquals(TEST_NAME + "": state"", expectedState, observedState);
    }

    // Test AudioRecord.Builder to verify the observed configuration of an AudioRecord built with
    // an incomplete AudioFormat matches the documentation / expected values"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testAudioRecordBuilderPartialFormat"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[1]:method_text:[y the observed configuration of an AudioRecord matches    // the parameters used in the builder   ]) :|: 
    public void testAudioRecordBuilderPartialFormat() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        // constants for test
        final String TEST_NAME = ""testAudioRecordBuilderPartialFormat"";
        final int expectedRate = 16000;
        final int expectedState = AudioRecord.STATE_INITIALIZED;
        // expected values below match the AudioRecord.Builder documentation
        final int expectedChannel = AudioFormat.CHANNEL_IN_MONO;
        final int expectedEncoding = AudioFormat.ENCODING_PCM_16BIT;
        // use builder with a partial audio format
        final AudioRecord rec = new AudioRecord.Builder()
                .setAudioFormat(new AudioFormat.Builder().setSampleRate(expectedRate).build())
                .build();
        // save results
        final int observedRate = rec.getSampleRate();
        final int observedChannel = rec.getChannelConfiguration();
        final int observedEncoding = rec.getAudioFormat();
        final int observedState = rec.getState();
        // release recorder before the test exits (either successfully or with an exception)
        rec.release();
        // compare results
        assertEquals(TEST_NAME + "": configured rate"", expectedRate, observedRate);
        assertEquals(TEST_NAME + "": default channel config"", expectedChannel, observedChannel);
        assertEquals(TEST_NAME + "": default encoding"", expectedEncoding, observedEncoding);
        assertEquals(TEST_NAME + "": state"", expectedState, observedState);
    }

    // Test AudioRecord.Builder to verify the observed configuration of an AudioRecord matches
    // the parameters used in the builder"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testAudioRecordBuilderParams"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[1]:method_text:[tedState, observedState);    }    // Test AudioRecord to ensure we can build after a failure.   ]) :|: 
    public void testAudioRecordBuilderParams() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        // constants for test
        final String TEST_NAME = ""testAudioRecordBuilderParams"";
        final int expectedRate = 8000;
        final int expectedChannel = AudioFormat.CHANNEL_IN_MONO;
        final int expectedChannelCount = 1;
        final int expectedEncoding = AudioFormat.ENCODING_PCM_16BIT;
        final int expectedSource = MediaRecorder.AudioSource.VOICE_COMMUNICATION;
        final int expectedState = AudioRecord.STATE_INITIALIZED;
        // use builder with expected parameters
        final AudioRecord rec = new AudioRecord.Builder()
                .setAudioFormat(new AudioFormat.Builder()
                        .setSampleRate(expectedRate)
                        .setChannelMask(expectedChannel)
                        .setEncoding(expectedEncoding)
                        .build())
                .setAudioSource(expectedSource)
                .build();
        // save results
        final int observedRate = rec.getSampleRate();
        final int observedChannel = rec.getChannelConfiguration();
        final int observedChannelCount = rec.getChannelCount();
        final int observedEncoding = rec.getAudioFormat();
        final int observedSource = rec.getAudioSource();
        final int observedState = rec.getState();
        // release recorder before the test exits (either successfully or with an exception)
        rec.release();
        // compare results
        assertEquals(TEST_NAME + "": configured rate"", expectedRate, observedRate);
        assertEquals(TEST_NAME + "": configured channel config"", expectedChannel, observedChannel);
        assertEquals(TEST_NAME + "": configured encoding"", expectedEncoding, observedEncoding);
        assertEquals(TEST_NAME + "": implicit channel count"", expectedChannelCount,
                observedChannelCount);
        assertEquals(TEST_NAME + "": configured source"", ex"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testAudioRecordBufferSize"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[1]:method_text:[h is > 0        assertTrue(TEST_NAME + "": buffer frame count"", observedBufferSize2 > 0);    }   ]) :|: 
    public void testAudioRecordBufferSize() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        // constants for test
        final String TEST_NAME = ""testAudioRecordBufferSize"";

        // use builder with parameters that should fail
        final int superBigBufferSize = 1 << 28;
        try {
            final AudioRecord record = new AudioRecord.Builder()
                .setBufferSizeInBytes(superBigBufferSize)
                .build();
            record.release();
            fail(TEST_NAME + "": should throw exception on failure"");
        } catch (UnsupportedOperationException e) {
            ;
        }

        // we should be able to create again with minimum buffer size
        final int verySmallBufferSize = 2 * 3 * 4; // frame size multiples
        final AudioRecord record2 = new AudioRecord.Builder()
                .setBufferSizeInBytes(verySmallBufferSize)
                .build();

        final int observedState2 = record2.getState();
        final int observedBufferSize2 = record2.getBufferSizeInFrames();
        record2.release();

        // succeeds for minimum buffer size
        assertEquals(TEST_NAME + "": state"", AudioRecord.STATE_INITIALIZED, observedState2);
        // should force the minimum size buffer which is > 0
        assertTrue(TEST_NAME + "": buffer frame count"", observedBufferSize2 > 0);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testTimestamp"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[1]:method_text:[                record.release();                record = null;            }        }    }   ]) :|: 
    public void testTimestamp() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        final String TEST_NAME = ""testTimestamp"";
        AudioRecord record = null;

        try {
            final int NANOS_PER_MILLISECOND = 1000000;
            final long RECORD_TIME_MS = 2000;
            final long RECORD_TIME_NS = RECORD_TIME_MS * NANOS_PER_MILLISECOND;
            final int RECORD_ENCODING = AudioFormat.ENCODING_PCM_16BIT; // fixed at this time.
            final int RECORD_CHANNEL_MASK = AudioFormat.CHANNEL_IN_STEREO;
            final int RECORD_SAMPLE_RATE = 23456;  // requires resampling
            record = new AudioRecord.Builder()
                    .setAudioFormat(new AudioFormat.Builder()
                            .setSampleRate(RECORD_SAMPLE_RATE)
                            .setChannelMask(RECORD_CHANNEL_MASK)
                            .setEncoding(RECORD_ENCODING)
                            .build())
                    .build();

            // For our tests, we could set test duration by timed sleep or by # frames received.
            // Since we don't know *exactly* when AudioRecord actually begins recording,
            // we end the test by # frames read.
            final int numChannels =
                    AudioFormat.channelCountFromInChannelMask(RECORD_CHANNEL_MASK);
            final int bytesPerSample = AudioFormat.getBytesPerSample(RECORD_ENCODING);
            final int bytesPerFrame = numChannels * bytesPerSample;
            // careful about integer overflow in the formula below:
            final int targetFrames =
                    (int)((long)RECORD_TIME_MS * RECORD_SAMPLE_RATE / 1000);
            final int targetSamples = targetFrames * numChannels;
            final int BUFFER_FRAMES = 512;
            final int BUFFER_SAMPLES = BUFFER_FRAMES * numChannels;

            final int tries = 2;
            for (int i = 0; i < tries; ++i) {
                final long trackStartTimeNs = Sy"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testMediaMetrics"	""	"2: Microphone microphone"	"([21:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[21]:method_text:[tDirectionality());        Log.i(TAG, ""******"");    }    @CddTest(requirement=""5.4.1/C-1-4"")   ]) :|: 
    public void testMediaMetrics() throws Exception {
        if (!hasMicrophone()) {
            return;
        }

        AudioRecord record = null;
        try {
            final int RECORD_ENCODING = AudioFormat.ENCODING_PCM_16BIT;
            final int RECORD_CHANNEL_MASK = AudioFormat.CHANNEL_IN_MONO;
            final int RECORD_SAMPLE_RATE = 8000;
            final AudioFormat format = new AudioFormat.Builder()
                    .setSampleRate(RECORD_SAMPLE_RATE)
                    .setChannelMask(RECORD_CHANNEL_MASK)
                    .setEncoding(RECORD_ENCODING)
                    .build();

            // Setup a recorder
            record = new AudioRecord.Builder()
                .setAudioSource(MediaRecorder.AudioSource.MIC)
                .setAudioFormat(format)
                .build();

            final PersistableBundle metrics = record.getMetrics();

            assertNotNull(""null metrics"", metrics);
            AudioHelper.assertMetricsKeyEquals(metrics, AudioRecord.MetricsConstants.ENCODING,
                    new String(""AUDIO_FORMAT_PCM_16_BIT""));
            AudioHelper.assertMetricsKeyEquals(metrics, AudioRecord.MetricsConstants.SOURCE,
                    new String(""AUDIO_SOURCE_MIC""));
            AudioHelper.assertMetricsKeyEquals(metrics, AudioRecord.MetricsConstants.SAMPLERATE,
                    new Integer(RECORD_SAMPLE_RATE));
            AudioHelper.assertMetricsKeyEquals(metrics, AudioRecord.MetricsConstants.CHANNELS,
                    new Integer(AudioFormat.channelCountFromInChannelMask(RECORD_CHANNEL_MASK)));

            // deprecated, value ignored.
            AudioHelper.assertMetricsKey(metrics, AudioRecord.MetricsConstants.LATENCY);

            // TestApi:
            AudioHelper.assertMetricsKeyEquals(metrics, AudioRecord.MetricsConstants.CHANNEL_MASK,
                    new Long(RECORD_CHANNEL_MASK));
            AudioHelper.assertMetricsKeyEquals(metrics, AudioRecord.MetricsConstants.FRAME_COUNT,"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testGetActiveMicrophones"	""	"2: Microphone microphone"	"([11:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[11]:method_text:[ide        public void execute(Runnable command) {            command.run();        }    };   ]) :|: 
    public void testGetActiveMicrophones() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        mAudioRecord.startRecording();
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        }
        List<MicrophoneInfo> activeMicrophones = mAudioRecord.getActiveMicrophones();
        assertTrue(activeMicrophones.size() > 0);
        for (MicrophoneInfo activeMicrophone : activeMicrophones) {
            printMicrophoneInfo(activeMicrophone);
        }
    }

    private Executor mExec = new Executor() {
        @Override
        public void execute(Runnable command) {
            command.run();
        }
    };"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testAudioRecordInfoCallback"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[1]:method_text:[eep(RECORD_DURATION_MS);        mAudioRecord.unregisterAudioRecordingCallback(callback);    }   ]) :|: 
    public void testAudioRecordInfoCallback() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        AudioRecordingConfigurationTest.MyAudioRecordingCallback callback =
                new AudioRecordingConfigurationTest.MyAudioRecordingCallback(
                        mAudioRecord.getAudioSessionId(), MediaRecorder.AudioSource.DEFAULT);
        mAudioRecord.registerAudioRecordingCallback(mExec, callback);
        mAudioRecord.startRecording();
        assertEquals(AudioRecord.RECORDSTATE_RECORDING, mAudioRecord.getRecordingState());

        callback.await(TEST_TIMING_TOLERANCE_MS);
        assertTrue(callback.mCalled);
        assertTrue(callback.mConfigs.size() <= 1);
        if (callback.mConfigs.size() == 1) {
            checkRecordingConfig(callback.mConfigs.get(0));
        }

        Thread.sleep(RECORD_DURATION_MS);
        mAudioRecord.unregisterAudioRecordingCallback(callback);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testSetPreferredMicrophoneDirection"	""	"2: Microphone microphone"	"([5:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[5]:method_text:[neDirection() exception:"" + ex);            assertTrue(false);        }        return;    }   ]) :|: 
    public void testSetPreferredMicrophoneDirection() {
        if (!hasMicrophone()) {
            return;
        }

        try {
            boolean success =
                    mAudioRecord.setPreferredMicrophoneDirection(
                            MicrophoneDirection.MIC_DIRECTION_TOWARDS_USER);

            // Can't actually test this as HAL may not have implemented it
            // Just verify that it doesn't crash or throw an exception
            // assertTrue(success);
        } catch (Exception ex) {
            Log.e(TAG, ""testSetPreferredMicrophoneDirection() exception:"" + ex);
            assertTrue(false);
        }
        return;
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testSetPreferredMicrophoneFieldDimension"	""	"2: Microphone microphone"	"([4:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[4]:method_text:[ldDimension() exception:"" + ex);            assertTrue(false);        }        return;    }   ]) :|: 
    public void testSetPreferredMicrophoneFieldDimension() {
        if (!hasMicrophone()) {
            return;
        }

        try {
            boolean success = mAudioRecord.setPreferredMicrophoneFieldDimension(1.0f);

            // Can't actually test this as HAL may not have implemented it
            // Just verify that it doesn't crash or throw an exception
            // assertTrue(success);
        } catch (Exception ex) {
            Log.e(TAG, ""testSetPreferredMicrophoneFieldDimension() exception:"" + ex);
            assertTrue(false);
        }
        return;
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testPrivacySensitiveBuilder"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[1]:method_text:[rtEquals(privacyOn, record.isPrivacySensitive());            record.release();        }    }   ]) :|: 
    public void testPrivacySensitiveBuilder() throws Exception {
        if (!hasMicrophone()) {
            return;
        }

        for (final boolean privacyOn : new boolean[] { false, true} ) {
            AudioRecord record = new AudioRecord.Builder()
            .setAudioFormat(new AudioFormat.Builder()
                    .setEncoding(AudioFormat.ENCODING_PCM_16BIT)
                    .setSampleRate(8000)
                    .setChannelMask(AudioFormat.CHANNEL_IN_MONO)
                    .build())
            .setPrivacySensitive(privacyOn)
            .build();
            assertEquals(privacyOn, record.isPrivacySensitive());
            record.release();
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testPrivacySensitiveDefaults"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[1]:method_text:[     .build();        assertTrue(record.isPrivacySensitive());        record.release();    }   ]) :|: 
    public void testPrivacySensitiveDefaults() throws Exception {
        if (!hasMicrophone()) {
            return;
        }

        AudioRecord record = new AudioRecord.Builder()
            .setAudioSource(MediaRecorder.AudioSource.MIC)
            .setAudioFormat(new AudioFormat.Builder()
                 .setEncoding(AudioFormat.ENCODING_PCM_16BIT)
                 .setSampleRate(8000)
                 .setChannelMask(AudioFormat.CHANNEL_IN_MONO)
                 .build())
            .build();
        assertFalse(record.isPrivacySensitive());
        record.release();

        record = new AudioRecord.Builder()
            .setAudioSource(MediaRecorder.AudioSource.VOICE_COMMUNICATION)
            .setAudioFormat(new AudioFormat.Builder()
                 .setEncoding(AudioFormat.ENCODING_PCM_16BIT)
                 .setSampleRate(8000)
                 .setChannelMask(AudioFormat.CHANNEL_IN_MONO)
                 .build())
            .build();
        assertTrue(record.isPrivacySensitive());
        record.release();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordTest"	"testSetLogSessionId"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordTest.java]:[microphone]:[1]:method_text:[   if (audioRecord != null) {                audioRecord.release();            }        }    }}]) :|: 
    public void testSetLogSessionId() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        AudioRecord audioRecord = null;
        try {
            audioRecord = new AudioRecord.Builder()
                    .setAudioFormat(new AudioFormat.Builder()
                            .setEncoding(AudioFormat.ENCODING_PCM_16BIT)
                            .setChannelMask(AudioFormat.CHANNEL_IN_MONO)
                            .build())
                    .build();
            audioRecord.setLogSessionId(LogSessionId.LOG_SESSION_ID_NONE); // should not throw.
            assertEquals(LogSessionId.LOG_SESSION_ID_NONE, audioRecord.getLogSessionId());

            final MediaMetricsManager mediaMetricsManager =
                    getContext().getSystemService(MediaMetricsManager.class);
            final RecordingSession recordingSession =
                    mediaMetricsManager.createRecordingSession();
            audioRecord.setLogSessionId(recordingSession.getSessionId());
            assertEquals(recordingSession.getSessionId(), audioRecord.getLogSessionId());

            // record some data to generate a log entry.
            short data[] = new short[audioRecord.getSampleRate() / 2];
            audioRecord.startRecording();
            audioRecord.read(data, 0 /* offsetInShorts */, data.length);
            audioRecord.stop();

            // Also can check the mediametrics dumpsys to validate logs generated.
        } finally {
            if (audioRecord != null) {
                audioRecord.release();
            }
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecord_BufferSizeTest"	"testGetMinBufferSize"	""	"2: Microphone microphone"	"([3:/android/media/audio/cts/AudioRecord_BufferSizeTest.java]:[microphone]:[3]:method_text:[().getPackageManager().hasSystemFeature(                PackageManager.FEATURE_MICROPHONE);    }}]) :|: public void testGetMinBufferSize() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        List<Integer> failedSampleRates = new ArrayList<Integer>();
        for (int i = 0; i < SAMPLE_RATES_IN_HZ.length; i++) {
            try {
                record(SAMPLE_RATES_IN_HZ[i]);
            } catch (Throwable e) {
                Log.e(TAG, ""Sample rate: "" + SAMPLE_RATES_IN_HZ[i], e);
                failedSampleRates.add(SAMPLE_RATES_IN_HZ[i]);
                if (mAudioRecord != null) {
                    // clean up.  AudioRecords are in scarce supply.
                    mAudioRecord.release();
                    mAudioRecord = null;
                }
            }
        }
        assertTrue(""Failed sample rates: "" + failedSampleRates + "" See log for more details."",
                failedSampleRates.isEmpty());
    }

    private void record(int sampleRateInHz) {
        int bufferSize = AudioRecord.getMinBufferSize(sampleRateInHz, CHANNEL_CONFIG, AUDIO_FORMAT);
        assertTrue(bufferSize > 0);

        createAudioRecord(sampleRateInHz, bufferSize);
        // RecordingState changes are reflected synchronously (no need to poll)
        assertEquals(AudioRecord.RECORDSTATE_STOPPED, mAudioRecord.getRecordingState());

        mAudioRecord.startRecording();
        assertEquals(AudioRecord.RECORDSTATE_RECORDING, mAudioRecord.getRecordingState());

        // it is preferred to use a short array to read AudioFormat.ENCODING_PCM_16BIT data
        // but it's ok to read using using a byte array.  16 bit PCM data will be
        // stored as two bytes, native endian.
        byte[] buffer = new byte[bufferSize];
        assertTrue(mAudioRecord.read(buffer, 0, bufferSize) > 0);

        mAudioRecord.stop();
        assertEquals(AudioRecord.RECORDSTATE_STOPPED, mAudioRecord.getRecordingState());

        mAudioRecord.release();
        mAudioRecord = null;
    }

    private void createAudioRecord(final int sampleRateInHz, final int"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecord_BufferSizeTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.PresetReverbTest"	"test3_2ParameterChangedListener"	""	"1: granted"	"([2:/android/media/audio/cts/PresetReverbTest.java]:[granted]:[2]:method_text:[ (mReverb2 != null) {            mReverb2.release();            mReverb2 = null;        }    }}]) :|: public void test3_2ParameterChangedListener() throws Exception {
        if (!isPresetReverbAvailable()) {
            return;
        }
        synchronized(mLock) {
            mInitialized = false;
            createListenerLooper(false, false, true);
            waitForLooperInitialization_l();

            getReverb(0);
            mChangedParameter = -1;
            mReverb.setPreset(PresetReverb.PRESET_SMALLROOM);

            int looperWaitCount = MAX_LOOPER_WAIT_COUNT;
            while ((mChangedParameter == -1) && (looperWaitCount-- > 0)) {
                try {
                    mLock.wait();
                } catch(Exception e) {
                }
            }
            terminateListenerLooper();
            releaseReverb();
        }
        assertEquals(""parameter change not received"",
                PresetReverb.PARAM_PRESET, mChangedParameter);
    }

    //-----------------------------------------------------------------
    // private methods
    //----------------------------------

    private void getReverb(int session) {
         if (mReverb == null || session != mSession) {
             if (session != mSession && mReverb != null) {
                 mReverb.release();
                 mReverb = null;
             }
             try {
                mReverb = new PresetReverb(0, session);
                mSession = session;
            } catch (IllegalArgumentException e) {
                Log.e(TAG, ""getReverb() PresetReverb not found exception: ""+e);
            } catch (UnsupportedOperationException e) {
                Log.e(TAG, ""getReverb() Effect library not loaded exception: ""+e);
            }
         }
         assertNotNull(""could not create mReverb"", mReverb);
    }

    private void releaseReverb() {
        if (mReverb != null) {
            mReverb.release();
            mReverb = null;
        }
    }

    private void waitForLooperInitialization_l() {
        int looperWaitCount = MAX_LOOPER_WAIT_COUNT;
        while (!"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/PresetReverbTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.EqualizerTest"	"test3_2ParameterChangedListener"	""	"1: granted"	"([2:/android/media/audio/cts/EqualizerTest.java]:[granted]:[2]:method_text:[zer2 != null) {            mEqualizer2.release();            mEqualizer2 = null;        }    }}]) :|: public void test3_2ParameterChangedListener() throws Exception {
        synchronized(mLock) {
            mInitialized = false;
            createListenerLooper(false, false, true);
            waitForLooperInitialization_l();

            getEqualizer(mSession);
            mChangedParameter = -1;
            mEqualizer.setBandLevel((short)0, (short)0);

            int looperWaitCount = MAX_LOOPER_WAIT_COUNT;
            while ((mChangedParameter == -1) && (looperWaitCount-- > 0)) {
                try {
                    mLock.wait();
                } catch(Exception e) {
                }
            }
            terminateListenerLooper();
            releaseEqualizer();
        }
        assertEquals(""parameter change not received"",
                Equalizer.PARAM_BAND_LEVEL, mChangedParameter);
    }

    //-----------------------------------------------------------------
    // private methods
    //----------------------------------

    private void getEqualizer(int session) {
         if (mEqualizer == null || session != mSession) {
             if (session != mSession && mEqualizer != null) {
                 mEqualizer.release();
                 mEqualizer = null;
             }
             try {
                mEqualizer = new Equalizer(0, session);
                mSession = session;
            } catch (IllegalArgumentException e) {
                Log.e(TAG, ""getEqualizer() Equalizer not found exception: ""+e);
            } catch (UnsupportedOperationException e) {
                Log.e(TAG, ""getEqualizer() Effect library not loaded exception: ""+e);
            }
         }
         assertNotNull(""could not create mEqualizer"", mEqualizer);
    }

    private void releaseEqualizer() {
        if (mEqualizer != null) {
            mEqualizer.release();
            mEqualizer = null;
        }
    }

    private void waitForLooperInitialization_l() {
        int looperWaitCount = MAX_LOOPER_WAIT_COUNT;
        while (!mInitialized && (looperWait"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/EqualizerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.SoundPoolTest"	"exists"	""	"1: silent"	"([1:/android/media/audio/cts/SoundPoolTest.java]:[silent]:[1]:method_text:[       mSoundPool.release();            mSoundPool = null;            return;        }    }   ]) :|: /*
 *.
 */

package android.media.audio.cts;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.media.AudioAttributes;
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.Build;
import android.media.audio.cts.R;
import android.platform.test.annotations.AppModeFull;
import android.util.Log;
import androidx.test.InstrumentationRegistry;
import com.android.compatibility.common.util.ApiLevelUtil;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Arrays;
import junitparams.JUnitParamsRunner;
import junitparams.Parameters;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

@AppModeFull(reason = ""TODO: evaluate and port to instant"")
@RunWith(JUnitParamsRunner.class)
abstract class SoundPoolTest {
    private static final String TAG = ""SoundPoolTest(Base)"";

    private static final int SOUNDPOOL_STREAMS = 4;
    private static final int PRIORITY = 1;
    private static final float LOUD = 1.f;
    private static final float QUIET = LOUD / 4.f;
    private static final float SILENT = 0.f;
    private File mFile;
    private SoundPool mSoundPool;

    /**
     * function to return resource ID for A4 sound.
     * should be implemented by child class
     * @return resource ID
     */
    protected abstract int getSoundA();

    protected abstract int getSoundCs();

    protected abstract int getSoundE();

    protected abstract int getSoundB();

    protected abstract int getSoundGs();

    protected abstract String getFileName();

    private int[] getSounds() {
        int[] sounds = { getSoundA(),
                         getSoundCs(),
                         getSoundE(),
                         getSoundB(),
                         getSoundGs() };
        return sounds;"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/SoundPoolTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.SoundPoolTest"	"testAutoPauseResume"	""	"1: silent"	"([2:/android/media/audio/cts/SoundPoolTest.java]:[silent]:[2]:method_text:[oundPool.play(sampleId, SILENT, SILENT, 1, 0, 1);        }        mSoundPool.stop(stream);    }}]) :|: 
    public void testAutoPauseResume() throws Exception {
        // The number of possible SoundPool streams simultaneously active is limited by
        // track resources. Generally this is no greater than 32, but the actual
        // amount may be less depending on concurrently running applications.
        // Here we attempt to create more streams than what is normally possible;
        // SoundPool should gracefully degrade to play those streams it can.
        //
        // Try to keep the maxStreams less than the number required to be active
        // and certainly less than 20 to be cooperative to other applications.
        final int TEST_STREAMS = 40;
        SoundPool soundPool = null;
        try {
            soundPool = new SoundPool.Builder()
                    .setAudioAttributes(getAudioAttributes())
                    .setMaxStreams(TEST_STREAMS)
                    .build();

            // get our sounds
            final int[] sounds = getSounds();

            // set our completion listener
            final int[] loadIds = new int[TEST_STREAMS];
            final Object done = new Object();
            final int[] loaded = new int[1]; // used as a ""pointer"" to an integer
            final SoundPool fpool = soundPool; // final reference in scope of try block
            soundPool.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {
                    @Override
                    public void onLoadComplete(SoundPool pool, int sampleId, int status) {
                        assertEquals(fpool, pool);
                        assertEquals(0 /* success */, status);
                        synchronized(done) {
                            loadIds[loaded[0]++] = sampleId;
                            if (loaded[0] == loadIds.length) {
                                done.notify();
                            }
                        }
                    }
                });

            // initiate loading
            final int[]"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/SoundPoolTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordRoutingNative"	"testAquireDefaultProxy"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordRoutingNative.java]:[microphone]:[1]:method_text:[GetLastSLResult() == 0);    }    // Test an Aquire before the OpenSL ES recorder is Realized.   ]) :|: public void testAquireDefaultProxy() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        AudioRecorder recorder = new AudioRecorder();
        recorder.ClearLastSLResult();
        recorder.RealizeRecorder();
        recorder.RealizeRoutingProxy();

        AudioRouting routingObj = recorder.GetRoutingInterface();
        assertNotNull(routingObj);

        // Not allowed to acquire twice
        routingObj = recorder.GetRoutingInterface();
        assertNull(routingObj);
        assertTrue(recorder.GetLastSLResult() != 0);

        recorder.ReleaseRoutingInterface(routingObj);
        assertTrue(recorder.GetLastSLResult() == 0);
    }

    // Test an Aquire before the OpenSL ES recorder is Realized."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordRoutingNative.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordRoutingNative"	"testAquirePreRealizeDefaultProxy"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordRoutingNative.java]:[microphone]:[1]:method_text:[LResult() == 0);    }    // Test actually setting the routing through the enumerated devices.   ]) :|: public void testAquirePreRealizeDefaultProxy() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        AudioRecorder recorder = new AudioRecorder();
        recorder.ClearLastSLResult();
        recorder.RealizeRecorder();
        recorder.RealizeRoutingProxy();
        assertTrue(recorder.GetLastSLResult() == 0);

        AudioRouting routingObj = recorder.GetRoutingInterface();
        assertTrue(recorder.GetLastSLResult() == 0);
        assertNotNull(routingObj);

        recorder.RealizeRecorder();
        assertTrue(recorder.GetLastSLResult() == 0);

        recorder.ReleaseRoutingInterface(routingObj);
        assertTrue(recorder.GetLastSLResult() == 0);
    }

    // Test actually setting the routing through the enumerated devices."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordRoutingNative.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordRoutingNative"	"testRouting"	""	"2: Microphone microphone"	"([3:/android/media/audio/cts/AudioRecordRoutingNative.java]:[microphone]:[3]:method_text:[().getPackageManager().hasSystemFeature(                PackageManager.FEATURE_MICROPHONE);    }}]) :|: public void testRouting() {
        if (!hasMicrophone()) {
            return;
        }
        AudioRecorder recorder = new AudioRecorder();
        recorder.ClearLastSLResult();
        recorder.RealizeRecorder();
        recorder.RealizeRoutingProxy();

        AudioRouting routingObj = recorder.GetRoutingInterface();
        assertNotNull(routingObj);

        AudioDeviceInfo[] deviceList;
        deviceList = mAudioManager.getDevices(AudioManager.GET_DEVICES_INPUTS);
        assertTrue(deviceList != null);
        for (AudioDeviceInfo devInfo : deviceList) {
            assertTrue(routingObj.setPreferredDevice(devInfo));
        }

        recorder.ReleaseRoutingInterface(routingObj);
        assertTrue(recorder.GetLastSLResult() == 0);
    }

    private boolean hasMicrophone() {
        return getContext().getPackageManager().hasSystemFeature(
                PackageManager.FEATURE_MICROPHONE);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordRoutingNative.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioManagerTest"	"isMicrophoneMute"	""	"3: silent Microphone microphone"	"([5:/android/media/audio/cts/AudioManagerTest.java]:[microphone]:[5]:method_text:[    @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")   ]) :|: public void test/*
 *.
 */

package android.media.audio.cts;

import static org.junit.Assert.assertNotEquals;

import static android.media.AudioManager.ADJUST_LOWER;
import static android.media.AudioManager.ADJUST_RAISE;
import static android.media.AudioManager.ADJUST_SAME;
import static android.media.AudioManager.MODE_IN_CALL;
import static android.media.AudioManager.MODE_IN_COMMUNICATION;
import static android.media.AudioManager.MODE_NORMAL;
import static android.media.AudioManager.MODE_RINGTONE;
import static android.media.AudioManager.RINGER_MODE_NORMAL;
import static android.media.AudioManager.RINGER_MODE_SILENT;
import static android.media.AudioManager.RINGER_MODE_VIBRATE;
import static android.media.AudioManager.STREAM_ACCESSIBILITY;
import static android.media.AudioManager.STREAM_ALARM;
import static android.media.AudioManager.STREAM_DTMF;
import static android.media.AudioManager.STREAM_MUSIC;
import static android.media.AudioManager.STREAM_NOTIFICATION;
import static android.media.AudioManager.STREAM_RING;
import static android.media.AudioManager.STREAM_SYSTEM;
import static android.media.AudioManager.STREAM_VOICE_CALL;
import static android.media.AudioManager.USE_DEFAULT_STREAM_TYPE;
import static android.media.AudioManager.VIBRATE_SETTING_OFF;
import static android.media.AudioManager.VIBRATE_SETTING_ON;
import static android.media.AudioManager.VIBRATE_SETTING_ONLY_SILENT;
import static android.media.AudioManager.VIBRATE_TYPE_NOTIFICATION;
import static android.media.AudioManager.VIBRATE_TYPE_RINGER;
import static android.provider.Settings.System.SOUND_EFFECTS_ENABLED;

import android.Manifest;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.media.AudioAttributes;
import android.media.AudioDe"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioManagerTest"	"testVibrateNotification"	""	"1: silent"	"([11:/android/media/audio/cts/AudioManagerTest.java]:[silent]:[11]:method_text:[SETTING_OFF,                mAudioManager.getVibrateSetting(VIBRATE_TYPE_NOTIFICATION));    }   ]) :|: public void testVibrateNotification() throws Exception {
        if (mUseFixedVolume || !mHasVibrator) {
            return;
        }
        Utils.toggleNotificationPolicyAccess(
                mContext.getPackageName(), getInstrumentation(), true);
        // VIBRATE_SETTING_ON
        mAudioManager.setVibrateSetting(VIBRATE_TYPE_NOTIFICATION, VIBRATE_SETTING_ON);
        assertEquals(mHasVibrator ? VIBRATE_SETTING_ON : VIBRATE_SETTING_OFF,
                mAudioManager.getVibrateSetting(VIBRATE_TYPE_NOTIFICATION));
        mAudioManager.setRingerMode(RINGER_MODE_NORMAL);
        assertEquals(mHasVibrator, mAudioManager.shouldVibrate(VIBRATE_TYPE_NOTIFICATION));

        mAudioManager.setRingerMode(RINGER_MODE_SILENT);
        assertFalse(mAudioManager.shouldVibrate(VIBRATE_TYPE_NOTIFICATION));

        mAudioManager.setRingerMode(RINGER_MODE_VIBRATE);
        assertEquals(mHasVibrator ? RINGER_MODE_VIBRATE : RINGER_MODE_SILENT,
                mAudioManager.getRingerMode());
        assertEquals(mHasVibrator, mAudioManager.shouldVibrate(VIBRATE_TYPE_NOTIFICATION));

        // VIBRATE_SETTING_OFF
        mAudioManager.setVibrateSetting(VIBRATE_TYPE_NOTIFICATION, VIBRATE_SETTING_OFF);
        assertEquals(VIBRATE_SETTING_OFF,
                mAudioManager.getVibrateSetting(VIBRATE_TYPE_NOTIFICATION));
        mAudioManager.setRingerMode(RINGER_MODE_NORMAL);
        assertFalse(mAudioManager.shouldVibrate(VIBRATE_TYPE_NOTIFICATION));

        mAudioManager.setRingerMode(RINGER_MODE_SILENT);
        assertFalse(mAudioManager.shouldVibrate(VIBRATE_TYPE_NOTIFICATION));

        mAudioManager.setRingerMode(RINGER_MODE_VIBRATE);
        assertEquals(mHasVibrator ? RINGER_MODE_VIBRATE : RINGER_MODE_SILENT,
                mAudioManager.getRingerMode());
        assertFalse(mAudioManager.shouldVibrate(VIBRATE_TYPE_NOTIFICATION));

        // VIBRATE_SETTING_ONLY_SILENT
        mAudioManager.setVibrateSetting(VIBRATE_TYPE_NOTIFICATION, VIBRATE_SETTING_ONLY_SILENT);"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioManagerTest"	"testVibrateRinger"	""	"1: silent"	"([11:/android/media/audio/cts/AudioManagerTest.java]:[silent]:[11]:method_text:[BRATE_SETTING_OFF,                mAudioManager.getVibrateSetting(VIBRATE_TYPE_RINGER));    }   ]) :|: public void testVibrateRinger() throws Exception {
        if (mUseFixedVolume || !mHasVibrator) {
            return;
        }
        Utils.toggleNotificationPolicyAccess(
                mContext.getPackageName(), getInstrumentation(), true);
        // VIBRATE_TYPE_RINGER
        mAudioManager.setVibrateSetting(VIBRATE_TYPE_RINGER, VIBRATE_SETTING_ON);
        assertEquals(mHasVibrator ? VIBRATE_SETTING_ON : VIBRATE_SETTING_OFF,
                mAudioManager.getVibrateSetting(VIBRATE_TYPE_RINGER));
        mAudioManager.setRingerMode(RINGER_MODE_NORMAL);
        assertEquals(mHasVibrator, mAudioManager.shouldVibrate(VIBRATE_TYPE_RINGER));

        mAudioManager.setRingerMode(RINGER_MODE_SILENT);
        assertFalse(mAudioManager.shouldVibrate(VIBRATE_TYPE_RINGER));

        mAudioManager.setRingerMode(RINGER_MODE_VIBRATE);
        assertEquals(mHasVibrator ? RINGER_MODE_VIBRATE : RINGER_MODE_SILENT,
                mAudioManager.getRingerMode());
        assertEquals(mHasVibrator, mAudioManager.shouldVibrate(VIBRATE_TYPE_RINGER));

        // VIBRATE_SETTING_OFF
        mAudioManager.setVibrateSetting(VIBRATE_TYPE_RINGER, VIBRATE_SETTING_OFF);
        assertEquals(VIBRATE_SETTING_OFF, mAudioManager.getVibrateSetting(VIBRATE_TYPE_RINGER));
        mAudioManager.setRingerMode(RINGER_MODE_NORMAL);
        assertFalse(mAudioManager.shouldVibrate(VIBRATE_TYPE_RINGER));

        mAudioManager.setRingerMode(RINGER_MODE_SILENT);
        assertFalse(mAudioManager.shouldVibrate(VIBRATE_TYPE_RINGER));

        mAudioManager.setRingerMode(RINGER_MODE_VIBRATE);
        assertEquals(mHasVibrator ? RINGER_MODE_VIBRATE : RINGER_MODE_SILENT,
                mAudioManager.getRingerMode());
        // Note: as of Froyo, if VIBRATE_TYPE_RINGER is set to OFF, it will
        // not vibrate, even in RINGER_MODE_VIBRATE. This allows users to
        // disable the vibration for incoming calls only.
        assertFalse(mAudioManager.shouldVibrate(VIBRATE_TYPE_RINGER));

        // VIB"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioManagerTest"	"testAccessRingMode"	""	"1: silent"	"([3:/android/media/audio/cts/AudioManagerTest.java]:[silent]:[3]:method_text:[BRATE : RINGER_MODE_SILENT,                    mAudioManager.getRingerMode());        }    }   ]) :|: public void testAccessRingMode() throws Exception {
        Utils.toggleNotificationPolicyAccess(
                mContext.getPackageName(), getInstrumentation(), true);
        mAudioManager.setRingerMode(RINGER_MODE_NORMAL);
        assertEquals(RINGER_MODE_NORMAL, mAudioManager.getRingerMode());

        mAudioManager.setRingerMode(RINGER_MODE_SILENT);
        // AudioService#setRingerMode() has:
        // if (isTelevision) return;
        if (mSkipRingerTests) {
            assertEquals(RINGER_MODE_NORMAL, mAudioManager.getRingerMode());
        } else {
            assertEquals(RINGER_MODE_SILENT, mAudioManager.getRingerMode());
        }

        mAudioManager.setRingerMode(RINGER_MODE_VIBRATE);
        if (mSkipRingerTests) {
            assertEquals(RINGER_MODE_NORMAL, mAudioManager.getRingerMode());
        } else {
            assertEquals(mHasVibrator ? RINGER_MODE_VIBRATE : RINGER_MODE_SILENT,
                    mAudioManager.getRingerMode());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioManagerTest"	"testSetRingerModePolicyAccess"	""	"1: silent"	"([8:/android/media/audio/cts/AudioManagerTest.java]:[silent]:[8]:method_text:[;            assertEquals(RINGER_MODE_VIBRATE, mAudioManager.getRingerMode());        }    }   ]) :|: public void testSetRingerModePolicyAccess() throws Exception {
        if (mSkipRingerTests) {
            return;
        }
        // Apps without policy access cannot change silent -> normal or silent -> vibrate.
        Utils.toggleNotificationPolicyAccess(
                mContext.getPackageName(), getInstrumentation(), true);
        mAudioManager.setRingerMode(RINGER_MODE_SILENT);
        assertEquals(RINGER_MODE_SILENT, mAudioManager.getRingerMode());
        Utils.toggleNotificationPolicyAccess(
                mContext.getPackageName(), getInstrumentation(), false);

        try {
            mAudioManager.setRingerMode(RINGER_MODE_NORMAL);
            fail(""Apps without notification policy access cannot change ringer mode"");
        } catch (SecurityException e) {
        }

        try {
            mAudioManager.setRingerMode(RINGER_MODE_VIBRATE);
            fail(""Apps without notification policy access cannot change ringer mode"");
        } catch (SecurityException e) {
        }

        // Apps without policy access cannot change normal -> silent.
        Utils.toggleNotificationPolicyAccess(
                mContext.getPackageName(), getInstrumentation(), true);
        mAudioManager.setRingerMode(RINGER_MODE_NORMAL);
        assertEquals(RINGER_MODE_NORMAL, mAudioManager.getRingerMode());
        Utils.toggleNotificationPolicyAccess(
                mContext.getPackageName(), getInstrumentation(), false);

        try {
            mAudioManager.setRingerMode(RINGER_MODE_SILENT);
            fail(""Apps without notification policy access cannot change ringer mode"");
        } catch (SecurityException e) {
        }
        assertEquals(RINGER_MODE_NORMAL, mAudioManager.getRingerMode());

        if (mHasVibrator) {
            // Apps without policy access cannot change vibrate -> silent.
            Utils.toggleNotificationPolicyAccess(
                    mContext.getPackageName(), getInstrumentation(), true);
            mAudioManager.setRingerM"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioManagerTest"	"testMuteDndAffectedStreams"	""	"1: silent"	"([5:/android/media/audio/cts/AudioManagerTest.java]:[silent]:[5]:method_text:[ckageName(), getInstrumentation(), true);            testStreamMuting(stream);        }    }   ]) :|: public void testMuteDndAffectedStreams() throws Exception {
        if (mSkipRingerTests) {
            return;
        }
        int[] streams = { STREAM_RING };
        // Mute streams
        Utils.toggleNotificationPolicyAccess(
                mContext.getPackageName(), getInstrumentation(), true);
        mAudioManager.setRingerMode(RINGER_MODE_SILENT);
        Utils.toggleNotificationPolicyAccess(
                mContext.getPackageName(), getInstrumentation(), false);
        // Verify streams cannot be unmuted without policy access.
        for (int stream : streams) {
            try {
                mAudioManager.adjustStreamVolume(stream, AudioManager.ADJUST_UNMUTE, 0);
                assertEquals(""Apps without Notification policy access can't change ringer mode"",
                        RINGER_MODE_SILENT, mAudioManager.getRingerMode());
            } catch (SecurityException e) {
            }

            try {
                mAudioManager.adjustStreamVolume(stream, AudioManager.ADJUST_TOGGLE_MUTE,
                        0);
                assertEquals(""Apps without Notification policy access can't change ringer mode"",
                        RINGER_MODE_SILENT, mAudioManager.getRingerMode());
            } catch (SecurityException e) {
            }

            try {
                mAudioManager.setStreamMute(stream, false);
                assertEquals(""Apps without Notification policy access can't change ringer mode"",
                        RINGER_MODE_SILENT, mAudioManager.getRingerMode());
            } catch (SecurityException e) {
            }
        }

        // This ensures we're out of vibrate or silent modes.
        Utils.toggleNotificationPolicyAccess(
                mContext.getPackageName(), getInstrumentation(), true);
        mAudioManager.setRingerMode(RINGER_MODE_NORMAL);
        for (int stream : streams) {
            // ensure each stream is on and turned up.
            mAudioManager.setStreamVolume(stream,"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioManagerTest"	"testMuteDndUnaffectedStreams"	""	"1: silent"	"([1:/android/media/audio/cts/AudioManagerTest.java]:[silent]:[1]:method_text:[etStreamMute failed."",                    mAudioManager.isStreamMute(stream));        }    }   ]) :|: public void testMuteDndUnaffectedStreams() throws Exception {
        if (mSkipRingerTests) {
            return;
        }
        int[] streams = {
                STREAM_VOICE_CALL,
                STREAM_MUSIC,
                STREAM_ALARM
        };

        int muteAffectedStreams = System.getInt(mContext.getContentResolver(),
                System.MUTE_STREAMS_AFFECTED,
                // same defaults as in AudioService. Should be kept in sync.
                 (1 << STREAM_MUSIC) |
                         (1 << STREAM_RING) |
                         (1 << STREAM_NOTIFICATION) |
                         (1 << STREAM_SYSTEM) |
                         (1 << STREAM_VOICE_CALL));

        Utils.toggleNotificationPolicyAccess(
                mContext.getPackageName(), getInstrumentation(), true);
        // This ensures we're out of vibrate or silent modes.
        mAudioManager.setRingerMode(RINGER_MODE_NORMAL);
        Utils.toggleNotificationPolicyAccess(
                mContext.getPackageName(), getInstrumentation(), false);
        for (int stream : streams) {
            // ensure each stream is on and turned up.
            mAudioManager.setStreamVolume(stream,
                    mAudioManager.getStreamMaxVolume(stream),
                    0);
            if (((1 << stream) & muteAffectedStreams) == 0) {
                mAudioManager.adjustStreamVolume(stream, AudioManager.ADJUST_MUTE, 0);
                assertFalse(""Stream "" + stream + "" should not be affected by mute."",
                        mAudioManager.isStreamMute(stream));
                mAudioManager.setStreamMute(stream, true);
                assertFalse(""Stream "" + stream + "" should not be affected by mute."",
                        mAudioManager.isStreamMute(stream));
                mAudioManager.adjustStreamVolume(stream, AudioManager.ADJUST_TOGGLE_MUTE,
                        0);
                assertFalse(""Stream "" + stream + "" should not be affected by mute."","	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioManagerTest"	"testPriorityOnlySystemDisallowedWithRingerMuted"	""	"1: silent"	"([1:/android/media/audio/cts/AudioManagerTest.java]:[silent]:[1]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);        }    }   ]) :|: public void testPriorityOnlySystemDisallowedWithRingerMuted() throws Exception {
        if (mSkipRingerTests) {
            return;
        }

        Utils.toggleNotificationPolicyAccess(
                mContext.getPackageName(), getInstrumentation(), true);
        try {
            // ensure volume is not muted/0 to start test, but then mute ringer
            mAudioManager.setStreamVolume(STREAM_MUSIC, 1, 0);
            mAudioManager.setStreamVolume(STREAM_ALARM, 1, 0);
            mAudioManager.setStreamVolume(STREAM_SYSTEM, 1, 0);
            mAudioManager.setStreamVolume(STREAM_RING, 0, 0);
            mAudioManager.setRingerMode(RINGER_MODE_SILENT);

            // allow only system in priority only
            mNm.setNotificationPolicy(new NotificationManager.Policy(
                    NotificationManager.Policy.PRIORITY_CATEGORY_SYSTEM, 0, 0));
            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_PRIORITY);

            assertStreamMuted(STREAM_MUSIC, true,
                    ""Music (media) stream should be muted"");
            assertStreamMuted(STREAM_SYSTEM, true,
                    ""System stream should be muted"");
            assertStreamMuted(STREAM_ALARM, true,
                    ""Alarm stream should be muted"");
            assertStreamMuted(STREAM_RING, true,
                    ""Ringer stream should be muted"");
        } finally {
            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioManagerTest"	"testMicrophoneMute"	""	"2: Microphone microphone"	"([5:/android/media/audio/cts/AudioManagerTest.java]:[microphone]:[5]:method_text:[    @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")   ]) :|: public void testMicrophoneMute() throws Exception {
        mAudioManager.setMicrophoneMute(true);
        assertTrue(mAudioManager.isMicrophoneMute());
        mAudioManager.setMicrophoneMute(false);
        assertFalse(mAudioManager.isMicrophoneMute() && !mDoNotCheckUnmute);
    }

    @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioManagerTest"	"testMicrophoneMuteIntent"	""	"2: Microphone microphone"	"([8:/android/media/audio/cts/AudioManagerTest.java]:[microphone]:[8]:method_text:[    @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")   ]) :|: public void testMicrophoneMuteIntent() throws Exception {
        if (!mDoNotCheckUnmute) {
            final MyBlockingIntentReceiver receiver = new MyBlockingIntentReceiver(
                    AudioManager.ACTION_MICROPHONE_MUTE_CHANGED);
            final boolean initialMicMute = mAudioManager.isMicrophoneMute();
            try {
                mContext.registerReceiver(receiver,
                        new IntentFilter(AudioManager.ACTION_MICROPHONE_MUTE_CHANGED));
                // change the mic mute state
                mAudioManager.setMicrophoneMute(!initialMicMute);
                // verify a change was reported
                final boolean intentFired = receiver.waitForExpectedAction(500/*ms*/);
                assertTrue(""ACTION_MICROPHONE_MUTE_CHANGED wasn't fired"", intentFired);
                // verify the mic mute state is expected
                final boolean newMicMute = mAudioManager.isMicrophoneMute();
                assertTrue(""new mic mute state not as expected ("" + !initialMicMute + "")"",
                        (newMicMute == !initialMicMute));
            } finally {
                mContext.unregisterReceiver(receiver);
                mAudioManager.setMicrophoneMute(initialMicMute);
            }
        }
    }

    @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioManagerTest"	"testGetMicrophones"	""	"2: Microphone microphone"	"([27:/android/media/audio/cts/AudioManagerTest.java]:[microphone]:[27]:method_text:[:"" + microphone.getDirectionality());            Log.i(TAG, ""--------------"");        }    }   ]) :|: public void testGetMicrophones() throws Exception {
        if (!mContext.getPackageManager().hasSystemFeature(
                PackageManager.FEATURE_MICROPHONE)) {
            return;
        }
        List<MicrophoneInfo> microphones = mAudioManager.getMicrophones();
        assertTrue(microphones.size() > 0);
        for (int i = 0; i < microphones.size(); i++) {
            MicrophoneInfo microphone = microphones.get(i);
            Log.i(TAG, ""deviceId:"" + microphone.getDescription());
            Log.i(TAG, ""portId:"" + microphone.getId());
            Log.i(TAG, ""type:"" + microphone.getType());
            Log.i(TAG, ""address:"" + microphone.getAddress());
            Log.i(TAG, ""deviceLocation:"" + microphone.getLocation());
            Log.i(TAG, ""deviceGroup:"" + microphone.getGroup()
                    + "" index:"" + microphone.getIndexInTheGroup());
            MicrophoneInfo.Coordinate3F position = microphone.getPosition();
            Log.i(TAG, ""position:"" + position.x + "" "" + position.y + "" "" + position.z);
            MicrophoneInfo.Coordinate3F orientation = microphone.getOrientation();
            Log.i(TAG, ""orientation:"" + orientation.x + "" ""
                    + orientation.y + "" "" + orientation.z);
            Log.i(TAG, ""frequencyResponse:"" + microphone.getFrequencyResponse());
            Log.i(TAG, ""channelMapping:"" + microphone.getChannelMapping());
            Log.i(TAG, ""sensitivity:"" + microphone.getSensitivity());
            Log.i(TAG, ""max spl:"" + microphone.getMaxSpl());
            Log.i(TAG, ""min spl:"" + microphone.getMinSpl());
            Log.i(TAG, ""directionality:"" + microphone.getDirectionality());
            Log.i(TAG, ""--------------"");
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioNativeTest"	"testAppendixBRecording"	""	"2: Microphone microphone"	"([2:/android/media/audio/cts/AudioNativeTest.java]:[microphone]:[2]:method_text:[if (!hasMicrophone()) {            return;        }        nativeAppendixBRecording();    }   ]) :|: public void testAppendixBRecording() {
        // better to detect presence of microphone here.
        if (!hasMicrophone()) {
            return;
        }
        nativeAppendixBRecording();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioNativeTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioNativeTest"	"testStereo16Record"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioNativeTest.java]:[microphone]:[1]:method_text:[e */, false /* useFloat */,                20 /* msecPerBuffer */, 8 /* numBuffers */));    }   ]) :|: public void testStereo16Record() {
        if (!hasMicrophone()) {
            return;
        }
        assertTrue(AudioRecordNative.test(
                2 /* numChannels */, 48000 /* sampleRate */, false /* useFloat */,
                20 /* msecPerBuffer */, 8 /* numBuffers */));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioNativeTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioNativeTest"	"testRecordStreamData"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioNativeTest.java]:[microphone]:[1]:method_text:[    SEGMENT_DURATION_IN_MSEC, NUMBER_SEGMENTS);                }            }        }    }   ]) :|: public void testRecordStreamData() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        final String TEST_NAME = ""testRecordStreamData"";
        final boolean TEST_FLOAT_ARRAY[] = {
                false,
                true,
        };
        final int TEST_SR_ARRAY[] = {
                //4000, // below limit of OpenSL ES
                12345, // irregular sampling rate
                44100,
                48000,
                96000,
                192000,
        };
        final int TEST_CHANNELS_ARRAY[] = {
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
        };
        final int SEGMENT_DURATION_IN_MSEC = 20;
        final int NUMBER_SEGMENTS = 10;

        for (boolean TEST_FLOAT : TEST_FLOAT_ARRAY) {
            for (int TEST_SR : TEST_SR_ARRAY) {
                for (int TEST_CHANNELS : TEST_CHANNELS_ARRAY) {
                    // OpenSL ES BUG: we run out of AudioTrack memory for this config on MNC
                    if (TEST_FLOAT == true && TEST_CHANNELS >= 8 && TEST_SR >= 192000) {
                        continue;
                    }
                    AudioRecordNative record = new AudioRecordNative();
                    doRecordTest(record, TEST_CHANNELS, TEST_SR, TEST_FLOAT,
                            SEGMENT_DURATION_IN_MSEC, NUMBER_SEGMENTS);
                }
            }
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioNativeTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioNativeTest"	"testRecordAudit"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioNativeTest.java]:[microphone]:[1]:method_text:[alse /* useFloat */,                1000 /* segmentDurationMs */, 10 /* numSegments */);    }   ]) :|: public void testRecordAudit() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        AudioRecordNative record = new AudioHelper.AudioRecordAuditNative();
        doRecordTest(record, 4 /* numChannels */, 44100 /* sampleRate */, false /* useFloat */,
                1000 /* segmentDurationMs */, 10 /* numSegments */);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioNativeTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioNativeTest"	"testInputChannelMasks"	""	"2: Microphone microphone"	"([3:/android/media/audio/cts/AudioNativeTest.java]:[microphone]:[3]:method_text:[tive void nativeAppendixBBufferQueue();    private static native void nativeAppendixBRecording();}]) :|: public void testInputChannelMasks() {
        if (!hasMicrophone()) {
            return;
        }

        AudioManager audioManager =
                (AudioManager) getContext().getSystemService(Context.AUDIO_SERVICE);
        AudioDeviceInfo[] inputDevices = audioManager.getDevices(AudioManager.GET_DEVICES_INPUTS);

        if (ApiLevelUtil.isAfter(Build.VERSION_CODES.P)) {
            testInputChannelMasksPostQ(inputDevices);
        } else {
            testInputChannelMasksPreQ(inputDevices);
        }
    }

    private void testInputChannelMasksPreQ(AudioDeviceInfo[] inputDevices) {
        AudioRecordNative recorder = new AudioRecordNative();

        int maxInputChannels = 0;
        for (AudioDeviceInfo deviceInfo : inputDevices) {
            for (int channels : deviceInfo.getChannelCounts()) {
                maxInputChannels = Math.max(channels, maxInputChannels);
            }
        }

        int validIndexMask = (1 << maxInputChannels) - 1;

        for (int mask = 0; mask <= MAX_INDEX_MASK; ++mask) {
            int channelCount = Long.bitCount(mask);
            boolean expectSuccess = (channelCount > 0)
                && ((mask & validIndexMask) != 0);

            // TODO: uncomment this line when b/27484181 is fixed.
            // expectSuccess &&= ((mask & ~validIndexMask) == 0);

            boolean ok = recorder.open(channelCount,
                mask | CHANNEL_INDEX_MASK_MAGIC, 48000, false, 2);
            recorder.close();
            assertEquals(expectSuccess, ok);
        }
    }

    private void testInputChannelMasksPostQ(AudioDeviceInfo[] inputDevices) {
        AudioRecordNative recorder = new AudioRecordNative();

        // first determine device selected for capture with channel index mask.
        boolean res = recorder.open(1, 1 | CHANNEL_INDEX_MASK_MAGIC, 16000, false, 2);
        // capture one channel at 16kHz is mandated by CDD
        assertTrue(res);
        AudioRouting router = recorder.getRoutingInterface();"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioNativeTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.VisualizerTest"	"test4_1MeasurePeakRms"	""	"1: silent"	"([1:/android/media/audio/cts/VisualizerTest.java]:[silent]:[1]:method_text:[seVisualizer();        }    }    //Test case 4.2: test measurement of peak / RMS in Long MP3   ]) :|: public void test4_1MeasurePeakRms() throws Exception {
        if (!hasAudioOutput()) {
            return;
        }
        AudioEffect vc = null;
        Preconditions.assertTestFileExists(mInpPrefix + ""sine1khzm40db.wav"");
        try {
            // this test will play a 1kHz sine wave with peaks at -40dB
            MediaPlayer mp = MediaPlayer
                    .create(getContext(), Uri.fromFile(new File(mInpPrefix + ""sine1khzm40db.wav"")));
            final int EXPECTED_PEAK_MB = -4015;
            final int EXPECTED_RMS_MB =  -4300;
            final int MAX_MEASUREMENT_ERROR_MB = 2000;
            assertNotNull(""null MediaPlayer"", mp);

            // creating a volume controller on output mix ensures that ro.audio.silent mutes
            // audio after the effects and not before
            vc = new AudioEffect(
                    AudioEffect.EFFECT_TYPE_NULL,
                    UUID.fromString(BUNDLE_VOLUME_EFFECT_UUID),
                    0,
                    mp.getAudioSessionId());
            vc.setEnabled(true);

            AudioManager am = (AudioManager) getContext().getSystemService(Context.AUDIO_SERVICE);
            assertNotNull(""null AudioManager"", am);
            int originalVolume = am.getStreamVolume(AudioManager.STREAM_MUSIC);
            am.setStreamVolume(AudioManager.STREAM_MUSIC,
                    am.getStreamMaxVolume(AudioManager.STREAM_MUSIC), 0);
            getVisualizer(mp.getAudioSessionId());
            mp.setLooping(true);
            mp.start();

            mVisualizer.setEnabled(true);
            assertTrue(""visualizer not enabled"", mVisualizer.getEnabled());
            Thread.sleep(100);
            int status = mVisualizer.setMeasurementMode(Visualizer.MEASUREMENT_MODE_PEAK_RMS);
            assertEquals(""setMeasurementMode() for PEAK_RMS doesn't report success"",
                    Visualizer.SUCCESS, status);
            // make sure we're playing long enough so the measurement is valid
            int"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/VisualizerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.VisualizerTest"	"test4_2MeasurePeakRmsLongMP3"	""	"1: silent"	"([1:/android/media/audio/cts/VisualizerTest.java]:[silent]:[1]:method_text:[ catch(InterruptedException e) {            }            mListenerThread = null;        }    }}]) :|: public void test4_2MeasurePeakRmsLongMP3() throws Exception {
        if (!hasAudioOutput()) {
            return;
        }
        AudioEffect vc = null;
        Preconditions.assertTestFileExists(mInpPrefix + ""sine1khzs40dblong.mp3"");
        try {
            // this test will play a 1kHz sine wave with peaks at -40dB
            MediaPlayer mp = MediaPlayer.create(getContext(),
                    Uri.fromFile(new File(mInpPrefix + ""sine1khzs40dblong.mp3"")));
            final int EXPECTED_PEAK_MB = -4015;
            final int EXPECTED_RMS_MB =  -4300;
            final int MAX_MEASUREMENT_ERROR_MB = 2000;
            assertNotNull(""null MediaPlayer"", mp);

            // creating a volume controller on output mix ensures that ro.audio.silent mutes
            // audio after the effects and not before
            vc = new AudioEffect(
                    AudioEffect.EFFECT_TYPE_NULL,
                    UUID.fromString(BUNDLE_VOLUME_EFFECT_UUID),
                    0,
                    mp.getAudioSessionId());
            vc.setEnabled(true);

            AudioManager am = (AudioManager) getContext().getSystemService(Context.AUDIO_SERVICE);
            assertNotNull(""null AudioManager"", am);
            int originalVolume = am.getStreamVolume(AudioManager.STREAM_MUSIC);
            am.setStreamVolume(AudioManager.STREAM_MUSIC,
                    am.getStreamMaxVolume(AudioManager.STREAM_MUSIC), 0);
            getVisualizer(mp.getAudioSessionId());
            mp.start();

            mVisualizer.setEnabled(true);
            assertTrue(""visualizer not enabled"", mVisualizer.getEnabled());
            Thread.sleep(100);
            int status = mVisualizer.setMeasurementMode(Visualizer.MEASUREMENT_MODE_PEAK_RMS);
            assertEquals(""setMeasurementMode() for PEAK_RMS doesn't report success"",
                    Visualizer.SUCCESS, status);
            // make sure we're playing long enough so the measurement is valid
            int currentPosition = m"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/VisualizerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordSharedAudioTest"	"adoptShellPermissionIdentity"	""	"2: Microphone microphone"	"([1:/android/media/audio/cts/AudioRecordSharedAudioTest.java]:[microphone]:[1]:method_text:[               .dropShellPermissionIdentity();        clearAudioserverPermissionCache();    }   ]) :|: /*
 *.
 */

package android.media.audio.cts;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.testng.Assert.assertThrows;

import android.content.Context;
import android.content.pm.PackageManager;
import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaSyncEvent;
import android.media.cts.NonMediaMainlineTest;
import android.util.Log;

import androidx.test.InstrumentationRegistry;
import androidx.test.filters.SdkSuppress;
import androidx.test.runner.AndroidJUnit4;

import com.android.compatibility.common.util.SystemUtil;

import java.io.IOException;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;



@NonMediaMainlineTest
@RunWith(AndroidJUnit4.class)
@SdkSuppress(minSdkVersion = 31, codeName = ""S"")
public class AudioRecordSharedAudioTest {
    private static final String TAG = ""AudioRecordSharedAudioTest"";
    private static final int SAMPLING_RATE_HZ = 16000;

    @Before
    public void setUp() throws Exception {
        if (!hasMicrophone()) {
            return;
        }
        InstrumentationRegistry.getInstrumentation().getUiAutomation()
                .adoptShellPermissionIdentity();
        clearAudioserverPermissionCache();
    }

    @After
    public void tearDown() throws Exception {
        InstrumentationRegistry.getInstrumentation().getUiAutomation()
                .dropShellPermissionIdentity();
        clearAudioserverPermissionCache();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordSharedAudioTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioRecordSharedAudioTest"	"testCapturesMatch"	""	"2: Microphone microphone"	"([2:/android/media/audio/cts/AudioRecordSharedAudioTest.java]:[microphone]:[2]:method_text:[(IOException e) {            fail(""cannot purge audio server permission cache"");        }    }}]) :|: 
    public void testCapturesMatch() throws Exception {
        AudioRecord record1 = null;
        AudioRecord record2 = null;
        try {
            record1 = new AudioRecord.Builder().setAudioFormat(new AudioFormat.Builder()
                                .setSampleRate(SAMPLING_RATE_HZ)
                                .setEncoding(AudioFormat.ENCODING_PCM_16BIT)
                                .setChannelMask(AudioFormat.CHANNEL_IN_MONO).build())
                            .setBufferSizeInBytes(SAMPLING_RATE_HZ
                                * AudioFormat.getBytesPerSample(AudioFormat.ENCODING_PCM_16BIT))
                            .setMaxSharedAudioHistoryMillis(
                                    AudioRecord.getMaxSharedAudioHistoryMillis() - 1)
                            .build();
            assertEquals(AudioRecord.STATE_INITIALIZED, record1.getState());

            record1.startRecording();

            final int RECORD1_NUM_SAMPLES = SAMPLING_RATE_HZ / 2;
            short[] buffer1 = new short[RECORD1_NUM_SAMPLES];

            // blocking read should allow for at least 500ms of audio in buffer
            int samplesRead = record1.read(buffer1, 0, RECORD1_NUM_SAMPLES);
            assertTrue(samplesRead >= RECORD1_NUM_SAMPLES);


            final int RECORD2_START_TIME_MS = 100;
            MediaSyncEvent event = record1.shareAudioHistory(
                    InstrumentationRegistry.getTargetContext().getPackageName(),
                    (long) RECORD2_START_TIME_MS /* startFromMillis */);
            assertEquals(event.getAudioSessionId(), record1.getAudioSessionId());

            record2 = new AudioRecord.Builder().setAudioFormat(new AudioFormat.Builder()
                                .setSampleRate(SAMPLING_RATE_HZ)
                                .setEncoding(AudioFormat.ENCODING_PCM_16BIT)
                                .setChannelMask(AudioFormat.CHANNEL_IN_MONO).build())
                            .setBufferSizeInBytes(SAMPLING_R"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioRecordSharedAudioTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioEffectTest"	"test5_0Command"	""	"1: granted"	"([2:/android/media/audio/cts/AudioEffectTest.java]:[granted]:[2]:method_text:[        }        if (mMediaPlayer != null) {            mMediaPlayer.release();        }    }}]) :|: public void test5_0Command() throws Exception {
        if (!isPresetReverbAvailable()) {
            return;
        }
        getEffect(AudioEffect.EFFECT_TYPE_PRESET_REVERB, 0);
        try {
            byte[] cmd = new byte[0];
            byte[] reply = new byte[4];
            // command 3 is ENABLE
            int status = mEffect.command(3, cmd, reply);
            assertFalse(""command failed"", AudioEffect.isError(status));
            assertTrue(""effect not enabled"", mEffect.getEnabled());

        } catch (IllegalStateException e) {
            fail(""command in illegal state"");
        } finally {
            releaseEffect();
        }
    }


    //-----------------------------------------------------------------
    // private methods
    //----------------------------------

    private void getEffect(UUID type, int session) {
         if (mEffect == null || session != mSession) {
             if (session != mSession && mEffect != null) {
                 mEffect.release();
                 mEffect = null;
             }
             try {
                 mEffect = new AudioEffect(type,
                                             AudioEffect.EFFECT_TYPE_NULL,
                                             0,
                                             session);
                 mSession = session;
            } catch (IllegalArgumentException e) {
                Log.e(TAG, ""getEffect() AudioEffect not found exception: ""+e);
            } catch (UnsupportedOperationException e) {
                Log.e(TAG, ""getEffect() Effect library not loaded exception: ""+e);
            }
         }
         assertNotNull(""could not create mEffect"", mEffect);
    }

    private void releaseEffect() {
        if (mEffect != null) {
            mEffect.release();
            mEffect = null;
        }
    }

    private void waitForLooperInitialization_l() {
        int looperWaitCount = MAX_LOOPER_WAIT_COUNT;
        while (!mInitialized && (looperWaitCount-- > 0)) {"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioEffectTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioFocusTest"	"testAudioFocusRequestMediaGainLossWithPlayer"	""	"1: granted"	"([2:/android/media/audio/cts/AudioFocusTest.java]:[granted]:[2]:method_text:[ * @throws Exception     */    @AppModeFull(reason = ""Instant apps cannot access the SD card"")   ]) :|: public void testAudioFocusRequestMediaGainLossWithPlayer() throws Exception {
        if (hasAutomotiveFeature(getContext())) {
            Log.i(TAG, ""Test testAudioFocusRequestMediaGainLossWithPlayer ""
                    + ""skipped: not required for Auto platform"");
            return;
        }

        // for query of fade out duration and focus request/abandon test methods
        getInstrumentation().getUiAutomation().adoptShellPermissionIdentity(
                Manifest.permission.QUERY_AUDIO_STATE);

        final int NB_FOCUS_OWNERS = 2;
        final AudioFocusRequest[] focusRequests = new AudioFocusRequest[NB_FOCUS_OWNERS];
        final FocusChangeListener[] focusListeners = new FocusChangeListener[NB_FOCUS_OWNERS];
        final int FOCUS_UNDER_TEST = 0;// index of focus owner to be tested
        final int FOCUS_SIMULATED = 1; // index of focus requester used to simulate a request coming
                                       //   from another client on a different UID than CTS

        final HandlerThread handlerThread = new HandlerThread(TAG);
        handlerThread.start();
        final Handler handler = new Handler(handlerThread.getLooper());

        final AudioAttributes mediaAttributes = new AudioAttributes.Builder()
                .setUsage(AudioAttributes.USAGE_MEDIA)
                .build();
        for (int focusIndex : new int[]{ FOCUS_UNDER_TEST, FOCUS_SIMULATED }) {
            focusListeners[focusIndex] = new FocusChangeListener();
            focusRequests[focusIndex] = new AudioFocusRequest.Builder(AudioManager.AUDIOFOCUS_GAIN)
                    .setAudioAttributes(mediaAttributes)
                    .setOnAudioFocusChangeListener(focusListeners[focusIndex], handler)
                    .build();
        }
        final AudioManager am = new AudioManager(getContext());

        MediaPlayer mp = null;
        final String simFocusClientId = ""fakeClientId"";
        try {
            // set up the test conditions: a focus owner is"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioFocusTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.AudioFocusTest"	"testAudioFocusRequestMediaGainLossWithPauseOnDuckFocusRequest"	""	"1: granted"	"([6:/android/media/audio/cts/AudioFocusTest.java]:[granted]:[6]:method_text:[  synchronized (mLock) {                mFocusChange = focusChange;            }        }    }}]) :|: public void testAudioFocusRequestMediaGainLossWithPauseOnDuckFocusRequest() throws Exception {
        if (hasAutomotiveFeature(getContext())) {
            Log.i(TAG, ""Test testAudioFocusRequestMediaGainLossWithSpeechPlayer ""
                    + ""skipped: not required for Auto platform"");
            return;
        }
        doTwoFocusOwnerOnePlayerFocusLoss(
                false /*playSpeech*/,
                false /*speechFocus*/,
                true /*pauseOnDuck*/);
    }

    private void doTwoFocusOwnerOnePlayerFocusLoss(boolean playSpeech, boolean speechFocus,
            boolean pauseOnDuck) throws Exception {
        // for query of fade out duration and focus request/abandon test methods
        getInstrumentation().getUiAutomation().adoptShellPermissionIdentity(
                Manifest.permission.QUERY_AUDIO_STATE);

        final int NB_FOCUS_OWNERS = 2;
        final AudioFocusRequest[] focusRequests = new AudioFocusRequest[NB_FOCUS_OWNERS];
        final FocusChangeListener[] focusListeners = new FocusChangeListener[NB_FOCUS_OWNERS];
        // index of focus owner to be tested, has an active player
        final int FOCUS_UNDER_TEST = 0;
        // index of focus requester used to simulate a request coming from another client
        // on a different UID than CTS
        final int FOCUS_SIMULATED = 1;

        final HandlerThread handlerThread = new HandlerThread(TAG);
        handlerThread.start();
        final Handler handler = new Handler(handlerThread.getLooper());

        final AudioAttributes focusAttributes = new AudioAttributes.Builder()
                .setUsage(AudioAttributes.USAGE_MEDIA)
                .setContentType(playSpeech ? AudioAttributes.CONTENT_TYPE_SPEECH
                        : AudioAttributes.CONTENT_TYPE_MUSIC)
                .build();
        final AudioAttributes playerAttributes = new AudioAttributes.Builder()
                .setUsage(AudioAttributes.USAGE_MEDIA)
                .setContentType(speechFocus"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/AudioFocusTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.audio.cts.RingtoneTest"	"isPlaying"	""	"1: silent"	"([1:/android/media/audio/cts/RingtoneTest.java]:[silent]:[1]:method_text:[PackageManager()                .hasSystemFeature(PackageManager.FEATURE_LEANBACK_ONLY);    }   ]) :|: public void test/*
 *.
 */

package android.media.audio.cts;

import android.content.Context;
import android.content.pm.PackageManager;
import android.media.AudioAttributes;
import android.media.AudioManager;
import android.media.Ringtone;
import android.media.RingtoneManager;
import android.media.audiofx.HapticGenerator;
import android.media.cts.Utils;
import android.net.Uri;
import android.os.Build;
import android.platform.test.annotations.AppModeFull;
import android.provider.Settings;
import android.test.InstrumentationTestCase;
import android.util.Log;

import com.android.compatibility.common.util.ApiLevelUtil;

@AppModeFull(reason = ""TODO: evaluate and port to instant"")
public class RingtoneTest extends InstrumentationTestCase {
    private static final String TAG = ""RingtoneTest"";

    private Context mContext;
    private Ringtone mRingtone;
    private AudioManager mAudioManager;
    private int mOriginalVolume;
    private int mOriginalRingerMode;
    private int mOriginalStreamType;
    private Uri mDefaultRingUri;

    private static boolean sIsAtLeastS = ApiLevelUtil.isAtLeast(Build.VERSION_CODES.S);

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        enableAppOps();
        mContext = getInstrumentation().getContext();
        mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
        mRingtone = RingtoneManager.getRingtone(mContext, Settings.System.DEFAULT_RINGTONE_URI);
        // backup ringer settings
        mOriginalRingerMode = mAudioManager.getRingerMode();
        mOriginalVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_RING);
        mOriginalStreamType = mRingtone.getStreamType();

        int maxVolume = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_RING);

        if (mAudioManager.getRingerMode() == AudioManager.RINGER_MODE_VIBRATE) {
            mAudioManager.setRingerMode(AudioManager.RINGER_MODE_NORMAL);
            mAudioManager.setStreamVolume(Audi"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/audio/src/android/media/audio/cts/RingtoneTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaPlayerTest"	"testPlayMidi"	"CtsMediaTestCases"	"1: silent"	"([1:/android/media/cts/MediaPlayerTest.java]:[silent]:[1]:method_text:[        void release() {            mVis.release();            mVc.release();        }    }   ]) :|: public void testPlayMidi() throws Exception {
        runMidiTest(""midi8sec.mid"", 8000 /* duration */);
        runMidiTest(""testrtttl.rtttl"", 30000 /* duration */);
        runMidiTest(""testimy.imy"", 5625 /* duration */);
        runMidiTest(""testota.ota"", 5906 /* duration */);
        runMidiTest(""testmxmf.mxmf"", 29095 /* duration */);
    }

    private void runMidiTest(final String res, int midiDuration) throws Exception {
        final int tolerance = 70;
        final int seekDuration = 1000;

        Preconditions.assertTestFileExists(mInpPrefix + res);
        MediaPlayer mp = MediaPlayer.create(mContext, Uri.fromFile(new File(mInpPrefix + res)));
        try {
            mp.setAudioStreamType(AudioManager.STREAM_MUSIC);
            mp.setWakeMode(mContext, PowerManager.PARTIAL_WAKE_LOCK);

            mp.start();

            assertFalse(mp.isLooping());
            mp.setLooping(true);
            assertTrue(mp.isLooping());

            assertEquals(midiDuration, mp.getDuration(), tolerance);
            int pos = mp.getCurrentPosition();
            assertTrue(pos >= 0);
            assertTrue(pos < midiDuration - seekDuration);

            mp.seekTo(pos + seekDuration);
            assertEquals(pos + seekDuration, mp.getCurrentPosition(), tolerance);

            // test stop and restart
            mp.stop();
            mp.reset();
            AssetFileDescriptor afd = getAssetFileDescriptorFor(res);
            mp.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength());
            afd.close();
            mp.prepare();
            mp.start();

            Thread.sleep(SLEEP_TIME);
        } finally {
            mp.release();
        }
    }

    private final class VerifyAndSignalTimedText implements MediaPlayer.OnTimedTextListener {

        final boolean mCheckStartTimeIncrease;
        final int mTargetSignalCount;
        int mPrevStartMs = -1;

        VerifyAndSignalTimedText() {
            this(Integer.MAX_VALUE, fal"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaPlayerTest"	"testSetNextMediaPlayer"	"CtsMediaTestCases"	"1: silent"	"([2:/android/media/cts/MediaPlayerTest.java]:[silent]:[2]:method_text:[es being detected.    // Note that this test does NOT guarantee that the correct data is played   ]) :|: public void testSetNextMediaPlayer() throws Exception {
        initMediaPlayer(mMediaPlayer);

        final Monitor mTestCompleted = new Monitor();

        Thread timer = new Thread(() -> {
            long startTime = SystemClock.elapsedRealtime();
            while(true) {
                SystemClock.sleep(SLEEP_TIME);
                if (mTestCompleted.isSignalled()) {
                    // done
                    return;
                }
                long now = SystemClock.elapsedRealtime();
                if ((now - startTime) > 45000) {
                    // We've been running for 45 seconds and still aren't done, so we're stuck
                    // somewhere. Signal ourselves to dump the thread stacks.
                    android.os.Process.sendSignal(android.os.Process.myPid(), 3);
                    SystemClock.sleep(2000);
                    fail(""Test is stuck, see ANR stack trace for more info. You may need to"" +
                            "" create /data/anr first"");
                    return;
                }
            }
        });

        timer.start();

        try {
            for (int i = 0; i < 3; i++) {

                initMediaPlayer(mMediaPlayer2);
                mOnCompletionCalled.reset();
                mOnInfoCalled.reset();
                mMediaPlayer.setOnCompletionListener(mp -> {
                    assertEquals(mMediaPlayer, mp);
                    mOnCompletionCalled.signal();
                });
                mMediaPlayer2.setOnInfoListener((mp, what, extra) -> {
                    assertEquals(mMediaPlayer2, mp);
                    if (what == MediaPlayer.MEDIA_INFO_STARTED_AS_NEXT) {
                        mOnInfoCalled.signal();
                    }
                    return false;
                });

                mMediaPlayer.setNextMediaPlayer(mMediaPlayer2);
                mMediaPlayer.start();
                assertTrue(mMediaPlayer.isPlaying());
                assertFalse(mOnCompletionC"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaPlayerTest"	"testGapless3"	"CtsMediaTestCases"	"1: silent"	"([2:/android/media/cts/MediaPlayerTest.java]:[silent]:[2]:method_text:[reseting, the video should continue playing     * from the time setDisplay() was called     */   ]) :|: public void testGapless3() throws Exception {
        flakyTestWrapper(""mononoisedcpos.m4a"", ""mononoisedcpos.m4a"");
    }

    private void flakyTestWrapper(final String res1, final String res2) throws Exception {
        boolean success = false;
        // test usually succeeds within a few tries, but occasionally may fail
        // many times in a row, so be aggressive and try up to 20 times
        for (int i = 0; i < 20 && !success; i++) {
            try {
                testGapless(res1, res2);
                success = true;
            } catch (Throwable t) {
                SystemClock.sleep(1000);
            }
        }
        // Try one more time. If this succeeds, we'll consider the test a success,
        // otherwise the exception gets thrown
        if (!success) {
            testGapless(res1, res2);
        }
    }

    private void testGapless(final String res1, final String res2) throws Exception {
        MediaPlayer mp1 = null;
        MediaPlayer mp2 = null;
        AudioEffect vc = null;
        Visualizer vis = null;
        AudioManager am = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
        int oldRingerMode = Integer.MIN_VALUE;
        int oldVolume = Integer.MIN_VALUE;
        try {
            if (am.getRingerMode() != AudioManager.RINGER_MODE_NORMAL) {
                Utils.toggleNotificationPolicyAccess(
                        mContext.getPackageName(), getInstrumentation(), true /* on */);
            }

            mp1 = new MediaPlayer();
            mp1.setAudioStreamType(AudioManager.STREAM_MUSIC);

            AssetFileDescriptor afd = getAssetFileDescriptorFor(res1);
            mp1.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength());
            afd.close();
            mp1.prepare();

            int session = mp1.getAudioSessionId();

            mp2 = new MediaPlayer();
            mp2.setAudioSessionId(session);
            mp2.setAudioStreamType(AudioManager.STREAM_MUSIC"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaPlayerTest"	"testRecordAndPlay"	"CtsMediaTestCases"	"2: Microphone microphone"	"([4:/android/media/cts/MediaPlayerTest.java]:[microphone]:[4]:method_text:[   PackageManager.FEATURE_MICROPHONE);    }    // Smoke test playback from a MediaDataSource.   ]) :|: public void testRecordAndPlay() throws Exception {
        if (!hasMicrophone()) {
            MediaUtils.skipTest(LOG_TAG, ""no microphone"");
            return;
        }
        if (!MediaUtils.checkDecoder(MediaFormat.MIMETYPE_AUDIO_AMR_NB)
                || !MediaUtils.checkEncoder(MediaFormat.MIMETYPE_AUDIO_AMR_NB)) {
            return; // skip
        }
        File outputFile = new File(Environment.getExternalStorageDirectory(),
                ""record_and_play.3gp"");
        String outputFileLocation = outputFile.getAbsolutePath();
        try {
            recordMedia(outputFileLocation);
            MediaPlayer mp = new MediaPlayer();
            try {
                mp.setDataSource(outputFileLocation);
                mp.prepareAsync();
                Thread.sleep(SLEEP_TIME);
                playAndStop(mp);
            } finally {
                mp.release();
            }

            Uri uri = Uri.parse(outputFileLocation);
            mp = new MediaPlayer();
            try {
                mp.setDataSource(mContext, uri);
                mp.prepareAsync();
                Thread.sleep(SLEEP_TIME);
                playAndStop(mp);
            } finally {
                mp.release();
            }

            try {
                mp = MediaPlayer.create(mContext, uri);
                playAndStop(mp);
            } finally {
                if (mp != null) {
                    mp.release();
                }
            }

            try {
                mp = MediaPlayer.create(mContext, uri, getActivity().getSurfaceHolder());
                playAndStop(mp);
            } finally {
                if (mp != null) {
                    mp.release();
                }
            }
        } finally {
            outputFile.delete();
        }
    }

    private void playAndStop(MediaPlayer mp) throws Exception {
        mp.start();
        Thread.sleep(SLEEP_TIME);
        mp.stop();
    }

    private void recordMedia(String outputFile)"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"MediaRecorderTest"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaRecorderTest.java]:[microphone]:[2]:method_text:[   mNextOutputFileStartedCond = null;        mActivity = null;        super.tearDown();    }   ]) :|: public void test/*
 *.
 */
package android.media.cts;

import static android.media.MediaCodecInfo.CodecProfileLevel.*;

import android.content.pm.PackageManager;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.hardware.Camera;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioRecord;
import android.media.AudioRecordingConfiguration;
import android.media.CamcorderProfile;
import android.media.EncoderCapabilities;
import android.media.EncoderCapabilities.VideoEncoderCap;
import android.media.MediaCodec;
import android.media.MediaCodecInfo;
import android.media.MediaCodecInfo.CodecCapabilities;
import android.media.MediaCodecList;
import android.media.MediaExtractor;
import android.media.MediaFormat;
import android.media.MediaMetadataRetriever;
import android.media.MediaRecorder;
import android.media.MediaRecorder.OnErrorListener;
import android.media.MediaRecorder.OnInfoListener;
import android.media.MicrophoneDirection;
import android.media.MicrophoneInfo;
import android.media.metrics.LogSessionId;
import android.media.metrics.MediaMetricsManager;
import android.media.metrics.RecordingSession;
import android.opengl.GLES20;
import android.os.Build;
import android.os.ConditionVariable;
import android.os.Environment;
import android.os.ParcelFileDescriptor;
import android.os.PersistableBundle;
import android.platform.test.annotations.AppModeFull;
import android.platform.test.annotations.RequiresDevice;
import android.test.ActivityInstrumentationTestCase2;
import android.test.UiThreadTest;
import android.util.Log;
import android.view.Surface;

import androidx.test.InstrumentationRegistry;
import androidx.test.filters.SmallTest;

import com.android.compatibility.common.util.ApiLevelUtil;
import com.android.compatibility.common.util.CddTest;
import com.android.compatibility.common.util.MediaUtils;

import java.io.File;
import java.io.FileDescriptor;
import java.io.FileO"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testRecorderMPEG2TS"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaRecorderTest.java]:[microphone]:[2]:method_text:[}        }        mMediaRecorder.stop();        checkOutputExist();    }    @UiThreadTest   ]) :|: public void testRecorderMPEG2TS() throws Exception {
        int width;
        int height;
        Camera camera = null;
        if (!hasCamera()) {
            MediaUtils.skipTest(""no camera"");
            return;
        }
        if (!hasMicrophone() || !hasAac()) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
            return;
        }
        // Try to get camera profile for QUALITY_LOW; if unavailable,
        // set the video size to default value.
        CamcorderProfile profile = CamcorderProfile.get(
                0 /* cameraId */, CamcorderProfile.QUALITY_LOW);
        if (profile != null) {
            width = profile.videoFrameWidth;
            height = profile.videoFrameHeight;
        } else {
            width = VIDEO_WIDTH;
            height = VIDEO_HEIGHT;
        }
        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
        mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_2_TS);
        mMediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
        mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
        mMediaRecorder.setVideoSize(width, height);
        mMediaRecorder.setVideoEncodingBitRate(VIDEO_BIT_RATE_IN_BPS);
        mMediaRecorder.setPreviewDisplay(mActivity.getSurfaceHolder().getSurface());
        mMediaRecorder.prepare();
        mMediaRecorder.start();
        Thread.sleep(RECORD_TIME_MS);

        // verify some getMetrics() behaviors while we're here.
        PersistableBundle metrics = mMediaRecorder.getMetrics();
        if (metrics == null) {
            fail(""MediaRecorder.getMetrics() returned null metrics"");
        } else if (metrics.isEmpty()) {
            fail(""MediaRecorder.getMetrics() returned empty metrics"");
        } else {
            int size = metrics.size();
            Set<String> keys = metrics.keySet();

            if (size == 0) {
                fail"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testRecordingAudioInRawFormats"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaRecorderTest.java]:[microphone]:[2]:method_text:[MediaRecorder.setMaxFileSize(MAX_FILE_SIZE * 10);    }    @CddTest(requirement=""5.4.1/C-1-4"")   ]) :|: public void testRecordingAudioInRawFormats() throws Exception {
        int testsRun = 0;
        if (hasAmrNb()) {
            testsRun += testRecordAudioInRawFormat(
                    MediaRecorder.OutputFormat.AMR_NB,
                    MediaRecorder.AudioEncoder.AMR_NB);
        }

        if (hasAmrWb()) {
            testsRun += testRecordAudioInRawFormat(
                    MediaRecorder.OutputFormat.AMR_WB,
                    MediaRecorder.AudioEncoder.AMR_WB);
        }

        if (hasAac()) {
            testsRun += testRecordAudioInRawFormat(
                    MediaRecorder.OutputFormat.AAC_ADTS,
                    MediaRecorder.AudioEncoder.AAC);
        }
        if (testsRun == 0) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
        }
    }

    private int testRecordAudioInRawFormat(
            int fileFormat, int codec) throws Exception {
        if (!hasMicrophone()) {
            return 0; // skip
        }
        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        mMediaRecorder.setOutputFormat(fileFormat);
        mMediaRecorder.setOutputFile(OUTPUT_PATH);
        mMediaRecorder.setAudioEncoder(codec);
        recordMedia(MAX_FILE_SIZE, mOutFile);
        return 1;
    }

    private void configureDefaultMediaRecorder() {
        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        mMediaRecorder.setAudioChannels(AUDIO_NUM_CHANNELS);
        mMediaRecorder.setAudioSamplingRate(AUDIO_SAMPLE_RATE_HZ);
        mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
        mMediaRecorder.setOutputFile(OUTPUT_PATH);
        mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
        mMediaRecorder.setMaxFileSize(MAX_FILE_SIZE * 10);
    }

    @CddTest(requirement=""5.4.1/C-1-4"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testGetActiveMicrophones"	"CtsMediaTestCases"	"2: Microphone microphone"	"([32:/android/media/cts/MediaRecorderTest.java]:[microphone]:[32]:method_text:[i(TAG, ""directionality:"" + microphone.getDirectionality());        Log.i(TAG, ""******"");    }   ]) :|: public void testGetActiveMicrophones() throws Exception {
        if (!hasMicrophone() || !hasAac()) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
            return;
        }
        configureDefaultMediaRecorder();
        mMediaRecorder.prepare();
        mMediaRecorder.start();
        Thread.sleep(1000);
        List<MicrophoneInfo> activeMicrophones = mMediaRecorder.getActiveMicrophones();
        assertTrue(activeMicrophones.size() > 0);
        for (MicrophoneInfo activeMicrophone : activeMicrophones) {
            printMicrophoneInfo(activeMicrophone);
        }
        mMediaRecorder.stop();
    }

    private void printMicrophoneInfo(MicrophoneInfo microphone) {
        Log.i(TAG, ""deviceId:"" + microphone.getDescription());
        Log.i(TAG, ""portId:"" + microphone.getId());
        Log.i(TAG, ""type:"" + microphone.getType());
        Log.i(TAG, ""address:"" + microphone.getAddress());
        Log.i(TAG, ""deviceLocation:"" + microphone.getLocation());
        Log.i(TAG, ""deviceGroup:"" + microphone.getGroup()
            + "" index:"" + microphone.getIndexInTheGroup());
        MicrophoneInfo.Coordinate3F position = microphone.getPosition();
        Log.i(TAG, ""position:"" + position.x + "","" + position.y + "","" + position.z);
        MicrophoneInfo.Coordinate3F orientation = microphone.getOrientation();
        Log.i(TAG, ""orientation:"" + orientation.x + "","" + orientation.y + "","" + orientation.z);
        Log.i(TAG, ""frequencyResponse:"" + microphone.getFrequencyResponse());
        Log.i(TAG, ""channelMapping:"" + microphone.getChannelMapping());
        Log.i(TAG, ""sensitivity:"" + microphone.getSensitivity());
        Log.i(TAG, ""max spl:"" + microphone.getMaxSpl());
        Log.i(TAG, ""min spl:"" + microphone.getMinSpl());
        Log.i(TAG, ""directionality:"" + microphone.getDirectionality());
        Log.i(TAG, ""******"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testRecordAudioFromAudioSourceUnprocessed"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaRecorderTest.java]:[microphone]:[2]:method_text:[ncoder(MediaRecorder.AudioEncoder.DEFAULT);        recordMedia(MAX_FILE_SIZE, mOutFile);    }   ]) :|: public void testRecordAudioFromAudioSourceUnprocessed() throws Exception {
        if (!hasMicrophone() || !hasAmrNb()) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
            return;
        }
        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.UNPROCESSED);
        mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);
        mMediaRecorder.setOutputFile(OUTPUT_PATH);
        mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);
        recordMedia(MAX_FILE_SIZE, mOutFile);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testRecorderAudio"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaRecorderTest.java]:[microphone]:[2]:method_text:[udioEncodingBitRate(AUDIO_BIT_RATE_IN_BPS);        recordMedia(MAX_FILE_SIZE, mOutFile);    }   ]) :|: public void testRecorderAudio() throws Exception {
        if (!hasMicrophone() || !hasAac()) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
            return;
        }
        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        assertEquals(0, mMediaRecorder.getMaxAmplitude());
        mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
        mMediaRecorder.setOutputFile(OUTPUT_PATH);
        mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
        mMediaRecorder.setAudioChannels(AUDIO_NUM_CHANNELS);
        mMediaRecorder.setAudioSamplingRate(AUDIO_SAMPLE_RATE_HZ);
        mMediaRecorder.setAudioEncodingBitRate(AUDIO_BIT_RATE_IN_BPS);
        recordMedia(MAX_FILE_SIZE, mOutFile);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testOnInfoListener"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaRecorderTest.java]:[microphone]:[2]:method_text:[ecorder.start();        Thread.sleep(RECORD_TIME_MS);        assertTrue(mOnInfoCalled);    }   ]) :|: public void testOnInfoListener() throws Exception {
        if (!hasMicrophone() || !hasAac()) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
            return;
        }
        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
        mMediaRecorder.setMaxDuration(MAX_DURATION_MSEC);
        mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
        mMediaRecorder.prepare();
        mMediaRecorder.start();
        Thread.sleep(RECORD_TIME_MS);
        assertTrue(mOnInfoCalled);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testSetMaxDuration"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaRecorderTest.java]:[microphone]:[2]:method_text:[ATION);        assertNotNull(durationStr);        return Integer.parseInt(durationStr);    }   ]) :|: public void testSetMaxDuration() throws Exception {
        if (!hasMicrophone() || !hasAac()) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
            return;
        }
        testSetMaxDuration(RECORD_TIME_LONG_MS, RECORDED_DUR_TOLERANCE_MS);
    }

    private void testSetMaxDuration(long durationMs, long toleranceMs) throws Exception {
        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
        mMediaRecorder.setMaxDuration((int)durationMs);
        mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
        mMediaRecorder.prepare();
        mMediaRecorder.start();
        long startTimeMs = System.currentTimeMillis();
        if (!mMaxDurationCond.block(durationMs + toleranceMs)) {
            fail(""timed out waiting for MEDIA_RECORDER_INFO_MAX_DURATION_REACHED"");
        }
        long endTimeMs = System.currentTimeMillis();
        long actualDurationMs = endTimeMs - startTimeMs;
        mMediaRecorder.stop();
        checkRecordedTime(durationMs, actualDurationMs, toleranceMs);
    }

    private void checkRecordedTime(long expectedMs, long actualMs, long tolerance) {
        assertEquals(expectedMs, actualMs, tolerance);
        long actualFileDurationMs = getRecordedFileDurationMs(OUTPUT_PATH);
        assertEquals(actualFileDurationMs, actualMs, tolerance);
    }

    private int getRecordedFileDurationMs(final String fileName) {
        MediaMetadataRetriever retriever = new MediaMetadataRetriever();
        retriever.setDataSource(fileName);
        String durationStr = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);
        assertNotNull(durationStr);
        return Integer.parseInt(durationStr);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testSetMaxFileSize"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaRecorderTest.java]:[microphone]:[2]:method_text:[         encSurface.release();            encSurface = null;        }        return 1;    }   ]) :|: public void testSetMaxFileSize() throws Exception {
        testSetMaxFileSize(512 * 1024, 50 * 1024);
    }

    private void testSetMaxFileSize(
            long fileSize, long tolerance) throws Exception {
        if (!hasMicrophone() || !hasCamera() || !hasAmrNb() || !hasH264()) {
            MediaUtils.skipTest(""no microphone, camera, or codecs"");
            return;
        }
        mCamera = Camera.open(0);
        setSupportedResolution(mCamera);
        mCamera.unlock();

        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
        mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
        mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
        mMediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
        mMediaRecorder.setVideoSize(mVideoWidth, mVideoHeight);
        mMediaRecorder.setVideoEncodingBitRate(256000);
        mMediaRecorder.setPreviewDisplay(mActivity.getSurfaceHolder().getSurface());
        mMediaRecorder.setMaxFileSize(fileSize);
        mMediaRecorder.prepare();
        mMediaRecorder.start();

        // Recording a scene with moving objects would greatly help reduce
        // the time for waiting.
        if (!mMaxFileSizeCond.block(MAX_FILE_SIZE_TIMEOUT_MS)) {
            fail(""timed out waiting for MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED"");
        }
        mMediaRecorder.stop();
        checkOutputFileSize(OUTPUT_PATH, fileSize, tolerance);
    }

    /**
     * Returns the first codec capable of encoding the specified MIME type, or null if no
     * match was found.
     */
    private static CodecCapabilities getCapsForPreferredCodecForMediaType(String mimeType) {
        // FIXME: select codecs based on the complete use-case, not just the mime
        MediaCodecList mcl = new MediaCodecList(MediaCodecList.REGULAR_CODECS);
        for (MediaCodecInfo info : mcl.getCodecInfos()) {"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testRecordExceedFileSizeLimit"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaRecorderTest.java]:[microphone]:[2]:method_text:[     assertEquals(fileSize, file.length(), tolerance);        assertTrue(file.delete());    }   ]) :|: public void testRecordExceedFileSizeLimit() throws Exception {
        if (!hasMicrophone() || !hasCamera() || !hasAmrNb() || !hasH264()) {
            MediaUtils.skipTest(""no microphone, camera, or codecs"");
            return;
        }
        long fileSize = 128 * 1024;
        long tolerance = 50 * 1024;
        int width;
        int height;
        List<String> recordFileList = new ArrayList<String>();
        mFileIndex = 0;

        // Override the handler in setup for test.
        mMediaRecorder.setOnInfoListener(new OnInfoListener() {
            public void onInfo(MediaRecorder mr, int what, int extra) {
                mOnInfoCalled = true;
                if (what ==
                    MediaRecorder.MEDIA_RECORDER_INFO_MAX_DURATION_REACHED) {
                    Log.v(TAG, ""max duration reached"");
                    mMaxDurationCond.open();
                } else if (what ==
                    MediaRecorder.MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED) {
                    if (!mExpectMaxFileCond) {
                        fail(""Do not expect MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED"");
                    } else {
                        Log.v(TAG, ""max file size reached"");
                        mMaxFileSizeCond.open();
                    }
                } else if (what ==
                    MediaRecorder.MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING) {
                    Log.v(TAG, ""max file size is approaching"");
                    mMaxFileSizeApproachingCond.open();

                    // Test passing a read-only FileDescriptor and expect IOException.
                    if (mFileIndex == 1) {
                        RandomAccessFile file = null;
                        try {
                            String path = OUTPUT_PATH + '0';
                            file = new RandomAccessFile(path, ""r"");
                            mMediaRecorder.setNextOutputFile(file.getFD());
                            fail(""Expect IOException."");"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testOnErrorListener"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaRecorderTest.java]:[microphone]:[2]:method_text:[e();                placeholder = null;            }        }        return success;    }   ]) :|: public void testOnErrorListener() throws Exception {
        if (!hasMicrophone() || !hasAac()) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
            return;
        }
        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT);
        mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
        mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);

        recordMedia(MAX_FILE_SIZE, mOutFile);
        // TODO: how can we trigger a recording error?
        assertFalse(mOnErrorCalled);
    }

    private void setupRecorder(String filename, boolean useSurface, boolean hasAudio)
            throws Exception {
        int codec = MediaRecorder.VideoEncoder.H264;
        int frameRate = getMaxFrameRateForCodec(codec);
        if (mMediaRecorder == null) {
            mMediaRecorder = new MediaRecorder();
        }

        if (!useSurface) {
            mCamera = Camera.open(0);
            Camera.Parameters params = mCamera.getParameters();
            frameRate = params.getPreviewFrameRate();
            setSupportedResolution(mCamera);
            mCamera.unlock();
            mMediaRecorder.setCamera(mCamera);
            mMediaRecorder.setPreviewDisplay(mActivity.getSurfaceHolder().getSurface());
        }

        mMediaRecorder.setVideoSource(useSurface ?
                MediaRecorder.VideoSource.SURFACE : MediaRecorder.VideoSource.CAMERA);

        if (hasAudio) {
            mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        }

        mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
        mMediaRecorder.setOutputFile(filename);

        mMediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
        mMediaRecorder.setVideoFrameRate(frameRate);
        mMediaRecorder.setVideoSize(mVideoWidth, mVideoHeight);

        if (hasAudio) {
            mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
        }
    }

    private Surface"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testPersistentSurfaceApi"	"CtsMediaTestCases"	"2: Microphone microphone"	"([1:/android/media/cts/MediaRecorderTest.java]:[microphone]:[1]:method_text:[ return (noOfFailure == 0);    }    // Test recording from surface source with/without audio)   ]) :|: public void testPersistentSurfaceApi() {
        if (!hasH264()) {
            MediaUtils.skipTest(""no codecs"");
            return;
        }

        // test valid use case
        assertTrue(validatePersistentSurface(false /* errorCase */));

        // test invalid use case
        assertTrue(validatePersistentSurface(true /* errorCase */));
    }

    private static int getMaxFrameRateForCodec(int codec) {
        for (VideoEncoderCap cap : mVideoEncoders) {
            if (cap.mCodec == codec) {
                return cap.mMaxFrameRate < NORMAL_FPS ? cap.mMaxFrameRate : NORMAL_FPS;
            }
        }
        fail(""didn't find max FPS for codec"");
        return -1;
    }

    private boolean recordFromSurface(
            String filename,
            int captureRate,
            boolean hasAudio,
            Surface persistentSurface) {
        Log.v(TAG, ""recordFromSurface"");
        Surface surface = null;
        try {
            setupRecorder(filename, true /* useSurface */, hasAudio);

            int sleepTimeMs;
            if (captureRate > 0) {
                mMediaRecorder.setCaptureRate(captureRate);
                sleepTimeMs = 1000 / captureRate;
            } else {
                sleepTimeMs = 1000 / getMaxFrameRateForCodec(MediaRecorder.VideoEncoder.H264);
            }

            if (persistentSurface != null) {
                Log.v(TAG, ""using persistent surface"");
                surface = persistentSurface;
                mMediaRecorder.setInputSurface(surface);
            }

            mMediaRecorder.prepare();

            if (persistentSurface == null) {
                surface = mMediaRecorder.getSurface();
            }

            Paint paint = new Paint();
            paint.setTextSize(16);
            paint.setColor(Color.RED);
            int i;

            /* Test: draw 10 frames at 30fps before start
             * these should be dropped and not causing malformed stream.
             */
            for(i = 0; i"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testPersistentSurfaceRecordingTimeLapse"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaRecorderTest.java]:[microphone]:[2]:method_text:[boolean hasH264() {        return MediaUtils.hasEncoder(MediaFormat.MIMETYPE_VIDEO_AVC);    }   ]) :|: public void testPersistentSurfaceRecordingTimeLapse() {
        assertTrue(testRecordFromSurface(true /* persistent */, true /* timelapse */));
    }

    private void recordMedia(long maxFileSize, File outFile) throws Exception {
        mMediaRecorder.setMaxFileSize(maxFileSize);
        mMediaRecorder.prepare();
        mMediaRecorder.start();
        Thread.sleep(RECORD_TIME_MS);
        mMediaRecorder.stop();

        assertTrue(outFile.exists());

        // The max file size is always guaranteed.
        // We just make sure that the margin is not too big
        assertTrue(outFile.length() < 1.1 * maxFileSize);
        assertTrue(outFile.length() > 0);
    }

    private boolean hasCamera() {
        return mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA);
    }

    private boolean hasMicrophone() {
        return mActivity.getPackageManager().hasSystemFeature(
                PackageManager.FEATURE_MICROPHONE);
    }

    private static boolean hasAmrNb() {
        return MediaUtils.hasEncoder(MediaFormat.MIMETYPE_AUDIO_AMR_NB);
    }

    private static boolean hasAmrWb() {
        return MediaUtils.hasEncoder(MediaFormat.MIMETYPE_AUDIO_AMR_WB);
    }

    private static boolean hasAac() {
        return MediaUtils.hasEncoder(MediaFormat.MIMETYPE_AUDIO_AAC);
    }

    private static boolean hasH264() {
        return MediaUtils.hasEncoder(MediaFormat.MIMETYPE_VIDEO_AVC);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testAudioRecordInfoCallback"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaRecorderTest.java]:[microphone]:[2]:method_text:[mMediaRecorder.stop();        mMediaRecorder.unregisterAudioRecordingCallback(callback);    }   ]) :|: public void testAudioRecordInfoCallback() throws Exception {
        if (!hasMicrophone() || !hasAac()) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
            return;
        }
        MyAudioRecordingCallback callback = new MyAudioRecordingCallback(
                        0 /*unused*/, MediaRecorder.AudioSource.DEFAULT);
        mMediaRecorder.registerAudioRecordingCallback(mExec, callback);
        configureDefaultMediaRecorder();
        mMediaRecorder.prepare();
        mMediaRecorder.start();
        callback.await(TEST_TIMING_TOLERANCE_MS);
        assertTrue(callback.mCalled);
        assertTrue(callback.mConfigs.size() <= 1);
        if (callback.mConfigs.size() == 1) {
            checkRecordingConfig(callback.mConfigs.get(0));
        }
        Thread.sleep(RECORD_TIME_MS);
        mMediaRecorder.stop();
        mMediaRecorder.unregisterAudioRecordingCallback(callback);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testGetActiveRecordingConfiguration"	"CtsMediaTestCases"	"2: Microphone microphone"	"([3:/android/media/cts/MediaRecorderTest.java]:[microphone]:[3]:method_text:[I        config.isClientSilenced();    }    /*     * Microphone Direction API tests     */   ]) :|: public void testGetActiveRecordingConfiguration() throws Exception {
        if (!hasMicrophone() || !hasAac()) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
            return;
        }
        configureDefaultMediaRecorder();
        mMediaRecorder.prepare();
        mMediaRecorder.start();
        Thread.sleep(1000);
        AudioRecordingConfiguration config = mMediaRecorder.getActiveRecordingConfiguration();
        checkRecordingConfig(config);
        mMediaRecorder.stop();
    }

    private Executor mExec = new Executor() {
        @Override
        public void execute(Runnable command) {
            command.run();
        }
    };

    private static void checkRecordingConfig(AudioRecordingConfiguration config) {
        assertNotNull(config);
        AudioFormat format = config.getClientFormat();
        assertEquals(AUDIO_NUM_CHANNELS, format.getChannelCount());
        assertEquals(AUDIO_SAMPLE_RATE_HZ, format.getSampleRate());
        assertEquals(MediaRecorder.AudioSource.MIC, config.getAudioSource());
        assertNotNull(config.getAudioDevice());
        assertNotNull(config.getClientEffects());
        assertNotNull(config.getEffects());
        // no requirement here, just testing the API
        config.isClientSilenced();
    }

    /*
     * Microphone Direction API tests
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testSetPreferredMicrophoneDirection"	"CtsMediaTestCases"	"2: Microphone microphone"	"([5:/android/media/cts/MediaRecorderTest.java]:[microphone]:[5]:method_text:[neDirection() exception:"" + ex);            assertTrue(false);        }        return;    }   ]) :|: public void testSetPreferredMicrophoneDirection() {
        if (!hasMicrophone()) {
            return;
        }

        try {
            boolean succecss =
                    mMediaRecorder.setPreferredMicrophoneDirection(
                            MicrophoneDirection.MIC_DIRECTION_TOWARDS_USER);

            // Can't actually test this as HAL may not have implemented it
            // Just verify that it doesn't crash or throw an exception
            // assertTrue(succecss);
        }  catch (Exception ex) {
            Log.e(TAG, ""testSetPreferredMicrophoneDirection() exception:"" + ex);
            assertTrue(false);
        }
        return;
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testSetPreferredMicrophoneFieldDimension"	"CtsMediaTestCases"	"2: Microphone microphone"	"([4:/android/media/cts/MediaRecorderTest.java]:[microphone]:[4]:method_text:[ldDimension() exception:"" + ex);            assertTrue(false);        }        return;    }   ]) :|: public void testSetPreferredMicrophoneFieldDimension() {
        if (!hasMicrophone()) {
            return;
        }

        try {
            boolean succecss = mMediaRecorder.setPreferredMicrophoneFieldDimension(1.0f);

            // Can't actually test this as HAL may not have implemented it
            // Just verify that it doesn't crash or throw an exception
            // assertTrue(succecss);
        }  catch (Exception ex) {
            Log.e(TAG, ""testSetPreferredMicrophoneFieldDimension() exception:"" + ex);
            assertTrue(false);
        }
        return;
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testPrivacySensitive"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaRecorderTest.java]:[microphone]:[2]:method_text:[cyOn, mMediaRecorder.isPrivacySensitive());            mMediaRecorder.reset();        }    }   ]) :|: public void testPrivacySensitive() throws Exception {
        if (!MediaUtils.check(mIsAtLeastR, ""test needs Android 11"")) return;
        if (!hasMicrophone() || !hasAac()) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
            return;
        }
        for (final boolean privacyOn : new boolean[] { false, true} ) {
            mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
            mMediaRecorder.setPrivacySensitive(privacyOn);
            assertEquals(privacyOn, mMediaRecorder.isPrivacySensitive());
            mMediaRecorder.reset();
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRecorderTest"	"testPrivacySensitiveDefaults"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaRecorderTest.java]:[microphone]:[2]:method_text:[udioSource.VOICE_COMMUNICATION);        assertTrue(mMediaRecorder.isPrivacySensitive());    }   ]) :|: public void testPrivacySensitiveDefaults() throws Exception {
        if (!MediaUtils.check(mIsAtLeastR, ""test needs Android 11"")) return;
        if (!hasMicrophone() || !hasAac()) {
            MediaUtils.skipTest(""no audio codecs or microphone"");
            return;
        }
        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        assertFalse(mMediaRecorder.isPrivacySensitive());
        mMediaRecorder.reset();

        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.VOICE_COMMUNICATION);
        assertTrue(mMediaRecorder.isPrivacySensitive());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaSyncEventTest"	"testSynchronizedRecord"	"CtsMediaTestCases"	"4: silent Microphone microphone silently"	"([1:/android/media/cts/MediaSyncEventTest.java]:[silently]:[1]:method_text:[-----------------------------    // Parcelable tests    // ----------------------------------   ]) :|: 
    public void testSynchronizedRecord() throws Exception {
        if (!hasMicrophone()) {
            return;
        }

        final String TEST_NAME = ""testSynchronizedRecord"";
        AudioTrack track = null;
        AudioRecord record = null;

        try {
            // 1. create a static AudioTrack.
            final int PLAYBACK_TIME_IN_MS = 2000; /* ms duration. */
            final int PLAYBACK_SAMPLE_RATE = 8000; /* in hz */
            AudioFormat format = new AudioFormat.Builder()
                    .setChannelMask(AudioFormat.CHANNEL_OUT_MONO)
                    .setEncoding(AudioFormat.ENCODING_PCM_8BIT)
                    .setSampleRate(PLAYBACK_SAMPLE_RATE)
                    .build();
            final int frameCount = AudioHelper.frameCountFromMsec(PLAYBACK_TIME_IN_MS, format);
            final int frameSize = AudioHelper.frameSizeFromFormat(format);
            track = new AudioTrack.Builder()
                    .setAudioFormat(format)
                    .setBufferSizeInBytes(frameCount * frameSize)
                    .setTransferMode(AudioTrack.MODE_STATIC)
                    .build();
            // create float array and write it
            final int sampleCount = frameCount * format.getChannelCount();
            byte[] vab = AudioHelper.createSoundDataInByteArray(
                    sampleCount, PLAYBACK_SAMPLE_RATE, 600 /* frequency */, 0 /* sweep */);
            assertEquals(TEST_NAME, vab.length,
                    track.write(vab, 0 /* offsetInBytes */, vab.length,
                            AudioTrack.WRITE_NON_BLOCKING));
            final int trackSessionId = track.getAudioSessionId();

            // 2. create an AudioRecord to sync off of AudioTrack completion.
            final int RECORD_TIME_IN_MS = 2000;
            final int RECORD_ENCODING = AudioFormat.ENCODING_PCM_16BIT;
            final int RECORD_CHANNEL_MASK = AudioFormat.CHANNEL_IN_STEREO;
            final int RECORD_SAMPLE_RATE = 44100;
            r"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaSyncEventTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaSyncEventTest"	"testParcelableWriteToParcelCreate"	"CtsMediaTestCases"	"2: Microphone microphone"	"([2:/android/media/cts/MediaSyncEventTest.java]:[microphone]:[2]:method_text:[ackageManager().hasSystemFeature(                PackageManager.FEATURE_AUDIO_LOW_LATENCY);    }}]) :|: 
    public void testParcelableWriteToParcelCreate() throws Exception {
        final MediaSyncEvent srcEvent =
                MediaSyncEvent.createEvent(MediaSyncEvent.SYNC_EVENT_PRESENTATION_COMPLETE);
        assertNotNull(""Failure to create the MediaSyncEvent"", srcEvent);
        AudioManager am =
                InstrumentationRegistry.getTargetContext().getSystemService(AudioManager.class);
        srcEvent.setAudioSessionId(am.generateAudioSessionId());

        final Parcel srcParcel = Parcel.obtain();
        final Parcel dstParcel = Parcel.obtain();
        final byte[] mbytes;

        srcEvent.writeToParcel(srcParcel, 0 /*no public flags for marshalling*/);
        mbytes = srcParcel.marshall();
        dstParcel.unmarshall(mbytes, 0, mbytes.length);
        dstParcel.setDataPosition(0);
        final MediaSyncEvent targetEvent = MediaSyncEvent.CREATOR.createFromParcel(dstParcel);

        assertEquals(""Marshalled/restored type doesn't match"",
                srcEvent.getType(), targetEvent.getType());
        assertEquals(""Marshalled/restored session doesn't match"",
                srcEvent.getAudioSessionId(), targetEvent.getAudioSessionId());
    }

    private boolean hasMicrophone() {
        return InstrumentationRegistry.getTargetContext().getPackageManager().hasSystemFeature(
                PackageManager.FEATURE_MICROPHONE);
    }

    private boolean isLowLatencyDevice() {
        return InstrumentationRegistry.getTargetContext().getPackageManager().hasSystemFeature(
                PackageManager.FEATURE_AUDIO_LOW_LATENCY);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaSyncEventTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaRouter2Test"	"testGettingSystemMediaRouter2WithoutPermissionThrowsSecurityException"	"CtsMediaTestCases"	"1: granted"	"([1:/android/media/cts/MediaRouter2Test.java]:[granted]:[1]:method_text:[ss,                () -> MediaRouter2.getInstance(mContext, mContext.getPackageName()));    }   ]) :|: 
    public void testGettingSystemMediaRouter2WithoutPermissionThrowsSecurityException() {
        // Make sure that the permission is not given.
        assertNotEquals(PackageManager.PERMISSION_GRANTED,
                mContext.checkSelfPermission(Manifest.permission.MEDIA_CONTENT_CONTROL));

        assertThrows(SecurityException.class,
                () -> MediaRouter2.getInstance(mContext, mContext.getPackageName()));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRouter2Test.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.DecoderTestXheAac"	"testDecodeUsacSyncSampleSeekingM4a"	"CtsMediaTestCases"	"1: silent"	"([1:/android/media/cts/DecoderTestXheAac.java]:[silent]:[1]:method_text:[  decoderName, runtimeChange, expectedOutputLoudness, false, 0, 0);        return decoded;    }}]) :|: 
    public void testDecodeUsacSyncSampleSeekingM4a() throws Exception {
        Log.v(TAG, ""START testDecodeUsacSyncSampleSeekingM4a"");
        if(!sIsAndroidRAndAbove) {
            // The fix for b/158471477 was released in mainline release 300802800
            // See https://android-build.googleplex.com/builds/treetop/googleplex-android-review/11990700
            final int MIN_VERSION = 300802800;
            TestUtils.assumeMainlineModuleAtLeast(""com.google.android.media.swcodec"", MIN_VERSION);
            TestUtils.assumeMainlineModuleAtLeast(""com.google.android.media"", MIN_VERSION);
        }

        assertTrue(""No AAC decoder found"", sAacDecoderNames.size() > 0);

        for (String aacDecName : sAacDecoderNames) {
            try {
                runDecodeUsacSyncSampleSeekingM4a(aacDecName);
            } catch (Error err) {
                throw new Error(err.getMessage() + "" [dec="" + aacDecName + ""]"" , err);
            }
        }
    }

    private void runDecodeUsacSyncSampleSeekingM4a(String aacDecName) throws Exception {
        Log.v(TAG, ""testDecodeUsacSyncSampleSeekingM4a running for dec="" + aacDecName);
        // test usac seeking
        try {
            checkUsacSyncSampleSeeking(R.raw.sine_2ch_48khz_aot42_seek_mp4, aacDecName);
        } catch (Exception e) {
            Log.v(TAG, ""testDecodeUsacSyncSampleSeekingM4a failed for dec="" + aacDecName);
            throw new RuntimeException(e);
        }
        Log.v(TAG, ""testDecodeUsacSyncSampleSeekingM4a running for dec="" + aacDecName);
    }

    /**
     *  Internal utilities
     */

    /**
     * USAC test DRC Effect Type
     */
    private void checkUsacDrcEffectType(int effectTypeID, float normFactor_L, float normFactor_R,
                 String effectTypeName, int nCh, int aggressiveDrc, String decoderName)
                         throws Exception {
        for (boolean runtimeChange : new boolean[] {false, true}) {
            if (runtimeChange && !sIsAndroidRAndAbove) {"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestXheAac.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.EnumDevicesTest"	"test_getDevices"	"CtsMediaTestCases"	"1: microphone"	"([2:/android/media/cts/EnumDevicesTest.java]:[microphone]:[2]:method_text:[         assertTrue(deviceList.length == (numOutputDevices + numInputDevices));        }    }   ]) :|: public void test_getDevices() {
        AudioDeviceInfo[] deviceList;

        // test an empty flags set
        deviceList = mAudioManager.getDevices(0);
        assertTrue(deviceList != null);
        assertTrue(deviceList.length == 0);

        PackageManager pkgMgr = mContext.getPackageManager();

        boolean isTvDevice = DeviceUtils.isTVDevice(mContext);

        int numOutputDevices = 0;
        if (pkgMgr.hasSystemFeature(PackageManager.FEATURE_AUDIO_OUTPUT)) {
            // test OUTPUTS
            deviceList = mAudioManager.getDevices(AudioManager.GET_DEVICES_OUTPUTS);
            assertTrue(deviceList != null);

            numOutputDevices = deviceList.length;
            if (numOutputDevices == 0) {
                boolean isHDMIConnected = DeviceUtils.isHDMIConnected(mContext);
                if (isTvDevice && !isHDMIConnected) {
                    Log.w(TAG, ""getDevices test: failure due to missing reported output "" +
                               ""or the test is run on a TV device with no HDMI connected"");
                }
                assertTrue(""getDevices test: failure due to missing HDMI connection "" +
                           ""or missing output"", false);
            }

            // any reported output devices should be ""sinks""
            for(int index = 0; index < numOutputDevices; index++) {
                assertTrue(deviceList[index].isSink());
            }
        }

        int numInputDevices = 0;
        if (pkgMgr.hasSystemFeature(PackageManager.FEATURE_MICROPHONE)) {
            // test INPUTS
            deviceList = mAudioManager.getDevices(AudioManager.GET_DEVICES_INPUTS);
            assertTrue(deviceList != null);

            numInputDevices = deviceList.length;
            assertTrue(numInputDevices != 0);

            // all should be ""sources""
            for(int index = 0; index < numInputDevices; index++) {
                assertTrue(deviceList[index].isSource());
            }
        }

        // INPUTS &"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/EnumDevicesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.EncoderTest"	"testAACEncoders"	"CtsMediaTestCases"	"1: silent"	"([3:/android/media/cts/EncoderTest.java]:[silent]:[3]:method_text:[            muxer.stop();            muxer.release();            muxer = null;        }    }}]) :|: public void testAACEncoders() {
        LinkedList<MediaFormat> formats = new LinkedList<MediaFormat>();

        final int kAACProfiles[] = {
            2 /* OMX_AUDIO_AACObjectLC */,
            5 /* OMX_AUDIO_AACObjectHE */,
            39 /* OMX_AUDIO_AACObjectELD */
        };

        final int kSampleRates[] = { 8000, 11025, 22050, 44100, 48000 };
        final int kBitRates[] = { 64000, 128000 };

        for (int k = 0; k < kAACProfiles.length; ++k) {
            for (int i = 0; i < kSampleRates.length; ++i) {
                if (kAACProfiles[k] == 5 && kSampleRates[i] < 22050) {
                    // Is this right? HE does not support sample rates < 22050Hz?
                    continue;
                }
                for (int j = 0; j < kBitRates.length; ++j) {
                    for (int ch = 1; ch <= 2; ++ch) {
                        MediaFormat format  = new MediaFormat();
                        format.setString(MediaFormat.KEY_MIME, MediaFormat.MIMETYPE_AUDIO_AAC);

                        format.setInteger(
                                MediaFormat.KEY_AAC_PROFILE, kAACProfiles[k]);

                        format.setInteger(
                                MediaFormat.KEY_SAMPLE_RATE, kSampleRates[i]);

                        format.setInteger(MediaFormat.KEY_CHANNEL_COUNT, ch);
                        format.setInteger(MediaFormat.KEY_BIT_RATE, kBitRates[j]);
                        formats.push(format);
                    }
                }
            }
        }

        testEncoderWithFormats(MediaFormat.MIMETYPE_AUDIO_AAC, formats);
    }

    private void testEncoderWithFormatsParallel(String mime, List<MediaFormat> formats,
            List<String> componentNames, int ThreadCount) {
        int testsStarted = 0;
        int totalDurationSeconds = 0;
        ExecutorService pool = Executors.newFixedThreadPool(ThreadCount);

        for (String componentName : componentNames) {
            for (MediaFormat format : formats) {"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/EncoderTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.DecodeEditEncodeTest"	"testVideoEdit720p"	"CtsMediaTestCases"	"2: silent silently"	"([1:/android/media/cts/DecodeEditEncodeTest.java]:[silently]:[1]:method_text:[                  throw new RuntimeException(ioe);                }            }        }    }}]) :|: public void testVideoEdit720p() throws Throwable {
        setParameters(1280, 720, 6000000);
        VideoEditWrapper.runTest(this);
    }

    /**
     * Wraps testEditVideo, running it in a new thread.  Required because of the way
     * SurfaceTexture.OnFrameAvailableListener works when the current thread has a Looper
     * configured.
     */
    private static class VideoEditWrapper implements Runnable {
        private Throwable mThrowable;
        private DecodeEditEncodeTest mTest;

        private VideoEditWrapper(DecodeEditEncodeTest test) {
            mTest = test;
        }

        @Override
        public void run() {
            try {
                mTest.videoEditTest();
            } catch (Throwable th) {
                mThrowable = th;
            }
        }

        /** Entry point. */
        public static void runTest(DecodeEditEncodeTest obj) throws Throwable {
            VideoEditWrapper wrapper = new VideoEditWrapper(obj);
            Thread th = new Thread(wrapper, ""codec test"");
            th.start();
            th.join();
            if (wrapper.mThrowable != null) {
                throw wrapper.mThrowable;
            }
        }
    }

    /**
     * Sets the desired frame size and bit rate.
     */
    private void setParameters(int width, int height, int bitRate) {
        if ((width % 16) != 0 || (height % 16) != 0) {
            Log.w(TAG, ""WARNING: width or height not multiple of 16"");
        }
        mWidth = width;
        mHeight = height;
        mBitRate = bitRate;
    }

    /**
     * Tests editing of a video file with GL.
     */
    private void videoEditTest()
            throws IOException {
        VideoChunks sourceChunks = new VideoChunks();

        if (!generateVideoFile(sourceChunks)) {
            // No AVC codec?  Fail silently.
            return;
        }

        if (DEBUG_SAVE_FILE) {
            // Save a copy to a file.  We call it "".mp4"", but it's actually just an elementary
            // str"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecodeEditEncodeTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaCodecListTest"	"testRequiredMediaCodecList"	"CtsMediaTestCases"	"2: Microphone microphone"	"([3:/android/media/cts/MediaCodecListTest.java]:[microphone]:[3]:method_text:[IMETYPE_VIDEO_H263, true)); // h263 encoder            }        }        return list;    }   ]) :|: public void testRequiredMediaCodecList() {
        List<CodecType> requiredList = getRequiredCodecTypes();
        List<CodecType> supportedList = getSupportedCodecTypes();
        assertTrue(areRequiredCodecTypesSupported(requiredList, supportedList));
        for (CodecType type : requiredList) {
            assertTrue(""cannot find "" + type, type.canBeFound());
        }
    }

    private boolean hasCamera() {
        PackageManager pm = getContext().getPackageManager();
        return pm.hasSystemFeature(pm.FEATURE_CAMERA_FRONT) ||
                pm.hasSystemFeature(pm.FEATURE_CAMERA);
    }

    private boolean hasMicrophone() {
        PackageManager pm = getContext().getPackageManager();
        return pm.hasSystemFeature(pm.FEATURE_MICROPHONE);
    }

    private boolean isWatch() {
        PackageManager pm = getContext().getPackageManager();
        return pm.hasSystemFeature(pm.FEATURE_WATCH);
    }

    private boolean isHandheld() {
        // handheld nature is not exposed to package manager, for now
        // we check for touchscreen and NOT watch and NOT tv
        PackageManager pm = getContext().getPackageManager();
        return pm.hasSystemFeature(pm.FEATURE_TOUCHSCREEN)
                && !pm.hasSystemFeature(pm.FEATURE_WATCH)
                && !pm.hasSystemFeature(pm.FEATURE_TELEVISION)
                && !pm.hasSystemFeature(pm.FEATURE_AUTOMOTIVE);
    }

    private boolean isAutomotive() {
        PackageManager pm = getContext().getPackageManager();
        return pm.hasSystemFeature(pm.FEATURE_AUTOMOTIVE);
    }

    private boolean isPC() {
        PackageManager pm = getContext().getPackageManager();
        return pm.hasSystemFeature(pm.FEATURE_PC);
    }

    // Find whether the given codec can be found using MediaCodecList.find methods.
    private boolean codecCanBeFound(boolean isEncoder, MediaFormat format) {
        String codecName = isEncoder
                ? mRegularCodecs.findEncoderForFormat(format)
                : mRe"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaCodecListTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.media.cts.MediaCodecListTest"	"testFindEncoderWithAacProfile"	"CtsMediaTestCases"	"2: Microphone microphone"	"([1:/android/media/cts/MediaCodecListTest.java]:[microphone]:[1]:method_text:[        assertNotNull(""Profile "" + profile + "" must be supported."", codecName);        }    }   ]) :|: public void testFindEncoderWithAacProfile() throws Exception {
        Log.d(TAG, ""testFindEncoderWithAacProfile"");
        MediaFormat format = MediaFormat.createAudioFormat(
                MediaFormat.MIMETYPE_AUDIO_AAC, 8000, 1);
        List<Integer> profiles = new ArrayList<>();
        if (hasMicrophone() && !isWatch()) {
            profiles.add(MediaCodecInfo.CodecProfileLevel.AACObjectLC);
            // The API is added at 5.0, so the profiles below must be supported.
            profiles.add(MediaCodecInfo.CodecProfileLevel.AACObjectHE);
            profiles.add(MediaCodecInfo.CodecProfileLevel.AACObjectELD);
        }
        for (int profile : profiles) {
            format.setInteger(MediaFormat.KEY_AAC_PROFILE, profile);
            String codecName = mRegularCodecs.findEncoderForFormat(format);
            assertNotNull(""Profile "" + profile + "" must be supported."", codecName);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaCodecListTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.net.cts.network.permission.UpdateStatsPermissionTest"	"testUpdateDeviceStatsPermission"	"CtsNetTestCases"	"3: granted silent silently"	"([1:/android/net/cts/network/permission/UpdateStatsPermissionTest.java]:[silently]:[1]:method_text:[ission:     *   {@link android.Manifest.permission#UPDATE_DEVICE_STATS}.     */    @SmallTest   ]) :|: 
    public void testUpdateDeviceStatsPermission() throws Exception {

        // Set the current thread uid to a another uid. It should silently fail when tagging the
        // socket since the current process doesn't have UPDATE_DEVICE_STATS permission.
        TrafficStats.setThreadStatsTag(0);
        TrafficStats.setThreadStatsUid(/*root uid*/ 0);
        Socket socket = new Socket(""example.com"", 80);
        TrafficStats.tagSocket(socket);

        // Transfer 1K of data to a remote host and verify the stats is still billed to the current
        // uid.
        final int byteCount = 1024;

        socket.setTcpNoDelay(true);
        socket.setSoLinger(true, 0);
        OutputStream out = socket.getOutputStream();
        byte[] buf = new byte[byteCount];
        final long uidTxBytesBefore = TrafficStats.getUidTxBytes(Process.myUid());
        out.write(buf);
        out.close();
        socket.close();
        long uidTxBytesAfter = TrafficStats.getUidTxBytes(Process.myUid());
        long uidTxDeltaBytes = uidTxBytesAfter - uidTxBytesBefore;
        assertTrue(""uidtxb: "" + uidTxBytesBefore + "" -> "" + uidTxBytesAfter + "" delta=""
                + uidTxDeltaBytes + "" >= "" + byteCount, uidTxDeltaBytes >= byteCount);
    }

    static final int UNSUPPORTED = -1;

    /**
     * Verify that get TrafficStats of a different uid failed because of the permission is not
     * granted to a third-party app.
     * <p>Tests Permission:
     *   {@link android.Manifest.permission#UPDATE_DEVICE_STATS}.
     */
    @SmallTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/netpermission/updatestatspermission/src/android/net/cts/network/permission/UpdateStatsPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.sdk28.cts.CellInfoTest"	"isCamped"	"CtsTelephonySdk28TestCases"	"2: granted ACCESS_COARSE_LOCATION"	"([1:/android/telephony/sdk28/cts/CellInfoTest.java]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[                      == android.content.pm.PackageManager.PERMISSION_GRANTED);        }    }   ]) :|: /*
 *.
 */

package android.telephony.sdk28.cts;

import static androidx.test.InstrumentationRegistry.getContext;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import android.content.Context;
import android.content.pm.PackageManager;
import android.telephony.AccessNetworkConstants;
import android.telephony.CellInfo;
import android.telephony.NetworkRegistrationInfo;
import android.telephony.ServiceState;
import android.telephony.TelephonyManager;
import android.util.Log;

import com.android.compatibility.common.util.ShellIdentityUtils;

import org.junit.Before;
import org.junit.Test;

import java.util.List;

public class CellInfoTest {
    private static final String TAG = ""CellInfoTest"";

    private static final int MAX_WAIT_SECONDS = 15;
    private static final int POLL_INTERVAL_MILLIS = 1000;

    private static final String[] sPermissions = new String[] {
            android.Manifest.permission.READ_PHONE_STATE,
            android.Manifest.permission.ACCESS_COARSE_LOCATION};

    private TelephonyManager mTm;
    private PackageManager mPm;

    private boolean isCamped() {
        ServiceState ss = ShellIdentityUtils.invokeMethodWithShellPermissions(
                mTm, TelephonyManager::getServiceState);

        if (ss == null) return false;
        if (ss.getState() == ServiceState.STATE_EMERGENCY_ONLY) return true;
        List<NetworkRegistrationInfo> nris = ss.getNetworkRegistrationInfoList();
        for (NetworkRegistrationInfo nri : nris) {
            if (nri.getTransportType() != AccessNetworkConstants.TRANSPORT_TYPE_WWAN) continue;
            if (nri.isRegistered()) return true;
        }
        return false;
    }

    @Before
    public void setUp() throws Exception {
        mTm = (TelephonyManager) getContext().getSystemService(Context.TELEPHONY_SERVICE);
        mPm = getContext().getPackageManager();

        for ("	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/sdk28/src/android/telephony/sdk28/cts/CellInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.SmsManagerTest"	"testGetSmsMessagesForFinancialAppPermissionRequestedNotGranted"	"CtsTelephonyTestCases"	"1: granted"	"([1:/android/telephony/cts/SmsManagerTest.java]:[granted]:[1]:method_text:[startsWith(FINANCIAL_SMS_APP));        assertThat(bundle.getInt(""rowNum""), equalTo(-1));    }   ]) :|: 
    public void testGetSmsMessagesForFinancialAppPermissionRequestedNotGranted() throws Exception {
        CompletableFuture<Bundle> callbackResult = new CompletableFuture<>();

        mContext.startActivity(new Intent()
                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                .setComponent(new ComponentName(FINANCIAL_SMS_APP, FINANCIAL_SMS_APP + "".MainActivity""))
                .putExtra(""callback"", new RemoteCallback(callbackResult::complete)));

        Bundle bundle = callbackResult.get(500, TimeUnit.SECONDS);

        assertThat(bundle.getString(""class""), startsWith(FINANCIAL_SMS_APP));
        assertThat(bundle.getInt(""rowNum""), equalTo(-1));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SmsManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.SmsManagerTest"	"testGetSmsMessagesForFinancialAppPermissionRequestedGranted"	"CtsTelephonyTestCases"	"1: granted"	"([1:/android/telephony/cts/SmsManagerTest.java]:[granted]:[1]:method_text:[startsWith(FINANCIAL_SMS_APP));        assertThat(bundle.getInt(""rowNum""), equalTo(-1));    }   ]) :|: 
    public void testGetSmsMessagesForFinancialAppPermissionRequestedGranted() throws Exception {
        CompletableFuture<Bundle> callbackResult = new CompletableFuture<>();
        String ctsPackageName = getInstrumentation().getContext().getPackageName();

        executeWithShellPermissionIdentity(() -> {
            setModeForOps(FINANCIAL_SMS_APP,
                    AppOpsManager.MODE_ALLOWED,
                    AppOpsManager.OPSTR_SMS_FINANCIAL_TRANSACTIONS);
            });
        mContext.startActivity(new Intent()
                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                .setComponent(new ComponentName(FINANCIAL_SMS_APP, FINANCIAL_SMS_APP + "".MainActivity""))
                .putExtra(""callback"", new RemoteCallback(callbackResult::complete)));


        Bundle bundle = callbackResult.get(500, TimeUnit.SECONDS);

        assertThat(bundle.getString(""class""), startsWith(FINANCIAL_SMS_APP));
        assertThat(bundle.getInt(""rowNum""), equalTo(-1));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SmsManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.TelephonyLocationTests"	"testCellLocationFinePermission"	"CtsTelephonyTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[AGE, cellLocationAccess,                Manifest.permission.ACCESS_BACKGROUND_LOCATION);    }   ]) :|: 
    public void testCellLocationFinePermission() {
        if (!mShouldTest) return;
        Runnable cellLocationAccess = () -> {
            try {
                Bundle cellLocationBundle = (Bundle) performLocationAccessCommand(
                        CtsLocationAccessService.COMMAND_GET_CELL_LOCATION);
                CellLocation cellLocation = cellLocationBundle == null ? null :
                        CellLocation.newFromBundle(cellLocationBundle);
                assertTrue(cellLocation == null || cellLocation.isEmpty());
            } catch (SecurityException e) {
                // expected
            }

            try {
                List cis = (List) performLocationAccessCommand(
                        CtsLocationAccessService.COMMAND_GET_CELL_INFO);
                assertTrue(cis == null || cis.isEmpty());
            } catch (SecurityException e) {
                // expected
            }
        };

        withRevokedPermission(LOCATION_ACCESS_APP_CURRENT_PACKAGE,
                cellLocationAccess, Manifest.permission.ACCESS_FINE_LOCATION);
        withRevokedPermission(LOCATION_ACCESS_APP_CURRENT_PACKAGE, cellLocationAccess,
                Manifest.permission.ACCESS_BACKGROUND_LOCATION);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyLocationTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.TelephonyLocationTests"	"testServiceStateLocationSanitization"	"CtsTelephonyTestCases"	"2: ACCESS_BACKGROUND_LOCATION ACCESS_COARSE_LOCATION"	"([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[lse);                },                Manifest.permission.ACCESS_BACKGROUND_LOCATION);    }   ]) :|: 
    public void testServiceStateLocationSanitization() {
        if (!mShouldTest) return;

        withRevokedPermission(LOCATION_ACCESS_APP_CURRENT_PACKAGE, () -> {
                    ServiceState ss = (ServiceState) performLocationAccessCommand(
                            CtsLocationAccessService.COMMAND_GET_SERVICE_STATE);
                    assertServiceStateSanitization(ss, true);

                    withRevokedPermission(LOCATION_ACCESS_APP_CURRENT_PACKAGE, () -> {
                                ServiceState ss1 = (ServiceState) performLocationAccessCommand(
                                        CtsLocationAccessService.COMMAND_GET_SERVICE_STATE);
                                assertServiceStateSanitization(ss1, false);
                            },
                            Manifest.permission.ACCESS_COARSE_LOCATION);
                },
                Manifest.permission.ACCESS_FINE_LOCATION);

        withRevokedPermission(LOCATION_ACCESS_APP_CURRENT_PACKAGE, () -> {
                    ServiceState ss1 = (ServiceState) performLocationAccessCommand(
                            CtsLocationAccessService.COMMAND_GET_SERVICE_STATE);
                    assertServiceStateSanitization(ss1, false);
                },
                Manifest.permission.ACCESS_BACKGROUND_LOCATION);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyLocationTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.TelephonyLocationTests"	"testServiceStateListeningWithoutPermissions"	"CtsTelephonyTestCases"	"2: ACCESS_BACKGROUND_LOCATION ACCESS_COARSE_LOCATION"	"([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[lse);                },                Manifest.permission.ACCESS_BACKGROUND_LOCATION);    }   ]) :|: 
    public void testServiceStateListeningWithoutPermissions() {
        if (!mShouldTest) return;

        withRevokedPermission(LOCATION_ACCESS_APP_CURRENT_PACKAGE, () -> {
                    ServiceState ss = (ServiceState) performLocationAccessCommand(
                            CtsLocationAccessService.COMMAND_GET_SERVICE_STATE_FROM_LISTENER);
                    assertServiceStateSanitization(ss, true);

                    withRevokedPermission(LOCATION_ACCESS_APP_CURRENT_PACKAGE, () -> {
                                ServiceState ss1 = (ServiceState) performLocationAccessCommand(
                                        CtsLocationAccessService
                                                .COMMAND_GET_SERVICE_STATE_FROM_LISTENER);
                                assertServiceStateSanitization(ss1, false);
                            },
                            Manifest.permission.ACCESS_COARSE_LOCATION);
                },
                Manifest.permission.ACCESS_FINE_LOCATION);

        withRevokedPermission(LOCATION_ACCESS_APP_CURRENT_PACKAGE, () -> {
                    ServiceState ss1 = (ServiceState) performLocationAccessCommand(
                            CtsLocationAccessService
                                    .COMMAND_GET_SERVICE_STATE_FROM_LISTENER);
                    assertServiceStateSanitization(ss1, false);
                },
                Manifest.permission.ACCESS_BACKGROUND_LOCATION);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyLocationTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.TelephonyLocationTests"	"testRegistryPermissionsForCellLocation"	"CtsTelephonyTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[ion);                },                Manifest.permission.ACCESS_BACKGROUND_LOCATION);    }   ]) :|: 
    public void testRegistryPermissionsForCellLocation() {
        if (!mShouldTest) return;

        withRevokedPermission(LOCATION_ACCESS_APP_CURRENT_PACKAGE, () -> {
                    CellLocation cellLocation = (CellLocation) performLocationAccessCommand(
                            CtsLocationAccessService.COMMAND_LISTEN_CELL_LOCATION);
                    assertNull(cellLocation);
                },
                Manifest.permission.ACCESS_FINE_LOCATION);

        withRevokedPermission(LOCATION_ACCESS_APP_CURRENT_PACKAGE, () -> {
                    CellLocation cellLocation = (CellLocation) performLocationAccessCommand(
                            CtsLocationAccessService.COMMAND_LISTEN_CELL_LOCATION);
                    assertNull(cellLocation);
                },
                Manifest.permission.ACCESS_BACKGROUND_LOCATION);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyLocationTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.TelephonyLocationTests"	"testRegistryPermissionsForCellInfo"	"CtsTelephonyTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[ion);                },                Manifest.permission.ACCESS_BACKGROUND_LOCATION);    }   ]) :|: 
    public void testRegistryPermissionsForCellInfo() {
        if (!mShouldTest) return;

        withRevokedPermission(LOCATION_ACCESS_APP_CURRENT_PACKAGE, () -> {
                    CellLocation cellLocation = (CellLocation) performLocationAccessCommand(
                            CtsLocationAccessService.COMMAND_LISTEN_CELL_INFO);
                    assertNull(cellLocation);
                },
                Manifest.permission.ACCESS_FINE_LOCATION);

        withRevokedPermission(LOCATION_ACCESS_APP_CURRENT_PACKAGE, () -> {
                    CellLocation cellLocation = (CellLocation) performLocationAccessCommand(
                            CtsLocationAccessService.COMMAND_LISTEN_CELL_INFO);
                    assertNull(cellLocation);
                },
                Manifest.permission.ACCESS_BACKGROUND_LOCATION);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyLocationTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.TelephonyLocationTests"	"testSdk28ServiceStateListeningWithoutPermissions"	"CtsTelephonyTestCases"	"1: ACCESS_COARSE_LOCATION"	"([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[_LOCATION);                },                Manifest.permission.ACCESS_FINE_LOCATION);    }   ]) :|: 
    public void testSdk28ServiceStateListeningWithoutPermissions() {
        if (!mShouldTest) return;

        withRevokedPermission(LOCATION_ACCESS_APP_SDK28_PACKAGE, () -> {
                    ServiceState ss = (ServiceState) performLocationAccessCommand(
                            CtsLocationAccessService.COMMAND_GET_SERVICE_STATE_FROM_LISTENER);
                    assertNotNull(ss);
                    assertNotEquals(ss, ss.createLocationInfoSanitizedCopy(false));

                    withRevokedPermission(LOCATION_ACCESS_APP_SDK28_PACKAGE, () -> {
                                ServiceState ss1 = (ServiceState) performLocationAccessCommand(
                                        CtsLocationAccessService
                                                .COMMAND_GET_SERVICE_STATE_FROM_LISTENER);
                                assertNotNull(ss1);
                                assertNotEquals(ss1, ss1.createLocationInfoSanitizedCopy(true));
                            },
                            Manifest.permission.ACCESS_COARSE_LOCATION);
                },
                Manifest.permission.ACCESS_FINE_LOCATION);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyLocationTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.TelephonyLocationTests"	"testSdk28RegistryPermissionsForCellLocation"	"CtsTelephonyTestCases"	"1: ACCESS_COARSE_LOCATION"	"([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[ocation);                },                Manifest.permission.ACCESS_COARSE_LOCATION);    }   ]) :|: 
    public void testSdk28RegistryPermissionsForCellLocation() {
        if (!mShouldTest) return;

        withRevokedPermission(LOCATION_ACCESS_APP_SDK28_PACKAGE, () -> {
                    CellLocation cellLocation = (CellLocation) performLocationAccessCommand(
                            CtsLocationAccessService.COMMAND_LISTEN_CELL_LOCATION);
                    assertNull(cellLocation);
                },
                Manifest.permission.ACCESS_COARSE_LOCATION);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyLocationTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.TelephonyLocationTests"	"testSdk28RegistryPermissionsForCellInfo"	"CtsTelephonyTestCases"	"1: ACCESS_COARSE_LOCATION"	"([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[Empty());                },                Manifest.permission.ACCESS_COARSE_LOCATION);    }   ]) :|: 
    public void testSdk28RegistryPermissionsForCellInfo() {
        if (!mShouldTest) return;

        withRevokedPermission(LOCATION_ACCESS_APP_SDK28_PACKAGE, () -> {
                    List<CellInfo> cis = (List<CellInfo>) performLocationAccessCommand(
                            CtsLocationAccessService.COMMAND_LISTEN_CELL_INFO);
                    assertTrue(cis == null || cis.isEmpty());
                },
                Manifest.permission.ACCESS_COARSE_LOCATION);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyLocationTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.TelephonyLocationTests"	"testSdk28CellLocation"	"CtsTelephonyTestCases"	"1: ACCESS_COARSE_LOCATION"	"([2:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_COARSE_LOCATION]:[2]:method_text:[permission.ACCESS_COARSE_LOCATION);        }, Manifest.permission.ACCESS_FINE_LOCATION);    }   ]) :|: 
    public void testSdk28CellLocation() {
        if (!mShouldTest) return;

        // Verify that a target-sdk 28 app can access cell location with ACCESS_COARSE_LOCATION, but
        // not with no location permissions at all.
        withRevokedPermission(LOCATION_ACCESS_APP_SDK28_PACKAGE, () -> {
            try {
                performLocationAccessCommandSdk28(
                        CtsLocationAccessService.COMMAND_GET_CELL_LOCATION);
            } catch (SecurityException e) {
                fail(""SDK28 should have access to cell location with coarse permission"");
            }

            withRevokedPermission(LOCATION_ACCESS_APP_SDK28_PACKAGE, () -> {
                try {
                    Bundle cellLocationBundle = (Bundle) performLocationAccessCommandSdk28(
                            CtsLocationAccessService.COMMAND_GET_CELL_LOCATION);
                    CellLocation cellLocation = cellLocationBundle == null ? null :
                            CellLocation.newFromBundle(cellLocationBundle);
                    assertTrue(cellLocation == null || cellLocation.isEmpty());
                } catch (SecurityException e) {
                    // expected
                }
            }, Manifest.permission.ACCESS_COARSE_LOCATION);
        }, Manifest.permission.ACCESS_FINE_LOCATION);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyLocationTests.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.TelephonyManagerTest"	"testHasCarrierPrivilegesViaCarrierConfigs"	"CtsTelephonyTestCases"	"2: ACCESS_BACKGROUND_LOCATION ACCESS_COARSE_LOCATION"	"([1:/android/telephony/cts/TelephonyManagerTest.java]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[ uiAutomation.grantRuntimePermission(packageName, permission.ACCESS_BACKGROUND_LOCATION);    }   ]) :|: 
    public void testHasCarrierPrivilegesViaCarrierConfigs() throws Exception {
        if (!hasCellular()) return;
        PersistableBundle carrierConfig = mCarrierConfigManager.getConfigForSubId(mTestSub);

        try {
            assertNotNull(""CarrierConfigManager#getConfigForSubId() returned null"",
                    carrierConfig);
            assertFalse(""CarrierConfigManager#getConfigForSubId() returned empty bundle"",
                    carrierConfig.isEmpty());

            // purge the certs in carrierConfigs first
            carrierConfig.putStringArray(
                    CarrierConfigManager.KEY_CARRIER_CERTIFICATE_STRING_ARRAY, new String[]{});
            overrideCarrierConfig(carrierConfig);
            // verify we don't have privilege through carrierConfigs or Uicc
            assertFalse(mTelephonyManager.hasCarrierPrivileges());

            carrierConfig.putStringArray(
                    CarrierConfigManager.KEY_CARRIER_CERTIFICATE_STRING_ARRAY,
                    new String[]{mSelfCertHash});

            // verify we now have privilege after adding certificate to carrierConfigs
            overrideCarrierConfig(carrierConfig);
            assertTrue(mTelephonyManager.hasCarrierPrivileges());
        } finally {
            // purge the newly added certificate
            carrierConfig.putStringArray(
                    CarrierConfigManager.KEY_CARRIER_CERTIFICATE_STRING_ARRAY, new String[]{});
            // carrierConfig.remove(CarrierConfigManager.KEY_CARRIER_CERTIFICATE_STRING_ARRAY);
            overrideCarrierConfig(carrierConfig);

            // verify we no longer have privilege after removing certificate
            assertFalse(mTelephonyManager.hasCarrierPrivileges());
        }
    }

    private void overrideCarrierConfig(PersistableBundle bundle) throws Exception {
        mReceiver.clearQueue();
        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(mCarrierConfigManager,
                (cm) -> cm.overrid"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.TelephonyManagerTest"	"testListen"	"CtsTelephonyTestCases"	"2: silent silently"	"([1:/android/telephony/cts/TelephonyManagerTest.java]:[silently]:[1]:method_text:[of these information, just make sure they are in right     * condition(>0 or not null).     */   ]) :|: 
    public void testListen() throws Throwable {
        if (!InstrumentationRegistry.getContext().getPackageManager()
                .hasSystemFeature(PackageManager.FEATURE_TELEPHONY)) {
            Log.d(TAG, ""Skipping test that requires PackageManager.FEATURE_TELEPHONY"");
            return;
        }

        if (mTelephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_CDMA) {
            // TODO: temp workaround, need to adjust test to for CDMA
            return;
        }

        grantLocationPermissions();

        TestThread t = new TestThread(new Runnable() {
            public void run() {
                Looper.prepare();
                mListener = new PhoneStateListener() {
                    @Override
                    public void onCellLocationChanged(CellLocation location) {
                        if(!mOnCellLocationChangedCalled) {
                            synchronized (mLock) {
                                mOnCellLocationChangedCalled = true;
                                mLock.notify();
                            }
                        }
                    }
                };

                synchronized (mLock) {
                    mLock.notify(); // mListener is ready
                }

                Looper.loop();
            }
        });

        synchronized (mLock) {
            t.start();
            mLock.wait(TOLERANCE); // wait for mListener
        }

        // Test register
        synchronized (mLock) {
            // .listen generates an onCellLocationChanged event
            mTelephonyManager.listen(mListener, PhoneStateListener.LISTEN_CELL_LOCATION);
            mLock.wait(TOLERANCE);

            assertTrue(""Test register, mOnCellLocationChangedCalled should be true."",
                    mOnCellLocationChangedCalled);
        }

        synchronized (mLock) {
            mOnCellLocationChangedCalled = false;
            CellLocation.requestLocationUpdate();
            mLock.wait(TOLERANCE);"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.TelephonyManagerTest"	"testResetSettings"	"CtsTelephonyTestCases"	"1: UserManager.DISALLOW"	"([1:/android/telephony/cts/TelephonyManagerTest.java]:[UserManager.DISALLOW]:[1]:method_text:[isDataEnabled(),                        5 /*times*/, TOLERANCE/5 /*timeout per poll*/));    }   ]) :|: 
    public void testResetSettings() throws Exception {
        if (!mPackageManager.hasSystemFeature(PackageManager.FEATURE_TELEPHONY)) {
            Log.d(TAG, ""skipping test on device without FEATURE_TELEPHONY present"");
            return;
        }

        UserManager userManager = getContext().getSystemService(UserManager.class);

        boolean canChangeMobileNetworkSettings = userManager != null
                && !userManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS);
        assertTrue(""Primary user must be able to configure mobile networks to pass this test"",
                canChangeMobileNetworkSettings);
        boolean initialDataSetting = isDataEnabled();

        //First check permissions are correct
        try {
            mTelephonyManager.resetSettings();
            fail(""TelephonyManager#resetSettings requires the""
                    + "" android.Manifest.permission.NETWORK_SETTINGS permission"");
        } catch (SecurityException e) {
            //expected
        }
        // and then do a reset to move data to default.
        try {
            ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(mTelephonyManager,
                    TelephonyManager::resetSettings,
                    ""android.permission.NETWORK_SETTINGS"",
                    ""android.permission.MODIFY_PHONE_STATE"");
        } catch (SecurityException e) {
            e.printStackTrace();
            fail(e.toString());
        }
        // This may timeout because the default is equal to the initial data setting, but there is
        // no way to definitively check what the default should be, so assume the default will be
        // set within TOLERANCE time.
        TelephonyUtils.pollUntilTrue(() -> initialDataSetting != isDataEnabled(), 5 /*times*/,
                TOLERANCE/5 /*timeout per poll*/);

        boolean defaultDataSetting = isDataEnabled();

        // set data to not the default!
        ShellIdentityUtils.invokeMethodWit"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.CarrierConfigManagerTest"	"testCarrierConfigNameOverride"	"CtsTelephonyTestCases"	"1: granted"	"([1:/android/telephony/cts/CarrierConfigManagerTest.java]:[granted]:[1]:method_text:[ager.overrideConfig(subId, null);            ui.dropShellPermissionIdentity();        }    }   ]) :|: 
    public void testCarrierConfigNameOverride() throws Exception {
        if (!isSimCardPresent()
                || mTelephonyManager.getServiceState().getState() != STATE_IN_SERVICE) {
            return;
        }

        // Adopt shell permission so the required permission (android.permission.MODIFY_PHONE_STATE)
        // is granted.
        UiAutomation ui = getInstrumentation().getUiAutomation();
        ui.adoptShellPermissionIdentity();

        int subId = SubscriptionManager.getDefaultSubscriptionId();
        TestThread t = new TestThread(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();

                OnSubscriptionsChangedListener listener =
                        new OnSubscriptionsChangedListener() {
                            @Override
                            public void onSubscriptionsChanged() {
                                if (CARRIER_NAME_OVERRIDE.equals(
                                        mTelephonyManager.getSimOperatorName())) {
                                    COUNT_DOWN_LATCH.countDown();
                                }
                            }
                        };
                mSubscriptionManager.addOnSubscriptionsChangedListener(listener);

                PersistableBundle carrierNameOverride = new PersistableBundle(3);
                carrierNameOverride.putBoolean(KEY_CARRIER_NAME_OVERRIDE_BOOL, true);
                carrierNameOverride.putBoolean(KEY_FORCE_HOME_NETWORK_BOOL, true);
                carrierNameOverride.putString(KEY_CARRIER_NAME_STRING, CARRIER_NAME_OVERRIDE);
                mConfigManager.overrideConfig(subId, carrierNameOverride);

                Looper.loop();
            }
        });

        try {
            t.start();
            boolean didCarrierNameUpdate =
                    COUNT_DOWN_LATCH.await(BROADCAST_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);
            if (!didCarrierNameUpdate) {
                fail(""Car"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CarrierConfigManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.ims.cts.ImsServiceTest"	"testProvisioningManagerConstants"	"CtsTelephonyTestCases"	"1: silent"	"([1:/android/telephony/ims/cts/ImsServiceTest.java]:[silent]:[1]:method_text:[llback);        } finally {            automan.dropShellPermissionIdentity();        }    }   ]) :|: 
    public void testProvisioningManagerConstants() throws Exception {
        if (!ImsUtils.shouldTestImsService()) {
            return;
        }

        triggerFrameworkConnectToCarrierImsService();

        ProvisioningManager provisioningManager =
                ProvisioningManager.createForSubscriptionId(sTestSub);

        // This is a little bit gross looking, but on P devices, I can not define classes that
        // extend ProvisioningManager.Callback (because it doesn't exist), so this has to
        // happen as an anon class here.
        LinkedBlockingQueue<Pair<Integer, Integer>> mIntQueue = new LinkedBlockingQueue<>();
        LinkedBlockingQueue<Pair<Integer, String>> mStringQueue = new LinkedBlockingQueue<>();
        ProvisioningManager.Callback callback = new ProvisioningManager.Callback() {
            @Override
            public void onProvisioningIntChanged(int item, int value) {
                mIntQueue.offer(new Pair<>(item, value));
            }

            @Override
            public void onProvisioningStringChanged(int item, String value) {
                mStringQueue.offer(new Pair<>(item, value));
            }
        };

        final UiAutomation automan = InstrumentationRegistry.getInstrumentation().getUiAutomation();
        try {
            automan.adoptShellPermissionIdentity();
            provisioningManager.registerProvisioningChangedCallback(getContext().getMainExecutor(),
                    callback);

            verifyStringKey(provisioningManager, mStringQueue,
                    ProvisioningManager.KEY_AMR_CODEC_MODE_SET_VALUES, ""1,2"");
            verifyStringKey(provisioningManager, mStringQueue,
                    ProvisioningManager.KEY_AMR_WB_CODEC_MODE_SET_VALUES, ""1,2"");
            verifyIntKey(provisioningManager, mIntQueue,
                    ProvisioningManager.KEY_SIP_SESSION_TIMER_SEC, 5);
            verifyIntKey(provisioningManager, mIntQueue,
                    ProvisioningManager.KEY_MINIM"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsServiceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.ims.cts.SipDelegateManagerTest"	"testCreateMultipleDelegates"	"CtsTelephonyTestCases"	"1: granted"	"([1:/android/telephony/ims/cts/SipDelegateManagerTest.java]:[granted]:[1]:method_text:[re should be no more delegates"", 0,                transportImpl.getDelegates().size());    }   ]) :|: 
    public void testCreateMultipleDelegates() throws Exception {
        if (!ImsUtils.shouldTestImsService()) {
            return;
        }
        assertTrue(sServiceConnector.setDefaultSmsApp());
        connectTestImsServiceWithSipTransportAndConfig();
        TestSipTransport transportImpl = sServiceConnector.getCarrierService().getSipTransport();
        TestImsRegistration regImpl = sServiceConnector.getCarrierService().getImsRegistration();
        SipDelegateManager manager = getSipDelegateManager();

        DelegateRequest request1 = getChatOnlyRequest();
        TestSipDelegateConnection delegateConn1 = new TestSipDelegateConnection(request1);
        Set<String> registeredTags1 = new ArraySet<>(request1.getFeatureTags());
        TestSipDelegate delegate1 = createSipDelegateConnectionAndVerify(manager, delegateConn1,
                transportImpl, Collections.emptySet(), 0);
        assertNotNull(delegate1);

        InetSocketAddress localAddr = new InetSocketAddress(
                InetAddresses.parseNumericAddress(""1.1.1.1""), 80);
        InetSocketAddress serverAddr = new InetSocketAddress(
                InetAddresses.parseNumericAddress(""2.2.2.2""), 81);
        SipDelegateConfiguration c = new SipDelegateConfiguration.Builder(1,
                SipDelegateConfiguration.SIP_TRANSPORT_TCP, localAddr, serverAddr).build();
        verifyRegisteredAndSendSipConfig(delegateConn1, delegate1, registeredTags1,
                Collections.emptySet(), c);

        // This will only be granted File transfer FT
        DelegateRequest request2 = getDefaultRequest();
        TestSipDelegateConnection delegateConn2 = new TestSipDelegateConnection(request2);
        Set<String> registeredTags2 = new ArraySet<>();
        registeredTags2.add(FILE_TRANSFER_HTTP_TAG);
        TestSipDelegate delegate2 = createSipDelegateConnectionAndVerify(manager, delegateConn2,
                transportImpl, Collections.emptySet(), 1);
        assertNotNull(delegate2);"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/SipDelegateManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.ims.cts.SipDelegateManagerTest"	"testCreateDelegateMessagingAppChangesToApp"	"CtsTelephonyTestCases"	"1: granted"	"([1:/android/telephony/ims/cts/SipDelegateManagerTest.java]:[granted]:[1]:method_text:[re should be no more delegates"", 0,                transportImpl.getDelegates().size());    }   ]) :|: 
    public void testCreateDelegateMessagingAppChangesToApp() throws Exception {
        if (!ImsUtils.shouldTestImsService()) {
            return;
        }
        // start with no features granted
        connectTestImsServiceWithSipTransportAndConfig();

        TestSipTransport transportImpl = sServiceConnector.getCarrierService().getSipTransport();
        TestImsRegistration regImpl = sServiceConnector.getCarrierService().getImsRegistration();
        SipDelegateManager manager = getSipDelegateManager();
        DelegateRequest request = getDefaultRequest();
        TestSipDelegateConnection delegateConn = new TestSipDelegateConnection(request);

        // wait for onCreated and registration state change to be called.
        createSipDelegateConnectionNoDelegateExpected(manager, delegateConn, transportImpl);

        // Make this app the DMA
        regImpl.resetLatch(TestImsRegistration.LATCH_TRIGGER_DEREGISTRATION, 1);
        assertTrue(sServiceConnector.setDefaultSmsApp());
        assertTrue(regImpl.waitForLatchCountDown(TestImsRegistration.LATCH_TRIGGER_DEREGISTRATION,
                ImsUtils.TEST_TIMEOUT_MS));
        TestSipDelegate delegate = getSipDelegate(transportImpl, Collections.emptySet(), 0);
        verifyUpdateRegistrationCalled(regImpl);
        InetSocketAddress localAddr = new InetSocketAddress(
                InetAddresses.parseNumericAddress(""1.1.1.1""), 80);
        InetSocketAddress serverAddr = new InetSocketAddress(
                InetAddresses.parseNumericAddress(""2.2.2.2""), 81);
        SipDelegateConfiguration c = new SipDelegateConfiguration.Builder(1,
                SipDelegateConfiguration.SIP_TRANSPORT_TCP, localAddr, serverAddr).build();
        verifyRegisteredAndSendSipConfig(delegateConn, delegate, request.getFeatureTags(),
                Collections.emptySet(), c);
        destroySipDelegateAndVerifyConnDestroyed(manager, transportImpl, delegateConn, delegate);
        assertEquals(""There should be no more delegat"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/SipDelegateManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.ims.cts.SipDelegateManagerTest"	"testIncomingInviteDeregistering"	"CtsTelephonyTestCases"	"1: granted"	"([4:/android/telephony/ims/cts/SipDelegateManagerTest.java]:[granted]:[4]:method_text:[ext getContext() {        return InstrumentationRegistry.getInstrumentation().getContext();    }}]) :|: 
    public void testIncomingInviteDeregistering() throws Exception {
        if (!ImsUtils.shouldTestImsService()) {
            return;
        }
        TransportInterfaces ifaces = new TransportInterfaces(getDefaultRequest(),
                Collections.emptySet(), 0);
        ifaces.connect();
        // move chat to deregistering
        Set<String> regFeatures = new ArraySet<>(Arrays.asList(DEFAULT_FEATURE_TAGS));
        regFeatures.remove(ONE_TO_ONE_CHAT_TAG);
        DelegateRegistrationState state = getDeregisteringState(regFeatures,
                Collections.singleton(ONE_TO_ONE_CHAT_TAG),
                DelegateRegistrationState.DEREGISTERING_REASON_PROVISIONING_CHANGE);
        verifyRegistrationState(ifaces, state);
        // receive invite, which can not be blocked
        SipDialogAttributes attr = new SipDialogAttributes();
        receiveChatInvite(attr, ifaces);
        // ensure delegate connection can still respond to the request, even if in restricted state.
        send200OkResponse(attr, ifaces);
        receiveAck(attr, ifaces);
        // receive BYE and clean up
        receiveByeRequest(attr, ifaces);
        ifaces.delegateConn.sendCleanupSession(attr.callId);
        ifaces.delegate.verifyCleanupSession(attr.callId);

        destroySipDelegateAndVerify(ifaces);
        assertEquals(""There should be no more delegates"", 0,
                ifaces.transport.getDelegates().size());
        verifyUpdateRegistrationCalled(ifaces.reg);
    }

    private SipMessage generateSipMessage(String str) {
        String crlf = ""\r\n"";
        String[] components = str.split(crlf);
        String startLine = """";
        String header = """";
        String content = """";
        StringBuilder sb = new StringBuilder();
        int idx = 1;
        if (components.length > 0) {
            startLine = components[0] + crlf;
        }
        // generate sip header
        idx = composeSipSection(idx, components, sb);
        header = sb.toString();"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/SipDelegateManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony.cts.telephonypermission.TelephonyManagerReadPhoneStatePermissionTest"	"testTelephonyManagersAPIsRequiringReadPhoneStatePermissions"	"CtsTelephonyTestCases"	"1: granted"	"([1:/android/telephony/cts/telephonypermission/TelephonyManagerReadPhoneStatePermissionTest.java]:[granted]:[1]:method_text:[  private static Context getContext() {        return InstrumentationRegistry.getContext();    }}]) :|: 
    public void testTelephonyManagersAPIsRequiringReadPhoneStatePermissions() throws Exception {
        if (!mHasTelephony) {
            return;
        }

        try {
            // We must ensure that compat fwk enables READ_PHONE_STATE enforcement
            TelephonyUtils.enableCompatCommand(InstrumentationRegistry.getInstrumentation(),
                    TelephonyUtils.CTS_APP_PACKAGE,
                    TelephonyUtils.ENABLE_GET_CALL_STATE_PERMISSION_PROTECTION_STRING);
            ShellIdentityUtils.invokeMethodWithShellPermissions(
                    mTelephonyManager, (tm) -> tm.getCallState());
            ShellIdentityUtils.invokeMethodWithShellPermissions(
                    mTelephonyManager, (tm) -> tm.getCallStateForSubscription());
        } catch (SecurityException e) {
            fail(""TelephonyManager#getCallState and TelephonyManager#getCallStateForSubscription ""
                    + ""must not throw a SecurityException because READ_PHONE_STATE permission is ""
                    + ""granted and TelecomManager#ENABLE_GET_CALL_STATE_PERMISSION_PROTECTION is ""
                    + ""enabled."");
        }

        int subId = mTelephonyManager.getSubscriptionId();

        try {
            ShellIdentityUtils.invokeMethodWithShellPermissions(
                    mTelephonyManager, (tm) -> tm.getNetworkType());
        } catch (SecurityException e) {
            fail(""getNetworkType() must not throw a SecurityException with READ_PHONE_STATE"" + e);
        }
        try {
            ShellIdentityUtils.invokeMethodWithShellPermissions(
                    mTelephonyManager, (tm) -> tm.getDeviceSoftwareVersion());
        } catch (SecurityException e) {
            fail(""getDeviceSoftwareVersion() must not throw a SecurityException""
                    + "" with READ_PHONE_STATE"" + e);
        }
        try {
            ShellIdentityUtils.invokeMethodWithShellPermissions(
                    mTelephonyManager, (tm) -> tm.getCarrierConfig());"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/permissions/src/android/telephony/cts/telephonypermission/TelephonyManagerReadPhoneStatePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.car.cts.permissionreadcardisplayunits.PermissionReadCarDisplayUnitsTest"	"testPermissionReadCarDisplayUnitsGranted"	""	"1: granted"	"([1:/android/car/cts/permissionreadcardisplayunits/PermissionReadCarDisplayUnitsTest.java]:[granted]:[1]:method_text:[pertyId()).isIn(                    PERMISSION_READ_CAR_DISPLAY_UNITS_PROPERTIES);        }    }]) :|: 
    public void testPermissionReadCarDisplayUnitsGranted() {
        for (CarPropertyConfig<?> carPropertyConfig : mCarPropertyManager.getPropertyList()) {
            assertWithMessage(""%s"",
                    VehiclePropertyIds.toString(carPropertyConfig.getPropertyId())).that(
                    carPropertyConfig.getPropertyId()).isIn(
                    PERMISSION_READ_CAR_DISPLAY_UNITS_PROPERTIES);
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionReadCarDisplayUnits/src/android/car/cts/permissionreadcardisplayunits/PermissionReadCarDisplayUnitsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.car.cts.permissioncarenergyports.PermissionCarEnergyPortsTest"	"testPermissionCarEnergyPortsGranted"	""	"1: granted"	"([1:/android/car/cts/permissioncarenergyports/PermissionCarEnergyPortsTest.java]:[granted]:[1]:method_text:[getPropertyId()).isIn(                    PERMISSION_CAR_ENERGY_PORTS_PROPERTIES);        }    }]) :|: 
    public void testPermissionCarEnergyPortsGranted() {
        for (CarPropertyConfig<?> carPropertyConfig : mCarPropertyManager.getPropertyList()) {
            assertWithMessage(""%s"",
                    VehiclePropertyIds.toString(carPropertyConfig.getPropertyId())).that(
                    carPropertyConfig.getPropertyId()).isIn(
                    PERMISSION_CAR_ENERGY_PORTS_PROPERTIES);
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarEnergyPorts/src/android/car/cts/permissioncarenergyports/PermissionCarEnergyPortsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.car.cts.permissioncarexteriorenvironment.PermissionCarExteriorEnvironmentTest"	"testPermissionCarExteriorEnvironmentGranted"	""	"1: granted"	"([1:/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java]:[granted]:[1]:method_text:[SSION_CAR_EXTERIOR_ENVIRONMENT_PROPERTIES);        }    }    @CddTest(requirement = ""2.5.1"")   ]) :|: 
    public void testPermissionCarExteriorEnvironmentGranted() {
        for (CarPropertyConfig<?> carPropertyConfig : mCarPropertyManager.getPropertyList()) {
            assertWithMessage(""%s"",
                    VehiclePropertyIds.toString(carPropertyConfig.getPropertyId())).that(
                    carPropertyConfig.getPropertyId()).isIn(
                    PERMISSION_CAR_EXTERIOR_ENVIRONMENT_PROPERTIES);
        }
    }

    @CddTest(requirement = ""2.5.1"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarExteriorEnvironment/src/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.car.cts.permissioncarexteriorenvironment.PermissionCarExteriorEnvironmentTest"	"testRequiredPropertyAvailableWithPermissionCarExteriorEnvironmentGranted"	""	"1: granted"	"([1:/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java]:[granted]:[1]:method_text:[er.getCarPropertyConfig(                        VehiclePropertyIds.NIGHT_MODE)).isNotNull();    }]) :|: 
    public void testRequiredPropertyAvailableWithPermissionCarExteriorEnvironmentGranted() {
        assertWithMessage(""%s"", VehiclePropertyIds.toString(VehiclePropertyIds.NIGHT_MODE))
                .that(mCarPropertyManager.getCarPropertyConfig(
                        VehiclePropertyIds.NIGHT_MODE)).isNotNull();
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarExteriorEnvironment/src/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.car.cts.nopropertypermissions.NoPropertyPermissionsTest"	"testNoPropertyPermissionsGranted"	""	"1: granted"	"([1:/android/car/cts/nopropertypermissions/NoPropertyPermissionsTest.java]:[granted]:[1]:method_text:[r.getPropertyList()"").that(                mCarPropertyManager.getPropertyList()).isEmpty();    }]) :|: 
    public void testNoPropertyPermissionsGranted() {
        assertWithMessage(""CarPropertyManager.getPropertyList()"").that(
                mCarPropertyManager.getPropertyList()).isEmpty();
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/car/NoPropertyPermissions/src/android/car/cts/nopropertypermissions/NoPropertyPermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.car.cts.permissioncarspeed.PermissionCarSpeedTest"	"testPermissionCarSpeedGranted"	""	"1: granted"	"([1:/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java]:[granted]:[1]:method_text:[d()).isIn(PERMISSION_CAR_SPEED_PROPERTIES);        }    }    @CddTest(requirement = ""2.5.1"")   ]) :|: 
    public void testPermissionCarSpeedGranted() {
        for (CarPropertyConfig<?> carPropertyConfig : mCarPropertyManager.getPropertyList()) {
            assertWithMessage(""%s"", VehiclePropertyIds.toString(carPropertyConfig.getPropertyId()))
                    .that(carPropertyConfig.getPropertyId()).isIn(PERMISSION_CAR_SPEED_PROPERTIES);
        }
    }

    @CddTest(requirement = ""2.5.1"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarSpeed/src/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.car.cts.permissioncarspeed.PermissionCarSpeedTest"	"testRequiredPropertyAvailableWithPermissionCarSpeedGranted"	""	"1: granted"	"([1:/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java]:[granted]:[1]:method_text:[rPropertyConfig(                        VehiclePropertyIds.PERF_VEHICLE_SPEED)).isNotNull();    }]) :|: 
    public void testRequiredPropertyAvailableWithPermissionCarSpeedGranted() {
        assertWithMessage(""%s"", VehiclePropertyIds.toString(VehiclePropertyIds.PERF_VEHICLE_SPEED))
                .that(mCarPropertyManager.getCarPropertyConfig(
                        VehiclePropertyIds.PERF_VEHICLE_SPEED)).isNotNull();
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarSpeed/src/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.car.cts.permissioncarpowertrain.PermissionCarPowertrainTest"	"testPermissionCarPowertrainGranted"	""	"1: granted"	"([1:/android/car/cts/permissioncarpowertrain/PermissionCarPowertrainTest.java]:[granted]:[1]:method_text:[     PERMISSION_CAR_POWERTRAIN_PROPERTIES);        }    }    @CddTest(requirement = ""2.5.1"")   ]) :|: 
    public void testPermissionCarPowertrainGranted() {
        for (CarPropertyConfig<?> carPropertyConfig : mCarPropertyManager.getPropertyList()) {
            assertWithMessage(""%s"", VehiclePropertyIds.toString(carPropertyConfig.getPropertyId()))
                    .that(carPropertyConfig.getPropertyId()).isIn(
                    PERMISSION_CAR_POWERTRAIN_PROPERTIES);
        }
    }

    @CddTest(requirement = ""2.5.1"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarPowertrain/src/android/car/cts/permissioncarpowertrain/PermissionCarPowertrainTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.car.cts.permissioncarpowertrain.PermissionCarPowertrainTest"	"testRequiredPropertyAvailableWithPermissionCarPowertrainGranted"	""	"1: granted"	"([1:/android/car/cts/permissioncarpowertrain/PermissionCarPowertrainTest.java]:[granted]:[1]:method_text:[CarPropertyConfig(                        VehiclePropertyIds.PARKING_BRAKE_ON)).isNotNull();    }]) :|: 
    public void testRequiredPropertyAvailableWithPermissionCarPowertrainGranted() {
        assertWithMessage(""%s"", VehiclePropertyIds.toString(VehiclePropertyIds.GEAR_SELECTION))
                .that(mCarPropertyManager.getCarPropertyConfig(
                        VehiclePropertyIds.GEAR_SELECTION)).isNotNull();
        assertWithMessage(""%s"", VehiclePropertyIds.toString(VehiclePropertyIds.PARKING_BRAKE_ON))
                .that(mCarPropertyManager.getCarPropertyConfig(
                        VehiclePropertyIds.PARKING_BRAKE_ON)).isNotNull();
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarPowertrain/src/android/car/cts/permissioncarpowertrain/PermissionCarPowertrainTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.car.cts.CarAppFocusManagerTest"	"testMultipleChangeListenersPerManager"	"CtsCarTestCases"	"1: granted"	"([2:/android/car/cts/CarAppFocusManagerTest.java]:[granted]:[2]:method_text:[d();            mLastGrantEvent = appType;            mGrantEventWait.release();        }    }}]) :|: 
    public void testMultipleChangeListenersPerManager() throws Exception {
        FocusChangedListener listener = new FocusChangedListener();
        FocusChangedListener listener2 = new FocusChangedListener();
        FocusOwnershipCallback owner = new FocusOwnershipCallback();
        mManager.addFocusListener(listener, CarAppFocusManager.APP_FOCUS_TYPE_NAVIGATION);
        mManager.addFocusListener(listener2, CarAppFocusManager.APP_FOCUS_TYPE_NAVIGATION);

        assertEquals(CarAppFocusManager.APP_FOCUS_REQUEST_SUCCEEDED,
                mManager.requestAppFocus(CarAppFocusManager.APP_FOCUS_TYPE_NAVIGATION, owner));
        assertTrue(owner.waitForOwnershipGrantAndAssert(
                DEFAULT_WAIT_TIMEOUT_MS, APP_FOCUS_TYPE_NAVIGATION));

        assertTrue(listener.waitForFocusChangedAndAssert(DEFAULT_WAIT_TIMEOUT_MS,
                 CarAppFocusManager.APP_FOCUS_TYPE_NAVIGATION, true));
        assertTrue(listener2.waitForFocusChangedAndAssert(DEFAULT_WAIT_TIMEOUT_MS,
                 CarAppFocusManager.APP_FOCUS_TYPE_NAVIGATION, true));

        listener.reset();
        listener2.reset();
        mManager.abandonAppFocus(owner);
        assertTrue(listener.waitForFocusChangedAndAssert(DEFAULT_WAIT_TIMEOUT_MS,
                CarAppFocusManager.APP_FOCUS_TYPE_NAVIGATION, false));
        assertTrue(listener2.waitForFocusChangedAndAssert(DEFAULT_WAIT_TIMEOUT_MS,
                CarAppFocusManager.APP_FOCUS_TYPE_NAVIGATION, false));
    }

    private class FocusChangedListener implements CarAppFocusManager.OnAppFocusChangedListener {
        private int mLastChangeAppType;
        private boolean mLastChangeAppActive;
        private final Semaphore mChangeWait = new Semaphore(0);

        public boolean waitForFocusChangedAndAssert(long timeoutMs, int expectedAppType,
                boolean expectedAppActive) throws Exception {
            if (!mChangeWait.tryAcquire(timeoutMs, TimeUnit.MILLISECONDS)) {
                return false;
            }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarAppFocusManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.car.cts.permissioncarenergy.PermissionCarEnergyTest"	"testPermissionCarEnergyGranted"	""	"1: granted"	"([1:/android/car/cts/permissioncarenergy/PermissionCarEnergyTest.java]:[granted]:[1]:method_text:[         carPropertyConfig.getPropertyId()).isIn(PERMISSION_CAR_ENERGY_PROPERTIES);        }    }]) :|: 
    public void testPermissionCarEnergyGranted() {
        for (CarPropertyConfig<?> carPropertyConfig : mCarPropertyManager.getPropertyList()) {
            assertWithMessage(""%s"",
                    VehiclePropertyIds.toString(carPropertyConfig.getPropertyId())).that(
                    carPropertyConfig.getPropertyId()).isIn(PERMISSION_CAR_ENERGY_PROPERTIES);
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarEnergy/src/android/car/cts/permissioncarenergy/PermissionCarEnergyTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.car.cts.permissioncarinfo.PermissionCarInfoTest"	"testPermissionCarInfoGranted"	""	"1: granted"	"([1:/android/car/cts/permissioncarinfo/PermissionCarInfoTest.java]:[granted]:[1]:method_text:[          carPropertyConfig.getPropertyId()).isIn(PERMISSION_CAR_INFO_PROPERTIES);        }    }}]) :|: 
    public void testPermissionCarInfoGranted() {
        for (CarPropertyConfig<?> carPropertyConfig : mCarPropertyManager.getPropertyList()) {
            assertWithMessage(""%s"",
                    VehiclePropertyIds.toString(carPropertyConfig.getPropertyId())).that(
                    carPropertyConfig.getPropertyId()).isIn(PERMISSION_CAR_INFO_PROPERTIES);
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarInfo/src/android/car/cts/permissioncarinfo/PermissionCarInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.security.cts.HwRngTest"	"testConfigurationIfFilePresent"	"CtsSecurityTestCases"	"2: silent silently"	"([3:/android/security/cts/HwRngTest.java]:[silently]:[3]:method_text:[    try {                in.close();            } catch (IOException ignored) {}        }    }}]) :|: public void testConfigurationIfFilePresent() throws Exception {
        if (!DEV_HW_RANDOM.exists()) {
            // The device is not present
            return;
        }

        // Quick check based on https://www.kernel.org/doc/Documentation/hw_random.txt.

        // In short, assert that:
        // 1. hwrng kernel driver is using MAJOR 10 and MINOR 183,
        // 2. a driver is selected in the hrwng framework, and
        // 3. /dev/hw_random references a character device with the above MAJOR and MINOR.

        // 1. Assert that the hwrng driver is using MAJOR 10 and MINOR 183.
        //    We achieve this by inspecting /sys/class/misc/hw_random/dev and uevent.
        assertTrue(SYSFS_HW_RANDOM + "" not found"", SYSFS_HW_RANDOM.isDirectory());
        assertEquals(
                ""Driver major:minor"",
                HWRNG_DRIVER_MAJOR + "":"" + HWRNG_DRIVER_MINOR,
                readyFullyAsciiFile(new File(SYSFS_HW_RANDOM, ""dev"")).trim());

        Map<String, String> ueventVars = parseUeventFile(new File(SYSFS_HW_RANDOM, ""uevent""));
        assertEquals(""uevent MAJOR"", String.valueOf(HWRNG_DRIVER_MAJOR), ueventVars.get(""MAJOR""));
        assertEquals(""uevent MINOR"", String.valueOf(HWRNG_DRIVER_MINOR), ueventVars.get(""MINOR""));
        assertEquals(""uevent DEVNAME"", HWRNG_DRIVER_NAME, ueventVars.get(""DEVNAME""));

        // 2. Assert that a driver is selected in the hrwng framework.
        //    We achieve this by inspecting /sys/class/misc/hw_random/rng_current.
        File rngCurrentFile = new File(SYSFS_HW_RANDOM, ""rng_current"");
        String rngCurrent = readyFullyAsciiFile(rngCurrentFile);
        assertFalse(
                ""No driver selected according to "" + rngCurrentFile,
                rngCurrent.trim().isEmpty());

        // 3. Assert that /dev/hw_random references a character device with the above MAJOR+MINOR.
        try {
            int major = LinuxRngTest.getCharDeviceMajor(DEV_HW_RANDOM.getCanonicalPath());
            int mino"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/HwRngTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.security.cts.PackageSignatureTest"	"testPackageSignatures"	"CtsSecurityTestCases"	"1: admin"	"([1:/android/security/cts/PackageSignatureTest.java]:[admin]:[1]:method_text:[put != null) {                    output.close();                }            }        }    }}]) :|: public void testPackageSignatures() throws Exception {
        Set<String> badPackages = new HashSet<String>();
        Set<Signature> wellKnownSignatures = getWellKnownSignatures();

        PackageManager packageManager = mContext.getPackageManager();
        List<PackageInfo> allPackageInfos = packageManager.getInstalledPackages(
                PackageManager.GET_UNINSTALLED_PACKAGES |
                PackageManager.GET_SIGNATURES |
                PackageManager.MATCH_APEX);
        for (PackageInfo packageInfo : allPackageInfos) {
            String packageName = packageInfo.packageName;
            Log.v(TAG, ""Scanning "" + packageName);
            if (packageName != null && !isWhitelistedPackage(packageName)) {
                for (Signature signature : packageInfo.signatures) {
                    if (wellKnownSignatures.contains(signature)) {
                        badPackages.add(packageInfo.packageName);
                    }
                }
            }
        }

        assertTrue(""These packages should not be signed with a well known key: "" + badPackages,
                badPackages.isEmpty());
    }

    /**
     * Returns the well-known dev-key signatures, e.g. to detect cases where devices under test are
     * using modules that have been signed using dev keys; Google will supply modules that have been
     * signed with production keys in all cases.
     *
     * <p>See {@link #writeSignature(String, String)} for instructions for how to create the raw
     * .bin files when adding entries to this list.
     */
    private Set<Signature> getWellKnownSignatures() throws NotFoundException, IOException {
        Set<Signature> wellKnownSignatures = new HashSet<Signature>();
        wellKnownSignatures.add(getSignature(R.raw.sig_media));
        wellKnownSignatures.add(getSignature(R.raw.sig_platform));
        wellKnownSignatures.add(getSignature(R.raw.sig_shared));
        wellKnownSignatures.add(getSignature(R.raw.sig_testkey));
        wellKn"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/PackageSignatureTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.security.cts.FileIntegrityManagerTest"	"testSupportedOnDevicesFirstLaunchedWithR"	"CtsSecurityTestCases"	"1: re_tag:(?<!/)C\-1\-1"	"([1:/android/security/cts/FileIntegrityManagerTest.java]:[re_tag:(?<!/)C\-1\-1]:[1]:method_text:[tyManager.isApkVeritySupported());        }    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ]) :|: 
    public void testSupportedOnDevicesFirstLaunchedWithR() throws Exception {
        if (PropertyUtil.getFirstApiLevel() >= MIN_REQUIRED_API_LEVEL) {
            assertTrue(mFileIntegrityManager.isApkVeritySupported());
        }
    }

    @CddTest(requirement=""9.10/C-0-3,C-1-1"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/FileIntegrityManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.security.cts.FileIntegrityManagerTest"	"testCtsReleaseCertificateTrusted"	"CtsSecurityTestCases"	"1: re_tag:(?<!/)C\-1\-1"	"([1:/android/security/cts/FileIntegrityManagerTest.java]:[re_tag:(?<!/)C\-1\-1]:[1]:method_text:[Trusted);        }    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")    @RestrictedBuildTest   ]) :|: 
    public void testCtsReleaseCertificateTrusted() throws Exception {
        boolean isReleaseCertTrusted = mFileIntegrityManager.isAppSourceCertificateTrusted(
                readAssetAsX509Certificate(""fsverity-release.x509.der""));
        if (mFileIntegrityManager.isApkVeritySupported()) {
            assertTrue(isReleaseCertTrusted);
        } else {
            assertFalse(isReleaseCertTrusted);
        }
    }

    @CddTest(requirement=""9.10/C-0-3,C-1-1"")
    @RestrictedBuildTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/FileIntegrityManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.notification.legacy20.cts.LegacyNotificationManager20Test"	"testNotificationListener_cancelNotifications"	"CtsLegacyNotification20TestCases"	"1: granted"	"([4:/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java]:[granted]:[4]:method_text:[InterruptedException ex) {                // pass            }        }        return n;    }}]) :|: 
    public void testNotificationListener_cancelNotifications() throws Exception {
        toggleListenerAccess(TestNotificationListener.getId(),
                InstrumentationRegistry.getInstrumentation(), true);
        Thread.sleep(500); // wait for listener to be allowed

        mListener = TestNotificationListener.getInstance();
        assertNotNull(mListener);
        final int notificationId = 1;

        sendNotification(notificationId, R.drawable.icon_black);
        Thread.sleep(500); // wait for notification listener to receive notification

        StatusBarNotification sbn = findPostedNotification(notificationId);

        mListener.cancelNotification(sbn.getPackageName(), sbn.getTag(), sbn.getId());
        if (mContext.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.LOLLIPOP) {
            if (!checkNotificationExistence(notificationId, /*shouldExist=*/ false)) {
                fail(""Failed to cancel notification. targetSdk=""
                        + mContext.getApplicationInfo().targetSdkVersion);
            }
        }

        sendNotification(notificationId, R.drawable.icon_black);
        Thread.sleep(500); // wait for notification listener to receive notification

        mListener.cancelNotifications(new String[]{ sbn.getKey() });
        if (!checkNotificationExistence(notificationId, /*shouldExist=*/ false)) {
            fail(""Failed to cancel notification id="" + notificationId);
        }
    }

    private void sendNotification(final int id, final int icon) throws Exception {
        sendNotification(id, null, icon);
    }

    private void sendNotification(final int id, String groupKey, final int icon) throws Exception {
        final Intent intent = new Intent(Intent.ACTION_MAIN, Threads.CONTENT_URI);

        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP
                | Intent.FLAG_ACTIVITY_CLEAR_TOP);
        intent.setAction(Intent.ACTION_MAIN);

        final PendingIntent pending"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/notificationlegacy/notificationlegacy20/src/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.notification.legacy29.cts.NotificationManager29Test"	"isNotificationPolicyAccessGranted"	"CtsLegacyNotification29TestCases"	"1: granted"	"([2:/android/app/notification/legacy29/cts/NotificationManager29Test.java]:[granted]:[2]:method_text:[ontext, 0, new Intent(mContext, this.getClass()), PendingIntent.FLAG_MUTABLE_UNAUDITED);    }   ]) :|: /*
 *.
 */

package android.app.notification.legacy29.cts;

import static android.app.NotificationManager.Policy.CONVERSATION_SENDERS_ANYONE;
import static android.app.NotificationManager.Policy.PRIORITY_CATEGORY_CONVERSATIONS;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertTrue;
import static junit.framework.TestCase.assertNotNull;
import static junit.framework.TestCase.assertNull;

import android.app.Instrumentation;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.UiAutomation;
import android.content.Context;
import android.content.Intent;
import android.os.ParcelFileDescriptor;
import android.service.notification.StatusBarNotification;
import android.util.Log;

import androidx.test.InstrumentationRegistry;
import androidx.test.runner.AndroidJUnit4;

import junit.framework.Assert;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

/**
 * Home for tests that need to verify behavior for apps that target old sdk versions.
 */
@RunWith(AndroidJUnit4.class)
public class NotificationManager29Test {
    final String TAG = ""LegacyNoManTest29"";

    final String NOTIFICATION_CHANNEL_ID = ""LegacyNoManTest29"";
    private NotificationManager mNotificationManager;
    private Context mContext;

    @Before
    public void setUp() throws Exception {
        mContext = InstrumentationRegistry.getContext();

        mNotificationManager = (NotificationManager) mContext.getSystemService(
                Context.NOTIFICATION_SERVICE);
        mNotificationManager.createNotificationChannel(new NotificationChannel(
                NOTIFICATION_CHANNEL_ID, ""name"", NotificationManager.IMPORTANCE_DEFAULT));
    }

    private void toggleNotificationPolicyAccess(String packageName,
            Instrumenta"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/notificationlegacy/notificationlegacy29/src/android/app/notification/legacy29/cts/NotificationManager29Test.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.notification.legacy29.cts.NotificationAssistantServiceTest"	"testOnNotificationFeedbackReceived"	"CtsLegacyNotification29TestCases"	"1: granted"	"([3:/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java]:[granted]:[3]:method_text:[ new IOException(""Could not read stdout of command: "" + command, e);            }        }    }}]) :|: 
    public void testOnNotificationFeedbackReceived() throws Exception {
        setUpListeners(); // also enables assistant
        mUi.adoptShellPermissionIdentity(""android.permission.STATUS_BAR_SERVICE"", ""android.permission.EXPAND_STATUS_BAR"");

        sendNotification(1, ICON_ID);
        StatusBarNotification sbn = getFirstNotificationFromPackage(TestNotificationListener.PKG);

        Bundle feedback = new Bundle();
        feedback.putInt(FEEDBACK_RATING, 1);

        mStatusBarManager.sendNotificationFeedback(sbn.getKey(), feedback);
        Thread.sleep(SLEEP_TIME * 2);
        assertEquals(1, mNotificationAssistantService.notificationFeedback);

        mUi.dropShellPermissionIdentity();
    }

    private StatusBarNotification getFirstNotificationFromPackage(String PKG)
            throws InterruptedException {
        StatusBarNotification sbn = mNotificationListenerService.mPosted.poll(SLEEP_TIME,
                TimeUnit.MILLISECONDS);
        assertNotNull(sbn);
        while (!sbn.getPackageName().equals(PKG)) {
            sbn = mNotificationListenerService.mPosted.poll(SLEEP_TIME, TimeUnit.MILLISECONDS);
        }
        assertNotNull(sbn);
        return sbn;
    }

    private void setUpListeners() throws Exception {
        toggleListenerAccess(true);
        toggleAssistantAccess(true);
        Thread.sleep(2 * SLEEP_TIME); // wait for listener and assistant to be allowed

        mNotificationListenerService = TestNotificationListener.getInstance();
        mNotificationAssistantService = TestNotificationAssistant.getInstance();

        assertNotNull(mNotificationListenerService);
        assertNotNull(mNotificationAssistantService);
    }

    private void sendNotification(final int id, final int icon) throws Exception {
        sendNotification(id, null, icon);
    }

    private void sendNotification(final int id, String groupKey, final int icon) throws Exception {
        final Intent intent = new Intent(Intent.ACTION_MAIN, Telephony.Th"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/notificationlegacy/notificationlegacy29/src/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.notification.legacy.cts.LegacyNotificationManagerTest"	"testChannelDeletion_cancelReason"	"CtsLegacyNotification27TestCases"	"1: granted"	"([4:/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java]:[granted]:[4]:method_text:[ {      return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH);    }}]) :|: 
    public void testChannelDeletion_cancelReason() throws Exception {
        assertEquals(Build.VERSION_CODES.O_MR1, mContext.getApplicationInfo().targetSdkVersion);
        toggleListenerAccess(TestNotificationListener.getId(),
                InstrumentationRegistry.getInstrumentation(), true);
        Thread.sleep(500); // wait for listener to be allowed
        mListener = TestNotificationListener.getInstance();

        sendNotification(566, R.drawable.icon_black);

        Thread.sleep(500); // wait for notification listener to receive notification
        assertEquals(1, mListener.mPosted.size());
        String key = mListener.mPosted.get(0).getKey();

        mNotificationManager.deleteNotificationChannel(NOTIFICATION_CHANNEL_ID);

        assertEquals(NotificationListenerService.REASON_CHANNEL_BANNED,
                getCancellationReason(key));
    }

    private void sendNotification(final int id, final int icon) throws Exception {
        sendNotification(id, null, icon);
    }

    private void sendNotification(final int id, String groupKey, final int icon) throws Exception {
        final Intent intent = new Intent(Intent.ACTION_MAIN, Threads.CONTENT_URI);

        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP
                | Intent.FLAG_ACTIVITY_CLEAR_TOP);
        intent.setAction(Intent.ACTION_MAIN);

        final PendingIntent pendingIntent = PendingIntent.getActivity(mContext, 0, intent, PendingIntent.FLAG_MUTABLE_UNAUDITED);
        final Notification notification =
                new Notification.Builder(mContext, NOTIFICATION_CHANNEL_ID)
                        .setSmallIcon(icon)
                        .setWhen(System.currentTimeMillis())
                        .setContentTitle(""notify#"" + id)
                        .setContentText(""This is #"" + id + ""notification  "")
                        .setContentIntent(pendingIntent)
                        .setGroup(groupKey)
                        .build();"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/notificationlegacy/notificationlegacy27/src/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.notification.legacy.cts.ConditionProviderServiceTest"	"testMethodsExistAndDoNotThrow"	"CtsLegacyNotification27TestCases"	"1: granted"	"([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[granted]:[2]:method_text:[ } else {            Log.d(TAG, service.getName() + "" has a correct bind state"");        }    }}]) :|: 
    public void testMethodsExistAndDoNotThrow() throws Exception {
        // make sure it gets bound
        pollForConnection(LegacyConditionProviderService.class, true);

        // request unbind
        LegacyConditionProviderService.getInstance().onConnected();
        LegacyConditionProviderService.getInstance().onRequestConditions(
                Condition.FLAG_RELEVANT_NOW);
        LegacyConditionProviderService.getInstance().onSubscribe(Uri.EMPTY);
        LegacyConditionProviderService.getInstance().onUnsubscribe(Uri.EMPTY);

    }

    private void addRule(ComponentName cn, int filter, boolean enabled) {
        final Uri conditionId = new Uri.Builder()
                .scheme(Condition.SCHEME)
                .authority(ZenModeConfig.SYSTEM_AUTHORITY)
                .appendPath(cn.toString())
                .build();
        String id = mNm.addAutomaticZenRule(new AutomaticZenRule(""name"",
                cn, conditionId, filter, enabled));
        Log.d(TAG, ""Created rule with id "" + id);
        ids.add(id);
    }

    private void toggleNotificationPolicyAccess(String packageName,
            Instrumentation instrumentation, boolean on) throws IOException {

        String command = "" cmd notification "" + (on ? ""allow_dnd "" : ""disallow_dnd "") + packageName;

        runCommand(command, instrumentation);

        NotificationManager nm = mContext.getSystemService(NotificationManager.class);
        Assert.assertEquals(""Notification Policy Access Grant is "" +
                        nm.isNotificationPolicyAccessGranted() + "" not "" + on, on,
                nm.isNotificationPolicyAccessGranted());
    }

    private void runCommand(String command, Instrumentation instrumentation) throws IOException {
        UiAutomation uiAutomation = instrumentation.getUiAutomation();
        // Execute command
        try (ParcelFileDescriptor fd = uiAutomation.executeShellCommand(command)) {
            Assert.assertNotNull(""Failed to execute shell command: "" +"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/notificationlegacy/notificationlegacy27/src/android/app/notification/legacy/cts/ConditionProviderServiceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.uiautomation.cts.UiAutomationTest"	"testAdoptAllShellPermissions"	"CtsUiAutomationTestCases"	"1: granted"	"([1:/android/app/uiautomation/cts/UiAutomationTest.java]:[granted]:[1]:method_text:[ not be able to access APIs protected by a permission apps cannot get"");    }    @AppModeFull   ]) :|: 
    public void testAdoptAllShellPermissions() {
        final Context context = getInstrumentation().getContext();
        final ActivityManager activityManager = context.getSystemService(ActivityManager.class);
        final PackageManager packageManager = context.getPackageManager();

        // Try to access APIs guarded by a platform defined signature permissions
        assertThrows(SecurityException.class,
                () -> activityManager.getPackageImportance(""foo.bar.baz""),
                ""Should not be able to access APIs protected by a permission apps cannot get"");
        assertThrows(SecurityException.class,
                () -> packageManager.grantRuntimePermission(context.getPackageName(),
                        Manifest.permission.ANSWER_PHONE_CALLS, Process.myUserHandle()),
                ""Should not be able to access APIs protected by a permission apps cannot get"");

        // Access APIs guarded by a platform defined signature permissions
        try {
            getInstrumentation().getUiAutomation().adoptShellPermissionIdentity();
            // Access APIs guarded by a platform defined signature permission
            activityManager.getPackageImportance(""foo.bar.baz"");

            // Grant ourselves a runtime permission (was granted at install)
            packageManager.grantRuntimePermission(context.getPackageName(),
                    Manifest.permission.ANSWER_PHONE_CALLS, Process.myUserHandle());
        } catch (SecurityException e) {
            fail(""Should be able to access APIs protected by a permission apps cannot get"");
        } finally {
            getInstrumentation().getUiAutomation().dropShellPermissionIdentity();
        }

        // Try to access APIs guarded by a platform defined signature permissions
        assertThrows(SecurityException.class,
                () -> activityManager.getPackageImportance(""foo.bar.baz""),
                ""Should not be able to access APIs protected by a permission apps cannot g"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/uiautomation/src/android/app/uiautomation/cts/UiAutomationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.uiautomation.cts.UiAutomationTest"	"testAdoptSomeShellPermissions"	"CtsUiAutomationTestCases"	"1: granted"	"([7:/android/app/uiautomation/cts/UiAutomationTest.java]:[granted]:[7]:method_text:[          getInstrumentation().getUiAutomation().dropShellPermissionIdentity();        }    }   ]) :|: 
    public void testAdoptSomeShellPermissions() {
        final Context context = getInstrumentation().getContext();

        // Make sure we don't have any of the permissions
        assertSame(PackageManager.PERMISSION_DENIED, context.checkSelfPermission(
                Manifest.permission.BATTERY_STATS));
        assertSame(PackageManager.PERMISSION_DENIED, context.checkSelfPermission(
                Manifest.permission.PACKAGE_USAGE_STATS));

        try {
            // Adopt a permission
            getInstrumentation().getUiAutomation().adoptShellPermissionIdentity(
                    Manifest.permission.BATTERY_STATS);
            // Check one is granted and the other not
            assertSame(PackageManager.PERMISSION_GRANTED, context.checkSelfPermission(
                    Manifest.permission.BATTERY_STATS));
            assertSame(PackageManager.PERMISSION_DENIED, context.checkSelfPermission(
                    Manifest.permission.PACKAGE_USAGE_STATS));

            // Adopt all permissions
            getInstrumentation().getUiAutomation().adoptShellPermissionIdentity();
            // Check both permissions are granted
            assertSame(PackageManager.PERMISSION_GRANTED, context.checkSelfPermission(
                    Manifest.permission.BATTERY_STATS));
            assertSame(PackageManager.PERMISSION_GRANTED, context.checkSelfPermission(
                    Manifest.permission.PACKAGE_USAGE_STATS));

            // Adopt a permission
            getInstrumentation().getUiAutomation().adoptShellPermissionIdentity(
                    Manifest.permission.PACKAGE_USAGE_STATS);
            // Check one is granted and the other not
            assertSame(PackageManager.PERMISSION_DENIED, context.checkSelfPermission(
                    Manifest.permission.BATTERY_STATS));
            assertSame(PackageManager.PERMISSION_GRANTED, context.checkSelfPermission(
                    Manifest.permission.PACKAGE_USAGE_STATS));
        } finally {"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/uiautomation/src/android/app/uiautomation/cts/UiAutomationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.NearbyDevicesPermissionTest"	"isEnabled"	"CtsPermissionTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[efore    @After    public void uninstallTestApp() {        uninstallApp(TEST_APP_PKG);    }   ]) :|: /*
 *.
 */

package android.permission.cts;

import static android.Manifest.permission.ACCESS_BACKGROUND_LOCATION;
import static android.Manifest.permission.ACCESS_FINE_LOCATION;
import static android.Manifest.permission.BLUETOOTH_CONNECT;
import static android.Manifest.permission.BLUETOOTH_SCAN;
import static android.permission.cts.PermissionUtils.grantPermission;
import static android.permission.cts.PermissionUtils.install;
import static android.permission.cts.PermissionUtils.revokePermission;
import static android.permission.cts.PermissionUtils.uninstallApp;

import static com.android.compatibility.common.util.SystemUtil.runShellCommandOrThrow;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assume.assumeTrue;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothManager;
import android.bluetooth.cts.BTAdapterUtils;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.os.SystemClock;
import android.platform.test.annotations.AppModeFull;

import androidx.test.InstrumentationRegistry;
import androidx.test.filters.SdkSuppress;
import androidx.test.runner.AndroidJUnit4;

import com.android.compatibility.common.util.CddTest;

import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * Tests the behavior of the
 * {@link android.Manifest.permission_group#NEARBY_DEVICES} permission group
 * under various permutations of grant states.
 */
@RunWith(AndroidJUnit4.class)
@AppModeFull
@SdkSuppress(minSdkVersion = Build.VERSION_CODES.S, codeName = ""S"")
public class NearbyDevicesPermissionTest {
    private static final String TEST_APP_PKG = ""android.permission.cts.appthatrequestpermission"";
    private static final String TEST_APP_AUTHORITY = ""appthatreques"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.NearbyDevicesPermissionTest"	"testRequestBluetoothPermission30_GrantLocation"	"CtsPermissionTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[EST_APP_PKG, ACCESS_BACKGROUND_LOCATION);        assertScanBluetoothResult(Result.FULL);    }   ]) :|: 
    @CddTest(requirement=""7.4.3/C-6-1"")
    public void testRequestBluetoothPermission30_GrantLocation() throws Throwable {
        install(APK_BLUETOOTH_30);
        grantPermission(TEST_APP_PKG, ACCESS_FINE_LOCATION);
        grantPermission(TEST_APP_PKG, ACCESS_BACKGROUND_LOCATION);
        assertScanBluetoothResult(Result.FULL);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.NearbyDevicesPermissionTest"	"testRequestBluetoothPermission31_GrantLocation"	"CtsPermissionTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[PP_PKG, ACCESS_BACKGROUND_LOCATION);        assertScanBluetoothResult(Result.EXCEPTION);    }   ]) :|: 
    @CddTest(requirement=""7.4.3/C-6-1"")
    public void testRequestBluetoothPermission31_GrantLocation() throws Throwable {
        install(APK_BLUETOOTH_31);
        grantPermission(TEST_APP_PKG, ACCESS_FINE_LOCATION);
        grantPermission(TEST_APP_PKG, ACCESS_BACKGROUND_LOCATION);
        assertScanBluetoothResult(Result.EXCEPTION);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.NearbyDevicesPermissionTest"	"testRequestBluetoothPermission31_GrantNearby_GrantLocation"	"CtsPermissionTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[EST_APP_PKG, ACCESS_BACKGROUND_LOCATION);        assertScanBluetoothResult(Result.FULL);    }   ]) :|: 
    @CddTest(requirement=""7.4.3/C-6-1"")
    public void testRequestBluetoothPermission31_GrantNearby_GrantLocation() throws Throwable {
        install(APK_BLUETOOTH_31);
        grantPermission(TEST_APP_PKG, BLUETOOTH_CONNECT);
        grantPermission(TEST_APP_PKG, BLUETOOTH_SCAN);
        grantPermission(TEST_APP_PKG, ACCESS_FINE_LOCATION);
        grantPermission(TEST_APP_PKG, ACCESS_BACKGROUND_LOCATION);
        assertScanBluetoothResult(Result.FULL);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.NearbyDevicesPermissionTest"	"testRequestBluetoothPermissionNeverForLocation31_GrantLocation"	"CtsPermissionTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[PP_PKG, ACCESS_BACKGROUND_LOCATION);        assertScanBluetoothResult(Result.EXCEPTION);    }   ]) :|: 
    @CddTest(requirement=""7.4.3/C-6-1"")
    public void testRequestBluetoothPermissionNeverForLocation31_GrantLocation() throws Throwable {
        install(APK_BLUETOOTH_NEVER_FOR_LOCATION_31);
        grantPermission(TEST_APP_PKG, ACCESS_FINE_LOCATION);
        grantPermission(TEST_APP_PKG, ACCESS_BACKGROUND_LOCATION);
        assertScanBluetoothResult(Result.EXCEPTION);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.NearbyDevicesPermissionTest"	"testRequestBluetoothPermissionNeverForLocation31_GrantNearby_GrantLocation"	"CtsPermissionTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[APP_PKG, ACCESS_BACKGROUND_LOCATION);        assertScanBluetoothResult(Result.FILTERED);    }   ]) :|: 
    @CddTest(requirement=""7.4.3/C-6-1"")
    public void testRequestBluetoothPermissionNeverForLocation31_GrantNearby_GrantLocation()
            throws Throwable {
        install(APK_BLUETOOTH_NEVER_FOR_LOCATION_31);
        grantPermission(TEST_APP_PKG, BLUETOOTH_CONNECT);
        grantPermission(TEST_APP_PKG, BLUETOOTH_SCAN);
        grantPermission(TEST_APP_PKG, ACCESS_FINE_LOCATION);
        grantPermission(TEST_APP_PKG, ACCESS_BACKGROUND_LOCATION);
        assertScanBluetoothResult(Result.FILTERED);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.NearbyDevicesPermissionTest"	"testRequestBluetoothPermission_Upgrade"	"CtsPermissionTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[uetooth     * scan results; they'd always need to involve the user to gain permissions.     */   ]) :|: 
    @Ignore
    public void testRequestBluetoothPermission_Upgrade() throws Throwable {
        install(APK_BLUETOOTH_30);
        grantPermission(TEST_APP_PKG, ACCESS_FINE_LOCATION);
        grantPermission(TEST_APP_PKG, ACCESS_BACKGROUND_LOCATION);
        assertScanBluetoothResult(Result.FULL);

        // Upgrading to target a new SDK level means they need to explicitly
        // request the new runtime permission; by default it's denied
        install(APK_BLUETOOTH_31);
        assertScanBluetoothResult(Result.EXCEPTION);

        // If the user does grant it, they can scan again
        grantPermission(TEST_APP_PKG, BLUETOOTH_CONNECT);
        grantPermission(TEST_APP_PKG, BLUETOOTH_SCAN);
        assertScanBluetoothResult(Result.FULL);
    }

    /**
     * Verify that downgrading an app doesn't gain them any access to Bluetooth
     * scan results; they'd always need to involve the user to gain permissions.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.NearbyDevicesPermissionTest"	"testRequestBluetoothPermission_Downgrade"	"CtsPermissionTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[               + "" com.android.bluetooth/.btservice.AdapterService set-test-mode disabled"");    }}]) :|: 
    public void testRequestBluetoothPermission_Downgrade() throws Throwable {
        install(APK_BLUETOOTH_31);
        grantPermission(TEST_APP_PKG, BLUETOOTH_CONNECT);
        grantPermission(TEST_APP_PKG, BLUETOOTH_SCAN);
        grantPermission(TEST_APP_PKG, ACCESS_FINE_LOCATION);
        grantPermission(TEST_APP_PKG, ACCESS_BACKGROUND_LOCATION);
        assertScanBluetoothResult(Result.FULL);

        // Revoking nearby permission means modern app can't scan
        revokePermission(TEST_APP_PKG, BLUETOOTH_CONNECT);
        revokePermission(TEST_APP_PKG, BLUETOOTH_SCAN);
        assertScanBluetoothResult(Result.EXCEPTION);

        // And if they attempt to downgrade, confirm that they can't obtain the
        // split-permission grant from the older non-runtime permissions
        install(APK_BLUETOOTH_30);
        assertScanBluetoothResult(Result.EXCEPTION);
    }

    private void assertScanBluetoothResult(Result expected) {
        assertScanBluetoothResult(null, expected);
    }

    private void assertScanBluetoothResult(String arg, Result expected) {
        SystemClock.sleep(1000); // Wait for location permissions to propagate
        final ContentResolver resolver = InstrumentationRegistry.getTargetContext()
                .getContentResolver();
        final Bundle res = resolver.call(TEST_APP_AUTHORITY, """", arg, null);
        Result actual = Result.values()[res.getInt(Intent.EXTRA_INDEX)];
        assertEquals(expected, actual);
    }

    private boolean supportsBluetooth() {
        return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH);
    }

    private void enableTestMode() {
        runShellCommandOrThrow(""dumpsys activity service""
                + "" com.android.bluetooth/.btservice.AdapterService set-test-mode enabled"");
    }

    private void disableTestMode() {
        runShellCommandOrThrow(""dumpsys activity service""
                + "" com.android.bluetooth/.btservice.AdapterService set-test-mode disa"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.LocationAccessCheckTest"	"getPermissionControllerPackageName"	"CtsPermissionTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission/cts/LocationAccessCheckTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[    @After    public void locationUnbind() throws Throwable {        unbindService();    }   ]) :|: /*
 *.
 */

package android.permission.cts;

import static android.Manifest.permission.ACCESS_BACKGROUND_LOCATION;
import static android.Manifest.permission.ACCESS_FINE_LOCATION;
import static android.app.AppOpsManager.OPSTR_FINE_LOCATION;
import static android.app.AppOpsManager.OP_FLAGS_ALL_TRUSTED;
import static android.app.Notification.EXTRA_TITLE;
import static android.content.Context.BIND_AUTO_CREATE;
import static android.content.Context.BIND_NOT_FOREGROUND;
import static android.content.Intent.ACTION_BOOT_COMPLETED;
import static android.content.Intent.FLAG_RECEIVER_FOREGROUND;
import static android.location.Criteria.ACCURACY_FINE;
import static android.os.Process.myUserHandle;
import static android.provider.Settings.Secure.LOCATION_ACCESS_CHECK_DELAY_MILLIS;
import static android.provider.Settings.Secure.LOCATION_ACCESS_CHECK_INTERVAL_MILLIS;

import static com.android.compatibility.common.util.SystemUtil.runShellCommand;
import static com.android.compatibility.common.util.SystemUtil.runWithShellPermissionIdentity;
import static com.android.server.job.nano.JobPackageHistoryProto.START_PERIODIC_JOB;
import static com.android.server.job.nano.JobPackageHistoryProto.STOP_JOB;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.junit.Assume.assumeFalse;
import static org.junit.Assume.assumeTrue;

import static java.lang.Math.max;
import static java.util.concurrent.TimeUnit.MILLISECONDS;

import android.app.ActivityManager;
import android.app.AppOpsManager;
import android.app.UiAutomation;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.pm.PackageManager;
import android.content.pm.Reso"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/LocationAccessCheckTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.LocationAccessCheckTest"	"notificationIsShownAgainAfterClear"	"CtsPermissionTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission/cts/LocationAccessCheckTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[otification(true)), EXPECTED_TIMEOUT_MILLIS);    }    @SystemUserOnly(reason = ""b/172259935"")   ]) :|: 
    @AsbSecurityTest(cveBugId = 141028068)
    public void notificationIsShownAgainAfterClear() throws Throwable {
        assumeNotPlayManaged();
        accessLocation();
        runLocationCheck();

        eventually(() -> assertNotNull(getNotification(true)), EXPECTED_TIMEOUT_MILLIS);

        clearPackageData(TEST_APP_PKG);

        // Wait until package is cleared and permission controller has cleared the state
        Thread.sleep(10000);

        // Clearing removed the permissions, hence grant them again
        grantPermissionToTestApp(ACCESS_FINE_LOCATION);
        grantPermissionToTestApp(ACCESS_BACKGROUND_LOCATION);

        accessLocation();
        runLocationCheck();

        eventually(() -> assertNotNull(getNotification(true)), EXPECTED_TIMEOUT_MILLIS);
    }

    @SystemUserOnly(reason = ""b/172259935"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/LocationAccessCheckTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.StorageEscalationTest.kt"	"grantStoragePermissions"	"CtsPermissionTestCases"	"1: granted"	"([3:/android/permission/cts/StorageEscalationTest.kt]:[granted]:[3]:method_text:[rmName,                APP_PACKAGE_NAME) == PackageManager.PERMISSION_GRANTED)        }    }   ]) :|: /*
 *.
 */

package android.permission.cts

import android.Manifest.permission.ACCESS_MEDIA_LOCATION
import android.Manifest.permission.READ_EXTERNAL_STORAGE
import android.Manifest.permission.WRITE_EXTERNAL_STORAGE
import android.app.Instrumentation
import android.app.UiAutomation
import android.content.Context
import android.content.pm.PackageManager
import android.os.Process
import android.os.UserHandle
import android.platform.test.annotations.AppModeFull
import androidx.test.platform.app.InstrumentationRegistry
import com.android.compatibility.common.util.SystemUtil
import org.junit.After
import org.junit.Assert
import org.junit.Assert.assertTrue
import org.junit.Assume.assumeNoException
import org.junit.Before
import org.junit.Test

@AppModeFull
class StorageEscalationTest {
    companion object {
        private const val APK_DIRECTORY = ""/data/local/tmp/cts/permissions""
        const val APP_APK_PATH_28 = ""$APK_DIRECTORY/CtsStorageEscalationApp28.apk""
        const val APP_APK_PATH_29_SCOPED = ""$APK_DIRECTORY/CtsStorageEscalationApp29Scoped.apk""
        const val APP_APK_PATH_29_FULL = ""$APK_DIRECTORY/CtsStorageEscalationApp29Full.apk""
        const val APP_PACKAGE_NAME = ""android.permission3.cts.storageescalation""
        const val DELAY_TIME_MS: Long = 200
        val permissions = listOf<String>(READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE,
            ACCESS_MEDIA_LOCATION)
    }

    private val instrumentation: Instrumentation = InstrumentationRegistry.getInstrumentation()
    private val context: Context = instrumentation.context
    private val uiAutomation: UiAutomation = instrumentation.uiAutomation
    private var secondaryUserId: Int? = null

    @Before
    @After
    fun uninstallApp() {
        SystemUtil.runShellCommand(""pm uninstall $APP_PACKAGE_NAME --user ALL"")
    }

    private fun installPackage(apk: String) {
        var userString = """"
        secondaryUserId?.let { userId ->
            userString = "" --user $userId""
        }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/StorageEscalationTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.StorageEscalationTest.kt"	"testCannotEscalateWithNewManifestLegacyRequestSecondary"	"CtsPermissionTestCases"	"1: granted"	"([2:/android/permission/cts/StorageEscalationTest.kt]:[granted]:[2]:method_text:[od        Thread.sleep(DELAY_TIME_MS)        assertStoragePermissionState(granted = false)    }}]) :|: 
    fun testCannotEscalateWithNewManifestLegacyRequestSecondary() {
        createSecondaryUser()
        runStorageEscalationTest(APP_APK_PATH_29_SCOPED, APP_APK_PATH_29_FULL)
    }

    private fun runStorageEscalationTest(startPackageApk: String, finishPackageApk: String) {
        installPackage(startPackageApk)
        grantStoragePermissions()
        assertStoragePermissionState(granted = true)
        installPackage(finishPackageApk)
        // permission revoke is async, so wait a short period
        Thread.sleep(DELAY_TIME_MS)
        assertStoragePermissionState(granted = false)
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/StorageEscalationTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.ProviderPermissionTest"	"testManageDocuments"	"CtsPermissionTestCases"	"1: granted"	"([1:/android/permission/cts/ProviderPermissionTest.java]:[granted]:[1]:method_text:[@code WRITE_MEDIA_STORAGE}, that     * would be a CDD violation and a privacy incident.     */   ]) :|: public void testManageDocuments() {
        final PackageManager pm = getContext().getPackageManager();

        final Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
        intent.addCategory(Intent.CATEGORY_OPENABLE);
        intent.setType(""*/*"");
        final ResolveInfo ri = pm.resolveActivity(intent, 0);

        if (ri != null) {
            final String validPkg = ri.activityInfo.packageName;

            final List<PackageInfo> holding = pm.getPackagesHoldingPermissions(new String[] {
                    android.Manifest.permission.MANAGE_DOCUMENTS
                    }, PackageManager.MATCH_UNINSTALLED_PACKAGES);
            for (PackageInfo pi : holding) {
                if (!Objects.equals(pi.packageName, validPkg)) {
                    fail(""Exactly one package (must be "" + validPkg
                            + "") can request the MANAGE_DOCUMENTS permission; found package ""
                            + pi.packageName + "" which must be revoked for security reasons"");
                }
            }
        }
    }

    /**
     * The {@link android.Manifest.permission#WRITE_MEDIA_STORAGE} permission is
     * a very powerful permission that grants raw storage access to all devices,
     * and as such it's only appropriate to be granted to the media stack.
     * <p>
     * CDD now requires that all apps requesting this permission also hold the
     * ""Storage"" runtime permission, to give users visibility into the
     * capabilities of each app, and control over those capabilities.
     * <p>
     * If the end user revokes the ""Storage"" permission from an app, but that
     * app still has raw access to storage via {@code WRITE_MEDIA_STORAGE}, that
     * would be a CDD violation and a privacy incident.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/ProviderPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.ProviderPermissionTest"	"testWriteMediaStorage"	"CtsPermissionTestCases"	"1: granted"	"([6:/android/permission/cts/ProviderPermissionTest.java]:[granted]:[6]:method_text:[                return true;                }            }        }        return false;    }}]) :|: public void testWriteMediaStorage() throws Exception {
        final UiAutomation ui = InstrumentationRegistry.getInstrumentation().getUiAutomation();
        final PackageManager pm = getContext().getPackageManager();
        final UserHandle userHandle = getContext().getUser();
        final List<PackageInfo> pkgs = pm.getInstalledPackages(
                PackageManager.MATCH_UNINSTALLED_PACKAGES | PackageManager.GET_PERMISSIONS);
        for (PackageInfo pkg : pkgs) {
            final int appUid = userHandle.getAppId(pkg.applicationInfo.uid);
            final boolean isSystem = appUid == android.os.Process.SYSTEM_UID;
            final boolean hasFrontDoor = pm.getLaunchIntentForPackage(pkg.packageName) != null;
            final boolean grantedMedia = pm.checkPermission(WRITE_MEDIA_STORAGE,
                    pkg.packageName) == PackageManager.PERMISSION_GRANTED;

            if (!isSystem && hasFrontDoor && grantedMedia) {
                final boolean requestsStorage = contains(pkg.requestedPermissions,
                        WRITE_EXTERNAL_STORAGE);
                if (!requestsStorage) {
                    fail(""Found "" + pkg.packageName + "" holding WRITE_MEDIA_STORAGE permission ""
                            + ""without also requesting WRITE_EXTERNAL_STORAGE; these permissions ""
                            + ""must be requested together"");
                }

                final boolean grantedStorage = pm.checkPermission(WRITE_EXTERNAL_STORAGE,
                        pkg.packageName) == PackageManager.PERMISSION_GRANTED;
                if (grantedStorage) {
                    final int flags;
                    ui.adoptShellPermissionIdentity(""android.permission.GET_RUNTIME_PERMISSIONS"");
                    try {
                        flags = pm.getPermissionFlags(WRITE_EXTERNAL_STORAGE, pkg.packageName,
                                android.os.Process.myUserHandle());
                    } finally {
                        ui.dropShellPermis"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/ProviderPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.RevokePermissionTest.kt"	"testRevokePermission"	"CtsPermissionTestCases"	"1: granted"	"([1:/android/permission/cts/RevokePermissionTest.kt]:[granted]:[1]:method_text:[P_PKG_NAME,                permission = READ_CALENDAR,                isGranted = true)    }   ]) :|: 
    @AppModeFull(reason = ""Instant apps can't revoke permissions."")
    fun testRevokePermission() {
        testRevoke(
                packageName = APP_PKG_NAME,
                permission = READ_CALENDAR,
                isGranted = true)
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/RevokePermissionTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.RevokePermissionTest.kt"	"testRevokePermissionWithReason"	"CtsPermissionTestCases"	"1: granted"	"([1:/android/permission/cts/RevokePermissionTest.kt]:[granted]:[1]:method_text:[ READ_CALENDAR,                reason = ""test reason"",                isGranted = true)    }   ]) :|: 
    @AppModeFull(reason = ""Instant apps can't revoke permissions."")
    fun testRevokePermissionWithReason() {
        testRevoke(
                packageName = APP_PKG_NAME,
                permission = READ_CALENDAR,
                reason = ""test reason"",
                isGranted = true)
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/RevokePermissionTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.RevokePermissionTest.kt"	"testRevokeFakePackageWithReason"	"CtsPermissionTestCases"	"1: granted"	"([3:/android/permission/cts/RevokePermissionTest.kt]:[granted]:[3]:method_text:[        } catch (e: PackageManager.NameNotFoundException) {            // Expected        }    }]) :|: 
    @AppModeFull(reason = ""Instant apps can't revoke permissions."")
    fun testRevokeFakePackageWithReason() {
        val fakePackageName = ""fake.package.name.which.should.not.exist""
        assertPackageNotInstalled(fakePackageName)
        testRevoke(
                packageName = fakePackageName,
                permission = READ_CALENDAR,
                reason = ""test reason"")
    }

    @After
    fun uninstallApp() {
        runShellCommand(""pm uninstall $APP_PKG_NAME"")
    }

    private fun testRevoke(
        packageName: String,
        permission: String,
        reason: String? = null,
        isGranted: Boolean = false,
        throwableType: Class<*>? = null,
        throwableMessage: String = """"
    ) {
        val context = InstrumentationRegistry.getInstrumentation().targetContext
        val pm = context.packageManager

        if (isGranted) {
            assertEquals(PERMISSION_GRANTED, pm.checkPermission(READ_CALENDAR, APP_PKG_NAME))
        }

        runWithShellPermissionIdentity {
            if (throwableType == null) {
                if (reason == null) {
                    pm.revokeRuntimePermission(packageName, permission, Process.myUserHandle())
                } else {
                    pm.revokeRuntimePermission(packageName, permission, Process.myUserHandle(),
                            reason)
                }
            } else {
                try {
                    if (reason == null) {
                        pm.revokeRuntimePermission(packageName, permission, Process.myUserHandle())
                    } else {
                        pm.revokeRuntimePermission(packageName, permission, Process.myUserHandle(),
                                reason)
                    }
                } catch (t: Throwable) {
                    if (t::class.java.name == throwableType.name &&
                            t.message!!.contains(throwableMessage)) {
                        return@runWithShellPermissionIdentity"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/RevokePermissionTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.UndefinedGroupPermissionTest.kt"	"testOtherGroupPermissionsNotGranted_1"	"CtsPermissionTestCases"	"2: granted RECORD_AUDIO"	"([1:/android/permission/cts/UndefinedGroupPermissionTest.kt]:[RECORD_AUDIO]:[1]:method_text:[issionsNotGranted_1() {        testOtherGroupPermissionsNotGranted(CAMERA, RECORD_AUDIO)    }   ]) :|: 
    fun testOtherGroupPermissionsNotGranted_1() {
        testOtherGroupPermissionsNotGranted(CAMERA, RECORD_AUDIO)
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/UndefinedGroupPermissionTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.UndefinedGroupPermissionTest.kt"	"testOtherGroupPermissionsNotGranted_2"	"CtsPermissionTestCases"	"2: granted RECORD_AUDIO"	"([1:/android/permission/cts/UndefinedGroupPermissionTest.kt]:[RECORD_AUDIO]:[1]:method_text:[rmissionsNotGranted_2() {        testOtherGroupPermissionsNotGranted(TEST, RECORD_AUDIO)    }   ]) :|: 
    fun testOtherGroupPermissionsNotGranted_2() {
        testOtherGroupPermissionsNotGranted(TEST, RECORD_AUDIO)
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/UndefinedGroupPermissionTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.UndefinedGroupPermissionTest.kt"	"testOtherGroupPermissionsNotGranted_3"	"CtsPermissionTestCases"	"1: granted"	"([4:/android/permission/cts/UndefinedGroupPermissionTest.kt]:[granted]:[4]:method_text:[*     * When the custom permission is granted nothing else gets granted as a byproduct.     */   ]) :|: 
    fun testOtherGroupPermissionsNotGranted_3() {
        testOtherGroupPermissionsNotGranted(CAMERA, TEST)
    }

    /**
     * When the custom permission is granted nothing else gets granted as a byproduct.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/UndefinedGroupPermissionTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.UndefinedGroupPermissionTest.kt"	"testCustomPermissionGrantedAlone"	"CtsPermissionTestCases"	"2: granted RECORD_AUDIO"	"([2:/android/permission/cts/UndefinedGroupPermissionTest.kt]:[RECORD_AUDIO]:[2]:method_text:[.PERMISSIONS""        const val TEST = ""android.permission.cts.appthatrequestpermission.TEST""    }]) :|: 
    fun testCustomPermissionGrantedAlone() {
        Assert.assertEquals(mPm!!.checkPermission(CAMERA, APP_PKG_NAME),
                PackageManager.PERMISSION_DENIED)
        Assert.assertEquals(mPm!!.checkPermission(RECORD_AUDIO, APP_PKG_NAME),
                PackageManager.PERMISSION_DENIED)
        Assert.assertEquals(mPm!!.checkPermission(TEST, APP_PKG_NAME),
                PackageManager.PERMISSION_DENIED)
        eventually {
            startRequestActivity(arrayOf(TEST))
            mUiDevice!!.waitForIdle()
            findAllowButton().click()
        }
        eventually {
            Assert.assertEquals(mPm!!.checkPermission(CAMERA, APP_PKG_NAME),
                    PackageManager.PERMISSION_DENIED)
            Assert.assertEquals(mPm!!.checkPermission(RECORD_AUDIO, APP_PKG_NAME),
                    PackageManager.PERMISSION_DENIED)
            Assert.assertEquals(mPm!!.checkPermission(TEST, APP_PKG_NAME),
                    PackageManager.PERMISSION_GRANTED)
        }
    }

    @After
    fun uninstall() {
        SystemUtil.runShellCommand(""pm uninstall $APP_PKG_NAME"")
    }

    fun findAllowButton(): UiObject2 {
        return if (mContext?.packageManager
                        ?.hasSystemFeature(PackageManager.FEATURE_AUTOMOTIVE) == true) {
            waitFindObject(By.text(mAllowButtonText), 100)
        } else {
            waitFindObject(By.res(
                    ""com.android.permissioncontroller:id/permission_allow_button""),
                    100)
        }
    }

    /**
     * If app has one permission granted, then it can't grant itself another permission for free.
     */
    fun testOtherGroupPermissionsNotGranted(grantedPerm: String, targetPermission: String) {
        // Grant the permission in the background
        SystemUtil.runWithShellPermissionIdentity {
            mPm!!.grantRuntimePermission(
                    APP_PKG_NAME, grantedPerm, Process.myUserHandle())
        }
        Assert.assertEquals(""$grantedPerm no"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/UndefinedGroupPermissionTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.ServicePermissionTest"	"testServicePermissions"	"CtsPermissionTestCases"	"1: granted"	"([1:/android/permission/cts/ServicePermissionTest.java]:[granted]:[1]:method_text:[packages outside of the core system: ""                    + failures.toString());        }    }}]) :|: public void testServicePermissions() {
        final PackageManager pm = getContext().getPackageManager();

        final List<String> failures = new ArrayList<>();
        for (String perm : sServicePermissions) {
            final List<PackageInfo> holding = pm.getPackagesHoldingPermissions(
                    new String[] { perm }, PackageManager.MATCH_UNINSTALLED_PACKAGES);
            for (PackageInfo pi : holding) {
                if (!Objects.equals(""android"", pi.packageName)) {
                    failures.add(perm + "" held by "" + pi.packageName);
                }
            }
        }
        if (!failures.isEmpty()) {
            fail(""Found permissions granted to packages outside of the core system: ""
                    + failures.toString());
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/ServicePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.OneTimePermissionTest"	"testOneTimePermission"	"CtsPermissionTestCases"	"1: granted"	"([1:/android/permission/cts/OneTimePermissionTest.java]:[granted]:[1]:method_text:[_PERIOD);        assertExpectedLifespan(exitTime, ONE_TIME_TIMEOUT_MILLIS);    }    @Ignore   ]) :|: 
    public void testOneTimePermission() throws Throwable {
        startApp();

        CompletableFuture<Long> exitTime = registerAppExitListener();

        clickOneTimeButton();

        exitApp();

        assertGranted(5000);

        assertDenied(ONE_TIME_TIMEOUT_MILLIS + ONE_TIME_TIMER_UPPER_GRACE_PERIOD);

        assertExpectedLifespan(exitTime, ONE_TIME_TIMEOUT_MILLIS);
    }

    @Ignore"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.OneTimePermissionTest"	"testForegroundServiceMaintainsPermission"	"CtsPermissionTestCases"	"1: granted"	"([1:/android/permission/cts/OneTimePermissionTest.java]:[granted]:[1]:method_text:[_UPPER_GRACE_PERIOD);        assertExpectedLifespan(exitTime, expectedLifespanMillis);    }   ]) :|: 
    public void testForegroundServiceMaintainsPermission() throws Throwable {
        startApp();

        CompletableFuture<Long> exitTime = registerAppExitListener();

        clickOneTimeButton();

        long expectedLifespanMillis = 2 * ONE_TIME_TIMEOUT_MILLIS;
        startAppForegroundService(expectedLifespanMillis, false);

        exitApp();

        assertGranted(5000);

        assertDenied(expectedLifespanMillis + ONE_TIME_TIMER_UPPER_GRACE_PERIOD);

        assertExpectedLifespan(exitTime, expectedLifespanMillis);

    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.OneTimePermissionTest"	"testPermissionRevokedOnKill"	"CtsPermissionTestCases"	"1: granted"	"([1:/android/permission/cts/OneTimePermissionTest.java]:[granted]:[1]:method_text:[         ""one_time_permissions_killed_delay_millis"", 5000L)));        assertDenied(500);    }   ]) :|: 
    public void testPermissionRevokedOnKill() throws Throwable {
        startApp();

        clickOneTimeButton();

        exitApp();

        assertGranted(5000);

        mUiDevice.waitForIdle();
        SystemUtil.runWithShellPermissionIdentity(() ->
                mActivityManager.killBackgroundProcesses(APP_PKG_NAME));

        runWithShellPermissionIdentity(
                () -> Thread.sleep(DeviceConfig.getLong(DeviceConfig.NAMESPACE_PERMISSIONS,
                ""one_time_permissions_killed_delay_millis"", 5000L)));
        assertDenied(500);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.OneTimePermissionTest"	"testStickyServiceMaintainsPermissionOnRestart"	"CtsPermissionTestCases"	"1: granted"	"([13:/android/permission/cts/OneTimePermissionTest.java]:[granted]:[13]:method_text:[               mActivityManager.removeOnUidImportanceListener(this);            }        }    }}]) :|: 
    public void testStickyServiceMaintainsPermissionOnRestart() throws Throwable {
        startApp();

        clickOneTimeButton();

        startAppForegroundService(2 * ONE_TIME_TIMEOUT_MILLIS, true);

        exitApp();

        assertGranted(5000);
        mUiDevice.waitForIdle();
        Thread.sleep(ONE_TIME_TIMEOUT_MILLIS);

        runShellCommand(""am crash "" + APP_PKG_NAME);

        eventually(() -> runWithShellPermissionIdentity(() -> {
            if (mActivityManager.getPackageImportance(APP_PKG_NAME) <= IMPORTANCE_CACHED) {
                throw new AssertionError(""App was never killed"");
            }
        }));

        eventually(() -> runWithShellPermissionIdentity(() -> {
            if (mActivityManager.getPackageImportance(APP_PKG_NAME)
                    > IMPORTANCE_FOREGROUND_SERVICE) {
                throw new AssertionError(""Foreground service never resumed"");
            }
            Assert.assertEquals(""Service resumed without permission"",
                    PackageManager.PERMISSION_GRANTED, mContext.getPackageManager()
                            .checkPermission(ACCESS_FINE_LOCATION, APP_PKG_NAME));
        }));
    }

    private void assertGrantedState(String s, int permissionGranted, long timeoutMillis) {
        eventually(() -> Assert.assertEquals(s,
                permissionGranted, mContext.getPackageManager()
                        .checkPermission(ACCESS_FINE_LOCATION, APP_PKG_NAME)), timeoutMillis);
    }

    private void assertGranted(long timeoutMillis) {
        assertGrantedState(""Permission was never granted"", PackageManager.PERMISSION_GRANTED,
                timeoutMillis);
    }

    private void assertDenied(long timeoutMillis) {
        assertGrantedState(""Permission was never revoked"", PackageManager.PERMISSION_DENIED,
                timeoutMillis);
    }

    private void assertExpectedLifespan(CompletableFuture<Long> exitTime, long expectedLifespan)
            throws InterruptedException, java.util."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.NoAudioPermissionTest"	"testRouting"	"CtsPermissionTestCases"	"1: RECORD_AUDIO"	"([1:/android/permission/cts/NoAudioPermissionTest.java]:[RECORD_AUDIO]:[1]:method_text:[quire permission     * {@link android.Manifest.permission#RECORD_AUDIO}.     */    @SmallTest   ]) :|: public void testRouting() {

        // If there is no permission of MODIFY_AUDIO_SETTINGS, setSpeakerphoneOn does nothing.
        boolean prevState = mAudioManager.isSpeakerphoneOn();
        mAudioManager.setSpeakerphoneOn(!prevState);
        assertEquals(prevState, mAudioManager.isSpeakerphoneOn());

        // If there is no permission of MODIFY_AUDIO_SETTINGS, setBluetoothScoOn does nothing.
        prevState = mAudioManager.isBluetoothScoOn();
        mAudioManager.setBluetoothScoOn(!prevState);
        assertEquals(prevState, mAudioManager.isBluetoothScoOn());
    }

    /**
     * Verify that {@link android.media.AudioRecord.Builder#build} and
     * {@link android.media.AudioRecord#AudioRecord} require permission
     * {@link android.Manifest.permission#RECORD_AUDIO}.
     */
    @SmallTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoAudioPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.NoAudioPermissionTest"	"testSetMicrophoneMute"	"CtsPermissionTestCases"	"2: Microphone microphone"	"([5:/android/permission/cts/NoAudioPermissionTest.java]:[microphone]:[5]:method_text:[t.permission#MODIFY_AUDIO_SETTINGS}.     */    @SuppressWarnings(""deprecation"")    @SmallTest   ]) :|: public void testSetMicrophoneMute() {
        boolean muteState = mAudioManager.isMicrophoneMute();
        int originalMode = mAudioManager.getMode();
        // If there is no permission of MODIFY_AUDIO_SETTINGS, setMicrophoneMute does nothing.
        if (muteState) {
            Log.w(TAG, ""Mic seems muted by hardware! Please unmute and rerrun the test."");
        } else {
            mAudioManager.setMicrophoneMute(!muteState);
            assertEquals(muteState, mAudioManager.isMicrophoneMute());
        }

        // If there is no permission of MODIFY_AUDIO_SETTINGS, setMode does nothing.
        assertTrue(AudioManager.MODE_NORMAL != AudioManager.MODE_RINGTONE);

        mAudioManager.setMode(AudioManager.MODE_NORMAL);
        assertEquals(originalMode, mAudioManager.getMode());

        mAudioManager.setMode(AudioManager.MODE_RINGTONE);
        assertEquals(originalMode, mAudioManager.getMode());
    }

    /**
     * Verify that AudioManager routing methods require permissions.
     * <p>Requires Permission:
     *   {@link android.Manifest.permission#MODIFY_AUDIO_SETTINGS}.
     */
    @SuppressWarnings(""deprecation"")
    @SmallTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoAudioPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission.cts.NoAudioPermissionTest"	"testRecordPermission"	"CtsPermissionTestCases"	"2: Microphone microphone"	"([1:/android/permission/cts/NoAudioPermissionTest.java]:[microphone]:[1]:method_text:[e();        record.release();        assertEquals(AudioRecord.STATE_UNINITIALIZED, state);    }}]) :|: public void testRecordPermission() {
        if (!hasMicrophone()) return;

        // test builder
        assertThrows(java.lang.UnsupportedOperationException.class, () -> {
            final AudioRecord record = new AudioRecord.Builder().build();
            record.release();
        });

        // test constructor
        final int sampleRate = 8000;
        final int halfSecondInBytes = sampleRate;
        AudioRecord record = new AudioRecord(
                MediaRecorder.AudioSource.DEFAULT, sampleRate, AudioFormat.CHANNEL_IN_MONO,
                AudioFormat.ENCODING_PCM_16BIT, halfSecondInBytes);
        final int state = record.getState();
        record.release();
        assertEquals(AudioRecord.STATE_UNINITIALIZED, state);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoAudioPermissionTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.appops.cts.AppOpsTest.kt"	"testGetOpsForPackageOpsAreLogged"	"CtsAppOpsTestCases"	"1: RECORD_AUDIO"	"([5:/android/app/appops/cts/AppOpsTest.kt]:[RECORD_AUDIO]:[5]:method_text:[   assertTrue(mustBeLogged, rejectedOperationLogged(mOpPackageName, OPSTR_READ_CALENDAR))    }   ]) :|: 
    fun testGetOpsForPackageOpsAreLogged() {
        // This test checks if operations get logged by the system. It needs to start with a clean
        // slate, i.e. these ops can't have been logged previously for this test package. The reason
        // is that there's no API for clearing the app op logs before a test run. However, the op
        // logs are cleared when this test package is reinstalled between test runs. To make sure
        // that other test methods in this class don't affect this test method, here we use
        // operations that are not used by any other test cases.
        val mustNotBeLogged = ""Operation mustn't be logged before the test runs""
        assumeTrue(mustNotBeLogged, !allowedOperationLogged(mOpPackageName, OPSTR_RECORD_AUDIO))
        assumeTrue(mustNotBeLogged, !allowedOperationLogged(mOpPackageName, OPSTR_READ_CALENDAR))

        setOpMode(mOpPackageName, OPSTR_RECORD_AUDIO, MODE_ALLOWED)
        setOpMode(mOpPackageName, OPSTR_READ_CALENDAR, MODE_ERRORED)

        // Note an op that's allowed.
        mAppOps.noteOp(OPSTR_RECORD_AUDIO, Process.myUid(), mOpPackageName)
        val mustBeLogged = ""Operation must be logged""
        assertTrue(mustBeLogged, allowedOperationLogged(mOpPackageName, OPSTR_RECORD_AUDIO))

        // Note another op that's not allowed.
        mAppOps.noteOpNoThrow(OPSTR_READ_CALENDAR, Process.myUid(), mOpPackageName)
        assertTrue(mustBeLogged, allowedOperationLogged(mOpPackageName, OPSTR_RECORD_AUDIO))
        assertTrue(mustBeLogged, rejectedOperationLogged(mOpPackageName, OPSTR_READ_CALENDAR))
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/appop/src/android/app/appops/cts/AppOpsTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.appops.cts.AppOpsTest.kt"	"adoptShellPermissionIdentity"	"CtsAppOpsTestCases"	"1: microphone"	"([1:/android/app/appops/cts/AppOpsTest.kt]:[microphone]:[1]:method_text:[nvoke()        } finally {            uiAutomation.dropShellPermissionIdentity()        }    }}]) :|: 
    fun ensurePhoneCallOpsRestricted() {
        assumeTrue(mContext.packageManager.hasSystemFeature(PackageManager.FEATURE_TELEPHONY))
        val micReturn = mAppOps.noteOp(OPSTR_PHONE_CALL_MICROPHONE, Process.myUid(), mOpPackageName,
                null, null)
        assertEquals(MODE_IGNORED, micReturn)
        val cameraReturn = mAppOps.noteOp(OPSTR_PHONE_CALL_CAMERA, Process.myUid(),
                mOpPackageName, null, null)
        assertEquals(MODE_IGNORED, cameraReturn)
    }

    private fun runWithShellPermissionIdentity(command: () -> Unit) {
        val uiAutomation = InstrumentationRegistry.getInstrumentation().getUiAutomation()
        uiAutomation.adoptShellPermissionIdentity()
        try {
            command.invoke()
        } finally {
            uiAutomation.dropShellPermissionIdentity()
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/appop/src/android/app/appops/cts/AppOpsTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.packageinstaller.admin.cts.SessionCommitBroadcastTest"	"testBroadcastReceivedForEnablingApp"	"CtsAdminPackageInstallerTestCases"	"1: admin"	"([1:/android/packageinstaller/admin/cts/SessionCommitBroadcastTest.java]:[admin]:[1]:method_text:[Latch.await(BROADCAST_TIMEOUT_SECS, TimeUnit.SECONDS);            return mIntent;        }    }}]) :|: public void testBroadcastReceivedForEnablingApp() throws Exception {
        if (!mHasFeature || !UserManager.supportsMultipleUsers()) {
            return;
        }
        setLauncher(mThisAppLauncher.flattenToString());

        ComponentName cn = new ComponentName(mContext, BasicAdminReceiver.class);
        UserHandle user = mDevicePolicyManager.createAndManageUser(cn,
                ""Test User "" + System.currentTimeMillis(), cn,
                null, DevicePolicyManager.SKIP_SETUP_WIZARD);
        int userId = user.getIdentifier();
        assertTrue(TextUtils.join("" "", runShellCommand(""am start-user "" + userId))
                .toLowerCase().contains(""success""));

        // Install app for the second user
        assertTrue(TextUtils.join("" "", runShellCommand(
                ""pm install -r --user "" + userId + ""  "" + TEST_APP_LOCATION))
                .toLowerCase().contains(""success""));

        // Enable the app for this user
        runShellCommand(""cmd package install-existing --user "" +
                Process.myUserHandle().getIdentifier() + ""  "" + TEST_APP_PKG);
        verifySessionIntent(mReceiver.blockingGetIntent());

        // Cleanup
        setLauncher(mDefaultLauncher.flattenToString());
        mDevicePolicyManager.removeUser(cn, user);
        forceUninstall();
    }

    private String getDefaultLauncher() throws Exception {
        final String PREFIX = ""Launcher: ComponentInfo{"";
        final String POSTFIX = ""}"";
        for (String s : runShellCommand(""cmd shortcut get-default-launcher"")) {
            if (s.startsWith(PREFIX) && s.endsWith(POSTFIX)) {
                return s.substring(PREFIX.length(), s.length() - POSTFIX.length());
            }
        }
        throw new Exception(""Default launcher not found"");
    }

    private void setLauncher(String component) throws Exception {
        runShellCommand(""cmd package set-home-activity --user ""
                + getInstrumentation().getContext().getUserId() + "" "" + component"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/packageinstaller/adminpackageinstaller/src/android/packageinstaller/admin/cts/SessionCommitBroadcastTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.packageinstaller.admin.cts.SilentPackageInstallTest"	"testSilentInstallUninstall"	"CtsAdminPackageInstallerTestCases"	"1: silent"	"([1:/android/packageinstaller/admin/cts/SilentPackageInstallTest.java]:[silent]:[1]:method_text:[assertTrue(tryUninstallPackage());        assertFalse(isPackageInstalled(TEST_APP_PKG));    }   ]) :|: public void testSilentInstallUninstall() throws Exception {
        if (!mHasFeature) {
            return;
        }
        // install the app
        assertInstallPackage();

        // uninstall the app again
        assertTrue(tryUninstallPackage());
        assertFalse(isPackageInstalled(TEST_APP_PKG));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/packageinstaller/adminpackageinstaller/src/android/packageinstaller/admin/cts/SilentPackageInstallTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.provider.cts.contacts.ContactsContract_PinnedPositionsTest"	"testPinnedPositionsDemoteIllegalArguments"	"CtsContactsProviderTestCases"	"2: silent silently"	"([1:/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java]:[silently]:[1]:method_text:[positions are correctly handled for contacts that have been demoted     * or undemoted.     */   ]) :|: public void testPinnedPositionsDemoteIllegalArguments() {
        try {
            mResolver.call(ContactsContract.AUTHORITY_URI, PinnedPositions.UNDEMOTE_METHOD,
                    null, null);
            fail();
        } catch (IllegalArgumentException expected) {
        }

        try {
            mResolver.call(ContactsContract.AUTHORITY_URI, PinnedPositions.UNDEMOTE_METHOD,
                    ""1.1"", null);
            fail();
        } catch (IllegalArgumentException expected) {
        }

        try {
            mResolver.call(ContactsContract.AUTHORITY_URI, PinnedPositions.UNDEMOTE_METHOD,
                    ""NotANumber"", null);
            fail();
        } catch (IllegalArgumentException expected) {
        }

        // Valid contact ID that does not correspond to an actual contact is silently ignored
        mResolver.call(ContactsContract.AUTHORITY_URI, PinnedPositions.UNDEMOTE_METHOD, ""999"",
                null);
    }

    /**
     * Tests that pinned positions are correctly handled for contacts that have been demoted
     * or undemoted.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"getContextUnderTest"	"CtsContentTestCases"	"1: granted"	"([5:/android/content/cts/ContextTest.java]:[granted]:[5]:method_text:[{            mContext.unregisterReceiver(receiver);        }        super.tearDown();    }   ]) :|: public void test/*
 *.
 */

package android.content.cts;

import static android.content.pm.PackageManager.PERMISSION_DENIED;
import static android.content.pm.PackageManager.PERMISSION_GRANTED;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import android.app.Activity;
import android.app.AppOpsManager;
import android.app.Instrumentation;
import android.app.WallpaperManager;
import android.content.ActivityNotFoundException;
import android.content.AttributionSource;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.ContextParams;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.ColorStateList;
import android.content.res.Resources.NotFoundException;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.database.Cursor;
import android.database.sqlite.SQLiteCursorDriver;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteQuery;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Binder;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.Process;
import android.os.UserHandle;
import android.platform.test.annotations.AppModeFull;
import android.preference.PreferenceManager;
import android.test.AndroidTestCase;
import android.util.AttributeSet;
import android.util.Log;
import android.util.Xml;
import android.view.WindowManager;

import com.android.compatibility.common.util.PollingCheck;
import com.android.compatibility.common.util.ShellIdent"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testSendOrderedBroadcastWithAppOp_NotGranted"	"CtsContentTestCases"	"1: granted"	"([1:/android/content/cts/ContextTest.java]:[granted]:[1]:method_text:[            broadcastNeverSent = true;        }        assertTrue(broadcastNeverSent);    }   ]) :|: public void testSendOrderedBroadcastWithAppOp_NotGranted() {
        final ResultReceiver receiver = new ResultReceiver();

        AppOpsManager aom =
                (AppOpsManager) getContextUnderTest().getSystemService(Context.APP_OPS_SERVICE);
        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(aom,
                (appOpsMan) -> appOpsMan.setUidMode(AppOpsManager.OPSTR_READ_CELL_BROADCASTS,
                        Process.myUid(), AppOpsManager.MODE_ERRORED));

        registerBroadcastReceiver(receiver, new IntentFilter(ResultReceiver.MOCK_ACTION));

        mContext.sendOrderedBroadcast(
                new Intent(ResultReceiver.MOCK_ACTION),
                null, // permission
                AppOpsManager.OPSTR_READ_CELL_BROADCASTS,
                null, // final receiver
                null, // scheduler
                0, // initial code
                null, //initial data
                null); // initial extras

        boolean broadcastNeverSent = false;
        try {
            new PollingCheck(BROADCAST_TIMEOUT) {
                @Override
                protected boolean check() {
                    return receiver.hasReceivedBroadCast();
                }

                public void runWithInterruption() throws InterruptedException {
                    if (check()) {
                        return;
                    }

                    long timeout = BROADCAST_TIMEOUT;
                    while (timeout > 0) {
                        try {
                            Thread.sleep(50 /* time slice */);
                        } catch (InterruptedException e) {
                            fail(""unexpected InterruptedException"");
                        }

                        if (check()) {
                            return;
                        }

                        timeout -= 50; // time slice
                    }
                    throw new InterruptedException();
                }
            }.runWithI"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testEnforceUriPermission2"	"CtsContentTestCases"	"1: granted"	"([2:/android/content/cts/ContextTest.java]:[granted]:[2]:method_text:[eption here because currently no            // IPC is handled by this process.        }    }   ]) :|: public void testEnforceUriPermission2() {
        Uri uri = Uri.parse(""content://ctstest"");
        try {
            mContext.enforceUriPermission(uri, NOT_GRANTED_PERMISSION,
                    NOT_GRANTED_PERMISSION, Binder.getCallingPid(), Binder.getCallingUid(),
                    Intent.FLAG_GRANT_WRITE_URI_PERMISSION,
                    ""enforceUriPermission is not working without possessing an IPC."");
            fail(""enforceUriPermission is not working without possessing an IPC."");
        } catch (SecurityException e) {
            // If the function is ok, it should throw a SecurityException here because currently no
            // IPC is handled by this process.
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testCheckPermissionGranted"	"CtsContentTestCases"	"1: granted"	"([3:/android/content/cts/ContextTest.java]:[granted]:[3]:method_text:[, Process.myUid());        assertEquals(PackageManager.PERMISSION_GRANTED, returnValue);    }   ]) :|: public void testCheckPermissionGranted() {
        int returnValue = mContext.checkPermission(
                GRANTED_PERMISSION, Process.myPid(), Process.myUid());
        assertEquals(PackageManager.PERMISSION_GRANTED, returnValue);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testCheckPermissionNotGranted"	"CtsContentTestCases"	"1: granted"	"([2:/android/content/cts/ContextTest.java]:[granted]:[2]:method_text:[), Process.myUid());        assertEquals(PackageManager.PERMISSION_DENIED, returnValue);    }   ]) :|: public void testCheckPermissionNotGranted() {
        int returnValue = mContext.checkPermission(
                NOT_GRANTED_PERMISSION, Process.myPid(), Process.myUid());
        assertEquals(PackageManager.PERMISSION_DENIED, returnValue);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testCheckPermissionRootUser"	"CtsContentTestCases"	"1: granted"	"([3:/android/content/cts/ContextTest.java]:[granted]:[3]:method_text:[SION, 1, ROOT_UID);        assertEquals(PackageManager.PERMISSION_GRANTED, returnValue);    }   ]) :|: public void testCheckPermissionRootUser() {
        // Test with root user, everything will be granted.
        int returnValue = mContext.checkPermission(NOT_GRANTED_PERMISSION, 1, ROOT_UID);
        assertEquals(PackageManager.PERMISSION_GRANTED, returnValue);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testCheckPermissionInvalidRequest"	"CtsContentTestCases"	"1: granted"	"([2:/android/content/cts/ContextTest.java]:[granted]:[2]:method_text:[PERMISSION, 1, -11);        assertEquals(PackageManager.PERMISSION_DENIED, returnValue);    }   ]) :|: public void testCheckPermissionInvalidRequest() {
        // Test with null permission.
        try {
            int returnValue = mContext.checkPermission(null, 0, ROOT_UID);
            fail(""checkPermission should not accept null permission"");
        } catch (IllegalArgumentException e) {
        }

        // Test with invalid uid and included granted permission.
        int returnValue = mContext.checkPermission(GRANTED_PERMISSION, 1, -11);
        assertEquals(PackageManager.PERMISSION_DENIED, returnValue);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testCheckSelfPermissionGranted"	"CtsContentTestCases"	"1: granted"	"([3:/android/content/cts/ContextTest.java]:[granted]:[3]:method_text:[RANTED_PERMISSION);        assertEquals(PackageManager.PERMISSION_GRANTED, returnValue);    }   ]) :|: public void testCheckSelfPermissionGranted() {
        int returnValue = mContext.checkSelfPermission(GRANTED_PERMISSION);
        assertEquals(PackageManager.PERMISSION_GRANTED, returnValue);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testCheckSelfPermissionNotGranted"	"CtsContentTestCases"	"1: granted"	"([2:/android/content/cts/ContextTest.java]:[granted]:[2]:method_text:[GRANTED_PERMISSION);        assertEquals(PackageManager.PERMISSION_DENIED, returnValue);    }   ]) :|: public void testCheckSelfPermissionNotGranted() {
        int returnValue = mContext.checkSelfPermission(NOT_GRANTED_PERMISSION);
        assertEquals(PackageManager.PERMISSION_DENIED, returnValue);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testEnforcePermissionGranted"	"CtsContentTestCases"	"1: granted"	"([3:/android/content/cts/ContextTest.java]:[granted]:[3]:method_text:[ERMISSION, Process.myPid(), Process.myUid(),                ""permission isn't granted"");    }   ]) :|: public void testEnforcePermissionGranted() {
        mContext.enforcePermission(
                GRANTED_PERMISSION, Process.myPid(), Process.myUid(),
                ""permission isn't granted"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testEnforcePermissionNotGranted"	"CtsContentTestCases"	"1: granted"	"([4:/android/content/cts/ContextTest.java]:[granted]:[4]:method_text:[mission shouldn't be granted."");        } catch (SecurityException expected) {        }    }   ]) :|: public void testEnforcePermissionNotGranted() {
        try {
            mContext.enforcePermission(
                    NOT_GRANTED_PERMISSION, Process.myPid(), Process.myUid(),
                    ""permission isn't granted"");
            fail(""Permission shouldn't be granted."");
        } catch (SecurityException expected) {
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testCheckCallingOrSelfPermission_noIpc"	"CtsContentTestCases"	"1: granted"	"([3:/android/content/cts/ContextTest.java]:[granted]:[3]:method_text:[OT_GRANTED_PERMISSION);        assertEquals(PackageManager.PERMISSION_DENIED, retValue);    }   ]) :|: public void testCheckCallingOrSelfPermission_noIpc() {
        // There's no ongoing Binder call, so this package's permissions are checked.
        int retValue = mContext.checkCallingOrSelfPermission(GRANTED_PERMISSION);
        assertEquals(PackageManager.PERMISSION_GRANTED, retValue);

        retValue = mContext.checkCallingOrSelfPermission(NOT_GRANTED_PERMISSION);
        assertEquals(PackageManager.PERMISSION_DENIED, retValue);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testCheckCallingOrSelfPermission_ipc"	"CtsContentTestCases"	"1: granted"	"([3:/android/content/cts/ContextTest.java]:[granted]:[3]:method_text:[ finally {            mContext.unbindService(mBinderPermissionTestConnection);        }    }   ]) :|: public void testCheckCallingOrSelfPermission_ipc() throws Exception {
        bindBinderPermissionTestService();
        try {
            int retValue = mBinderPermissionTestService.doCheckCallingOrSelfPermission(
                    GRANTED_PERMISSION);
            assertEquals(PackageManager.PERMISSION_GRANTED, retValue);

            retValue = mBinderPermissionTestService.doCheckCallingOrSelfPermission(
                    NOT_GRANTED_PERMISSION);
            assertEquals(PackageManager.PERMISSION_DENIED, retValue);
        } finally {
            mContext.unbindService(mBinderPermissionTestConnection);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testEnforceCallingOrSelfPermission_noIpc"	"CtsContentTestCases"	"1: granted"	"([5:/android/content/cts/ContextTest.java]:[granted]:[5]:method_text:[mission shouldn't be granted."");        } catch (SecurityException expected) {        }    }   ]) :|: public void testEnforceCallingOrSelfPermission_noIpc() {
        // There's no ongoing Binder call, so this package's permissions are checked.
        mContext.enforceCallingOrSelfPermission(
                GRANTED_PERMISSION, ""permission isn't granted"");

        try {
            mContext.enforceCallingOrSelfPermission(
                    NOT_GRANTED_PERMISSION, ""permission isn't granted"");
            fail(""Permission shouldn't be granted."");
        } catch (SecurityException expected) {
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testEnforceCallingOrSelfPermission_ipc"	"CtsContentTestCases"	"1: granted"	"([3:/android/content/cts/ContextTest.java]:[granted]:[3]:method_text:[ finally {            mContext.unbindService(mBinderPermissionTestConnection);        }    }   ]) :|: public void testEnforceCallingOrSelfPermission_ipc() throws Exception {
        bindBinderPermissionTestService();
        try {
            mBinderPermissionTestService.doEnforceCallingOrSelfPermission(GRANTED_PERMISSION);

            try {
                mBinderPermissionTestService.doEnforceCallingOrSelfPermission(
                        NOT_GRANTED_PERMISSION);
                fail(""Permission shouldn't be granted."");
            } catch (SecurityException expected) {
            }
        } finally {
            mContext.unbindService(mBinderPermissionTestConnection);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testCheckCallingPermission_noIpc"	"CtsContentTestCases"	"1: granted"	"([1:/android/content/cts/ContextTest.java]:[granted]:[1]:method_text:[on(GRANTED_PERMISSION);        assertEquals(PackageManager.PERMISSION_DENIED, retValue);    }   ]) :|: public void testCheckCallingPermission_noIpc() {
        // Denied because no IPC is active.
        int retValue = mContext.checkCallingPermission(GRANTED_PERMISSION);
        assertEquals(PackageManager.PERMISSION_DENIED, retValue);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testEnforceCallingPermission_noIpc"	"CtsContentTestCases"	"1: granted"	"([1:/android/content/cts/ContextTest.java]:[granted]:[1]:method_text:[     // Currently no IPC is handled by this process, this exception is expected        }    }   ]) :|: public void testEnforceCallingPermission_noIpc() {
        try {
            mContext.enforceCallingPermission(
                    GRANTED_PERMISSION,
                    ""enforceCallingPermission is not working without possessing an IPC."");
            fail(""enforceCallingPermission is not working without possessing an IPC."");
        } catch (SecurityException e) {
            // Currently no IPC is handled by this process, this exception is expected
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testEnforceCallingPermission_ipc"	"CtsContentTestCases"	"1: granted"	"([3:/android/content/cts/ContextTest.java]:[granted]:[3]:method_text:[ finally {            mContext.unbindService(mBinderPermissionTestConnection);        }    }   ]) :|: public void testEnforceCallingPermission_ipc() throws Exception {
        bindBinderPermissionTestService();
        try {
            mBinderPermissionTestService.doEnforceCallingPermission(GRANTED_PERMISSION);

            try {
                mBinderPermissionTestService.doEnforceCallingPermission(NOT_GRANTED_PERMISSION);
                fail(""Permission shouldn't be granted."");
            } catch (SecurityException expected) {
            }
        } finally {
            mContext.unbindService(mBinderPermissionTestConnection);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testCheckCallingPermission_ipc"	"CtsContentTestCases"	"1: granted"	"([3:/android/content/cts/ContextTest.java]:[granted]:[3]:method_text:[BinderPermissionTestService != null; // Service was bound.            }        }.run();    }   ]) :|: public void testCheckCallingPermission_ipc() throws Exception {
        bindBinderPermissionTestService();
        try {
            int returnValue = mBinderPermissionTestService.doCheckCallingPermission(
                    GRANTED_PERMISSION);
            assertEquals(PackageManager.PERMISSION_GRANTED, returnValue);

            returnValue = mBinderPermissionTestService.doCheckCallingPermission(
                    NOT_GRANTED_PERMISSION);
            assertEquals(PackageManager.PERMISSION_DENIED, returnValue);
        } finally {
            mContext.unbindService(mBinderPermissionTestConnection);
        }
    }

    private void bindBinderPermissionTestService() {
        Intent intent = new Intent(mContext, IBinderPermissionTestService.class);
        intent.setComponent(new ComponentName(
                ""com.android.cts"", ""com.android.cts.BinderPermissionTestService""));

        mBinderPermissionTestConnection = new ServiceConnection() {
            @Override
            public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
                mBinderPermissionTestService =
                        IBinderPermissionTestService.Stub.asInterface(iBinder);
            }

            @Override
            public void onServiceDisconnected(ComponentName componentName) {
            }
        };

        assertTrue(""Service not bound"", mContext.bindService(
                intent, mBinderPermissionTestConnection, Context.BIND_AUTO_CREATE));

        new PollingCheck(15 * 1000) {
            protected boolean check() {
                return mBinderPermissionTestService != null; // Service was bound.
            }
        }.run();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testCheckUriPermissions"	"CtsContentTestCases"	"1: granted"	"([2:/android/content/cts/ContextTest.java]:[granted]:[2]:method_text:[ls(PERMISSION_DENIED, retValue[0]);        assertEquals(PERMISSION_DENIED, retValue[1]);    }   ]) :|: public void testCheckUriPermissions() {
        List<Uri> uris = new ArrayList<>();
        Uri uri1 = Uri.parse(""content://ctstest1"");
        uris.add(uri1);
        Uri uri2 = Uri.parse(""content://ctstest2"");
        uris.add(uri2);

        // Root has access to all URIs
        int[] retValue = mContext.checkUriPermissions(uris, Binder.getCallingPid(), 0,
                Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
        assertEquals(retValue.length, 2);
        assertEquals(PERMISSION_GRANTED, retValue[0]);
        assertEquals(PERMISSION_GRANTED, retValue[1]);

        retValue = mContext.checkUriPermissions(uris, Binder.getCallingPid(),
                Binder.getCallingUid(), Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
        assertEquals(retValue.length, 2);
        // This package does not have access to the given URIs
        assertEquals(PERMISSION_DENIED, retValue[0]);
        assertEquals(PERMISSION_DENIED, retValue[1]);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testCheckUriPermission1"	"CtsContentTestCases"	"1: granted"	"([1:/android/content/cts/ContextTest.java]:[granted]:[1]:method_text:[_WRITE_URI_PERMISSION);        assertEquals(PackageManager.PERMISSION_DENIED, retValue);    }   ]) :|: public void testCheckUriPermission1() {
        Uri uri = Uri.parse(""content://ctstest"");

        int retValue = mContext.checkUriPermission(uri, Binder.getCallingPid(), 0,
                Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
        assertEquals(PackageManager.PERMISSION_GRANTED, retValue);

        retValue = mContext.checkUriPermission(uri, Binder.getCallingPid(),
                Binder.getCallingUid(), Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
        assertEquals(PackageManager.PERMISSION_DENIED, retValue);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContextTest"	"testCheckUriPermission2"	"CtsContentTestCases"	"1: granted"	"([5:/android/content/cts/ContextTest.java]:[granted]:[5]:method_text:[_WRITE_URI_PERMISSION);        assertEquals(PackageManager.PERMISSION_DENIED, retValue);    }   ]) :|: public void testCheckUriPermission2() {
        Uri uri = Uri.parse(""content://ctstest"");

        int retValue = mContext.checkUriPermission(uri, NOT_GRANTED_PERMISSION,
                NOT_GRANTED_PERMISSION, Binder.getCallingPid(), 0,
                Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
        assertEquals(PackageManager.PERMISSION_GRANTED, retValue);

        retValue = mContext.checkUriPermission(uri, NOT_GRANTED_PERMISSION,
                NOT_GRANTED_PERMISSION, Binder.getCallingPid(), Binder.getCallingUid(),
                Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
        assertEquals(PackageManager.PERMISSION_DENIED, retValue);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ContentResolverTest"	"testCheckUriPermission"	"CtsContentTestCases"	"1: granted"	"([1:/android/content/cts/ContentResolverTest.java]:[granted]:[1]:method_text:[        TABLE1_URI, android.os.Process.myUid(), Intent.FLAG_GRANT_WRITE_URI_PERMISSION));    }   ]) :|: public void testCheckUriPermission() {
        assertEquals(PackageManager.PERMISSION_GRANTED, mContentResolver.checkUriPermission(
                TABLE1_URI, android.os.Process.myUid(), Intent.FLAG_GRANT_READ_URI_PERMISSION));
        assertEquals(PackageManager.PERMISSION_DENIED, mContentResolver.checkUriPermission(
                TABLE1_URI, android.os.Process.myUid(), Intent.FLAG_GRANT_WRITE_URI_PERMISSION));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentResolverTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.IntentTest"	"testResolveActivityMultipleMatch"	"CtsContentTestCases"	"1: granted"	"([1:/android/content/cts/IntentTest.java]:[granted]:[1]:method_text:[        + "" doesn't have SET_PREFERRED_APPLICATIONS permission"");            }        }    }   ]) :|: public void testResolveActivityMultipleMatch() {
        final Intent intent = new Intent(""android.content.cts.action.TEST_ACTION"");

        // Should have multiple activities, resulting in resolver dialog
        final ComponentName target = intent.resolveActivity(mPm);
        final String pkgName = target.getPackageName();
        assertFalse(""android.content.cts"".equals(pkgName));

        // Whoever they are must be able to set preferred activities
        if (!""android"".equals(pkgName)) {
            if (mPm.checkPermission(android.Manifest.permission.SET_PREFERRED_APPLICATIONS, pkgName)
                    != PackageManager.PERMISSION_GRANTED) {
                fail(""Resolved target "" + target
                        + "" doesn't have SET_PREFERRED_APPLICATIONS permission"");
            }
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.cts.ReadableFileReceiverActivity"	"finish"	"CtsContentTestCases"	"1: granted"	"([1:/android/content/cts/ReadableFileReceiverActivity.java]:[granted]:[1]:method_text:[tring(buffer);        return ReadableUriExtraToClipDataTest.TEST_INPUT.equals(fileContents);    }]) :|: public void test/*
 *.
 */
package android.content.cts;

import android.app.Activity;
import android.content.ClipData;
import android.content.ClipData.Item;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;

public class ReadableFileReceiverActivity extends Activity {
    public static final String ACTION_CONFIRM_READ_SUCCESS
        = ""android.content.cts.action.CONFIRM_READ_SUCCESS"";
    private static final String TAG = ReadableUriExtraToClipDataTest.TAG;

    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Intent intent = getIntent();

        // Check action.
        String action = intent.getAction();
        if (Intent.ACTION_SEND.equals(action)
                || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
            readFilesFromClipDataUri(intent);
        }

        finish();
    }

    // Sends ACTION_FILE_READY intent when read from clipdata uri is succesful
    // and read data matches the data written by the test.
    private void readFilesFromClipDataUri(Intent intent) {
        if ((intent.getFlags() & Intent.FLAG_GRANT_READ_URI_PERMISSION) == 0) {

            // Note: since this activity is in the same package as the test we can read from the
            // file regardless of this permission, but in general this permission is required.
            Log.e(TAG, ""Intent.FLAG_GRANT_READ_URI_PERMISSION was not granted."");
            return;
        }

        List<File> files = getFilesFromIntent(intent);
        if (files == null) {
            Log.e(TAG, ""Could not get files from clipdata."");
            return;
        }
        for (File file : files) {
            if (!testFileContents(file)) {
                Log.e(TAG, ""File contents of "" + file.getPath()
                        + """	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ReadableFileReceiverActivity.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PackageManagerTest"	"testGetInfo"	"CtsContentTestCases"	"1: granted"	"([2:/android/content/pm/cts/PackageManagerTest.java]:[granted]:[2]:method_text:[e PackageManager#addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName)     */   ]) :|: 
    public void testGetInfo() throws NameNotFoundException {
        // Test getApplicationInfo, getText
        ApplicationInfo appInfo = mPackageManager.getApplicationInfo(PACKAGE_NAME, 0);
        int discriptionRes = R.string.hello_android;
        String expectedDisciptionRes = ""Hello, Android!"";
        CharSequence appText = mPackageManager.getText(PACKAGE_NAME, discriptionRes, appInfo);
        assertEquals(expectedDisciptionRes, appText);
        ComponentName activityName = new ComponentName(PACKAGE_NAME, ACTIVITY_NAME);
        ComponentName serviceName = new ComponentName(PACKAGE_NAME, SERVICE_NAME);
        ComponentName receiverName = new ComponentName(PACKAGE_NAME, RECEIVER_NAME);
        ComponentName instrName = new ComponentName(PACKAGE_NAME, INSTRUMENT_NAME);

        // Test getPackageInfo
        PackageInfo packageInfo = mPackageManager.getPackageInfo(PACKAGE_NAME,
                PackageManager.GET_INSTRUMENTATION);
        assertEquals(PACKAGE_NAME, packageInfo.packageName);

        // Test getApplicationInfo, getApplicationLabel
        String appLabel = ""Android TestCase"";
        assertEquals(appLabel, mPackageManager.getApplicationLabel(appInfo));
        assertEquals(PACKAGE_NAME, appInfo.processName);

        // Test getServiceInfo
        assertEquals(SERVICE_NAME, mPackageManager.getServiceInfo(serviceName,
                PackageManager.GET_META_DATA).name);

        // Test getReceiverInfo
        assertEquals(RECEIVER_NAME, mPackageManager.getReceiverInfo(receiverName, 0).name);

        // Test getPackageArchiveInfo
        final String apkRoute = mContext.getPackageCodePath();
        final String apkName = mContext.getPackageName();
        assertEquals(apkName, mPackageManager.getPackageArchiveInfo(apkRoute, 0).packageName);

        // Test getPackagesForUid, getNameForUid
        checkPackagesNameForUid(PACKAGE_NAME, mPackageManager.getPackagesForUid(appInfo.uid));
        assertEquals(PACKAGE_NAME, mPackageManager.getName"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PackageManagerTest"	"testCheckPermissionGranted"	"CtsContentTestCases"	"1: granted"	"([3:/android/content/pm/cts/PackageManagerTest.java]:[granted]:[3]:method_text:[                mPackageManager.checkPermission(GRANTED_PERMISSION_NAME, PACKAGE_NAME));    }   ]) :|: 
    public void testCheckPermissionGranted() {
        assertEquals(PackageManager.PERMISSION_GRANTED,
                mPackageManager.checkPermission(GRANTED_PERMISSION_NAME, PACKAGE_NAME));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PackageManagerTest"	"testCheckPermissionNotGranted"	"CtsContentTestCases"	"1: granted"	"([2:/android/content/pm/cts/PackageManagerTest.java]:[granted]:[2]:method_text:[             mPackageManager.checkPermission(NOT_GRANTED_PERMISSION_NAME, PACKAGE_NAME));    }   ]) :|: 
    public void testCheckPermissionNotGranted() {
        assertEquals(PackageManager.PERMISSION_DENIED,
                mPackageManager.checkPermission(NOT_GRANTED_PERMISSION_NAME, PACKAGE_NAME));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PackageManagerTest"	"testGetInstalledPackages"	"CtsContentTestCases"	"1: granted"	"([2:/android/content/pm/cts/PackageManagerTest.java]:[granted]:[2]:method_text:[als(PACKAGE_NAME, receiver.packageName);    }    // Tests that other packages can be queried.   ]) :|: 
    public void testGetInstalledPackages() throws Exception {
        List<PackageInfo> pkgs = mPackageManager.getInstalledPackages(GET_META_DATA
                | GET_PERMISSIONS | GET_ACTIVITIES | GET_PROVIDERS | GET_SERVICES | GET_RECEIVERS);

        PackageInfo pkgInfo = findPackageOrFail(pkgs, PACKAGE_NAME);
        assertTestPackageInfo(pkgInfo);
    }

    /**
     * Asserts that the pkgInfo object correctly describes the {@link #PACKAGE_NAME} package.
     */
    private void assertTestPackageInfo(PackageInfo pkgInfo) {
        // Check metadata
        ApplicationInfo appInfo = pkgInfo.applicationInfo;
        assertEquals(APPLICATION_NAME, appInfo.name);
        assertEquals(""Android TestCase"", appInfo.loadLabel(mPackageManager));
        assertEquals(PACKAGE_NAME, appInfo.packageName);
        assertTrue(appInfo.enabled);
        // The process name defaults to the package name when not set.
        assertEquals(PACKAGE_NAME, appInfo.processName);
        assertEquals(0, appInfo.flags & FLAG_SYSTEM);
        assertEquals(FLAG_INSTALLED, appInfo.flags & FLAG_INSTALLED);
        assertEquals(FLAG_HAS_CODE, appInfo.flags & FLAG_HAS_CODE);

        // Check required permissions
        List<String> requestedPermissions = Arrays.asList(pkgInfo.requestedPermissions);
        assertThat(requestedPermissions).containsAtLeast(
                ""android.permission.MANAGE_ACCOUNTS"",
                ""android.permission.ACCESS_NETWORK_STATE"",
                ""android.content.cts.permission.TEST_GRANTED"");

        // Check usesPermissionFlags
        for (int i = 0; i < pkgInfo.requestedPermissions.length; i++) {
            final String name = pkgInfo.requestedPermissions[i];
            final int flags = pkgInfo.requestedPermissionsFlags[i];
            final boolean neverForLocation = (flags
                    & PackageInfo.REQUESTED_PERMISSION_NEVER_FOR_LOCATION) != 0;
            if (""android.content.cts.permission.TEST_GRANTED"".equals(name)) {"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PackageManagerTest"	"testGetPackagesHoldingPermissions"	"CtsContentTestCases"	"1: granted"	"([2:/android/content/pm/cts/PackageManagerTest.java]:[granted]:[2]:method_text:[                fail(""Must not return package "" + PACKAGE_NAME);            }        }    }   ]) :|: 
    public void testGetPackagesHoldingPermissions() {
        List<PackageInfo> pkgInfos = mPackageManager.getPackagesHoldingPermissions(
                new String[] { GRANTED_PERMISSION_NAME }, 0);
        findPackageOrFail(pkgInfos, PACKAGE_NAME);

        pkgInfos = mPackageManager.getPackagesHoldingPermissions(
                new String[] { NOT_GRANTED_PERMISSION_NAME }, 0);
        for (PackageInfo pkgInfo : pkgInfos) {
            if (PACKAGE_NAME.equals(pkgInfo.packageName)) {
                fail(""Must not return package "" + PACKAGE_NAME);
            }
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PackageManagerTest"	"testInstallTestOnlyPackagePermission_onlyGrantedToShell"	"CtsContentTestCases"	"1: granted"	"([1:/android/content/pm/cts/PackageManagerTest.java]:[granted]:[1]:method_text:[asSize(1);        assertThat(packages.get(0).packageName).isEqualTo(SHELL_PACKAGE_NAME);    }   ]) :|: 
    public void testInstallTestOnlyPackagePermission_onlyGrantedToShell() {
        List<PackageInfo> packages = mPackageManager.getPackagesHoldingPermissions(
                new String[]{INSTALL_TEST_ONLY_PACKAGE}, /* flags= */ 0);

        assertThat(packages).hasSize(1);
        assertThat(packages.get(0).packageName).isEqualTo(SHELL_PACKAGE_NAME);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PackageManagerTest"	"testGetPermissionInfo"	"CtsContentTestCases"	"1: RECORD_AUDIO"	"([1:/android/content/pm/cts/PackageManagerTest.java]:[RECORD_AUDIO]:[1]:method_text:[             permissionInfo.getProtectionFlags() & PermissionInfo.PROTECTION_FLAG_APPOP);    }   ]) :|: 
    public void testGetPermissionInfo() throws NameNotFoundException {
        // Check a normal permission.
        String permissionName = ""android.permission.INTERNET"";
        PermissionInfo permissionInfo = mPackageManager.getPermissionInfo(permissionName, 0);
        assertEquals(permissionName, permissionInfo.name);
        assertEquals(PermissionInfo.PROTECTION_NORMAL, permissionInfo.getProtection());

        // Check a dangerous (runtime) permission.
        permissionName = ""android.permission.RECORD_AUDIO"";
        permissionInfo = mPackageManager.getPermissionInfo(permissionName, 0);
        assertEquals(permissionName, permissionInfo.name);
        assertEquals(PermissionInfo.PROTECTION_DANGEROUS, permissionInfo.getProtection());
        assertNotNull(permissionInfo.group);

        // Check a signature permission.
        permissionName = ""android.permission.MODIFY_PHONE_STATE"";
        permissionInfo = mPackageManager.getPermissionInfo(permissionName, 0);
        assertEquals(permissionName, permissionInfo.name);
        assertEquals(PermissionInfo.PROTECTION_SIGNATURE, permissionInfo.getProtection());

        // Check a special access (appop) permission.
        permissionName = ""android.permission.SYSTEM_ALERT_WINDOW"";
        permissionInfo = mPackageManager.getPermissionInfo(permissionName, 0);
        assertEquals(permissionName, permissionInfo.name);
        assertEquals(PermissionInfo.PROTECTION_SIGNATURE, permissionInfo.getProtection());
        assertEquals(PermissionInfo.PROTECTION_FLAG_APPOP,
                permissionInfo.getProtectionFlags() & PermissionInfo.PROTECTION_FLAG_APPOP);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.ResourcesHardeningTest"	"isEmpty"	"CtsContentTestCases"	"2: silent silently"	"([1:/android/content/pm/cts/ResourcesHardeningTest.java]:[silently]:[1]:method_text:[os.isEmpty());                mRestrictedRanges.put(apk, infos);            }        }    }   ]) :|: /*
 *.
 */

package android.content.pm.cts;

import static android.content.pm.cts.PackageManagerShellCommandIncrementalTest.checkIncrementalDeliveryFeature;
import static android.content.pm.cts.PackageManagerShellCommandIncrementalTest.isAppInstalled;
import static android.content.pm.cts.PackageManagerShellCommandIncrementalTest.uninstallPackageSilently;

import static org.hamcrest.core.IsInstanceOf.instanceOf;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import android.app.ActivityManager;
import android.app.UiAutomation;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.platform.test.annotations.AppModeFull;
import android.util.ArrayMap;

import androidx.test.InstrumentationRegistry;
import androidx.test.filters.LargeTest;
import androidx.test.runner.AndroidJUnit4;

import com.android.compatibility.common.util.MatcherUtils;
import com.android.incfs.install.IBlockFilter;
import com.android.incfs.install.IncrementalInstallSession;
import com.android.incfs.install.PendingBlock;

import com.example.helloworld.lib.TestUtils;

import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;

@RunWith(AndroidJUnit4.class)
@AppModeFull
@LargeTest
public class ResourcesHardeningTest {
    private static final String TEST_APK_PATH = ""/data/local/tmp/cts/content/"";"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/ResourcesHardeningTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.ResourcesHardeningTest"	"TestBlockFilter"	"CtsContentTestCases"	"2: silent silently"	"([1:/android/content/pm/cts/ResourcesHardeningTest.java]:[silently]:[1]:method_text:[ {        return (ActivityManager) getContext().getSystemService(Context.ACTIVITY_SERVICE);    }}]) :|: 
    public void checkOpenFdRemote() throws Exception {
        // Failing to read missing blocks through a file descriptor using read/pread causes an
        // IOException to be thrown.
        testIncrementalOwnPackageResources(TestUtils.TEST_OPEN_FILE_FD, false /* expectCrash */);
    }

    private interface TestFunction {
        void apply(Resources res, TestUtils.AssertionType type) throws Exception;
    }

    /**
     * Installs a package incrementally and tests that retrieval of that package's resources from
     * within this process does not crash this process and instead falls back to some default
     * behavior.
     */
    private void testIncrementalForeignPackageResources(TestFunction test) throws Exception {
        try (ShellInstallSession session = startInstallSession()) {
            test.apply(session.getPackageResources(), TestUtils.AssertionType.ASSERT_SUCCESS);
        }
        try (ShellInstallSession session = startInstallSession()) {
            session.enableBlockRestrictions();
            test.apply(session.getPackageResources(), TestUtils.AssertionType.ASSERT_READ_FAILURE);
        }
    }

    /**
     * Installs a package incrementally and tests that the package crashes when it fails to retrieve
     * its own resources due to incremental installation.
     */
    private void testIncrementalOwnPackageResources(String testName, boolean expectCrash)
            throws Exception {
        try (RemoteTest session = new RemoteTest(startInstallSession(), testName)) {
            session.mSession.getPackageResources();
            session.start(true /* assertSuccess */);
        }

        try (RemoteTest session = new RemoteTest(startInstallSession(), testName)) {
            session.mSession.getPackageResources();
            session.mSession.enableBlockRestrictions();
            if (expectCrash) {
                MatcherUtils.assertThrows(instanceOf(RemoteProcessCrashedException.class),
                        () -> session.start(f"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/ResourcesHardeningTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PermissionFeatureTest"	"testPermissionRequiredFeatureDefined"	"CtsContentTestCases"	"1: granted"	"([1:/android/content/pm/cts/PermissionFeatureTest.java]:[granted]:[1]:method_text:[ined() {        assertPermissionGranted(""android.content.cts.REQUIRED_FEATURE_DEFINED"");    }   ]) :|: public void testPermissionRequiredFeatureDefined() {
        assertPermissionGranted(""android.content.cts.REQUIRED_FEATURE_DEFINED"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionFeatureTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PermissionFeatureTest"	"testPermissionRequiredFeatureDefined_usingTags"	"CtsContentTestCases"	"1: granted"	"([1:/android/content/pm/cts/PermissionFeatureTest.java]:[granted]:[1]:method_text:[gs() {        assertPermissionGranted(""android.content.cts.REQUIRED_FEATURE_DEFINED_2"");    }   ]) :|: public void testPermissionRequiredFeatureDefined_usingTags() {
        assertPermissionGranted(""android.content.cts.REQUIRED_FEATURE_DEFINED_2"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionFeatureTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PermissionFeatureTest"	"testPermissionRequiredNotFeatureUndefined"	"CtsContentTestCases"	"1: granted"	"([1:/android/content/pm/cts/PermissionFeatureTest.java]:[granted]:[1]:method_text:[ {        assertPermissionGranted(""android.content.cts.REQUIRED_NOT_FEATURE_UNDEFINED"");    }   ]) :|: public void testPermissionRequiredNotFeatureUndefined() {
        assertPermissionGranted(""android.content.cts.REQUIRED_NOT_FEATURE_UNDEFINED"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionFeatureTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PermissionFeatureTest"	"testPermissionRequiredNotFeatureUndefined_usingTags"	"CtsContentTestCases"	"1: granted"	"([1:/android/content/pm/cts/PermissionFeatureTest.java]:[granted]:[1]:method_text:[        assertPermissionGranted(""android.content.cts.REQUIRED_NOT_FEATURE_UNDEFINED_2"");    }   ]) :|: public void testPermissionRequiredNotFeatureUndefined_usingTags() {
        assertPermissionGranted(""android.content.cts.REQUIRED_NOT_FEATURE_UNDEFINED_2"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionFeatureTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PermissionFeatureTest"	"testPermissionRequiredMultiGrant"	"CtsContentTestCases"	"1: granted"	"([1:/android/content/pm/cts/PermissionFeatureTest.java]:[granted]:[1]:method_text:[ltiGrant() {        assertPermissionGranted(""android.content.cts.REQUIRED_MULTI_GRANT"");    }   ]) :|: public void testPermissionRequiredMultiGrant() {
        assertPermissionGranted(""android.content.cts.REQUIRED_MULTI_GRANT"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionFeatureTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PermissionFeatureTest"	"testPermissionRequiredMultiGrant_usingTags"	"CtsContentTestCases"	"1: granted"	"([1:/android/content/pm/cts/PermissionFeatureTest.java]:[granted]:[1]:method_text:[ngTags() {        assertPermissionGranted(""android.content.cts.REQUIRED_MULTI_GRANT_2"");    }   ]) :|: public void testPermissionRequiredMultiGrant_usingTags() {
        assertPermissionGranted(""android.content.cts.REQUIRED_MULTI_GRANT_2"");
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionFeatureTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PermissionFeatureTest"	"testPermissionRequiredMultiGrant_usingTagsAndAttributes"	"CtsContentTestCases"	"1: granted"	"([3:/android/content/pm/cts/PermissionFeatureTest.java]:[granted]:[3]:method_text:[ISSION_DENIED,                pm.checkPermission(permName, getContext().getPackageName()));    }}]) :|: public void testPermissionRequiredMultiGrant_usingTagsAndAttributes() {
        assertPermissionGranted(""android.content.cts.REQUIRED_MULTI_GRANT_3"");
    }

    public void assertPermissionGranted(String permName) {
        final PackageManager pm = getContext().getPackageManager();
        assertEquals(PackageManager.PERMISSION_GRANTED,
                pm.checkPermission(permName, getContext().getPackageName()));
    }

    public void assertPermissionDenied(String permName) {
        final PackageManager pm = getContext().getPackageManager();
        assertEquals(PackageManager.PERMISSION_DENIED,
                pm.checkPermission(permName, getContext().getPackageName()));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionFeatureTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PackageManagerShellCommandTest"	"testRemoveFileApiV2"	"CtsContentTestCases"	"2: silent silently"	"([1:/android/content/pm/cts/PackageManagerShellCommandTest.java]:[silently]:[1]:method_text:[mand(                ""pm uninstall "" + packageName + "" "" + String.join("" "", splitNames)));    }}]) :|: 
    public void testRemoveFileApiV2() throws Exception {
        if (!mStreaming) {
            return;
        }

        getUiAutomation().adoptShellPermissionIdentity();
        try {
            final PackageInstaller installer = getPackageInstaller();

            final SessionParams params = new SessionParams(SessionParams.MODE_INHERIT_EXISTING);
            params.setAppPackageName(""com.package.name"");
            final ComponentName componentName = new ComponentName(""foo"", ""bar"");
            final String args = ""args"";
            params.setDataLoaderParams(
                    mIncremental ? DataLoaderParams.forIncremental(componentName, args)
                            : DataLoaderParams.forStreaming(componentName, args));

            final int sessionId = installer.createSession(params);
            PackageInstaller.Session session = installer.openSession(sessionId);

            session.addFile(LOCATION_DATA_APP, ""base.apk"", 123, ""123"".getBytes(), null);
            String[] files = session.getNames();
            assertEquals(1, files.length);
            assertEquals(""base.apk"", files[0]);

            session.removeFile(LOCATION_DATA_APP, ""base.apk"");
            files = session.getNames();
            assertEquals(2, files.length);
            assertEquals(""base.apk"", files[0]);
            assertEquals(""base.apk.removed"", files[1]);

            installer.abandonSession(sessionId);
        } finally {
            getUiAutomation().dropShellPermissionIdentity();
        }
    }

    private String createUpdateSession(String packageName) throws IOException {
        return createSession(""-p "" + packageName);
    }

    private String createSession(String arg) throws IOException {
        final String prefix = ""Success: created install session ["";
        final String suffix = ""]\n"";
        final String commandResult = executeShellCommand(""pm install-create "" + arg);
        assertTrue(commandResult, commandResult.startsWith(prefix));
        asse"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerShellCommandTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.ChecksumsTest"	"testInstallerChecksumsDuplicate"	"CtsContentTestCases"	"2: silent silently"	"([1:/android/content/pm/cts/ChecksumsTest.java]:[silently]:[1]:method_text:[     checkFailure(result, PackageInstaller.STATUS_FAILURE, expectedStatusMessage);        }    }}]) :|: 
    public void testInstallerChecksumsDuplicate() throws Exception {
        getUiAutomation().adoptShellPermissionIdentity();
        try {
            final PackageInstaller installer = getPackageInstaller();
            final SessionParams params = new SessionParams(SessionParams.MODE_FULL_INSTALL);

            final int sessionId = installer.createSession(params);
            Session session = installer.openSession(sessionId);
            writeFileToSession(session, ""file"", TEST_FIXED_APK);
            session.setChecksums(""file"", Arrays.asList(TEST_FIXED_APK_DIGESTS), NO_SIGNATURE);
            try {
                session.setChecksums(""file"", Arrays.asList(TEST_FIXED_APK_DIGESTS), NO_SIGNATURE);
                Assert.fail(""setChecksums should throw exception."");
            } catch (IllegalStateException e) {
                // expected
            }
        } finally {
            getUiAutomation().dropShellPermissionIdentity();
        }
    }

    private List<Certificate> convertSignaturesToCertificates(Signature[] signatures) {
        try {
            final CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
            ArrayList<Certificate> certs = new ArrayList<>(signatures.length);
            for (Signature signature : signatures) {
                final InputStream is = new ByteArrayInputStream(signature.toByteArray());
                final X509Certificate cert = (X509Certificate) cf.generateCertificate(is);
                certs.add(cert);
            }
            return certs;
        } catch (CertificateException e) {
            throw ExceptionUtils.propagate(e);
        }
    }

    private void installApkWithChecksums(Checksum[] checksums) throws Exception {
        installApkWithChecksums(""file"", ""file"", checksums);
    }

    private void installApkWithChecksums(String apkName, String checksumsName, Checksum[] checksums)
            throws Exception {
        CommitIntentReceiver.checkSuccess(
                installApkW"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/ChecksumsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PackageManagerShellCommandIncrementalTest"	"testInstallWithMissingBlocks"	"CtsContentTestCases"	"2: silent silently"	"([1:/android/content/pm/cts/PackageManagerShellCommandIncrementalTest.java]:[silently]:[1]:method_text:[xception {            return new CompressedPendingBlock(block);        }    }    @LargeTest   ]) :|: 
    public void testInstallWithMissingBlocks() throws Exception {
        setDeviceProperty(""incfs_default_timeouts"", ""0:0:0"");
        setDeviceProperty(""known_digesters_list"", CTS_PACKAGE_NAME);
        setSystemProperty(""debug.incremental.always_enable_read_timeouts_for_system_dataloaders"",
                ""0"");

        final long randomSeed = System.currentTimeMillis();
        Log.i(TAG, ""Randomizing missing blocks with seed: "" + randomSeed);
        final Random random = new Random(randomSeed);

        // TODO: add detection of orphaned IncFS instances after failed installations

        final int blockSize = 4096;
        final int retries = 7; // 7 * 3s + leeway ~= 30secs of test timeout

        final File apk = new File(createApkPath(TEST_APK));
        final int blocks = (int) (apk.length() / blockSize);

        for (int i = 0; i < retries; ++i) {
            final int skipBlock = random.nextInt(blocks);
            Log.i(TAG, ""skipBlock: "" + skipBlock + "" out of "" + blocks);
            try {
                installWithBlockFilter((block -> block.getType() == PendingBlock.Type.SIGNATURE_TREE
                        || block.getBlockIndex() != skipBlock));
                if (isAppInstalled(TEST_APP_PACKAGE)) {
                    uninstallPackageSilently(TEST_APP_PACKAGE);
                }
            } catch (RuntimeException re) {
                Log.i(TAG, ""RuntimeException: "", re);
                assertTrue(re.toString(), re.getCause() instanceof IOException);
            } catch (IOException e) {
                Log.i(TAG, ""IOException: "", e);
                throw new IOException(""Skipped block: "" + skipBlock + "", randomSeed: "" + randomSeed,
                        e);
            }
        }
    }

    public void installWithBlockFilter(IBlockFilter blockFilter) throws Exception {
        final String apk = createApkPath(TEST_APK);
        final String idsig = createApkPath(TEST_APK_IDSIG);
        mSession =
                new IncrementalI"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerShellCommandIncrementalTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.PackageManagerShellCommandIncrementalTest"	"testInstallSysTraceNoReadlogs"	"CtsContentTestCases"	"2: silent silently"	"([3:/android/content/pm/cts/PackageManagerShellCommandIncrementalTest.java]:[silently]:[3]:method_text:[ng value) throws Exception {        executeShellCommand(""setprop "" + name + "" "" + value);    }}]) :|: 
    public void testInstallSysTraceNoReadlogs() throws Exception {
        setSystemProperty(""debug.incremental.enforce_readlogs_max_interval_for_system_dataloaders"",
                ""1"");
        setSystemProperty(""debug.incremental.readlogs_max_interval_sec"", ""0"");

        final int atraceDumpIterations = 30;
        final int atraceDumpDelayMs = 100;
        final String expected = ""|page_read:"";

        // We don't expect any readlogs with 0sec interval.
        assertFalse(
                ""Page reads ("" + expected + "") were found in atrace dump"",
                checkSysTraceForSubstring(TEST_APK, expected, atraceDumpIterations,
                        atraceDumpDelayMs));
    }

    private boolean checkSysTraceForSubstring(String testApk, final String expected,
            int atraceDumpIterations, int atraceDumpDelayMs) throws Exception {
        final int installIterations = 3;
        return checkSysTrace(
                installIterations,
                atraceDumpIterations,
                atraceDumpDelayMs,
                () -> installPackage(testApk),
                (stdout) -> stdout.contains(expected));
    }

    private boolean checkSysTrace(
            int installIterations,
            int atraceDumpIterations,
            int atraceDumpDelayMs,
            final Callable<Void> installer,
            final Function<String, Boolean> checker)
            throws Exception {
        final int beforeReadDelayMs = 1000;

        final CompletableFuture<Boolean> result = new CompletableFuture<>();
        final Thread readFromProcess = new Thread(() -> {
            try {
                executeShellCommand(""atrace --async_start -b 10240 -c adb"");
                try {
                    for (int i = 0; i < atraceDumpIterations; ++i) {
                        final String stdout = executeShellCommand(""atrace --async_dump"");
                        try {
                            if (checker.apply(stdout)) {
                                re"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerShellCommandIncrementalTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.FeatureTest"	"testManagedProfileSupported"	"CtsContentTestCases"	"2: managed_users admin"	"([2:/android/content/pm/cts/FeatureTest.java]:[admin]:[2]:method_text:[GbDevice()    private boolean lessThanTwoGbDevice() {        return mTotalMemory < TWO_GB;    }}]) :|: public void testManagedProfileSupported() throws Exception {
        // Managed profiles only required if device admin feature is supported
        if (!mSupportsDeviceAdmin) {
            Log.w(TAG, ""Skipping testManagedProfileSupported"");
            return;
        }

        if (mSupportsManagedProfiles) {
            // Managed profiles supported nothing to check.
            return;
        }

        // Managed profiles only required for handheld devices
        if (!isHandheldDevice()) {
            return;
        }

        // Skip the tests for non-emulated sdcard
        if (!Environment.isExternalStorageEmulated()) {
            return;
        }

        // Skip the tests for devices with less than 2GB of ram available
        if (lessThanTwoGbDevice()) {
            return;
        }

        fail(""Device should support managed profiles, but ""
                + PackageManager.FEATURE_MANAGED_USERS + "" is not enabled"");
    }

    /**
     * The CDD defines a handheld device as one that has a battery and a screen size between
     * 2.5 and 8 inches.
     */
    private boolean isHandheldDevice() throws Exception {
        double screenInches = getScreenSizeInInches();
        return deviceHasBattery() && screenInches >= 2.5 && screenInches <= 8.0;
    }

    private boolean deviceHasBattery() {
        final Intent batteryInfo = getContext().registerReceiver(null,
                new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
        return batteryInfo.getBooleanExtra(BatteryManager.EXTRA_PRESENT, true);
    }

    private double getScreenSizeInInches() {
        DisplayMetrics dm = new DisplayMetrics();
        mWindowManager.getDefaultDisplay().getMetrics(dm);
        double widthInInchesSquared = Math.pow(dm.widthPixels/dm.xdpi,2);
        double heightInInchesSquared = Math.pow(dm.heightPixels/dm.ydpi,2);
        return Math.sqrt(widthInInchesSquared + heightInInchesSquared);
    }

    // Implementation copied from CoreGmsAppsTest#twoGbDevice("	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/FeatureTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"com.android.tests.securefrpinstall.SecureFrpInstallTest"	"testPackageInstallApi"	"CtsSecureFrpInstallTestCases"	"1: granted"	"([1:/com/android/tests/securefrpinstall/SecureFrpInstallTest.java]:[granted]:[1]:method_text:[    /** Tests can install when granted INSTALL_PACKAGES permission; even in secure FRP mode. */   ]) :|: 
    public void testPackageInstallApi() throws Exception {
        setSecureFrp(true);
        try {
            Install.single(TestApp.A1).commit();
            fail(""Expected a SecurityException"");
        } catch (SecurityException expected) {
        }
        assertNotInstalled();
    }

    /** Tests can install when granted INSTALL_PACKAGES permission; even in secure FRP mode. */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/content/pm/SecureFrp/src/com/android/tests/securefrpinstall/SecureFrpInstallTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.usage.cts.UsageStatsTest"	"testNoAccessSilentlyFails"	"CtsUsageStatsTestCases"	"2: silent silently"	"([1:/android/app/usage/cts/UsageStatsTest.java]:[silently]:[1]:method_text:[   Thread.sleep(500);    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ]) :|: 
    public void testNoAccessSilentlyFails() throws Exception {
        final long startTime = System.currentTimeMillis() - MINUTE;

        launchSubActivity(android.app.usage.cts.Activities.ActivityOne.class);
        launchSubActivity(android.app.usage.cts.Activities.ActivityThree.class);

        final long endTime = System.currentTimeMillis();
        List<UsageStats> stats = mUsageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST,
                startTime, endTime);
        assertFalse(stats.isEmpty());

        // We set the mode to ignore because our package has the PACKAGE_USAGE_STATS permission,
        // and default would allow in this case.
        setAppOpsMode(""ignore"");

        stats = mUsageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST,
                startTime, endTime);
        assertTrue(stats.isEmpty());
    }

    private void generateAndSendNotification() throws Exception {
        final NotificationManager mNotificationManager =
                (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
        final NotificationChannel mChannel = new NotificationChannel(CHANNEL_ID, ""Channel"",
                NotificationManager.IMPORTANCE_DEFAULT);
        // Configure the notification channel.
        mChannel.setDescription(""Test channel"");
        mNotificationManager.createNotificationChannel(mChannel);
        final Notification.Builder mBuilder =
                new Notification.Builder(mContext, CHANNEL_ID)
                        .setSmallIcon(R.drawable.ic_notification)
                        .setContentTitle(""My notification"")
                        .setContentText(""Hello World!"");
        final PendingIntent pi = PendingIntent.getActivity(mContext, 1,
                new Intent(Settings.ACTION_SETTINGS), PendingIntent.FLAG_IMMUTABLE);
        mBuilder.setContentIntent(pi);
        mNotificationManager.notify(1, mBuilder.build());
        Thread.sleep(500);
    }

    @AppModeFull(r"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageStatsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest22.kt"	"testCompatDefault"	"CtsPermission3TestCases"	"1: granted"	"([1:/android/permission3/cts/PermissionTest22.kt]:[granted]:[1]:method_text:[ndroid.Manifest.permission.WRITE_CALENDAR, true)        assertAppHasCalendarAccess(true)    }   ]) :|: 
    fun testCompatDefault() {
        // Legacy permission model appears granted
        assertAppHasPermission(android.Manifest.permission.READ_CALENDAR, true)
        assertAppHasPermission(android.Manifest.permission.WRITE_CALENDAR, true)
        assertAppHasCalendarAccess(true)
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest22.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest22.kt"	"testCompatRevoked"	"CtsPermission3TestCases"	"1: granted"	"([1:/android/permission3/cts/PermissionTest22.kt]:[granted]:[1]:method_text:[        // Read/write access should be ignored        assertAppHasCalendarAccess(false)    }   ]) :|: 
    fun testCompatRevoked() {
        // Revoke the permission
        revokeAppPermissions(android.Manifest.permission.WRITE_CALENDAR, isLegacyApp = true)

        // Legacy permission model appears granted
        assertAppHasPermission(android.Manifest.permission.READ_CALENDAR, true)
        assertAppHasPermission(android.Manifest.permission.WRITE_CALENDAR, true)
        // Read/write access should be ignored
        assertAppHasCalendarAccess(false)
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest22.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest22.kt"	"testNoRuntimePrompt"	"CtsPermission3TestCases"	"1: granted"	"([1:/android/permission3/cts/PermissionTest22.kt]:[granted]:[1]:method_text:[Result(            arrayOf(android.Manifest.permission.SEND_SMS), emptyArray()        ) {}    }}]) :|: 
    fun testNoRuntimePrompt() {
        // Request the permission and do nothing
        // Expect the permission is not granted
        requestAppPermissionsAndAssertResult(
            arrayOf(android.Manifest.permission.SEND_SMS), emptyArray()
        ) {}
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest22.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionUpgradeTest.kt"	"testUpgradeKeepsPermissions"	"CtsPermission3TestCases"	"4: granted ACCESS_BACKGROUND_LOCATION BODY_SENSORS ACCESS_COARSE_LOCATION"	"([1:/android/permission3/cts/PermissionUpgradeTest.kt]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[fun assertAllPermissionsGrantedOnUpgrade() {        assertAppHasAllOrNoPermissions(true)    }   ]) :|: 
    fun testUpgradeKeepsPermissions() {
        Assume.assumeFalse(packageManager.arePermissionsIndividuallyControlled())

        installPackage(APP_APK_PATH_22)

        approvePermissionReview()

        assertAllPermissionsGrantedByDefault()

        installPackage(APP_APK_PATH_23, reinstall = true)

        assertAllPermissionsGrantedOnUpgrade()
    }

    private fun assertAllPermissionsGrantedByDefault() {
        arrayOf(
            android.Manifest.permission.SEND_SMS,
            android.Manifest.permission.RECEIVE_SMS,
            // The APK does not request READ_CONTACTS because of other tests
            android.Manifest.permission.WRITE_CONTACTS,
            android.Manifest.permission.READ_CALENDAR,
            android.Manifest.permission.WRITE_CALENDAR,
            android.Manifest.permission.READ_SMS,
            android.Manifest.permission.RECEIVE_WAP_PUSH,
            android.Manifest.permission.RECEIVE_MMS,
            ""android.permission.READ_CELL_BROADCASTS"",
            android.Manifest.permission.READ_EXTERNAL_STORAGE,
            android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
            android.Manifest.permission.ACCESS_FINE_LOCATION,
            android.Manifest.permission.ACCESS_COARSE_LOCATION,
            android.Manifest.permission.READ_PHONE_STATE,
            android.Manifest.permission.CALL_PHONE,
            android.Manifest.permission.READ_CALL_LOG,
            android.Manifest.permission.WRITE_CALL_LOG,
            android.Manifest.permission.ADD_VOICEMAIL,
            android.Manifest.permission.USE_SIP,
            android.Manifest.permission.PROCESS_OUTGOING_CALLS,
            android.Manifest.permission.CAMERA,
            android.Manifest.permission.BODY_SENSORS,
            // Split permissions
            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION
        ).forEach {
            assertAppHasPermission(it, true)
        }
    }

    private fun assertAllPermissionsGrantedOnUpgrade() {
        assertAppHa"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionUpgradeTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionUpgradeTest.kt"	"testRevokePropagatedOnUpgradeNewToNewModel"	"CtsPermission3TestCases"	"5: granted ACCESS_BACKGROUND_LOCATION BODY_SENSORS RECORD_AUDIO ACCESS_COARSE_LOCATION"	"([1:/android/permission3/cts/PermissionUpgradeTest.kt]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[RAGE        ).forEach {            assertAppHasPermission(it, expectPermissions)        }    }}]) :|: 
    fun testRevokePropagatedOnUpgradeNewToNewModel() {
        installPackage(APP_APK_PATH_23)

        // Make sure we don't have the permission
        assertAppHasPermission(android.Manifest.permission.READ_CALENDAR, false)
        assertAppHasPermission(android.Manifest.permission.READ_EXTERNAL_STORAGE, false)

        // Request the permission and allow it
        // Make sure the permission is granted
        requestAppPermissionsAndAssertResult(android.Manifest.permission.READ_CALENDAR to true) {
            clickPermissionRequestAllowButton()
        }

        installPackage(APP_APK_PATH_23, reinstall = true)

        // Make sure the permission is still granted after the upgrade
        assertAppHasPermission(android.Manifest.permission.READ_CALENDAR, true)
        // Also make sure one of the not granted permissions is still not granted
        assertAppHasPermission(android.Manifest.permission.READ_EXTERNAL_STORAGE, false)
    }

    private fun assertAppHasAllOrNoPermissions(expectPermissions: Boolean) {
        arrayOf(
            android.Manifest.permission.SEND_SMS,
            android.Manifest.permission.RECEIVE_SMS,
            android.Manifest.permission.RECEIVE_WAP_PUSH,
            android.Manifest.permission.RECEIVE_MMS,
            android.Manifest.permission.READ_CALENDAR,
            android.Manifest.permission.WRITE_CALENDAR,
            android.Manifest.permission.WRITE_CONTACTS,
            android.Manifest.permission.READ_SMS,
            android.Manifest.permission.READ_PHONE_STATE,
            android.Manifest.permission.READ_CALL_LOG,
            android.Manifest.permission.WRITE_CALL_LOG,
            android.Manifest.permission.ADD_VOICEMAIL,
            android.Manifest.permission.CALL_PHONE,
            android.Manifest.permission.USE_SIP,
            android.Manifest.permission.PROCESS_OUTGOING_CALLS,
            android.Manifest.permission.RECORD_AUDIO,
            android.Manifest.permission.ACCESS_FINE_LOCATION,
            a"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionUpgradeTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionReviewTest.kt"	"testReviewPermissionWhenServiceIsBound"	"CtsPermission3TestCases"	"1: granted"	"([1:/android/permission3/cts/PermissionReviewTest.kt]:[granted]:[1]:method_text:[ageManager.PERMISSION_GRANTED, results.poll(TIMEOUT_MILLIS, TimeUnit.MILLISECONDS)        )    }}]) :|: 
    fun testReviewPermissionWhenServiceIsBound() {
        val results = LinkedBlockingQueue<Int>()
        // We are starting a activity instead of the service directly, because
        // the service comes from a different app than the CTS tests.
        // This app will be considered idle on devices that have idling enabled (automotive),
        // and the service wouldn't be allowed to be started without the activity.
        activityRule.launchActivity(null).startActivity(
            Intent().apply {
                component = ComponentName(
                    APP_PACKAGE_NAME, ""$APP_PACKAGE_NAME.StartCheckPermissionServiceActivity""
                )
                putExtra(
                    ""$APP_PACKAGE_NAME.RESULT"",
                    object : ResultReceiver(Handler(Looper.getMainLooper())) {
                        override fun onReceiveResult(resultCode: Int, resultData: Bundle?) {
                            results.offer(resultCode)
                        }
                    }
                )
                putExtra(
                    ""$APP_PACKAGE_NAME.PERMISSION"", android.Manifest.permission.READ_CALENDAR
                )
            }
        )

        // Service is not started before permission are reviewed
        assertNull(results.poll(UNEXPECTED_TIMEOUT_MILLIS.toLong(), TimeUnit.MILLISECONDS))

        clickPermissionReviewContinue()

        // Service should be started after permission review
        assertEquals(
            PackageManager.PERMISSION_GRANTED, results.poll(TIMEOUT_MILLIS, TimeUnit.MILLISECONDS)
        )
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionReviewTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest30WithBluetooth.kt"	"BaseUsePermissionTest"	"CtsPermission3TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission3/cts/PermissionTest30WithBluetooth.kt]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[ertTrue(BTAdapterUtils.disableAdapter(bluetoothAdapter, context))            }        }    }   ]) :|: /*
 *.
 */

package android.permission3.cts

import android.Manifest.permission.ACCESS_BACKGROUND_LOCATION
import android.Manifest.permission.ACCESS_FINE_LOCATION
import android.Manifest.permission.BLUETOOTH_SCAN
import android.app.AppOpsManager
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothManager
import android.bluetooth.cts.BTAdapterUtils
import android.content.Intent
import android.content.pm.PackageManager
import android.content.pm.PackageManager.FLAG_PERMISSION_REVOKED_COMPAT
import android.os.Build
import android.os.Process
import androidx.test.InstrumentationRegistry
import androidx.test.filters.SdkSuppress
import com.android.compatibility.common.util.SystemUtil.runShellCommandOrThrow
import com.android.compatibility.common.util.SystemUtil.runWithShellPermissionIdentity
import junit.framework.Assert.assertEquals
import junit.framework.Assert.assertTrue
import junit.framework.AssertionFailedError
import org.junit.After
import org.junit.Assert.assertNotEquals
import org.junit.Assume.assumeTrue
import org.junit.Before
import org.junit.Test

/**
 * Runtime Bluetooth-permission behavior of apps targeting API 30
 */
@SdkSuppress(minSdkVersion = Build.VERSION_CODES.S, codeName = ""S"")
class PermissionTest30WithBluetooth : BaseUsePermissionTest() {

    private val TEST_APP_AUTHORITY =
        ""android.permission3.cts.usepermission.AccessBluetoothOnCommand""
    private val TEST_APP_PKG =
        ""android.permission3.cts.usepermission""
    private lateinit var bluetoothAdapter: BluetoothAdapter
    private var bluetoothAdapterWasEnabled: Boolean = false

    private enum class BluetoothScanResult {
        UNKNOWN, ERROR, EXCEPTION, EMPTY, FILTERED, FULL
    }

    @Before
    fun installApp() {
        installPackage(APP_APK_PATH_30_WITH_BLUETOOTH)
    }

    private fun reinstallApp() {
        installPackage(APP_APK_PATH_30_WITH_BLUETOOTH, reinstall = true)
    }

    @Before
    fun enableBluetooth() {
        assumeTrue(supportsBluet"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest30WithBluetooth.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest30WithBluetooth.kt"	"testGivenBluetoothIsDeniedWhenScanIsAttemptedThenThenGetEmptyScanResult"	"CtsPermission3TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission3/cts/PermissionTest30WithBluetooth.kt]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[      throw AssertionFailedError(""Expected to be EMPTY or ERROR, but was $res"")        }    }   ]) :|: 
    fun testGivenBluetoothIsDeniedWhenScanIsAttemptedThenThenGetEmptyScanResult() {
        assertBluetoothRevokedCompatState(revoked = false)
        // Should return empty while the app does not have location
        assertEquals(BluetoothScanResult.EMPTY, scanForBluetoothDevices())

        uiAutomation.grantRuntimePermission(TEST_APP_PKG, ACCESS_FINE_LOCATION)
        uiAutomation.grantRuntimePermission(TEST_APP_PKG, ACCESS_BACKGROUND_LOCATION)
        runWithShellPermissionIdentity {
            context.getSystemService(AppOpsManager::class.java)!!.setUidMode(
                AppOpsManager.OPSTR_FINE_LOCATION,
                packageManager.getPackageUid(context.packageName, 0), AppOpsManager.MODE_ALLOWED)
        }

        assertEquals(BluetoothScanResult.FULL, scanForBluetoothDevices())
        revokeAppPermissions(BLUETOOTH_SCAN, isLegacyApp = true)
        assertBluetoothRevokedCompatState(revoked = true)
        val res = scanForBluetoothDevices()
        if (res != BluetoothScanResult.ERROR && res != BluetoothScanResult.EMPTY) {
            throw AssertionFailedError(""Expected to be EMPTY or ERROR, but was $res"")
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest30WithBluetooth.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionHistoryTest.kt"	"BasePermissionTest"	"CtsPermission3TestCases"	"2: Microphone microphone"	"([1:/android/permission3/cts/PermissionHistoryTest.kt]:[microphone]:[1]:method_text:[quireSuccess = false)        uninstallPackage(APP2_PACKAGE_NAME, requireSuccess = false)    }   ]) :|: /*
 *.
 */

package android.permission3.cts

import android.Manifest
import android.content.Intent
import android.os.Build
import android.support.test.uiautomator.By
import androidx.test.filters.SdkSuppress
import com.android.compatibility.common.util.SystemUtil
import org.junit.After
import org.junit.Before
import org.junit.Ignore
import org.junit.Test

private const val APP_LABEL_1 = ""CtsMicAccess""
private const val APP_LABEL_2 = ""CtsMicAccess2""
private const val INTENT_ACTION_1 = ""test.action.USE_MIC""
private const val INTENT_ACTION_2 = ""test.action.USE_MIC_2""
private const val PERMISSION_CONTROLLER_PACKAGE_ID_PREFIX = ""com.android.permissioncontroller:id/""
private const val HISTORY_PREFERENCE_ICON = ""permission_history_icon""
private const val HISTORY_PREFERENCE_TIME = ""permission_history_time""
private const val SHOW_SYSTEM = ""Show system""
private const val MORE_OPTIONS = ""More options""

@SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)
class PermissionHistoryTest : BasePermissionTest() {
    private val micLabel = packageManager.getPermissionGroupInfo(
            Manifest.permission_group.MICROPHONE, 0).loadLabel(packageManager).toString()

    @Before
    fun installApps() {
        uninstallPackage(APP_PACKAGE_NAME, requireSuccess = false)
        uninstallPackage(APP2_PACKAGE_NAME, requireSuccess = false)
        installPackage(APP_APK_PATH, grantRuntimePermissions = true)
        installPackage(APP2_APK_PATH, grantRuntimePermissions = true)
    }

    @After
    fun uninstallApps() {
        uninstallPackage(APP_PACKAGE_NAME, requireSuccess = false)
        uninstallPackage(APP2_PACKAGE_NAME, requireSuccess = false)
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionHistoryTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionHistoryTest.kt"	"testToggleSystemApps"	"CtsPermission3TestCases"	"2: Microphone microphone"	"([2:/android/permission3/cts/PermissionHistoryTest.kt]:[microphone]:[2]:method_text:[nuView.click()        waitFindObject(By.text(SHOW_SYSTEM))        uiDevice.pressBack()    }   ]) :|: 
    fun testToggleSystemApps() {
        // I had some hard time mocking a system app.
        // Hence here I am only testing if the toggle is there.
        // Will comeback and add the system app for testing if we
        // need the line coverage for this. - theianchen@
        openMicrophoneApp(INTENT_ACTION_1)
        waitFindObject(By.textContains(APP_LABEL_1))

        openMicrophoneTimeline()
        val menuView = waitFindObject(By.descContains(MORE_OPTIONS))
        menuView.click()

        waitFindObject(By.text(SHOW_SYSTEM))
        uiDevice.pressBack()
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionHistoryTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionHistoryTest.kt"	"testMicrophoneTimelineWithOneApp"	"CtsPermission3TestCases"	"2: Microphone microphone"	"([3:/android/permission3/cts/PermissionHistoryTest.kt]:[microphone]:[3]:method_text:[ROLLER_PACKAGE_ID_PREFIX + HISTORY_PREFERENCE_TIME))    }    @Ignore(""b/186656826#comment27"")   ]) :|: 
    fun testMicrophoneTimelineWithOneApp() {
        openMicrophoneApp(INTENT_ACTION_1)
        waitFindObject(By.textContains(APP_LABEL_1))

        openMicrophoneTimeline()
        waitFindObject(By.descContains(micLabel))
        waitFindObject(By.textContains(APP_LABEL_1))
        waitFindObject(By.res(
                PERMISSION_CONTROLLER_PACKAGE_ID_PREFIX + HISTORY_PREFERENCE_ICON))
        waitFindObject(By.res(
                PERMISSION_CONTROLLER_PACKAGE_ID_PREFIX + HISTORY_PREFERENCE_TIME))
    }

    @Ignore(""b/186656826#comment27"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionHistoryTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionHistoryTest.kt"	"testCameraTimelineWithMultipleApps"	"CtsPermission3TestCases"	"2: Microphone microphone"	"([10:/android/permission3/cts/PermissionHistoryTest.kt]:[microphone]:[10]:method_text:[p2.apk""        const val APP2_PACKAGE_NAME = ""android.permission3.cts.accessmicrophoneapp2""    }}]) :|: 
    fun testCameraTimelineWithMultipleApps() {
        openMicrophoneApp(INTENT_ACTION_1)
        waitFindObject(By.textContains(APP_LABEL_1))

        openMicrophoneApp(INTENT_ACTION_2)
        waitFindObject(By.textContains(APP_LABEL_2))

        openMicrophoneTimeline()
        waitFindObject(By.descContains(micLabel))
        waitFindObject(By.textContains(APP_LABEL_1))
        waitFindObject(By.textContains(APP_LABEL_2))
    }

    private fun openMicrophoneApp(intentAction: String) {
        context.startActivity(Intent(intentAction).apply {
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        })
    }

    private fun openMicrophoneTimeline() {
        SystemUtil.runWithShellPermissionIdentity {
            context.startActivity(Intent(Intent.ACTION_REVIEW_PERMISSION_HISTORY).apply {
                putExtra(Intent.EXTRA_PERMISSION_GROUP_NAME, Manifest.permission_group.MICROPHONE)
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            })
        }
    }

    companion object {
        const val APP_APK_PATH = ""$APK_DIRECTORY/CtsAccessMicrophoneApp.apk""
        const val APP_PACKAGE_NAME = ""android.permission3.cts.accessmicrophoneapp""
        const val APP2_APK_PATH = ""$APK_DIRECTORY/CtsAccessMicrophoneApp2.apk""
        const val APP2_PACKAGE_NAME = ""android.permission3.cts.accessmicrophoneapp2""
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionHistoryTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest23.kt"	"testGranted"	"CtsPermission3TestCases"	"1: granted"	"([1:/android/permission3/cts/PermissionTest23.kt]:[granted]:[1]:method_text:[ndroid.Manifest.permission.WRITE_CALENDAR, true)        assertAppHasCalendarAccess(true)    }   ]) :|: 
    fun testGranted() {
        grantAppPermissions(android.Manifest.permission.READ_CALENDAR)

        // Read/write access should be allowed
        assertAppHasPermission(android.Manifest.permission.READ_CALENDAR, true)
        assertAppHasPermission(android.Manifest.permission.WRITE_CALENDAR, true)
        assertAppHasCalendarAccess(true)
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest23.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest23.kt"	"testRuntimeGroupGrantSpecificity"	"CtsPermission3TestCases"	"1: granted"	"([2:/android/permission3/cts/PermissionTest23.kt]:[granted]:[2]:method_text:[ granted        assertAppHasPermission(android.Manifest.permission.READ_CONTACTS, false)    }   ]) :|: 
    fun testRuntimeGroupGrantSpecificity() {
        // Start out without permission
        assertAppHasPermission(android.Manifest.permission.READ_CONTACTS, false)
        assertAppHasPermission(android.Manifest.permission.WRITE_CONTACTS, false)

        // Request only one permission from the 'contacts' permission group
        // Expect the permission is granted
        requestAppPermissionsAndAssertResult(android.Manifest.permission.WRITE_CONTACTS to true) {
            clickPermissionRequestAllowButton()
        }

        // Make sure no undeclared as used permissions are granted
        assertAppHasPermission(android.Manifest.permission.READ_CONTACTS, false)
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest23.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest23.kt"	"testCancelledPermissionRequest"	"CtsPermission3TestCases"	"1: granted"	"([1:/android/permission3/cts/PermissionTest23.kt]:[granted]:[1]:method_text:[ssion.WRITE_CONTACTS to false) {            clickPermissionRequestDenyButton()        }    }   ]) :|: 
    fun testCancelledPermissionRequest() {
        // Make sure we don't have the permission
        assertAppHasPermission(android.Manifest.permission.WRITE_CONTACTS, false)

        // Request the permission and cancel the request
        // Expect the permission is not granted
        requestAppPermissionsAndAssertResult(android.Manifest.permission.WRITE_CONTACTS to false) {
            clickPermissionRequestDenyButton()
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest23.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest23.kt"	"testRequestGrantedPermission"	"CtsPermission3TestCases"	"1: granted"	"([3:/android/permission3/cts/PermissionTest23.kt]:[granted]:[3]:method_text:[questAppPermissionsAndAssertResult(android.Manifest.permission.WRITE_CONTACTS to true) {}    }   ]) :|: 
    fun testRequestGrantedPermission() {
        // Make sure we don't have the permission
        assertAppHasPermission(android.Manifest.permission.WRITE_CONTACTS, false)

        // Request the permission and allow it
        // Expect the permission is granted
        requestAppPermissionsAndAssertResult(android.Manifest.permission.WRITE_CONTACTS to true) {
            clickPermissionRequestAllowButton()
        }

        // Request the permission and do nothing
        // Expect the permission is granted
        requestAppPermissionsAndAssertResult(android.Manifest.permission.WRITE_CONTACTS to true) {}
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest23.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest23.kt"	"testDenialWithPrejudice"	"CtsPermission3TestCases"	"1: granted"	"([3:/android/permission3/cts/PermissionTest23.kt]:[granted]:[3]:method_text:[onsAndAssertResult(android.Manifest.permission.WRITE_CONTACTS to false) {}    }    @FlakyTest   ]) :|: 
    fun testDenialWithPrejudice() {
        // Make sure we don't have the permission
        assertAppHasPermission(android.Manifest.permission.WRITE_CONTACTS, false)

        // Request the permission and deny it
        // Expect the permission is not granted
        requestAppPermissionsAndAssertResult(android.Manifest.permission.WRITE_CONTACTS to false) {
            clickPermissionRequestDenyButton()
        }

        // Request the permission and choose don't ask again
        // Expect the permission is not granted
        requestAppPermissionsAndAssertResult(android.Manifest.permission.WRITE_CONTACTS to false) {
            denyPermissionRequestWithPrejudice()
        }

        // Request the permission and do nothing
        // Expect the permission is not granted
        requestAppPermissionsAndAssertResult(android.Manifest.permission.WRITE_CONTACTS to false) {}
    }

    @FlakyTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest23.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest23.kt"	"testGrantPreviouslyRevokedWithPrejudiceShowsPrompt"	"CtsPermission3TestCases"	"1: granted"	"([3:/android/permission3/cts/PermissionTest23.kt]:[granted]:[3]:method_text:[     } else {                clickPermissionRequestAllowButton()            }        }    }   ]) :|: 
    fun testGrantPreviouslyRevokedWithPrejudiceShowsPrompt() {
        // Make sure we don't have the permission
        assertAppHasPermission(android.Manifest.permission.CAMERA, false)

        // Request the permission and deny it
        // Expect the permission is not granted
        requestAppPermissionsAndAssertResult(android.Manifest.permission.CAMERA to false) {
            clickPermissionRequestDenyButton()
        }

        // Request the permission and choose don't ask again
        // Expect the permission is not granted
        requestAppPermissionsAndAssertResult(android.Manifest.permission.CAMERA to false) {
            denyPermissionRequestWithPrejudice()
        }

        // Clear the denial with prejudice
        grantAppPermissions(android.Manifest.permission.CAMERA)
        revokeAppPermissions(android.Manifest.permission.CAMERA)

        // Make sure we don't have the permission
        assertAppHasPermission(android.Manifest.permission.CAMERA, false)

        // Request the permission and allow it
        // Make sure the permission is granted
        requestAppPermissionsAndAssertResult(android.Manifest.permission.CAMERA to true) {
            if (SdkLevel.isAtLeastS()) {
                clickPermissionRequestAllowForegroundButton()
            } else {
                clickPermissionRequestAllowButton()
            }
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest23.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest23.kt"	"testRequestNonRuntimePermission"	"CtsPermission3TestCases"	"1: granted"	"([1:/android/permission3/cts/PermissionTest23.kt]:[granted]:[1]:method_text:[tResult(            android.Manifest.permission.BIND_PRINT_SERVICE to false        ) {}    }   ]) :|: 
    fun testRequestNonRuntimePermission() {
        // Make sure we don't have the permission
        assertAppHasPermission(android.Manifest.permission.BIND_PRINT_SERVICE, false)

        // Request the permission and do nothing
        // Expect the permission is not granted
        requestAppPermissionsAndAssertResult(
            android.Manifest.permission.BIND_PRINT_SERVICE to false
        ) {}
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest23.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest23.kt"	"testRequestNonExistentPermission"	"CtsPermission3TestCases"	"1: granted"	"([1:/android/permission3/cts/PermissionTest23.kt]:[granted]:[1]:method_text:[granted        requestAppPermissionsAndAssertResult(NON_EXISTENT_PERMISSION to false) {}    }   ]) :|: 
    fun testRequestNonExistentPermission() {
        // Make sure we don't have the permission
        assertAppHasPermission(NON_EXISTENT_PERMISSION, false)

        // Request the permission and do nothing
        // Expect the permission is not granted
        requestAppPermissionsAndAssertResult(NON_EXISTENT_PERMISSION to false) {}
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest23.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest23.kt"	"testRequestPermissionFromTwoGroups"	"CtsPermission3TestCases"	"1: granted"	"([3:/android/permission3/cts/PermissionTest23.kt]:[granted]:[3]:method_text:[granted.        assertAppHasPermission(android.Manifest.permission.READ_CONTACTS, false)    }   ]) :|: 
    fun testRequestPermissionFromTwoGroups() {
        // Make sure we don't have the permissions
        assertAppHasPermission(android.Manifest.permission.WRITE_CONTACTS, false)
        assertAppHasPermission(android.Manifest.permission.WRITE_CALENDAR, false)
        assertAppHasPermission(android.Manifest.permission.READ_CALENDAR, false)

        // Request the permission and allow it
        // Expect the permission are granted
        val result = requestAppPermissionsAndAssertResult(
            android.Manifest.permission.WRITE_CONTACTS to true,
            android.Manifest.permission.WRITE_CALENDAR to true
        ) {
            clickPermissionRequestAllowButton()
            clickPermissionRequestAllowButton()
        }

        // In API < N_MR1 all permissions of a group are granted. I.e. the grant was ""expanded""
        assertAppHasPermission(android.Manifest.permission.READ_CALENDAR, true)
        // Even the contacts group was expanded, the read-calendar permission is not in the
        // manifest, hence not granted.
        assertAppHasPermission(android.Manifest.permission.READ_CONTACTS, false)
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest23.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest23.kt"	"testNoResidualPermissionsOnUninstall"	"CtsPermission3TestCases"	"5: granted ACCESS_BACKGROUND_LOCATION BODY_SENSORS RECORD_AUDIO ACCESS_COARSE_LOCATION"	"([1:/android/permission3/cts/PermissionTest23.kt]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[d after uninstalling and installing the app        assertAppHasAllOrNoPermissions(false)    }   ]) :|: (timeout = 120000)
    @FlakyTest
    fun testNoResidualPermissionsOnUninstall() {
        Assume.assumeFalse(packageManager.arePermissionsIndividuallyControlled())

        // Grant all permissions
        grantAppPermissions(
            android.Manifest.permission.WRITE_CALENDAR,
            android.Manifest.permission.WRITE_CONTACTS,
            android.Manifest.permission.READ_SMS,
            android.Manifest.permission.CALL_PHONE,
            android.Manifest.permission.RECORD_AUDIO,
            android.Manifest.permission.BODY_SENSORS,
            android.Manifest.permission.CAMERA,
            android.Manifest.permission.READ_EXTERNAL_STORAGE, targetSdk = 23
        )
        // Don't use UI for granting location permission as this shows another dialog
        uiAutomation.grantRuntimePermission(
            APP_PACKAGE_NAME, android.Manifest.permission.ACCESS_FINE_LOCATION
        )
        uiAutomation.grantRuntimePermission(
            APP_PACKAGE_NAME, android.Manifest.permission.ACCESS_COARSE_LOCATION
        )
        uiAutomation.grantRuntimePermission(
            APP_PACKAGE_NAME, android.Manifest.permission.ACCESS_BACKGROUND_LOCATION
        )

        uninstallPackage(APP_PACKAGE_NAME)
        installPackage(APP_APK_PATH_23)

        // Make no permissions are granted after uninstalling and installing the app
        assertAppHasAllOrNoPermissions(false)
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest23.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest23.kt"	"testNullAndRealPermission"	"CtsPermission3TestCases"	"2: granted RECORD_AUDIO"	"([2:/android/permission3/cts/PermissionTest23.kt]:[RECORD_AUDIO]:[2]:method_text:[uestAllowButton()            }            clickPermissionRequestAllowButton()        }    }   ]) :|: 
    fun testNullAndRealPermission() {
        // Make sure we don't have the permissions
        assertAppHasPermission(android.Manifest.permission.WRITE_CONTACTS, false)
        assertAppHasPermission(android.Manifest.permission.RECORD_AUDIO, false)

        // Request the permission and allow it
        // Expect the permission are granted
        requestAppPermissionsAndAssertResult(
            null to false,
            android.Manifest.permission.WRITE_CONTACTS to true,
            null to false,
            android.Manifest.permission.RECORD_AUDIO to true
        ) {
            if (SdkLevel.isAtLeastS()) {
                clickPermissionRequestAllowForegroundButton()
            } else {
                clickPermissionRequestAllowButton()
            }
            clickPermissionRequestAllowButton()
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest23.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest23.kt"	"testInvalidPermission"	"CtsPermission3TestCases"	"5: granted ACCESS_BACKGROUND_LOCATION BODY_SENSORS RECORD_AUDIO ACCESS_COARSE_LOCATION"	"([1:/android/permission3/cts/PermissionTest23.kt]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[RAGE        ).forEach {            assertAppHasPermission(it, expectPermissions)        }    }}]) :|: 
    fun testInvalidPermission() {
        // Request the permission and allow it
        // Expect the permission is not granted
        requestAppPermissionsAndAssertResult(INVALID_PERMISSION to false) {}
    }

    private fun denyPermissionRequestWithPrejudice() {
        if (isTv || isWatch) {
            clickPermissionRequestDontAskAgainButton()
        } else {
            clickPermissionRequestDenyAndDontAskAgainButton()
        }
    }

    private fun assertAppHasAllOrNoPermissions(expectPermissions: Boolean) {
        arrayOf(
            android.Manifest.permission.SEND_SMS,
            android.Manifest.permission.RECEIVE_SMS,
            android.Manifest.permission.RECEIVE_WAP_PUSH,
            android.Manifest.permission.RECEIVE_MMS,
            android.Manifest.permission.READ_CALENDAR,
            android.Manifest.permission.WRITE_CALENDAR,
            android.Manifest.permission.WRITE_CONTACTS,
            android.Manifest.permission.READ_SMS,
            android.Manifest.permission.READ_PHONE_STATE,
            android.Manifest.permission.READ_CALL_LOG,
            android.Manifest.permission.WRITE_CALL_LOG,
            android.Manifest.permission.ADD_VOICEMAIL,
            android.Manifest.permission.CALL_PHONE,
            android.Manifest.permission.USE_SIP,
            android.Manifest.permission.PROCESS_OUTGOING_CALLS,
            android.Manifest.permission.RECORD_AUDIO,
            android.Manifest.permission.ACCESS_FINE_LOCATION,
            android.Manifest.permission.ACCESS_COARSE_LOCATION,
            android.Manifest.permission.CAMERA,
            android.Manifest.permission.BODY_SENSORS,
            android.Manifest.permission.READ_CELL_BROADCASTS,
            // Split permissions
            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION,
            // Storage permissions
            android.Manifest.permission.READ_EXTERNAL_STORAGE,
            android.Manifest.permission.WRITE_EXTERNAL_STORAGE
        ).forEach {"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest23.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionSplitTest.kt"	"testPermissionNotSplitLatest"	"CtsPermission3TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([2:/android/permission3/cts/PermissionSplitTest.kt]:[ACCESS_BACKGROUND_LOCATION]:[2]:method_text:[ assertAppHasPermission(android.Manifest.permission.ACCESS_BACKGROUND_LOCATION, expectSplit)    }}]) :|: 
    fun testPermissionNotSplitLatest() {
        installPackage(APP_APK_PATH_LATEST)
        testLocationPermissionSplit(false)
    }

    private fun testLocationPermissionSplit(expectSplit: Boolean) {
        assertAppHasPermission(android.Manifest.permission.ACCESS_FINE_LOCATION, false)
        assertAppHasPermission(android.Manifest.permission.ACCESS_BACKGROUND_LOCATION, false)

        requestAppPermissionsAndAssertResult(
                android.Manifest.permission.ACCESS_FINE_LOCATION to true
        ) {
            if (expectSplit) {
                clickPermissionRequestSettingsLinkAndAllowAlways()
            } else {
                clickPermissionRequestAllowForegroundButton()
            }
        }

        assertAppHasPermission(android.Manifest.permission.ACCESS_BACKGROUND_LOCATION, expectSplit)
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionSplitTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTapjackingTest.kt"	"testTapjackGrantDialog_partialOverlay"	"CtsPermission3TestCases"	"1: granted"	"([1:/android/permission3/cts/PermissionTapjackingTest.kt]:[granted]:[1]:method_text:[     const val MESSAGE_BOTTOM = ""android.permission3.cts.usepermission.extra.MESSAGE_BOTTOM""    }}]) :|: 
    fun testTapjackGrantDialog_partialOverlay() {
        // PermissionController for television uses a floating window.
        assumeFalse(isTv)
        // Automotive doesn't support detecting partial overlays yet: b/192088266
        assumeFalse(isAutomotive)

        assertAppHasPermission(ACCESS_FINE_LOCATION, false)
        requestAppPermissionsForNoResult(ACCESS_FINE_LOCATION) {}

        val buttonCenter = waitFindObject(By.text(
                getPermissionControllerString(ALLOW_FOREGROUND_BUTTON_TEXT))).visibleCenter
        val dialogBounds = waitFindObject(By.res(
                ""com.android.permissioncontroller"", ""grant_dialog"")).visibleBounds
        val messageBottom = waitFindObject(By.res(
                ""com.android.permissioncontroller"", ""permission_message"")).visibleBounds.bottom

        // Wait for overlay to hide the dialog
        context.sendBroadcast(Intent(ACTION_SHOW_OVERLAY)
                .putExtra(EXTRA_FULL_OVERLAY, false)
                .putExtra(DIALOG_LEFT, dialogBounds.left)
                .putExtra(DIALOG_TOP, dialogBounds.top)
                .putExtra(DIALOG_RIGHT, dialogBounds.right)
                .putExtra(MESSAGE_BOTTOM, messageBottom))
        waitFindObject(By.res(""android.permission3.cts.usepermission:id/overlay""))

        tryClicking(buttonCenter)
    }

    private fun tryClicking(buttonCenter: Point) {
        try {
            // Try to grant the permission, this should fail
            SystemUtil.eventually({
                if (packageManager.checkPermission(ACCESS_FINE_LOCATION, APP_PACKAGE_NAME) ==
                        PackageManager.PERMISSION_DENIED) {
                    uiDevice.click(buttonCenter.x, buttonCenter.y)
                    Thread.sleep(100)
                }
                assertAppHasPermission(ACCESS_FINE_LOCATION, true)
            }, 10000)
        } catch (e: RuntimeException) {
            // expected
        }
        // Permission should not be granted
        assertAppHasPer"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTapjackingTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionGroupTest.kt"	"testPartiallyGrantedGroupExpansion"	"CtsPermission3TestCases"	"1: granted"	"([2:/android/permission3/cts/PermissionGroupTest.kt]:[granted]:[2]:method_text:[    }        assertAppHasPermission(android.Manifest.permission.SEND_SMS, expectExpansion)    }}]) :|: 
    fun testPartiallyGrantedGroupExpansion() {
        installPackage(APP_APK_PATH_30)

        // Start out without permission
        assertAppHasPermission(android.Manifest.permission.RECEIVE_SMS, false)
        assertAppHasPermission(android.Manifest.permission.SEND_SMS, false)

        // Grant only RECEIVE_SMS
        uiAutomation.grantRuntimePermission(APP_PACKAGE_NAME,
            android.Manifest.permission.RECEIVE_SMS)
 assertAppHasPermission(android.Manifest.permission.RECEIVE_SMS, true)

        // Request both permissions, and expect that SEND_SMS is granted
        requestAppPermissionsAndAssertResult(android.Manifest.permission.RECEIVE_SMS to true,
            android.Manifest.permission.SEND_SMS to true) { }

        assertAppHasPermission(android.Manifest.permission.SEND_SMS, true)
    }

    private fun testRuntimeGroupGrantExpansion(expectExpansion: Boolean) {
        // Start out without permission
        assertAppHasPermission(android.Manifest.permission.RECEIVE_SMS, false)
        assertAppHasPermission(android.Manifest.permission.SEND_SMS, false)

        // Request only one permission from the 'SMS' permission group at runtime,
        // but two from this group are <uses-permission> in the manifest
        requestAppPermissionsAndAssertResult(android.Manifest.permission.RECEIVE_SMS to true) {
            clickPermissionRequestAllowButton()
        }

        assertAppHasPermission(android.Manifest.permission.SEND_SMS, expectExpansion)
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionGroupTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest29.kt"	"BaseUsePermissionTest"	"CtsPermission3TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission3/cts/PermissionTest29.kt]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[    assertAppHasPermission(android.Manifest.permission.ACCESS_BACKGROUND_LOCATION, false)    }   ]) :|: /*
 *.
 */

package android.permission3.cts

import android.support.test.uiautomator.By
import androidx.test.filters.FlakyTest
import com.android.compatibility.common.util.SystemUtil.eventually
import org.junit.Assume.assumeFalse
import org.junit.Before
import org.junit.Test

/**
 * Runtime permission behavior tests for apps targeting API 29.
 */
class PermissionTest29 : BaseUsePermissionTest() {
    @Before
    fun assumeNotTv() {
        assumeFalse(isTv)
    }

    @Before
    fun installApp29() {
        installPackage(APP_APK_PATH_29)
    }

    @Before
    fun assertAppHasNoPermissions() {
        assertAppHasPermission(android.Manifest.permission.ACCESS_FINE_LOCATION, false)
        assertAppHasPermission(android.Manifest.permission.ACCESS_BACKGROUND_LOCATION, false)
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest29.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest29.kt"	"testRequestOnlyBackgroundNotPossible"	"CtsPermission3TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([2:/android/permission3/cts/PermissionTest29.kt]:[ACCESS_BACKGROUND_LOCATION]:[2]:method_text:[    assertAppHasPermission(android.Manifest.permission.ACCESS_BACKGROUND_LOCATION, false)    }   ]) :|: 
    fun testRequestOnlyBackgroundNotPossible() {
        requestAppPermissionsAndAssertResult(
            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION to false
        ) {}

        assertAppHasPermission(android.Manifest.permission.ACCESS_BACKGROUND_LOCATION, false)
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest29.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest29.kt"	"testRequestBoth"	"CtsPermission3TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission3/cts/PermissionTest29.kt]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[true        ) {            clickPermissionRequestSettingsLinkAndAllowAlways()        }    }   ]) :|: 
    fun testRequestBoth() {
        requestAppPermissionsAndAssertResult(
            android.Manifest.permission.ACCESS_FINE_LOCATION to true,
            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION to true
        ) {
            clickPermissionRequestSettingsLinkAndAllowAlways()
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest29.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest29.kt"	"testRequestBothInSequence"	"CtsPermission3TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([2:/android/permission3/cts/PermissionTest29.kt]:[ACCESS_BACKGROUND_LOCATION]:[2]:method_text:[}        assertAppHasPermission(android.Manifest.permission.ACCESS_FINE_LOCATION, true)    }   ]) :|: 
    fun testRequestBothInSequence() {
        // Step 1: request foreground only
        requestAppPermissionsAndAssertResult(
            android.Manifest.permission.ACCESS_FINE_LOCATION to true
        ) {
            clickPermissionRequestAllowForegroundButton()
        }

        assertAppHasPermission(android.Manifest.permission.ACCESS_BACKGROUND_LOCATION, false)

        // Step 2: request background only
        requestAppPermissionsAndAssertResult(
            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION to true
        ) {
            clickPermissionRequestSettingsLinkAndAllowAlways()
        }

        assertAppHasPermission(android.Manifest.permission.ACCESS_FINE_LOCATION, true)
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest29.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest29.kt"	"testRequestBothButGrantInSequence"	"CtsPermission3TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([2:/android/permission3/cts/PermissionTest29.kt]:[ACCESS_BACKGROUND_LOCATION]:[2]:method_text:[{            clickPermissionRequestSettingsLinkAndAllowAlways()        }    }    @FlakyTest   ]) :|: 
    fun testRequestBothButGrantInSequence() {
        // Step 1: grant foreground only
        requestAppPermissionsAndAssertResult(
            android.Manifest.permission.ACCESS_FINE_LOCATION to true,
            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION to false
        ) {
            clickPermissionRequestAllowForegroundButton()
        }

        // Step 2: grant background
        requestAppPermissionsAndAssertResult(
            android.Manifest.permission.ACCESS_FINE_LOCATION to true,
            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION to true
        ) {
            clickPermissionRequestSettingsLinkAndAllowAlways()
        }
    }

    @FlakyTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest29.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest29.kt"	"testDenyBackgroundWithPrejudice"	"CtsPermission3TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([3:/android/permission3/cts/PermissionTest29.kt]:[ACCESS_BACKGROUND_LOCATION]:[3]:method_text:[droid.Manifest.permission.ACCESS_BACKGROUND_LOCATION to false        ) {}    }    @FlakyTest   ]) :|: 
    fun testDenyBackgroundWithPrejudice() {
        // Step 1: deny the first time
        requestAppPermissionsAndAssertResult(
            android.Manifest.permission.ACCESS_FINE_LOCATION to false,
            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION to false
        ) {
            clickPermissionRequestDenyButton()
        }

        // Step 2: deny with prejudice
        requestAppPermissionsAndAssertResult(
            android.Manifest.permission.ACCESS_FINE_LOCATION to false,
            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION to false
        ) {
            clickPermissionRequestDenyAndDontAskAgainButton()
        }

        // Step 3: All further requests should be denied automatically
        requestAppPermissionsAndAssertResult(
            android.Manifest.permission.ACCESS_FINE_LOCATION to false,
            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION to false
        ) {}
    }

    @FlakyTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest29.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest29.kt"	"testGrantDialogToSettingsNoOp"	"CtsPermission3TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([4:/android/permission3/cts/PermissionTest29.kt]:[ACCESS_BACKGROUND_LOCATION]:[4]:method_text:[droid.permissioncontroller:id/grant_dialog""), 100)            }        }    }    @FlakyTest   ]) :|: 
    fun testGrantDialogToSettingsNoOp() {
        // Step 1: Request both, go to settings, do nothing
        requestAppPermissionsAndAssertResult(
            android.Manifest.permission.ACCESS_FINE_LOCATION to true,
            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION to false
        ) {
            openSettingsThenDoNothingThenLeave()

            assertAppHasPermission(android.Manifest.permission.ACCESS_FINE_LOCATION, false)
            assertAppHasPermission(android.Manifest.permission.ACCESS_BACKGROUND_LOCATION, false)

            clickPermissionRequestAllowForegroundButton()
        }

        // Step 2: Upgrade foreground to background, go to settings, do nothing
        requestAppPermissionsAndAssertResult(
            android.Manifest.permission.ACCESS_FINE_LOCATION to true,
            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION to false
        ) {
            openSettingsThenDoNothingThenLeave()

            assertAppHasPermission(android.Manifest.permission.ACCESS_FINE_LOCATION, true)
            assertAppHasPermission(android.Manifest.permission.ACCESS_BACKGROUND_LOCATION, false)

            clickPermissionRequestNoUpgradeAndDontAskAgainButton()
        }
    }

    private fun openSettingsThenDoNothingThenLeave() {
        clickPermissionRequestSettingsLink()
        eventually {
            pressBack()
            if (isAutomotive) {
                waitFindObject(By.textContains(""Allow in settings.""), 100)
            } else {
                waitFindObject(By.res(""com.android.permissioncontroller:id/grant_dialog""), 100)
            }
        }
    }

    @FlakyTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest29.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest29.kt"	"testGrantDialogToSettingsDowngrade"	"CtsPermission3TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([3:/android/permission3/cts/PermissionTest29.kt]:[ACCESS_BACKGROUND_LOCATION]:[3]:method_text:[       assertAppHasPermission(android.Manifest.permission.ACCESS_BACKGROUND_LOCATION, false)    }}]) :|: 
    fun testGrantDialogToSettingsDowngrade() {
        // Request upgrade, downgrade permission to denied in settings
        requestAppPermissionsAndAssertResult(
            android.Manifest.permission.ACCESS_FINE_LOCATION to true,
            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION to false
        ) {
            clickPermissionRequestAllowForegroundButton()
        }

        requestAppPermissions(
            android.Manifest.permission.ACCESS_FINE_LOCATION,
            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION
        ) {
            clickPermissionRequestSettingsLinkAndDeny()
            waitForIdle()
            pressBack()
        }

        assertAppHasPermission(android.Manifest.permission.ACCESS_FINE_LOCATION, false)
        assertAppHasPermission(android.Manifest.permission.ACCESS_BACKGROUND_LOCATION, false)
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest29.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest30.kt"	"BaseUsePermissionTest"	"CtsPermission3TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/permission3/cts/PermissionTest30.kt]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[ermission behavior apps targeting API 30 */class PermissionTest30 : BaseUsePermissionTest() {   ]) :|: /*
 *.
 */

package android.permission3.cts

import android.Manifest.permission.ACCESS_BACKGROUND_LOCATION
import android.Manifest.permission.ACCESS_FINE_LOCATION
import org.junit.Test

/**
 * Runtime permission behavior apps targeting API 30
 */
class PermissionTest30 : BaseUsePermissionTest() {"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest30.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest30.kt"	"testCantRequestFgAndBgAtOnce"	"CtsPermission3TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([2:/android/permission3/cts/PermissionTest30.kt]:[ACCESS_BACKGROUND_LOCATION]:[2]:method_text:[_LOCATION to false) {            // Do nothing, should be automatically denied        }    }   ]) :|: 
    fun testCantRequestFgAndBgAtOnce() {
        installPackage(APP_APK_PATH_30_WITH_BACKGROUND)
        assertAppHasPermission(ACCESS_FINE_LOCATION, false)
        assertAppHasPermission(ACCESS_BACKGROUND_LOCATION, false)

        requestAppPermissionsAndAssertResult(ACCESS_FINE_LOCATION to false,
                ACCESS_BACKGROUND_LOCATION to false) {
            // Do nothing, should be automatically denied
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest30.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission3.cts.PermissionTest30.kt"	"testRequestBothInSequence"	"CtsPermission3TestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([2:/android/permission3/cts/PermissionTest30.kt]:[ACCESS_BACKGROUND_LOCATION]:[2]:method_text:[    clickAllowAlwaysInSettings()            waitForIdle()            pressBack()        }    }}]) :|: 
    fun testRequestBothInSequence() {
        installPackage(APP_APK_PATH_30_WITH_BACKGROUND)
        assertAppHasPermission(ACCESS_FINE_LOCATION, false)
        assertAppHasPermission(ACCESS_BACKGROUND_LOCATION, false)

        requestAppPermissionsAndAssertResult(ACCESS_FINE_LOCATION to true) {
            clickPermissionRequestAllowForegroundButton()
        }

        requestAppPermissionsAndAssertResult(ACCESS_BACKGROUND_LOCATION to true) {
            clickAllowAlwaysInSettings()
            waitForIdle()
            pressBack()
        }
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission3/src/android/permission3/cts/PermissionTest30.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.appwidget.cts.AppWidgetTest"	"testBindAppWidget"	"CtsAppWidgetTestCases"	"1: granted"	"([1:/android/appwidget/cts/AppWidgetTest.java]:[granted]:[1]:method_text:[);        }    }    @AppModeFull(reason = ""Instant apps cannot provide or host app widgets"")   ]) :|: 
    public void testBindAppWidget() throws Exception {
        // Create a host and start listening.
        AppWidgetHost host = new AppWidgetHost(getInstrumentation().getTargetContext(), 0);
        host.deleteHost();
        host.startListening();

        // Allocate an app widget id to bind.
        final int appWidgetId = host.allocateAppWidgetId();

        // Grab a provider we defined to be bound.
        AppWidgetProviderInfo provider = getFirstAppWidgetProviderInfo();

        // Bind the widget.
        boolean widgetBound = getAppWidgetManager().bindAppWidgetIdIfAllowed(appWidgetId,
                provider.getProfile(), provider.provider, null);
        assertFalse(widgetBound);

        // Well, app do not have this permission unless explicitly granted
        // by the user. Now we will pretend for the user and grant it.
        grantBindAppWidgetPermission();

        try {
            // Bind the widget as we have a permission for that.
            widgetBound = getAppWidgetManager().bindAppWidgetIdIfAllowed(
                    appWidgetId, provider.getProfile(), provider.provider, null);
            assertTrue(widgetBound);

            // Deallocate the app widget id.
            host.deleteAppWidgetId(appWidgetId);
        } finally {
            // Clean up.
            host.deleteAppWidgetId(appWidgetId);
            host.deleteHost();
            revokeBindAppWidgetPermission();
        }
    }

    @AppModeFull(reason = ""Instant apps cannot provide or host app widgets"")"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/appwidget/src/android/appwidget/cts/AppWidgetTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.carrierapi.cts.NetworkScanApiTest"	"werePreconditionsSatisfied"	"CtsCarrierApiTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([2:/android/carrierapi/cts/NetworkScanApiTest.java]:[ACCESS_BACKGROUND_LOCATION]:[2]:method_text:[ radioAccessSpecifier;    }    /** Tests that the device properly requests a network scan. */   ]) :|: /*
 *.
 */
package android.carrierapi.cts;

import static android.Manifest.permission.ACCESS_BACKGROUND_LOCATION;
import static android.Manifest.permission.ACCESS_FINE_LOCATION;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import static org.junit.Assert.fail;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Message;
import android.os.Parcel;
import android.os.Process;
import android.os.UserHandle;
import android.telephony.AccessNetworkConstants;
import android.telephony.CellInfo;
import android.telephony.CellInfoGsm;
import android.telephony.CellInfoLte;
import android.telephony.CellInfoWcdma;
import android.telephony.NetworkScan;
import android.telephony.NetworkScanRequest;
import android.telephony.RadioAccessSpecifier;
import android.telephony.TelephonyManager;
import android.telephony.TelephonyScanManager;
import android.util.Log;

import androidx.test.InstrumentationRegistry;
import androidx.test.runner.AndroidJUnit4;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

/**
 * Unit tests for {@link TelephonyManager}'s network scan APIs.
 *
 * <p>Test using `atest CtsCarrierApiTestCases:NetworkScanApiTest` or `make cts -j64 && cts-tradefed
 * run cts -m CtsCarrierApiTestCases --test android.carrierapi.cts.NetworkScanApiTest`
 */
@RunWith(AndroidJUnit4.class)
public class NetworkScanApiTest extends BaseCarrierApiTest {
    priva"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/NetworkScanApiTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission4.cts.CameraMicIndicatorsPermissionTest.kt"	"DisableAnimationRule"	"CtsPermission4TestCases"	"2: Microphone microphone"	"([5:/android/permission4/cts/CameraMicIndicatorsPermissionTest.kt]:[microphone]:[5]:method_text:[a(USE_HOTWORD, useHotword)            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)        })    }   ]) :|: /*
 *.
 */
package android.permission4.cts

import android.Manifest
import android.app.Instrumentation
import android.app.UiAutomation
import android.app.compat.CompatChanges
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.hardware.camera2.CameraManager
import android.os.Process
import android.provider.DeviceConfig
import android.provider.Settings
import android.server.wm.WindowManagerStateHelper
import android.support.test.uiautomator.By
import android.support.test.uiautomator.UiDevice
import android.support.test.uiautomator.UiSelector
import androidx.test.platform.app.InstrumentationRegistry
import com.android.compatibility.common.util.DisableAnimationRule
import com.android.compatibility.common.util.SystemUtil.*
import org.junit.After
import org.junit.Assert.*
import org.junit.Assume.assumeFalse
import org.junit.Assume.assumeTrue
import org.junit.Before
import org.junit.Rule
import org.junit.Test

private const val APP_LABEL = ""CtsCameraMicAccess""
private const val USE_CAMERA = ""use_camera""
private const val USE_MICROPHONE = ""use_microphone""
private const val USE_HOTWORD = ""use_hotword""
private const val INTENT_ACTION = ""test.action.USE_CAMERA_OR_MIC""
private const val PRIVACY_CHIP_ID = ""com.android.systemui:id/privacy_chip""
private const val INDICATORS_FLAG = ""camera_mic_icons_enabled""
private const val PERMISSION_INDICATORS_NOT_PRESENT = 162547999L
private const val IDLE_TIMEOUT_MILLIS: Long = 1000
private const val UNEXPECTED_TIMEOUT_MILLIS = 1000
private const val TIMEOUT_MILLIS: Long = 20000
private const val TV_MIC_INDICATOR_WINDOW_TITLE = ""MicrophoneCaptureIndicator""

class CameraMicIndicatorsPermissionTest {
    private val instrumentation: Instrumentation = InstrumentationRegistry.getInstrumentation()
    private val context: Context = instrumentation.context
    private val uiAutomation: UiAutomation = instrumentation.uiAutomation
    private val uiDevice: UiDevice = UiDevice.getInstan"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission4/src/android/permission4/cts/CameraMicIndicatorsPermissionTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.content.pm.cts.shortcutmanager.ShortcutManagerNegativeTest"	"testCommand"	"CtsShortcutManagerTestCases"	"2: silent silently"	"([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java]:[silently]:[1]:method_text:[       });    }    /**     * Make sure AIDL methods can't be called for other users.     */   ]) :|: public void testCommand() throws Exception {
        runWithCaller(mPackageContext1, () -> {
            assertTrue(getManager().setDynamicShortcuts(list(
                    makeShortcut(""s1""))));
        });

        // cmd shortcut will fail silently, with no error outputs.
        MoreAsserts.assertNotContainsRegex(""Success"", runCommand(""cmd shortcut clear-shortcuts "" +
                mPackageContext1.getPackageName()));

        // Shortcuts shouldn't be cleared.
        runWithCaller(mPackageContext1, () -> {
            assertWith(getManager().getDynamicShortcuts())
                    .haveIds(""s1"");
        });
    }

    /**
     * Make sure AIDL methods can't be called for other users.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.net.wifi.cts.WifiBackupRestoreTest"	"isNotNull"	"CtsWifiTestCases"	"1: granted"	"([1:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[granted]:[1]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ]) :|: /*
 *.
 */

package android.net.wifi.cts;

import static android.content.pm.PackageManager.PERMISSION_GRANTED;
import static android.net.wifi.WifiConfiguration.METERED_OVERRIDE_METERED;
import static android.net.wifi.WifiConfiguration.METERED_OVERRIDE_NONE;
import static android.net.wifi.WifiConfiguration.METERED_OVERRIDE_NOT_METERED;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import static org.junit.Assume.assumeTrue;

import android.app.UiAutomation;
import android.content.Context;
import android.net.IpConfiguration;
import android.net.LinkAddress;
import android.net.ProxyInfo;
import android.net.StaticIpConfiguration;
import android.net.Uri;
import android.net.wifi.SoftApConfiguration;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiEnterpriseConfig;
import android.net.wifi.WifiManager;
import android.platform.test.annotations.AppModeFull;
import android.support.test.uiautomator.UiDevice;
import android.util.Log;

import androidx.test.ext.junit.runners.AndroidJUnit4;
import androidx.test.filters.SmallTest;
import androidx.test.platform.app.InstrumentationRegistry;

import com.android.compatibility.common.util.PollingCheck;
import com.android.compatibility.common.util.ShellIdentityUtils;
import com.android.compatibility.common.util.SystemUtil;
import com.android.compatibility.common.util.ThrowingRunnable;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Tests for wifi backup/restore functionality.
 */
@AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")
@SmallTest
@RunWith(AndroidJUnit4.class)
public c"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.net.wifi.cts.WifiBackupRestoreTest"	"testCanRestoreBackupData"	"CtsWifiTestCases"	"1: granted"	"([1:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[granted]:[1]:method_text:[retrieveSoftApBackupData()} &     * {@link WifiManager#restoreSoftApBackupData(byte[])}     */   ]) :|: 
    public void testCanRestoreBackupData() {
        UiAutomation uiAutomation = InstrumentationRegistry.getInstrumentation().getUiAutomation();
        WifiConfiguration origNetwork = null;
        try {
            uiAutomation.adoptShellPermissionIdentity();

            // Pick a regular saved network to modify (non-enterprise, non-Passpoint)
            origNetwork = mWifiManager.getConfiguredNetworks().stream()
                    .filter(n -> {
                        boolean canOverrideConfig = mContext.checkPermission(
                                android.Manifest.permission.OVERRIDE_WIFI_CONFIG, -1, n.creatorUid)
                                == PERMISSION_GRANTED;
                        return canOverrideConfig && !isEnterprise(n) && !n.isPasspoint();
                    })
                    .findAny()
                    .orElse(null);
            if (origNetwork == null) {
                Log.e(TAG, ""Need a non-enterprise and non-Passpoint network created by an app ""
                        + ""holding OVERRIDE_WIFI_CONFIG permission to fully evaluate the ""
                        + ""functionality"");
            }

            // Retrieve backup data.
            byte[] backupData = mWifiManager.retrieveBackupData();

            if (origNetwork != null) {
                // Modify the metered bit.
                final String origNetworkSsid = origNetwork.SSID;
                WifiConfiguration modNetwork = new WifiConfiguration(origNetwork);
                flipMeteredOverride(modNetwork);
                int networkId = mWifiManager.updateNetwork(modNetwork);
                assertThat(networkId).isEqualTo(origNetwork.networkId);
                assertThat(mWifiManager.getConfiguredNetworks()
                        .stream()
                        .filter(n -> n.SSID.equals(origNetworkSsid))
                        .findAny()
                        .get().meteredOverride)
                        .isNotEqualTo(origNetwork.meteredOverride);"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.net.wifi.cts.WifiLocationInfoTest"	"isNotNull"	"CtsWifiTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[E_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_TRANSPORT_INFO_SERVICE), status);    }   ]) :|: /*
 *.
 */

package android.net.wifi.cts;

import static android.Manifest.permission.ACCESS_BACKGROUND_LOCATION;
import static android.Manifest.permission.ACCESS_FINE_LOCATION;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import static org.junit.Assume.assumeTrue;

import android.content.ComponentName;
import android.content.Context;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.platform.test.annotations.AppModeFull;

import androidx.test.ext.junit.runners.AndroidJUnit4;
import androidx.test.filters.SdkSuppress;
import androidx.test.filters.SmallTest;
import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.rule.ActivityTestRule;

import com.android.compatibility.common.util.PollingCheck;
import com.android.compatibility.common.util.ShellIdentityUtils;
import com.android.compatibility.common.util.SystemUtil;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.List;

/**
 * Tests location sensitive APIs exposed by Wi-Fi.
 * Ensures that permissions on these APIs are properly enforced.
 */
@AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")
@SmallTest
@RunWith(AndroidJUnit4.class)
public class WifiLocationInfoTest extends WifiJUnit4TestBase {
    private static final String TAG = ""WifiLocationInfoTest"";

    private static final String WIFI_LOCATION_TEST_APP_APK_PATH =
            ""/data/local/tmp/cts/wifi/CtsWifiLocationTestApp.apk"";
    private static final String WIFI_LOCATION_TEST_APP_PACKAGE_NAME =
            ""android.net.wifi.cts.app"";
    private static final String WIFI_LOCATION_TEST_APP_TRIGGER_SCAN_ACTIVITY =
            WIFI_LOCATION_TEST_APP_PACKAGE_NAME + "".TriggerScanAndReturnStatusActivity"";
    private static final String WIFI_LOCATION_TEST_APP_TRIGGER_SCAN_SERVICE ="	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.net.wifi.cts.WifiLocationInfoTest"	"testScanTriggerAllowedForBackgroundServiceWithBackgroundLocationPermission"	"CtsWifiTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[E_NAME, ACCESS_BACKGROUND_LOCATION);        triggerScanBgServiceAndAssertStatusIs(true);    }   ]) :|: 
    public void testScanTriggerAllowedForBackgroundServiceWithBackgroundLocationPermission()
            throws Exception {
        InstrumentationRegistry.getInstrumentation().getUiAutomation().grantRuntimePermission(
                WIFI_LOCATION_TEST_APP_PACKAGE_NAME, ACCESS_FINE_LOCATION);
        InstrumentationRegistry.getInstrumentation().getUiAutomation().grantRuntimePermission(
                WIFI_LOCATION_TEST_APP_PACKAGE_NAME, ACCESS_BACKGROUND_LOCATION);
        triggerScanBgServiceAndAssertStatusIs(true);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.net.wifi.cts.WifiLocationInfoTest"	"testScanResultsRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission"	"CtsWifiTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[ACCESS_BACKGROUND_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(true);    }   ]) :|: 
    public void testScanResultsRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission()
            throws Exception {
        InstrumentationRegistry.getInstrumentation().getUiAutomation().grantRuntimePermission(
                WIFI_LOCATION_TEST_APP_PACKAGE_NAME, ACCESS_FINE_LOCATION);
        InstrumentationRegistry.getInstrumentation().getUiAutomation().grantRuntimePermission(
                WIFI_LOCATION_TEST_APP_PACKAGE_NAME, ACCESS_BACKGROUND_LOCATION);
        retrieveScanResultsBgServiceAndAssertStatusIs(true);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.net.wifi.cts.WifiLocationInfoTest"	"testConnectionInfoRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission"	"CtsWifiTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[ESS_BACKGROUND_LOCATION);        retrieveConnectionInfoBgServiceAndAssertStatusIs(true);    }   ]) :|: 
    public void
        testConnectionInfoRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission()
            throws Exception {
        InstrumentationRegistry.getInstrumentation().getUiAutomation().grantRuntimePermission(
                WIFI_LOCATION_TEST_APP_PACKAGE_NAME, ACCESS_FINE_LOCATION);
        InstrumentationRegistry.getInstrumentation().getUiAutomation().grantRuntimePermission(
                WIFI_LOCATION_TEST_APP_PACKAGE_NAME, ACCESS_BACKGROUND_LOCATION);
        retrieveConnectionInfoBgServiceAndAssertStatusIs(true);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.net.wifi.cts.WifiLocationInfoTest"	"testTransportInfoRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission"	"CtsWifiTestCases"	"1: ACCESS_BACKGROUND_LOCATION"	"([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[BgServiceAndAssertStatusIs(true);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ]) :|: 
    public void
    testTransportInfoRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission()
            throws Exception {
        InstrumentationRegistry.getInstrumentation().getUiAutomation().grantRuntimePermission(
                WIFI_LOCATION_TEST_APP_PACKAGE_NAME, ACCESS_FINE_LOCATION);
        InstrumentationRegistry.getInstrumentation().getUiAutomation().grantRuntimePermission(
                WIFI_LOCATION_TEST_APP_PACKAGE_NAME, ACCESS_BACKGROUND_LOCATION);
        retrieveTransportInfoBgServiceAndAssertStatusIs(true);
    }

    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.net.wifi.cts.WifiManagerTest"	"testNetworkStackPermission"	"CtsWifiTestCases"	"1: granted"	"([1:/android/net/wifi/cts/WifiManagerTest.java]:[granted]:[1]:method_text:[ intended to be granted to only those apps with direct user     * access and no others.     */   ]) :|: public void testNetworkStackPermission() {
        if (!WifiFeature.isWifiSupported(getContext())) {
            // skip the test if WiFi is not supported
            return;
        }
        final PackageManager pm = getContext().getPackageManager();

        final List<PackageInfo> holding = pm.getPackagesHoldingPermissions(new String[] {
                android.Manifest.permission.NETWORK_STACK
        }, PackageManager.MATCH_UNINSTALLED_PACKAGES);
        for (PackageInfo pi : holding) {
            fail(""The NETWORK_STACK permission must not be held by "" + pi.packageName
                    + "" and must be revoked for security reasons"");
        }
    }

    /**
     * Verify that the {@link android.Manifest.permission#NETWORK_SETTINGS} permission is
     * never held by any package.
     * <p>
     * Only Settings, SysUi, NetworkStack and shell apps should <em>ever</em> attempt to acquire
     * this permission, since it would give those apps extremely broad access to connectivity
     * functionality.  The permission is intended to be granted to only those apps with direct user
     * access and no others.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.net.wifi.cts.WifiManagerTest"	"testNetworkSettingsPermission"	"CtsWifiTestCases"	"1: granted"	"([1:/android/net/wifi/cts/WifiManagerTest.java]:[granted]:[1]:method_text:[unctionality.  The permission is intended to be granted to only the device setup wizard.     */   ]) :|: public void testNetworkSettingsPermission() {
        if (!WifiFeature.isWifiSupported(getContext())) {
            // skip the test if WiFi is not supported
            return;
        }
        final PackageManager pm = getContext().getPackageManager();

        final ArraySet<String> allowedPackages = new ArraySet();
        final ArraySet<Integer> allowedUIDs = new ArraySet();
        // explicitly add allowed UIDs
        allowedUIDs.add(Process.SYSTEM_UID);
        allowedUIDs.add(Process.SHELL_UID);
        allowedUIDs.add(Process.PHONE_UID);
        allowedUIDs.add(Process.NETWORK_STACK_UID);
        allowedUIDs.add(Process.NFC_UID);

        // only quick settings is allowed to bind to the BIND_QUICK_SETTINGS_TILE permission, using
        // this fact to determined allowed package name for sysui. This is a signature permission,
        // so allow any package with this permission.
        final List<PackageInfo> sysuiPackages = pm.getPackagesHoldingPermissions(new String[] {
                android.Manifest.permission.BIND_QUICK_SETTINGS_TILE
        }, PackageManager.MATCH_UNINSTALLED_PACKAGES);
        for (PackageInfo info : sysuiPackages) {
            allowedPackages.add(info.packageName);
        }

        // the captive portal flow also currently holds the NETWORK_SETTINGS permission
        final Intent intent = new Intent(ConnectivityManager.ACTION_CAPTIVE_PORTAL_SIGN_IN);
        final ResolveInfo ri = pm.resolveActivity(intent, PackageManager.MATCH_DISABLED_COMPONENTS);
        if (ri != null) {
            allowedPackages.add(ri.activityInfo.packageName);
        }

        final List<PackageInfo> holding = pm.getPackagesHoldingPermissions(new String[] {
                android.Manifest.permission.NETWORK_SETTINGS
        }, PackageManager.MATCH_UNINSTALLED_PACKAGES);
        StringBuilder stringBuilder = new StringBuilder();
        for (PackageInfo pi : holding) {
            String packageName = pi.packageName;

            // this is an ex"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.net.wifi.cts.WifiManagerTest"	"testNetworkSetupWizardPermission"	"CtsWifiTestCases"	"1: granted"	"([1:/android/net/wifi/cts/WifiManagerTest.java]:[granted]:[1]:method_text:[The permission is intended to be granted to only the device managed     * provisioning.     */   ]) :|: public void testNetworkSetupWizardPermission() {
        if (!WifiFeature.isWifiSupported(getContext())) {
            // skip the test if WiFi is not supported
            return;
        }
        final ArraySet<String> allowedPackages = new ArraySet();

        final PackageManager pm = getContext().getPackageManager();

        final Intent intent = new Intent(Intent.ACTION_MAIN);
        intent.addCategory(Intent.CATEGORY_SETUP_WIZARD);
        final ResolveInfo ri = pm.resolveActivity(intent, PackageManager.MATCH_DISABLED_COMPONENTS);
        String validPkg = """";
        if (ri != null) {
            allowedPackages.add(ri.activityInfo.packageName);
            validPkg = ri.activityInfo.packageName;
        }

        final Intent preIntent = new Intent(""com.android.setupwizard.OEM_PRE_SETUP"");
        preIntent.addCategory(Intent.CATEGORY_DEFAULT);
        final ResolveInfo preRi = pm
            .resolveActivity(preIntent, PackageManager.MATCH_DISABLED_COMPONENTS);
        String prePackageName = """";
        if (null != preRi) {
            prePackageName = preRi.activityInfo.packageName;
        }

        final Intent postIntent = new Intent(""com.android.setupwizard.OEM_POST_SETUP"");
        postIntent.addCategory(Intent.CATEGORY_DEFAULT);
        final ResolveInfo postRi = pm
            .resolveActivity(postIntent, PackageManager.MATCH_DISABLED_COMPONENTS);
        String postPackageName = """";
        if (null != postRi) {
            postPackageName = postRi.activityInfo.packageName;
        }
        if (!TextUtils.isEmpty(prePackageName) && !TextUtils.isEmpty(postPackageName)
            && prePackageName.equals(postPackageName)) {
            allowedPackages.add(prePackageName);
        }

        final List<PackageInfo> holding = pm.getPackagesHoldingPermissions(new String[]{
            android.Manifest.permission.NETWORK_SETUP_WIZARD
        }, PackageManager.MATCH_UNINSTALLED_PACKAGES);
        for (PackageInfo pi : holding) {
            if (!"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.graphics.cts.BitmapFactoryTest"	"testDecodeReuseAttempt"	"CtsGraphicsTestCases"	"2: silent silently"	"([1:/android/graphics/cts/BitmapFactoryTest.java]:[silently]:[1]:method_text:[awable.pass, options);        assertNotNull(pass);        assertNotEquals(start, pass);    }   ]) :|: 
    public void testDecodeReuseAttempt() {
        // BitmapFactory ""silently"" ignores an immutable inBitmap. (It does print a log message.)
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inMutable = false;

        Bitmap start = BitmapFactory.decodeResource(mRes, R.drawable.start, options);
        assertFalse(start.isMutable());

        options.inBitmap = start;
        Bitmap pass = BitmapFactory.decodeResource(mRes, R.drawable.pass, options);
        assertNotNull(pass);
        assertNotEquals(start, pass);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapFactoryTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission5.cts.RuntimePermissionsAppOpTrackingTest.kt"	"testMicRecognitionInjectRecoWithoutAttribution"	"CtsPermission5TestCases"	"1: RECORD_AUDIO"	"([8:/android/permission5/cts/RuntimePermissionsAppOpTrackingTest.kt]:[RECORD_AUDIO]:[8]:method_text:[  instrumentation.runOnMainSync { recognizerRef.get().destroy() }            }        }    }   ]) :|: 
    @Throws(Exception::class)
    fun testMicRecognitionInjectRecoWithoutAttribution() {
        runWithAuxiliaryApps {
            startBlamedAppActivity()

            val context = createAttributionContext(ACCESSOR_ATTRIBUTION_TAG,
                    RECEIVER_PACKAGE_NAME, RECEIVER_ATTRIBUTION_TAG)

            val listener = mock(AppOpsManager.OnOpActiveChangedListener::class.java)
            val appopsManager = context.getSystemService(AppOpsManager::class.java)
            SystemUtil.runWithShellPermissionIdentity<Unit> {
                appopsManager!!.startWatchingActive(arrayOf(AppOpsManager.OPSTR_RECORD_AUDIO),
                        context.mainExecutor, listener)
            }

            val speechStartTime = System.currentTimeMillis()
            val recognizerRef = AtomicReference<SpeechRecognizer>()
            var currentOperationComplete = CountDownLatch(1)

            instrumentation.runOnMainSync {
                val recognizer = SpeechRecognizer.createSpeechRecognizer(context,
                        ComponentName(RECEIVER2_PACKAGE_NAME, RECOGNITION_SERVICE))

                recognizer.setRecognitionListener(object : RecognitionListener {
                    override fun onReadyForSpeech(params: Bundle?) {}
                    override fun onRmsChanged(rmsdB: Float) {}
                    override fun onBufferReceived(buffer: ByteArray?) {
                        currentOperationComplete.countDown()
                    }
                    override fun onPartialResults(partialResults: Bundle?) {}
                    override fun onEvent(eventType: Int, params: Bundle?) {}
                    override fun onError(error: Int) {}
                    override fun onResults(results: Bundle?) {}
                    override fun onBeginningOfSpeech() {}
                    override fun onEndOfSpeech() {}
                })

                val recoIntent = Intent()
                recoIntent.putExtra(OPERATION, OPERATION_INJECT_RECO_WITHOUT_AT"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission5/src/android/permission5/cts/RuntimePermissionsAppOpTrackingTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission5.cts.RuntimePermissionsAppOpTrackingTest.kt"	"testMicRecognitionMicRecoWithAttribution"	"CtsPermission5TestCases"	"1: RECORD_AUDIO"	"([8:/android/permission5/cts/RuntimePermissionsAppOpTrackingTest.kt]:[RECORD_AUDIO]:[8]:method_text:[ attributionSourceRef.get()        }        private fun assumeNotTv() = assumeFalse(isTv)    }}]) :|: 
    @Throws(Exception::class)
    fun testMicRecognitionMicRecoWithAttribution() {
        runWithAuxiliaryApps {
            startBlamedAppActivity()

            val context = createAttributionContext(ACCESSOR_ATTRIBUTION_TAG,
                    RECEIVER_PACKAGE_NAME, RECEIVER_ATTRIBUTION_TAG)

            val listener = mock(AppOpsManager.OnOpActiveChangedListener::class.java)
            val appopsManager = context.getSystemService(AppOpsManager::class.java)
            SystemUtil.runWithShellPermissionIdentity<Unit> {
                appopsManager!!.startWatchingActive(arrayOf(AppOpsManager.OPSTR_RECORD_AUDIO),
                        context.mainExecutor, listener)
            }

            val speechStartTime = System.currentTimeMillis()
            val recognizerRef = AtomicReference<SpeechRecognizer>()
            var currentOperationComplete = CountDownLatch(1)

            instrumentation.runOnMainSync {
                val recognizer = SpeechRecognizer.createSpeechRecognizer(context,
                        ComponentName(RECEIVER2_PACKAGE_NAME, RECOGNITION_SERVICE))

                recognizer.setRecognitionListener(object : RecognitionListener {
                    override fun onReadyForSpeech(params: Bundle?) {}
                    override fun onRmsChanged(rmsdB: Float) {}
                    override fun onBufferReceived(buffer: ByteArray?) {
                        currentOperationComplete.countDown()
                    }
                    override fun onPartialResults(partialResults: Bundle?) {}
                    override fun onEvent(eventType: Int, params: Bundle?) {}
                    override fun onError(error: Int) {}
                    override fun onResults(results: Bundle?) {}
                    override fun onBeginningOfSpeech() {}
                    override fun onEndOfSpeech() {}
                })

                val recoIntent = Intent()
                recoIntent.putExtra(OPERATION, OPERATION_MIC_RECO_WITH_ATTRIBUTION)"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission5/src/android/permission5/cts/RuntimePermissionsAppOpTrackingTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.permission5.cts.RenouncedPermissionsTest.kt"	"testRenouncePermissionsChain"	"CtsPermission5TestCases"	"1: granted"	"([2:/android/permission5/cts/RenouncedPermissionsTest.kt]:[granted]:[2]:method_text:[Contract.Contacts.CONTENT_URI,                    null, null, null)!!.close()        })    }   ]) :|: 
    @Throws(Exception::class)
    @AppModeFull(reason=""Instant apps cannot hold READ_CALENDAR/READ_CONTACTS permissions"")
    fun testRenouncePermissionsChain() {
        val receiverAttributionSource = getShellAttributionSourceWithRenouncedPermissions()
        val activity = createActivityWithAttributionContext(receiverAttributionSource)

        // Out app has the permissions
        assertThat(activity.checkSelfPermission(Manifest.permission.READ_CALENDAR))
                .isEqualTo(PackageManager.PERMISSION_GRANTED)
        assertThat(activity.checkSelfPermission(Manifest.permission.READ_CONTACTS))
                .isEqualTo(PackageManager.PERMISSION_GRANTED)

        // Accessing the data should also fail (for us and next in the data flow)
        assertThrows(SecurityException::class.java, ThrowingRunnable{
            activity.contentResolver.query(CalendarContract.Calendars.CONTENT_URI,
                    null, null, null)!!.close()
        })
        assertThrows(SecurityException::class.java, ThrowingRunnable{
            activity.contentResolver.query(ContactsContract.Contacts.CONTENT_URI,
                    null, null, null)!!.close()
        })
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/permission5/src/android/permission5/cts/RenouncedPermissionsTest.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.voiceinteraction.cts.HotwordDetectionServiceBasicTest"	"testHotwordDetectionService_onDetectFromDsp_success"	"CtsVoiceInteractionTestCases"	"2: Microphone microphone"	"([1:/android/voiceinteraction/cts/HotwordDetectionServiceBasicTest.java]:[microphone]:[1]:method_text:[        MainHotwordDetectionService.DETECTED_RESULT);        verifyMicrophoneChip(true);    }   ]) :|: 
    @RequiresDevice
    public void testHotwordDetectionService_onDetectFromDsp_success()
            throws Throwable {
        Thread.sleep(CLEAR_CHIP_MS);
        // Create AlwaysOnHotwordDetector and wait the HotwordDetectionService ready
        testHotwordDetection(Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_TEST,
                Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_RESULT_INTENT,
                Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_SUCCESS);

        verifyDetectedResult(
                performAndGetDetectionResult(Utils.HOTWORD_DETECTION_SERVICE_DSP_ONDETECT_TEST),
                MainHotwordDetectionService.DETECTED_RESULT);
        verifyMicrophoneChip(true);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/voiceinteraction/src/android/voiceinteraction/cts/HotwordDetectionServiceBasicTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.voiceinteraction.cts.HotwordDetectionServiceBasicTest"	"testHotwordDetectionService_onDetectFromDsp_rejection"	"CtsVoiceInteractionTestCases"	"2: Microphone microphone"	"([1:/android/voiceinteraction/cts/HotwordDetectionServiceBasicTest.java]:[microphone]:[1]:method_text:[qualTo(MainHotwordDetectionService.REJECTED_RESULT);        verifyMicrophoneChip(false);    }   ]) :|: 
    @RequiresDevice
    public void testHotwordDetectionService_onDetectFromDsp_rejection()
            throws Throwable {
        Thread.sleep(CLEAR_CHIP_MS);
        // Create AlwaysOnHotwordDetector and wait the HotwordDetectionService ready
        testHotwordDetection(Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_TEST,
                Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_RESULT_INTENT,
                Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_SUCCESS);

        assertThat(performAndGetDetectionResult(Utils.HOTWORD_DETECTION_SERVICE_DSP_ONREJECT_TEST))
                .isEqualTo(MainHotwordDetectionService.REJECTED_RESULT);
        verifyMicrophoneChip(false);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/voiceinteraction/src/android/voiceinteraction/cts/HotwordDetectionServiceBasicTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.voiceinteraction.cts.HotwordDetectionServiceBasicTest"	"testHotwordDetectionService_onDetectFromExternalSource_success"	"CtsVoiceInteractionTestCases"	"2: Microphone microphone"	"([1:/android/voiceinteraction/cts/HotwordDetectionServiceBasicTest.java]:[microphone]:[1]:method_text:[        MainHotwordDetectionService.DETECTED_RESULT);        verifyMicrophoneChip(true);    }   ]) :|: 
    public void testHotwordDetectionService_onDetectFromExternalSource_success()
            throws Throwable {
        Thread.sleep(CLEAR_CHIP_MS);
        // Create AlwaysOnHotwordDetector and wait the HotwordDetectionService ready
        testHotwordDetection(Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_TEST,
                Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_RESULT_INTENT,
                Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_SUCCESS);

        verifyDetectedResult(
                performAndGetDetectionResult(
                        Utils.HOTWORD_DETECTION_SERVICE_EXTERNAL_SOURCE_ONDETECT_TEST),
                MainHotwordDetectionService.DETECTED_RESULT);
        verifyMicrophoneChip(true);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/voiceinteraction/src/android/voiceinteraction/cts/HotwordDetectionServiceBasicTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.voiceinteraction.cts.HotwordDetectionServiceBasicTest"	"testHotwordDetectionService_onDetectFromMic_success"	"CtsVoiceInteractionTestCases"	"2: Microphone microphone"	"([1:/android/voiceinteraction/cts/HotwordDetectionServiceBasicTest.java]:[microphone]:[1]:method_text:[        MainHotwordDetectionService.DETECTED_RESULT);        verifyMicrophoneChip(true);    }   ]) :|: 
    @RequiresDevice
    public void testHotwordDetectionService_onDetectFromMic_success()
            throws Throwable {
        Thread.sleep(CLEAR_CHIP_MS);
        // Create SoftwareHotwordDetector and wait the HotwordDetectionService ready
        testHotwordDetection(Utils.HOTWORD_DETECTION_SERVICE_FROM_SOFTWARE_TRIGGER_TEST,
                Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_RESULT_INTENT,
                Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_SUCCESS);

        verifyDetectedResult(
                performAndGetDetectionResult(Utils.HOTWORD_DETECTION_SERVICE_MIC_ONDETECT_TEST),
                MainHotwordDetectionService.DETECTED_RESULT);
        verifyMicrophoneChip(true);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/voiceinteraction/src/android/voiceinteraction/cts/HotwordDetectionServiceBasicTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.voiceinteraction.cts.HotwordDetectionServiceBasicTest"	"testHotwordDetectionService_processDied_triggerOnError"	"CtsVoiceInteractionTestCases"	"2: Microphone microphone"	"([3:/android/voiceinteraction/cts/HotwordDetectionServiceBasicTest.java]:[microphone]:[3]:method_text:[ion.cts/""                + ""android.voiceinteraction.service.BasicVoiceInteractionService"";    }}]) :|: 
    public void testHotwordDetectionService_processDied_triggerOnError()
            throws Throwable {
        // Create AlwaysOnHotwordDetector and wait the HotwordDetectionService ready
        testHotwordDetection(Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_TEST,
                Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_RESULT_INTENT,
                Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_SUCCESS);

        // Use AlwaysOnHotwordDetector to test process died of HotwordDetectionService
        testHotwordDetection(Utils.HOTWORD_DETECTION_SERVICE_PROCESS_DIED_TEST,
                Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_RESULT_INTENT,
                Utils.HOTWORD_DETECTION_SERVICE_GET_ERROR);
    }

    private void testHotwordDetection(int testType, String expectedIntent, int expectedResult) {
        final BlockingBroadcastReceiver receiver = new BlockingBroadcastReceiver(mContext,
                expectedIntent);
        receiver.register();
        perform(testType);
        final Intent intent = receiver.awaitForBroadcast(TIMEOUT_MS);
        receiver.unregisterQuietly();

        assertThat(intent).isNotNull();
        assertThat(intent.getIntExtra(Utils.KEY_TEST_RESULT, -1)).isEqualTo(expectedResult);
    }

    @NonNull
    private Parcelable performAndGetDetectionResult(int testType) {
        final BlockingBroadcastReceiver receiver = new BlockingBroadcastReceiver(mContext,
                Utils.HOTWORD_DETECTION_SERVICE_ONDETECT_RESULT_INTENT);
        receiver.register();
        perform(testType);
        final Intent intent = receiver.awaitForBroadcast(TIMEOUT_MS);
        receiver.unregisterQuietly();

        assertThat(intent).isNotNull();
        final Parcelable result = intent.getParcelableExtra(Utils.KEY_TEST_RESULT);
        assertThat(result).isNotNull();
        return result;
    }

    private void perform(int testType) {
        mActivityTestRule.getScenario().onActivity(
                activity -> activity.triggerHotwordDetectionServiceTe"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/voiceinteraction/src/android/voiceinteraction/cts/HotwordDetectionServiceBasicTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.telephony3.cts.TelephonyManagerTest"	"testDeviceIdentifiersAreNotAccessible"	"CtsTelephony3TestCases"	"1: granted"	"([10:/android/telephony3/cts/TelephonyManagerTest.java]:[granted]:[10]:method_text:[ce identifiers, caught ""                    + ""SecurityException instead: "" + e);        }    }}]) :|: 
    @AsbSecurityTest(cveBugId = 173421434)
    public void testDeviceIdentifiersAreNotAccessible() throws Exception {
        // Apps with the READ_PHONE_STATE permission should no longer have access to device
        // identifiers. If an app's target SDK is less than Q and it has been granted the
        // READ_PHONE_STATE permission then a null value should be returned when querying for device
        // identifiers; this test verifies a null value is returned for device identifier queries.
        try {
            assertNull(
                    ""An app targeting pre-Q with the READ_PHONE_STATE permission granted must ""
                            + ""receive null when invoking getDeviceId"",
                    mTelephonyManager.getDeviceId());
            assertNull(
                    ""An app targeting pre-Q with the READ_PHONE_STATE permission granted must ""
                            + ""receive null when invoking getImei"",
                    mTelephonyManager.getImei());
            assertNull(
                    ""An app targeting pre-Q with the READ_PHONE_STATE permission granted must ""
                            + ""receive null when invoking getMeid"",
                    mTelephonyManager.getMeid());
            assertNull(
                    ""An app targeting pre-Q with the READ_PHONE_STATE permission granted must ""
                            + ""receive null when invoking getSubscriberId"",
                    mTelephonyManager.getSubscriberId());
            assertNull(
                    ""An app targeting pre-Q with the READ_PHONE_STATE permission granted must ""
                            + ""receive null when invoking getSimSerialNumber"",
                    mTelephonyManager.getSimSerialNumber());
            assertNull(
                    ""An app targeting pre-Q with the READ_PHONE_STATE permission granted must ""
                            + ""receive null when invoking getNai"",
                    mTelephonyManager.getNai());
            /"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/telephony3/src/android/telephony3/cts/TelephonyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.activityrecognition.cts.ActivityRecognizerAttributionTags.kt"	"testActivityRecognitionAttributionTagBlaming"	"CtsActivityRecognitionTestCases"	"1: ACTIVITY_RECOGNITION"	"([5:/android/activityrecognition/cts/ActivityRecognizerAttributionTags.kt]:[ACTIVITY_RECOGNITION]:[5]:method_text:[mentation: Instrumentation            get () = InstrumentationRegistry.getInstrumentation()    }}]) :|: 
    fun testActivityRecognitionAttributionTagBlaming() {
        // Using an AR allow listed tag
        var timeBeforeArAccess = System.currentTimeMillis()
        accessActivityRecognition(VALID_AR_ATTRIBUTION_TAG)
        assertNotedOpsSinceLastArAccess(timeBeforeArAccess, /*expectedOp*/
                AppOpsManager.OPSTR_ACTIVITY_RECOGNITION_SOURCE, /*unexpectedOp*/
                AppOpsManager.OPSTR_ACTIVITY_RECOGNITION)

        // Using an AR not allow listed tag
        timeBeforeArAccess = System.currentTimeMillis()
        accessActivityRecognition(INVALID_AR_ATTRIBUTION_TAG)
        assertNotedOpsSinceLastArAccess(timeBeforeArAccess, /*expectedOp*/
                AppOpsManager.OPSTR_ACTIVITY_RECOGNITION, /*unexpectedOp*/
                AppOpsManager.OPSTR_ACTIVITY_RECOGNITION_SOURCE)
    }

    fun accessActivityRecognition(attributionTag: String) {
        val appOpsManager = context.getSystemService(AppOpsManager::class.java)
        appOpsManager?.noteOp(AppOpsManager.OPSTR_ACTIVITY_RECOGNITION, Process.myUid(),
                context.packageName, attributionTag, /*message*/ null)
    }

    fun assertNotedOpsSinceLastArAccess(timeBeforeArAccess: Long,
            expectedOp: String, unexpectedOp: String) {
        val automation: UiAutomation = instrumentation.getUiAutomation()
        automation.adoptShellPermissionIdentity(Manifest.permission.GET_APP_OPS_STATS)
        try {
            val appOpsManager: AppOpsManager = context.getSystemService(AppOpsManager::class.java)!!
            val affectedPackageOps = appOpsManager.getPackagesForOps(
                    arrayOf(expectedOp, unexpectedOp))
            val packageCount = affectedPackageOps.size
            for (i in 0 until packageCount) {
                val packageOps = affectedPackageOps[i]
                if (!context.getPackageName().equals(packageOps.packageName)) {
                    continue
                }
                // We are pulling stats only for one app op."	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/activityrecognition/src/android/activityrecognition/cts/ActivityRecognizerAttributionTags.kt"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.slice.cts.SlicePermissionsTest"	"testGrant"	"CtsSliceTestCases"	"1: granted"	"([1:/android/slice/cts/SlicePermissionsTest.java]:[granted]:[1]:method_text:[ANTED,                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));    }   ]) :|: 
    public void testGrant() {
        assumeFalse(isSliceDisabled);
        assertEquals(PERMISSION_DENIED,
                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));

        mSliceManager.grantSlicePermission(mTestPkg, BASE_URI);

        assertEquals(PERMISSION_GRANTED,
                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/slice/src/android/slice/cts/SlicePermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.slice.cts.SlicePermissionsTest"	"testGrantParent"	"CtsSliceTestCases"	"1: granted"	"([1:/android/slice/cts/SlicePermissionsTest.java]:[granted]:[1]:method_text:[ON_GRANTED,                mSliceManager.checkSlicePermission(uri, mTestPid, mTestUid));    }   ]) :|: 
    public void testGrantParent() {
        assumeFalse(isSliceDisabled);
        Uri uri = BASE_URI.buildUpon()
                .appendPath(""something"")
                .build();

        assertEquals(PERMISSION_DENIED,
                mSliceManager.checkSlicePermission(uri, mTestPid, mTestUid));

        mSliceManager.grantSlicePermission(mTestPkg, BASE_URI);

        assertEquals(PERMISSION_GRANTED,
                mSliceManager.checkSlicePermission(uri, mTestPid, mTestUid));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/slice/src/android/slice/cts/SlicePermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.slice.cts.SlicePermissionsTest"	"testGrantParentExpands"	"CtsSliceTestCases"	"1: granted"	"([5:/android/slice/cts/SlicePermissionsTest.java]:[granted]:[5]:method_text:[ANTED,                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));    }   ]) :|: 
    public void testGrantParentExpands() {
        assumeFalse(isSliceDisabled);
        Uri uri = BASE_URI.buildUpon()
                .appendPath(""something"")
                .build();

        assertEquals(PERMISSION_DENIED,
                mSliceManager.checkSlicePermission(uri, mTestPid, mTestUid));

        mSliceManager.grantSlicePermission(mTestPkg, uri);

        // Only sub-path granted.
        assertEquals(PERMISSION_GRANTED,
                mSliceManager.checkSlicePermission(uri, mTestPid, mTestUid));
        assertEquals(PERMISSION_DENIED,
                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));

        mSliceManager.grantSlicePermission(mTestPkg, BASE_URI);

        // Now all granted.
        assertEquals(PERMISSION_GRANTED,
                mSliceManager.checkSlicePermission(uri, mTestPid, mTestUid));
        assertEquals(PERMISSION_GRANTED,
                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/slice/src/android/slice/cts/SlicePermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.slice.cts.SlicePermissionsTest"	"testGrantChild"	"CtsSliceTestCases"	"1: granted"	"([1:/android/slice/cts/SlicePermissionsTest.java]:[granted]:[1]:method_text:[ENIED,                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));    }   ]) :|: 
    public void testGrantChild() {
        assumeFalse(isSliceDisabled);
        Uri uri = BASE_URI.buildUpon()
                .appendPath(""something"")
                .build();

        assertEquals(PERMISSION_DENIED,
                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));

        mSliceManager.grantSlicePermission(mTestPkg, uri);

        // Still no permission because only a child was granted
        assertEquals(PERMISSION_DENIED,
                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/slice/src/android/slice/cts/SlicePermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.slice.cts.SlicePermissionsTest"	"testRevoke"	"CtsSliceTestCases"	"1: granted"	"([1:/android/slice/cts/SlicePermissionsTest.java]:[granted]:[1]:method_text:[ENIED,                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));    }   ]) :|: 
    public void testRevoke() {
        assumeFalse(isSliceDisabled);
        assertEquals(PERMISSION_DENIED,
                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));

        mSliceManager.grantSlicePermission(mTestPkg, BASE_URI);

        assertEquals(PERMISSION_GRANTED,
                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));

        mSliceManager.revokeSlicePermission(mTestPkg, BASE_URI);

        assertEquals(PERMISSION_DENIED,
                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/slice/src/android/slice/cts/SlicePermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.slice.cts.SlicePermissionsTest"	"testRevokeParent"	"CtsSliceTestCases"	"1: granted"	"([1:/android/slice/cts/SlicePermissionsTest.java]:[granted]:[1]:method_text:[ION_DENIED,                mSliceManager.checkSlicePermission(uri, mTestPid, mTestUid));    }   ]) :|: 
    public void testRevokeParent() {
        assumeFalse(isSliceDisabled);
        Uri uri = BASE_URI.buildUpon()
                .appendPath(""something"")
                .build();
        assertEquals(PERMISSION_DENIED,
                mSliceManager.checkSlicePermission(uri, mTestPid, mTestUid));

        mSliceManager.grantSlicePermission(mTestPkg, uri);

        assertEquals(PERMISSION_GRANTED,
                mSliceManager.checkSlicePermission(uri, mTestPid, mTestUid));

        mSliceManager.revokeSlicePermission(mTestPkg, BASE_URI);

        // Revoked because parent was revoked
        assertEquals(PERMISSION_DENIED,
                mSliceManager.checkSlicePermission(uri, mTestPid, mTestUid));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/slice/src/android/slice/cts/SlicePermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.slice.cts.SlicePermissionsTest"	"testRevokeChild"	"CtsSliceTestCases"	"1: granted"	"([2:/android/slice/cts/SlicePermissionsTest.java]:[granted]:[2]:method_text:[GRANTED,                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));    }}]) :|: 
    public void testRevokeChild() {
        assumeFalse(isSliceDisabled);
        Uri uri = BASE_URI.buildUpon()
                .appendPath(""something"")
                .build();
        assertEquals(PERMISSION_DENIED,
                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));

        mSliceManager.grantSlicePermission(mTestPkg, BASE_URI);

        assertEquals(PERMISSION_GRANTED,
                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));

        mSliceManager.revokeSlicePermission(mTestPkg, uri);

        // Not revoked because child was revoked.
        assertEquals(PERMISSION_GRANTED,
                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));
    }

}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/tests/slice/src/android/slice/cts/SlicePermissionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminActivationTest"	"DeviceAdminActivationTest"	"CtsAdminTestCases"	"1: admin"	"([32:/android/admin/cts/DeviceAdminActivationTest.java]:[admin]:[32]:method_text:[ctivateDeviceAdminActivity();        } finally {            super.tearDown();        }    }   ]) :|: public void test/*
 *.
 */

package android.admin.cts;

import android.app.Activity;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.admin.app.CtsDeviceAdminBrokenReceiver;
import android.admin.app.CtsDeviceAdminBrokenReceiver2;
import android.admin.app.CtsDeviceAdminBrokenReceiver3;
import android.admin.app.CtsDeviceAdminBrokenReceiver4;
import android.admin.app.CtsDeviceAdminBrokenReceiver5;
import android.admin.app.CtsDeviceAdminDeactivatedReceiver;
import android.admin.app.CtsDeviceAdminActivationTestActivity;
import android.admin.app.CtsDeviceAdminActivationTestActivity.OnActivityResultListener;
import android.os.SystemClock;
import android.test.ActivityInstrumentationTestCase2;
import android.util.Log;

import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

/**
 * Tests for the standard way of activating a Device Admin: by starting system UI via an
 * {@link Intent} with {@link DevicePolicyManager#ACTION_ADD_DEVICE_ADMIN}. The test requires that
 * the {@code CtsDeviceAdmin.apk} be installed.
 */
public class DeviceAdminActivationTest
    extends ActivityInstrumentationTestCase2<CtsDeviceAdminActivationTestActivity> {

    private static final String TAG = DeviceAdminActivationTest.class.getSimpleName();

    // IMPLEMENTATION NOTE: Because Device Admin activation requires the use of
    // Activity.startActivityForResult, this test creates an empty Activity which then invokes
    // startActivityForResult.

    private static final int REQUEST_CODE_ACTIVATE_ADMIN = 1;

    /**
     * Maximum duration of time (milliseconds) after which the effects of programmatic actions in
     * this test should have affected the UI.
     */
    private static final int UI_EFFECT_TIMEOUT_MILLIS = 5000;

    private boolean mDeviceAdmin;
    @Mock pri"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminActivationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminActivationTest"	"testActivateGoodReceiverDisplaysActivationUi"	"CtsAdminTestCases"	"1: admin"	"([8:/android/admin/cts/DeviceAdminActivationTest.java]:[admin]:[8]:method_text:[CANCELED);        assertDeviceAdminDeactivated(CtsDeviceAdminDeactivatedReceiver.class);    }   ]) :|: public void testActivateGoodReceiverDisplaysActivationUi() throws Exception {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testActivateGoodReceiverDisplaysActivationUi"");
            return;
        }
        assertDeviceAdminDeactivated(CtsDeviceAdminDeactivatedReceiver.class);
        startAddDeviceAdminActivityForResult(CtsDeviceAdminDeactivatedReceiver.class);
        assertWithTimeoutOnActivityResultNotInvoked();
        // The UI is up and running. Assert that dismissing the UI returns the corresponding result
        // to the test activity.
        finishActivateDeviceAdminActivity();
        assertWithTimeoutOnActivityResultInvokedWithResultCode(Activity.RESULT_CANCELED);
        assertDeviceAdminDeactivated(CtsDeviceAdminDeactivatedReceiver.class);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminActivationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminActivationTest"	"testActivateBrokenReceiverFails"	"CtsAdminTestCases"	"1: admin"	"([7:/android/admin/cts/DeviceAdminActivationTest.java]:[admin]:[7]:method_text:[SULT_CANCELED);        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver.class);    }   ]) :|: public void testActivateBrokenReceiverFails() throws Exception {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testActivateBrokenReceiverFails"");
            return;
        }
        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver.class);
        startAddDeviceAdminActivityForResult(CtsDeviceAdminBrokenReceiver.class);
        assertWithTimeoutOnActivityResultInvokedWithResultCode(Activity.RESULT_CANCELED);
        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver.class);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminActivationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminActivationTest"	"testActivateBrokenReceiver2Fails"	"CtsAdminTestCases"	"1: admin"	"([7:/android/admin/cts/DeviceAdminActivationTest.java]:[admin]:[7]:method_text:[ULT_CANCELED);        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver2.class);    }   ]) :|: public void testActivateBrokenReceiver2Fails() throws Exception {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testActivateBrokenReceiver2Fails"");
            return;
        }
        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver2.class);
        startAddDeviceAdminActivityForResult(CtsDeviceAdminBrokenReceiver2.class);
        assertWithTimeoutOnActivityResultInvokedWithResultCode(Activity.RESULT_CANCELED);
        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver2.class);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminActivationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminActivationTest"	"testActivateBrokenReceiver3Fails"	"CtsAdminTestCases"	"1: admin"	"([7:/android/admin/cts/DeviceAdminActivationTest.java]:[admin]:[7]:method_text:[ULT_CANCELED);        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver3.class);    }   ]) :|: public void testActivateBrokenReceiver3Fails() throws Exception {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testActivateBrokenReceiver3Fails"");
            return;
        }
        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver3.class);
        startAddDeviceAdminActivityForResult(CtsDeviceAdminBrokenReceiver3.class);
        assertWithTimeoutOnActivityResultInvokedWithResultCode(Activity.RESULT_CANCELED);
        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver3.class);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminActivationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminActivationTest"	"testActivateBrokenReceiver4Fails"	"CtsAdminTestCases"	"1: admin"	"([7:/android/admin/cts/DeviceAdminActivationTest.java]:[admin]:[7]:method_text:[ULT_CANCELED);        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver4.class);    }   ]) :|: public void testActivateBrokenReceiver4Fails() throws Exception {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testActivateBrokenReceiver4Fails"");
            return;
        }
        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver4.class);
        startAddDeviceAdminActivityForResult(CtsDeviceAdminBrokenReceiver4.class);
        assertWithTimeoutOnActivityResultInvokedWithResultCode(Activity.RESULT_CANCELED);
        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver4.class);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminActivationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminActivationTest"	"testActivateBrokenReceiver5Fails"	"CtsAdminTestCases"	"1: admin"	"([19:/android/admin/cts/DeviceAdminActivationTest.java]:[admin]:[19]:method_text:[                new ComponentName(getInstrumentation().getTargetContext(), receiverClass)));    }}]) :|: public void testActivateBrokenReceiver5Fails() throws Exception {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testActivateBrokenReceiver5Fails"");
            return;
        }
        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver5.class);
        startAddDeviceAdminActivityForResult(CtsDeviceAdminBrokenReceiver5.class);
        assertWithTimeoutOnActivityResultInvokedWithResultCode(Activity.RESULT_CANCELED);
        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver5.class);
    }

    private void startAddDeviceAdminActivityForResult(Class<?> receiverClass) {
        getActivity().startActivityForResult(
                getAddDeviceAdminIntent(receiverClass),
                REQUEST_CODE_ACTIVATE_ADMIN);
    }

    private Intent getAddDeviceAdminIntent(Class<?> receiverClass) {
        return new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN)
            .putExtra(
                    DevicePolicyManager.EXTRA_DEVICE_ADMIN,
                    new ComponentName(
                            getInstrumentation().getTargetContext(),
                            receiverClass));
    }

    private void assertWithTimeoutOnActivityResultNotInvoked() {
        SystemClock.sleep(UI_EFFECT_TIMEOUT_MILLIS);
        Mockito.verify(mMockOnActivityResultListener, Mockito.never())
                .onActivityResult(
                        Mockito.eq(REQUEST_CODE_ACTIVATE_ADMIN),
                        Mockito.anyInt(),
                        Mockito.nullable(Intent.class));
    }

    private void assertWithTimeoutOnActivityResultInvokedWithResultCode(int expectedResultCode) {
        ArgumentCaptor<Integer> resultCodeCaptor = ArgumentCaptor.forClass(int.class);
        Mockito.verify(mMockOnActivityResultListener, Mockito.timeout(UI_EFFECT_TIMEOUT_MILLIS))
                .onActivityResult(
                        Mockito.eq(REQUEST_CODE_ACTIVATE_ADMIN),
                        resultCodeCaptor.capture(),
                        Mocki"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminActivationTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testNotificationPolicyAccess"	"CtsAdminTestCases"	"2: granted admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[Filter);        } finally {            mContext.unregisterReceiver(receiver);        }    }   ]) :|: public void testNotificationPolicyAccess() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testNotificationPolicyAccess_failIfNotProfileOwner"");
            return;
        }
        NotificationManager.Policy origPolicy = mNotificationManager.getNotificationPolicy();
        try {
            assertTrue(""Notification policy access was not granted "",
                    mNotificationManager.isNotificationPolicyAccessGranted());

            // Clear out the old policy
            mNotificationManager.setNotificationPolicy(new Policy(0, 0, 0, -1));

            Policy expected = new Policy(Policy.PRIORITY_CATEGORY_CALLS,
                    Policy.PRIORITY_SENDERS_STARRED,
                    Policy.PRIORITY_SENDERS_STARRED,
                    Policy.SUPPRESSED_EFFECT_STATUS_BAR);

            assertNotEquals(mNotificationManager.getNotificationPolicy(), expected);

            mNotificationManager.setNotificationPolicy(expected);

            NotificationManager.Policy actual = mNotificationManager.getNotificationPolicy();
            assertTrue((actual.priorityCategories & Policy.PRIORITY_CATEGORY_CALLS) != 0);
            assertEquals(expected.priorityCallSenders, actual.priorityCallSenders);
            assertEquals(expected.priorityMessageSenders, actual.priorityMessageSenders);
            assertEquals(expected.suppressedVisualEffects, actual.suppressedVisualEffects);
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        } finally {
            mNotificationManager.setNotificationPolicy(origPolicy);
        }
    }

    private void setInterruptionFilter(int interruptionFilter) throws Exception {
        final CountDownLatch latch = new CountDownLatch(1);
        final BroadcastReceiver receiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                latch.countDown();
            }
        };

        IntentFilter inte"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testAddUserRestriction_failIfNotProfileOwner"	"CtsAdminTestCases"	"2: UserManager.DISALLOW admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testAddUserRestriction_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testAddUserRestriction_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.addUserRestriction(mComponent,
                    UserManager.DISALLOW_SMS);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testCreateAdminSupportIntent_returnNullIfRestrictionIsNotSet"	"CtsAdminTestCases"	"2: UserManager.DISALLOW admin"	"([5:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[5]:method_text:[createAdminSupportIntent(UserManager.DISALLOW_ADJUST_VOLUME);        assertNull(intent);    }   ]) :|: public void testCreateAdminSupportIntent_returnNullIfRestrictionIsNotSet() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testCreateAdminSupportIntent"");
            return;
        }
        Intent intent = mDevicePolicyManager.createAdminSupportIntent(
                DevicePolicyManager.POLICY_DISABLE_CAMERA);
        assertNull(intent);
        intent = mDevicePolicyManager.createAdminSupportIntent(UserManager.DISALLOW_ADJUST_VOLUME);
        assertNull(intent);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testGetActiveAdmins"	"CtsAdminTestCases"	"1: admin"	"([8:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[8]:method_text:[ontains(mComponent));        assertTrue(mDevicePolicyManager.isAdminActive(mComponent));    }   ]) :|: public void testGetActiveAdmins() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testGetActiveAdmins"");
            return;
        }
        List<ComponentName> activeAdmins = mDevicePolicyManager.getActiveAdmins();
        assertFalse(activeAdmins.isEmpty());
        assertTrue(activeAdmins.contains(mComponent));
        assertTrue(mDevicePolicyManager.isAdminActive(mComponent));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetGetPreferentialNetworkServiceEnabled"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[2]:method_text:[      Log.w(TAG, ""Test is not a profile owner and there is no need to clear."");        }    }   ]) :|: public void testSetGetPreferentialNetworkServiceEnabled() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetGetPreferentialNetworkServiceEnabled"");
            return;
        }
        try {
            mDevicePolicyManager.clearProfileOwner(DeviceAdminInfoTest.getProfileOwnerComponent());
            assertThrows(SecurityException.class,
                    () -> mDevicePolicyManager.setPreferentialNetworkServiceEnabled(true));
            assertThrows(SecurityException.class,
                    () -> mDevicePolicyManager.isPreferentialNetworkServiceEnabled());
        }  catch (SecurityException se) {
            Log.w(TAG, ""Test is not a profile owner and there is no need to clear."");
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testKeyguardDisabledFeatures"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[   mDevicePolicyManager.setKeyguardDisabledFeatures(mComponent, originalValue);        }    }   ]) :|: public void testKeyguardDisabledFeatures() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testKeyguardDisabledFeatures"");
            return;
        }
        int originalValue = mDevicePolicyManager.getKeyguardDisabledFeatures(mComponent);
        try {
            // Test all possible combinations which mathematically ends at 2 * LAST - 1
            for (int which = DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_NONE;
                    which < 2 * DevicePolicyManager.KEYGUARD_DISABLE_IRIS; ++which) {
                mDevicePolicyManager.setKeyguardDisabledFeatures(mComponent, which);
                assertEquals(which, mDevicePolicyManager.getKeyguardDisabledFeatures(mComponent));
            }
        } finally {
            mDevicePolicyManager.setKeyguardDisabledFeatures(mComponent, originalValue);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testRequestRemoteBugreport_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ]) :|: public void testRequestRemoteBugreport_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testRequestRemoteBugreport_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.requestBugreport(mComponent);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertDeviceOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetSecurityLoggingEnabled_failIfNotOrganizationOwnedProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[on e) {            assertOrganizationOwnedProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetSecurityLoggingEnabled_failIfNotOrganizationOwnedProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetSecurityLoggingEnabled_""
                    + ""failIfNotOrganizationOwnedProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setSecurityLoggingEnabled(mComponent, true);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertOrganizationOwnedProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testIsSecurityLoggingEnabled_failIfNotOrganizationOwnedProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[on e) {            assertOrganizationOwnedProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testIsSecurityLoggingEnabled_failIfNotOrganizationOwnedProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testIsSecurityLoggingEnabled_""
                    + ""failIfNotOrganizationOwnedProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.isSecurityLoggingEnabled(mComponent);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertOrganizationOwnedProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testRetrieveSecurityLogs_failIfNotOrganizationOwnedProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[on e) {            assertOrganizationOwnedProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testRetrieveSecurityLogs_failIfNotOrganizationOwnedProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testRetrieveSecurityLogs_failIfNotOrganizationOwnedProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.retrieveSecurityLogs(mComponent);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertOrganizationOwnedProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testRetrievePreRebootSecurityLogs_failIfNotOrganizationOwnedProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[on e) {            assertOrganizationOwnedProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testRetrievePreRebootSecurityLogs_failIfNotOrganizationOwnedProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testRetrievePreRebootSecurityLogs_""
                    + ""failIfNotOrganizationOwnedProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.retrievePreRebootSecurityLogs(mComponent);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertOrganizationOwnedProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetNetworkLoggingEnabled_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetNetworkLoggingEnabled_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetNetworkLoggingEnabled_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setNetworkLoggingEnabled(mComponent, true);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertDeviceOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testIsNetworkLoggingEnabled_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ception e) {            assertDeviceOwnerOrManageUsersMessage(e.getMessage());        }    }   ]) :|: public void testIsNetworkLoggingEnabled_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testIsNetworkLoggingEnabled_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.isNetworkLoggingEnabled(mComponent);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertDeviceOwnerOrManageUsersMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testRetrieveNetworkLogs_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ch (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ]) :|: public void testRetrieveNetworkLogs_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testRetrieveNetworkLogs_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.retrieveNetworkLogs(mComponent, /* batchToken */ 0);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertDeviceOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testRemoveUser_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ]) :|: public void testRemoveUser_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testRemoveUser_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.removeUser(mComponent, Process.myUserHandle());
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertDeviceOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetApplicationHidden_failIfNotDeviceOrProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetApplicationHidden_failIfNotDeviceOrProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetApplicationHidden_failIfNotDeviceOrProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setApplicationHidden(mComponent, ""com.google.anything"", true);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testIsApplicationHidden_failIfNotDeviceOrProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testIsApplicationHidden_failIfNotDeviceOrProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testIsApplicationHidden_failIfNotDeviceOrProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.isApplicationHidden(mComponent, ""com.google.anything"");
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetLocationEnabled_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetLocationEnabled_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetLocationEnabled_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setLocationEnabled(mComponent, true);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertDeviceOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetGlobalSetting_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetGlobalSetting_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetGlobalSetting_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setGlobalSetting(mComponent,
                    Settings.Global.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON, ""1"");
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertDeviceOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetSecureSetting_failIfNotDeviceOrProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetSecureSetting_failIfNotDeviceOrProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetSecureSetting_failIfNotDeviceOrProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setSecureSetting(mComponent,
                    Settings.Secure.SKIP_FIRST_USE_HINTS, ""1"");
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetSecureSetting_failForInstallNonMarketApps"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[2]:method_text:[h (UnsupportedOperationException exc) {            // Supposed to throw. Pass.        }    }   ]) :|: public void testSetSecureSetting_failForInstallNonMarketApps() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetSecureSetting_failForInstallNonMarketApps"");
            return;
        }
        ComponentName profileOwner = DeviceAdminInfoTest.getProfileOwnerComponent();
        try {
            mDevicePolicyManager.setSecureSetting(profileOwner,
                    Settings.Secure.INSTALL_NON_MARKET_APPS, ""0"");
            fail(""did not throw UnsupportedOperationException"");
        } catch (UnsupportedOperationException exc) {
            // Supposed to throw. Pass.
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetMasterVolumeMuted_failIfNotDeviceOrProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetMasterVolumeMuted_failIfNotDeviceOrProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetMasterVolumeMuted_failIfNotDeviceOrProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setMasterVolumeMuted(mComponent, true);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testIsMasterVolumeMuted_failIfNotDeviceOrProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testIsMasterVolumeMuted_failIfNotDeviceOrProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetMasterVolumeMuted_failIfNotDeviceOrProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.isMasterVolumeMuted(mComponent);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetRecommendedGlobalProxy_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetRecommendedGlobalProxy_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetRecommendedGlobalProxy_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setRecommendedGlobalProxy(mComponent, null);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertDeviceOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetLockTaskPackages_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[his is no longer testable.  We do a positive test    // for clearDeviceOwnerApp()    @Suppress   ]) :|: public void testSetLockTaskPackages_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetLockTaskPackages_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setLockTaskPackages(mComponent, new String[] {""package""});
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
        }
    }

    // This test registers itself as DO, so this is no longer testable.  We do a positive test
    // for clearDeviceOwnerApp()
    @Suppress"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testClearDeviceOwnerApp_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[2]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ]) :|: public void testClearDeviceOwnerApp_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testClearDeviceOwnerApp_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.clearDeviceOwnerApp(""android.admin.app"");
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertDeviceOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSwitchUser_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSwitchUser_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSwitchUser_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.switchUser(mComponent, null);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertDeviceOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testCreateAndManageUser_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ]) :|: public void testCreateAndManageUser_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testCreateAndManageUser_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.createAndManageUser(mComponent, ""name"", mComponent, null, 0);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertDeviceOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testInstallCaCert_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testInstallCaCert_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testInstallCaCert_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.installCaCert(mComponent,
                    TEST_CA_STRING1.getBytes());
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testInstallCaCert_failIfNotCertInstaller"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ow expected SecurityException"");        } catch (SecurityException expected) {        }    }   ]) :|: public void testInstallCaCert_failIfNotCertInstaller() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testInstallCaCert_failIfNotCertInstaller"");
            return;
        }
        try {
            // Delegated cert installer is identified by using null as the first argument.
            mDevicePolicyManager.installCaCert(null, TEST_CA_STRING1.getBytes());
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testUninstallCaCert_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testUninstallCaCert_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testUninstallCaCert_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.uninstallCaCert(mComponent,
                    TEST_CA_STRING1.getBytes());
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testUninstallCaCert_failIfNotCertInstaller"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ow expected SecurityException"");        } catch (SecurityException expected) {        }    }   ]) :|: public void testUninstallCaCert_failIfNotCertInstaller() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testUninstallCaCert_failIfNotCertInstaller"");
            return;
        }
        try {
            // Delegated cert installer is identified by using null as the first argument.
            mDevicePolicyManager.uninstallCaCert(null, TEST_CA_STRING1.getBytes());
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testGetInstalledCaCerts_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testGetInstalledCaCerts_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testGetInstalledCaCerts_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.getInstalledCaCerts(mComponent);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testGetInstalledCaCerts_failIfNotCertInstaller"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ow expected SecurityException"");        } catch (SecurityException expected) {        }    }   ]) :|: public void testGetInstalledCaCerts_failIfNotCertInstaller() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testGetInstalledCaCerts_failIfNotCertInstaller"");
            return;
        }
        try {
            // Delegated cert installer is identified by using null as the first argument.
            mDevicePolicyManager.getInstalledCaCerts(null);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testHasCaCertInstalled_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testHasCaCertInstalled_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testHasCaCertInstalled_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.hasCaCertInstalled(mComponent,
                    TEST_CA_STRING1.getBytes());
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testHasCaCertInstalled_failIfNotCertInstaller"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ow expected SecurityException"");        } catch (SecurityException expected) {        }    }   ]) :|: public void testHasCaCertInstalled_failIfNotCertInstaller() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testHasCaCertInstalled_failIfNotCertInstaller"");
            return;
        }
        try {
            // Delegated cert installer is identified by using null as the first argument.
            mDevicePolicyManager.hasCaCertInstalled(null, TEST_CA_STRING1.getBytes());
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testUninstallAllUserCaCerts_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testUninstallAllUserCaCerts_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testUninstallAllUserCaCerts_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.uninstallAllUserCaCerts(mComponent);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testUninstallAllUserCaCerts_failIfNotCertInstaller"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ow expected SecurityException"");        } catch (SecurityException expected) {        }    }   ]) :|: public void testUninstallAllUserCaCerts_failIfNotCertInstaller() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testUninstallAllUserCaCerts_failIfNotCertInstaller"");
            return;
        }
        try {
            // Delegated cert installer is identified by using null as the first argument.
            mDevicePolicyManager.uninstallAllUserCaCerts(null);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetScreenCaptureDisabled_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetScreenCaptureDisabled_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetScreenCaptureDisabled_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setScreenCaptureDisabled(mComponent, true);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetAutoTimeRequired_failIfNotDeviceOrProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetAutoTimeRequired_failIfNotDeviceOrProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetAutoTimeRequired_failIfNotDeviceOrProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setAutoTimeRequired(mComponent, true);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testAddPersistentPreferredActivity_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[2]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testAddPersistentPreferredActivity_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testAddPersistentPreferredActivity_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.addPersistentPreferredActivity(mComponent,
                    new IntentFilter(Intent.ACTION_MAIN),
                    new ComponentName(""android.admin.cts"", ""dummy""));
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testClearPackagePersistentPreferredActivities_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[2]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testClearPackagePersistentPreferredActivities_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testClearPackagePersistentPreferredActivities_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.clearPackagePersistentPreferredActivities(mComponent,
                    ""android.admin.cts"");
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetApplicationRestrictions_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[2]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetApplicationRestrictions_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetApplicationRestrictions_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setApplicationRestrictions(mComponent,
                    ""android.admin.cts"", null);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetAccountManagementDisabled_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetAccountManagementDisabled_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetAccountManagementDisabled_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setAccountManagementDisabled(mComponent,
                    ""dummy"", true);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetRestrictionsProvider_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[2]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetRestrictionsProvider_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetRestrictionsProvider_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setRestrictionsProvider(mComponent,
                    new ComponentName(""android.admin.cts"", ""dummy""));
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetUninstallBlocked_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[2]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetUninstallBlocked_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetUninstallBlocked_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setUninstallBlocked(mComponent,
                    ""android.admin.cts"", true);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetUninstallBlocked_succeedForNotInstalledApps"	"CtsAdminTestCases"	"1: admin"	"([4:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[4]:method_text:[cyManager.isUninstallBlocked(profileOwner,              ""android.admin.not.installed""));    }   ]) :|: public void testSetUninstallBlocked_succeedForNotInstalledApps() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetUninstallBlocked_succeedForNotInstalledApps"");
            return;
        }
        ComponentName profileOwner = DeviceAdminInfoTest.getProfileOwnerComponent();
        mDevicePolicyManager.setUninstallBlocked(profileOwner,
                ""android.admin.not.installed"", true);
        assertFalse(mDevicePolicyManager.isUninstallBlocked(profileOwner,
              ""android.admin.not.installed""));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetPermittedAccessibilityServices_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetPermittedAccessibilityServices_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetPermittedAccessibilityServices_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setPermittedAccessibilityServices(mComponent, null);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetCrossProfileContactsSearchDisabled_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetCrossProfileContactsSearchDisabled_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetCrossProfileContactsSearchDisabled_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setCrossProfileContactsSearchDisabled(mComponent, true);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetBluetoothContactSharingDisabled_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetBluetoothContactSharingDisabled_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetBluetoothContactSharingDisabled_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setBluetoothContactSharingDisabled(mComponent, true);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetPermittedInputMethods_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[pre-installed launcher is at least L. This is needed for     * managed profile support.     */   ]) :|: public void testSetPermittedInputMethods_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetPermittedInputMethods_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setPermittedInputMethods(mComponent, null);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }

    /**
     * Test whether the version of the pre-installed launcher is at least L. This is needed for
     * managed profile support.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testLauncherVersionAtLeastL"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ed provisioning is pre-installed if the device declares the device admin     * feature.     */   ]) :|: public void testLauncherVersionAtLeastL() throws Exception {
        if (!mManagedProfiles) {
            return;
        }

        Intent intent = new Intent(Intent.ACTION_MAIN);
        intent.addCategory(Intent.CATEGORY_HOME);
        List<ResolveInfo> resolveInfos = mPackageManager.queryIntentActivities(intent,
                0 /* default flags */);
        assertFalse(""No launcher present"", resolveInfos.isEmpty());

        for (ResolveInfo resolveInfo : resolveInfos) {
            ApplicationInfo launcherAppInfo = mPackageManager.getApplicationInfo(
                    resolveInfo.activityInfo.packageName, 0 /* default flags */);
            if ((launcherAppInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0 &&
                    launcherAppInfo.targetSdkVersion >= Build.VERSION_CODES.LOLLIPOP) {
                return;
            }
        }
        fail(""No system launcher with version L+ present present on device."");
    }

    /**
     * Test that managed provisioning is pre-installed if the device declares the device admin
     * feature.
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testManagedProvisioningPreInstalled"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ofile owner"")                || message.contains(""Calling identity is not authorized""));    }   ]) :|: public void testManagedProvisioningPreInstalled() throws Exception {
        if (mDeviceAdmin) {
            assertTrue(isPackageInstalledOnSystemImage(MANAGED_PROVISIONING_PKG));
        }
    }

    private void assertDeviceOwnerMessage(String message) {
        assertTrue(""message is: ""+ message, message.contains(""does not own the device"")
                || message.contains(""can only be called by the device owner"")
                || message.contains(""Calling identity is not authorized""));
    }

    private void assertOrganizationOwnedProfileOwnerMessage(String message) {
        assertTrue(""message is: "" + message, message.contains(
                ""is not the profile owner on organization-owned device"")
                || message.contains(""Calling identity is not authorized""));
    }

    private void assertDeviceOwnerOrManageUsersMessage(String message) {
        assertTrue(""message is: ""+ message, message.contains(""does not own the device"")
                || message.contains(""can only be called by the device owner"")
                || (message.startsWith(""Neither user "") && message.endsWith(
                        "" nor current process has android.permission.MANAGE_USERS.""))
                || message.contains(""Calling identity is not authorized""));
    }

    private void assertProfileOwnerMessage(String message) {
        assertTrue(""message is: ""+ message, message.contains(""does not own the profile"")
                || message.contains(""is not profile owner"")
                || message.contains(""Calling identity is not authorized""));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetDelegatedCertInstaller_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetDelegatedCertInstaller_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetDelegatedCertInstaller_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setCertInstallerPackage(mComponent, ""com.test.package"");
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testGetDelegatedCertInstaller_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testGetDelegatedCertInstaller_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testGetDelegatedCertInstaller_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.getCertInstallerPackage(mComponent);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetSystemUpdatePolicy_failIfNotOrganizationOwnedProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[EM) != 0;        } catch (NameNotFoundException e) {            return false;        }    }   ]) :|: public void testSetSystemUpdatePolicy_failIfNotOrganizationOwnedProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetSystemUpdatePolicy_failIfNotOrganizationOwnedProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setSystemUpdatePolicy(mComponent, null);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertOrganizationOwnedProfileOwnerMessage(e.getMessage());
        }
    }

    private boolean isPackageInstalledOnSystemImage(String packagename) {
        try {
            ApplicationInfo info = mPackageManager.getApplicationInfo(packagename,
                    0 /* default flags */);
            return (info.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
        } catch (NameNotFoundException e) {
            return false;
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testReboot_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ]) :|: public void testReboot_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testReboot_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.reboot(mComponent);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertDeviceOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetBackupServiceEnabled_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetBackupServiceEnabled_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetBackupServiceEnabled"");
            return;
        }
        try {
            mDevicePolicyManager.setBackupServiceEnabled(mComponent, false);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testIsBackupServiceEnabled_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testIsBackupServiceEnabled_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testIsBackupServiceEnabled"");
            return;
        }
        try {
            mDevicePolicyManager.isBackupServiceEnabled(mComponent);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetDefaultSmsApplication_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[2]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetDefaultSmsApplication_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetDefaultSmsApplication_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setDefaultSmsApplication(mComponent, ""android.admin.cts"");
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertDeviceOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetResetPasswordToken_failIfNotDeviceOrProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetResetPasswordToken_failIfNotDeviceOrProfileOwner() {
        if (!mDeviceAdmin || !mHasSecureLockScreen) {
            Log.w(TAG, ""Skipping testSetResetPasswordToken_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setResetPasswordToken(mComponent, new byte[32]);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testClearResetPasswordToken_failIfNotDeviceOrProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testClearResetPasswordToken_failIfNotDeviceOrProfileOwner() {
        if (!mDeviceAdmin || !mHasSecureLockScreen) {
            Log.w(TAG, ""Skipping testClearResetPasswordToken_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.clearResetPasswordToken(mComponent);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testIsResetPasswordTokenActive_failIfNotDeviceOrProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testIsResetPasswordTokenActive_failIfNotDeviceOrProfileOwner() {
        if (!mDeviceAdmin || !mHasSecureLockScreen) {
            Log.w(TAG, ""Skipping testIsResetPasswordTokenActive_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.isResetPasswordTokenActive(mComponent);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testResetPasswordWithToken_failIfNotDeviceOrProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testResetPasswordWithToken_failIfNotDeviceOrProfileOwner() {
        if (!mDeviceAdmin || !mHasSecureLockScreen) {
            Log.w(TAG, ""Skipping testResetPasswordWithToken_failIfNotDeviceOwner"");
            return;
        }
        try {
            mDevicePolicyManager.resetPasswordWithToken(mComponent, ""1234"", new byte[32], 0);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testIsUsingUnifiedPassword_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testIsUsingUnifiedPassword_failIfNotProfileOwner() {
        if (!mDeviceAdmin || !mHasSecureLockScreen) {
            Log.w(TAG, ""Skipping testIsUsingUnifiedPassword_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.isUsingUnifiedPassword(mComponent);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testGenerateKeyPair_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testGenerateKeyPair_failIfNotProfileOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testGenerateKeyPair_failIfNotProfileOwner"");
            return;
        }
        try {
            KeyGenParameterSpec spec = new KeyGenParameterSpec.Builder(
                    ""gen-should-fail"",
                    KeyProperties.PURPOSE_SIGN | KeyProperties.PURPOSE_VERIFY)
                    .setKeySize(2048)
                    .setDigests(KeyProperties.DIGEST_SHA256)
                    .setSignaturePaddings(KeyProperties.SIGNATURE_PADDING_RSA_PSS,
                        KeyProperties.SIGNATURE_PADDING_RSA_PKCS1)
                    .build();

            mDevicePolicyManager.generateKeyPair(mComponent, ""RSA"", spec, 0);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetKeyPairCertificate_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testSetKeyPairCertificate_failIfNotProfileOwner() throws CertificateException {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetKeyPairCertificate_failIfNotProfileOwner"");
            return;
        }
        try {
            CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
            Certificate cert  = cf.generateCertificate(
                    new ByteArrayInputStream(TEST_CA_STRING1.getBytes()));
            List<Certificate> certs = new ArrayList();
            certs.add(cert);
            mDevicePolicyManager.setKeyPairCertificate(mComponent, ""set-should-fail"", certs, true);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetInterruptionFilter"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ion tolerated) {            assertProfileOwnerMessage(tolerated.getMessage());        }    }   ]) :|: public void testSetInterruptionFilter() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testNotificationPolicyAccess_failIfNotProfileOwner"");
            return;
        }

        try {
            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_NONE);
            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);
        } catch (Exception tolerated) {
            assertProfileOwnerMessage(tolerated.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetStorageEncryption_noAdmin"	"CtsAdminTestCases"	"1: admin"	"([6:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[6]:method_text:[ion.class,            () -> mDevicePolicyManager.setStorageEncryption(notAdmin, false));    }   ]) :|: public void testSetStorageEncryption_noAdmin() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetStorageEncryption_noAdmin"");
            return;
        }
        final ComponentName notAdmin = new ComponentName(""com.test.foo"", "".bar"");
        assertThrows(SecurityException.class,
            () -> mDevicePolicyManager.setStorageEncryption(notAdmin, true));
        assertThrows(SecurityException.class,
            () -> mDevicePolicyManager.setStorageEncryption(notAdmin, false));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testCrossProfileCalendar_failIfNotProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ (SecurityException e) {            assertProfileOwnerMessage(e.getMessage());        }    }   ]) :|: public void testCrossProfileCalendar_failIfNotProfileOwner() {
        final String TEST_PACKAGE_NAME = ""test.package.name"";
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testCrossProfileCalendar_failIfNotProfileOwner"");
            return;
        }
        try {
            mDevicePolicyManager.setCrossProfileCalendarPackages(mComponent,
                    Collections.singleton(TEST_PACKAGE_NAME));
            fail(""setCrossProfileCalendarPackages did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
        try {
            mDevicePolicyManager.getCrossProfileCalendarPackages(mComponent);
            fail(""getCrossProfileCalendarPackages did not throw expected SecurityException"");
        } catch (SecurityException e) {
            assertProfileOwnerMessage(e.getMessage());
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetUserControlDisabledPackages_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ not throw expected SecurityException"");        } catch(SecurityException e) {        }    }   ]) :|: public void testSetUserControlDisabledPackages_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testSetUserControlDisabledPackages_failIfNotDeviceOwner()"");
            return;
        }
        final String TEST_PACKAGE_NAME = ""package1"";
        List<String> packages = new ArrayList<>();
        packages.add(TEST_PACKAGE_NAME);
        try {
            mDevicePolicyManager.setUserControlDisabledPackages(mComponent, packages);
            fail(""setUserControlDisabledPackages did not throw expected SecurityException"");
        } catch(SecurityException e) {
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testGetUserControlDisabledPackages_failIfNotDeviceOwner"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[1]:method_text:[ not throw expected SecurityException"");        } catch(SecurityException e) {        }    }   ]) :|: public void testGetUserControlDisabledPackages_failIfNotDeviceOwner() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testGetUserControlDisabledPackages_failIfNotDeviceOwner()"");
            return;
        }
        try {
            mDevicePolicyManager.getUserControlDisabledPackages(mComponent);
            fail(""getUserControlDisabledPackages did not throw expected SecurityException"");
        } catch(SecurityException e) {
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetNearbyNotificationStreamingPolicy_failIfNotDeviceOrProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[2]:method_text:[ngPolicy(                                DevicePolicyManager.NEARBY_STREAMING_ENABLED));    }   ]) :|: public void testSetNearbyNotificationStreamingPolicy_failIfNotDeviceOrProfileOwner() {
        if (!mDeviceAdmin) {
            String message =
                    ""Skipping""
                        + "" testSetNearbyNotificationStreamingPolicy_failIfNotDeviceOrProfileOwner"";
            Log.w(TAG, message);
            return;
        }
        mDevicePolicyManager.clearProfileOwner(DeviceAdminInfoTest.getProfileOwnerComponent());
        assertThrows(
                SecurityException.class,
                () ->
                        mDevicePolicyManager.setNearbyNotificationStreamingPolicy(
                                DevicePolicyManager.NEARBY_STREAMING_ENABLED));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testGetNearbyNotificationStreamingPolicy_failIfNotDeviceOrProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[2]:method_text:[lass,                () -> mDevicePolicyManager.getNearbyNotificationStreamingPolicy());    }   ]) :|: public void testGetNearbyNotificationStreamingPolicy_failIfNotDeviceOrProfileOwner() {
        if (!mDeviceAdmin) {
            String message =
                    ""Skipping""
                        + "" testGetNearbyNotificationStreamingPolicy_failIfNotDeviceOrProfileOwner"";
            Log.w(TAG, message);
            return;
        }
        mDevicePolicyManager.clearProfileOwner(DeviceAdminInfoTest.getProfileOwnerComponent());
        assertThrows(
                SecurityException.class,
                () -> mDevicePolicyManager.getNearbyNotificationStreamingPolicy());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testSetNearbyAppStreamingPolicy_failIfNotDeviceOrProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[2]:method_text:[ngPolicy(                                DevicePolicyManager.NEARBY_STREAMING_ENABLED));    }   ]) :|: public void testSetNearbyAppStreamingPolicy_failIfNotDeviceOrProfileOwner() {
        if (!mDeviceAdmin) {
            String message =
                    ""Skipping testSetNearbyAppStreamingPolicy_failIfNotDeviceOrProfileOwner"";
            Log.w(TAG, message);
            return;
        }
        mDevicePolicyManager.clearProfileOwner(DeviceAdminInfoTest.getProfileOwnerComponent());
        assertThrows(
                SecurityException.class,
                () ->
                        mDevicePolicyManager.setNearbyAppStreamingPolicy(
                                DevicePolicyManager.NEARBY_STREAMING_ENABLED));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DevicePolicyManagerTest"	"testGetNearbyAppStreamingPolicy_failIfNotDeviceOrProfileOwner"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DevicePolicyManagerTest.java]:[admin]:[2]:method_text:[         SecurityException.class, () -> mDevicePolicyManager.getNearbyAppStreamingPolicy());    }}]) :|: public void testGetNearbyAppStreamingPolicy_failIfNotDeviceOrProfileOwner() {
        if (!mDeviceAdmin) {
            String message =
                    ""Skipping testGetNearbyAppStreamingPolicy_failIfNotDeviceOrProfileOwner"";
            Log.w(TAG, message);
            return;
        }
        mDevicePolicyManager.clearProfileOwner(DeviceAdminInfoTest.getProfileOwnerComponent());
        assertThrows(
                SecurityException.class, () -> mDevicePolicyManager.getNearbyAppStreamingPolicy());
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminReceiverTest"	"testOnReceivePasswordChanged"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DeviceAdminReceiverTest.java]:[admin]:[2]:method_text:[fy(mReceiver).onPasswordChanged(any(), actionEq(ACTION_PASSWORD_CHANGED));    }    @Presubmit   ]) :|: public void testOnReceivePasswordChanged() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testOnReceivePasswordChanged"");
            return;
        }
        mReceiver.onReceive(mContext, new Intent(DeviceAdminReceiver.ACTION_PASSWORD_CHANGED)
                .putExtra(Intent.EXTRA_USER, USER));
        verify(mReceiver).onPasswordChanged(any(), actionEq(ACTION_PASSWORD_CHANGED), eq(USER));
        verify(mReceiver).onPasswordChanged(any(), actionEq(ACTION_PASSWORD_CHANGED));
    }

    @Presubmit"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminReceiverTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminReceiverTest"	"testOnReceivePasswordFailed"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DeviceAdminReceiverTest.java]:[admin]:[2]:method_text:[rify(mReceiver).onPasswordFailed(any(), actionEq(ACTION_PASSWORD_FAILED));    }    @Presubmit   ]) :|: public void testOnReceivePasswordFailed() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testOnReceivePasswordFailed"");
        }
        mReceiver.onReceive(mContext, new Intent(DeviceAdminReceiver.ACTION_PASSWORD_FAILED)
                .putExtra(Intent.EXTRA_USER, USER));
        verify(mReceiver).onPasswordFailed(any(), actionEq(ACTION_PASSWORD_FAILED), eq(USER));
        verify(mReceiver).onPasswordFailed(any(), actionEq(ACTION_PASSWORD_FAILED));
    }

    @Presubmit"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminReceiverTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminReceiverTest"	"testOnReceivePasswordSucceeded"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DeviceAdminReceiverTest.java]:[admin]:[2]:method_text:[Receiver).onPasswordSucceeded(any(), actionEq(ACTION_PASSWORD_SUCCEEDED));    }    @Presubmit   ]) :|: public void testOnReceivePasswordSucceeded() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testOnReceivePasswordSucceeded"");
        }
        mReceiver.onReceive(mContext, new Intent(DeviceAdminReceiver.ACTION_PASSWORD_SUCCEEDED)
                .putExtra(Intent.EXTRA_USER, USER));
        verify(mReceiver).onPasswordSucceeded(any(), actionEq(ACTION_PASSWORD_SUCCEEDED), eq(USER));
        verify(mReceiver).onPasswordSucceeded(any(), actionEq(ACTION_PASSWORD_SUCCEEDED));
    }

    @Presubmit"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminReceiverTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminReceiverTest"	"testOnReceivePasswordExpiring"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DeviceAdminReceiverTest.java]:[admin]:[2]:method_text:[(mReceiver).onPasswordExpiring(any(), actionEq(ACTION_PASSWORD_EXPIRING));    }    @Presubmit   ]) :|: public void testOnReceivePasswordExpiring() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testOnReceivePasswordExpiring"");
        }
        mReceiver.onReceive(mContext, new Intent(DeviceAdminReceiver.ACTION_PASSWORD_EXPIRING)
                .putExtra(Intent.EXTRA_USER, USER));
        verify(mReceiver).onPasswordExpiring(any(), actionEq(ACTION_PASSWORD_EXPIRING), eq(USER));
        verify(mReceiver).onPasswordExpiring(any(), actionEq(ACTION_PASSWORD_EXPIRING));
    }

    @Presubmit"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminReceiverTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminReceiverTest"	"testOnReceiveEnabled"	"CtsAdminTestCases"	"1: admin"	"([5:/android/admin/cts/DeviceAdminReceiverTest.java]:[admin]:[5]:method_text:[        any(), actionEq(DeviceAdminReceiver.ACTION_DEVICE_ADMIN_ENABLED));    }    @Presubmit   ]) :|: public void testOnReceiveEnabled() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testOnReceiveEnabled"");
            return;
        }
        mReceiver.onReceive(mContext, new Intent(DeviceAdminReceiver.ACTION_DEVICE_ADMIN_ENABLED));
        verify(mReceiver).onEnabled(
                any(), actionEq(DeviceAdminReceiver.ACTION_DEVICE_ADMIN_ENABLED));
    }

    @Presubmit"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminReceiverTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminReceiverTest"	"testOnReceiveDisabled"	"CtsAdminTestCases"	"1: admin"	"([5:/android/admin/cts/DeviceAdminReceiverTest.java]:[admin]:[5]:method_text:[       any(), actionEq(DeviceAdminReceiver.ACTION_DEVICE_ADMIN_DISABLED));    }    @Presubmit   ]) :|: public void testOnReceiveDisabled() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testOnReceiveDisabled"");
            return;
        }
        mReceiver.onReceive(mContext, new Intent(DeviceAdminReceiver.ACTION_DEVICE_ADMIN_DISABLED));
        verify(mReceiver).onDisabled(
                any(), actionEq(DeviceAdminReceiver.ACTION_DEVICE_ADMIN_DISABLED));
    }

    @Presubmit"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminReceiverTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminReceiverTest"	"testOnReceiveBugreportSharingDeclined"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DeviceAdminReceiverTest.java]:[admin]:[1]:method_text:[ined(                any(), actionEq(ACTION_BUGREPORT_SHARING_DECLINED));    }    @Presubmit   ]) :|: public void testOnReceiveBugreportSharingDeclined() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testOnReceiveBugreportSharingDeclined"");
            return;
        }
        mReceiver.onReceive(mContext, new Intent(ACTION_BUGREPORT_SHARING_DECLINED));
        verify(mReceiver).onBugreportSharingDeclined(
                any(), actionEq(ACTION_BUGREPORT_SHARING_DECLINED));
    }

    @Presubmit"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminReceiverTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminReceiverTest"	"testOnReceiveBugreportFailed"	"CtsAdminTestCases"	"1: admin"	"([3:/android/admin/cts/DeviceAdminReceiverTest.java]:[admin]:[3]:method_text:[             eq(DeviceAdminReceiver.BUGREPORT_FAILURE_FAILED_COMPLETING));    }    @Presubmit   ]) :|: public void testOnReceiveBugreportFailed() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testOnReceiveBugreportFailed"");
            return;
        }
        Intent bugreportFailedIntent = new Intent(ACTION_BUGREPORT_FAILED);
        bugreportFailedIntent.putExtra(EXTRA_BUGREPORT_FAILURE_REASON,
                DeviceAdminReceiver.BUGREPORT_FAILURE_FAILED_COMPLETING);
        mReceiver.onReceive(mContext, bugreportFailedIntent);
        verify(mReceiver).onBugreportFailed(any(), actionEq(ACTION_BUGREPORT_FAILED),
                eq(DeviceAdminReceiver.BUGREPORT_FAILURE_FAILED_COMPLETING));
    }

    @Presubmit"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminReceiverTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminReceiverTest"	"testOnReceiveBugreportShared"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DeviceAdminReceiverTest.java]:[admin]:[1]:method_text:[             any(), actionEq(ACTION_BUGREPORT_SHARE), eq(BUGREPORT_HASH));    }    @Presubmit   ]) :|: public void testOnReceiveBugreportShared() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testOnReceiveBugreportShared"");
            return;
        }
        Intent bugreportSharedIntent = new Intent(ACTION_BUGREPORT_SHARE);
        bugreportSharedIntent.putExtra(EXTRA_BUGREPORT_HASH, BUGREPORT_HASH);
        mReceiver.onReceive(mContext, bugreportSharedIntent);
        verify(mReceiver).onBugreportShared(
                any(), actionEq(ACTION_BUGREPORT_SHARE), eq(BUGREPORT_HASH));
    }

    @Presubmit"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminReceiverTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminReceiverTest"	"testOnReceiveSecurityLogsAvailable"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DeviceAdminReceiverTest.java]:[admin]:[1]:method_text:[.onSecurityLogsAvailable(any(), actionEq(ACTION_SECURITY_LOGS_AVAILABLE));    }    @Presubmit   ]) :|: public void testOnReceiveSecurityLogsAvailable() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testOnReceiveSecurityLogsAvailable"");
            return;
        }
        mReceiver.onReceive(mContext, new Intent(ACTION_SECURITY_LOGS_AVAILABLE));
        verify(mReceiver).onSecurityLogsAvailable(any(), actionEq(ACTION_SECURITY_LOGS_AVAILABLE));
    }

    @Presubmit"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminReceiverTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminReceiverTest"	"testOnReceiveNetworkLogsAvailable"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DeviceAdminReceiverTest.java]:[admin]:[1]:method_text:[AILABLE),                eq(NETWORK_LOGS_TOKEN), eq(NETWORK_LOGS_COUNT));    }    @Presubmit   ]) :|: public void testOnReceiveNetworkLogsAvailable() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testOnReceiveNetworkLogsAvailable"");
            return;
        }
        Intent networkLogsAvailableIntent = new Intent(ACTION_NETWORK_LOGS_AVAILABLE);
        networkLogsAvailableIntent.putExtra(EXTRA_NETWORK_LOGS_TOKEN, NETWORK_LOGS_TOKEN);
        networkLogsAvailableIntent.putExtra(EXTRA_NETWORK_LOGS_COUNT, NETWORK_LOGS_COUNT);
        mReceiver.onReceive(mContext, networkLogsAvailableIntent);
        verify(mReceiver).onNetworkLogsAvailable(any(), actionEq(ACTION_NETWORK_LOGS_AVAILABLE),
                eq(NETWORK_LOGS_TOKEN), eq(NETWORK_LOGS_COUNT));
    }

    @Presubmit"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminReceiverTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminReceiverTest"	"testOnReceive_enterLockTaskWithoutPackage_callsCallback"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DeviceAdminReceiverTest.java]:[admin]:[1]:method_text:[        verify(mReceiver).onLockTaskModeEntering(mContext, intent, null);    }    @Presubmit   ]) :|: public void testOnReceive_enterLockTaskWithoutPackage_callsCallback() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testOnReceive_enterLockTask_callsCallback"");
            return;
        }
        final Intent intent = new Intent(ACTION_LOCK_TASK_ENTERING);

        mReceiver.onReceive(mContext, intent);

        verify(mReceiver).onLockTaskModeEntering(mContext, intent, null);
    }

    @Presubmit"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminReceiverTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminReceiverTest"	"testOnReceive_enterLockTaskWithPackage_callsCallback"	"CtsAdminTestCases"	"1: admin"	"([1:/android/admin/cts/DeviceAdminReceiverTest.java]:[admin]:[1]:method_text:[tionEq(final String expected) {        return argThat(x -> expected.equals(x.getAction()));    }}]) :|: public void testOnReceive_enterLockTaskWithPackage_callsCallback() {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testOnReceive_enterLockTask_callsCallback"");
            return;
        }
        final Intent intent = new Intent(ACTION_LOCK_TASK_ENTERING);
        final String pkg = ""pkg"";
        intent.putExtra(EXTRA_LOCK_TASK_PACKAGE, pkg);

        mReceiver.onReceive(mContext, intent);

        verify(mReceiver).onLockTaskModeEntering(mContext, intent, pkg);
    }

    private Intent actionEq(final String expected) {
        return argThat(x -> expected.equals(x.getAction()));
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminReceiverTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminInfoTest"	"getVisibleComponent"	"CtsAdminTestCases"	"1: admin"	"([26:/android/admin/cts/DeviceAdminInfoTest.java]:[admin]:[26]:method_text:[               ""android.admin.app"", ""android.admin.app.CtsDeviceAdminReceiverInvisible"");    }   ]) :|: public void test/*
 *.
 */

package android.admin.cts;

import static com.google.common.truth.Truth.assertThat;

import android.app.admin.DeviceAdminInfo;
import android.content.ComponentName;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.test.AndroidTestCase;
import android.util.Log;

public class DeviceAdminInfoTest extends AndroidTestCase {

    private static final String TAG = DeviceAdminInfoTest.class.getSimpleName();

    private PackageManager mPackageManager;
    private ComponentName mComponent;
    private ComponentName mSecondComponent;
    private ComponentName mThirdComponent;
    private boolean mDeviceAdmin;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mPackageManager = mContext.getPackageManager();
        mComponent = getReceiverComponent();
        mSecondComponent = getSecondReceiverComponent();
        mThirdComponent = getThirdReceiverComponent();
        mDeviceAdmin =
                mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_DEVICE_ADMIN);
    }

    static ComponentName getReceiverComponent() {
        return new ComponentName(""android.admin.app"", ""android.admin.app.CtsDeviceAdminReceiver"");
    }

    static ComponentName getSecondReceiverComponent() {
        return new ComponentName(""android.admin.app"", ""android.admin.app.CtsDeviceAdminReceiver2"");
    }

    static ComponentName getThirdReceiverComponent() {
        return new ComponentName(""android.admin.app"", ""android.admin.app.CtsDeviceAdminReceiver3"");
    }

    static ComponentName getProfileOwnerComponent() {
        return new ComponentName(""android.admin.app"", ""android.admin.app.CtsDeviceAdminProfileOwner"");
    }

    static ComponentName getVisibleComponent() {
        return new ComponentName(
                ""android.admin.app"", ""android.admin.app.CtsDeviceAdminReceiverVisible"");
    }

    static ComponentName ge"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminInfoTest"	"testDeviceAdminInfo"	"CtsAdminTestCases"	"1: admin"	"([15:/android/admin/cts/DeviceAdminInfoTest.java]:[admin]:[15]:method_text:[                .isEqualTo(info.getTagForPolicy(DeviceAdminInfo.USES_POLICY_WIPE_DATA));    }   ]) :|: public void testDeviceAdminInfo() throws Exception {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testDeviceAdminInfo"");
            return;
        }
        ResolveInfo resolveInfo = new ResolveInfo();
        resolveInfo.activityInfo = mPackageManager.getReceiverInfo(mComponent,
                PackageManager.GET_META_DATA);

        DeviceAdminInfo info = new DeviceAdminInfo(mContext, resolveInfo);
        assertThat(mComponent).isEqualTo(info.getComponent());
        assertThat(mComponent.getPackageName()).isEqualTo(info.getPackageName());
        assertThat(mComponent.getClassName()).isEqualTo(info.getReceiverName());

        assertThat(info.supportsTransferOwnership()).isFalse();
        assertThat(info.usesPolicy(DeviceAdminInfo.USES_POLICY_FORCE_LOCK)).isTrue();
        assertThat(info.usesPolicy(DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD)).isTrue();
        assertThat(info.usesPolicy(DeviceAdminInfo.USES_POLICY_RESET_PASSWORD)).isTrue();
        assertThat(info.usesPolicy(DeviceAdminInfo.USES_POLICY_WATCH_LOGIN)).isTrue();
        assertThat(info.usesPolicy(DeviceAdminInfo.USES_POLICY_WIPE_DATA)).isTrue();

        assertThat(""force-lock"")
                .isEqualTo(info.getTagForPolicy(DeviceAdminInfo.USES_POLICY_FORCE_LOCK));
        assertThat(""limit-password"")
                .isEqualTo(info.getTagForPolicy(DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD));
        assertThat(""reset-password"")
                .isEqualTo(info.getTagForPolicy(DeviceAdminInfo.USES_POLICY_RESET_PASSWORD));
        assertThat(""watch-login"")
                .isEqualTo(info.getTagForPolicy(DeviceAdminInfo.USES_POLICY_WATCH_LOGIN));
        assertThat(""wipe-data"")
                .isEqualTo(info.getTagForPolicy(DeviceAdminInfo.USES_POLICY_WIPE_DATA));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminInfoTest"	"testDeviceAdminInfo2"	"CtsAdminTestCases"	"1: admin"	"([15:/android/admin/cts/DeviceAdminInfoTest.java]:[admin]:[15]:method_text:[                .isEqualTo(info.getTagForPolicy(DeviceAdminInfo.USES_POLICY_WIPE_DATA));    }   ]) :|: public void testDeviceAdminInfo2() throws Exception {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testDeviceAdminInfo2"");
            return;
        }
        ResolveInfo resolveInfo = new ResolveInfo();
        resolveInfo.activityInfo = mPackageManager.getReceiverInfo(mSecondComponent,
                PackageManager.GET_META_DATA);

        DeviceAdminInfo info = new DeviceAdminInfo(mContext, resolveInfo);
        assertThat(mSecondComponent).isEqualTo(info.getComponent());
        assertThat(mSecondComponent.getPackageName()).isEqualTo(info.getPackageName());
        assertThat(mSecondComponent.getClassName()).isEqualTo(info.getReceiverName());

        assertThat(info.supportsTransferOwnership()).isFalse();
        assertThat(info.usesPolicy(DeviceAdminInfo.USES_POLICY_FORCE_LOCK)).isFalse();
        assertThat(info.usesPolicy(DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD)).isTrue();
        assertThat(info.usesPolicy(DeviceAdminInfo.USES_POLICY_RESET_PASSWORD)).isTrue();
        assertThat(info.usesPolicy(DeviceAdminInfo.USES_POLICY_WATCH_LOGIN)).isFalse();
        assertThat(info.usesPolicy(DeviceAdminInfo.USES_POLICY_WIPE_DATA)).isTrue();

        assertThat(""force-lock"")
                .isEqualTo(info.getTagForPolicy(DeviceAdminInfo.USES_POLICY_FORCE_LOCK));
        assertThat(""limit-password"")
                .isEqualTo(info.getTagForPolicy(DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD));
        assertThat(""reset-password"")
                .isEqualTo(info.getTagForPolicy(DeviceAdminInfo.USES_POLICY_RESET_PASSWORD));
        assertThat(""watch-login"")
                .isEqualTo(info.getTagForPolicy(DeviceAdminInfo.USES_POLICY_WATCH_LOGIN));
        assertThat(""wipe-data"")
                .isEqualTo(info.getTagForPolicy(DeviceAdminInfo.USES_POLICY_WIPE_DATA));
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminInfoTest"	"testDeviceAdminInfo3"	"CtsAdminTestCases"	"1: admin"	"([5:/android/admin/cts/DeviceAdminInfoTest.java]:[admin]:[5]:method_text:[fo(mContext, resolveInfo);        assertThat(info.supportsTransferOwnership()).isTrue();    }   ]) :|: public void testDeviceAdminInfo3() throws Exception {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testDeviceAdminInfo3"");
            return;
        }
        ResolveInfo resolveInfo = new ResolveInfo();
        resolveInfo.activityInfo = mPackageManager.getReceiverInfo(mThirdComponent,
                PackageManager.GET_META_DATA);

        DeviceAdminInfo info = new DeviceAdminInfo(mContext, resolveInfo);
        assertThat(info.supportsTransferOwnership()).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminInfoTest"	"testDescribeContents_returnsAtLeastZero"	"CtsAdminTestCases"	"1: admin"	"([2:/android/admin/cts/DeviceAdminInfoTest.java]:[admin]:[2]:method_text:[   assertThat(buildDeviceAdminInfo(buildActivityInfo()).describeContents()).isAtLeast(0);    }   ]) :|: public void testDescribeContents_returnsAtLeastZero() throws Exception {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testDescribeContents_returnsAtLeastZero"");
            return;
        }

        assertThat(buildDeviceAdminInfo(buildActivityInfo()).describeContents()).isAtLeast(0);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminInfoTest"	"testGetActivityInfo_returnsActivityInfo"	"CtsAdminTestCases"	"1: admin"	"([5:/android/admin/cts/DeviceAdminInfoTest.java]:[admin]:[5]:method_text:[ityInfo);        assertThat(deviceAdminInfo.getActivityInfo()).isEqualTo(activityInfo);    }   ]) :|: public void testGetActivityInfo_returnsActivityInfo() throws Exception {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testGetActivityInfo_returnsActivityInfo"");
            return;
        }
        ActivityInfo activityInfo = buildActivityInfo();
        DeviceAdminInfo deviceAdminInfo = buildDeviceAdminInfo(activityInfo);

        assertThat(deviceAdminInfo.getActivityInfo()).isEqualTo(activityInfo);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminInfoTest"	"testIsVisible_visibleComponent_returnsTrue"	"CtsAdminTestCases"	"1: admin"	"([5:/android/admin/cts/DeviceAdminInfoTest.java]:[admin]:[5]:method_text:[DeviceAdminInfo(activityInfo);        assertThat(deviceAdminInfo.isVisible()).isTrue();    }   ]) :|: public void testIsVisible_visibleComponent_returnsTrue() throws Exception {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testIsVisible_visibleComponent_returnsTrue"");
            return;
        }
        ActivityInfo activityInfo = buildActivityInfo(getVisibleComponent());
        DeviceAdminInfo deviceAdminInfo = buildDeviceAdminInfo(activityInfo);

        assertThat(deviceAdminInfo.isVisible()).isTrue();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.admin.cts.DeviceAdminInfoTest"	"testIsVisible_invisibleComponent_returnsFalse"	"CtsAdminTestCases"	"1: admin"	"([8:/android/admin/cts/DeviceAdminInfoTest.java]:[admin]:[8]:method_text:[        return mPackageManager.getReceiverInfo(componentName, PackageManager.GET_META_DATA);    }}]) :|: public void testIsVisible_invisibleComponent_returnsFalse() throws Exception {
        if (!mDeviceAdmin) {
            Log.w(TAG, ""Skipping testIsVisible_invisibleComponent_returnsFalse"");
            return;
        }
        ActivityInfo activityInfo = buildActivityInfo(getInvisibleComponent());
        DeviceAdminInfo deviceAdminInfo = buildDeviceAdminInfo(activityInfo);

        assertThat(deviceAdminInfo.isVisible()).isFalse();
    }

    private DeviceAdminInfo buildDeviceAdminInfo(ActivityInfo activityInfo) throws Exception {
        return new DeviceAdminInfo(mContext, buildResolveInfo(activityInfo));
    }

    private ResolveInfo buildResolveInfo(ActivityInfo activityInfo) {
        ResolveInfo resolveInfo = new ResolveInfo();
        resolveInfo.activityInfo = activityInfo;
        return resolveInfo;
    }

    private ActivityInfo buildActivityInfo() throws Exception {
        return buildActivityInfo(mThirdComponent);
    }

    private ActivityInfo buildActivityInfo(ComponentName componentName) throws Exception {
        return mPackageManager.getReceiverInfo(componentName, PackageManager.GET_META_DATA);
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminInfoTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.ServiceTest"	"uptimeMillis"	"CtsAppTestCases"	"1: granted"	"([6:/android/app/cts/ServiceTest.java]:[granted]:[6]:method_text:[               return super.onTransact(code, data, reply, flags);            }        }    }   ]) :|: public void test/*
 *.
 */

package android.app.cts;

import static android.app.stubs.LocalForegroundService.COMMAND_START_FOREGROUND;
import static android.app.stubs.LocalForegroundService.COMMAND_START_FOREGROUND_DEFER_NOTIFICATION;
import static android.app.stubs.LocalForegroundService.COMMAND_STOP_FOREGROUND_DETACH_NOTIFICATION;
import static android.app.stubs.LocalForegroundService.COMMAND_STOP_FOREGROUND_DONT_REMOVE_NOTIFICATION;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.stubs.ActivityTestsBase;
import android.app.stubs.IsolatedService;
import android.app.stubs.LaunchpadActivity;
import android.app.stubs.LocalDeniedService;
import android.app.stubs.LocalForegroundService;
import android.app.stubs.LocalGrantedService;
import android.app.stubs.LocalPhoneCallService;
import android.app.stubs.LocalService;
import android.app.stubs.LocalStoppedService;
import android.app.stubs.NullService;
import android.app.stubs.R;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Binder;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.IBinder;
import android.os.Parcel;
import android.os.ParcelFileDescriptor;
import android.os.Process;
import android.os.RemoteException;
import android.os.SystemClock;
import android.os.UserHandle;
import android.service.notification.StatusBarNotification;
import android.test.suitebuilder.annotation.MediumTest;
import android.util.Log;
import android.util.SparseArray;

import androidx.test.InstrumentationRegistry;
import androidx.test.filters.FlakyTest;

import com.android.compatibility.common.util.IBinderParcelable;
import com.android.compatibility.common.util.SystemUtil;
import com.android.server"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ServiceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.ServiceTest"	"testLocalStartClassPermissions"	"CtsAppTestCases"	"1: granted"	"([1:/android/app/cts/ServiceTest.java]:[granted]:[1]:method_text:[lt(mLocalGrantedService);        startExpectResult(mLocalDeniedService);    }    @MediumTest   ]) :|: public void testLocalStartClassPermissions() throws Exception {
        startExpectResult(mLocalGrantedService);
        startExpectResult(mLocalDeniedService);
    }

    @MediumTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ServiceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.ServiceTest"	"testLocalBindClassPermissions"	"CtsAppTestCases"	"1: granted"	"([1:/android/app/cts/ServiceTest.java]:[granted]:[1]:method_text:[ult(mLocalGrantedService);        bindExpectResult(mLocalDeniedService);    }    @MediumTest   ]) :|: public void testLocalBindClassPermissions() throws Exception {
        bindExpectResult(mLocalGrantedService);
        bindExpectResult(mLocalDeniedService);
    }

    @MediumTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ServiceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.ServiceTest"	"testLocalBindAutoClassPermissionGranted"	"CtsAppTestCases"	"1: granted"	"([2:/android/app/cts/ServiceTest.java]:[granted]:[2]:method_text:[() throws Exception {        bindAutoExpectResult(mLocalGrantedService);    }    @MediumTest   ]) :|: public void testLocalBindAutoClassPermissionGranted() throws Exception {
        bindAutoExpectResult(mLocalGrantedService);
    }

    @MediumTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ServiceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.ServiceTest"	"testLocalBindAutoActionPermissionGranted"	"CtsAppTestCases"	"1: granted"	"([1:/android/app/cts/ServiceTest.java]:[granted]:[1]:method_text:[n {        bindAutoExpectResult(mLocalService_ApplicationHasPermission);    }    @MediumTest   ]) :|: public void testLocalBindAutoActionPermissionGranted() throws Exception {
        bindAutoExpectResult(mLocalService_ApplicationHasPermission);
    }

    @MediumTest"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ServiceTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.SystemFeaturesTest"	"testTouchScreenFeatures"	"CtsAppTestCases"	"1: re_tag:(?<!/)C\-1\-1"	"([1:/android/app/cts/SystemFeaturesTest.java]:[re_tag:(?<!/)C\-1\-1]:[1]:method_text:[RE_TOUCHSCREEN);            assertAvailable(PackageManager.FEATURE_FAKETOUCH);        }    }   ]) :|: 
    public void testTouchScreenFeatures() {
        // If device implementations include a touchscreen (single-touch or better), they:
        // [C-1-1] MUST report TOUCHSCREEN_FINGER for the Configuration.touchscreen API field.
        // [C-1-2] MUST report the android.hardware.touchscreen and
        // android.hardware.faketouch feature flags
        ConfigurationInfo configInfo = mActivityManager.getDeviceConfigurationInfo();
        if (configInfo.reqTouchScreen == Configuration.TOUCHSCREEN_NOTOUCH) {
            // Device does not include a touchscreen
            assertNotAvailable(PackageManager.FEATURE_TOUCHSCREEN);
        } else {
            // Device has a touchscreen
            assertAvailable(PackageManager.FEATURE_TOUCHSCREEN);
            assertAvailable(PackageManager.FEATURE_FAKETOUCH);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.SystemFeaturesTest"	"testUsbAccessory"	"CtsAppTestCases"	"1: microphone"	"([1:/android/app/cts/SystemFeaturesTest.java]:[microphone]:[1]:method_text:[e negatives.            assertAvailable(PackageManager.FEATURE_USB_ACCESSORY);        }    }   ]) :|: 
    public void testUsbAccessory() {
        if (!mPackageManager.hasSystemFeature(PackageManager.FEATURE_AUTOMOTIVE) &&
                !mPackageManager.hasSystemFeature(PackageManager.FEATURE_LEANBACK) &&
                !mPackageManager.hasSystemFeature(PackageManager.FEATURE_WATCH) &&
                !mPackageManager.hasSystemFeature(PackageManager.FEATURE_EMBEDDED) &&
                !isAndroidEmulator() &&
                !mPackageManager.hasSystemFeature(PackageManager.FEATURE_PC) &&
                mPackageManager.hasSystemFeature(PackageManager.FEATURE_MICROPHONE) &&
                mPackageManager.hasSystemFeature(PackageManager.FEATURE_TOUCHSCREEN)) {
            // USB accessory mode is only a requirement for devices with USB ports supporting
            // peripheral mode. As there is no public API to distinguish a device with only host
            // mode support from having both peripheral and host support, the test may have
            // false negatives.
            assertAvailable(PackageManager.FEATURE_USB_ACCESSORY);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.DownloadManagerTest"	"testDownload_onMediaStoreDownloadsDeleted"	"CtsAppTestCases"	"1: granted"	"([2:/android/app/cts/DownloadManagerTest.java]:[granted]:[2]:method_text:[utStream(file)) {            FileUtils.copy(source, target);        }        return file;    }}]) :|: 
    public void testDownload_onMediaStoreDownloadsDeleted() throws Exception {
        // prepare file
        File file = new File(Environment.getExternalStoragePublicDirectory(
                Environment.DIRECTORY_DOWNLOADS), ""cts"" + System.nanoTime() + "".mp3"");
        try {
            stageFile(""testmp3.mp3"", file);
            Uri mediaStoreUri = MediaStore.scanFile(mContext.getContentResolver(), file);

            // setup for activity
            GetResultActivity activity = setUpForActivity();

            // call activity as we want uri permission grant on DownloadStorageProvider Uri
            final Intent intent = new Intent();
            intent.setAction(Intent.ACTION_OPEN_DOCUMENT);
            intent.addCategory(Intent.CATEGORY_OPENABLE);
            intent.setType(""*/*"");
            Uri rootUri = DocumentsContract.buildRootUri(DOWNLOAD_STORAGE_PROVIDER_AUTHORITY,
                    ""downloads"");
            intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, rootUri);
            activity.startActivityForResult(intent, REQUEST_CODE);
            mDevice.waitForIdle();

            findDocument(file.getName()).click();
            final GetResultActivity.Result result = activity.getResult();
            final Uri uri = result.data.getData();

            assertTrue(PERMISSION_GRANTED == checkUriPermission(uri));

            // onMediaStoreDownloadsDeleted API is called on MediaProvider#delete()
            // for download files. This API revokes grants on DownloadStorageProvider granted Uris
            LongSparseArray<String> lpa = new LongSparseArray<String>();
            final long mediaStoreId = Long.parseLong(getMediaStoreColumnValue(mediaStoreUri,
                    MediaStore.Files.FileColumns._ID));
            final String mimeType = getMediaStoreColumnValue(mediaStoreUri,
                    MediaStore.Files.FileColumns.MIME_TYPE);
            lpa.put(mediaStoreId, mimeType);
            // This API is permission protected"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/DownloadManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.ActivityManagerApi29Test"	"clearHistory"	"CtsAppTestCases"	"3: granted RECORD_AUDIO ACCESS_COARSE_LOCATION"	"([3:/android/app/cts/ActivityManagerApi29Test.java]:[ACCESS_COARSE_LOCATION]:[3]:method_text:[ * , even its capability is zero, it still has location access.     * @throws Exception     */   ]) :|: /*
 *.
 */
package android.app.cts;

import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
import static android.app.ActivityManager.PROCESS_CAPABILITY_ALL;
import static android.app.ActivityManager.PROCESS_CAPABILITY_NONE;
import static android.app.AppOpsManager.MODE_ALLOWED;
import static android.app.AppOpsManager.MODE_FOREGROUND;
import static android.app.AppOpsManager.MODE_IGNORED;
import static android.app.AppOpsManager.OPSTR_CAMERA;
import static android.app.AppOpsManager.OPSTR_COARSE_LOCATION;
import static android.app.AppOpsManager.OPSTR_RECORD_AUDIO;
import static android.app.AppOpsManager.OP_FLAGS_ALL;
import static android.app.AppOpsManager.UID_STATE_FOREGROUND_SERVICE;
import static android.app.AppOpsManager.UID_STATE_TOP;

import static com.android.compatibility.common.util.SystemUtil.callWithShellPermissionIdentity;
import static com.android.compatibility.common.util.SystemUtil.runWithShellPermissionIdentity;

import static org.junit.Assert.assertEquals;

import android.app.AppOpsManager;
import android.app.AppOpsManager.HistoricalOp;
import android.app.AppOpsManager.HistoricalOps;
import android.app.AppOpsManager.HistoricalOpsRequest;
import android.app.Instrumentation;
import android.app.cts.android.app.cts.tools.WaitForBroadcast;
import android.app.cts.android.app.cts.tools.WatchUidRunner;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager.NameNotFoundException;
import android.permission.cts.PermissionUtils;
import android.provider.DeviceConfig;
import android.provider.Settings;
import android.support.test.uiautomator.UiDevice;

import androidx.test.InstrumentationRegistry;
import androidx.test.runner.AndroidJUnit4;

import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;
import java.util.concurrent.CompletableFuture;
import"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityManagerApi29Test.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.ActivityManagerApi29Test"	"testAppOpsHistoricalOps"	"CtsAppTestCases"	"1: RECORD_AUDIO"	"([1:/android/app/cts/ActivityManagerApi29Test.java]:[RECORD_AUDIO]:[1]:method_text:[ FGS started by TOP app can have OP_CAMERA and OP_RECORD_AUDIO.     * @throws Exception     */   ]) :|: 
    @Ignore(""because ag/13230961, FGS started in instrumentation are not subject to while-in-use ""
            + ""restriction"")
    public void testAppOpsHistoricalOps() throws Exception {
        runWithShellPermissionIdentity(
                () ->  sAppOps.setHistoryParameters(AppOpsManager.HISTORICAL_MODE_ENABLED_ACTIVE,
                        1000, 10)
        );
        WaitForBroadcast waiter = new WaitForBroadcast(sInstrumentation.getTargetContext());
        waiter.prepare(ACTION_SIMPLE_ACTIVITY_START_RESULT);
        startSimpleActivity();
        mUidWatcher.waitFor(WatchUidRunner.CMD_PROCSTATE, WatchUidRunner.STATE_TOP,
                new Integer(PROCESS_CAPABILITY_ALL));
        waiter.doWait(WAITFOR_MSEC);

        waiter = new WaitForBroadcast(sInstrumentation.getTargetContext());
        waiter.prepare(ACTION_SERVICE_START_RESULT);
        startSimpleService();
        waiter.doWait(WAITFOR_MSEC);

        for (int i = 0; i < NOTEOP_COUNT; i++) {
            noteOp(OPSTR_COARSE_LOCATION);
        }

        stopSimpleActivity();
        // The callingPackage to start FGS is in background.
        mUidWatcher.waitFor(WatchUidRunner.CMD_PROCSTATE, WatchUidRunner.STATE_FG_SERVICE,
                new Integer(PROCESS_CAPABILITY_NONE));
        for (int i = 0; i < NOTEOP_COUNT; i++) {
            noteOp(OPSTR_COARSE_LOCATION);
        }
        stopSimpleService();
        mUidWatcher.waitFor(WatchUidRunner.CMD_PROCSTATE, WatchUidRunner.STATE_CACHED_EMPTY,
                new Integer(PROCESS_CAPABILITY_NONE));

        for (int i = 0; i < NOTEOP_COUNT; i++) {
            noteOp(OPSTR_COARSE_LOCATION);
        }
        runWithShellPermissionIdentity(() -> {
            CompletableFuture<HistoricalOps> ops = new CompletableFuture<>();
            HistoricalOpsRequest histOpsRequest = new HistoricalOpsRequest.Builder(
                    Instant.now().minus(1, ChronoUnit.HOURS).toEpochMilli(),
                    Long.MAX_VALUE)
                    .setU"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityManagerApi29Test.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.ActivityManagerApi29Test"	"testCameraWithAppOps"	"CtsAppTestCases"	"2: RECORD_AUDIO microphone"	"([3:/android/app/cts/ActivityManagerApi29Test.java]:[microphone]:[3]:method_text:[        () -> sAppOps.noteOp(opStr, sUid, PACKAGE_NAME,                        opStr, """"));    }}]) :|: 
    @Ignore(""because ag/13230961, FGS started in instrumentation are not subject to while-in-use ""
            + ""restriction"")
    public void testCameraWithAppOps() throws Exception {
        startSimpleService();
        // Wait for state and capability change.
        mUidWatcher.waitFor(WatchUidRunner.CMD_PROCSTATE, WatchUidRunner.STATE_FG_SERVICE,
                new Integer(PROCESS_CAPABILITY_NONE));

        // Non-Top started FGS do not have while-in-use permission, camera/microphone access is
        // denied.
        assertEquals(MODE_IGNORED, noteOp(OPSTR_CAMERA));
        assertEquals(MODE_IGNORED, noteOp(OPSTR_RECORD_AUDIO));

        // Start an activity, put app in TOP.
        startSimpleActivity();
        // TOP process has all capabilities.
        mUidWatcher.waitFor(WatchUidRunner.CMD_PROCSTATE, WatchUidRunner.STATE_TOP,
                new Integer(PROCESS_CAPABILITY_ALL));

        // Camera/microphone access is allowed because the app is TOP.
        assertEquals(MODE_ALLOWED, noteOp(OPSTR_CAMERA));
        assertEquals(MODE_ALLOWED, noteOp(OPSTR_RECORD_AUDIO));

        // Tell the activity to finalize.
        stopSimpleActivity();
        mUidWatcher.waitFor(WatchUidRunner.CMD_PROCSTATE, WatchUidRunner.STATE_FG_SERVICE,
                new Integer(PROCESS_CAPABILITY_NONE));

        // App not in Top, camera/microphone access should be denied.
        assertEquals(MODE_IGNORED, noteOp(OPSTR_CAMERA));
        assertEquals(MODE_IGNORED, noteOp(OPSTR_RECORD_AUDIO));

        // Stop the foreground service.
        stopSimpleService();
        mUidWatcher.waitFor(WatchUidRunner.CMD_PROCSTATE, WatchUidRunner.STATE_CACHED_EMPTY,
                new Integer(PROCESS_CAPABILITY_NONE));

        assertEquals(MODE_IGNORED, noteOp(OPSTR_CAMERA));
        assertEquals(MODE_IGNORED, noteOp(OPSTR_RECORD_AUDIO));
    }

    private int noteOp(String opStr) throws Exception {
        return callWithShellPermissionIdentity(
                () -> sAppOps.n"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityManagerApi29Test.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.ActivityManagerApi29Test"	"testTopActivityWithAppOps"	"CtsAppTestCases"	"1: ACCESS_COARSE_LOCATION"	"([1:/android/app/cts/ActivityManagerApi29Test.java]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[pp.cts.activitymanager.api29"" package's targetSdkVersion is 29.     * @throws Exception     */   ]) :|: 
    @Ignore(""because ag/13230961, FGS started in instrumentation are not subject to while-in-use ""
            + ""restriction"")
    public void testTopActivityWithAppOps() throws Exception {
        startSimpleActivity();
        mUidWatcher.waitFor(WatchUidRunner.CMD_PROCSTATE, WatchUidRunner.STATE_TOP,
                new Integer(PROCESS_CAPABILITY_ALL));

        // AppOps location access should be allowed.
        assertEquals(MODE_ALLOWED, noteOp(OPSTR_COARSE_LOCATION));

        stopSimpleActivity();
        mUidWatcher.waitFor(WatchUidRunner.CMD_PROCSTATE, WatchUidRunner.STATE_CACHED_EMPTY,
                new Integer(PROCESS_CAPABILITY_NONE));

        // AppOps location access should be denied.
        assertEquals(MODE_IGNORED, noteOp(OPSTR_COARSE_LOCATION));
    }

    /**
     * When ActivityManagerService process states and capability changes, it updates AppOpsService.
     * This test starts a foreground service with location type, it updates AppOpsService with
     * PROCESS_STATE_FOREGROUND_SERVICE and PROCESS_CAPABILITY_FOREGROUND_LOCATION, then check if
     * AppOpsManager allow ACCESS_COARSE_LOCATION of MODE_FOREGROUND.
     *
     * The ""android.app.cts.activitymanager.api29"" package's targetSdkVersion is 29.
     * @throws Exception
     */"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityManagerApi29Test.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.BroadcastOptionsTest"	"testSetTemporaryAppWhitelistDuration"	"CtsAppTestCases"	"1: ACTIVITY_RECOGNITION"	"([2:/android/app/cts/BroadcastOptionsTest.java]:[ACTIVITY_RECOGNITION]:[2]:method_text:[N,                ""reason"");        assertBroadcastOption_noTemporaryAppAllowList(bo);    }   ]) :|: 
    public void testSetTemporaryAppWhitelistDuration() {
        BroadcastOptions bo;

        bo = BroadcastOptions.makeBasic();

        bo.setTemporaryAppAllowlist(10,
                PowerExemptionManager.TEMPORARY_ALLOW_LIST_TYPE_FOREGROUND_SERVICE_NOT_ALLOWED,
                PowerExemptionManager.REASON_GEOFENCING,
                null);

        assertBroadcastOptionTemporaryAppAllowList(bo,
                /* duration= */ 10,
                PowerExemptionManager.TEMPORARY_ALLOW_LIST_TYPE_FOREGROUND_SERVICE_NOT_ALLOWED,
                PowerExemptionManager.REASON_GEOFENCING,
                /* reason= */ null);

        // Setting duration 0 will clear the previous call.
        bo.setTemporaryAppAllowlist(0,
                PowerExemptionManager.TEMPORARY_ALLOW_LIST_TYPE_FOREGROUND_SERVICE_NOT_ALLOWED,
                PowerExemptionManager.REASON_ACTIVITY_RECOGNITION,
                ""reason"");
        assertBroadcastOption_noTemporaryAppAllowList(bo);

        // Set again.
        bo.setTemporaryAppAllowlist(20,
                PowerExemptionManager.TEMPORARY_ALLOW_LIST_TYPE_FOREGROUND_SERVICE_ALLOWED,
                PowerExemptionManager.REASON_GEOFENCING,
                ""reason"");

        assertBroadcastOptionTemporaryAppAllowList(bo,
                /* duration= */ 20,
                PowerExemptionManager.TEMPORARY_ALLOW_LIST_TYPE_FOREGROUND_SERVICE_ALLOWED,
                PowerExemptionManager.REASON_GEOFENCING,
                /* reason= */ ""reason"");

        // Set to NONE will clear the previous call too.
        bo.setTemporaryAppAllowlist(10,
                PowerExemptionManager.TEMPORARY_ALLOW_LIST_TYPE_NONE,
                PowerExemptionManager.REASON_ACTIVITY_RECOGNITION,
                ""reason"");

        assertBroadcastOption_noTemporaryAppAllowList(bo);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/BroadcastOptionsTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.NotificationManagerTest"	"isGroup"	"CtsAppTestCases"	"1: granted"	"([3:/android/app/cts/NotificationManagerTest.java]:[granted]:[3]:method_text:[oid deactivateGracePeriod() {        UiDevice.getInstance(mInstrumentation).pressHome();    }   ]) :|: public void test/*
 *.
 */

package android.app.cts;

import static android.app.Notification.FLAG_BUBBLE;
import static android.app.NotificationManager.BUBBLE_PREFERENCE_ALL;
import static android.app.NotificationManager.BUBBLE_PREFERENCE_NONE;
import static android.app.NotificationManager.BUBBLE_PREFERENCE_SELECTED;
import static android.app.NotificationManager.IMPORTANCE_DEFAULT;
import static android.app.NotificationManager.IMPORTANCE_HIGH;
import static android.app.NotificationManager.IMPORTANCE_LOW;
import static android.app.NotificationManager.IMPORTANCE_MIN;
import static android.app.NotificationManager.IMPORTANCE_NONE;
import static android.app.NotificationManager.IMPORTANCE_UNSPECIFIED;
import static android.app.NotificationManager.INTERRUPTION_FILTER_ALARMS;
import static android.app.NotificationManager.INTERRUPTION_FILTER_ALL;
import static android.app.NotificationManager.INTERRUPTION_FILTER_NONE;
import static android.app.NotificationManager.INTERRUPTION_FILTER_PRIORITY;
import static android.app.NotificationManager.Policy.CONVERSATION_SENDERS_ANYONE;
import static android.app.NotificationManager.Policy.CONVERSATION_SENDERS_NONE;
import static android.app.NotificationManager.Policy.PRIORITY_CATEGORY_ALARMS;
import static android.app.NotificationManager.Policy.PRIORITY_CATEGORY_CALLS;
import static android.app.NotificationManager.Policy.PRIORITY_CATEGORY_CONVERSATIONS;
import static android.app.NotificationManager.Policy.PRIORITY_CATEGORY_EVENTS;
import static android.app.NotificationManager.Policy.PRIORITY_CATEGORY_MEDIA;
import static android.app.NotificationManager.Policy.PRIORITY_CATEGORY_MESSAGES;
import static android.app.NotificationManager.Policy.PRIORITY_CATEGORY_REMINDERS;
import static android.app.NotificationManager.Policy.PRIORITY_CATEGORY_SYSTEM;
import static android.app.NotificationManager.Policy.SUPPRESSED_EFFECT_AMBIENT;
import static android.app.NotificationManager.Policy.SUPPRESSED_EFFECT_FULL_SCREEN_INTENT;
import static android.app.N"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.NotificationManagerTest"	"testNotificationUriPermissionsGranted"	"CtsAppTestCases"	"1: granted"	"([1:/android/app/cts/NotificationManagerTest.java]:[granted]:[1]:method_text:[     performNotificationProviderAction(""reset"");            Thread.sleep(500);        }    }   ]) :|: public void testNotificationUriPermissionsGranted() throws Exception {
        Uri background7Uri = Uri.parse(
                ""content://com.android.test.notificationprovider.provider/background7.png"");
        Uri background8Uri = Uri.parse(
                ""content://com.android.test.notificationprovider.provider/background8.png"");

        toggleListenerAccess(true);
        Thread.sleep(500); // wait for listener to be allowed

        mListener = TestNotificationListener.getInstance();
        assertNotNull(mListener);

        try {
            // Post #7
            performNotificationProviderAction(""send-7"");

            assertEquals(background7Uri, getNotificationBackgroundImageUri(7));
            assertNotificationCancelled(8, true);
            assertAccessible(background7Uri);
            assertInaccessible(background8Uri);

            // Post #8
            performNotificationProviderAction(""send-8"");

            assertEquals(background7Uri, getNotificationBackgroundImageUri(7));
            assertEquals(background8Uri, getNotificationBackgroundImageUri(8));
            assertAccessible(background7Uri);
            assertAccessible(background8Uri);

            // Cancel #7
            performNotificationProviderAction(""cancel-7"");

            assertNotificationCancelled(7, true);
            assertEquals(background8Uri, getNotificationBackgroundImageUri(8));
            assertInaccessible(background7Uri);
            assertAccessible(background8Uri);

            // Cancel #8
            performNotificationProviderAction(""cancel-8"");

            assertNotificationCancelled(7, true);
            assertNotificationCancelled(8, true);
            assertInaccessible(background7Uri);
            assertInaccessible(background8Uri);

        } finally {
            // Clean up -- reset any remaining notifications
            performNotificationProviderAction(""reset"");
            Thread.sleep(500);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.NotificationManagerTest"	"testNotificationUriPermissionsGrantedToNewListeners"	"CtsAppTestCases"	"1: granted"	"([1:/android/app/cts/NotificationManagerTest.java]:[granted]:[1]:method_text:[  performNotificationProviderAction(""cancel-7"");            Thread.sleep(500);        }    }   ]) :|: public void testNotificationUriPermissionsGrantedToNewListeners() throws Exception {
        Uri background7Uri = Uri.parse(
                ""content://com.android.test.notificationprovider.provider/background7.png"");

        try {
            // Post #7
            performNotificationProviderAction(""send-7"");

            Thread.sleep(500);
            // Don't have access the notification yet, but we can test the URI
            assertInaccessible(background7Uri);

            toggleListenerAccess(true);
            Thread.sleep(500); // wait for listener to be allowed

            mListener = TestNotificationListener.getInstance();
            assertNotNull(mListener);

            assertEquals(background7Uri, getNotificationBackgroundImageUri(7));
            assertAccessible(background7Uri);

        } finally {
            // Clean Up -- Cancel #7
            performNotificationProviderAction(""cancel-7"");
            Thread.sleep(500);
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.NotificationManagerTest"	"testNotificationUriPermissionsRevokedOnlyFromRemovedListeners"	"CtsAppTestCases"	"1: granted"	"([1:/android/app/cts/NotificationManagerTest.java]:[granted]:[1]:method_text:[;        } catch (Exception e) {            throw new CompletionException(e);        }    }   ]) :|: public void testNotificationUriPermissionsRevokedOnlyFromRemovedListeners() throws Exception {
        Uri background7Uri = Uri.parse(
                ""content://com.android.test.notificationprovider.provider/background7.png"");

        // Connect to a service in the NotificationListener app which allows us to validate URI
        // permissions granted to a second app, so that we show that permissions aren't being
        // revoked too broadly.
        final Intent intent = new Intent();
        intent.setComponent(new ComponentName(""com.android.test.notificationlistener"",
                ""com.android.test.notificationlistener.NotificationUriAccessService""));
        NotificationListenerConnection connection = new NotificationListenerConnection();
        mContext.bindService(intent, connection, Context.BIND_AUTO_CREATE);
        connection.waitForService();

        // Before starting the test, make sure the service works, that there is no listener, and
        // that the URI starts inaccessible to that process.
        mNotificationUriAccessService.ensureNotificationListenerServiceConnected(false);
        assertFalse(mNotificationUriAccessService.isFileUriAccessible(background7Uri));

        // Give the NotificationListener app access to notifications, and validate that.
        toggleExternalListenerAccess(new ComponentName(""com.android.test.notificationlistener"",
                ""com.android.test.notificationlistener.TestNotificationListener""), true);
        Thread.sleep(500);
        mNotificationUriAccessService.ensureNotificationListenerServiceConnected(true);
        assertFalse(mNotificationUriAccessService.isFileUriAccessible(background7Uri));

        // Give the test app access to notifications, and get that listener
        toggleListenerAccess(true);
        Thread.sleep(500); // wait for listener to be allowed
        mListener = TestNotificationListener.getInstance();
        assertNotNull(mListener);

        try {
            try {"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.NotificationManagerTest"	"testNotificationListener_setNotificationsShown"	"CtsAppTestCases"	"1: granted"	"([1:/android/app/cts/NotificationManagerTest.java]:[granted]:[1]:method_text:[sn't granted"");        } catch (SecurityException e) {            // expected        }    }   ]) :|: public void testNotificationListener_setNotificationsShown() throws Exception {
        toggleListenerAccess(true);
        Thread.sleep(500); // wait for listener to be allowed

        mListener = TestNotificationListener.getInstance();
        assertNotNull(mListener);
        final int notificationId1 = 1003;
        final int notificationId2 = 1004;

        sendNotification(notificationId1, R.drawable.black);
        sendNotification(notificationId2, R.drawable.black);
        Thread.sleep(500); // wait for notification listener to receive notification

        StatusBarNotification sbn1 = findPostedNotification(notificationId1, false);
        StatusBarNotification sbn2 = findPostedNotification(notificationId2, false);
        mListener.setNotificationsShown(new String[]{ sbn1.getKey() });

        toggleListenerAccess(false);
        Thread.sleep(500); // wait for listener to be disallowed
        try {
            mListener.setNotificationsShown(new String[]{ sbn2.getKey() });
            fail(""Should not be able to set shown if listener access isn't granted"");
        } catch (SecurityException e) {
            // expected
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.NotificationManagerTest"	"testGrantRevokeNotificationManagerApis_works"	"CtsAppTestCases"	"1: granted"	"([2:/android/app/cts/NotificationManagerTest.java]:[granted]:[2]:method_text:[tEnabledNotificationListeners(),                    hasItem(componentName));        });    }   ]) :|: public void testGrantRevokeNotificationManagerApis_works() {
        SystemUtil.runWithShellPermissionIdentity(() -> {
            ComponentName componentName = TestNotificationListener.getComponentName();
            mNotificationManager.setNotificationListenerAccessGranted(
                    componentName, true, true);

            assertThat(
                    mNotificationManager.getEnabledNotificationListeners(),
                    hasItem(componentName));

            mNotificationManager.setNotificationListenerAccessGranted(
                    componentName, false, false);

            assertThat(
                    ""Non-user-set changes should not override user-set"",
                    mNotificationManager.getEnabledNotificationListeners(),
                    hasItem(componentName));
        });
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.NotificationManagerTest"	"testGrantRevokeNotificationManagerApis_exclusiveToPermissionController"	"CtsAppTestCases"	"1: granted"	"([1:/android/app/cts/NotificationManagerTest.java]:[granted]:[1]:method_text:[            + Manifest.permission.MANAGE_NOTIFICATION_LISTENERS);            }        }    }   ]) :|: public void testGrantRevokeNotificationManagerApis_exclusiveToPermissionController() {
        List<PackageInfo> allPackages = mPackageManager.getInstalledPackages(
                PackageManager.MATCH_DISABLED_COMPONENTS
                        | PackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS);
        List<String> allowedPackages = Arrays.asList(
                mPackageManager.getPermissionControllerPackageName(),
                ""com.android.shell"");
        for (PackageInfo pkg : allPackages) {
            if (!pkg.applicationInfo.isSystemApp()
                    && mPackageManager.checkPermission(
                            Manifest.permission.MANAGE_NOTIFICATION_LISTENERS, pkg.packageName)
                            == PackageManager.PERMISSION_GRANTED
                    && !allowedPackages.contains(pkg.packageName)) {
                fail(pkg.packageName + "" can't hold ""
                        + Manifest.permission.MANAGE_NOTIFICATION_LISTENERS);
            }
        }
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.NotificationManagerTest"	"testSetAutomaticZenRuleState_multipleRules"	"CtsAppTestCases"	"1: silent"	"([1:/android/app/cts/NotificationManagerTest.java]:[silent]:[1]:method_text:[cZenRule(secondId);        assertExpectedDndState(ruleToCreate.getInterruptionFilter());    }   ]) :|: public void testSetAutomaticZenRuleState_multipleRules() throws Exception {
        toggleNotificationPolicyAccess(mContext.getPackageName(),
                InstrumentationRegistry.getInstrumentation(), true);

        AutomaticZenRule ruleToCreate = createRule(""Rule"");
        String id = mNotificationManager.addAutomaticZenRule(ruleToCreate);
        mRuleIds.add(id);

        AutomaticZenRule secondRuleToCreate = createRule(""Rule 2"");
        secondRuleToCreate.setInterruptionFilter(INTERRUPTION_FILTER_NONE);
        String secondId = mNotificationManager.addAutomaticZenRule(secondRuleToCreate);
        mRuleIds.add(secondId);

        // make sure DND is off
        assertExpectedDndState(INTERRUPTION_FILTER_ALL);

        // enable DND
        Condition condition =
                new Condition(ruleToCreate.getConditionId(), ""summary"", Condition.STATE_TRUE);
        mNotificationManager.setAutomaticZenRuleState(id, condition);
        Condition secondCondition =
                new Condition(secondRuleToCreate.getConditionId(), ""summary"", Condition.STATE_TRUE);
        mNotificationManager.setAutomaticZenRuleState(secondId, secondCondition);

        // the second rule has a 'more silent' DND filter, so the system wide DND should be
        // using its filter
        assertExpectedDndState(secondRuleToCreate.getInterruptionFilter());

        // remove intense rule, system should fallback to other rule
        mNotificationManager.removeAutomaticZenRule(secondId);
        assertExpectedDndState(ruleToCreate.getInterruptionFilter());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.NotificationManagerTest"	"testShouldHideSilentStatusIcons"	"CtsAppTestCases"	"1: silent"	"([3:/android/app/cts/NotificationManagerTest.java]:[silent]:[3]:method_text:[ // no exception this time        mNotificationManager.shouldHideSilentStatusBarIcons();    }   ]) :|: public void testShouldHideSilentStatusIcons() throws Exception {
        try {
            mNotificationManager.shouldHideSilentStatusBarIcons();
            fail(""Non-privileged apps should not get this information"");
        } catch (SecurityException e) {
            // pass
        }

        toggleListenerAccess(true);
        // no exception this time
        mNotificationManager.shouldHideSilentStatusBarIcons();
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.app.cts.NotificationManagerTest"	"testNotificationListenerMethods"	"CtsAppTestCases"	"1: silent"	"([1:/android/app/cts/NotificationManagerTest.java]:[silent]:[1]:method_text:[ctivityIntent.putExtra(""action"", action);        mContext.startActivity(activityIntent);    }   ]) :|: public void testNotificationListenerMethods() {
        NotificationListenerService listener = new TestNotificationListener();
        listener.onListenerConnected();

        listener.onSilentStatusBarIconsVisibilityChanged(false);

        listener.onNotificationPosted(null);
        listener.onNotificationPosted(null, null);

        listener.onNotificationRemoved(null);
        listener.onNotificationRemoved(null, null);

        listener.onNotificationChannelGroupModified("""", UserHandle.CURRENT, null,
                NotificationListenerService.NOTIFICATION_CHANNEL_OR_GROUP_ADDED);
        listener.onNotificationChannelModified("""", UserHandle.CURRENT, null,
                NotificationListenerService.NOTIFICATION_CHANNEL_OR_GROUP_ADDED);

        listener.onListenerDisconnected();
    }

    private void performNotificationProviderAction(@NonNull String action) {
        // Create an intent to launch an activity which just posts or cancels notifications
        Intent activityIntent = new Intent();
        activityIntent.setClassName(NOTIFICATIONPROVIDER, RICH_NOTIFICATION_ACTIVITY);
        activityIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        activityIntent.putExtra(""action"", action);
        mContext.startActivity(activityIntent);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.location.cts.none.LocationRequestTest"	"testBuild_BadMinUpdateInterval"	"CtsLocationNoneTestCases"	"1: admin"	"([1:/android/location/cts/none/LocationRequestTest.java]:[admin]:[1]:method_text:[      .build();        assertThat(request.getMinUpdateIntervalMillis()).isEqualTo(5000);    }   ]) :|: 
    public void testBuild_BadMinUpdateInterval() {
        LocationRequest request = new LocationRequest.Builder(5000)
                .setMinUpdateIntervalMillis(6000)
                .build();
        assertThat(request.getMinUpdateIntervalMillis()).isEqualTo(5000);
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/location/location_none/src/android/location/cts/none/LocationRequestTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.location.cts.none.AddressTest"	"testAccessAdminArea"	"CtsLocationNoneTestCases"	"1: admin"	"([8:/android/location/cts/none/AddressTest.java]:[admin]:[8]:method_text:[Area());        address.setAdminArea(null);        assertNull(address.getAdminArea());    }   ]) :|: 
    public void testAccessAdminArea() {
        Address address = new Address(Locale.ITALY);

        String adminArea = ""CA"";
        address.setAdminArea(adminArea);
        assertEquals(adminArea, address.getAdminArea());

        address.setAdminArea(null);
        assertNull(address.getAdminArea());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/location/location_none/src/android/location/cts/none/AddressTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.location.cts.none.AddressTest"	"testAccessSubAdminArea"	"CtsLocationNoneTestCases"	"1: admin"	"([8:/android/location/cts/none/AddressTest.java]:[admin]:[8]:method_text:[);        address.setSubAdminArea(null);        assertNull(address.getSubAdminArea());    }   ]) :|: 
    public void testAccessSubAdminArea() {
        Address address = new Address(Locale.CHINA);

        String subAdminArea = ""Santa Clara County"";
        address.setSubAdminArea(subAdminArea);
        assertEquals(subAdminArea, address.getSubAdminArea());

        address.setSubAdminArea(null);
        assertNull(address.getSubAdminArea());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/location/location_none/src/android/location/cts/none/AddressTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.location.cts.none.AddressTest"	"testToString"	"CtsLocationNoneTestCases"	"1: admin"	"([2:/android/location/cts/none/AddressTest.java]:[admin]:[2]:method_text:[ull,url=www.google.com,extras=null]"";        assertEquals(expected, address.toString());    }   ]) :|: 
    public void testToString() {
        Address address = new Address(Locale.CHINA);

        address.setUrl(""www.google.com"");
        address.setPostalCode(""95120"");
        String expected = ""Address[addressLines=[],feature=null,admin=null,sub-admin=null,"" +
                ""locality=null,thoroughfare=null,postalCode=95120,countryCode=null,"" +
                ""countryName=null,hasLatitude=false,latitude=0.0,hasLongitude=false,"" +
                ""longitude=0.0,phone=null,url=www.google.com,extras=null]"";
        assertEquals(expected, address.toString());
    }"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/location/location_none/src/android/location/cts/none/AddressTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.location.cts.none.AddressTest"	"testWriteToParcel"	"CtsLocationNoneTestCases"	"1: admin"	"([2:/android/location/cts/none/AddressTest.java]:[admin]:[2]:method_text:[;        assertEquals(address.getExtras(), parcel.readBundle());        parcel.recycle();    }}]) :|: 
    public void testWriteToParcel() {
        Locale locale = Locale.KOREA;
        Address address = new Address(locale);

        Parcel parcel = Parcel.obtain();
        address.writeToParcel(parcel, 0);
        parcel.setDataPosition(0);
        assertEquals(locale.getLanguage(), parcel.readString());
        assertEquals(locale.getCountry(), parcel.readString());
        assertEquals(0, parcel.readInt());
        assertEquals(address.getFeatureName(), parcel.readString());
        assertEquals(address.getAdminArea(), parcel.readString());
        assertEquals(address.getSubAdminArea(), parcel.readString());
        assertEquals(address.getLocality(), parcel.readString());
        assertEquals(address.getSubLocality(), parcel.readString());
        assertEquals(address.getThoroughfare(), parcel.readString());
        assertEquals(address.getSubThoroughfare(), parcel.readString());
        assertEquals(address.getPremises(), parcel.readString());
        assertEquals(address.getPostalCode(), parcel.readString());
        assertEquals(address.getCountryCode(), parcel.readString());
        assertEquals(address.getCountryName(), parcel.readString());
        assertEquals(0, parcel.readInt());
        assertEquals(0, parcel.readInt());
        assertEquals(address.getPhone(), parcel.readString());
        assertEquals(address.getUrl(), parcel.readString());
        assertEquals(address.getExtras(), parcel.readBundle());

        parcel.recycle();
    }
}"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/location/location_none/src/android/location/cts/none/AddressTest.java"	""	""	""
"9.1  . Application Data Migration"	"9.1"	"C-1-1"	"9.1/C-1-1"	"managed_users microphone admin silent"	"""C-1-1]  android.software.managed_users MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: | C-1-1] MUST declare the platform feature flag android.software.verified_boot. | C-1-1] MUST back up the keystore implementation with an isolated execution environment. | C-1-1] MUST provide the user an option to enter Safe Boot Mode in such a way that is uninterruptible from third-party apps installed on the device, except when the third-party app is a Device Policy Controller and has set the UserManager.DISALLOW_SAFE_BOOT flag as true. | C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication."""	""	"android.location.cts.coarse.LocationManagerCoarseTest"	"testAddProximityAlert"	"CtsLocationCoarseTestCases"	"1: ACCESS_COARSE_LOCATION ACCESS_COARSE_LOCATION"	"([1:/android/location/cts/coarse/LocationManagerCoarseTest.java]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[         }        }    }    // TODO: this test should probably not be in the location module   ]) :|: 
    public void testAddProximityAlert() {
        try (ProximityPendingIntentCapture capture = new ProximityPendingIntentCapture(mContext)) {
            try {
                mManager.addProximityAlert(0, 0, 100, -1, capture.getPendingIntent());
                fail(""addProximityAlert() should fail with only ACCESS_COARSE_LOCATION"");
            } catch (SecurityException e) {
                // pass
            }
        }
    }

    // TODO: this test should probably not be in the location module"	"granted ACCESS_BACKGROUND_LOCATION silent android.software.managed_users BODY_SENSORS RECORD_AUDIO Microphone re_tag:(?<!/)C\-1\-1 UserManager.DISALLOW android.software.managed ACCESS_FINE_LOCATION. microphone managed_users ACTIVITY_RECOGNITION admin DISALLOW_SAFE_BOOT android.software.verified_boot. ACCESS_COARSE_LOCATION silently"	"/home/gpoor/cts-12-source/cts/tests/location/location_coarse/src/android/location/cts/coarse/LocationManagerCoarseTest.java"	""	""	""
