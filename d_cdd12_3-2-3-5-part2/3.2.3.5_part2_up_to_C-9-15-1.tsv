"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"Area"	"Shortened"	"Test Level"	"class_def"	"method"	"module"	"class_defs"	"methods"	"modules"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-12-3"	"3.2.3.5/C-12-3"	"03020305.671203"	"""C-12-3] MUST honor only allow preinstalled Android applications to handle the following intents [`MediaStore.ACTION_IMAGE_CAPTURE`](https://developer.android.com/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE), [`MediaStore.ACTION_IMAGE_CAPTURE_SECURE`](https://developer.android.com/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE_SECURE), and [`MediaStore.ACTION_VIDEO_CAPTURE`](https://developer.android.com/reference/android/provider/MediaStore.html#ACTION_VIDEO_CAPTURE) as described in the [SDK document](https://developer.android.com/preview/behavior-changes-11?hl=zh-tw#media-capture).  If device implementations report `android.software.device_admin`, they:  """	""	""	"MediaStore.html ACTION_IMAGE_CAPTURE_SECURE ACTION_IMAGE_CAPTURE ACTION_VIDEO_CAPTURE MediaStore.ACTION android.software.device"	""	""	""	""	"[('android.content.cts.AvailableIntentsTest', 8), ('android.content.cts.ImageCaptureUriExtraToClipDataTest', 7), ('com.android.cts.managedprofile.DisallowSharingIntoProfileTest', 4), ('android.appsecurity.cts.DirectBootHostTest', 1), ('android.provider.cts.media.MediaStore_MetadataKeysTest', 1), ('android.appsecurity.cts.ResumeOnRebootHostTest', 1), ('com.google.android.cts.settings.PrivacyDeviceOwnerTest', 1)]"	"[('setUp', 12), ('getDevice', 7), ('getInstrumentation', 4), ('getContext', 4), ('getAbi', 2), ('getBuild', 2), ('tearDown', 1), ('reviewGalleryPrewarmService', 1), ('getPackageManager', 1), ('getComponentInfo', 1), ('getMaxNumberOfUsersSupported', 1), ('getCurrentUser', 1)]"	"[('CtsContentTestCases', 15), ('CtsAppSecurityHostTestCases', 2), ('CtsProviderTestCases', 1), ('CtsSettingsHostTestCases', 1)]"	""	""	""	""	"com.google.android.cts.settings.PrivacyDeviceOwnerTest"	"getCurrentUser"	"CtsSettingsHostTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ImageCaptureUriExtraToClipDataTest.java', 7), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DirectBootHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_MetadataKeysTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ResumeOnRebootHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/settings/src/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java', 1)]"	"[('(1,android.software.device,/android/appsecurity/cts/DirectBootHostTest.java)', 1), ('(1,MediaStore.ACTION,/android/provider/cts/media/MediaStore_MetadataKeysTest.java)', 1), ('(4,ACTION_IMAGE_CAPTURE,/android/content/cts/AvailableIntentsTest.java)', 1), ('(6,MediaStore.ACTION,/android/content/cts/AvailableIntentsTest.java)', 1), ('(2,ACTION_VIDEO_CAPTURE,/android/content/cts/AvailableIntentsTest.java)', 1), ('(2,ACTION_IMAGE_CAPTURE,/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java)', 1), ('(3,MediaStore.ACTION,/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java)', 1), ('(1,ACTION_VIDEO_CAPTURE,/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java)', 1), ('(1,ACTION_IMAGE_CAPTURE_SECURE,/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java)', 1), ('(1,android.software.device,/android/appsecurity/cts/ResumeOnRebootHostTest.java)', 1), ('(2,ACTION_IMAGE_CAPTURE,/android/content/cts/ImageCaptureUriExtraToClipDataTest.java)', 1), ('(3,MediaStore.ACTION,/android/content/cts/ImageCaptureUriExtraToClipDataTest.java)', 1), ('(1,ACTION_VIDEO_CAPTURE,/android/content/cts/ImageCaptureUriExtraToClipDataTest.java)', 1), ('(1,ACTION_IMAGE_CAPTURE_SECURE,/android/content/cts/ImageCaptureUriExtraToClipDataTest.java)', 1), ('(1,android.software.device,/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java)', 1)]"	"[('([1:/android/appsecurity/cts/DirectBootHostTest.java]:[android.software.device]:[1]:method_text:[allPackage(OTHER_PKG);    }    /**     * Automotive devices MUST support native FBE.     */   ])', 1), ('([1:/android/provider/cts/media/MediaStore_MetadataKeysTest.java]:[MediaStore.ACTION]:[1]:method_text:[T_ACTIVITY_NAME + "" not present in the list of matching ResolveInfos"");        return null;    }}])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_IMAGE_CAPTURE]:[1]:method_text:[it can more easily be suppressed while we     * fix targets that are out of compliance.     */   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_IMAGE_CAPTURE]:[1]:method_text:[ore.INTENT_ACTION_VIDEO_CAMERA);            assertHandledBySystemOnly(intent);        }    }   ])', 1), ('([2:/android/content/cts/AvailableIntentsTest.java]:[ACTION_IMAGE_CAPTURE]:[2]:method_text:[tubCameraIntentHandlerActivity""));            assertHandledBySelfOnly(intent);        }    }   ])', 1), ('([2:/android/content/cts/AvailableIntentsTest.java]:[MediaStore.ACTION]:[2]:method_text:[it can more easily be suppressed while we     * fix targets that are out of compliance.     */   ])', 1), ('([2:/android/content/cts/AvailableIntentsTest.java]:[MediaStore.ACTION]:[2]:method_text:[ore.INTENT_ACTION_VIDEO_CAMERA);            assertHandledBySystemOnly(intent);        }    }   ])', 1), ('([2:/android/content/cts/AvailableIntentsTest.java]:[MediaStore.ACTION]:[2]:method_text:[tubCameraIntentHandlerActivity""));            assertHandledBySelfOnly(intent);        }    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_VIDEO_CAPTURE]:[1]:method_text:[it can more easily be suppressed while we     * fix targets that are out of compliance.     */   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_VIDEO_CAPTURE]:[1]:method_text:[ore.INTENT_ACTION_VIDEO_CAMERA);            assertHandledBySystemOnly(intent);        }    }   ])', 1), ('([2:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[ACTION_IMAGE_CAPTURE]:[2]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1), ('([3:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[MediaStore.ACTION]:[3]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1), ('([1:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[ACTION_VIDEO_CAPTURE]:[1]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1), ('([1:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[ACTION_IMAGE_CAPTURE_SECURE]:[1]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1), ('([1:/android/appsecurity/cts/ResumeOnRebootHostTest.java]:[android.software.device]:[1]:method_text:[throws Exception {        removeTestPackages();        deviceRestoreDeviceConfigSync();    }   ])', 1), ('([1:/android/content/cts/ImageCaptureUriExtraToClipDataTest.java]:[ACTION_IMAGE_CAPTURE]:[1]:method_text:[diaStore.ACTION_IMAGE_CAPTURE);        waitForFileReady();        assertFileContents();    }   ])', 1), ('([1:/android/content/cts/ImageCaptureUriExtraToClipDataTest.java]:[ACTION_IMAGE_CAPTURE]:[1]:method_text:[e.ACTION_IMAGE_CAPTURE_SECURE);        waitForFileReady();        assertFileContents();    }   ])', 1), ('([1:/android/content/cts/ImageCaptureUriExtraToClipDataTest.java]:[MediaStore.ACTION]:[1]:method_text:[diaStore.ACTION_IMAGE_CAPTURE);        waitForFileReady();        assertFileContents();    }   ])', 1), ('([1:/android/content/cts/ImageCaptureUriExtraToClipDataTest.java]:[MediaStore.ACTION]:[1]:method_text:[e.ACTION_IMAGE_CAPTURE_SECURE);        waitForFileReady();        assertFileContents();    }   ])', 1), ('([1:/android/content/cts/ImageCaptureUriExtraToClipDataTest.java]:[MediaStore.ACTION]:[1]:method_text:[   String fileContents = new String(buffer);        assertEquals(TEST_INPUT, fileContents);    }}])', 1), ('([1:/android/content/cts/ImageCaptureUriExtraToClipDataTest.java]:[ACTION_VIDEO_CAPTURE]:[1]:method_text:[   String fileContents = new String(buffer);        assertEquals(TEST_INPUT, fileContents);    }}])', 1), ('([1:/android/content/cts/ImageCaptureUriExtraToClipDataTest.java]:[ACTION_IMAGE_CAPTURE_SECURE]:[1]:method_text:[e.ACTION_IMAGE_CAPTURE_SECURE);        waitForFileReady();        assertFileContents();    }   ])', 1), ('([1:/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java]:[android.software.device]:[1]:method_text:[    super.tearDown();    }    /** The case: app is the device owner, has work policy info. */   ])', 1)]"	"https://developer.android.com"	""	"[('MediaStore.ACTION', 8), ('ACTION_IMAGE_CAPTURE', 6), ('ACTION_VIDEO_CAPTURE', 4), ('android.software.device', 3), ('ACTION_IMAGE_CAPTURE_SECURE', 2)]"	"[('[android.content.cts.AvailableIntentsTest testCamera CtsContentTestCases]', 3), ('[android.content.cts.AvailableIntentsTest testImageCaptureIntentsHandledBySystem CtsContentTestCases]', 3), ('[android.content.cts.ImageCaptureUriExtraToClipDataTest testUriExtraOutputMigratedToClipData_imageCaptureSecureIntent CtsContentTestCases]', 3), ('[android.content.cts.AvailableIntentsTest testImageCaptureIntentWithExplicitTargeting CtsContentTestCases]', 2), ('[android.content.cts.ImageCaptureUriExtraToClipDataTest testUriExtraOutputMigratedToClipData_imageCaptureIntent CtsContentTestCases]', 2), ('[android.content.cts.ImageCaptureUriExtraToClipDataTest testUriExtraOutputMigratedToClipData_videoCaptureIntent CtsContentTestCases]', 2), ('[android.appsecurity.cts.ResumeOnRebootHostTest removeTestPackages CtsAppSecurityHostTestCases]', 1), ('[com.google.android.cts.settings.PrivacyDeviceOwnerTest isHeadlessSystemUserMode CtsSettingsHostTestCases]', 1)]"
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-12-2"	"3.2.3.5/C-12-2"	"03020305.671202"	"""C-12-2] MUST honor the [`android.media.action.VIDEO_CAMERA`](https://developer.android.com/reference/android/provider/MediaStore#INTENT_ACTION_VIDEO_CAMERA) intent to launch the camera in video mode as described in the SDK. """	""	""	"VIDEO_CAMERA android.media.action.VIDEO INTENT_ACTION_VIDEO_CAMERA"	""	"TINGS"	""	""	"[('android.content.cts.AvailableIntentsTest', 4), ('com.android.cts.managedprofile.DisallowSharingIntoProfileTest', 2), ('android.appsecurity.cts.EphemeralTest', 1)]"	"[('setUp', 5), ('getInstrumentation', 2), ('getContext', 2)]"	"[('CtsContentTestCases', 4), ('CtsAppSecurityHostTestCases', 1)]"	""	""	""	""	"android.appsecurity.cts.EphemeralTest"	"setUp"	"CtsAppSecurityHostTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java', 1)]"	"[('(2,VIDEO_CAMERA,/android/content/cts/AvailableIntentsTest.java)', 1), ('(2,INTENT_ACTION_VIDEO_CAMERA,/android/content/cts/AvailableIntentsTest.java)', 1), ('(1,VIDEO_CAMERA,/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java)', 1), ('(1,INTENT_ACTION_VIDEO_CAMERA,/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java)', 1), ('(1,android.media.action.VIDEO,/android/appsecurity/cts/EphemeralTest.java)', 1)]"	"[('([1:/android/content/cts/AvailableIntentsTest.java]:[VIDEO_CAMERA]:[1]:method_text:[it can more easily be suppressed while we     * fix targets that are out of compliance.     */   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[VIDEO_CAMERA]:[1]:method_text:[ore.INTENT_ACTION_VIDEO_CAMERA);            assertHandledBySystemOnly(intent);        }    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[INTENT_ACTION_VIDEO_CAMERA]:[1]:method_text:[it can more easily be suppressed while we     * fix targets that are out of compliance.     */   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[INTENT_ACTION_VIDEO_CAMERA]:[1]:method_text:[ore.INTENT_ACTION_VIDEO_CAMERA);            assertHandledBySystemOnly(intent);        }    }   ])', 1), ('([1:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[VIDEO_CAMERA]:[1]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1), ('([1:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[INTENT_ACTION_VIDEO_CAMERA]:[1]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1), ('([1:/android/appsecurity/cts/EphemeralTest.java]:[android.media.action.VIDEO]:[1]:method_text:[f (mIsUnsupportedDevice) {            return;        }        uninstallTestPackages();    }   ])', 1)]"	"https://developer.android.com"	""	"[('VIDEO_CAMERA', 3), ('INTENT_ACTION_VIDEO_CAMERA', 3), ('android.media.action.VIDEO', 1)]"	"[('[android.content.cts.AvailableIntentsTest testCamera CtsContentTestCases]', 2), ('[android.content.cts.AvailableIntentsTest testImageCaptureIntentsHandledBySystem CtsContentTestCases]', 2), ('[android.appsecurity.cts.EphemeralTest isDeviceUnsupported CtsAppSecurityHostTestCases]', 1)]"
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-15-1"	"3.2.3.5/C-15-1"	"03020305.671501"	"""C-15-1] MUST still have an activity that handles the [android.settings.ACTION_USAGE_ACCESS_SETTINGS](https://developer.android.com/reference/android/provider/Settings.html#ACTION&lowbar;USAGE&lowbar;ACCESS&lowbar;SETTINGS) intent pattern but MUST implement it as a no-op, that is to have an equivalent behavior as when the user is declined for access.  If device implementations report the feature `android.hardware.audio.output`, they:  """	""	""	"SETTINGS ACCESS ACTION android.hardware.audio.output android.settings.ACTION ACTION_USAGE_ACCESS_SETTINGS Settings.html USAGE"	""	"ACCESS"	""	""	"[('android.quickaccesswallet.cts.QuickAccessWalletClientTest', 27), ('android.location.cts.none.LocationTest', 14), ('android.net.wifi.cts.WifiLocationInfoTest', 13), ('android.provider.cts.contacts.ContactsContract_AllUriTest', 12), ('android.hardware.camera2.cts.ImageReaderTest', 12), ('android.media.tv.tuner.cts.TunerFrontendTest', 12), ('android.accessibilityservice.cts.AccessibilityFocusAndInputFocusSyncTest', 8), ('android.devicepolicy.cts.PreferentialNetworkServiceTest', 6), ('android.server.wm.UnsupportedErrorDialogTests', 6), ('com.android.cts.devicepolicy.MixedManagedProfileOwnerTest', 5), ('android.bluetooth.cts.AdvertiseSettingsTest', 5), ('android.renderscript.cts.AllocationCreateAllocationsTest', 5), ('android.accessibilityservice.cts.AccessibilitySettingsTest', 4), ('android.view.animation.cts.LayoutAnimationControllerTest', 4), ('com.android.server.cts.UsbIncidentTest', 4), ('android.media.cts.RingtoneManagerTest', 4), ('android.accessibilityservice.cts.AccessibilityButtonTest', 4), ('android.bluetooth.cts.ScanCallbackTest', 4), ('android.cts.statsdatom.net.BytesTransferredTest', 4), ('android.security.cts.IsolatedProcessTest', 3), ('android.media.mediatranscoding.cts.MediaTranscodingManagerTest', 3), ('android.provider.cts.calendar.CalendarTest', 3), ('android.hardware.camera2.cts.MultiViewTest', 3), ('android.widget.cts.EditTextTest', 3), ('android.view.animation.cts.GridLayoutAnimationControllerTest', 3), ('android.cts.statsdatom.batterystats.BatteryUsageStatsTests', 3), ('android.view.accessibility.cts.AccessibilityActionTest', 3), ('android.text.util.cts.Rfc822TokenTest', 3), ('android.permission.cts.OneTimePermissionTest', 2), ('android.view.inputmethod.cts.EditTextImeSupportTest', 2), ('android.view.cts.MotionEventTest', 2), ('android.provider.cts.contacts.ContactsContract_ContactsTest', 2), ('android.os.cts.AccessSerialLegacyTest', 2), ('test.java.com.android.bedstead.nene.packages.PackageTest', 2), ('com.android.cts.device.blob.DataCleanupTest', 2), ('android.view.inputmethod.cts.PackageVisibilityTest', 2), ('android.view.cts.ViewStubTest', 2), ('android.cts.rscpp.RSYuvTest', 2), ('android.os.cts.AccessSerialModernTest', 2), ('android.widget.cts.RadioButtonTest', 1), ('com.android.server.cts.IncidentdTest', 1), ('android.graphics.drawable.cts.DrawableContainerTest', 1), ('android.compat.sjp.cts.StrictJavaPackagesTest', 1), ('android.text.cts.ClipboardManagerTest', 1), ('android.media.cts.DecoderTestXheAac', 1), ('android.permission.cts.NoWallpaperPermissionsTest', 1), ('android.graphics.cts.SetFrameRateTest', 1), ('android.graphics.drawable.cts.AnimationDrawableTest', 1), ('android.server.wm.WindowInsetsAnimationControllerTests', 1), ('android.view.cts.MenuItemTest', 1), ('com.android.server.cts.GraphicsStatsValidationTest', 1), ('android.media.cts.MediaCasTest', 1), ('android.permission.cts.NoWakeLockPermissionTest', 1), ('android.app.usage.cts.FragmentTest', 1), ('com.android.cts.useslibrary.UsesLibraryTest', 1), ('android.cts.statsdatom.appstart.AppStartStatsTests', 1), ('android.telephony.ims.cts.EabControllerTest', 1), ('android.graphics.cts.MatchContentFrameRateTest', 1), ('android.media.cts.AdaptivePlaybackTest', 1), ('android.security.cts.Poc18_02', 1), ('com.android.cts.appsearch.app.AppSearchSessionPlatformCtsTest', 1), ('android.text.cts.BoringLayoutTest', 1), ('android.provider.cts.media.MediaStore_Images_MediaTest', 1), ('android.app.cts.WallpaperInfoTest', 1), ('android.util.cts.ArrayMapTest', 1)]"	"[('setUp', 39), ('getInstrumentation', 20), ('moveToFirst', 17), ('tearDown', 14), ('size', 12), ('getMessage', 12), ('build', 11), ('getContentResolver', 10), ('ContentValues', 10), ('getResources', 9), ('failIfFailed', 9), ('getUiAutomation', 8), ('buildUpon', 7), ('getContext', 6), ('getTargetContext', 6), ('AccessibilityDumpOnFailureRule', 4), ('resetStaticFields', 4), ('getExternalCacheDir', 4), ('CancellationSignal', 4), ('getSimpleName', 3), ('Builder', 3), ('getCount', 3), ('StringBuilder', 3), ('length', 3), ('getColumnNames', 3), ('cleanup', 3), ('UnlockScreenRule', 2), ('getName', 2), ('flattenToString', 2), ('getCacheDir', 2), ('getAbsolutePath', 2), ('createMediaFormat', 2), ('Bundle', 2), ('close', 2), ('ime', 2), ('getActivity', 2), ('getMediaDirString', 2), ('DeviceState', 2), ('get', 2), ('getPackageManager', 1), ('wakeUpScreen', 1), ('installApp', 1), ('prepareDeviceForOneTime', 1), ('uninstallApp', 1), ('restoreDeviceForOneTime', 1), ('ServiceConnection', 1), ('countDown', 1), ('CalendarHelper', 1), ('SyncStateHelper', 1), ('EventHelper', 1), ('AttendeeHelper', 1), ('ColorHelper', 1), ('ReminderHelper', 1), ('ExtendedPropertiesHelper', 1), ('LimitedErrorCollector', 1), ('types', 1), ('statusBars', 1), ('navigationBars', 1), ('setup', 1), ('teardown', 1), ('resetAppErrors', 1), ('acquire', 1), ('AccessibilityButtonCallback', 1), ('getService', 1), ('getAccessibilityButtonController', 1), ('getMatchContentFrameRateUserPreference', 1), ('MockScanner', 1), ('BleScanCallback', 1)]"	"[('CtsQuickAccessWalletTestCases', 27), ('CtsAccessibilityServiceTestCases', 16), ('CtsCameraTestCases', 15), ('CtsContactsProviderTestCases', 14), ('CtsLocationNoneTestCases', 14), ('CtsWifiTestCases', 13), ('CtsViewTestCases', 12), ('CtsTvTestCases', 12), ('CtsBluetoothTestCases', 9), ('CtsStatsdAtomHostTestCases', 8), ('CtsMediaTestCases', 7), ('CtsWindowManagerDeviceTestCases', 7), ('CtsIncidentHostTestCases', 6), ('CtsDevicePolicyTestCases', 6), ('CtsDevicePolicyManagerTestCases', 5), ('CtsTextTestCases', 5), ('CtsRenderscriptTestCases', 5), ('CtsWidgetTestCases', 4), ('CtsPermissionTestCases', 4), ('CtsGraphicsTestCases', 4), ('CtsInputMethodTestCases', 4), ('CtsSecurityTestCases', 3), ('CtsMediaTranscodingTestCases', 3), ('CtsCalendarProviderTestCases', 3), ('CtsAccessibilityTestCases', 3), ('CtsRsCppTestCases', 2), ('CtsStrictJavaPackagesTestCases', 1), ('CtsUsageStatsTestCases', 1), ('CtsTelephonyTestCases', 1), ('CtsSecurityBulletinHostTestCases', 1), ('CtsAppSearchTestCases', 1), ('CtsProviderTestCases', 1), ('CtsAppTestCases', 1), ('CtsUtilTestCases', 1)]"	""	""	""	""	"android.util.cts.ArrayMapTest"	"setUp"	"CtsUtilTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/quickaccesswallet/src/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java', 27), ('/home/gpoor/cts-12-source/cts/tests/location/location_none/src/android/location/cts/none/LocationTest.java', 14), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 13), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_AllUriTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/tests/tv/src/android/media/tv/tuner/cts/TunerFrontendTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityFocusAndInputFocusSyncTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/PreferentialNetworkServiceTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/UnsupportedErrorDialogTests.java', 6), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/AdvertiseSettingsTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/AllocationCreateAllocationsTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilitySettingsTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/LayoutAnimationControllerTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/src/com/android/server/cts/UsbIncidentTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/RingtoneManagerTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityButtonTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanCallbackTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/net/BytesTransferredTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/IsolatedProcessTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/mediatranscoding/src/android/media/mediatranscoding/cts/MediaTranscodingManagerTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/calendarprovider/src/android/provider/cts/calendar/CalendarTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/EditTextTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/GridLayoutAnimationControllerTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/batterystats/BatteryUsageStatsTests.java', 3), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityActionTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/util/cts/Rfc822TokenTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/EditTextImeSupportTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/MotionEventTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_ContactsTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AccessSerialLegacy/src/android/os/cts/AccessSerialLegacyTest.java', 2), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/packages/PackageTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/blobstore/test-apps/BlobStoreHostTestHelper/src/com/android/cts/device/blob/DataCleanupTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/PackageVisibilityTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewStubTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSYuvTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AccessSerialModern/src/android/os/cts/AccessSerialModernTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/RadioButtonTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/src/com/android/server/cts/IncidentdTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/DrawableContainerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appcompat/strictjavapackages/src/android/compat/sjp/cts/StrictJavaPackagesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/cts/ClipboardManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestXheAac.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoWallpaperPermissionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/SetFrameRateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/AnimationDrawableTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationControllerTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/MenuItemTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/src/com/android/server/cts/GraphicsStatsValidationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaCasTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoWakeLockPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/FragmentTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/classloaders/useslibrary/app/src/com/android/cts/useslibrary/UsesLibraryTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/appstart/AppStartStatsTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/EabControllerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/MatchContentFrameRateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AdaptivePlaybackTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc18_02.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/app/AppSearchSessionPlatformCtsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/cts/BoringLayoutTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Images_MediaTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/WallpaperInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/util/src/android/util/cts/ArrayMapTest.java', 1)]"	"[('(12,ACCESS,/android/accessibilityservice/cts/AccessibilitySettingsTest.java)', 1), ('(10,SETTINGS,/android/accessibilityservice/cts/AccessibilitySettingsTest.java)', 1), ('(1,ACCESS,/android/widget/cts/RadioButtonTest.java)', 1), ('(18,ACCESS,/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(4,ACCESS,/android/view/animation/cts/LayoutAnimationControllerTest.java)', 1), ('(3,SETTINGS,/com/android/server/cts/IncidentdTest.java)', 1), ('(1,ACCESS,/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java)', 1), ('(4,SETTINGS,/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java)', 1), ('(3,ACCESS,/android/permission/cts/OneTimePermissionTest.java)', 1), ('(11,ACCESS,/com/android/server/cts/UsbIncidentTest.java)', 1), ('(13,SETTINGS,/com/android/server/cts/UsbIncidentTest.java)', 1), ('(1,ACCESS,/android/graphics/drawable/cts/DrawableContainerTest.java)', 1), ('(2,SETTINGS,/android/view/inputmethod/cts/EditTextImeSupportTest.java)', 1), ('(2,ACCESS,/android/view/cts/MotionEventTest.java)', 1), ('(3,USAGE,/android/provider/cts/contacts/ContactsContract_ContactsTest.java)', 1), ('(34,SETTINGS,/android/bluetooth/cts/AdvertiseSettingsTest.java)', 1), ('(3,ACCESS,/android/os/cts/AccessSerialLegacyTest.java)', 1), ('(1,USAGE,/android/compat/sjp/cts/StrictJavaPackagesTest.java)', 1), ('(1,ACCESS,/android/text/cts/ClipboardManagerTest.java)', 1), ('(1,SETTINGS,/android/media/cts/DecoderTestXheAac.java)', 1), ('(1,ACCESS,/android/permission/cts/NoWallpaperPermissionsTest.java)', 1), ('(3,ACCESS,/android/security/cts/IsolatedProcessTest.java)', 1), ('(1,ACCESS,/android/graphics/cts/SetFrameRateTest.java)', 1), ('(97,ACCESS,/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java)', 1), ('(21,SETTINGS,/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java)', 1), ('(2,ACCESS,/android/media/mediatranscoding/cts/MediaTranscodingManagerTest.java)', 1), ('(1,SETTINGS,/android/media/mediatranscoding/cts/MediaTranscodingManagerTest.java)', 1), ('(4,ACCESS,/test/java/com/android/bedstead/nene/packages/PackageTest.java)', 1), ('(1,USAGE,/android/provider/cts/calendar/CalendarTest.java)', 1), ('(6,ACCESS,/android/provider/cts/calendar/CalendarTest.java)', 1), ('(2,USAGE,/android/provider/cts/contacts/ContactsContract_AllUriTest.java)', 1), ('(27,ACCESS,/android/provider/cts/contacts/ContactsContract_AllUriTest.java)', 1), ('(1,SETTINGS,/android/provider/cts/contacts/ContactsContract_AllUriTest.java)', 1), ('(1,ACCESS,/android/graphics/drawable/cts/AnimationDrawableTest.java)', 1), ('(4,ACCESS,/com/android/cts/device/blob/DataCleanupTest.java)', 1), ('(2,SETTINGS,/android/server/wm/WindowInsetsAnimationControllerTests.java)', 1), ('(1,ACCESS,/android/view/cts/MenuItemTest.java)', 1), ('(4,USAGE,/android/hardware/camera2/cts/MultiViewTest.java)', 1), ('(1,ACCESS,/android/hardware/camera2/cts/MultiViewTest.java)', 1), ('(45,USAGE,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(11,ACCESS,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(1,SETTINGS,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(5,SETTINGS,/com/android/server/cts/GraphicsStatsValidationTest.java)', 1), ('(2,SETTINGS,/android/view/inputmethod/cts/PackageVisibilityTest.java)', 1), ('(2,ACCESS,/android/view/cts/ViewStubTest.java)', 1), ('(2,USAGE,/android/cts/rscpp/RSYuvTest.java)', 1), ('(13,ACCESS,/android/widget/cts/EditTextTest.java)', 1), ('(1,ACCESS,/android/media/cts/MediaCasTest.java)', 1), ('(14,ACCESS,/android/location/cts/none/LocationTest.java)', 1), ('(369,SETTINGS,/android/media/tv/tuner/cts/TunerFrontendTest.java)', 1), ('(5,ACCESS,/android/media/cts/RingtoneManagerTest.java)', 1), ('(11,SETTINGS,/android/media/cts/RingtoneManagerTest.java)', 1), ('(3,ACCESS,/android/devicepolicy/cts/PreferentialNetworkServiceTest.java)', 1), ('(3,SETTINGS,/android/devicepolicy/cts/PreferentialNetworkServiceTest.java)', 1), ('(136,ACCESS,/android/accessibilityservice/cts/AccessibilityFocusAndInputFocusSyncTest.java)', 1), ('(34,SETTINGS,/android/server/wm/UnsupportedErrorDialogTests.java)', 1), ('(1,ACCESS,/android/permission/cts/NoWakeLockPermissionTest.java)', 1), ('(4,ACCESS,/android/os/cts/AccessSerialModernTest.java)', 1), ('(2,USAGE,/android/app/usage/cts/FragmentTest.java)', 1), ('(3,ACCESS,/android/view/animation/cts/GridLayoutAnimationControllerTest.java)', 1), ('(4,ACCESS,/com/android/cts/useslibrary/UsesLibraryTest.java)', 1), ('(43,ACCESS,/android/accessibilityservice/cts/AccessibilityButtonTest.java)', 1), ('(29,USAGE,/android/cts/statsdatom/batterystats/BatteryUsageStatsTests.java)', 1), ('(24,USAGE,/android/renderscript/cts/AllocationCreateAllocationsTest.java)', 1), ('(3,SETTINGS,/android/cts/statsdatom/appstart/AppStartStatsTests.java)', 1), ('(4,ACCESS,/android/telephony/ims/cts/EabControllerTest.java)', 1), ('(1,SETTINGS,/android/graphics/cts/MatchContentFrameRateTest.java)', 1), ('(1,ACCESS,/android/media/cts/AdaptivePlaybackTest.java)', 1), ('(1,USAGE,/android/security/cts/Poc18_02.java)', 1), ('(12,ACCESS,/android/view/accessibility/cts/AccessibilityActionTest.java)', 1), ('(2,USAGE,/com/android/cts/appsearch/app/AppSearchSessionPlatformCtsTest.java)', 1), ('(4,SETTINGS,/android/text/cts/BoringLayoutTest.java)', 1), ('(14,SETTINGS,/android/bluetooth/cts/ScanCallbackTest.java)', 1), ('(2,ACCESS,/android/provider/cts/media/MediaStore_Images_MediaTest.java)', 1), ('(1,SETTINGS,/android/app/cts/WallpaperInfoTest.java)', 1), ('(3,ACCESS,/android/text/util/cts/Rfc822TokenTest.java)', 1), ('(12,USAGE,/android/cts/statsdatom/net/BytesTransferredTest.java)', 1), ('(2,SETTINGS,/android/cts/statsdatom/net/BytesTransferredTest.java)', 1), ('(1,ACCESS,/android/util/cts/ArrayMapTest.java)', 1)]"	"[('([2:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[2]:method_text:[    callback.await(3, TimeUnit.SECONDS);        assertThat(callback.mError).isNotNull();    }   ])', 6), ('([2:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[2]:method_text:[   callback.await(3, TimeUnit.SECONDS);        assertThat(callback.mError).isNotNull();    }   ])', 2), ('([32:/android/media/tv/tuner/cts/TunerFrontendTest.java]:[SETTINGS]:[32]:method_text:[rtEquals(Tuner.INVALID_FRONTEND_SETTING_FREQUENCY, settings.getEndFrequency());        }    }   ])', 2), ('([30:/android/media/tv/tuner/cts/TunerFrontendTest.java]:[SETTINGS]:[30]:method_text:[rtEquals(Tuner.INVALID_FRONTEND_SETTING_FREQUENCY, settings.getEndFrequency());        }    }   ])', 2), ('([7:/android/accessibilityservice/cts/AccessibilitySettingsTest.java]:[ACCESS]:[7]:method_text:[ailureRule =            new AccessibilityDumpOnFailureRule();    @MediumTest    @AppModeFull   ])', 1), ('([5:/android/accessibilityservice/cts/AccessibilitySettingsTest.java]:[ACCESS]:[5]:method_text:[ACTION_ACCESSIBILITY_SETTINGS"";        assertTrue(message, !resolvedActivities.isEmpty());    }}])', 1), ('([3:/android/accessibilityservice/cts/AccessibilitySettingsTest.java]:[SETTINGS]:[3]:method_text:[ailureRule =            new AccessibilityDumpOnFailureRule();    @MediumTest    @AppModeFull   ])', 1), ('([7:/android/accessibilityservice/cts/AccessibilitySettingsTest.java]:[SETTINGS]:[7]:method_text:[ACTION_ACCESSIBILITY_SETTINGS"";        assertTrue(message, !resolvedActivities.isEmpty());    }}])', 1), ('([1:/android/widget/cts/RadioButtonTest.java]:[ACCESS]:[1]:method_text:[ecked());        verifyNoMoreInteractions(mockCheckedChangeListener);    }    @UiThreadTest   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS]:[2]:method_text:[E_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_TRANSPORT_INFO_SERVICE), status);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS]:[1]:method_text:[ACKAGE_NAME, ACCESS_FINE_LOCATION);        triggerScanFgActivityAndAssertStatusIs(true);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS]:[2]:method_text:[E_NAME, ACCESS_BACKGROUND_LOCATION);        triggerScanBgServiceAndAssertStatusIs(true);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS]:[1]:method_text:[ACKAGE_NAME, ACCESS_FINE_LOCATION);        triggerScanBgServiceAndAssertStatusIs(false);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS]:[1]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveScanResultsFgActivityAndAssertStatusIs(true);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS]:[2]:method_text:[ACCESS_BACKGROUND_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(true);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS]:[1]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(false);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS]:[1]:method_text:[, ACCESS_FINE_LOCATION);        retrieveConnectionInfoFgActivityAndAssertStatusIs(true);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS]:[2]:method_text:[ESS_BACKGROUND_LOCATION);        retrieveConnectionInfoBgServiceAndAssertStatusIs(true);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS]:[1]:method_text:[gServiceAndAssertStatusIs(false);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS]:[1]:method_text:[gActivityAndAssertStatusIs(true);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS]:[2]:method_text:[BgServiceAndAssertStatusIs(true);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS]:[1]:method_text:[NAME, ACCESS_FINE_LOCATION);        retrieveTransportInfoBgServiceAndAssertStatusIs(false);    }}])', 1), ('([1:/android/view/animation/cts/LayoutAnimationControllerTest.java]:[ACCESS]:[1]:method_text:[ation2.getAlpha(), DELTA);        assertEquals(1.0f, transformation3.getAlpha(), DELTA);    }   ])', 1), ('([1:/android/view/animation/cts/LayoutAnimationControllerTest.java]:[ACCESS]:[1]:method_text:[mation(float alpha) {        assertTrue(alpha > 0.0f);        assertTrue(alpha < 1.0f);    }   ])', 1), ('([1:/android/view/animation/cts/LayoutAnimationControllerTest.java]:[ACCESS]:[1]:method_text:[          assertTrue(delta2 > delta3);            assertTrue(delta3 > delta4);        }    }   ])', 1), ('([1:/android/view/animation/cts/LayoutAnimationControllerTest.java]:[ACCESS]:[1]:method_text:[getStartOffset() - childAnimation2.getStartOffset();        assertTrue(delta2 > delta1);    }   ])', 1), ('([3:/com/android/server/cts/IncidentdTest.java]:[SETTINGS]:[3]:method_text:[Level);        }    }    // Splitting these into separate methods to make debugging easier.   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[ACCESS]:[1]:method_text:[ = new ArrayList<>();        result.add(DELEGATION_NETWORK_LOGGING);        return result;    }}])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[SETTINGS]:[1]:method_text:[s in the primary user when the policy     * is set on the profile owner.     */    @LargeTest   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[SETTINGS]:[1]:method_text:[   super.testAlwaysOnVpnUnsupportedPackageReplaced();    }    @Override    @LockSettingsTest   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[SETTINGS]:[1]:method_text:[ // Managed profile owner cannot set currently allowlisted system settings.    }    @Override   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[SETTINGS]:[1]:method_text:["".WifiTest"", ""testCannotGetWifiMacAddress"", mUserId);    }    @Override    @LockSettingsTest   ])', 1), ('([1:/android/permission/cts/OneTimePermissionTest.java]:[ACCESS]:[1]:method_text:[ions_timeout_millis"",                        mOldOneTimePermissionTimeoutValue, false));    }   ])', 1), ('([2:/android/permission/cts/OneTimePermissionTest.java]:[ACCESS]:[2]:method_text:[               mActivityManager.removeOnUidImportanceListener(this);            }        }    }}])', 1), ('([7:/com/android/server/cts/UsbIncidentTest.java]:[ACCESS]:[7]:method_text:[= device.hasFeature(FEATURE_USB_ACCESSORY);        return hasUsbHost || hasUsbAccessory;    }   ])', 1), ('([4:/com/android/server/cts/UsbIncidentTest.java]:[ACCESS]:[4]:method_text:[Level == PRIVACY_AUTO) {            assertTrue(udfp.getSerialNumber().isEmpty());        }    }}])', 1), ('([3:/com/android/server/cts/UsbIncidentTest.java]:[SETTINGS]:[3]:method_text:[= device.hasFeature(FEATURE_USB_ACCESSORY);        return hasUsbHost || hasUsbAccessory;    }   ])', 1), ('([10:/com/android/server/cts/UsbIncidentTest.java]:[SETTINGS]:[10]:method_text:[Level == PRIVACY_AUTO) {            assertTrue(udfp.getSerialNumber().isEmpty());        }    }}])', 1), (""([1:/android/graphics/drawable/cts/DrawableContainerTest.java]:[ACCESS]:[1]:method_text:[MockDrawableContainer.setConstantState(null);        // Note that we're not using 'expected' on the])"", 1), ('([1:/android/view/inputmethod/cts/EditTextImeSupportTest.java]:[SETTINGS]:[1]:method_text:[    return editTextRef.get();    }    /**     * A regression test for Bug 161330778.     */   ])', 1), ('([1:/android/view/inputmethod/cts/EditTextImeSupportTest.java]:[SETTINGS]:[1]:method_text:[+ "" but was null"");        }        assertEquals(expected.toString(), actual.toString());    }}])', 1), ('([1:/android/view/cts/MotionEventTest.java]:[ACCESS]:[1]:method_text:[t.ACTION_DOWN);        assertEquals(MotionEvent.ACTION_DOWN, mMotionEvent1.getAction());    }   ])', 1), ('([1:/android/view/cts/MotionEventTest.java]:[ACCESS]:[1]:method_text:[2.setEdgeFlags(edgeFlags);        assertEquals(edgeFlags, mMotionEvent2.getEdgeFlags());    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_ContactsTest.java]:[USAGE]:[2]:method_text:[ld see in where     * clauses.     *     * This tests both contacts and raw_contacts.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_ContactsTest.java]:[USAGE]:[1]:method_text:[_TIME_CONTACTED));        assertEquals(0, rawContact.getLong(Contacts.TIMES_CONTACTED));    }   ])', 1), ('([3:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[SETTINGS]:[3]:method_text:[rtiseSettings}. */public class AdvertiseSettingsTest extends AndroidTestCase {    @SmallTest   ])', 1), ('([10:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[SETTINGS]:[10]:method_text:[s(0, settings.getTimeout());        assertTrue(settings.isConnectable());    }    @SmallTest   ])', 1), ('([4:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[SETTINGS]:[4]:method_text:[s.Builder().build();        assertEquals(0, settings.describeContents());    }    @SmallTest   ])', 1), ('([15:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[SETTINGS]:[15]:method_text:[gsFromParcel.getTimeout());        assertFalse(settings.isConnectable());    }    @SmallTest   ])', 1), ('([2:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[SETTINGS]:[2]:method_text:[s"");        } catch (IllegalArgumentException e) {            // nothing to do.        }    }}])', 1), ('([2:/android/os/cts/AccessSerialLegacyTest.java]:[ACCESS]:[2]:method_text:[at legacy apps can no longer access the device serial. */public class AccessSerialLegacyTest {   ])', 1), ('([1:/android/os/cts/AccessSerialLegacyTest.java]:[ACCESS]:[1]:method_text:[E permission"");        } catch (SecurityException e) {            /* expected */        }    }}])', 1), ('([1:/android/compat/sjp/cts/StrictJavaPackagesTest.java]:[USAGE]:[1]:method_text:[**     * Ensure that there are no duplicate classes among jars listed in BOOTCLASSPATH.     */   ])', 1), ('([1:/android/text/cts/ClipboardManagerTest.java]:[ACCESS]:[1]:method_text:[rdManager.setText(expected);        assertEquals(expected, mClipboardManager.getText());    }   ])', 1), ('([1:/android/media/cts/DecoderTestXheAac.java]:[SETTINGS]:[1]:method_text:[fy the correct decoding of USAC bitstreams with different boost and attenuation settings     */   ])', 1), ('([1:/android/permission/cts/NoWallpaperPermissionsTest.java]:[ACCESS]:[1]:method_text:[fy that the setResource(...) methods enforce the SET_WALLPAPER permission     */    @SmallTest   ])', 1), ('([1:/android/security/cts/IsolatedProcessTest.java]:[ACCESS]:[1]:method_text:[(BIND_SERVICE_TIMEOUT, TimeUnit.MILLISECONDS));    }    @AsbSecurityTest(cveBugId = 30202228)   ])', 1), ('([1:/android/security/cts/IsolatedProcessTest.java]:[ACCESS]:[1]:method_text:[D_TO_ISOLATED_PROCESS, serviceName));        }    }    @AsbSecurityTest(cveBugId = 30202228)   ])', 1), ('([1:/android/security/cts/IsolatedProcessTest.java]:[ACCESS]:[1]:method_text:[ould not be accessible from an isolated process"",                    service);        }    }   ])', 1), ('([1:/android/graphics/cts/SetFrameRateTest.java]:[ACCESS]:[1]:method_text:[yToken(mFrameRateFlexibilityToken);            mFrameRateFlexibilityToken = 0;        }    }   ])', 1), ('([27:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[27]:method_text:[MPONENT_ENABLED_STATE_DEFAULT);        TestQuickAccessWalletService.resetStaticFields();    }   ])', 1), ('([3:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[3]:method_text:[Client.create(mContext);        assertThat(client.isWalletServiceAvailable()).isFalse();    }   ])', 1), ('([2:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[2]:method_text:[e            SettingsUtils.syncSet(mContext, SETTING_KEY, showCardsAndPasses);        }    }   ])', 1), ('([2:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[2]:method_text:[ack.mResponse.getWalletCards()).hasSize(1);        assertThat(callback.mError).isNull();    }   ])', 1), ('([3:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[3]:method_text:[assertThat(callback.mResponse).isNull();        assertThat(callback.mError).isNotNull();    }   ])', 1), ('([4:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[4]:method_text:[assertThat(callback.mResponse).isNull();        assertThat(callback.mError).isNotNull();    }   ])', 1), ('([2:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[2]:method_text:[ callback.await(3, TimeUnit.SECONDS);        assertThat(callback.mResponse).isNotNull();    }   ])', 1), ('([2:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[2]:method_text:[otNull();        assertThat(callback.mError.getMessage()).isEqualTo(error.getMessage());    }   ])', 1), ('([4:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[4]:method_text:[ts).hasSize(1);        assertThat(selectRequests.get(0).getCardId()).isEqualTo(""card1"");    }   ])', 1), ('([5:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[5]:method_text:[SECONDS);        assertThat(TestQuickAccessWalletService.isWalletDismissed()).isTrue();    }   ])', 1), ('([5:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[5]:method_text:[ listener.await(300, TimeUnit.SECONDS);        assertThat(listener.mEvents).hasSize(1);    }   ])', 1), ('([3:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[3]:method_text:[s expected that this time out        }        assertThat(listener.mEvents).hasSize(0);    }   ])', 1), ('([6:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[6]:method_text:[t.disconnect();        TestQuickAccessWalletService.awaitUnbinding(3, TimeUnit.SECONDS);    }   ])', 1), ('([4:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[4]:method_text:[hat(callback.mResponse).isNotNull();        assertThat(callback2.mResponse).isNotNull();    }   ])', 1), ('([3:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[3]:method_text:[getName());        assertThat(walletIntent.getComponent()).isEqualTo(expectedComponent);    }   ])', 1), ('([6:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[ACCESS]:[6]:method_text:[TimeUnit unit) throws InterruptedException {            mLatch.await(time, unit);        }    }}])', 1), ('([6:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[SETTINGS]:[6]:method_text:[MPONENT_ENABLED_STATE_DEFAULT);        TestQuickAccessWalletService.resetStaticFields();    }   ])', 1), ('([6:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[SETTINGS]:[6]:method_text:[e            SettingsUtils.syncSet(mContext, SETTING_KEY, showCardsAndPasses);        }    }   ])', 1), ('([9:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[SETTINGS]:[9]:method_text:[TimeUnit unit) throws InterruptedException {            mLatch.await(time, unit);        }    }}])', 1), ('([1:/android/media/mediatranscoding/cts/MediaTranscodingManagerTest.java]:[ACCESS]:[1]:method_text:[E);    }    /**     * Verify that setting null destination uri will throw exception.     */   ])', 1), ('([1:/android/media/mediatranscoding/cts/MediaTranscodingManagerTest.java]:[ACCESS]:[1]:method_text:[caller.    // Disable this test as Android S will only allow MediaProvider to access the API.    /])', 1), ('([1:/android/media/mediatranscoding/cts/MediaTranscodingManagerTest.java]:[SETTINGS]:[1]:method_text:[E);    }    /**     * Verify that setting null destination uri will throw exception.     */   ])', 1), ('([2:/test/java/com/android/bedstead/nene/packages/PackageTest.java]:[ACCESS]:[2]:method_text:[ntedContext();    private static final UserReference sUser = sTestApis.users().instrumented();   ])', 1), ('([2:/test/java/com/android/bedstead/nene/packages/PackageTest.java]:[ACCESS]:[2]:method_text:[lve().grantedPermissions(sUser))                .contains(ACCESS_NETWORK_STATE_PERMISSION);    }}])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[USAGE]:[1]:method_text:[Id);    }    /**     * Tests creation and manipulation of Reminders.     */    @MediumTest   ])', 1), ('([5:/android/provider/cts/calendar/CalendarTest.java]:[ACCESS]:[5]:method_text:[tResolver = getInstrumentation().getTargetContext().getContentResolver();    }    @MediumTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[ACCESS]:[1]:method_text:[es as sync adapter    /**     * Test access to the ""syncstate"" table.     */    @MediumTest   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[USAGE]:[2]:method_text:[ull);    }    /**     * Make sure all URLs are accessible with all arguments = null.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCESS]:[1]:method_text:[ull);    }    /**     * Make sure all URLs are accessible with all arguments = null.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCESS]:[1]:method_text:[o much time.//    /**//     * Make sure all URLs are accessible with a projection.//     *///   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCESS]:[1]:method_text:[lIfFailed();//    }    /**     * Make sure all URLs are accessible with a selection.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCESS]:[1]:method_text:[led();    }//    /**//     * Make sure all URLs are accessible with a selection.//     *///   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCESS]:[1]:method_text:[oo much time.//    /**//     * Make sure all URLs are accessible with an order-by.//     *///   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCESS]:[1]:method_text:[fFailed();//    }    /**     * Make sure all URLs are accessible with all arguments.     */   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCESS]:[2]:method_text:[ge="" + th.getMessage(), th);        }    }    /** Test for {@link #checkColumnAccessible} */   ])', 1), ('([8:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCESS]:[8]:method_text:[null, null, /* order by */ column);    }    /** Test for {@link #checkColumnNotAccessible} */   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCESS]:[3]:method_text:[d to detect issue."");    }    /**     * Make sure the x_ columns are not accessible.     */   ])', 1), ('([8:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCESS]:[8]:method_text:[\' NOT failed."", null);            } catch (Exception expected) {            }        }    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[SETTINGS]:[1]:method_text:[ull);    }    /**     * Make sure all URLs are accessible with all arguments = null.     */   ])', 1), ('([1:/android/graphics/drawable/cts/AnimationDrawableTest.java]:[ACCESS]:[1]:method_text:[n the same frame        verifyStoppedAnimation(THIRD_FRAME_INDEX, THIRD_FRAME_DURATION);    }   ])', 1), ('([2:/com/android/cts/device/blob/DataCleanupTest.java]:[ACCESS]:[2]:method_text:[       .isEqualTo(0);        }        addBlobHandleToResults(blobData.getBlobHandle());    }   ])', 1), ('([2:/com/android/cts/device/blob/DataCleanupTest.java]:[ACCESS]:[2]:method_text:[egistry.getArguments();        return ""1"".equals(args.getString(KEY_ALLOW_SAME_SIGNATURE));    }}])', 1), ('([2:/android/server/wm/WindowInsetsAnimationControllerTests.java]:[SETTINGS]:[2]:method_text:[ector);            awaitControl(mType);            test.run();        }    }    @Presubmit   ])', 1), ('([1:/android/view/cts/MenuItemTest.java]:[ACCESS]:[1]:method_text:[tIconTintList());        assertEquals(PorterDuff.Mode.SRC_IN, firstItem.getIconTintMode());    }}])', 1), ('([3:/android/hardware/camera2/cts/MultiViewTest.java]:[USAGE]:[3]:method_text:[ify the Bitmap     * from the first TextureView is identical to the second TextureView.     */   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[USAGE]:[1]:method_text:[    }    /*     * Verify behavior of sharing surfaces within one OutputConfiguration     */   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[ACCESS]:[1]:method_text:[atic int YUV_IMG_READER_COUNT = 3;    private final static double BITMAP_DIFF_THRESHOLD = 0.1;   ])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[USAGE]:[1]:method_text:[ge flag argument.     *     * <p>Both stream formats are mandatory for Camera2 API</p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[USAGE]:[1]:method_text:[* Test two image stream (YUV420_888 and RAW_SENSOR) capture by using ImageReader.     *     */   ])', 1), ('([3:/android/hardware/camera2/cts/ImageReaderTest.java]:[USAGE]:[3]:method_text:[* ImageReader factory method that has usage flag argument, and uses a custom usage flag.     */   ])', 1), ('([5:/android/hardware/camera2/cts/ImageReaderTest.java]:[USAGE]:[5]:method_text:[geReader with the     * ImageReader factory method that has usage flag argument.     *     */   ])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[USAGE]:[1]:method_text:[EG outputs for the same frame match for each YUV     * resolution and format supported.     */   ])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[USAGE]:[1]:method_text:[  closeDevice(id);            }        }    }    /** Tests that usage bits are preserved */   ])', 1), ('([33:/android/hardware/camera2/cts/ImageReaderTest.java]:[USAGE]:[33]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 1), ('([2:/android/hardware/camera2/cts/ImageReaderTest.java]:[ACCESS]:[2]:method_text:[ }    @Override    public void tearDown() throws Exception {        super.tearDown();    }   ])', 1), ('([3:/android/hardware/camera2/cts/ImageReaderTest.java]:[ACCESS]:[3]:method_text:[ct byte buffer, there     * is no guarantee to get an ISE for this invalid access case.     */   ])', 1), ('([4:/android/hardware/camera2/cts/ImageReaderTest.java]:[ACCESS]:[4]:method_text:[sing ImageReader.     *     * <p>Both stream formats are mandatory for Camera2 API</p>     */   ])', 1), ('([2:/android/hardware/camera2/cts/ImageReaderTest.java]:[ACCESS]:[2]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[SETTINGS]:[1]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 1), ('([5:/com/android/server/cts/GraphicsStatsValidationTest.java]:[SETTINGS]:[5]:method_text:[e[0] = """";            origRefreshRate[1] = """";        }        return origRefreshRate;    }   ])', 1), ('([1:/android/view/inputmethod/cts/PackageVisibilityTest.java]:[SETTINGS]:[1]:method_text:[return () -> TestUtils.forceStopPackage(TEST_ACTIVITY.getPackageName());    }    @AppModeFull   ])', 1), ('([1:/android/view/inputmethod/cts/PackageVisibilityTest.java]:[SETTINGS]:[1]:method_text:[TEST_ACTIVITY.getPackageName(), applicationInfoFromIme.packageName);            }        }    }}])', 1), ('([1:/android/view/cts/ViewStubTest.java]:[ACCESS]:[1]:method_text:[  viewStub.setLayoutResource(-1);        assertEquals(-1, viewStub.getLayoutResource());    }   ])', 1), ('([1:/android/view/cts/ViewStubTest.java]:[ACCESS]:[1]:method_text:[ to View.NO_ID"",                View.NO_ID, viewStub.getInflatedId());    }    @UiThreadTest   ])', 1), ('([1:/android/cts/rscpp/RSYuvTest.java]:[USAGE]:[1]:method_text:[aout, ay);        checkForErrors();    }    // Test for the API 18 conversion path with nv21   ])', 1), ('([1:/android/cts/rscpp/RSYuvTest.java]:[USAGE]:[1]:method_text:[(nativeByteAlloc);        mVerify.invoke_verify(aref, aout, ay);        checkForErrors();    }}])', 1), ('([2:/android/widget/cts/EditTextTest.java]:[ACCESS]:[2]:method_text:[s Throwable {        mActivityRule.runOnUiThread(() -> mEditText1.setSingleLine(false));    }   ])', 1), ('([1:/android/widget/cts/EditTextTest.java]:[ACCESS]:[1]:method_text:[Type.EDITABLE);        assertEquals(0, mEditText1.getText().length());    }    @UiThreadTest   ])', 1), ('([10:/android/widget/cts/EditTextTest.java]:[ACCESS]:[10]:method_text:[tDefaultMovementMethod() {            return super.getDefaultMovementMethod();        }    }   ])', 1), ('([1:/android/media/cts/MediaCasTest.java]:[ACCESS]:[1]:method_text:[th the enumeration results, and all enumerated CA system ids can     * be instantiated.     */   ])', 1), ('([1:/android/location/cts/none/LocationTest.java]:[ACCESS]:[1]:method_text:[rtEquals(1.0, location.getAccuracy(), DELTA);        assertTrue(location.hasAccuracy());    }   ])', 1), ('([1:/android/location/cts/none/LocationTest.java]:[ACCESS]:[1]:method_text:[.getVerticalAccuracyMeters(), DELTA);        assertTrue(location.hasVerticalAccuracy());    }   ])', 1), ('([1:/android/location/cts/none/LocationTest.java]:[ACCESS]:[1]:method_text:[tSpeedAccuracyMetersPerSecond(), DELTA);        assertTrue(location.hasSpeedAccuracy());    }   ])', 1), ('([1:/android/location/cts/none/LocationTest.java]:[ACCESS]:[1]:method_text:[.getBearingAccuracyDegrees(), DELTA);        assertTrue(location.hasBearingAccuracy());    }   ])', 1), ('([1:/android/location/cts/none/LocationTest.java]:[ACCESS]:[1]:method_text:[rtEquals(1.0, location.getAltitude(), DELTA);        assertTrue(location.hasAltitude());    }   ])', 1), ('([1:/android/location/cts/none/LocationTest.java]:[ACCESS]:[1]:method_text:[rtEquals(359.0, location.getBearing(), DELTA);        assertTrue(location.hasBearing());    }   ])', 1), ('([1:/android/location/cts/none/LocationTest.java]:[ACCESS]:[1]:method_text:[etExtras());        location.setExtras(null);        assertNull(location.getExtras());    }   ])', 1), ('([1:/android/location/cts/none/LocationTest.java]:[ACCESS]:[1]:method_text:[     location.setLatitude(-90);        assertEquals(-90, location.getLatitude(), DELTA);    }   ])', 1), ('([1:/android/location/cts/none/LocationTest.java]:[ACCESS]:[1]:method_text:[ location.setLongitude(-180);        assertEquals(-180, location.getLongitude(), DELTA);    }   ])', 1), ('([1:/android/location/cts/none/LocationTest.java]:[ACCESS]:[1]:method_text:[ider());        location.setProvider(null);        assertNull(location.getProvider());    }   ])', 1), ('([1:/android/location/cts/none/LocationTest.java]:[ACCESS]:[1]:method_text:[ertEquals(234.0045, location.getSpeed(), DELTA);        assertTrue(location.hasSpeed());    }   ])', 1), ('([1:/android/location/cts/none/LocationTest.java]:[ACCESS]:[1]:method_text:[me());        location.setTime(12000);        assertEquals(12000, location.getTime());    }   ])', 1), ('([1:/android/location/cts/none/LocationTest.java]:[ACCESS]:[1]:method_text:[sedRealtimeNanos(12000);        assertEquals(12000, location.getElapsedRealtimeNanos());    }   ])', 1), ('([1:/android/location/cts/none/LocationTest.java]:[ACCESS]:[1]:method_text:[anos());        assertEquals(0.0, location.getElapsedRealtimeUncertaintyNanos(), DELTA);    }   ])', 1), ('([12:/android/media/tv/tuner/cts/TunerFrontendTest.java]:[SETTINGS]:[12]:method_text:[       if (mTuner != null) {          mTuner.close();          mTuner = null;        }    }   ])', 1), ('([47:/android/media/tv/tuner/cts/TunerFrontendTest.java]:[SETTINGS]:[47]:method_text:[rtEquals(Tuner.INVALID_FRONTEND_SETTING_FREQUENCY, settings.getEndFrequency());        }    }   ])', 1), ('([19:/android/media/tv/tuner/cts/TunerFrontendTest.java]:[SETTINGS]:[19]:method_text:[rtEquals(Tuner.INVALID_FRONTEND_SETTING_FREQUENCY, settings.getEndFrequency());        }    }   ])', 1), ('([36:/android/media/tv/tuner/cts/TunerFrontendTest.java]:[SETTINGS]:[36]:method_text:[ssertEquals(DvbcFrontendSettings.BANDWIDTH_UNDEFINED, settings.getBandwidth());        }    }   ])', 1), ('([43:/android/media/tv/tuner/cts/TunerFrontendTest.java]:[SETTINGS]:[43]:method_text:[ls(false, cr.isShortFrameEnabled());        assertEquals(55, cr.getBitsPer1000Symbol());    }   ])', 1), ('([51:/android/media/tv/tuner/cts/TunerFrontendTest.java]:[SETTINGS]:[51]:method_text:[rtEquals(Tuner.INVALID_FRONTEND_SETTING_FREQUENCY, settings.getEndFrequency());        }    }   ])', 1), ('([26:/android/media/tv/tuner/cts/TunerFrontendTest.java]:[SETTINGS]:[26]:method_text:[tendSettings.GUARD_INTERVAL_PN_945_VARIOUS,                settings.getGuardInterval());    }   ])', 1), ('([11:/android/media/tv/tuner/cts/TunerFrontendTest.java]:[SETTINGS]:[11]:method_text:[{        return mContext.getPackageManager().hasSystemFeature(""android.hardware.tv.tuner"");    }}])', 1), ('([4:/android/media/cts/RingtoneManagerTest.java]:[ACCESS]:[4]:method_text:[IO_OUTPUT)                && !pm.hasSystemFeature(PackageManager.FEATURE_LEANBACK_ONLY);    }   ])', 1), ('([1:/android/media/cts/RingtoneManagerTest.java]:[ACCESS]:[1]:method_text:[I));        assertTrue(RingtoneManager.isDefault(Settings.System.DEFAULT_RINGTONE_URI));    }   ])', 1), ('([5:/android/media/cts/RingtoneManagerTest.java]:[SETTINGS]:[5]:method_text:[IO_OUTPUT)                && !pm.hasSystemFeature(PackageManager.FEATURE_LEANBACK_ONLY);    }   ])', 1), ('([6:/android/media/cts/RingtoneManagerTest.java]:[SETTINGS]:[6]:method_text:[I));        assertTrue(RingtoneManager.isDefault(Settings.System.DEFAULT_RINGTONE_URI));    }   ])', 1), ('([1:/android/devicepolicy/cts/PreferentialNetworkServiceTest.java]:[ACCESS]:[1]:method_text:[he provider that provides enterprise slice can     * see the enterprise slice requests.     */   ])', 1), ('([1:/android/devicepolicy/cts/PreferentialNetworkServiceTest.java]:[ACCESS]:[1]:method_text:[provider that provides enterprise slice cannot     * see the enterprise slice requests.     */   ])', 1), ('([1:/android/devicepolicy/cts/PreferentialNetworkServiceTest.java]:[ACCESS]:[1]:method_text:[()), offerCallback);        offerCallback.assertNoCallback();        return offerCallback;    }}])', 1), ('([1:/android/devicepolicy/cts/PreferentialNetworkServiceTest.java]:[SETTINGS]:[1]:method_text:[he provider that provides enterprise slice can     * see the enterprise slice requests.     */   ])', 1), ('([1:/android/devicepolicy/cts/PreferentialNetworkServiceTest.java]:[SETTINGS]:[1]:method_text:[provider that provides enterprise slice cannot     * see the enterprise slice requests.     */   ])', 1), ('([1:/android/devicepolicy/cts/PreferentialNetworkServiceTest.java]:[SETTINGS]:[1]:method_text:[()), offerCallback);        offerCallback.assertNoCallback();        return offerCallback;    }}])', 1), ('([55:/android/accessibilityservice/cts/AccessibilityFocusAndInputFocusSyncTest.java]:[ACCESS]:[55]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);    }    @MediumTest    @Presubmit   ])', 1), ('([12:/android/accessibilityservice/cts/AccessibilityFocusAndInputFocusSyncTest.java]:[ACCESS]:[12]:method_text:[ected focusable.        assertEquals(expected, received);    }    @MediumTest    @Presubmit   ])', 1), ('([5:/android/accessibilityservice/cts/AccessibilityFocusAndInputFocusSyncTest.java]:[ACCESS]:[5]:method_text:[(AccessibilityNodeInfo.FOCUS_ACCESSIBILITY);        assertNull(focused);    }    @MediumTest   ])', 1), ('([8:/android/accessibilityservice/cts/AccessibilityFocusAndInputFocusSyncTest.java]:[ACCESS]:[8]:method_text:[    assertTrue(rootLinearLayout.isAccessibilityFocused());    }    @MediumTest    @Presubmit   ])', 1), ('([11:/android/accessibilityservice/cts/AccessibilityFocusAndInputFocusSyncTest.java]:[ACCESS]:[11]:method_text:[   assertFalse(rootLinearLayout.isAccessibilityFocused());    }    @MediumTest    @Presubmit   ])', 1), ('([20:/android/accessibilityservice/cts/AccessibilityFocusAndInputFocusSyncTest.java]:[ACCESS]:[20]:method_text:[         workQueue.offer(child);                }            }        }    }    @Presubmit   ])', 1), ('([5:/android/accessibilityservice/cts/AccessibilityFocusAndInputFocusSyncTest.java]:[ACCESS]:[5]:method_text:[ssibility after calling setter"",                secondButton.isScreenReaderFocusable());    }   ])', 1), ('([20:/android/accessibilityservice/cts/AccessibilityFocusAndInputFocusSyncTest.java]:[ACCESS]:[20]:method_text:[rokeWidth() == strokeWidth                && manager.getAccessibilityFocusColor() == color;    }}])', 1), ('([3:/android/server/wm/UnsupportedErrorDialogTests.java]:[SETTINGS]:[3]:method_text:[}    /** Make sure the developer options apply correctly leading to the dialog being shown. */   ])', 1), ('([6:/android/server/wm/UnsupportedErrorDialogTests.java]:[SETTINGS]:[6]:method_text:[ppears if the dev option is set even if the user specifically     * set to suppress it.     */   ])', 1), ('([6:/android/server/wm/UnsupportedErrorDialogTests.java]:[SETTINGS]:[6]:method_text:[   /** Make sure the AppError dialog is not shown even if would have after the initial crash. */   ])', 1), ('([4:/android/server/wm/UnsupportedErrorDialogTests.java]:[SETTINGS]:[4]:method_text:[        }    }    /** Ensure the AppError dialog is not shown even after multiple crashes. */   ])', 1), ('([4:/android/server/wm/UnsupportedErrorDialogTests.java]:[SETTINGS]:[4]:method_text:[ponents.CRASHING_ACTIVITY);        }    }    /** Ensure the ANR dialog is also not shown. */   ])', 1), ('([11:/android/server/wm/UnsupportedErrorDialogTests.java]:[SETTINGS]:[11]:method_text:[e.getUriFor(settingName),                Settings.Secure::getInt, Settings.Secure::putInt);    }}])', 1), ('([1:/android/permission/cts/NoWakeLockPermissionTest.java]:[ACCESS]:[1]:method_text:[.     */    @AppModeFull(reason = ""Instant apps cannot access the WifiManager"")    @SmallTest   ])', 1), ('([3:/android/os/cts/AccessSerialModernTest.java]:[ACCESS]:[3]:method_text:[stricted from accessing persistent device identifiers. */public class AccessSerialModernTest {   ])', 1), ('([1:/android/os/cts/AccessSerialModernTest.java]:[ACCESS]:[1]:method_text:[etContext().getPackageName(),                android.Manifest.permission.READ_PHONE_STATE);    }}])', 1), ('([2:/android/app/usage/cts/FragmentTest.java]:[USAGE]:[2]:method_text:[ setActivityInitialTouchMode(false);        mActivity = getActivity();    }    @UiThreadTest   ])', 1), ('([1:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[ACCESS]:[1]:method_text:[mation(float alpha) {        assertTrue(alpha > 0.0f);        assertTrue(alpha < 1.0f);    }   ])', 1), ('([1:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[ACCESS]:[1]:method_text:[mation2.getAlpha(), DELTA);        assertIsRunningAnimation(transformation3.getAlpha());    }   ])', 1), ('([1:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[ACCESS]:[1]:method_text:[mation1.getAlpha(), DELTA);        assertIsRunningAnimation(transformation2.getAlpha());    }   ])', 1), ('([4:/com/android/cts/useslibrary/UsesLibraryTest.java]:[ACCESS]:[4]:method_text:[ethod.setAccessible(true);        return (boolean) isBackedByOatFileMethod.invoke(dexFile);    }}])', 1), ('([30:/android/accessibilityservice/cts/AccessibilityButtonTest.java]:[ACCESS]:[30]:method_text:[le.getService();        mButtonController = mService.getAccessibilityButtonController();    }   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityButtonTest.java]:[ACCESS]:[2]:method_text:[allback);        mButtonController.unregisterAccessibilityButtonCallback(mStubCallback);    }   ])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityButtonTest.java]:[ACCESS]:[3]:method_text:[                       Display.DEFAULT_DISPLAY);        assertNotNull(buttonController);    }   ])', 1), ('([8:/android/accessibilityservice/cts/AccessibilityButtonTest.java]:[ACCESS]:[8]:method_text:[REQUEST_ACCESSIBILITY_BUTTON)                        == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }}])', 1), ('([3:/android/cts/statsdatom/batterystats/BatteryUsageStatsTests.java]:[USAGE]:[3]:method_text:[ce());        DeviceUtils.uninstallStatsdTestApp(getDevice());        super.tearDown();    }   ])', 1), ('([5:/android/cts/statsdatom/batterystats/BatteryUsageStatsTests.java]:[USAGE]:[5]:method_text:[R,                atom -> atom.getBatteryUsageStatsSinceReset().getBatteryUsageStats());    }   ])', 1), ('([21:/android/cts/statsdatom/batterystats/BatteryUsageStatsTests.java]:[USAGE]:[21]:method_text:[etDevice().executeShellCommand(""date +%s%3N"");        return Long.parseLong(timeMs.trim());    }}])', 1), ('([2:/android/renderscript/cts/AllocationCreateAllocationsTest.java]:[USAGE]:[2]:method_text:[(mRS, e, dimX, dimY);      return Allocation.createAllocations(mRS, t, usage, numAlloc);    }   ])', 1), ('([3:/android/renderscript/cts/AllocationCreateAllocationsTest.java]:[USAGE]:[3]:method_text:[ay != null);        for (Allocation a : allocArray) {            a.destroy();        }    }   ])', 1), ('([5:/android/renderscript/cts/AllocationCreateAllocationsTest.java]:[USAGE]:[5]:method_text:[ay != null);        for (Allocation a : allocArray) {            a.destroy();        }    }   ])', 1), ('([7:/android/renderscript/cts/AllocationCreateAllocationsTest.java]:[USAGE]:[7]:method_text:[);        }        for (Allocation a : allocArray) {            a.destroy();        }    }   ])', 1), ('([7:/android/renderscript/cts/AllocationCreateAllocationsTest.java]:[USAGE]:[7]:method_text:[llocation a : allocArray) {            a.destroy();        }        inputAlloc.destroy();    }}])', 1), ('([3:/android/cts/statsdatom/appstart/AppStartStatsTests.java]:[SETTINGS]:[3]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ])', 1), ('([4:/android/telephony/ims/cts/EabControllerTest.java]:[ACCESS]:[4]:method_text:[imes--;        } while (retryTimes > 0 && Instant.now().getEpochSecond() < expirationTime);    }}])', 1), ('([1:/android/graphics/cts/MatchContentFrameRateTest.java]:[SETTINGS]:[1]:method_text:[te);            mDisplayManager.setShouldAlwaysRespectAppRequestedMode(false);        }    }   ])', 1), ('([1:/android/media/cts/AdaptivePlaybackTest.java]:[ACCESS]:[1]:method_text:[it is reusable    }    public boolean needsToRunInSeparateThread() {        return false;    }}])', 1), ('([1:/android/security/cts/Poc18_02.java]:[USAGE]:[1]:method_text:[    ""flags=.{1,15} tags=\\\\[A{256,}\\\\]"", logcatOutput);    }    /**     *  b/65853158     */   ])', 1), ('([6:/android/view/accessibility/cts/AccessibilityActionTest.java]:[ACCESS]:[6]:method_text:[vate static final String LABEL = ""label"";    /**     * Tests parcelling of the class.     */   ])', 1), ('([4:/android/view/accessibility/cts/AccessibilityActionTest.java]:[ACCESS]:[4]:method_text:[tEquals(LABEL, result.getLabel());    }    /**     * Tests constructor of the class.     */   ])', 1), ('([2:/android/view/accessibility/cts/AccessibilityActionTest.java]:[ACCESS]:[2]:method_text:[als(ACTION_ID, systemAction.getId());        assertEquals(LABEL, systemAction.getLabel());    }}])', 1), ('([2:/com/android/cts/appsearch/app/AppSearchSessionPlatformCtsTest.java]:[USAGE]:[2]:method_text:[      mDb.setSchema(new SetSchemaRequest.Builder().setForceOverride(true).build()).get();    }   ])', 1), ('([4:/android/text/cts/BoringLayoutTest.java]:[SETTINGS]:[4]:method_text:[ToBitmap(layoutWithPrecomputed);        assertTrue(msg, resultBMP.sameAs(expectedBMP));    }   ])', 1), ('([1:/android/bluetooth/cts/ScanCallbackTest.java]:[SETTINGS]:[1]:method_text:[canner();    private BleScanCallback mMockScanCallback = new BleScanCallback();    @SmallTest   ])', 1), ('([1:/android/bluetooth/cts/ScanCallbackTest.java]:[SETTINGS]:[1]:method_text:[kScanner.startScan(new ScanSettings.Builder().build(), mMockScanCallback);    }    @SmallTest   ])', 1), ('([4:/android/bluetooth/cts/ScanCallbackTest.java]:[SETTINGS]:[4]:method_text:[N_TYPE_BATCH;        mMockScanner.startScan(settings, mMockScanCallback);    }    @SmallTest   ])', 1), ('([8:/android/bluetooth/cts/ScanCallbackTest.java]:[SETTINGS]:[8]:method_text:[ != SCAN_TYPE_FAIL) {                fail(""scan should not fail"");            }        }    }}])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_MediaTest.java]:[ACCESS]:[2]:method_text:[SS_MEDIA_LOCATION"");        } catch (UnsupportedOperationException expected) {        }    }   ])', 1), ('([1:/android/app/cts/WallpaperInfoTest.java]:[SETTINGS]:[1]:method_text:[NotNull(wallpaperInfo.loadIcon(pm));        assertNotNull(wallpaperInfo.loadThumbnail(pm));    }}])', 1), ('([1:/android/text/util/cts/Rfc822TokenTest.java]:[ACCESS]:[1]:method_text:[etName());        rfc822Token.setName(null);        assertNull(rfc822Token.getName());    }   ])', 1), ('([1:/android/text/util/cts/Rfc822TokenTest.java]:[ACCESS]:[1]:method_text:[());        rfc822Token.setComment(null);        assertNull(rfc822Token.getComment());    }   ])', 1), ('([1:/android/text/util/cts/Rfc822TokenTest.java]:[ACCESS]:[1]:method_text:[());        rfc822Token.setAddress(null);        assertNull(rfc822Token.getAddress());    }   ])', 1), ('([1:/android/cts/statsdatom/net/BytesTransferredTest.java]:[USAGE]:[1]:method_text:[mCtsBuild = buildInfo;    }    // TODO: inline the contents of doTestUsageBytesTransferEnable   ])', 1), ('([3:/android/cts/statsdatom/net/BytesTransferredTest.java]:[USAGE]:[3]:method_text:[riginal default value.        setNetworkStatsCombinedSubTypeEnabled(oldSubtypeCombined);    }   ])', 1), ('([8:/android/cts/statsdatom/net/BytesTransferredTest.java]:[USAGE]:[8]:method_text:[tings put global netstats_combine_subtype_enabled ""                + (enable ? ""1"" : ""0""));    }}])', 1), ('([2:/android/cts/statsdatom/net/BytesTransferredTest.java]:[SETTINGS]:[2]:method_text:[tings put global netstats_combine_subtype_enabled ""                + (enable ? ""1"" : ""0""));    }}])', 1), ('([1:/android/util/cts/ArrayMapTest.java]:[ACCESS]:[1]:method_text:[rationException expected) {}    }    // http://b/32294038, Test ArrayMap.entrySet().toArray()   ])', 1)]"	"https://developer.android.com"	""	"[('ACCESS', 139), ('SETTINGS', 59), ('USAGE', 30)]"	"[('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected CtsCameraTestCases]', 3), ('[android.accessibilityservice.cts.AccessibilitySettingsTest testAccessibilitySettingsIntentHandled CtsAccessibilityServiceTestCases]', 2), ('[com.android.server.cts.UsbIncidentTest testUsbServiceDump CtsIncidentHostTestCases]', 2), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testIsWalletFeatureAvailableWhenDeviceLocked_checksSecureSettings CtsQuickAccessWalletTestCases]', 2), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testCreateWalletSettingsIntent_usesSettingsActionToFindAppropriateActivity CtsQuickAccessWalletTestCases]', 2), ('[android.media.mediatranscoding.cts.MediaTranscodingManagerTest dropShellPermissionIdentity CtsMediaTranscodingTestCases]', 2), ('[android.media.cts.RingtoneManagerTest RingtoneManagerTest CtsMediaTestCases]', 2), ('[android.media.cts.RingtoneManagerTest testAccessMethods CtsMediaTestCases]', 2), ('[android.devicepolicy.cts.PreferentialNetworkServiceTest TestApis CtsDevicePolicyTestCases]', 2), ('[android.devicepolicy.cts.PreferentialNetworkServiceTest setPreferentialNetworkServiceEnabled_enableService_issueRequest CtsDevicePolicyTestCases]', 2), ('[android.devicepolicy.cts.PreferentialNetworkServiceTest setPreferentialNetworkServiceEnabled_disableService_noIssueRequest CtsDevicePolicyTestCases]', 2), ('[android.cts.statsdatom.net.BytesTransferredTest testBytesTransferByTagAndMetered CtsStatsdAtomHostTestCases]', 2), ('[android.widget.cts.RadioButtonTest testAccessChecked CtsWidgetTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.view.animation.cts.LayoutAnimationControllerTest testAccessOrder CtsViewTestCases]', 1), ('[android.view.animation.cts.LayoutAnimationControllerTest testAccessDelay CtsViewTestCases]', 1), ('[android.view.animation.cts.LayoutAnimationControllerTest testAccessAnimation CtsViewTestCases]', 1), ('[android.view.animation.cts.LayoutAnimationControllerTest testAccessInterpolator CtsViewTestCases]', 1), ('[com.android.server.cts.IncidentdTest isEmpty CtsIncidentHostTestCases]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testNetworkLoggingDelegate CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest removeTestUsers CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testAlwaysOnVpnUnsupportedPackageReplaced CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testSetSystemSetting CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testWifiMacAddress CtsDevicePolicyManagerTestCases]', 1), ('[android.permission.cts.OneTimePermissionTest testStickyServiceMaintainsPermissionOnRestart CtsPermissionTestCases]', 1), ('[android.graphics.drawable.cts.DrawableContainerTest testAccessConstantState CtsGraphicsTestCases]', 1), ('[android.view.inputmethod.cts.EditTextImeSupportTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.EditTextImeSupportTest testSetTextTriggersRestartInput CtsInputMethodTestCases]', 1), ('[android.view.cts.MotionEventTest testAccessAction CtsViewTestCases]', 1), ('[android.view.cts.MotionEventTest testAccessEdgeFlags CtsViewTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_ContactsTest testContactUpdate_usageStats CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_ContactsTest testContactUpdateDelete_usageStats_visibilityInWhere CtsContactsProviderTestCases]', 1), ('[android.bluetooth.cts.AdvertiseSettingsTest testDefaultSettings CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseSettingsTest testDescribeContents CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseSettingsTest testReadWriteParcel CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseSettingsTest testIllegalTimeout CtsBluetoothTestCases]', 1), ('[android.os.cts.AccessSerialLegacyTest testAccessSerialNoPermissionNeeded None]', 1), ('[android.text.cts.ClipboardManagerTest testAccessText CtsTextTestCases]', 1), ('[android.media.cts.DecoderTestXheAac testDecodeUsacSamplingRatesM4a CtsMediaTestCases]', 1), ('[android.security.cts.IsolatedProcessTest testGetCachedServicesFromIsolatedService CtsSecurityTestCases]', 1), ('[android.security.cts.IsolatedProcessTest testGetServiceFromIsolatedService CtsSecurityTestCases]', 1), ('[android.graphics.cts.SetFrameRateTest adoptShellPermissionIdentity CtsGraphicsTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testIsWalletServiceAvailable_returnsFalseIfNoServiceAvailable CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testGetWalletCards_success CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testGetWalletCards_failsIfNoServiceAvailable CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testGetWalletCards_failsIfServiceDoesNotRequirePermission CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testGetWalletCards_invalidCard_nullId_fails CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testGetWalletCards_invalidCard_nullImage_fails CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testGetWalletCards_invalidCard_nullContentDesc_fails CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testGetWalletCards_invalidCard_nullPendingIntent_fails CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testGetWalletCards_invalidResponse_tooManyCards_fails CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testGetWalletCards_zeroCards_isAllowed CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testGetWalletCards_invalidResponse_nullCards_fails CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testGetWalletCards_invalidResponse_negativeIndex_fails CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testGetWalletCards_invalidResponse_indexOutOfBounds_fails CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testGetWalletCards_serviceResponseWithError_success CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testSelectWalletCard_success CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testNotifyWalletDismissed_success CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testAddListener_sendEvent_success CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testRemoveListener_sendEvent_shouldNotBeDelivered CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testDisconnect_shouldClearListenersAndDisconnect CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testConnect_disconnect_reconnect_shouldWork CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testCreateWalletIntent_parsesXmlAndUsesCorrectIntentAction CtsQuickAccessWalletTestCases]', 1), ('[android.media.mediatranscoding.cts.MediaTranscodingManagerTest testCancelTranscoding CtsMediaTranscodingTestCases]', 1), ('[test.java.com.android.bedstead.nene.packages.PackageTest TestApis None]', 1), ('[test.java.com.android.bedstead.nene.packages.PackageTest grantedPermission_includesKnownInstallPermission None]', 1), ('[android.provider.cts.calendar.CalendarTest testAttendees CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testCalendarUpdateAsApp CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_AllUriTest testNoHiddenColumns CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_AllUriTest testSelectWithProjection CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_AllUriTest testSelectWithSelection CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_AllUriTest testSelectWithSelectionUsingColumns CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_AllUriTest testSelectWithSortOrder CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_AllUriTest testNonSelect CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_AllUriTest testCheckColumnAccessible CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_AllUriTest testCheckColumnNotAccessible CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_AllUriTest testProhibitedColumns CtsContactsProviderTestCases]', 1), ('[android.graphics.drawable.cts.AnimationDrawableTest testAccessOneShot CtsGraphicsTestCases]', 1), ('[com.android.cts.device.blob.DataCleanupTest testCommitBlob None]', 1), ('[com.android.cts.device.blob.DataCleanupTest testRecommitBlob None]', 1), ('[android.server.wm.WindowInsetsAnimationControllerTests setUpWindowInsetsAnimationControllerTests CtsWindowManagerDeviceTestCases]', 1), ('[android.view.cts.MenuItemTest testAccessIconTint CtsViewTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testTextureImageWriterReaderOperation CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testYuvAndJpeg CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testYuvAndJpegWithUsageFlag CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testImageReaderYuvAndRaw CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testImageReaderPrivateWithProtectedUsageFlag CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testImageReaderYuvAndRawWithUsageFlag CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testDiscardFreeBuffers CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testLongProcessingRepeatingFlexibleYuv CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testInvalidAccessTest CtsCameraTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testJankyDrawFrame CtsIncidentHostTestCases]', 1), ('[android.view.inputmethod.cts.PackageVisibilityTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.PackageVisibilityTest testTargetPackageIsVisibleFromImeInstant CtsInputMethodTestCases]', 1), ('[android.view.cts.ViewStubTest testAccessLayoutResource CtsViewTestCases]', 1), ('[android.view.cts.ViewStubTest testAccessInflatedId CtsViewTestCases]', 1), ('[android.cts.rscpp.RSYuvTest test_YV12 CtsRsCppTestCases]', 1), ('[android.cts.rscpp.RSYuvTest test_NV21 CtsRsCppTestCases]', 1), ('[android.widget.cts.EditTextTest testAccessText CtsWidgetTestCases]', 1), ('[android.widget.cts.EditTextTest testOnInitializeA11yNodeInfo_hasAccessibilityActions CtsWidgetTestCases]', 1), ('[android.media.cts.MediaCasTest adoptShellPermissionIdentity CtsMediaTestCases]', 1), ('[android.location.cts.none.LocationTest testAccessAccuracy CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.LocationTest testAccessVerticalAccuracy CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.LocationTest testAccessSpeedAccuracy CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.LocationTest testAccessBearingAccuracy CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.LocationTest testAccessAltitude CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.LocationTest testAccessBearing CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.LocationTest testAccessExtras CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.LocationTest testAccessLatitude CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.LocationTest testAccessLongitude CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.LocationTest testAccessProvider CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.LocationTest testAccessSpeed CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.LocationTest testAccessTime CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.LocationTest testAccessElapsedRealtime CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.LocationTest testAccessElapsedRealtimeUncertaintyNanos CtsLocationNoneTestCases]', 1), ('[android.media.tv.tuner.cts.TunerFrontendTest adoptShellPermissionIdentity CtsTvTestCases]', 1), ('[android.media.tv.tuner.cts.TunerFrontendTest testAnalogFrontendSettings CtsTvTestCases]', 1), ('[android.media.tv.tuner.cts.TunerFrontendTest testAtsc3FrontendSettings CtsTvTestCases]', 1), ('[android.media.tv.tuner.cts.TunerFrontendTest testAtscFrontendSettings CtsTvTestCases]', 1), ('[android.media.tv.tuner.cts.TunerFrontendTest testDvbcFrontendSettings CtsTvTestCases]', 1), ('[android.media.tv.tuner.cts.TunerFrontendTest testDvbsFrontendSettings CtsTvTestCases]', 1), ('[android.media.tv.tuner.cts.TunerFrontendTest testDvbtFrontendSettings CtsTvTestCases]', 1), ('[android.media.tv.tuner.cts.TunerFrontendTest testIsdbs3FrontendSettings CtsTvTestCases]', 1), ('[android.media.tv.tuner.cts.TunerFrontendTest testIsdbsFrontendSettings CtsTvTestCases]', 1), ('[android.media.tv.tuner.cts.TunerFrontendTest testIsdbtFrontendSettings CtsTvTestCases]', 1), ('[android.media.tv.tuner.cts.TunerFrontendTest testDtmbFrontendSettings CtsTvTestCases]', 1), ('[android.media.tv.tuner.cts.TunerFrontendTest testFrontendInfo CtsTvTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityFocusAndInputFocusSyncTest TestName CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityFocusAndInputFocusSyncTest testFindAccessibilityFocus CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityFocusAndInputFocusSyncTest testInitialStateNoAccessibilityFocus CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityFocusAndInputFocusSyncTest testActionAccessibilityFocus CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityFocusAndInputFocusSyncTest testActionClearAccessibilityFocus CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityFocusAndInputFocusSyncTest testOnlyOneNodeHasAccessibilityFocus CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityFocusAndInputFocusSyncTest testScreenReaderFocusableAttribute_reportedToAccessibility CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityFocusAndInputFocusSyncTest testChangeFocusColor_expectedColorIsChanged CtsAccessibilityServiceTestCases]', 1), ('[android.server.wm.UnsupportedErrorDialogTests testDevSettingOverride CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.UnsupportedErrorDialogTests testDevSettingPrecedence CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.UnsupportedErrorDialogTests testFirstCrashDialogNotShown CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.UnsupportedErrorDialogTests testRepeatedCrashDialogNotShown CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.UnsupportedErrorDialogTests testAnrIsNotShown CtsWindowManagerDeviceTestCases]', 1), ('[android.os.cts.AccessSerialModernTest testAccessSerialPermissionNeeded None]', 1), ('[android.app.usage.cts.FragmentTest FragmentTest CtsUsageStatsTestCases]', 1), ('[android.view.animation.cts.GridLayoutAnimationControllerTest testAccessDelay CtsViewTestCases]', 1), ('[android.view.animation.cts.GridLayoutAnimationControllerTest testAccessDirection CtsViewTestCases]', 1), ('[android.view.animation.cts.GridLayoutAnimationControllerTest testAccessDirectionPriority CtsViewTestCases]', 1), ('[com.android.cts.useslibrary.UsesLibraryTest testDuplicateLibrary None]', 1), ('[android.accessibilityservice.cts.AccessibilityButtonTest testCallbackRegistrationUnregistration_serviceDoesNotCrash CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityButtonTest testGetAccessibilityButtonControllerByDisplayId_NotReturnNull CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityButtonTest testUpdateRequestAccessibilityButtonFlag_targetSdkGreaterThanQ_ignoresUpdate CtsAccessibilityServiceTestCases]', 1), ('[android.cts.statsdatom.batterystats.BatteryUsageStatsTests isNotNull CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.batterystats.BatteryUsageStatsTests testBatteryUsageStatsSinceReset CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.batterystats.BatteryUsageStatsTests testBatteryUsageStatsSinceResetUsingPowerProfileModel CtsStatsdAtomHostTestCases]', 1), ('[android.renderscript.cts.AllocationCreateAllocationsTest testCreateAllocations CtsRenderscriptTestCases]', 1), ('[android.renderscript.cts.AllocationCreateAllocationsTest testCreateAllocations_USAGE_IO_INPUT CtsRenderscriptTestCases]', 1), ('[android.renderscript.cts.AllocationCreateAllocationsTest testGetProperties CtsRenderscriptTestCases]', 1), ('[android.renderscript.cts.AllocationCreateAllocationsTest testMultipleIoReceive_USAGE_IO_INPUT CtsRenderscriptTestCases]', 1), ('[android.cts.statsdatom.appstart.AppStartStatsTests isNotNull CtsStatsdAtomHostTestCases]', 1), ('[android.telephony.ims.cts.EabControllerTest testRequestExpiredAvailabilities CtsTelephonyTestCases]', 1), ('[android.media.cts.AdaptivePlaybackTest testH263_flushConfigureDrc CtsMediaTestCases]', 1), ('[android.security.cts.Poc18_02 testPocCVE_2017_13232 CtsSecurityBulletinHostTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityActionTest testParcel CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityActionTest testConstructor CtsAccessibilityTestCases]', 1), ('[android.text.cts.BoringLayoutTest testDraw CtsTextTestCases]', 1), ('[android.bluetooth.cts.ScanCallbackTest testScanSuccess CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanCallbackTest testBatchScans CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanCallbackTest testScanFail CtsBluetoothTestCases]', 1), ('[android.provider.cts.media.MediaStore_Images_MediaTest testLocationRedaction CtsProviderTestCases]', 1), ('[android.app.cts.WallpaperInfoTest test CtsAppTestCases]', 1), ('[android.text.util.cts.Rfc822TokenTest testAccessName CtsTextTestCases]', 1), ('[android.text.util.cts.Rfc822TokenTest testAccessComment CtsTextTestCases]', 1), ('[android.text.util.cts.Rfc822TokenTest testAccessAddress CtsTextTestCases]', 1), ('[android.cts.statsdatom.net.BytesTransferredTest isNotNull CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.net.BytesTransferredTest testDataUsageBytesTransfer CtsStatsdAtomHostTestCases]', 1), ('[android.util.cts.ArrayMapTest testDuplicateKeys CtsUtilTestCases]', 1)]"
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-14-1"	"3.2.3.5/C-14-1"	"03020305.671401"	"""C-14-1] MUST fully implement the [`AutofillService`](https://developer.android.com/reference/android/service/autofill/AutofillService.html) and [`AutofillManager`](https://developer.android.com/reference/android/view/autofill/AutofillManager.html) APIs and honor the [android.settings.REQUEST_SET_AUTOFILL_SERVICE](https://developer.android.com/reference/android/provider/Settings.html#ACTION_REQUEST_SET_AUTOFILL_SERVICE) intent to show a default app settings menu to enable and disable autofill and change the default autofill service for the user.  If device implementations include a pre-installed app or wish to allow third-party apps to access the usage statistics, they:  """	""	""	"REQUEST_SET_AUTOFILL_SERVICE ACTION_REQUEST_SET_AUTOFILL_SERVICE Settings.html AutofillService.html AutofillManager.html android.settings.REQUEST"	""	""	""	""	"[('android.autofillservice.cts.servicebehavior.SettingsIntentTest', 2), ('android.content.cts.AvailableIntentsTest', 2)]"	""	"[('CtsAutoFillServiceTestCases', 2), ('CtsContentTestCases', 2)]"	""	""	""	""	"android.content.cts.AvailableIntentsTest"	""	"CtsContentTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 2)]"	"[('(1,ACTION_REQUEST_SET_AUTOFILL_SERVICE,/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java)', 1), ('(1,REQUEST_SET_AUTOFILL_SERVICE,/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java)', 1), ('(1,ACTION_REQUEST_SET_AUTOFILL_SERVICE,/android/content/cts/AvailableIntentsTest.java)', 1), ('(1,REQUEST_SET_AUTOFILL_SERVICE,/android/content/cts/AvailableIntentsTest.java)', 1)]"	"[('([1:/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java]:[ACTION_REQUEST_SET_AUTOFILL_SERVICE]:[1]:method_text:[FLAG_ACTIVITY_NEW_TASK)                .setData(Uri.parse(""package:"" + Helper.MY_PACKAGE));    }}])', 1), ('([1:/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java]:[REQUEST_SET_AUTOFILL_SERVICE]:[1]:method_text:[FLAG_ACTIVITY_NEW_TASK)                .setData(Uri.parse(""package:"" + Helper.MY_PACKAGE));    }}])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_REQUEST_SET_AUTOFILL_SERVICE]:[1]:method_text:[  .setData(Uri.parse(""package:android.content.cts""));        assertCanBeHandled(intent);    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[REQUEST_SET_AUTOFILL_SERVICE]:[1]:method_text:[  .setData(Uri.parse(""package:android.content.cts""));        assertCanBeHandled(intent);    }   ])', 1)]"	"https://developer.android.com"	""	"[('ACTION_REQUEST_SET_AUTOFILL_SERVICE', 2), ('REQUEST_SET_AUTOFILL_SERVICE', 2)]"	"[('[android.autofillservice.cts.servicebehavior.SettingsIntentTest testWarningShown_userRejectsByTappingBack CtsAutoFillServiceTestCases]', 2), ('[android.content.cts.AvailableIntentsTest testRequestSetAutofillServiceIntent CtsContentTestCases]', 2)]"
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-10-1"	"3.2.3.5/C-10-1"	"03020305.671001"	"""C-10-1] MUST provide a user interface in the settings, that handles the [`Settings.ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS`](https://developer.android.com/reference/android/provider/Settings.html#ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS) intent, allowing users to add applications to or remove applications from the allow list.  If device implementations do not provide the data saver mode, they:  """	""	""	"Settings.ACTION Settings.html ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET TINGS"	""	"TINGS"	""	""	"[('android.content.cts.AvailableIntentsTest', 14), ('com.android.cts.managedprofile.SettingsIntentsTest', 6), ('android.app.role.cts.RoleManagerTest', 4), ('android.systemintents.cts.TestManageOverlayPermissionIntents', 3), ('android.systemintents.cts.TestSystemIntents', 2), ('android.accessibilityservice.cts.AccessibilitySettingsTest', 1), ('android.voicesettings.cts.ZenModeTest', 1), ('android.voicesettings.cts.AirplaneModeTest', 1), ('android.app.usage.cts.UsageStatsTest', 1), ('com.android.cts.packageinstaller.ManualPackageInstallTest', 1), ('com.android.cts.storageapp.StorageTest', 1), ('android.autofillservice.cts.servicebehavior.SettingsIntentTest', 1), ('android.provider.cts.settings.SettingsTest', 1), ('android.voicesettings.cts.BatterySaverModeTest', 1), ('android.security.cts.CVE_2021_0481.DeviceTest', 1), ('android.location.cts.fine.ScanningSettingsTest', 1), ('com.google.android.cts.deviceowner.DeviceOwnerTest', 1), ('android.permission.cts.LocationAccessCheckTest', 1), ('com.android.cts.intent.sender.SuspendPackageTest', 1), ('android.alarmmanager.cts.ExactAlarmsTest', 1), ('com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity', 1), ('android.provider.cts.SettingsPanelTest', 1)]"	"[('getPackageManager', 7), ('setUp', 6), ('getInstrumentation', 5), ('customSetup', 3), ('getContext', 3), ('create', 2), ('getName', 2), ('size', 2), ('getWho', 1), ('getSimpleName', 1), ('getPackage', 1), ('setup', 1), ('getTargetContext', 1)]"	"[('CtsContentTestCases', 14), ('CtsSystemIntentTestCases', 5), ('CtsRoleTestCases', 4), ('CtsVoiceSettingsTestCases', 3), ('CtsProviderTestCases', 2), ('CtsAccessibilityServiceTestCases', 1), ('CtsUsageStatsTestCases', 1), ('CtsAutoFillServiceTestCases', 1), ('CtsLocationFineTestCases', 1), ('CtsPermissionTestCases', 1), ('CtsAlarmManagerTestCases', 1)]"	""	""	""	""	"android.app.role.cts.RoleManagerTest"	"getPackageManager"	"CtsRoleTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 14), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/SettingsIntentsTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/role/src/android/app/role/cts/RoleManagerTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestManageOverlayPermissionIntents.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestSystemIntents.java', 2), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilitySettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/voicesettings/src/android/voicesettings/cts/ZenModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/voicesettings/src/android/voicesettings/cts/AirplaneModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageStatsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/PackageInstaller/src/com/android/cts/packageinstaller/ManualPackageInstallTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/StorageApp/src/com/android/cts/storageapp/StorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/settings/SettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/voicesettings/src/android/voicesettings/cts/BatterySaverModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/test-apps/CVE-2021-0481/src/android/security/cts/CVE_2021_0481/DeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_fine/src/android/location/cts/fine/ScanningSettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/settings/app/DeviceOwnerApp/src/com/google/android/cts/deviceowner/DeviceOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/LocationAccessCheckTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/SuspendPackageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/ExactAlarmsTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/SettingsPanelTest.java', 1)]"	"[('(2,Settings.ACTION,/android/accessibilityservice/cts/AccessibilitySettingsTest.java)', 1), ('(1,Settings.ACTION,/android/voicesettings/cts/ZenModeTest.java)', 1), ('(1,Settings.ACTION,/android/voicesettings/cts/AirplaneModeTest.java)', 1), ('(1,Settings.ACTION,/android/app/usage/cts/UsageStatsTest.java)', 1), ('(1,Settings.ACTION,/com/android/cts/packageinstaller/ManualPackageInstallTest.java)', 1), ('(1,Settings.ACTION,/com/android/cts/storageapp/StorageTest.java)', 1), ('(1,Settings.ACTION,/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java)', 1), ('(1,Settings.ACTION,/android/provider/cts/settings/SettingsTest.java)', 1), ('(1,Settings.ACTION,/android/voicesettings/cts/BatterySaverModeTest.java)', 1), ('(14,Settings.ACTION,/android/content/cts/AvailableIntentsTest.java)', 1), ('(1,Settings.ACTION,/android/security/cts/CVE_2021_0481/DeviceTest.java)', 1), ('(1,Settings.ACTION,/android/location/cts/fine/ScanningSettingsTest.java)', 1), ('(1,ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET,/android/systemintents/cts/TestSystemIntents.java)', 1), ('(9,Settings.ACTION,/android/systemintents/cts/TestSystemIntents.java)', 1), ('(6,Settings.ACTION,/com/android/cts/managedprofile/SettingsIntentsTest.java)', 1), ('(1,Settings.ACTION,/com/google/android/cts/deviceowner/DeviceOwnerTest.java)', 1), ('(1,Settings.ACTION,/android/permission/cts/LocationAccessCheckTest.java)', 1), ('(4,Settings.ACTION,/android/systemintents/cts/TestManageOverlayPermissionIntents.java)', 1), ('(1,Settings.ACTION,/com/android/cts/intent/sender/SuspendPackageTest.java)', 1), ('(3,Settings.ACTION,/android/alarmmanager/cts/ExactAlarmsTest.java)', 1), ('(1,Settings.ACTION,/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java)', 1), ('(1,Settings.ACTION,/android/provider/cts/SettingsPanelTest.java)', 1), ('(4,Settings.ACTION,/android/app/role/cts/RoleManagerTest.java)', 1)]"	"[('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[  .setData(Uri.parse(""package:android.content.cts""));        assertCanBeHandled(intent);    }   ])', 2), ('([2:/android/accessibilityservice/cts/AccessibilitySettingsTest.java]:[Settings.ACTION]:[2]:method_text:[ACTION_ACCESSIBILITY_SETTINGS"";        assertTrue(message, !resolvedActivities.isEmpty());    }}])', 1), ('([1:/android/voicesettings/cts/ZenModeTest.java]:[Settings.ACTION]:[1]:method_text:[vate static final int ZEN_MODE_IS_OFF = 0;    private static final int ZEN_MODE_IS_ALARMS = 3;   ])', 1), ('([1:/android/voicesettings/cts/AirplaneModeTest.java]:[Settings.ACTION]:[1]:method_text:[re(FEATURE_VOICE_RECOGNIZERS);        Log.v(TAG, ""setUp(): mHasFeature="" + mHasFeature);    }   ])', 1), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[Settings.ACTION]:[1]:method_text:[   Thread.sleep(500);    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([1:/com/android/cts/packageinstaller/ManualPackageInstallTest.java]:[Settings.ACTION]:[1]:method_text:[       .res(settingsPackageName + "":id/"" + resId)                .pkg(settingsPackageName);    }}])', 1), ('([1:/com/android/cts/storageapp/StorageTest.java]:[Settings.ACTION]:[1]:method_text:[(new UiSelector().text(""OK"")).click();    }    /**     * Measure ourselves manually.     */   ])', 1), ('([1:/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java]:[Settings.ACTION]:[1]:method_text:[FLAG_ACTIVITY_NEW_TASK)                .setData(Uri.parse(""package:"" + Helper.MY_PACKAGE));    }}])', 1), ('([1:/android/provider/cts/settings/SettingsTest.java]:[Settings.ACTION]:[1]:method_text:[              intent, PackageManager.MATCH_DEFAULT_ONLY);        assertTrue(ri != null);    }   ])', 1), ('([1:/android/voicesettings/cts/BatterySaverModeTest.java]:[Settings.ACTION]:[1]:method_text:[  mHasFeature = mContext.getPackageManager().hasSystemFeature(FEATURE_VOICE_RECOGNIZERS);    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[(new Intent(Settings.ACTION_SETTINGS));    }    /**     * Test add event in calendar     */   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[            assertCanBeHandled(new Intent(Settings.ACTION_FINGERPRINT_ENROLL));        }    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[         assertCanBeHandled(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));        }    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[   assertCanBeHandled(new Intent(Settings.ACTION_PICTURE_IN_PICTURE_SETTINGS));        }    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[;        }        assertCanBeHandled(new Intent(Settings.ACTION_REQUEST_MANAGE_MEDIA));    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[   assertCanBeHandled(new Intent(Settings.ACTION_MANAGE_CROSS_PROFILE_ACCESS));        }    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[n;        }        assertCanBeHandled(new Intent(Settings.ACTION_APP_SEARCH_SETTINGS));    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[          assertCanBeHandled(new Intent(Settings.ACTION_NFC_PAYMENT_SETTINGS));        }    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[     intent.setData(Uri.parse(QRCODE));            assertCanBeHandled(intent);        }    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[tent(Settings.ACTION_REQUEST_ENABLE_CONTENT_CAPTURE);        assertCanBeHandled(intent);    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[t = new Intent(Settings.ACTION_VOICE_INPUT_SETTINGS);        assertCanBeHandled(intent);    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[orksIntent() {        assertCanBeHandled(new Intent(Settings.ACTION_WIFI_ADD_NETWORKS));    }   ])', 1), ('([1:/android/security/cts/CVE_2021_0481/DeviceTest.java]:[Settings.ACTION]:[1]:method_text:[ + ""__"")) != 0){            return ret;          }        }      }    }    return ret;  }}])', 1), ('([1:/android/location/cts/fine/ScanningSettingsTest.java]:[Settings.ACTION]:[1]:method_text:[ngKey);        assertEquals(checked, Settings.Global.getInt(resolver, settingKey, 0) == 1);    }}])', 1), ('([1:/android/systemintents/cts/TestSystemIntents.java]:[ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET]:[1]:method_text:[etInstrumentation().getContext();        mPackageManager = mContext.getPackageManager();    }   ])', 1), ('([9:/android/systemintents/cts/TestSystemIntents.java]:[Settings.ACTION]:[9]:method_text:[etInstrumentation().getContext();        mPackageManager = mContext.getPackageManager();    }   ])', 1), ('([1:/com/android/cts/managedprofile/SettingsIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[r.resolveActivity(                new Intent(Settings.ACTION_SETTINGS), 0 /* flags */));    }   ])', 1), ('([1:/com/android/cts/managedprofile/SettingsIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[olveActivity(                new Intent(Settings.ACTION_SYNC_SETTINGS), 0 /* flags */));    }   ])', 1), ('([1:/com/android/cts/managedprofile/SettingsIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[ivity(                new Intent(Settings.ACTION_APPLICATION_SETTINGS), 0 /* flags */));    }   ])', 1), ('([1:/com/android/cts/managedprofile/SettingsIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[Activity(                new Intent(Settings.ACTION_SECURITY_SETTINGS), 0 /* flags */));    }   ])', 1), ('([1:/com/android/cts/managedprofile/SettingsIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[                    new Intent(Settings.ACTION_NFC_SETTINGS), 0 /* flags */));        }    }   ])', 1), ('([1:/com/android/cts/managedprofile/SettingsIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[vity(                new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS), 0 /* flags */));    }}])', 1), ('([1:/com/google/android/cts/deviceowner/DeviceOwnerTest.java]:[Settings.ACTION]:[1]:method_text:[evice owner and has work policy info, then we should have a Privacy     * entry for it.     */   ])', 1), ('([1:/android/permission/cts/LocationAccessCheckTest.java]:[Settings.ACTION]:[1]:method_text:[rtActivity(intent);        runLocationCheck();        assertNull(getNotification(false));    }}])', 1), ('([1:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[Settings.ACTION]:[1]:method_text:[nt            }        });        // ActivityNotFoundException or no exception thrown    }   ])', 1), ('([1:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[Settings.ACTION]:[1]:method_text:[   assertTrue(e instanceof ActivityNotFoundException || e instanceof SecurityException);    }   ])', 1), ('([2:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[Settings.ACTION]:[2]:method_text:[ty.packageName);        assertEquals(errorMessage, genericActivity.name, appActivity.name);    }}])', 1), ('([1:/com/android/cts/intent/sender/SuspendPackageTest.java]:[Settings.ACTION]:[1]:method_text:[s(settingsPackageName + "":id/admin_support_icon"")                .pkg(settingsPackageName);    }}])', 1), ('([3:/android/alarmmanager/cts/ExactAlarmsTest.java]:[Settings.ACTION]:[3]:method_text:[;        i.setFlags(Intent.FLAG_RECEIVER_FOREGROUND);        sContext.sendBroadcast(i);    }   ])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[Settings.ACTION]:[1]:method_text:[}    }    private interface SetWifiCallback {        void onComplete(boolean isSuccess);    }}])', 1), ('([1:/android/provider/cts/SettingsPanelTest.java]:[Settings.ACTION]:[1]:method_text:[ect(By.pkg(mLauncherPackage).depth(0)), TIMEOUT);    }    // Check correct package is opened   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[Settings.ACTION]:[1]:method_text:[Y_CLEAR_TASK));        waitFindObject(By.text(ROLE_SHORT_LABEL));        pressBack();    }   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[Settings.ACTION]:[1]:method_text:[(APP_LABEL), UNEXPECTED_TIMEOUT_MILLIS))                .isNull();        pressBack();    }   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[Settings.ACTION]:[1]:method_text:[RoleHolder(ROLE_NAME, APP_PACKAGE_NAME, true);        pressBack();        pressBack();    }   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[Settings.ACTION]:[1]:method_text:[ pressBack() {        UiAutomatorUtils.getUiDevice().pressBack();        waitForIdle();    }   ])', 1)]"	"https://developer.android.com"	""	"[('Settings.ACTION', 45), ('ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET', 1)]"	"[('[android.accessibilityservice.cts.AccessibilitySettingsTest testAccessibilitySettingsIntentHandled CtsAccessibilityServiceTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testNoAccessSilentlyFails CtsUsageStatsTestCases]', 1), ('[com.android.cts.packageinstaller.ManualPackageInstallTest testManualInstallBlocked None]', 1), ('[com.android.cts.storageapp.StorageTest testClearSpace None]', 1), ('[android.autofillservice.cts.servicebehavior.SettingsIntentTest testWarningShown_userRejectsByTappingBack CtsAutoFillServiceTestCases]', 1), ('[android.provider.cts.settings.SettingsTest testUserDictionarySettingsExists CtsProviderTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testSettings CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testFingerprintEnrollStart CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testUsageAccessSettings CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testPictureInPictureSettings CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testRequestManageMedia CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testInteractAcrossProfilesSettings CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testSettingsSearchIntent CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testTapAnPaySettings CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testEasyConnectIntent CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testRequestSetAutofillServiceIntent CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testNotificationPolicyDetailIntent CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testRequestEnableContentCaptureIntent CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testVoiceInputSettingsIntent CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testAddNetworksIntent CtsContentTestCases]', 1), ('[android.security.cts.CVE_2021_0481.DeviceTest testUserPhotoSetUp None]', 1), ('[android.location.cts.fine.ScanningSettingsTest testBleScanningSettings CtsLocationFineTestCases]', 1), ('[com.android.cts.managedprofile.SettingsIntentsTest testSettings None]', 1), ('[com.android.cts.managedprofile.SettingsIntentsTest testAccounts None]', 1), ('[com.android.cts.managedprofile.SettingsIntentsTest testApps None]', 1), ('[com.android.cts.managedprofile.SettingsIntentsTest testSecurity None]', 1), ('[com.android.cts.managedprofile.SettingsIntentsTest testNfc None]', 1), ('[com.android.cts.managedprofile.SettingsIntentsTest testLocation None]', 1), ('[com.google.android.cts.deviceowner.DeviceOwnerTest isTrue None]', 1), ('[android.permission.cts.LocationAccessCheckTest testOpeningLocationSettingsDoesNotTriggerAccess CtsPermissionTestCases]', 1), ('[android.systemintents.cts.TestManageOverlayPermissionIntents testStartManageAppOverlayPermissionIntent_whenCallerHasPermission_succeedsOrThrowsActivityNotFound CtsSystemIntentTestCases]', 1), ('[android.systemintents.cts.TestManageOverlayPermissionIntents testStartManageAppOverlayPermissionIntent_whenCallerDoesNotHavePermission_throwsSecurityExceptionOrActivityNotFound CtsSystemIntentTestCases]', 1), ('[android.systemintents.cts.TestManageOverlayPermissionIntents testManageOverlayPermissionIntentWithDataResolvesToSameIntentWithoutData CtsSystemIntentTestCases]', 1), ('[com.android.cts.intent.sender.SuspendPackageTest testPackageSuspendedWithPackageManager None]', 1), ('[android.alarmmanager.cts.ExactAlarmsTest activityToRequestPermissionExists CtsAlarmManagerTestCases]', 1), ('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None]', 1), ('[android.provider.cts.SettingsPanelTest isCar CtsProviderTestCases]', 1), ('[android.app.role.cts.RoleManagerTest openDefaultAppListThenHasDefaultApp CtsRoleTestCases]', 1), ('[android.app.role.cts.RoleManagerTest openDefaultAppListThenIsNotDefaultAppInList CtsRoleTestCases]', 1), ('[android.app.role.cts.RoleManagerTest openDefaultAppListAndSetDefaultAppThenIsDefaultApp CtsRoleTestCases]', 1), ('[android.app.role.cts.RoleManagerTest openDefaultAppListAndSetDefaultAppThenIsDefaultAppInList CtsRoleTestCases]', 1)]"
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-13-1"	"3.2.3.5/C-13-1"	"03020305.671301"	"""C-13-1] MUST honor the intent [`android.app.action.ADD_DEVICE_ADMIN`](https://developer.android.com/reference/android/app/admin/DevicePolicyManager#ACTION_ADD_DEVICE_ADMIN) to invoke a UI to bring the user through adding the device administrator to the system (or allowing them to reject it).  """	""	""	"ACTION_ADD_DEVICE_ADMIN ADD_DEVICE_ADMIN android.app.action.ADD"	""	""	""	""	"[('android.admin.cts.DeviceAdminActivationTest', 4)]"	"[('getSimpleName', 2)]"	"[('CtsAdminTestCases', 4)]"	""	""	""	""	"android.admin.cts.DeviceAdminActivationTest"	"getSimpleName"	"CtsAdminTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminActivationTest.java', 4)]"	"[('(2,ACTION_ADD_DEVICE_ADMIN,/android/admin/cts/DeviceAdminActivationTest.java)', 1), ('(2,ADD_DEVICE_ADMIN,/android/admin/cts/DeviceAdminActivationTest.java)', 1)]"	"[('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[ACTION_ADD_DEVICE_ADMIN]:[1]:method_text:[ctivateDeviceAdminActivity();        } finally {            super.tearDown();        }    }   ])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[ACTION_ADD_DEVICE_ADMIN]:[1]:method_text:[                new ComponentName(getInstrumentation().getTargetContext(), receiverClass)));    }}])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[ADD_DEVICE_ADMIN]:[1]:method_text:[ctivateDeviceAdminActivity();        } finally {            super.tearDown();        }    }   ])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[ADD_DEVICE_ADMIN]:[1]:method_text:[                new ComponentName(getInstrumentation().getTargetContext(), receiverClass)));    }}])', 1)]"	"https://developer.android.com"	""	"[('ACTION_ADD_DEVICE_ADMIN', 2), ('ADD_DEVICE_ADMIN', 2)]"	"[('[android.admin.cts.DeviceAdminActivationTest DeviceAdminActivationTest CtsAdminTestCases]', 2), ('[android.admin.cts.DeviceAdminActivationTest testActivateBrokenReceiver5Fails CtsAdminTestCases]', 2)]"
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-11-1"	"3.2.3.5/C-11-1"	"03020305.671101"	"""C-11-1] MUST have an activity that handles the [`Settings.ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS`](https://developer.android.com/reference/android/provider/Settings#ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS) intent but MAY implement it as a no-op.  If device implementations declare the support for camera via `android.hardware.camera.any` they:  """	""	""	"Settings.ACTION ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET TINGS android.hardware.camera.any"	""	"TINGS"	""	""	"[('android.content.cts.AvailableIntentsTest', 14), ('com.android.cts.managedprofile.SettingsIntentsTest', 6), ('android.app.role.cts.RoleManagerTest', 4), ('android.systemintents.cts.TestManageOverlayPermissionIntents', 3), ('android.systemintents.cts.TestSystemIntents', 2), ('android.accessibilityservice.cts.AccessibilitySettingsTest', 1), ('android.adbmanager.cts.AdbManagerHostDeviceTest', 1), ('android.voicesettings.cts.ZenModeTest', 1), ('android.voicesettings.cts.AirplaneModeTest', 1), ('android.app.usage.cts.UsageStatsTest', 1), ('com.android.cts.packageinstaller.ManualPackageInstallTest', 1), ('com.android.cts.storageapp.StorageTest', 1), ('android.autofillservice.cts.servicebehavior.SettingsIntentTest', 1), ('android.provider.cts.settings.SettingsTest', 1), ('android.voicesettings.cts.BatterySaverModeTest', 1), ('android.security.cts.CVE_2021_0481.DeviceTest', 1), ('android.location.cts.fine.ScanningSettingsTest', 1), ('com.google.android.cts.deviceowner.DeviceOwnerTest', 1), ('android.permission.cts.LocationAccessCheckTest', 1), ('com.android.cts.intent.sender.SuspendPackageTest', 1), ('android.alarmmanager.cts.ExactAlarmsTest', 1), ('com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity', 1), ('android.provider.cts.SettingsPanelTest', 1)]"	"[('getPackageManager', 7), ('setUp', 6), ('getInstrumentation', 5), ('customSetup', 3), ('getContext', 3), ('create', 2), ('getName', 2), ('size', 2), ('getDevice', 1), ('getStdout', 1), ('trim', 1), ('getWho', 1), ('getSimpleName', 1), ('getPackage', 1), ('setup', 1), ('getTargetContext', 1)]"	"[('CtsContentTestCases', 14), ('CtsSystemIntentTestCases', 5), ('CtsRoleTestCases', 4), ('CtsVoiceSettingsTestCases', 3), ('CtsProviderTestCases', 2), ('CtsAccessibilityServiceTestCases', 1), ('CtsAdbManagerHostTestCases', 1), ('CtsUsageStatsTestCases', 1), ('CtsAutoFillServiceTestCases', 1), ('CtsLocationFineTestCases', 1), ('CtsPermissionTestCases', 1), ('CtsAlarmManagerTestCases', 1)]"	""	""	""	""	"android.app.role.cts.RoleManagerTest"	"getPackageManager"	"CtsRoleTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 14), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/SettingsIntentsTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/role/src/android/app/role/cts/RoleManagerTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestManageOverlayPermissionIntents.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestSystemIntents.java', 2), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilitySettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/voicesettings/src/android/voicesettings/cts/ZenModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/voicesettings/src/android/voicesettings/cts/AirplaneModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageStatsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/PackageInstaller/src/com/android/cts/packageinstaller/ManualPackageInstallTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/StorageApp/src/com/android/cts/storageapp/StorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/settings/SettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/voicesettings/src/android/voicesettings/cts/BatterySaverModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/test-apps/CVE-2021-0481/src/android/security/cts/CVE_2021_0481/DeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_fine/src/android/location/cts/fine/ScanningSettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/settings/app/DeviceOwnerApp/src/com/google/android/cts/deviceowner/DeviceOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/LocationAccessCheckTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/SuspendPackageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/ExactAlarmsTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/SettingsPanelTest.java', 1)]"	"[('(2,Settings.ACTION,/android/accessibilityservice/cts/AccessibilitySettingsTest.java)', 1), ('(1,android.hardware.camera.any,/android/adbmanager/cts/AdbManagerHostDeviceTest.java)', 1), ('(1,Settings.ACTION,/android/voicesettings/cts/ZenModeTest.java)', 1), ('(1,Settings.ACTION,/android/voicesettings/cts/AirplaneModeTest.java)', 1), ('(1,Settings.ACTION,/android/app/usage/cts/UsageStatsTest.java)', 1), ('(1,Settings.ACTION,/com/android/cts/packageinstaller/ManualPackageInstallTest.java)', 1), ('(1,Settings.ACTION,/com/android/cts/storageapp/StorageTest.java)', 1), ('(1,Settings.ACTION,/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java)', 1), ('(1,Settings.ACTION,/android/provider/cts/settings/SettingsTest.java)', 1), ('(1,Settings.ACTION,/android/voicesettings/cts/BatterySaverModeTest.java)', 1), ('(14,Settings.ACTION,/android/content/cts/AvailableIntentsTest.java)', 1), ('(1,Settings.ACTION,/android/security/cts/CVE_2021_0481/DeviceTest.java)', 1), ('(1,Settings.ACTION,/android/location/cts/fine/ScanningSettingsTest.java)', 1), ('(1,ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET,/android/systemintents/cts/TestSystemIntents.java)', 1), ('(9,Settings.ACTION,/android/systemintents/cts/TestSystemIntents.java)', 1), ('(6,Settings.ACTION,/com/android/cts/managedprofile/SettingsIntentsTest.java)', 1), ('(1,Settings.ACTION,/com/google/android/cts/deviceowner/DeviceOwnerTest.java)', 1), ('(1,Settings.ACTION,/android/permission/cts/LocationAccessCheckTest.java)', 1), ('(4,Settings.ACTION,/android/systemintents/cts/TestManageOverlayPermissionIntents.java)', 1), ('(1,Settings.ACTION,/com/android/cts/intent/sender/SuspendPackageTest.java)', 1), ('(3,Settings.ACTION,/android/alarmmanager/cts/ExactAlarmsTest.java)', 1), ('(1,Settings.ACTION,/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java)', 1), ('(1,Settings.ACTION,/android/provider/cts/SettingsPanelTest.java)', 1), ('(4,Settings.ACTION,/android/app/role/cts/RoleManagerTest.java)', 1)]"	"[('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[  .setData(Uri.parse(""package:android.content.cts""));        assertCanBeHandled(intent);    }   ])', 2), ('([2:/android/accessibilityservice/cts/AccessibilitySettingsTest.java]:[Settings.ACTION]:[2]:method_text:[ACTION_ACCESSIBILITY_SETTINGS"";        assertTrue(message, !resolvedActivities.isEmpty());    }}])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[android.hardware.camera.any]:[1]:method_text:[has-feature "" + feature);        return Boolean.parseBoolean(result.getStdout().trim());    }   ])', 1), ('([1:/android/voicesettings/cts/ZenModeTest.java]:[Settings.ACTION]:[1]:method_text:[vate static final int ZEN_MODE_IS_OFF = 0;    private static final int ZEN_MODE_IS_ALARMS = 3;   ])', 1), ('([1:/android/voicesettings/cts/AirplaneModeTest.java]:[Settings.ACTION]:[1]:method_text:[re(FEATURE_VOICE_RECOGNIZERS);        Log.v(TAG, ""setUp(): mHasFeature="" + mHasFeature);    }   ])', 1), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[Settings.ACTION]:[1]:method_text:[   Thread.sleep(500);    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([1:/com/android/cts/packageinstaller/ManualPackageInstallTest.java]:[Settings.ACTION]:[1]:method_text:[       .res(settingsPackageName + "":id/"" + resId)                .pkg(settingsPackageName);    }}])', 1), ('([1:/com/android/cts/storageapp/StorageTest.java]:[Settings.ACTION]:[1]:method_text:[(new UiSelector().text(""OK"")).click();    }    /**     * Measure ourselves manually.     */   ])', 1), ('([1:/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java]:[Settings.ACTION]:[1]:method_text:[FLAG_ACTIVITY_NEW_TASK)                .setData(Uri.parse(""package:"" + Helper.MY_PACKAGE));    }}])', 1), ('([1:/android/provider/cts/settings/SettingsTest.java]:[Settings.ACTION]:[1]:method_text:[              intent, PackageManager.MATCH_DEFAULT_ONLY);        assertTrue(ri != null);    }   ])', 1), ('([1:/android/voicesettings/cts/BatterySaverModeTest.java]:[Settings.ACTION]:[1]:method_text:[  mHasFeature = mContext.getPackageManager().hasSystemFeature(FEATURE_VOICE_RECOGNIZERS);    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[(new Intent(Settings.ACTION_SETTINGS));    }    /**     * Test add event in calendar     */   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[            assertCanBeHandled(new Intent(Settings.ACTION_FINGERPRINT_ENROLL));        }    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[         assertCanBeHandled(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));        }    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[   assertCanBeHandled(new Intent(Settings.ACTION_PICTURE_IN_PICTURE_SETTINGS));        }    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[;        }        assertCanBeHandled(new Intent(Settings.ACTION_REQUEST_MANAGE_MEDIA));    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[   assertCanBeHandled(new Intent(Settings.ACTION_MANAGE_CROSS_PROFILE_ACCESS));        }    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[n;        }        assertCanBeHandled(new Intent(Settings.ACTION_APP_SEARCH_SETTINGS));    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[          assertCanBeHandled(new Intent(Settings.ACTION_NFC_PAYMENT_SETTINGS));        }    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[     intent.setData(Uri.parse(QRCODE));            assertCanBeHandled(intent);        }    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[tent(Settings.ACTION_REQUEST_ENABLE_CONTENT_CAPTURE);        assertCanBeHandled(intent);    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[t = new Intent(Settings.ACTION_VOICE_INPUT_SETTINGS);        assertCanBeHandled(intent);    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[orksIntent() {        assertCanBeHandled(new Intent(Settings.ACTION_WIFI_ADD_NETWORKS));    }   ])', 1), ('([1:/android/security/cts/CVE_2021_0481/DeviceTest.java]:[Settings.ACTION]:[1]:method_text:[ + ""__"")) != 0){            return ret;          }        }      }    }    return ret;  }}])', 1), ('([1:/android/location/cts/fine/ScanningSettingsTest.java]:[Settings.ACTION]:[1]:method_text:[ngKey);        assertEquals(checked, Settings.Global.getInt(resolver, settingKey, 0) == 1);    }}])', 1), ('([1:/android/systemintents/cts/TestSystemIntents.java]:[ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET]:[1]:method_text:[etInstrumentation().getContext();        mPackageManager = mContext.getPackageManager();    }   ])', 1), ('([9:/android/systemintents/cts/TestSystemIntents.java]:[Settings.ACTION]:[9]:method_text:[etInstrumentation().getContext();        mPackageManager = mContext.getPackageManager();    }   ])', 1), ('([1:/com/android/cts/managedprofile/SettingsIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[r.resolveActivity(                new Intent(Settings.ACTION_SETTINGS), 0 /* flags */));    }   ])', 1), ('([1:/com/android/cts/managedprofile/SettingsIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[olveActivity(                new Intent(Settings.ACTION_SYNC_SETTINGS), 0 /* flags */));    }   ])', 1), ('([1:/com/android/cts/managedprofile/SettingsIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[ivity(                new Intent(Settings.ACTION_APPLICATION_SETTINGS), 0 /* flags */));    }   ])', 1), ('([1:/com/android/cts/managedprofile/SettingsIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[Activity(                new Intent(Settings.ACTION_SECURITY_SETTINGS), 0 /* flags */));    }   ])', 1), ('([1:/com/android/cts/managedprofile/SettingsIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[                    new Intent(Settings.ACTION_NFC_SETTINGS), 0 /* flags */));        }    }   ])', 1), ('([1:/com/android/cts/managedprofile/SettingsIntentsTest.java]:[Settings.ACTION]:[1]:method_text:[vity(                new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS), 0 /* flags */));    }}])', 1), ('([1:/com/google/android/cts/deviceowner/DeviceOwnerTest.java]:[Settings.ACTION]:[1]:method_text:[evice owner and has work policy info, then we should have a Privacy     * entry for it.     */   ])', 1), ('([1:/android/permission/cts/LocationAccessCheckTest.java]:[Settings.ACTION]:[1]:method_text:[rtActivity(intent);        runLocationCheck();        assertNull(getNotification(false));    }}])', 1), ('([1:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[Settings.ACTION]:[1]:method_text:[nt            }        });        // ActivityNotFoundException or no exception thrown    }   ])', 1), ('([1:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[Settings.ACTION]:[1]:method_text:[   assertTrue(e instanceof ActivityNotFoundException || e instanceof SecurityException);    }   ])', 1), ('([2:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[Settings.ACTION]:[2]:method_text:[ty.packageName);        assertEquals(errorMessage, genericActivity.name, appActivity.name);    }}])', 1), ('([1:/com/android/cts/intent/sender/SuspendPackageTest.java]:[Settings.ACTION]:[1]:method_text:[s(settingsPackageName + "":id/admin_support_icon"")                .pkg(settingsPackageName);    }}])', 1), ('([3:/android/alarmmanager/cts/ExactAlarmsTest.java]:[Settings.ACTION]:[3]:method_text:[;        i.setFlags(Intent.FLAG_RECEIVER_FOREGROUND);        sContext.sendBroadcast(i);    }   ])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[Settings.ACTION]:[1]:method_text:[}    }    private interface SetWifiCallback {        void onComplete(boolean isSuccess);    }}])', 1), ('([1:/android/provider/cts/SettingsPanelTest.java]:[Settings.ACTION]:[1]:method_text:[ect(By.pkg(mLauncherPackage).depth(0)), TIMEOUT);    }    // Check correct package is opened   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[Settings.ACTION]:[1]:method_text:[Y_CLEAR_TASK));        waitFindObject(By.text(ROLE_SHORT_LABEL));        pressBack();    }   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[Settings.ACTION]:[1]:method_text:[(APP_LABEL), UNEXPECTED_TIMEOUT_MILLIS))                .isNull();        pressBack();    }   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[Settings.ACTION]:[1]:method_text:[RoleHolder(ROLE_NAME, APP_PACKAGE_NAME, true);        pressBack();        pressBack();    }   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[Settings.ACTION]:[1]:method_text:[ pressBack() {        UiAutomatorUtils.getUiDevice().pressBack();        waitForIdle();    }   ])', 1)]"	"https://developer.android.com"	""	"[('Settings.ACTION', 45), ('android.hardware.camera.any', 1), ('ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET', 1)]"	"[('[android.accessibilityservice.cts.AccessibilitySettingsTest testAccessibilitySettingsIntentHandled CtsAccessibilityServiceTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testNoAccessSilentlyFails CtsUsageStatsTestCases]', 1), ('[com.android.cts.packageinstaller.ManualPackageInstallTest testManualInstallBlocked None]', 1), ('[com.android.cts.storageapp.StorageTest testClearSpace None]', 1), ('[android.autofillservice.cts.servicebehavior.SettingsIntentTest testWarningShown_userRejectsByTappingBack CtsAutoFillServiceTestCases]', 1), ('[android.provider.cts.settings.SettingsTest testUserDictionarySettingsExists CtsProviderTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testSettings CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testFingerprintEnrollStart CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testUsageAccessSettings CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testPictureInPictureSettings CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testRequestManageMedia CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testInteractAcrossProfilesSettings CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testSettingsSearchIntent CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testTapAnPaySettings CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testEasyConnectIntent CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testRequestSetAutofillServiceIntent CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testNotificationPolicyDetailIntent CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testRequestEnableContentCaptureIntent CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testVoiceInputSettingsIntent CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testAddNetworksIntent CtsContentTestCases]', 1), ('[android.security.cts.CVE_2021_0481.DeviceTest testUserPhotoSetUp None]', 1), ('[android.location.cts.fine.ScanningSettingsTest testBleScanningSettings CtsLocationFineTestCases]', 1), ('[com.android.cts.managedprofile.SettingsIntentsTest testSettings None]', 1), ('[com.android.cts.managedprofile.SettingsIntentsTest testAccounts None]', 1), ('[com.android.cts.managedprofile.SettingsIntentsTest testApps None]', 1), ('[com.android.cts.managedprofile.SettingsIntentsTest testSecurity None]', 1), ('[com.android.cts.managedprofile.SettingsIntentsTest testNfc None]', 1), ('[com.android.cts.managedprofile.SettingsIntentsTest testLocation None]', 1), ('[com.google.android.cts.deviceowner.DeviceOwnerTest isTrue None]', 1), ('[android.permission.cts.LocationAccessCheckTest testOpeningLocationSettingsDoesNotTriggerAccess CtsPermissionTestCases]', 1), ('[android.systemintents.cts.TestManageOverlayPermissionIntents testStartManageAppOverlayPermissionIntent_whenCallerHasPermission_succeedsOrThrowsActivityNotFound CtsSystemIntentTestCases]', 1), ('[android.systemintents.cts.TestManageOverlayPermissionIntents testStartManageAppOverlayPermissionIntent_whenCallerDoesNotHavePermission_throwsSecurityExceptionOrActivityNotFound CtsSystemIntentTestCases]', 1), ('[android.systemintents.cts.TestManageOverlayPermissionIntents testManageOverlayPermissionIntentWithDataResolvesToSameIntentWithoutData CtsSystemIntentTestCases]', 1), ('[com.android.cts.intent.sender.SuspendPackageTest testPackageSuspendedWithPackageManager None]', 1), ('[android.alarmmanager.cts.ExactAlarmsTest activityToRequestPermissionExists CtsAlarmManagerTestCases]', 1), ('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None]', 1), ('[android.provider.cts.SettingsPanelTest isCar CtsProviderTestCases]', 1), ('[android.app.role.cts.RoleManagerTest openDefaultAppListThenHasDefaultApp CtsRoleTestCases]', 1), ('[android.app.role.cts.RoleManagerTest openDefaultAppListThenIsNotDefaultAppInList CtsRoleTestCases]', 1), ('[android.app.role.cts.RoleManagerTest openDefaultAppListAndSetDefaultAppThenIsDefaultApp CtsRoleTestCases]', 1), ('[android.app.role.cts.RoleManagerTest openDefaultAppListAndSetDefaultAppThenIsDefaultAppInList CtsRoleTestCases]', 1)]"
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-12-1"	"3.2.3.5/C-12-1"	"03020305.671201"	"""C-12-1] MUST honor the [`android.media.action.STILL_IMAGE_CAMERA`](https://developer.android.com/reference/android/provider/MediaStore#INTENT_ACTION_STILL_IMAGE_CAMERA) and [`android.media.action.STILL_IMAGE_CAMERA_SECURE`](https://developer.android.com/reference/android/provider/MediaStore#INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE) intent and launch the camera in still image mode as described in the SDK. """	""	""	"android.media.action.STILL STILL_IMAGE_CAMERA_SECURE INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE STILL_IMAGE_CAMERA INTENT_ACTION_STILL_IMAGE_CAMERA"	""	"TINGS"	""	""	"[('com.android.cts.managedprofile.DisallowSharingIntoProfileTest', 4), ('android.content.cts.AvailableIntentsTest', 2)]"	"[('setUp', 8), ('getInstrumentation', 4), ('getContext', 4)]"	"[('CtsContentTestCases', 2)]"	""	""	""	""	"com.android.cts.managedprofile.DisallowSharingIntoProfileTest"	"getContext"	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 2)]"	"[('(1,STILL_IMAGE_CAMERA,/android/content/cts/AvailableIntentsTest.java)', 1), ('(1,INTENT_ACTION_STILL_IMAGE_CAMERA,/android/content/cts/AvailableIntentsTest.java)', 1), ('(1,STILL_IMAGE_CAMERA_SECURE,/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java)', 1), ('(1,INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE,/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java)', 1), ('(2,STILL_IMAGE_CAMERA,/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java)', 1), ('(2,INTENT_ACTION_STILL_IMAGE_CAMERA,/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java)', 1)]"	"[('([1:/android/content/cts/AvailableIntentsTest.java]:[STILL_IMAGE_CAMERA]:[1]:method_text:[it can more easily be suppressed while we     * fix targets that are out of compliance.     */   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[INTENT_ACTION_STILL_IMAGE_CAMERA]:[1]:method_text:[it can more easily be suppressed while we     * fix targets that are out of compliance.     */   ])', 1), ('([1:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[STILL_IMAGE_CAMERA_SECURE]:[1]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1), ('([1:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE]:[1]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1), ('([2:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[STILL_IMAGE_CAMERA]:[2]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1), ('([2:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[INTENT_ACTION_STILL_IMAGE_CAMERA]:[2]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1)]"	"https://developer.android.com"	""	"[('STILL_IMAGE_CAMERA', 2), ('INTENT_ACTION_STILL_IMAGE_CAMERA', 2), ('STILL_IMAGE_CAMERA_SECURE', 1), ('INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE', 1)]"	"[('[android.content.cts.AvailableIntentsTest testCamera CtsContentTestCases]', 2)]"
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-13-2"	"3.2.3.5/C-13-2"	"03020305.671302"	"""C-13-2] MUST honor the  intents [android.app.action.ADMIN_POLICY_COMPLIANCE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager#ACTION_ADMIN_POLICY_COMPLIANCE), [android.app.action.GET_PROVISIONING_MODE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager#ACTION_GET_PROVISIONING_MODE), [android.app.action.PROVISIONING_SUCCESSFUL](https://developer.android.com/reference/android/app/admin/DevicePolicyManager#ACTION_PROVISIONING_SUCCESSFUL), [android.app.action.PROVISION_MANAGED_DEVICE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager#ACTION_PROVISION_MANAGED_DEVICE), [android.app.action.PROVISION_MANAGED_PROFILE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager#ACTION_PROVISION_MANAGED_PROFILE), [android.app.action.SET_NEW_PARENT_PROFILE_PASSWORD](https://developer.android.com/reference/android/app/admin/DevicePolicyManager#ACTION_SET_NEW_PARENT_PROFILE_PASSWORD), [android.app.action.SET_NEW_PASSWORD](https://developer.android.com/reference/android/app/admin/DevicePolicyManager#ACTION_SET_NEW_PASSWORD) & [android.app.action.START_ENCRYPTION](https://developer.android.com/reference/android/app/admin/DevicePolicyManager#ACTION_START_ENCRYPTION) and have an activity to provide fulfillment for these intents as described in SDK [here](https://developer.android.com/reference/android/app/admin/DevicePolicyManager).  If device implementations declare the [`android.software.autofill`](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_AUTOFILL) feature flag, they:  """	""	""	"PROVISION_MANAGED_DEVICE START_ENCRYPTION SET_NEW_PARENT_PROFILE_PASSWORD android.app.action.PROVISIONING ACTION_PROVISION_MANAGED_PROFILE FEATURE_AUTOFILL android.app.action.ADMIN android.app.action.SET PROVISIONING_SUCCESSFUL GET_PROVISIONING_MODE android.app.action.START android.app.action.GET ACTION_START_ENCRYPTION ACTION_SET_NEW_PARENT_PROFILE_PASSWORD SET_NEW_PASSWORD android.software.autofill PROVISION_MANAGED_PROFILE PackageManager.html ACTION_SET_NEW_PASSWORD android.app.action.PROVISION ACTION_PROVISION_MANAGED_DEVICE ACTION_GET_PROVISIONING_MODE ACTION_PROVISIONING_SUCCESSFUL ACTION_ADMIN_POLICY_COMPLIANCE ADMIN_POLICY_COMPLIANCE"	""	""	""	""	"[('com.android.cts.devicepolicy.singleadmin.ProvisioningSingleAdminTest', 4), ('com.android.cts.comp.provisioning.ManagedProfileProvisioningTest', 4), ('com.android.cts.deviceowner.PreDeviceOwnerTest', 4), ('com.android.cts.managedprofile.PreManagedProfileTest', 4), ('com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest', 2), ('android.devicepolicy.cts.DevicePolicyManagerTest', 2), ('com.android.cts.comp.ManagementTest', 2), ('com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest', 2), ('com.android.cts.profileowner.ManagementTest', 2), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 1), ('android.content.cts.ClipboardManagerTest', 1)]"	"[('setUp', 6), ('getName', 4), ('getPackage', 2), ('getTargetContext', 2)]"	"[('CtsDevicePolicyManagerTestCases', 5), ('CtsDevicePolicyTestCases', 2), ('CtsContentTestCases', 1)]"	""	""	""	""	"com.android.cts.profileowner.ManagementTest"	"setUp"	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/SingleAdminApp/src/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PreDeviceOwnerTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PreManagedProfileTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/DevicePolicyManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/ManagementTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/ManagementTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipboardManagerTest.java', 1)]"	"[('(2,PROVISION_MANAGED_PROFILE,/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java)', 1), ('(2,ACTION_PROVISION_MANAGED_PROFILE,/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java)', 1), ('(1,PROVISION_MANAGED_PROFILE,/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java)', 1), ('(1,ACTION_PROVISION_MANAGED_PROFILE,/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java)', 1), ('(1,PROVISION_MANAGED_PROFILE,/android/devicepolicy/cts/DevicePolicyManagerTest.java)', 1), ('(1,ACTION_PROVISION_MANAGED_PROFILE,/android/devicepolicy/cts/DevicePolicyManagerTest.java)', 1), ('(1,PROVISION_MANAGED_PROFILE,/com/android/cts/comp/ManagementTest.java)', 1), ('(1,ACTION_PROVISION_MANAGED_PROFILE,/com/android/cts/comp/ManagementTest.java)', 1), ('(1,android.software.autofill,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(1,PROVISION_MANAGED_PROFILE,/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java)', 1), ('(1,ACTION_PROVISION_MANAGED_PROFILE,/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java)', 1), ('(2,PROVISION_MANAGED_PROFILE,/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java)', 1), ('(2,ACTION_PROVISION_MANAGED_PROFILE,/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java)', 1), ('(1,ACTION_PROVISION_MANAGED_DEVICE,/com/android/cts/deviceowner/PreDeviceOwnerTest.java)', 1), ('(1,PROVISION_MANAGED_PROFILE,/com/android/cts/deviceowner/PreDeviceOwnerTest.java)', 1), ('(1,ACTION_PROVISION_MANAGED_PROFILE,/com/android/cts/deviceowner/PreDeviceOwnerTest.java)', 1), ('(1,PROVISION_MANAGED_DEVICE,/com/android/cts/deviceowner/PreDeviceOwnerTest.java)', 1), ('(1,FEATURE_AUTOFILL,/android/content/cts/ClipboardManagerTest.java)', 1), ('(2,PROVISION_MANAGED_PROFILE,/com/android/cts/managedprofile/PreManagedProfileTest.java)', 1), ('(2,ACTION_PROVISION_MANAGED_PROFILE,/com/android/cts/managedprofile/PreManagedProfileTest.java)', 1), ('(1,PROVISION_MANAGED_PROFILE,/com/android/cts/profileowner/ManagementTest.java)', 1), ('(1,ACTION_PROVISION_MANAGED_PROFILE,/com/android/cts/profileowner/ManagementTest.java)', 1)]"	"[('([1:/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[    public void setUp() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[TestManager(mContext);        assertTrue(provisioningMgr.startProvisioningAndWait(intent));    }}])', 1), ('([1:/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java]:[ACTION_PROVISION_MANAGED_PROFILE]:[1]:method_text:[    public void setUp() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java]:[ACTION_PROVISION_MANAGED_PROFILE]:[1]:method_text:[TestManager(mContext);        assertTrue(provisioningMgr.startProvisioningAndWait(intent));    }}])', 1), (""([1:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[se when called with     * ACTION_PROVISION_MANAGED_PROFILE when there's a device owner.     */   ])"", 1), (""([1:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[ACTION_PROVISION_MANAGED_PROFILE]:[1]:method_text:[se when called with     * ACTION_PROVISION_MANAGED_PROFILE when there's a device owner.     */   ])"", 1), ('([1:/android/devicepolicy/cts/DevicePolicyManagerTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[e(PackageManager.FEATURE_DEVICE_ADMIN)    @RequireFeature(PackageManager.FEATURE_MANAGED_USERS)   ])', 1), ('([1:/android/devicepolicy/cts/DevicePolicyManagerTest.java]:[ACTION_PROVISION_MANAGED_PROFILE]:[1]:method_text:[e(PackageManager.FEATURE_DEVICE_ADMIN)    @RequireFeature(PackageManager.FEATURE_MANAGED_USERS)   ])', 1), ('([1:/com/android/cts/comp/ManagementTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[visioningAllowed(                DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }   ])', 1), ('([1:/com/android/cts/comp/ManagementTest.java]:[ACTION_PROVISION_MANAGED_PROFILE]:[1]:method_text:[visioningAllowed(                DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[android.software.autofill]:[1]:method_text:[eTestMethod("".AutofillRestrictionsTest"",                ""testDisallowAutofill_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[getDevice().uninstallPackage(SINGLE_ADMIN_PKG);        super.tearDown();    }    @FlakyTest   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java]:[ACTION_PROVISION_MANAGED_PROFILE]:[1]:method_text:[getDevice().uninstallPackage(SINGLE_ADMIN_PKG);        super.tearDown();    }    @FlakyTest   ])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[tends AndroidTestCase {    private static final String TAG = ""ManagedProfileProvisioningTest"";   ])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ntent) {        return intent != null && intent.getExtras().containsKey(Intent.EXTRA_USER);    }}])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[ACTION_PROVISION_MANAGED_PROFILE]:[1]:method_text:[tends AndroidTestCase {    private static final String TAG = ""ManagedProfileProvisioningTest"";   ])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[ACTION_PROVISION_MANAGED_PROFILE]:[1]:method_text:[ntent) {        return intent != null && intent.getExtras().containsKey(Intent.EXTRA_USER);    }}])', 1), ('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[ACTION_PROVISION_MANAGED_DEVICE]:[1]:method_text:[            .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_DEVICE));    }   ])', 1), ('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[           .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }   ])', 1), ('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[ACTION_PROVISION_MANAGED_PROFILE]:[1]:method_text:[           .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }   ])', 1), ('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[PROVISION_MANAGED_DEVICE]:[1]:method_text:[            .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_DEVICE));    }   ])', 1), ('([1:/android/content/cts/ClipboardManagerTest.java]:[FEATURE_AUTOFILL]:[1]:method_text:[text.getPackageManager().hasSystemFeature(                PackageManager.FEATURE_AUTOFILL);    }}])', 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[           .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }   ])', 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[             .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }}])', 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[ACTION_PROVISION_MANAGED_PROFILE]:[1]:method_text:[           .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }   ])', 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[ACTION_PROVISION_MANAGED_PROFILE]:[1]:method_text:[             .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }}])', 1), ('([1:/com/android/cts/profileowner/ManagementTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ProvisioningAllowed(                DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }}])', 1), ('([1:/com/android/cts/profileowner/ManagementTest.java]:[ACTION_PROVISION_MANAGED_PROFILE]:[1]:method_text:[ProvisioningAllowed(                DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }}])', 1)]"	"https://developer.android.com"	""	"[('PROVISION_MANAGED_PROFILE', 12), ('ACTION_PROVISION_MANAGED_PROFILE', 12), ('android.software.autofill', 1), ('ACTION_PROVISION_MANAGED_DEVICE', 1), ('PROVISION_MANAGED_DEVICE', 1), ('FEATURE_AUTOFILL', 1)]"	"[('[com.android.cts.devicepolicy.singleadmin.ProvisioningSingleAdminTest testManagedProfileProvisioning None]', 2), ('[com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest testCannotAddManagedProfileViaManagedProvisioning CtsDevicePolicyManagerTestCases]', 2), ('[android.devicepolicy.cts.DevicePolicyManagerTest newlyProvisionedManagedProfile_removesNonRequiredAppsFromProfile CtsDevicePolicyTestCases]', 2), ('[com.android.cts.comp.ManagementTest testProvisionManagedProfileNotAllowed None]', 2), ('[com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest removeTestUsers CtsDevicePolicyManagerTestCases]', 2), ('[com.android.cts.comp.provisioning.ManagedProfileProvisioningTest testProvisioningCorpOwnedManagedProfile None]', 2), ('[com.android.cts.deviceowner.PreDeviceOwnerTest testIsProvisioningAllowedFalse None]', 2), ('[com.android.cts.deviceowner.PreDeviceOwnerTest testIsProvisioningNotAllowedForManagedProfileAction None]', 2), ('[com.android.cts.managedprofile.PreManagedProfileTest testIsProvisioningAllowedTrue None]', 2), ('[com.android.cts.managedprofile.PreManagedProfileTest testIsProvisioningAllowedFalse None]', 2), ('[com.android.cts.profileowner.ManagementTest testProvisionManagedProfileNotAllowed None]', 2), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowAutofill_allowed CtsDevicePolicyManagerTestCases]', 1), ('[android.content.cts.ClipboardManagerTest testSetPrimaryClipAsPackage CtsContentTestCases]', 1)]"
