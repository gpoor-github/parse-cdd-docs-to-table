"Section"	"section_id"	"req_id"	"Test Availability"	"class_def"	"method"	"module"	"method_text"	"full_key"	"requirement"	"key_as_number"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"matched_terms"	"search_roots"	"qualified_method"	"max_matches"	"file_name"	"matched_files"	"methods_string"	"urls"	"protected"	"Area"	"Shortened"	"Test Level"
"186:594441) 7.3.13  . Hinge Angle Sensor"	"7.3.13"	"C-1-2"	""	"[('android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest', 8), ('android.hardware.cts.SensorTest', 1), ('android.hardware.cts.SensorParameterRangeTest', 1), ('android.hardware.cts.SingleSensorTests', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.hardware.cts.SensorManagerStaticTest', 1), ('com.android.cts.verifier.sensors.MotionIndicatorView', 1)]"	"[('getContext', 2), ('getValidTimestamp', 1), ('elapsedRealtimeNanos', 1), ('getInvalidTimestamp', 1), ('setUp', 1), ('getPackageManager', 1)]"	"[('CtsSensorTestCases', 13)]"	""	"7.3.13/C-1-2"	"""C-1-2] MUST support at least two readings between 0 and 360 degrees (inclusive i.e including 0 and 360 degrees). """	"07031300.670102"	"360 readings between degrees"	"readings between 360 degrees"	""	""	"[('between', 10), ('360', 2), ('degrees', 2)]"	"sensor"	"[('[android.hardware.cts.SensorTest testSensorOperations CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest uptimeMillis CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest testVerify_pass CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest testVerify_fail CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest testVerify_jitter_pass CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest testVerify_jitter_fail CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest testVerify_missing_events_pass CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest testVerify_missing_events_fail CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest testVerify_no_events_fail CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorManagerStaticTest testGetRotationMatrix CtsSensorTestCases]', 1), ('[com.android.cts.verifier.sensors.MotionIndicatorView testUI None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java', 8), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorParameterRangeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SingleSensorTests.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorManagerStaticTest.java', 1), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/MotionIndicatorView.java', 1)]"	"[('/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java', 9), ('/android/hardware/cts/SensorTest.java', 2), ('/android/hardware/cts/SensorParameterRangeTest.java', 2), ('/android/hardware/cts/SingleSensorTests.java', 2), ('/android/hardware/cts/SensorDirectReportTest.java', 2), ('/android/hardware/cts/SensorManagerStaticTest.java', 2), ('/com/android/cts/verifier/sensors/MotionIndicatorView.java', 2)]"	"[('([1:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[between]:[1]:method_text:[  * Test that the verification passes when there are not missing events but some jitter.      */    ])', 2), ('([2:/android/hardware/cts/SensorTest.java]:[360]:[2]:method_text:[l(sensor);         }     }      @AppModeFull(reason = ""Instant apps cannot access body sensors"")    ])', 1), ('([3:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[between]:[3]:method_text:[ }       /**      * Test that the verification passes when there are not missing events.      */    ])', 1), ('([1:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[between]:[1]:method_text:[fication fails when there are not missing events,      * but wrong clock source is used.      */    ])', 1), ('([1:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[between]:[1]:method_text:[      /**      * Test that the verification does not fail when there are missing events.      */    ])', 1), ('([1:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[between]:[1]:method_text:[st that the verification fails when there are missing events, but wrong      * timestamp      */    ])', 1), ('([1:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[between]:[1]:method_text:[     }     }      /**      * Test that the verification fails when there are no results.      */    ])', 1), ('([1:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[between]:[1]:method_text:[tion(expectedUs);         verification.addSensorEvents(events);         return verification;     } }])', 1), ('([3:/android/hardware/cts/SensorParameterRangeTest.java]:[degrees]:[3]:method_text:[deHighPerformance = pm.hasSystemFeature(PackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE);     }     ])', 1), ('([3:/android/hardware/cts/SingleSensorTests.java]:[between]:[3]:method_text:[d by the sensor under test matches that which is      * required by the CDD.      * </p>      */    ])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[between]:[1]:method_text:[der.nativeOrder());          return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned     } }])', 1), ('([1:/android/hardware/cts/SensorManagerStaticTest.java]:[degrees]:[1]:method_text:[d to fail (singular axis)"",             SensorManager.getRotationMatrix(Rr, Ir, gI, gI));     }     ])', 1), ('([6:/com/android/cts/verifier/sensors/MotionIndicatorView.java]:[360]:[6]:method_text:[Value() {         // ensure float division         return ((float)(mLastData - mLow))/mStep;     } }])', 1)]"	""	""	""	""	""
"186:594441) 7.3.13  . Hinge Angle Sensor"	"7.3.13"	"C-1-1"	""	"[('android.hardware.cts.SensorDirectReportTest', 39), ('android.hardware.cts.SensorTest', 9), ('com.android.cts.verifier.sensors.base.SensorCtsTestActivity', 7), ('android.hardware.cts.SensorIntegrationTests', 5), ('com.android.cts.verifier.sensors.sixdof.Fragments.DataFragment', 3), ('android.hardware.cts.SensorBatchingFifoTest', 1), ('android.hardware.cts.SensorBatchingTests', 1), ('android.hardware.cts.helpers.sensorverification.JitterVerificationTest', 1), ('android.hardware.cts.SingleSensorTests', 1), ('android.hardware.cts.helpers.sensoroperations.SensorOperationTest', 1), ('android.hardware.cts.SensorNativeTest', 1)]"	"[('onStart', 4), ('getActivity', 4), ('onDestroy', 4), ('onPause', 4), ('onDetach', 4), ('nativeSetUp', 2), ('setUp', 2), ('setup', 2), ('onStopPoseProviding', 2), ('onSetupComplete', 2), ('onStartPoseProviding', 2), ('onPoseProviderReady', 2), ('activitySetUp', 2), ('createDirectChannel', 1), ('getHighestDirectReportRateLevel', 1), ('tearDown', 1)]"	"[('CtsSensorTestCases', 59)]"	""	"7.3.13/C-1-1"	"C-1-1] MUST implement and report ."	"07031300.670101"	"report implement"	"implement report"	""	""	"[('report', 63), ('implement', 6)]"	"sensor"	"[('[com.android.cts.verifier.sensors.base.SensorCtsTestActivity getTestLogger None]', 7), ('[android.hardware.cts.SensorTest testLegacySensorOperations CtsSensorTestCases]', 2), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 2), ('[com.android.cts.verifier.sensors.sixdof.Fragments.DataFragment stopListening None]', 2), ('[android.hardware.cts.SensorBatchingFifoTest testGameRotationVectorFifoLength CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorBatchingTests testGeomagneticRotationVector_50hz_flush CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorTest testRegisterTwiceWithSameSensor CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorTest testSanitizedContinuousEventsUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorTest testSensorTimeStamps CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorTest testBatchAndFlush CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorTest testBatchAndFlushWithHandler CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorTest testBatchAndFlushUseDefaultHandler CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorTest testBatchAndFlushWithMultipleSensors CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.JitterVerificationTest testVerify CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest isDirectChannelTypeSupported CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testAccelerometerAshmemNormal CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testAccelerometerAshmemNormalUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testGyroscopeAshmemNormal CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testGyroscopeAshmemNormalUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testMagneticFieldAshmemNormal CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testMagneticFieldAshmemNormalUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testAccelerometerAshmemFast CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testAccelerometerAshmemFastUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testGyroscopeAshmemFast CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testGyroscopeAshmemFastUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testMagneticFieldAshmemFast CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testMagneticFieldAshmemFastUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testAccelerometerAshmemVeryFast CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testAccelerometerAshmemVeryFastUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testGyroscopeAshmemVeryFast CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testGyroscopeAshmemVeryFastUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testMagneticFieldAshmemVeryFast CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testMagneticFieldAshmemVeryFastUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testAccelerometerHardwareBufferNormal CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testAccelerometerHardwareBufferNormalUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testGyroscopeHardwareBufferNormal CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testGyroscopeHardwareBufferNormalUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testMagneticFieldHardwareBufferNormal CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testMagneticFieldHardwareBufferNormalUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testAccelerometerHardwareBufferFast CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testAccelerometerHardwareBufferFastUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testGyroscopeHardwareBufferFast CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testGyroscopeHardwareBufferFastUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testMagneticFieldHardwareBufferFast CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testMagneticFieldHardwareBufferFastUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testAccelerometerHardwareBufferVeryFast CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testAccelerometerHardwareBufferVeryFastUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testGyroscopeHardwareBufferVeryFast CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testGyroscopeHardwareBufferVeryFastUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testMagneticFieldHardwareBufferVeryFast CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testMagneticFieldHardwareBufferVeryFastUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensoroperations.SensorOperationTest ISensorTestNode CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorIntegrationTests testSensorsWithSeveralClients CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorIntegrationTests testSensorsMovingRates CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorIntegrationTests testGeomagneticRotationVectorReconfigureWhileActive CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorIntegrationTests testMagneticFieldMagneticFieldStopping CtsSensorTestCases]', 1), ('[com.android.cts.verifier.sensors.sixdof.Fragments.DataFragment testStarted None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 39), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorTest.java', 9), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/base/SensorCtsTestActivity.java', 7), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorIntegrationTests.java', 5), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/sixdof/Fragments/DataFragment.java', 3), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorBatchingFifoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorBatchingTests.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SingleSensorTests.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensoroperations/SensorOperationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorNativeTest.java', 1)]"	"[('/android/hardware/cts/SensorDirectReportTest.java', 41), ('/android/hardware/cts/SensorTest.java', 11), ('/com/android/cts/verifier/sensors/base/SensorCtsTestActivity.java', 9), ('/android/hardware/cts/SensorIntegrationTests.java', 7), ('/com/android/cts/verifier/sensors/sixdof/Fragments/DataFragment.java', 5), ('/android/hardware/cts/SensorBatchingFifoTest.java', 2), ('/android/hardware/cts/SensorBatchingTests.java', 2), ('/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java', 2), ('/android/hardware/cts/SingleSensorTests.java', 2), ('/android/hardware/cts/helpers/sensoroperations/SensorOperationTest.java', 2), ('/android/hardware/cts/SensorNativeTest.java', 2)]"	"[('([1:/android/hardware/cts/SensorDirectReportTest.java]:[report]:[1]:method_text:[  SensorDirectChannel.TYPE_MEMORY_FILE,                 SensorDirectChannel.RATE_NORMAL);     }     ])', 6), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[report]:[1]:method_text:[    SensorDirectChannel.TYPE_MEMORY_FILE,                 SensorDirectChannel.RATE_FAST);     }     ])', 6), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[report]:[1]:method_text:[ensorDirectChannel.TYPE_MEMORY_FILE,                 SensorDirectChannel.RATE_VERY_FAST);     }     ])', 6), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[report]:[1]:method_text:[nsorDirectChannel.TYPE_HARDWARE_BUFFER,                 SensorDirectChannel.RATE_NORMAL);     }     ])', 6), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[report]:[1]:method_text:[rDirectChannel.TYPE_HARDWARE_BUFFER,                 SensorDirectChannel.RATE_VERY_FAST);     }     ])', 6), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[report]:[1]:method_text:[SensorDirectChannel.TYPE_HARDWARE_BUFFER,                 SensorDirectChannel.RATE_FAST);     }     ])', 5), ('([1:/com/android/cts/verifier/sensors/base/SensorCtsTestActivity.java]:[report]:[1]:method_text:[      .logTestFail(failure.getDescription().getMethodName(), failure.toString());         }         ])', 2), ('([1:/android/hardware/cts/SensorBatchingFifoTest.java]:[report]:[1]:method_text:[ult(environment));         op.execute(getCurrentTestNode());         op.getStats().log(TAG);     } }])', 1), ('([11:/android/hardware/cts/SensorBatchingTests.java]:[report]:[11]:method_text:[          flush);             stats.logToFile(environment.getContext(), fileName);         }     } }])', 1), ('([1:/android/hardware/cts/SensorTest.java]:[report]:[1]:method_text:[  */     // TODO: remove when parametrized tests are supported and EventTimestampSynchronization    ])', 1), ('([3:/android/hardware/cts/SensorTest.java]:[report]:[3]:method_text:[ed and EventTimestampSynchronization     //       verification is added to default verifications    ])', 1), ('([1:/android/hardware/cts/SensorTest.java]:[report]:[1]:method_text:[    }      // TODO: remove when parameterized tests are supported (see SensorBatchingTests.java)    ])', 1), ('([1:/android/hardware/cts/SensorTest.java]:[report]:[1]:method_text:[   */     // TODO: remove when parametized tests are supported and EventTimestampSynchronization    ])', 1), ('([2:/android/hardware/cts/SensorTest.java]:[report]:[2]:method_text:[licit testing the SensorManager.registerListener(SensorEventListener, Sensor, int, int).      */    ])', 1), ('([2:/android/hardware/cts/SensorTest.java]:[report]:[2]:method_text:[ve to SensorBatchingTests and run in all sensors with default     //       verifications enabled    ])', 1), ('([6:/android/hardware/cts/SensorTest.java]:[report]:[6]:method_text:[ sensor.getFifoReservedEventCount() == 0);         }     }      @SuppressWarnings(""deprecation"")    ])', 1), ('([12:/android/hardware/cts/SensorTest.java]:[report]:[12]:method_text:[{}          @Override         public void onAccuracyChanged(Sensor sensor, int accuracy) {}     }  }])', 1), ('([2:/android/hardware/cts/SensorTest.java]:[implement]:[2]:method_text:[{}          @Override         public void onAccuracyChanged(Sensor sensor, int accuracy) {}     }  }])', 1), ('([1:/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java]:[report]:[1]:method_text:[nse)                                        // divide by 1ms requested sample time x 100%     }     ])', 1), ('([9:/android/hardware/cts/SingleSensorTests.java]:[report]:[9]:method_text:[d by the sensor under test matches that which is      * required by the CDD.      * </p>      */    ])', 1), ('([9:/android/hardware/cts/SensorDirectReportTest.java]:[report]:[9]:method_text:[ChannelSecondary = null;         }          freeSharedMemory();         super.tearDown();     }     ])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[report]:[1]:method_text:[ SensorDirectChannel.TYPE_HARDWARE_BUFFER,                 SensorDirectChannel.RATE_FAST);     }    ])', 1), ('([58:/android/hardware/cts/SensorDirectReportTest.java]:[report]:[58]:method_text:[der.nativeOrder());          return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned     } }])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[implement]:[1]:method_text:[der.nativeOrder());          return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned     } }])', 1), ('([1:/android/hardware/cts/helpers/sensoroperations/SensorOperationTest.java]:[report]:[1]:method_text:[Operation} functions correctly. Other tests in this class      * rely on this operation.      */    ])', 1), ('([1:/android/hardware/cts/SensorNativeTest.java]:[implement]:[1]:method_text:[de     public void tearDown() throws Exception {         nativeTearDown(mNativeInstance);     }     ])', 1), ('([3:/android/hardware/cts/SensorIntegrationTests.java]:[report]:[3]:method_text:[to identify how the interaction      * of several clients can lead to the failing state.      */    ])', 1), ('([1:/android/hardware/cts/SensorIntegrationTests.java]:[report]:[1]:method_text:[          operation.execute(getCurrentTestNode());         operation.getStats().log(TAG);     }     ])', 1), ('([2:/android/hardware/cts/SensorIntegrationTests.java]:[report]:[2]:method_text:[      operation.getStats().log(TAG);     }      /**      * Regress:      * - b/10641388      */     ])', 1), ('([3:/android/hardware/cts/SensorIntegrationTests.java]:[report]:[3]:method_text:[ TimeUnit.SECONDS.toMicros(mGenerator.nextInt(5) + 1);         return (int) reportLatencyUs;     } }])', 1), ('([1:/android/hardware/cts/SensorIntegrationTests.java]:[implement]:[1]:method_text:[to identify how the interaction      * of several clients can lead to the failing state.      */    ])', 1), ('([10:/com/android/cts/verifier/sensors/sixdof/Fragments/DataFragment.java]:[report]:[10]:method_text:[       return mManager.getLap();     }      /**      * Sets the test status to executed.      */    ])', 1), ('([2:/com/android/cts/verifier/sensors/sixdof/Fragments/DataFragment.java]:[report]:[2]:method_text:[aining();     }      public ArrayList<Ring> getRings() {         return mManager.getRings();     } }])', 1), ('([1:/com/android/cts/verifier/sensors/sixdof/Fragments/DataFragment.java]:[implement]:[1]:method_text:[       return mManager.getLap();     }      /**      * Sets the test status to executed.      */    ])', 1), ('([2:/com/android/cts/verifier/sensors/base/SensorCtsTestActivity.java]:[report]:[2]:method_text:[sorRunListener extends RunListener {         private volatile boolean mCurrentTestReported;         ])', 1), ('([1:/com/android/cts/verifier/sensors/base/SensorCtsTestActivity.java]:[report]:[1]:method_text:[d = false;             getTestLogger().logTestStart(description.getMethodName());         }         ])', 1), ('([1:/com/android/cts/verifier/sensors/base/SensorCtsTestActivity.java]:[report]:[1]:method_text:[).logTestPass(description.getMethodName(), null /* testSummary */);             }         }         ])', 1), ('([1:/com/android/cts/verifier/sensors/base/SensorCtsTestActivity.java]:[report]:[1]:method_text:[ getTestLogger().logTestSkip(description.getMethodName(), description.toString());         }     } }])', 1), ('([1:/com/android/cts/verifier/sensors/base/SensorCtsTestActivity.java]:[implement]:[1]:method_text:[sorRunListener extends RunListener {         private volatile boolean mCurrentTestReported;         ])', 1)]"	""	""	""	""	""
"186:594441) 7.3.13  . Hinge Angle Sensor"	"7.3.13"	"C-1-3"	""	"[('android.hardware.cts.SensorTest', 24), ('android.hardware.cts.SensorParameterRangeTest', 4), ('android.hardware.cts.SensorBatchingFifoTest', 2), ('android.hardware.cts.helpers.sensorverification.EventBasicVerificationTest', 2), ('android.hardware.cts.SensorSupportTest', 2), ('android.hardware.cts.SingleSensorTests', 2), ('android.hardware.cts.SensorDirectReportTest', 2), ('android.hardware.cts.SensorIntegrationTests', 2), ('android.hardware.cts.helpers.SensorNotSupportedException', 1), ('android.hardware.cts.helpers.TestSensorEnvironment', 1), ('android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerification', 1), ('com.android.cts.verifier.sensors.RVCVRecordActivity', 1)]"	"[('getSensor', 3), ('getRequestedSamplingPeriodUs', 3), ('getFrequencyHz', 2), ('getMaxReportLatencyUs', 2), ('startRecordcontroller', 2), ('stopRecordcontroller', 2), ('quit', 2), ('getContext', 1), ('getFrequencyString', 1), ('elapsedRealtimeNanos', 1), ('getFifoMaxEventCount', 1), ('getMaximumExpectedSamplingPeriodUs', 1), ('RecordProcedureControllerCallback', 1), ('startRecordProcedureController', 1), ('stopRecordProcedureController', 1)]"	"[('CtsSensorTestCases', 43)]"	""	"7.3.13/C-1-3"	"""C-1-3] MUST return a wakeup sensor for getDefaultSensor(SENSOR_TYPE_HINGE_ANGLE). <h3 id="""	"07031300.670103"	"getDefaultSensor SENSOR_TYPE_HINGE_ANGLE wakeup getDefaultSensor(SENSOR_TYPE_HINGE_ANGLE)"	"wakeup getDefaultSensor SENSOR_TYPE_HINGE_ANGLE"	""	""	"[('getDefaultSensor', 36), ('wakeup', 8)]"	"sensor"	"[('[android.hardware.cts.SensorTest testValuesForAllSensors CtsSensorTestCases]', 4), ('[android.hardware.cts.SensorTest testGetDefaultSensorWithWakeUpFlag CtsSensorTestCases]', 4), ('[android.hardware.cts.SensorBatchingFifoTest testGameRotationVectorFifoLength CtsSensorTestCases]', 2), ('[android.hardware.cts.helpers.sensorverification.EventBasicVerificationTest testVerify CtsSensorTestCases]', 2), ('[android.hardware.cts.SensorTest testSensorOperations CtsSensorTestCases]', 2), ('[android.hardware.cts.SensorTest testBodySensorOperations CtsSensorTestCases]', 2), ('[android.hardware.cts.SensorTest testRequestTriggerWithNonTriggerSensor CtsSensorTestCases]', 2), ('[android.hardware.cts.SensorTest testCancelTriggerWithNonTriggerSensor CtsSensorTestCases]', 2), ('[android.hardware.cts.SensorTest testRegisterWithTriggerSensor CtsSensorTestCases]', 2), ('[android.hardware.cts.SensorTest testRegisterTwiceWithSameSensor CtsSensorTestCases]', 2), ('[android.hardware.cts.SensorTest testLegacySensorOperations CtsSensorTestCases]', 2), ('[android.hardware.cts.SensorTest testWakeUpFlags CtsSensorTestCases]', 2), ('[android.hardware.cts.SensorSupportTest testSupportsRotationVectorIfHasAGM CtsSensorTestCases]', 2), ('[android.hardware.cts.SensorParameterRangeTest testPressureRange CtsSensorTestCases]', 2), ('[android.hardware.cts.SensorParameterRangeTest testStepDetectorFifoLength CtsSensorTestCases]', 2), ('[android.hardware.cts.SingleSensorTests testSensorProperties CtsSensorTestCases]', 2), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 2), ('[android.hardware.cts.SensorIntegrationTests testGeomagneticRotationVectorReconfigureWhileActive CtsSensorTestCases]', 2), ('[android.hardware.cts.helpers.TestSensorEnvironment isSensorSamplingRateOverloaded CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerification isDeviceSuspendTest CtsSensorTestCases]', 1), ('[com.android.cts.verifier.sensors.RVCVRecordActivity getDefaultDisplay None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorTest.java', 24), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorParameterRangeTest.java', 4), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorBatchingFifoTest.java', 2), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/EventBasicVerificationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorSupportTest.java', 2), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SingleSensorTests.java', 2), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 2), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorIntegrationTests.java', 2), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/helpers/SensorNotSupportedException.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/helpers/TestSensorEnvironment.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerification.java', 1), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/RVCVRecordActivity.java', 1)]"	"[('/android/hardware/cts/SensorTest.java', 28), ('/android/hardware/cts/SensorParameterRangeTest.java', 6), ('/android/hardware/cts/SensorBatchingFifoTest.java', 4), ('/android/hardware/cts/helpers/sensorverification/EventBasicVerificationTest.java', 4), ('/android/hardware/cts/SensorSupportTest.java', 4), ('/android/hardware/cts/SingleSensorTests.java', 4), ('/android/hardware/cts/SensorDirectReportTest.java', 4), ('/android/hardware/cts/SensorIntegrationTests.java', 4), ('/android/hardware/cts/helpers/SensorNotSupportedException.java', 2), ('/android/hardware/cts/helpers/TestSensorEnvironment.java', 2), ('/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerification.java', 2), ('/com/android/cts/verifier/sensors/RVCVRecordActivity.java', 2)]"	"[('([2:/android/hardware/cts/SensorBatchingFifoTest.java]:[getDefaultSensor]:[2]:method_text:[ult(environment));         op.execute(getCurrentTestNode());         op.getStats().log(TAG);     } }])', 2), ('([1:/android/hardware/cts/helpers/sensorverification/EventBasicVerificationTest.java]:[getDefaultSensor]:[1]:method_text:[umEvent, sensor);         verification.addSensorEvents(events);         return verification;     } }])', 2), ('([9:/android/hardware/cts/SensorTest.java]:[getDefaultSensor]:[9]:method_text:[l(sensor);         }     }      @AppModeFull(reason = ""Instant apps cannot access body sensors"")    ])', 2), ('([1:/android/hardware/cts/SensorTest.java]:[getDefaultSensor]:[1]:method_text:[   assertSensorValues(sensor);         } else {             assertNull(sensor);         }     }     ])', 2), ('([1:/android/hardware/cts/SensorTest.java]:[getDefaultSensor]:[1]:method_text:[as wake-up sensors by     // default. Check if the wake-up flag is set correctly.     @Presubmit    ])', 2), ('([5:/android/hardware/cts/SensorTest.java]:[getDefaultSensor]:[5]:method_text:[                    curr_sensor.isWakeUpSensor());             }         }     }      @Presubmit    ])', 2), ('([1:/android/hardware/cts/SensorTest.java]:[getDefaultSensor]:[1]:method_text:[estTriggerSensor(mNullTriggerEventListener, mTriggerSensor);         assertFalse(result);     }     ])', 2), ('([1:/android/hardware/cts/SensorTest.java]:[getDefaultSensor]:[1]:method_text:[celTriggerSensor(mNullTriggerEventListener, mTriggerSensor);         assertFalse(result);     }     ])', 2), ('([1:/android/hardware/cts/SensorTest.java]:[getDefaultSensor]:[1]:method_text:[ sensor,                 SensorManager.SENSOR_DELAY_NORMAL);         assertFalse(result);     }     ])', 2), ('([1:/android/hardware/cts/SensorTest.java]:[getDefaultSensor]:[1]:method_text:[  */     // TODO: remove when parametrized tests are supported and EventTimestampSynchronization    ])', 2), ('([3:/android/hardware/cts/SensorTest.java]:[getDefaultSensor]:[3]:method_text:[{}          @Override         public void onAccuracyChanged(Sensor sensor, int accuracy) {}     }  }])', 2), ('([4:/android/hardware/cts/SensorTest.java]:[wakeup]:[4]:method_text:[as wake-up sensors by     // default. Check if the wake-up flag is set correctly.     @Presubmit    ])', 2), ('([7:/android/hardware/cts/SensorTest.java]:[wakeup]:[7]:method_text:[Y, ""proximity"");         hasDefaultWakeupSensorOrEmpty(Sensor.TYPE_HINGE_ANGLE, ""hinge"");     }     ])', 2), ('([4:/android/hardware/cts/SensorTest.java]:[wakeup]:[4]:method_text:[                    curr_sensor.isWakeUpSensor());             }         }     }      @Presubmit    ])', 2), ('([2:/android/hardware/cts/SensorSupportTest.java]:[getDefaultSensor]:[2]:method_text:[     return (mSensorManager != null && mSensorManager.getDefaultSensor(sensorType) != null);     } }])', 2), ('([1:/android/hardware/cts/SensorParameterRangeTest.java]:[getDefaultSensor]:[1]:method_text:[Frequency),                     actualMinFrequency <=  hifiMinFrequency + 0.1);         }     }     ])', 2), ('([1:/android/hardware/cts/SensorParameterRangeTest.java]:[getDefaultSensor]:[1]:method_text:[equiredLength, reservedLength),                     reservedLength >= minRequiredLength);     }     ])', 2), ('([1:/android/hardware/cts/SingleSensorTests.java]:[getDefaultSensor]:[1]:method_text:[better way to enumerate test cases programmatically exists that works     // with CTS framework.    ])', 2), ('([10:/android/hardware/cts/SensorDirectReportTest.java]:[getDefaultSensor]:[10]:method_text:[der.nativeOrder());          return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned     } }])', 2), ('([1:/android/hardware/cts/SensorIntegrationTests.java]:[getDefaultSensor]:[1]:method_text:[      operation.getStats().log(TAG);     }      /**      * Regress:      * - b/10641388      */     ])', 2), ('([2:/android/hardware/cts/helpers/SensorNotSupportedException.java]:[wakeup]:[2]:method_text:[agnetic Rotation Vector"";             default:                 return ""<Unknown>"";         }     } }])', 1), ('([1:/android/hardware/cts/helpers/TestSensorEnvironment.java]:[getDefaultSensor]:[1]:method_text:[endTest;     }      public boolean isIntegrationTest() {         return mIsIntegrationTest;     } } ])', 1), ('([1:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerification.java]:[wakeup]:[1]:method_text:[E_MESSAGE_LENGTH) {             builder.append(""more; "");         }         return failures;     } }])', 1), ('([4:/com/android/cts/verifier/sensors/RVCVRecordActivity.java]:[getDefaultSensor]:[4]:method_text:[ch (Exception e)             {                 e.printStackTrace();             }         }     }  }])', 1)]"	""	""	""	""	""
