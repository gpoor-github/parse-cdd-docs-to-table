Section	section_id	req_id	Test Availability	class_def	method	module	method_text	full_key	requirement	key_as_number	search_terms	manual_search_terms	not_search_terms	not_files	matched_terms	search_roots	qualified_method	max_matches	file_name	matched_files	methods_string	urls	protected	Area	Shortened	Test Level
48:237585) 3.2.3.1  . Common Application Intents	3.2.3.1	A-0-1						3.2.3.1/A-0-1	""">3.2.3.1/A-0-1] MUST preload one or more applications or service components with an intent handler; for all the public intent filter patterns defined by the following application intents listed here. [<a href=""#3_4_web_compatibility"""""	03020301.650001	3.2.3.1 3.2.3.1/A-0-1 A-0-1
48:237585) 3.2.3.1  . Common Application Intents	3.2.3.1	Tab-0-1						3.2.3.1/Tab-0-1	""">3.2.3.1/Tab-0-1] MUST preload one or more applications or service components with an intent handler; for all the public intent filter patterns defined by the following application intents listed here. <h2 id="""	03020301.980001	3.2.3.1/Tab-0-1 3.2.3.1 Tab-0-1															
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-6-1		[('android.app.cts.NotificationManagerTest', 10), ('android.media.cts.AudioManagerTest', 9), ('android.telecom.cts.CarModeInCallServiceTest', 6), ('android.app.notification.legacy.cts.ConditionProviderServiceTest', 5), ('com.android.cts.verifier.audio.RingerModeActivity', 3), ('android.app.cts.NotificationChannelTest', 2), ('android.app.notification.legacy20.cts.LegacyNotificationManager20Test', 1), ('android.telecom.cts.CallRedirectionServiceTest', 1), ('android.accessibilityservice.cts.AccessibilityEndToEndTest', 1), ('android.server.wm.CrossAppDragAndDropTests', 1), ('android.app.cts.UiModeManagerTest', 1), ('com.android.cts.profileowner.AdminActionBookkeepingTest', 1), ('android.app.notification.legacy29.cts.NotificationManager29Test', 1), ('android.app.notification.legacy.cts.LegacyNotificationManagerTest', 1), ('android.systemintents.cts.TestSystemIntents', 1), ('android.opengl.cts.OpenGlEsVersionTest', 1), ('android.ndef.cts.NdefTest', 1), ('com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest', 1), ('com.android.cts.deviceowner.AdminActionBookkeepingTest', 1), ('android.hardware.camera2.cts.CameraManagerTest', 1), ('com.android.cts.delegate.CertInstallDelegateTest', 1), ('com.android.cts.deviceandprofileowner.SecurityLoggingTest', 1), ('com.android.cts.certinstaller.DirectDelegatedCertInstallerTest', 1)]	[('setUp', 16), ('getInstrumentation', 14), ('tearDown', 13), ('of', 8), ('getContext', 7), ('getPackageName', 7), ('getId', 7), ('build', 6), ('getPackageManager', 5), ('toString', 5), ('getActiveNotifications', 5), ('getContentResolver', 4), ('getMessage', 4), ('getWho', 4), ('getBytes', 4), ('getResources', 2), ('getSystem', 2), ('getRingerMode', 2), ('cancelAll', 2), ('printStackTrace', 2), ('getKey', 2), ('getGroupKey', 2), ('getUiAutomation', 2), ('reset', 2), ('getService', 1), ('areChannelsBypassingDnd', 1), ('hasVibrator', 1), ('getNotificationPolicy', 1), ('getCurrentInterruptionFilter', 1), ('getSimpleName', 1), ('randomUUID', 1), ('getNotificationChannels', 1), ('getNotificationChannelGroups', 1), ('getCount', 1), ('moveToFirst', 1), ('close', 1), ('getPendingIntent', 1), ('getClass', 1), ('getGroup', 1), ('getNotification', 1), ('getOverrideGroupKey', 1), ('supportsSplitScreenMultiWindow', 1), ('supportsFreeform', 1), ('getUserId', 1), ('create', 1), ('BroadcastReceiver', 1), ('getAction', 1), ('release', 1), ('IntentFilter', 1), ('getCurrentModeType', 1)]	[('CtsAppTestCases', 13), ('CtsMediaTestCases', 9), ('CtsTelecomTestCases', 7), ('CtsLegacyNotification27TestCases', 6), ('CtsLegacyNotification20TestCases', 1), ('CtsAccessibilityServiceTestCases', 1), ('CtsWindowManagerDeviceTestCases', 1), ('CtsLegacyNotification29TestCases', 1), ('CtsSystemIntentTestCases', 1), ('CtsOpenGLTestCases', 1), ('CtsNdefTestCases', 1), ('CtsCameraTestCases', 1)]		3.2.3.5/C-6-1	"""C-6-1] MUST implement an activity that would respond to the intent ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS; which for implementations with UI_MODE_TYPE_NORMAL it MUST be an activity where the user can grant or deny the app access to DND policy configurations. If device implementations allow users to use third-party input methods on the device; they: """	03020305.670601	MODE_TYPE_NORMAL 3.2.3.5 ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS DND C-6-1 3.2.3.5/C-6-1				[('DND', 42), ('MODE_TYPE_NORMAL', 7), ('3.2.3.5', 1), ('ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS', 1), ('C-6-1', 1)]		CtsLegacyNotification20TestCases:android.app.notification.legacy20.cts.LegacyNotificationManager20Test.testNotificationListener_cancelNotifications CtsMediaTestCases:android.media.cts.AudioManagerTest.isMicrophoneMute CtsMediaTestCases:android.media.cts.AudioManagerTest.testMuteDndAffectedStreams CtsMediaTestCases:android.media.cts.AudioManagerTest.testMuteDndUnaffectedStreams CtsMediaTestCases:android.media.cts.AudioManagerTest.testSetStreamVolumeInPriorityOnlyMode CtsMediaTestCases:android.media.cts.AudioManagerTest.testAdjustVolumeInPriorityOnly CtsMediaTestCases:android.media.cts.AudioManagerTest.testPriorityOnlyMuteAll CtsMediaTestCases:android.media.cts.AudioManagerTest.testPriorityOnlyMediaAllowed CtsMediaTestCases:android.media.cts.AudioManagerTest.testPriorityOnlyAlarmsAllowed CtsMediaTestCases:android.media.cts.AudioManagerTest.testPriorityOnlyChannelsCanBypassDnd CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsAccessibilityServiceTestCases:android.accessibilityservice.cts.AccessibilityEndToEndTest.testTypeNotificationStateChangedAccessibilityEvent CtsAppTestCases:android.app.cts.NotificationManagerTest.isGroup CtsAppTestCases:android.app.cts.NotificationManagerTest.testConsolidatedNotificationPolicy CtsAppTestCases:android.app.cts.NotificationManagerTest.testConsolidatedNotificationPolicyMultiRules CtsAppTestCases:android.app.cts.NotificationManagerTest.testCreateChannel CtsAppTestCases:android.app.cts.NotificationManagerTest.testTotalSilenceOnlyMuteStreams CtsAppTestCases:android.app.cts.NotificationManagerTest.testAlarmsOnlyMuteStreams CtsAppTestCases:android.app.cts.NotificationManagerTest.testSetAutomaticZenRuleState CtsAppTestCases:android.app.cts.NotificationManagerTest.testSetAutomaticZenRuleState_turnOff CtsAppTestCases:android.app.cts.NotificationManagerTest.testSetAutomaticZenRuleState_deletedRule CtsAppTestCases:android.app.cts.NotificationManagerTest.testSetAutomaticZenRuleState_multipleRules CtsWindowManagerDeviceTestCases:android.server.wm.CrossAppDragAndDropTests.uptimeMillis CtsAppTestCases:android.app.cts.UiModeManagerTest.testEnterCarModePrioritized None:com.android.cts.verifier.audio.RingerModeActivity.isLowRamDevice None:com.android.cts.verifier.audio.RingerModeActivity.TestVolumeDndAffectedStreamDndOn None:com.android.cts.verifier.audio.RingerModeActivity.TestVolumeDndAffectedStream CtsAppTestCases:android.app.cts.NotificationChannelTest.testConstructor CtsAppTestCases:android.app.cts.NotificationChannelTest.testWriteToParcel CtsLegacyNotification29TestCases:android.app.notification.legacy29.cts.NotificationManager29Test.isNotificationPolicyAccessGranted CtsLegacyNotification27TestCases:android.app.notification.legacy.cts.LegacyNotificationManagerTest.testSetNotificationPolicy_preP_setOldNewFields CtsOpenGLTestCases:android.opengl.cts.OpenGlEsVersionTest.testRequiredExtensionsForVrHighPerformance CtsNdefTestCases:android.ndef.cts.NdefTest.testInvalidParsing CtsLegacyNotification27TestCases:android.app.notification.legacy.cts.ConditionProviderServiceTest.testUnboundCPSMaintainsCondition_addsNewRule CtsLegacyNotification27TestCases:android.app.notification.legacy.cts.ConditionProviderServiceTest.testUnboundCPSMaintainsCondition_otherConditionChanges CtsLegacyNotification27TestCases:android.app.notification.legacy.cts.ConditionProviderServiceTest.testUnboundCPSMaintainsCondition_otherProviderRuleChanges CtsLegacyNotification27TestCases:android.app.notification.legacy.cts.ConditionProviderServiceTest.testRequestRebindWhenLostAccess CtsLegacyNotification27TestCases:android.app.notification.legacy.cts.ConditionProviderServiceTest.testMethodsExistAndDoNotThrow CtsTelecomTestCases:android.telecom.cts.CarModeInCallServiceTest.dropShellPermissionIdentity CtsTelecomTestCases:android.telecom.cts.CarModeInCallServiceTest.testSetCarMode CtsTelecomTestCases:android.telecom.cts.CarModeInCallServiceTest.testStartCallInCarMode CtsTelecomTestCases:android.telecom.cts.CarModeInCallServiceTest.testSwitchToCarMode CtsTelecomTestCases:android.telecom.cts.CarModeInCallServiceTest.testSwitchToCarModeAndBack CtsTelecomTestCases:android.telecom.cts.CarModeInCallServiceTest.testSwitchToCarModeMultiple CtsCameraTestCases:android.hardware.camera2.cts.CameraManagerTest.testCameraManagerWithDnD		/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java	[('/android/app/cts/NotificationManagerTest.java', 11), ('/android/media/cts/AudioManagerTest.java', 10), ('/android/telecom/cts/CarModeInCallServiceTest.java', 7), ('/android/app/notification/legacy/cts/ConditionProviderServiceTest.java', 6), ('/com/android/cts/verifier/audio/RingerModeActivity.java', 4), ('/android/app/cts/NotificationChannelTest.java', 3), ('/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 2), ('/android/telecom/cts/CallRedirectionServiceTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 2), ('/android/server/wm/CrossAppDragAndDropTests.java', 2), ('/android/app/cts/UiModeManagerTest.java', 2), ('/com/android/cts/profileowner/AdminActionBookkeepingTest.java', 2), ('/android/app/notification/legacy29/cts/NotificationManager29Test.java', 2), ('/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java', 2), ('/android/systemintents/cts/TestSystemIntents.java', 2), ('/android/opengl/cts/OpenGlEsVersionTest.java', 2), ('/android/ndef/cts/NdefTest.java', 2), ('/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 2), ('/com/android/cts/deviceowner/AdminActionBookkeepingTest.java', 2), ('/android/hardware/camera2/cts/CameraManagerTest.java', 2), ('/com/android/cts/delegate/CertInstallDelegateTest.java', 2), ('/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java', 2), ('/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 2)]	"[('([1:/android/app/cts/NotificationManagerTest.java]:[DND]:[1]:method_text:[nalFilter);            mNotificationManager.setNotificationPolicy(origPolicy);        }    }   ])', 3), ('([2:/android/media/cts/AudioManagerTest.java]:[DND]:[2]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);        }    }   ])', 2), ('([3:/android/media/cts/AudioManagerTest.java]:[DND]:[3]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);        }    }   ])', 2), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[2]:method_text:[ote        assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());    }   ])', 2), ('([2:/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java]:[DND]:[2]:method_text:[InterruptedException ex) {                // pass            }        }        return n;    }}])', 1), ('([8:/android/media/cts/AudioManagerTest.java]:[DND]:[8]:method_text:[    @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")   ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[DND]:[1]:method_text:[ckageName(), getInstrumentation(), true);            testStreamMuting(stream);        }    }   ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[DND]:[1]:method_text:[etStreamMute failed."",                    mAudioManager.isStreamMute(stream));        }    }   ])', 1), ('([4:/android/media/cts/AudioManagerTest.java]:[DND]:[4]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);        }    }   ])', 1), ('([7:/android/media/cts/AudioManagerTest.java]:[DND]:[7]:method_text:[ss(mContext.getPackageName(), getInstrumentation(),                    false);        }    }   ])', 1), ('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);        assertTrue(result);    }}])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[DND]:[1]:method_text:[notificationManager.deleteNotificationChannel(channel.getId());        }    }    @MediumTest   ])', 1), ('([4:/android/app/cts/NotificationManagerTest.java]:[DND]:[4]:method_text:[anupSendBubbleActivity() {        mContext.unregisterReceiver(mBubbleBroadcastReceiver);    }   ])', 1), ('([5:/android/app/cts/NotificationManagerTest.java]:[DND]:[5]:method_text:[nalFilter);            mNotificationManager.setNotificationPolicy(origPolicy);        }    }   ])', 1), ('([3:/android/app/cts/NotificationManagerTest.java]:[DND]:[3]:method_text:[) != Notification.VISIBILITY_SECRET);        assertFalse(createdChannel.canBypassDnd());    }   ])', 1), ('([4:/android/app/cts/NotificationManagerTest.java]:[DND]:[4]:method_text:[te(id, condition);        assertExpectedDndState(ruleToCreate.getInterruptionFilter());    }   ])', 1), ('([8:/android/app/cts/NotificationManagerTest.java]:[DND]:[8]:method_text:[        // make sure DND is off        assertExpectedDndState(INTERRUPTION_FILTER_ALL);    }   ])', 1), ('([6:/android/app/cts/NotificationManagerTest.java]:[DND]:[6]:method_text:[        // make sure DND is off        assertExpectedDndState(INTERRUPTION_FILTER_ALL);    }   ])', 1), ('([7:/android/app/cts/NotificationManagerTest.java]:[DND]:[7]:method_text:[cZenRule(secondId);        assertExpectedDndState(ruleToCreate.getInterruptionFilter());    }   ])', 1), ('([3:/android/server/wm/CrossAppDragAndDropTests.java]:[DND]:[3]:method_text:[result mismatch,"", expectedResult,                    results.get(resultKey));        }    }   ])', 1), ('([1:/android/app/cts/UiModeManagerTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[ar mode API when the caller does not hold the correct     * permission to use that API.     */   ])', 1), ('([4:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[4]:method_text:[eRingerDndOn());        tests.add(new TestSetRingerModePolicyAccessDndOn());        // TODO: Add a])', 1), ('([2:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[2]:method_text:[TestVibrateRinger());        tests.add(new TestSetRingerModePolicyAccess());        // TODO: Add a])', 1), ('([16:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[16]:method_text:[dioManager.getStreamVolume(AudioManager.STREAM_MUSIC));            status = PASS;        }    }])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[DND]:[1]:method_text:[ll(channel.getParentChannelId());        assertFalse(channel.isImportantConversation());    }   ])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[DND]:[1]:method_text:[icationChannel.CREATOR.createFromParcel(parcel);        assertEquals(channel, channel1);    }   ])', 1), ('([1:/com/android/cts/profileowner/AdminActionBookkeepingTest.java]:[DND]:[1]:method_text:[ * Test: It should be recored whether the Profile Owner or the user set the current IME.     */   ])', 1), ('([2:/android/app/notification/legacy29/cts/NotificationManager29Test.java]:[DND]:[2]:method_text:[ent.getActivity(                mContext, 0, new Intent(mContext, this.getClass()), 0);    }   ])', 1), ('([2:/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java]:[DND]:[2]:method_text:[ {      return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH);    }}])', 1), ('([1:/android/systemintents/cts/TestSystemIntents.java]:[ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS]:[1]:method_text:[etInstrumentation().getContext();        mPackageManager = mContext.getPackageManager();    }   ])', 1), ('([1:/android/opengl/cts/OpenGlEsVersionTest.java]:[C-6-1]:[1]:method_text:[ns, requiredExtension));            }        }    }    @CddTest(requirement=""7.1.4.1/C-6-1"")   ])', 1), ('([2:/android/ndef/cts/NdefTest.java]:[DND]:[2]:method_text:[on for input "" + bytesToString(b));            } catch (FormatException e) { }        }    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[DND]:[1]:method_text:[  mDpm.setCertInstallerPackage(ADMIN_RECEIVER_COMPONENT, null);        super.tearDown();    }   ])', 1), ('([3:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[3]:method_text:[ote        assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());    }   ])', 1), ('([1:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[1]:method_text:[nd after permission lost"");        } catch (Exception e) {            // pass        }    }   ])', 1), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[2]:method_text:[ } else {            Log.d(TAG, service.getName() + "" has a correct bind state"");        }    }}])', 1), ('([1:/com/android/cts/deviceowner/AdminActionBookkeepingTest.java]:[DND]:[1]:method_text:[    /**     * Test: Retrieving security logs should update the corresponding timestamp.     */   ])', 1), ('([2:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[2]:method_text:[  * Verifies that a car mode InCallService can enter and exit car mode using a priority.     */   ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[mode InCallService when a call is started when the device is     * already in car mode.     */   ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[ies that the lower priority app is bound     * and receives information about the call.     */   ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[milar to {@link #testSwitchToCarMode}, except exits car mode before the call terminates.     */   ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[ters car mode after the call starts.  Also     * uses multiple car mode InCallServices.     */   ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[ -- bind error"");        }        return queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);    }}])', 1), ('([6:/android/hardware/camera2/cts/CameraManagerTest.java]:[DND]:[6]:method_text:[        throw new IOException(""Could not read stdout of command:\xa0"" + command, e);        }    }}])', 1), ('([1:/com/android/cts/delegate/CertInstallDelegateTest.java]:[DND]:[1]:method_text:[ation().getContext();        mDpm = context.getSystemService(DevicePolicyManager.class);    }   ])', 1), (""([1:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[DND]:[1]:method_text:[ there's one user on the device or all     * secondary users / profiles are affiliated.     */   ])"", 1), ('([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[DND]:[1]:method_text:[ption {        mDpm.uninstallCaCert(null, TEST_CA.getBytes());        super.tearDown();    }   ])', 1)]"
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-5-2		[('android.app.cts.NotificationManagerTest', 10), ('android.media.cts.AudioManagerTest', 9), ('android.app.notification.legacy.cts.ConditionProviderServiceTest', 5), ('com.android.cts.verifier.audio.RingerModeActivity', 3), ('android.app.cts.NotificationChannelTest', 2), ('android.app.notification.legacy20.cts.LegacyNotificationManager20Test', 1), ('android.telecom.cts.CallRedirectionServiceTest', 1), ('android.accessibilityservice.cts.AccessibilityEndToEndTest', 1), ('android.server.wm.CrossAppDragAndDropTests', 1), ('com.android.cts.profileowner.AdminActionBookkeepingTest', 1), ('android.app.notification.legacy29.cts.NotificationManager29Test', 1), ('android.app.notification.legacy.cts.LegacyNotificationManagerTest', 1), ('android.ndef.cts.NdefTest', 1), ('com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest', 1), ('com.android.cts.deviceowner.AdminActionBookkeepingTest', 1), ('android.hardware.camera2.cts.CameraManagerTest', 1), ('com.android.cts.delegate.CertInstallDelegateTest', 1), ('com.android.cts.deviceandprofileowner.SecurityLoggingTest', 1), ('com.android.cts.certinstaller.DirectDelegatedCertInstallerTest', 1)]	[('setUp', 13), ('getInstrumentation', 11), ('tearDown', 11), ('of', 8), ('getPackageName', 7), ('getId', 7), ('getContext', 6), ('build', 6), ('toString', 5), ('getActiveNotifications', 5), ('getContentResolver', 4), ('getMessage', 4), ('getWho', 4), ('getBytes', 4), ('getResources', 2), ('getSystem', 2), ('getPackageManager', 2), ('getRingerMode', 2), ('cancelAll', 2), ('printStackTrace', 2), ('getKey', 2), ('getGroupKey', 2), ('getService', 1), ('areChannelsBypassingDnd', 1), ('hasVibrator', 1), ('getNotificationPolicy', 1), ('getCurrentInterruptionFilter', 1), ('getSimpleName', 1), ('randomUUID', 1), ('getNotificationChannels', 1), ('getNotificationChannelGroups', 1), ('getCount', 1), ('moveToFirst', 1), ('close', 1), ('getPendingIntent', 1), ('getClass', 1), ('getGroup', 1), ('getNotification', 1), ('getOverrideGroupKey', 1), ('supportsSplitScreenMultiWindow', 1), ('supportsFreeform', 1), ('getUserId', 1), ('BroadcastReceiver', 1), ('getAction', 1), ('release', 1), ('IntentFilter', 1)]	[('CtsAppTestCases', 12), ('CtsMediaTestCases', 9), ('CtsLegacyNotification27TestCases', 6), ('CtsLegacyNotification20TestCases', 1), ('CtsTelecomTestCases', 1), ('CtsAccessibilityServiceTestCases', 1), ('CtsWindowManagerDeviceTestCases', 1), ('CtsLegacyNotification29TestCases', 1), ('CtsNdefTestCases', 1), ('CtsCameraTestCases', 1)]		3.2.3.5/C-5-2	"""C-5-2] MUST honor the ‘android.bluetooth.adapter.action.REQUEST_DISCOVERABLE’ intent and show a system activity that requests discoverable mode. If device implementations support the DND feature; they: """	03020305.670502	3.2.3.5 android.bluetooth.adapter.action.REQUEST DND 3.2.3.5/C-5-2 REQUEST_DISCOVERABLE C-5-2				[('DND', 42), ('3.2.3.5', 1)]		CtsLegacyNotification20TestCases:android.app.notification.legacy20.cts.LegacyNotificationManager20Test.testNotificationListener_cancelNotifications CtsMediaTestCases:android.media.cts.AudioManagerTest.isMicrophoneMute CtsMediaTestCases:android.media.cts.AudioManagerTest.testMuteDndAffectedStreams CtsMediaTestCases:android.media.cts.AudioManagerTest.testMuteDndUnaffectedStreams CtsMediaTestCases:android.media.cts.AudioManagerTest.testSetStreamVolumeInPriorityOnlyMode CtsMediaTestCases:android.media.cts.AudioManagerTest.testAdjustVolumeInPriorityOnly CtsMediaTestCases:android.media.cts.AudioManagerTest.testPriorityOnlyMuteAll CtsMediaTestCases:android.media.cts.AudioManagerTest.testPriorityOnlyMediaAllowed CtsMediaTestCases:android.media.cts.AudioManagerTest.testPriorityOnlyAlarmsAllowed CtsMediaTestCases:android.media.cts.AudioManagerTest.testPriorityOnlyChannelsCanBypassDnd CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsAccessibilityServiceTestCases:android.accessibilityservice.cts.AccessibilityEndToEndTest.testTypeNotificationStateChangedAccessibilityEvent CtsAppTestCases:android.app.cts.NotificationManagerTest.isGroup CtsAppTestCases:android.app.cts.NotificationManagerTest.testConsolidatedNotificationPolicy CtsAppTestCases:android.app.cts.NotificationManagerTest.testConsolidatedNotificationPolicyMultiRules CtsAppTestCases:android.app.cts.NotificationManagerTest.testCreateChannel CtsAppTestCases:android.app.cts.NotificationManagerTest.testTotalSilenceOnlyMuteStreams CtsAppTestCases:android.app.cts.NotificationManagerTest.testAlarmsOnlyMuteStreams CtsAppTestCases:android.app.cts.NotificationManagerTest.testSetAutomaticZenRuleState CtsAppTestCases:android.app.cts.NotificationManagerTest.testSetAutomaticZenRuleState_turnOff CtsAppTestCases:android.app.cts.NotificationManagerTest.testSetAutomaticZenRuleState_deletedRule CtsAppTestCases:android.app.cts.NotificationManagerTest.testSetAutomaticZenRuleState_multipleRules CtsWindowManagerDeviceTestCases:android.server.wm.CrossAppDragAndDropTests.uptimeMillis None:com.android.cts.verifier.audio.RingerModeActivity.isLowRamDevice None:com.android.cts.verifier.audio.RingerModeActivity.TestVolumeDndAffectedStreamDndOn None:com.android.cts.verifier.audio.RingerModeActivity.TestVolumeDndAffectedStream CtsAppTestCases:android.app.cts.NotificationChannelTest.testConstructor CtsAppTestCases:android.app.cts.NotificationChannelTest.testWriteToParcel CtsLegacyNotification29TestCases:android.app.notification.legacy29.cts.NotificationManager29Test.isNotificationPolicyAccessGranted CtsLegacyNotification27TestCases:android.app.notification.legacy.cts.LegacyNotificationManagerTest.testSetNotificationPolicy_preP_setOldNewFields CtsNdefTestCases:android.ndef.cts.NdefTest.testInvalidParsing CtsLegacyNotification27TestCases:android.app.notification.legacy.cts.ConditionProviderServiceTest.testUnboundCPSMaintainsCondition_addsNewRule CtsLegacyNotification27TestCases:android.app.notification.legacy.cts.ConditionProviderServiceTest.testUnboundCPSMaintainsCondition_otherConditionChanges CtsLegacyNotification27TestCases:android.app.notification.legacy.cts.ConditionProviderServiceTest.testUnboundCPSMaintainsCondition_otherProviderRuleChanges CtsLegacyNotification27TestCases:android.app.notification.legacy.cts.ConditionProviderServiceTest.testRequestRebindWhenLostAccess CtsLegacyNotification27TestCases:android.app.notification.legacy.cts.ConditionProviderServiceTest.testMethodsExistAndDoNotThrow CtsCameraTestCases:android.hardware.camera2.cts.CameraManagerTest.testCameraManagerWithDnD		/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java	[('/android/app/cts/NotificationManagerTest.java', 11), ('/android/media/cts/AudioManagerTest.java', 10), ('/android/app/notification/legacy/cts/ConditionProviderServiceTest.java', 6), ('/com/android/cts/verifier/audio/RingerModeActivity.java', 4), ('/android/app/cts/NotificationChannelTest.java', 3), ('/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 2), ('/android/telecom/cts/CallRedirectionServiceTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 2), ('/android/server/wm/CrossAppDragAndDropTests.java', 2), ('/com/android/cts/profileowner/AdminActionBookkeepingTest.java', 2), ('/android/app/notification/legacy29/cts/NotificationManager29Test.java', 2), ('/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java', 2), ('/android/ndef/cts/NdefTest.java', 2), ('/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 2), ('/com/android/cts/deviceowner/AdminActionBookkeepingTest.java', 2), ('/android/hardware/camera2/cts/CameraManagerTest.java', 2), ('/com/android/cts/delegate/CertInstallDelegateTest.java', 2), ('/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java', 2), ('/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 2)]	"[('([1:/android/app/cts/NotificationManagerTest.java]:[DND]:[1]:method_text:[nalFilter);            mNotificationManager.setNotificationPolicy(origPolicy);        }    }   ])', 3), ('([2:/android/media/cts/AudioManagerTest.java]:[DND]:[2]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);        }    }   ])', 2), ('([3:/android/media/cts/AudioManagerTest.java]:[DND]:[3]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);        }    }   ])', 2), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[2]:method_text:[ote        assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());    }   ])', 2), ('([2:/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java]:[DND]:[2]:method_text:[InterruptedException ex) {                // pass            }        }        return n;    }}])', 1), ('([8:/android/media/cts/AudioManagerTest.java]:[DND]:[8]:method_text:[    @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")   ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[DND]:[1]:method_text:[ckageName(), getInstrumentation(), true);            testStreamMuting(stream);        }    }   ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[DND]:[1]:method_text:[etStreamMute failed."",                    mAudioManager.isStreamMute(stream));        }    }   ])', 1), ('([4:/android/media/cts/AudioManagerTest.java]:[DND]:[4]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);        }    }   ])', 1), ('([7:/android/media/cts/AudioManagerTest.java]:[DND]:[7]:method_text:[ss(mContext.getPackageName(), getInstrumentation(),                    false);        }    }   ])', 1), ('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);        assertTrue(result);    }}])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[DND]:[1]:method_text:[notificationManager.deleteNotificationChannel(channel.getId());        }    }    @MediumTest   ])', 1), ('([4:/android/app/cts/NotificationManagerTest.java]:[DND]:[4]:method_text:[anupSendBubbleActivity() {        mContext.unregisterReceiver(mBubbleBroadcastReceiver);    }   ])', 1), ('([5:/android/app/cts/NotificationManagerTest.java]:[DND]:[5]:method_text:[nalFilter);            mNotificationManager.setNotificationPolicy(origPolicy);        }    }   ])', 1), ('([3:/android/app/cts/NotificationManagerTest.java]:[DND]:[3]:method_text:[) != Notification.VISIBILITY_SECRET);        assertFalse(createdChannel.canBypassDnd());    }   ])', 1), ('([4:/android/app/cts/NotificationManagerTest.java]:[DND]:[4]:method_text:[te(id, condition);        assertExpectedDndState(ruleToCreate.getInterruptionFilter());    }   ])', 1), ('([8:/android/app/cts/NotificationManagerTest.java]:[DND]:[8]:method_text:[        // make sure DND is off        assertExpectedDndState(INTERRUPTION_FILTER_ALL);    }   ])', 1), ('([6:/android/app/cts/NotificationManagerTest.java]:[DND]:[6]:method_text:[        // make sure DND is off        assertExpectedDndState(INTERRUPTION_FILTER_ALL);    }   ])', 1), ('([7:/android/app/cts/NotificationManagerTest.java]:[DND]:[7]:method_text:[cZenRule(secondId);        assertExpectedDndState(ruleToCreate.getInterruptionFilter());    }   ])', 1), ('([3:/android/server/wm/CrossAppDragAndDropTests.java]:[DND]:[3]:method_text:[result mismatch,"", expectedResult,                    results.get(resultKey));        }    }   ])', 1), ('([4:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[4]:method_text:[eRingerDndOn());        tests.add(new TestSetRingerModePolicyAccessDndOn());        // TODO: Add a])', 1), ('([2:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[2]:method_text:[TestVibrateRinger());        tests.add(new TestSetRingerModePolicyAccess());        // TODO: Add a])', 1), ('([16:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[16]:method_text:[dioManager.getStreamVolume(AudioManager.STREAM_MUSIC));            status = PASS;        }    }])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[DND]:[1]:method_text:[ll(channel.getParentChannelId());        assertFalse(channel.isImportantConversation());    }   ])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[DND]:[1]:method_text:[icationChannel.CREATOR.createFromParcel(parcel);        assertEquals(channel, channel1);    }   ])', 1), ('([1:/com/android/cts/profileowner/AdminActionBookkeepingTest.java]:[DND]:[1]:method_text:[ * Test: It should be recored whether the Profile Owner or the user set the current IME.     */   ])', 1), ('([2:/android/app/notification/legacy29/cts/NotificationManager29Test.java]:[DND]:[2]:method_text:[ent.getActivity(                mContext, 0, new Intent(mContext, this.getClass()), 0);    }   ])', 1), ('([2:/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java]:[DND]:[2]:method_text:[ {      return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH);    }}])', 1), ('([2:/android/ndef/cts/NdefTest.java]:[DND]:[2]:method_text:[on for input "" + bytesToString(b));            } catch (FormatException e) { }        }    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[DND]:[1]:method_text:[  mDpm.setCertInstallerPackage(ADMIN_RECEIVER_COMPONENT, null);        super.tearDown();    }   ])', 1), ('([3:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[3]:method_text:[ote        assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());    }   ])', 1), ('([1:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[1]:method_text:[nd after permission lost"");        } catch (Exception e) {            // pass        }    }   ])', 1), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[2]:method_text:[ } else {            Log.d(TAG, service.getName() + "" has a correct bind state"");        }    }}])', 1), ('([1:/com/android/cts/deviceowner/AdminActionBookkeepingTest.java]:[DND]:[1]:method_text:[    /**     * Test: Retrieving security logs should update the corresponding timestamp.     */   ])', 1), ('([6:/android/hardware/camera2/cts/CameraManagerTest.java]:[DND]:[6]:method_text:[        throw new IOException(""Could not read stdout of command:\xa0"" + command, e);        }    }}])', 1), ('([1:/com/android/cts/delegate/CertInstallDelegateTest.java]:[DND]:[1]:method_text:[ation().getContext();        mDpm = context.getSystemService(DevicePolicyManager.class);    }   ])', 1), (""([1:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[DND]:[1]:method_text:[ there's one user on the device or all     * secondary users / profiles are affiliated.     */   ])"", 1), ('([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[DND]:[1]:method_text:[ption {        mDpm.uninstallCaCert(null, TEST_CA.getBytes());        super.tearDown();    }   ])', 1)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-2-6		[('android.widget.cts.PopupWindowTest', 44), ('android.text.method.cts.ArrowKeyMovementMethodTest', 32), ('android.widget.cts.LinearLayoutTest', 21), ('android.widget.cts.RelativeLayoutTest', 13), ('android.view.cts.ViewStubTest', 12), ('android.app.role.cts.RoleManagerTest', 9), ('android.transition.cts.ActivityTransitionTest', 9), ('android.widget.cts.AbsSpinnerTest', 8), ('android.widget.cts.TableRowTest', 8), ('android.media.cts.DecodeAccuracyTest', 7), ('android.server.wm.DecorInsetSdk29Tests', 5), ('android.view.inputmethod.cts.SearchViewTest', 4), ('android.widget.cts.NumberPickerTest', 4), ('android.view.inputmethod.cts.InputMethodManagerTest', 4), ('android.widget.cts.SearchView_CursorTest', 4), ('android.view.cts.View_DefaultFocusHighlightTest', 4), ('android.media.tv.cts.TvInputServiceTest', 3), ('android.text.cts.AutoTextTest', 3), ('android.uirendering.cts.testclasses.SurfaceViewTests', 3), ('android.widget.cts.RemoteViews_ActionExceptionTest', 2), ('android.telephony.cts.MmsTest', 2), ('android.view.cts.TextureViewCameraTest', 2), ('android.widget.cts.DigitalClockTest', 2), ('android.graphics.drawable.cts.LayerDrawableTest', 2), ('android.provider.cts.SmsBackupRestoreTest', 2), ('android.content.res.cts.Resources_ThemeTest', 2), ('android.server.wm.WindowInsetsAnimationSynchronicityTests', 2), ('android.media.cts.MediaCodecPlayerTest', 2), ('android.carrierapi.cts.NetworkScanApiTest', 2), ('android.view.cts.VelocityTrackerTest', 1), ('com.android.cts.managedprofile.LauncherAppsTest', 1), ('android.acceleration.cts.HardwareAccelerationTest', 1), ('android.accessibilityservice.cts.AccessibilityButtonTest', 1), ('android.colormode.cts.AttributeWideColorModeTest', 1), ('android.text.method.cts.BackspaceTest', 1), ('android.text.method.cts.PasswordTransformationMethodTest', 1), ('android.server.wm.SplitScreenTests', 1), ('android.content.cts.ContextAccessTest', 1), ('android.accessibilityservice.cts.AccessibilityButtonSdk29Test', 1), ('android.app.cts.ActivityManagerProcessStateTest', 1), ('android.widget.cts.ToolbarWithMarginsTest', 1), ('android.view.cts.View_BaseSavedStateTest', 1), ('android.graphics.drawable.cts.ScaleDrawableTest', 1), ('android.content.pm.cts.shortcut.backup.publisher3.ShortcutManagerPreBackupTest', 1), ('android.security.cts.PerfEventParanoidTest', 1), ('android.view.cts.ContextThemeWrapperTest', 1), ('android.view.inputmethod.cts.CompletionInfoTest', 1), ('android.view.cts.InputDeviceEnabledTest', 1), ('com.android.cts.deviceandprofileowner.userrestrictions.DeviceOwnerUserRestrictionsTest', 1)]	[('setup', 21), ('getInstrumentation', 16), ('any', 14), ('getActivity', 13), ('setUp', 9), ('getTargetContext', 8), ('Intent', 5), ('getContext', 5), ('getResources', 5), ('toBundle', 5), ('waitForTargetActivity', 5), ('requestFocus', 3), ('getAlpha', 3), ('enoughToFilter', 3), ('build', 2), ('getAction', 2), ('AccessibilityDumpOnFailureRule', 2), ('waitForIdleSync', 2), ('resetCounts', 2), ('get', 2), ('tearDown', 2), ('release', 2), ('getDefault', 2), ('getUiAutomation', 2), ('toLowerCase', 2), ('getPackageManager', 1), ('saveRoleHolder', 1), ('targetCurrentSdkAndChangeDefaultSmsThenDeniedAutomatically', 1), ('targetSdk28AndChangeDefaultSmsForAnotherAppThenDeniedAutomatically', 1), ('smsRoleHasHolder', 1), ('obtain', 1), ('teardown', 1), ('recycle', 1), ('addDynamicShortcuts', 1), ('SentReceiver', 1), ('Object', 1), ('getResultCode', 1), ('AccessibilityButtonCallback', 1), ('getService', 1), ('getAccessibilityButtonController', 1), ('getNumberOfCameras', 1), ('PasswordTransformationMethod', 1), ('viewsNotStripped', 1), ('viewsStripped', 1), ('earlyExitStop', 1), ('Fade', 1), ('getWindow', 1), ('untargetedViews', 1), ('removeSharedViews', 1), ('getParent', 1), ('sharedElementCopied', 1), ('SharedElementCallback', 1), ('getBackground', 1), ('getBitmap', 1), ('countDown', 1), ('StubCallback', 1), ('StubTimeShiftPositionCallback', 1), ('StubRecordingCallback', 1), ('resetPassedValues', 1), ('UnlockScreenRule', 1), ('getSimpleName', 1), ('getFields', 1), ('getHelper', 1), ('data', 1), ('matches', 1), ('toUpperCase', 1), ('getConfiguration', 1), ('oneTimeSetup', 1), ('getName', 1), ('getContentResolver', 1), ('newTheme', 1), ('LimitedErrorCollector', 1), ('getChildCount', 1), ('getCursor', 1), ('lockCanvas', 1), ('LinearInterpolator', 1), ('start', 1), ('getAllowedRestrictions', 1), ('length', 1)]	[('CtsWidgetTestCases', 107), ('CtsTextTestCases', 37), ('CtsViewTestCases', 22), ('CtsRoleTestCases', 9), ('CtsTransitionTestCases', 9), ('CtsInputMethodTestCases', 9), ('CtsMediaTestCases', 9), ('CtsWindowManagerSdk29TestCases', 5), ('CtsWindowManagerDeviceTestCases', 3), ('CtsContentTestCases', 3), ('CtsTvTestCases', 3), ('CtsGraphicsTestCases', 3), ('CtsUiRenderingTestCases', 3), ('CtsTelephonyTestCases', 2), ('CtsProviderTestCases', 2), ('CtsCarrierApiTestCases', 2), ('CtsAccelerationTestCases', 1), ('CtsAccessibilityServiceTestCases', 1), ('CtsColorModeTestCases', 1), ('CtsAccessibilityServiceSdk29TestCases', 1), ('CtsAppTestCases', 1)]		3.2.3.5/C-2-6	"""C-2-6] MUST honor the android.intent.action.SENDTO and android.intent.action.VIEW intents and provide an activity to send/display SMS messages. """	03020305.670206	SENDTO 3.2.3.5/C-2-6 android.intent.action.SENDTO SMS VIEW 3.2.3.5 C-2-6 android.intent.action.VIEW				[('VIEW', 221), ('SMS', 14), ('SENDTO', 2)]		CtsWidgetTestCases:android.widget.cts.RemoteViews_ActionExceptionTest.testConstructor CtsRoleTestCases:android.app.role.cts.RoleManagerTest.isEmpty CtsRoleTestCases:android.app.role.cts.RoleManagerTest.targetSdk28AndChangeDefaultSmsAndAllowThenIsDefaultSms CtsRoleTestCases:android.app.role.cts.RoleManagerTest.targetSdk28AndChangeDefaultSmsForAnotherAppAsHolderAndAllowThenTheOtherAppIsDefaultSms CtsRoleTestCases:android.app.role.cts.RoleManagerTest.isNotEmpty CtsRoleTestCases:android.app.role.cts.RoleManagerTest.addSmsRoleHolderThenPermissionIsGranted CtsRoleTestCases:android.app.role.cts.RoleManagerTest.removeSmsRoleHolderThenPermissionIsRevoked CtsRoleTestCases:android.app.role.cts.RoleManagerTest.removeSmsRoleHolderThenDialerRolePermissionIsRetained CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testSize CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testAccessContentView CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testShowAsDropDown_ClipToScreen_Overlap_Offset CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testShowAsDropDown_ClipToScreen_Overlap_OutOfScreen CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testShowAsDropDown_ClipToScreen_TooBig CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testShowAtLocation CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testShowAsDropDownWithOffsets CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testOverlapAnchor CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight_topAnchor CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight_topAnchor_ignoringBottomDecoration CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight_topAnchor_offset2 CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight_topAnchor_offset2_ignoringBottomDecoration CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight_topAnchor_largeOffset CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight_topAnchor_largeOffset_ignoringBottomDecoration CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight_topAnchor_maxOffset CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight_topAnchor_maxOffset_ignoringBottomDecoration CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight_topAnchor_negativeOffset CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight_topAnchor_negativeOffset_ignoringBottomDecoration CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight_middleAnchor CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight_middleAnchor_ignoreBottomDecoration CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight_bottomAnchor CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testGetMaxAvailableHeight_bottomAnchor_ignoreBottomDecoration CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testDismiss CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testSetOnDismissListener CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testUpdate CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testEnterExitInterruption CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testEnterExitTransitionAsDropDown CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testEnterExitTransitionAtLocation CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testEnterExitTransitionAsDropDownWithCustomBounds CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testUpdatePositionAndDimension CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testUpdateDimensionAndAlignAnchorView CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testUpdateDimensionAndAlignAnchorViewWithOffsets CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testIsAboveAnchor CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testSetTouchInterceptor CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testSetWindowLayoutMode CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testVerticallyClippedBeforeAdjusted CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testClipToScreenClipsToInsets CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testPositionAfterParentScroll CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testPositionAfterAnchorRemoval CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testAnchorInPopup CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testFocusAfterOrientation CtsWidgetTestCases:android.widget.cts.PopupWindowTest.testWinAnimationDurationNoShortenByTinkeredScale CtsWidgetTestCases:android.widget.cts.RelativeLayoutTest.testSetIgnoreGravity CtsWidgetTestCases:android.widget.cts.RelativeLayoutTest.testAccessGravity CtsWidgetTestCases:android.widget.cts.RelativeLayoutTest.testSetHorizontalGravity CtsWidgetTestCases:android.widget.cts.RelativeLayoutTest.testSetVerticalGravity CtsWidgetTestCases:android.widget.cts.RelativeLayoutTest.testGetBaseline CtsWidgetTestCases:android.widget.cts.RelativeLayoutTest.testGenerateLayoutParamsFromNull CtsWidgetTestCases:android.widget.cts.RelativeLayoutTest.testGenerateDefaultLayoutParams CtsWidgetTestCases:android.widget.cts.RelativeLayoutTest.testGenerateLayoutParamsFromMarginParams CtsWidgetTestCases:android.widget.cts.RelativeLayoutTest.testCheckLayoutParams CtsWidgetTestCases:android.widget.cts.RelativeLayoutTest.testGetRule CtsWidgetTestCases:android.widget.cts.RelativeLayoutTest.testBaselineAlignment CtsWidgetTestCases:android.widget.cts.RelativeLayoutTest.testBidiWidth CtsTelephonyTestCases:android.telephony.cts.MmsTest.shouldParseContentDisposition CtsTelephonyTestCases:android.telephony.cts.MmsTest.testSendMmsMessage CtsWindowManagerSdk29TestCases:android.server.wm.DecorInsetSdk29Tests.testDecorView_consumesAllInsets_byDefault CtsWindowManagerSdk29TestCases:android.server.wm.DecorInsetSdk29Tests.testDecorView_consumesNavBar_ifLayoutHideNavIsNotSet CtsWindowManagerSdk29TestCases:android.server.wm.DecorInsetSdk29Tests.testDecorView_doesntConsumeNavBar_ifLayoutHideNavIsSet CtsWindowManagerSdk29TestCases:android.server.wm.DecorInsetSdk29Tests.testDecorView_doesntConsumeNavBar_ifDecorDoesntFitSystemWindows CtsAccelerationTestCases:android.acceleration.cts.HardwareAccelerationTest.testIsHardwareAccelerated CtsViewTestCases:android.view.cts.TextureViewCameraTest.testTextureViewActivity CtsTextTestCases:android.text.method.cts.BackspaceTest.BaseKeyListener CtsTextTestCases:android.text.method.cts.PasswordTransformationMethodTest.isFocused CtsTransitionTestCases:android.transition.cts.ActivityTransitionTest.TrackingVisibility CtsTransitionTestCases:android.transition.cts.ActivityTransitionTest.testMakeBasic CtsTransitionTestCases:android.transition.cts.ActivityTransitionTest.getVisibility CtsTransitionTestCases:android.transition.cts.ActivityTransitionTest.getVisibility CtsTransitionTestCases:android.transition.cts.ActivityTransitionTest.getVisibility CtsTransitionTestCases:android.transition.cts.ActivityTransitionTest.testAnimationQuery CtsTransitionTestCases:android.transition.cts.ActivityTransitionTest.TrackingVisibilityWithAnimator CtsTransitionTestCases:android.transition.cts.ActivityTransitionTest.finishAfterTransition CtsTransitionTestCases:android.transition.cts.ActivityTransitionTest.finishAfterTransition CtsWidgetTestCases:android.widget.cts.DigitalClockTest.testOnDetachedFromWindow CtsWidgetTestCases:android.widget.cts.DigitalClockTest.testOnAttachedToWindow CtsViewTestCases:android.view.cts.ViewStubTest.testConstructor CtsViewTestCases:android.view.cts.ViewStubTest.testDraw CtsViewTestCases:android.view.cts.ViewStubTest.testSetVisibility CtsViewTestCases:android.view.cts.ViewStubTest.testAccessLayoutResource CtsViewTestCases:android.view.cts.ViewStubTest.testViewStubHasNoDimensions CtsViewTestCases:android.view.cts.ViewStubTest.testSetOnInflateListener CtsViewTestCases:android.view.cts.ViewStubTest.testSetOnInflateListenerError CtsViewTestCases:android.view.cts.ViewStubTest.testAccessInflatedId CtsViewTestCases:android.view.cts.ViewStubTest.testInflate CtsViewTestCases:android.view.cts.ViewStubTest.testInflateErrorInvalidLayoutResource CtsViewTestCases:android.view.cts.ViewStubTest.testInflateErrorNullParent CtsWindowManagerDeviceTestCases:android.server.wm.SplitScreenTests.isHomeRecentsComponent CtsContentTestCases:android.content.cts.ContextAccessTest.getDisplay CtsTvTestCases:android.media.tv.cts.TvInputServiceTest.TvInputServiceTest CtsTvTestCases:android.media.tv.cts.TvInputServiceTest.testTvInputServiceSession CtsTvTestCases:android.media.tv.cts.TvInputServiceTest.testTvInputServiceRecordingSession CtsGraphicsTestCases:android.graphics.drawable.cts.LayerDrawableTest.testInflate CtsInputMethodTestCases:android.view.inputmethod.cts.SearchViewTest.testTapThenSetQuery CtsInputMethodTestCases:android.view.inputmethod.cts.SearchViewTest.testShowImeWithSearchViewFocus CtsInputMethodTestCases:android.view.inputmethod.cts.SearchViewTest.testShowImeWhenSearchViewFocusInListView CtsWidgetTestCases:android.widget.cts.AbsSpinnerTest.testSetSelectionIntBoolean CtsWidgetTestCases:android.widget.cts.AbsSpinnerTest.testSetSelectionInt CtsWidgetTestCases:android.widget.cts.AbsSpinnerTest.testAccessAdapter CtsWidgetTestCases:android.widget.cts.AbsSpinnerTest.testRequestLayout CtsWidgetTestCases:android.widget.cts.AbsSpinnerTest.testPointToPosition CtsWidgetTestCases:android.widget.cts.AbsSpinnerTest.testGetSelectedView CtsWidgetTestCases:android.widget.cts.AbsSpinnerTest.testOnSaveAndRestoreInstanceState CtsMediaTestCases:android.media.cts.DecodeAccuracyTest.testGLViewDecodeAccuracy CtsMediaTestCases:android.media.cts.DecodeAccuracyTest.testGLViewLargerHeightDecodeAccuracy CtsMediaTestCases:android.media.cts.DecodeAccuracyTest.testGLViewLargerWidthDecodeAccuracy CtsMediaTestCases:android.media.cts.DecodeAccuracyTest.testSurfaceViewVideoDecodeAccuracy CtsMediaTestCases:android.media.cts.DecodeAccuracyTest.testSurfaceViewLargerHeightDecodeAccuracy CtsMediaTestCases:android.media.cts.DecodeAccuracyTest.testSurfaceViewLargerWidthDecodeAccuracy CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testAccessBaselineAligned CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testGetBaseline CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testAccessBaselineAlignedChildIndex CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testAccessWeightSum CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testWeightDistribution CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testGenerateLayoutParams CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testCheckLayoutParams CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testGenerateDefaultLayoutParams CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testGenerateLayoutParamsFromMarginParams CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testLayoutHorizontal CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testLayoutVertical CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testVerticalCenterGravityOnHorizontalLayout CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testBottomGravityOnHorizontalLayout CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testHorizontalCenterGravityOnVerticalLayout CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testRightGravityOnVerticalLayout CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testVisibilityAffectsLayout CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testDividersInVerticalLayout CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testDividersInHorizontalLayout CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testZeroWeightDistributionHorizontal CtsWidgetTestCases:android.widget.cts.LinearLayoutTest.testZeroWeightDistributionVertical CtsTextTestCases:android.text.cts.AutoTextTest.testGet CtsTextTestCases:android.text.cts.AutoTextTest.testGetSize CtsAccessibilityServiceSdk29TestCases:android.accessibilityservice.cts.AccessibilityButtonSdk29Test.postTestTearDown CtsAppTestCases:android.app.cts.ActivityManagerProcessStateTest.removeTestAppFromWhitelists CtsWidgetTestCases:android.widget.cts.ToolbarWithMarginsTest.testSetTitleMargins CtsProviderTestCases:android.provider.cts.SmsBackupRestoreTest.isFeatureSupported CtsProviderTestCases:android.provider.cts.SmsBackupRestoreTest.testSmsBackupRestore CtsWidgetTestCases:android.widget.cts.NumberPickerTest.testAccessValue CtsWidgetTestCases:android.widget.cts.NumberPickerTest.testInteractionWithSwipeUp CtsWidgetTestCases:android.widget.cts.NumberPickerTest.testSelectionDividerHeight CtsContentTestCases:android.content.res.cts.Resources_ThemeTest.testRebase CtsWindowManagerDeviceTestCases:android.server.wm.WindowInsetsAnimationSynchronicityTests.testControl_rendersSynchronouslyBetweenImeWindowAndAppContent CtsInputMethodTestCases:android.view.inputmethod.cts.InputMethodManagerTest.testIsActive CtsInputMethodTestCases:android.view.inputmethod.cts.InputMethodManagerTest.testIsAcceptingText CtsInputMethodTestCases:android.view.inputmethod.cts.InputMethodManagerTest.testShowInputMethodPicker CtsWidgetTestCases:android.widget.cts.SearchView_CursorTest.testSuggestionFiltering CtsWidgetTestCases:android.widget.cts.SearchView_CursorTest.testSuggestionSelection CtsWidgetTestCases:android.widget.cts.SearchView_CursorTest.testSuggestionEnterKey CtsMediaTestCases:android.media.cts.MediaCodecPlayerTest.MediaCodecPlayerTest CtsMediaTestCases:android.media.cts.MediaCodecPlayerTest.testPlaybackSwitchViews CtsUiRenderingTestCases:android.uirendering.cts.testclasses.SurfaceViewTests.testMovingWhiteSurfaceView CtsUiRenderingTestCases:android.uirendering.cts.testclasses.SurfaceViewTests.testSurfaceHolderHardwareCanvas None:android.content.pm.cts.shortcut.backup.publisher3.ShortcutManagerPreBackupTest.testPreBackup None:android.security.cts.PerfEventParanoidTest.testPerfEventRestricted CtsCarrierApiTestCases:android.carrierapi.cts.NetworkScanApiTest.testRequestNetworkScan CtsCarrierApiTestCases:android.carrierapi.cts.NetworkScanApiTest.testRequestNetworkScanLocationOffFail CtsViewTestCases:android.view.cts.View_DefaultFocusHighlightTest.testSettersAndGetters CtsViewTestCases:android.view.cts.View_DefaultFocusHighlightTest.testInflating CtsViewTestCases:android.view.cts.View_DefaultFocusHighlightTest.testIsDefaultFocusHighlightNeeded None:com.android.cts.deviceandprofileowner.userrestrictions.DeviceOwnerUserRestrictionsTest.getDisallowedRestrictions CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.MyMetaKeyKeyListener CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnTakeFocus CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnTakeFocusWithNullLayout CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnTakeFocusNullView CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnTakeFocusNullSpannable CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnKeyDownWithKeyCodeUp CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnKeyDownWithKeyCodeDown CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnKeyDownWithKeyCodeLeft CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnKeyDownWithKeyCodeRight CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnKeyDownWithKeyCodePageUp CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnKeyDownWithKeyCodePageDown CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnKeyDownWithKeyCodeMoveHome CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnKeyDownWithKeyCodeMoveEnd CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnKeyDownWithNullLayout CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnKeyOther CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnKeyDownWithOtherKeyCode CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnTouchEvent CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnTouchEventWithNullLayout CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnTouchEventWithoutFocus CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnTouchEventNullView CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnTouchEventNullSpannable CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnTouchEventNullEvent CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testIntializeNullSpannable CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnTrackballEven CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testOnKeyUp CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testFollowingWordStartToEnd CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testPrecedingWordEndToStart CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testFollowingWordStartToEndWithNumbers CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testFollowingWordEndToStartWithNumbers CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testFollowingWordStartToEndWithOneCharFinalWord CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testFollowingWordEndToStartWithOneCharFinalWord CtsTextTestCases:android.text.method.cts.ArrowKeyMovementMethodTest.testMovementFromMiddleOfWord CtsWidgetTestCases:android.widget.cts.TableRowTest.testSetOnHierarchyChangeListener CtsWidgetTestCases:android.widget.cts.TableRowTest.testGetVirtualChildAt CtsWidgetTestCases:android.widget.cts.TableRowTest.testGetVirtualChildCount CtsWidgetTestCases:android.widget.cts.TableRowTest.testCheckLayoutParams CtsWidgetTestCases:android.widget.cts.TableRowTest.testGenerateLayoutParamsFromLayoutParams CtsWidgetTestCases:android.widget.cts.TableRowTest.testGenerateLayoutParamsFromLayoutParamsNull CtsWidgetTestCases:android.widget.cts.TableRowTest.testOnMeasure		/android/widget/cts/TableRowTest.java	[('/android/widget/cts/PopupWindowTest.java', 45), ('/android/text/method/cts/ArrowKeyMovementMethodTest.java', 33), ('/android/widget/cts/LinearLayoutTest.java', 22), ('/android/widget/cts/RelativeLayoutTest.java', 14), ('/android/view/cts/ViewStubTest.java', 13), ('/android/app/role/cts/RoleManagerTest.java', 10), ('/android/transition/cts/ActivityTransitionTest.java', 10), ('/android/widget/cts/AbsSpinnerTest.java', 9), ('/android/widget/cts/TableRowTest.java', 9), ('/android/media/cts/DecodeAccuracyTest.java', 8), ('/android/server/wm/DecorInsetSdk29Tests.java', 6), ('/android/view/inputmethod/cts/SearchViewTest.java', 5), ('/android/widget/cts/NumberPickerTest.java', 5), ('/android/view/inputmethod/cts/InputMethodManagerTest.java', 5), ('/android/widget/cts/SearchView_CursorTest.java', 5), ('/android/view/cts/View_DefaultFocusHighlightTest.java', 5), ('/android/media/tv/cts/TvInputServiceTest.java', 4), ('/android/text/cts/AutoTextTest.java', 4), ('/android/uirendering/cts/testclasses/SurfaceViewTests.java', 4), ('/android/widget/cts/RemoteViews_ActionExceptionTest.java', 3), ('/android/telephony/cts/MmsTest.java', 3), ('/android/view/cts/TextureViewCameraTest.java', 3), ('/android/widget/cts/DigitalClockTest.java', 3), ('/android/graphics/drawable/cts/LayerDrawableTest.java', 3), ('/android/provider/cts/SmsBackupRestoreTest.java', 3), ('/android/content/res/cts/Resources_ThemeTest.java', 3), ('/android/server/wm/WindowInsetsAnimationSynchronicityTests.java', 3), ('/android/media/cts/MediaCodecPlayerTest.java', 3), ('/android/carrierapi/cts/NetworkScanApiTest.java', 3), ('/android/view/cts/VelocityTrackerTest.java', 2), ('/com/android/cts/managedprofile/LauncherAppsTest.java', 2), ('/android/acceleration/cts/HardwareAccelerationTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityButtonTest.java', 2), ('/android/colormode/cts/AttributeWideColorModeTest.java', 2), ('/android/text/method/cts/BackspaceTest.java', 2), ('/android/text/method/cts/PasswordTransformationMethodTest.java', 2), ('/android/server/wm/SplitScreenTests.java', 2), ('/android/content/cts/ContextAccessTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 2), ('/android/app/cts/ActivityManagerProcessStateTest.java', 2), ('/android/widget/cts/ToolbarWithMarginsTest.java', 2), ('/android/view/cts/View_BaseSavedStateTest.java', 2), ('/android/graphics/drawable/cts/ScaleDrawableTest.java', 2), ('/android/content/pm/cts/shortcut/backup/publisher3/ShortcutManagerPreBackupTest.java', 2), ('/android/security/cts/PerfEventParanoidTest.java', 2), ('/android/view/cts/ContextThemeWrapperTest.java', 2), ('/android/view/inputmethod/cts/CompletionInfoTest.java', 2), ('/android/view/cts/InputDeviceEnabledTest.java', 2), ('/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java', 2)]	"[('([3:/android/app/role/cts/RoleManagerTest.java]:[SMS]:[3]:method_text:[t(TIMEOUT_MILLIS);        assertThat(result.first).isEqualTo(Activity.RESULT_CANCELED);    }   ])', 2), ('([33:/android/widget/cts/RelativeLayoutTest.java]:[VIEW]:[33]:method_text:[igned(relativeLayout, view11);        assertEquals(view11.getTop(), view10.getBottom());    }   ])', 2), ('([3:/android/widget/cts/RemoteViews_ActionExceptionTest.java]:[VIEW]:[3]:method_text:[on}. */@SmallTest@RunWith(AndroidJUnit4.class)public class RemoteViews_ActionExceptionTest {   ])', 1), ('([2:/android/widget/cts/RemoteViews_ActionExceptionTest.java]:[VIEW]:[2]:method_text:[teViews.ActionException(message);        new RemoteViews.ActionException(new Exception());    }}])', 1), ('([4:/android/app/role/cts/RoleManagerTest.java]:[SMS]:[4]:method_text:[Shade() {        sContext.sendBroadcast(new Intent(Intent.ACTION_CLOSE_SYSTEM_DIALOGS));    }   ])', 1), ('([7:/android/app/role/cts/RoleManagerTest.java]:[SMS]:[7]:method_text:[als(                Telephony.Sms.getDefaultSmsPackage(sContext), APP_28_PACKAGE_NAME));    }   ])', 1), ('([8:/android/app/role/cts/RoleManagerTest.java]:[SMS]:[8]:method_text:[equals(                Telephony.Sms.getDefaultSmsPackage(sContext), APP_PACKAGE_NAME));    }   ])', 1), ('([3:/android/app/role/cts/RoleManagerTest.java]:[SMS]:[3]:method_text:[nager.ROLE_SMS));        assertThat(getRoleHolders(RoleManager.ROLE_SMS)).isNotEmpty();    }   ])', 1), ('([4:/android/app/role/cts/RoleManagerTest.java]:[SMS]:[4]:method_text:[END_SMS,                APP_PACKAGE_NAME)).isEqualTo(PackageManager.PERMISSION_GRANTED);    }   ])', 1), ('([8:/android/app/role/cts/RoleManagerTest.java]:[SMS]:[8]:method_text:[SEND_SMS,                APP_PACKAGE_NAME)).isEqualTo(PackageManager.PERMISSION_DENIED);    }   ])', 1), ('([8:/android/app/role/cts/RoleManagerTest.java]:[SMS]:[8]:method_text:[n isWatch() {        return sPackageManager.hasSystemFeature(PackageManager.FEATURE_WATCH);    }}])', 1), ('([21:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[21]:method_text:[ = InstrumentationRegistry.getContext();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([24:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[24]:method_text:[tentView, mPopupWindow.getContentView());        assertTrue(mPopupWindow.isFocusable());    }   ])', 1), ('([17:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[17]:method_text:[g);        assertSame(mTextView, mPopupWindow.getContentView());        dismissPopup();    }   ])', 1), ('([2:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[2]:method_text:[, EQUAL_TO, RIGHT, BOTTOM, LESS_THAN, BOTTOM,                offsetX, offsetY, gravity);    }   ])', 1), ('([9:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[9]:method_text:[eenXY[0]);        assertEquals(appFrameTop, viewOnScreenXY[1]);        dismissPopup();    }   ])', 1), ('([16:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[16]:method_text:[       assertTrue(left + "" != "" + right, left == right);                break;        }    }   ])', 1), ('([18:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[18]:method_text:[ContentViewInWindowXY[1] + yOff, popupContentViewOnScreenXY[1]);        dismissPopup();    }   ])', 1), ('([12:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[12]:method_text:[orXY[1] + height + yOff + viewInWindowXY[1], viewOnScreenXY[1]);        dismissPopup();    }   ])', 1), ('([12:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[12]:method_text:[OnScreenXY[0]);        assertEquals(anchorXY[1] + viewInWindowXY[1], viewOnScreenXY[1]);    }   ])', 1), ('([30:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[30]:method_text:[hor                <= Math.max(availableAboveMiddleAnchor, availableBelowMiddleAnchor));    }   ])', 1), ('([7:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[7]:method_text:[ mPopupWindow.getMaxAvailableHeight(anchorView);        assertEquals(expected, actual);    }   ])', 1), ('([7:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[7]:method_text:[lableHeight(anchorView, 0, IGNORE_BOTTOM_DECOR);        assertEquals(expected, actual);    }   ])', 1), ('([7:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[7]:method_text:[opupWindow.getMaxAvailableHeight(anchorView, 2);        assertEquals(expected, actual);    }   ])', 1), ('([7:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[7]:method_text:[lableHeight(anchorView, 2, IGNORE_BOTTOM_DECOR);        assertEquals(expected, actual);    }   ])', 1), ('([10:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[10]:method_text:[indow.getMaxAvailableHeight(anchorView, offset);        assertEquals(expected, actual);    }   ])', 1), ('([11:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[11]:method_text:[Height(anchorView, offset, IGNORE_BOTTOM_DECOR);        assertEquals(expected, actual);    }   ])', 1), ('([8:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[8]:method_text:[indow.getMaxAvailableHeight(anchorView, offset);        assertEquals(expected, actual);    }   ])', 1), ('([8:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[8]:method_text:[Height(anchorView, offset, IGNORE_BOTTOM_DECOR);        assertEquals(expected, actual);    }   ])', 1), ('([7:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[7]:method_text:[    // TODO(b/136178425): A negative offset can return a size that is larger than the display.   ])', 1), ('([7:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[7]:method_text:[ableHeight(anchorView, -1, IGNORE_BOTTOM_DECOR);        assertEquals(expected, actual);    }   ])', 1), ('([8:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[8]:method_text:[ mPopupWindow.getMaxAvailableHeight(anchorView);        assertEquals(expected, actual);    }   ])', 1), ('([9:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[9]:method_text:[lableHeight(anchorView, 0, IGNORE_BOTTOM_DECOR);        assertEquals(expected, actual);    }   ])', 1), ('([6:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[6]:method_text:[ mPopupWindow.getMaxAvailableHeight(anchorView);        assertEquals(expected, actual);    }   ])', 1), ('([20:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[20]:method_text:[ view.getWindowDisplayFrame(displayFrame);        return displayFrame;    }    @UiThreadTest   ])', 1), ('([4:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[4]:method_text:[owing());        mPopupWindow.dismiss();        assertFalse(mPopupWindow.isShowing());    }   ])', 1), ('([3:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[3]:method_text:[Popup();        dismissPopup();        verify(onDismissListener, times(2)).onDismiss();    }   ])', 1), ('([2:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[2]:method_text:[OCUSABLE_IM,                WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM & p.flags);    }   ])', 1), ('([4:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[4]:method_text:[itTransition(                () -> mPopupWindow.showAsDropDown(anchorView, 0, 0), true);    }   ])', 1), ('([4:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[4]:method_text:[tTransition(                () -> mPopupWindow.showAsDropDown(anchorView, 0, 0), false);    }   ])', 1), ('([4:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[4]:method_text:[             () -> mPopupWindow.showAtLocation(anchorView, Gravity.BOTTOM, 0, 0), false);    }   ])', 1), ('([4:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[4]:method_text:[nStart(any(Transition.class));        verify(dismissListener, times(times)).onDismiss();    }   ])', 1), ('([14:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[14]:method_text:[(containingRect.top + popupPos.y + viewInWindowXY[1], sndXY[1]);        dismissPopup();    }   ])', 1), ('([8:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[8]:method_text:[ityRule.runOnUiThread(mPopupWindow::dismiss);        mInstrumentation.waitForIdleSync();    }   ])', 1), ('([37:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[37]:method_text:[Y[1] + anotherView.getHeight() + viewInWindowOff[1], viewXY[1]);        dismissPopup();    }   ])', 1), ('([4:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[4]:method_text:[tForIdleSync();        assertTrue(mPopupWindow.isAboveAnchor());        dismissPopup();    }   ])', 1), ('([22:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[22]:method_text:[      verify(onTouchListener, times(2)).onTouch(any(View.class), any(MotionEvent.class));    }   ])', 1), ('([6:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[6]:method_text:[Params.WRAP_CONTENT, p.width);        assertEquals(LayoutParams.MATCH_PARENT, p.height);    }   ])', 1), ('([10:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[10]:method_text:[sertEquals(anchorLocationOnScreenXY[1] + anchor.getHeight(), popupLocationOnScreenXY[1]);    }   ])', 1), ('([9:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[9]:method_text:[rame.width());            assertEquals(measuredHeight, visibleFrame.height());        }    }   ])', 1), ('([8:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[8]:method_text:[onScrollChange(                any(View.class), anyInt(), anyInt(), anyInt(), anyInt());    }   ])', 1), ('([14:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[14]:method_text:[ force layout */);        assertPopupLocation(originalLocation, deltaX * 2, deltaY * 2);    }   ])', 1), ('([14:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[14]:method_text:[Location[0]);        assertEquals(subPopupLocation[1] - deltaY, newSubPopupLocation[1]);    }   ])', 1), ('([1:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[1]:method_text:[Instrumentation.waitForIdleSync();            assertTrue(content.isFocused());        }    }   ])', 1), ('([20:/android/widget/cts/PopupWindowTest.java]:[VIEW]:[20]:method_text:[            mPopupWindow.dismiss();        });        mInstrumentation.waitForIdleSync();    }}])', 1), ('([3:/android/view/cts/VelocityTrackerTest.java]:[VIEW]:[3]:method_text:[y = 0;    }    @After    public void teardown() {        mVelocityTracker.recycle();    }   ])', 1), ('([9:/android/widget/cts/RelativeLayoutTest.java]:[VIEW]:[9]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([23:/android/widget/cts/RelativeLayoutTest.java]:[VIEW]:[23]:method_text:[(relativeLayout, view12);        ViewAsserts.assertRightAligned(relativeLayout, view13);    }   ])', 1), ('([49:/android/widget/cts/RelativeLayoutTest.java]:[VIEW]:[49]:method_text:[igned(relativeLayout, view11);        assertEquals(view11.getTop(), view10.getBottom());    }   ])', 1), ('([6:/android/widget/cts/RelativeLayoutTest.java]:[VIEW]:[6]:method_text:[.relative_view1);        assertEquals(view.getBaseline(), relativeLayout.getBaseline());    }   ])', 1), ('([1:/android/widget/cts/RelativeLayoutTest.java]:[VIEW]:[1]:method_text:[mActivity);        myRelativeLayout.generateLayoutParams((ViewGroup.LayoutParams) null);    }   ])', 1), ('([3:/android/widget/cts/RelativeLayoutTest.java]:[VIEW]:[3]:method_text:[s.width);        assertEquals(ViewGroup.LayoutParams.WRAP_CONTENT, layoutParams.height);    }   ])', 1), ('([2:/android/widget/cts/RelativeLayoutTest.java]:[VIEW]:[2]:method_text:[ assertEquals(3, generated.rightMargin);        assertEquals(4, generated.bottomMargin);    }   ])', 1), ('([4:/android/widget/cts/RelativeLayoutTest.java]:[VIEW]:[4]:method_text:[View.LayoutParams(200, 300);        assertFalse(myRelativeLayout.checkLayoutParams(p3));    }   ])', 1), ('([2:/android/widget/cts/RelativeLayoutTest.java]:[VIEW]:[2]:method_text:[ayout.ABOVE));    }    /**     * Tests to prevent regressions in baseline alignment.     */   ])', 1), ('([7:/android/widget/cts/RelativeLayoutTest.java]:[VIEW]:[7]:method_text:[utton = mActivity.findViewById(R.id.button4);        assertTrue(button.getHeight() > 0);    }   ])', 1), ('([16:/android/widget/cts/RelativeLayoutTest.java]:[VIEW]:[16]:method_text:[rams(ViewGroup.LayoutParams p) {            return super.generateLayoutParams(p);        }    }}])', 1), ('([1:/com/android/cts/managedprofile/LauncherAppsTest.java]:[VIEW]:[1]:method_text:[ngletonList(s1));        shortcutManager.updateShortcuts(Collections.singletonList(s1));    }   ])', 1), ('([5:/android/telephony/cts/MmsTest.java]:[SMS]:[5]:method_text:[e(Context.TELEPHONY_SERVICE);        mPackageManager = getContext().getPackageManager();    }   ])', 1), ('([9:/android/telephony/cts/MmsTest.java]:[SMS]:[9]:method_text:[CarrierConfigValues()                .getBoolean(SmsManager.MMS_CONFIG_MMS_ENABLED, true);    }}])', 1), ('([1:/android/server/wm/DecorInsetSdk29Tests.java]:[VIEW]:[1]:method_text:[rInsetSdk29Tests */@Presubmitpublic class DecorInsetSdk29Tests extends DecorInsetTestsBase {   ])', 1), ('([2:/android/server/wm/DecorInsetSdk29Tests.java]:[VIEW]:[2]:method_text:[insets"", activity.mLastContentInsets);        assertContentViewLocationMatchesInsets();    }   ])', 1), ('([2:/android/server/wm/DecorInsetSdk29Tests.java]:[VIEW]:[2]:method_text:[ndowInsets.Type.systemBars()).bottom);        assertContentViewLocationMatchesInsets();    }   ])', 1), ('([2:/android/server/wm/DecorInsetSdk29Tests.java]:[VIEW]:[2]:method_text:[ontentInsets.getSystemWindowInsets());        assertContentViewLocationMatchesInsets();    }   ])', 1), ('([3:/android/server/wm/DecorInsetSdk29Tests.java]:[VIEW]:[3]:method_text:[stContentInsets.getSystemWindowInsets());        assertContentViewLocationMatchesInsets();    }}])', 1), ('([17:/android/acceleration/cts/HardwareAccelerationTest.java]:[VIEW]:[17]:method_text:[ed());            assertFalse(mManualSoftwareView.isCanvasHardwareAccelerated());        }    }}])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityButtonTest.java]:[VIEW]:[1]:method_text:[le.getService();        mButtonController = mService.getAccessibilityButtonController();    }   ])', 1), ('([1:/android/colormode/cts/AttributeWideColorModeTest.java]:[VIEW]:[1]:method_text:[;    @Before    public void setup() {        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([5:/android/view/cts/TextureViewCameraTest.java]:[VIEW]:[5]:method_text:[ty = mActivityRule.getActivity();        mNumberOfCameras = Camera.getNumberOfCameras();    }   ])', 1), ('([1:/android/view/cts/TextureViewCameraTest.java]:[VIEW]:[1]:method_text:[    return;        }        assertTrue(mActivity.waitForCompletion(WAIT_TIMEOUT_IN_SECS));    }}])', 1), ('([12:/android/text/method/cts/BackspaceTest.java]:[VIEW]:[12]:method_text:[mTextView.getSelectionStart();        state.mSelectionEnd = mTextView.getSelectionEnd();    }   ])', 1), ('([5:/android/text/method/cts/PasswordTransformationMethodTest.java]:[VIEW]:[5]:method_text:[Delimiter(""\\\\A"")) {            return scanner.hasNext() ? scanner.next() : """";        }    }   ])', 1), ('([4:/android/transition/cts/ActivityTransitionTest.java]:[VIEW]:[4]:method_text:[onTimeout(1000);    }    // When using ActivityOptions.makeBasic(), no transitions should run   ])', 1), ('([1:/android/transition/cts/ActivityTransitionTest.java]:[VIEW]:[1]:method_text:[ble area only during the shared element start    // should not be stripped from the transition.   ])', 1), ('([22:/android/transition/cts/ActivityTransitionTest.java]:[VIEW]:[22]:method_text:[re outside the visible area during initial layout should be stripped from    // the transition.   ])', 1), ('([22:/android/transition/cts/ActivityTransitionTest.java]:[VIEW]:[22]:method_text:[the activity to cover it (and onStop    // is called), the exiting views should become visible.   ])', 1), ('([10:/android/transition/cts/ActivityTransitionTest.java]:[VIEW]:[10]:method_text:[ls(View.VISIBLE, green.getVisibility());            targetActivity.finish();        });    }   ])', 1), (""([1:/android/transition/cts/ActivityTransitionTest.java]:[VIEW]:[1]:method_text:[    }    // Views that are excluded from the exit/enter transition shouldn't change visibility   ])"", 1), (""([10:/android/transition/cts/ActivityTransitionTest.java]:[VIEW]:[10]:method_text:[    // Starting a shared element transition and then removing the view shouldn't cause problems.   ])"", 1), ('([9:/android/transition/cts/ActivityTransitionTest.java]:[VIEW]:[9]:method_text:[ that the shared element view copy is the correct image of the shared element view    // source   ])', 1), ('([9:/android/transition/cts/ActivityTransitionTest.java]:[VIEW]:[9]:method_text:[       fail(String.format(message, mActivity.getResources().getResourceName(id)));        }    }}])', 1), ('([3:/android/widget/cts/DigitalClockTest.java]:[VIEW]:[3]:method_text:[edOnAttachedToWindow());        linearLayout.removeView(digitalClock);    }    @UiThreadTest   ])', 1), ('([3:/android/widget/cts/DigitalClockTest.java]:[VIEW]:[3]:method_text:[ hasCalledOnDetachedFromWindow() {            return mCalledOnDetachedFromWindow;        }    }}])', 1), ('([11:/android/view/cts/ViewStubTest.java]:[VIEW]:[11]:method_text:[;    @Before    public void setup() {        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([5:/android/view/cts/ViewStubTest.java]:[VIEW]:[5]:method_text:[0);        new ViewStub(mActivity, attrs);        new ViewStub(mActivity, attrs, 30);    }   ])', 1), (""([4:/android/view/cts/ViewStubTest.java]:[VIEW]:[4]:method_text:[it is right, because it's an empty method.        viewStub.draw(null);    }    @UiThreadTest   ])"", 1), ('([35:/android/view/cts/ViewStubTest.java]:[VIEW]:[35]:method_text:[Exception e) {        }        assertEquals(View.INVISIBLE, viewStub2.getVisibility());    }   ])', 1), ('([11:/android/view/cts/ViewStubTest.java]:[VIEW]:[11]:method_text:[  viewStub.setLayoutResource(-1);        assertEquals(-1, viewStub.getLayoutResource());    }   ])', 1), ('([11:/android/view/cts/ViewStubTest.java]:[VIEW]:[11]:method_text:[easuredWidth());        assertEquals(0, viewStub.getMeasuredHeight());    }    @UiThreadTest   ])', 1), ('([11:/android/view/cts/ViewStubTest.java]:[VIEW]:[11]:method_text:[te();        verify(listener, times(1)).onInflate(viewStub, inflated);    }    @UiThreadTest   ])', 1), ('([7:/android/view/cts/ViewStubTest.java]:[VIEW]:[7]:method_text:[R.id.viewstub);        viewStub.setOnInflateListener(null);        viewStub.inflate();    }   ])', 1), ('([16:/android/view/cts/ViewStubTest.java]:[VIEW]:[16]:method_text:[ to View.NO_ID"",                View.NO_ID, viewStub.getInflatedId());    }    @UiThreadTest   ])', 1), ('([24:/android/view/cts/ViewStubTest.java]:[VIEW]:[24]:method_text:[inflated_id, view.getId());        verify(listener, times(1)).onInflate(viewStub, view);    }   ])', 1), ('([7:/android/view/cts/ViewStubTest.java]:[VIEW]:[7]:method_text:[/ mLayoutResource is 0        viewStub.setLayoutResource(0);        viewStub.inflate();    }   ])', 1), ('([2:/android/view/cts/ViewStubTest.java]:[VIEW]:[2]:method_text:[tub = new ViewStub(mActivity);        assertNull(stub.getParent());        stub.inflate();    }}])', 1), ('([5:/android/server/wm/SplitScreenTests.java]:[VIEW]:[5]:method_text:[ test: no split multi-window support"",                supportsSplitScreenMultiWindow());    }   ])', 1), ('([3:/android/content/cts/ContextAccessTest.java]:[VIEW]:[3]:method_text:[yTestRule<MockActivity> mActivityRule =            new ActivityTestRule<>(MockActivity.class);   ])', 1), ('([20:/android/media/tv/cts/TvInputServiceTest.java]:[VIEW]:[20]:method_text:[gTvInputService.sSession = null;        CountingTvInputService.sTvInputSessionId = null;    }   ])', 1), ('([2:/android/media/tv/cts/TvInputServiceTest.java]:[VIEW]:[2]:method_text:[   mTvView.reset();            }        });        mInstrumentation.waitForIdleSync();    }   ])', 1), ('([44:/android/media/tv/cts/TvInputServiceTest.java]:[VIEW]:[44]:method_text:[nnelUri = null;            mRecordedProgramUri = null;            mError = null;        }    }}])', 1), ('([3:/android/graphics/drawable/cts/LayerDrawableTest.java]:[VIEW]:[3]:method_text:[esources,                BitmapFactory.decodeResource(resources, R.drawable.icon_blue));    }   ])', 1), ('([3:/android/graphics/drawable/cts/LayerDrawableTest.java]:[VIEW]:[3]:method_text:[xception if attribute set is null"");        } catch (NullPointerException e) {        }    }   ])', 1), ('([56:/android/view/inputmethod/cts/SearchViewTest.java]:[VIEW]:[56]:method_text:[            }            return layout;        });        return searchViewRef.get();    }   ])', 1), ('([6:/android/view/inputmethod/cts/SearchViewTest.java]:[VIEW]:[6]:method_text:[uals(event.getEventName()), TIMEOUT);            expectImeInvisible(TIMEOUT);        }    }   ])', 1), ('([6:/android/view/inputmethod/cts/SearchViewTest.java]:[VIEW]:[6]:method_text:[       CHECK_EXIT_EVENT_ONLY, TIMEOUT);            expectImeVisible(TIMEOUT);        }    }   ])', 1), ('([22:/android/view/inputmethod/cts/SearchViewTest.java]:[VIEW]:[22]:method_text:[w getView(int i, View view, ViewGroup viewGroup) {            return mSearchView;        }    }}])', 1), ('([7:/android/widget/cts/AbsSpinnerTest.java]:[VIEW]:[7]:method_text:[.getActivity();        mAbsSpinner = (AbsSpinner) mActivity.findViewById(R.id.spinner1);    }   ])', 1), ('([1:/android/widget/cts/AbsSpinnerTest.java]:[VIEW]:[1]:method_text:[currently selected item should be the one which set using this method.     */    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/AbsSpinnerTest.java]:[VIEW]:[1]:method_text:[er items based on their position     * relative to the selected item.     */    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/AbsSpinnerTest.java]:[VIEW]:[1]:method_text:[Position());        assertEquals(adapter.getItemId(1), mAbsSpinner.getSelectedItemId());    }   ])', 1), ('([1:/android/widget/cts/AbsSpinnerTest.java]:[VIEW]:[1]:method_text:[) equals the count of Adapter associated with     * this AdapterView.     */    @UiThreadTest   ])', 1), ('([6:/android/widget/cts/AbsSpinnerTest.java]:[VIEW]:[6]:method_text:[ing to the currently selected item.     * 2. Should return null if nothing is selected.     */   ])', 1), ('([5:/android/widget/cts/AbsSpinnerTest.java]:[VIEW]:[5]:method_text:[() should be correctly restored     * after onRestoreInstanceState().     */    @UiThreadTest   ])', 1), ('([16:/android/widget/cts/AbsSpinnerTest.java]:[VIEW]:[16]:method_text:[      }        public void unregisterDataSetObserver(DataSetObserver observer) {        }    }}])', 1), ('([11:/android/media/cts/DecodeAccuracyTest.java]:[VIEW]:[11]:method_text:[ DecodeAccuracyTest(String testname, String fileName) {        this.fileName = fileName;    }   ])', 1), ('([2:/android/media/cts/DecodeAccuracyTest.java]:[VIEW]:[2]:method_text:[hrows Exception {        runTest(new GLSurfaceViewFactory(), new VideoFormat(fileName));    }   ])', 1), ('([2:/android/media/cts/DecodeAccuracyTest.java]:[VIEW]:[2]:method_text:[nTest(new GLSurfaceViewFactory(), getLargerHeightVideoFormat(new VideoFormat(fileName)));    }   ])', 1), ('([2:/android/media/cts/DecodeAccuracyTest.java]:[VIEW]:[2]:method_text:[unTest(new GLSurfaceViewFactory(), getLargerWidthVideoFormat(new VideoFormat(fileName)));    }   ])', 1), ('([2:/android/media/cts/DecodeAccuracyTest.java]:[VIEW]:[2]:method_text:[ throws Exception {        runTest(new SurfaceViewFactory(), new VideoFormat(fileName));    }   ])', 1), ('([2:/android/media/cts/DecodeAccuracyTest.java]:[VIEW]:[2]:method_text:[runTest(new SurfaceViewFactory(), getLargerHeightVideoFormat(new VideoFormat(fileName)));    }   ])', 1), ('([25:/android/media/cts/DecodeAccuracyTest.java]:[VIEW]:[25]:method_text:[rException e) {                // No file found.            }        }        return 0;    }}])', 1), ('([12:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[12]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([4:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[4]:method_text:[(R.id.linear_vertical);        assertTrue(parent.isBaselineAligned());    }    @UiThreadTest   ])', 1), ('([10:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[10]:method_text:[ndex(2);        assertEquals(lv3.getBaseline(), parent.getBaseline());    }    @UiThreadTest   ])', 1), ('([11:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[11]:method_text:[    /**     * weightsum is a horizontal LinearLayout. There are three children in it.     */   ])', 1), ('([10:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[10]:method_text:[  assertEquals(Math.ceil(parentWidth * 0.3), weight03.getWidth(), 1.0);    }    @UiThreadTest   ])', 1), ('([5:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[5]:method_text:[Height());        assertEquals(100, parent.getChildAt(2).getHeight());    }    @UiThreadTest   ])', 1), ('([3:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[3]:method_text:[ layoutParams1.width);        assertEquals(240, layoutParams1.height);    }    @UiThreadTest   ])', 1), ('([2:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[2]:method_text:[Params(240, 320);        assertTrue(parent.checkLayoutParams(params));    }    @UiThreadTest   ])', 1), ('([6:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[6]:method_text:[entation(-1);        assertNull(parent.generateDefaultLayoutParams());    }    @UiThreadTest   ])', 1), ('([6:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[6]:method_text:[         | --------------- |     * ----------------------------------------------------     */   ])', 1), ('([48:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[48]:method_text:[ |     * |                  -------------- |     * -----------------------------------     */   ])', 1), ('([45:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[45]:method_text:[h(), rightView.getLeft());        assertEquals(parent.getWidth(), rightView.getRight());    }   ])', 1), ('([56:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[56]:method_text:[rightView.getLeft());        assertEquals(originalRightViewRight, rightView.getRight());    }   ])', 1), ('([53:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[53]:method_text:[rightView.getLeft());        assertEquals(originalRightViewRight, rightView.getRight());    }   ])', 1), ('([56:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[56]:method_text:[);        assertEquals(horizontalOffset + bottomView.getWidth(), bottomView.getRight());    }   ])', 1), ('([66:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[66]:method_text:[ner(this);                        return true;                    }                });    }   ])', 1), ('([29:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[29]:method_text:[able and paddings of the divider and verify the overall visuals of the     * container.     */   ])', 1), ('([1:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[1]:method_text:[able and paddings of the divider and verify the overall visuals of the     * container.     */   ])', 1), ('([2:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[2]:method_text:[| LinearLayout.SHOW_DIVIDER_END,                dividerSize, Color.RED, dividerPadding);    }   ])', 1), ('([11:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[11]:method_text:[;        assertEquals(parent.getWidth(), mActivity.findViewById(R.id.view3).getWidth());    }   ])', 1), ('([16:/android/widget/cts/LinearLayoutTest.java]:[VIEW]:[16]:method_text:[rams(ViewGroup.LayoutParams p) {            return super.generateLayoutParams(p);        }    }}])', 1), ('([2:/android/text/cts/AutoTextTest.java]:[VIEW]:[2]:method_text:[   mContext.getResources().updateConfiguration(config, null);        }    }    @UiThreadTest   ])', 1), ('([9:/android/text/cts/AutoTextTest.java]:[VIEW]:[9]:method_text:[w);        assertNotNull(actual);        assertEquals(""can"", actual);    }    @UiThreadTest   ])', 1), ('([4:/android/text/cts/AutoTextTest.java]:[VIEW]:[4]:method_text:[ionary. Just make sure it is bigger than 0.        assertTrue(AutoText.getSize(view) > 0);    }}])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java]:[VIEW]:[1]:method_text:[FLAG_REQUEST_ACCESSIBILITY_BUTTON)                == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }   ])', 1), ('([1:/android/app/cts/ActivityManagerProcessStateTest.java]:[VIEW]:[1]:method_text:[ * Test basic state changes as processes go up and down due to services running in them.     */   ])', 1), ('([1:/android/widget/cts/ToolbarWithMarginsTest.java]:[VIEW]:[1]:method_text:[(35, toolbar.getTitleMarginEnd());        assertEquals(40, toolbar.getTitleMarginBottom());    }}])', 1), ('([19:/android/provider/cts/SmsBackupRestoreTest.java]:[SMS]:[19]:method_text:[e messages are in the     * provider (with non-text-only one).     * @throws Exception     */   ])', 1), ('([24:/android/provider/cts/SmsBackupRestoreTest.java]:[SMS]:[24]:method_text:[peBackup(LOCAL_BACKUP_COMPONENT, TELEPHONY_PROVIDER_PACKAGE,                mUiAutomation);    }}])', 1), ('([7:/android/widget/cts/NumberPickerTest.java]:[VIEW]:[7]:method_text:[mberPicker = (NumberPicker) mActivity.findViewById(R.id.number_picker);    }    @UiThreadTest   ])', 1), ('([3:/android/widget/cts/NumberPickerTest.java]:[VIEW]:[3]:method_text:[e                & Configuration.UI_MODE_TYPE_MASK) == Configuration.UI_MODE_TYPE_WATCH;    }   ])', 1), ('([3:/android/widget/cts/NumberPickerTest.java]:[VIEW]:[3]:method_text:[ROLL_STATE_IDLE);        verifyNoMoreInteractions(mockScrollListener);    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/NumberPickerTest.java]:[VIEW]:[1]:method_text:[      assertEquals(newValue, numberPicker.getSelectionDividerHeight());    }    @UiThreadTest   ])', 1), ('([2:/android/content/res/cts/Resources_ThemeTest.java]:[VIEW]:[2]:method_text:[super.setUp();        mResTheme = getContext().getResources().newTheme();    }    @SmallTest   ])', 1), ('([2:/android/content/res/cts/Resources_ThemeTest.java]:[VIEW]:[2]:method_text:[ebased in RTL config"", true, t.getBoolean(0, false));        t.recycle();    }    @SmallTest   ])', 1), ('([16:/android/server/wm/WindowInsetsAnimationSynchronicityTests.java]:[VIEW]:[16]:method_text:[Context = InstrumentationRegistry.getInstrumentation().getContext();    @Ignore(""b/168446060"")   ])', 1), ('([26:/android/server/wm/WindowInsetsAnimationSynchronicityTests.java]:[VIEW]:[26]:method_text:[Context context) {            return new ComponentName(context, SimpleIme.class);        }    }}])', 1), ('([10:/android/view/inputmethod/cts/InputMethodManagerTest.java]:[VIEW]:[10]:method_text:[argetContext();        mImManager = mContext.getSystemService(InputMethodManager.class);    }   ])', 1), ('([2:/android/view/inputmethod/cts/InputMethodManagerTest.java]:[VIEW]:[2]:method_text:[itTextRef.get()));        assertFalse(mImManager.isActive(nonFocusedEditTextRef.get()));    }   ])', 1), ('([2:/android/view/inputmethod/cts/InputMethodManagerTest.java]:[VIEW]:[2]:method_text:[rns null from onCreateInputConnection()."",                mImManager.isAcceptingText());    }   ])', 1), ('([5:/android/view/inputmethod/cts/InputMethodManagerTest.java]:[VIEW]:[5]:method_text:[isInputMethodPickerShown(), TIMEOUT,                ""InputMethod picker should be closed"");    }}])', 1), ('([5:/android/view/cts/View_BaseSavedStateTest.java]:[VIEW]:[5]:method_text:[runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class View_BaseSavedStateTest {   ])', 1), ('([47:/android/widget/cts/SearchView_CursorTest.java]:[VIEW]:[47]:method_text:[    mSearchView.setSuggestionsAdapter(mSuggestionsAdapter);        });    }    @UiThreadTest   ])', 1), ('([8:/android/widget/cts/SearchView_CursorTest.java]:[VIEW]:[8]:method_text:[ry(""Di"", false);        verify(mockQueryTextListener, times(1)).onQueryTextChange(""Di"");    }   ])', 1), ('([16:/android/widget/cts/SearchView_CursorTest.java]:[VIEW]:[16]:method_text:[times(1)).onSuggestionClick(0);        verifyNoMoreInteractions(mockSuggestionListener);    }   ])', 1), ('([12:/android/widget/cts/SearchView_CursorTest.java]:[VIEW]:[12]:method_text:[, times(2)).onSuggestionClick(0);        verifyNoMoreInteractions(mockSuggestionListener);    }}])', 1), ('([1:/android/media/cts/MediaCodecPlayerTest.java]:[VIEW]:[1]:method_text:[Path() + CLEAR_VIDEO_PATH),            VIDEO_WIDTH_CLEAR, VIDEO_HEIGHT_CLEAR, surfaces);    }   ])', 1), ('([1:/android/media/cts/MediaCodecPlayerTest.java]:[VIEW]:[1]:method_text:[laybackSwitchViews() throws Exception {        playOnSurfaces(getActivity().getSurfaces());    }}])', 1), ('([1:/android/graphics/drawable/cts/ScaleDrawableTest.java]:[VIEW]:[1]:method_text:[ontext = InstrumentationRegistry.getTargetContext();    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([10:/android/uirendering/cts/testclasses/SurfaceViewTests.java]:[VIEW]:[10]:method_text:[        a.setInterpolator(new LinearInterpolator());        a.start();        return a;    }   ])', 1), ('([35:/android/uirendering/cts/testclasses/SurfaceViewTests.java]:[VIEW]:[35]:method_text:[       }        public CountDownLatch getFence() {            return mFence;        }    }   ])', 1), ('([2:/android/uirendering/cts/testclasses/SurfaceViewTests.java]:[VIEW]:[2]:method_text:[r)                .runWithVerifier(new ColorVerifier(Color.GREEN, 0 /* zero tolerance */));    }}])', 1), ('([1:/android/content/pm/cts/shortcut/backup/publisher3/ShortcutManagerPreBackupTest.java]:[VIEW]:[1]:method_text:[nifestShortcuts())                .haveIds(""ms1"", ""ms2"")                .areAllNotPinned();   }}])', 1), ('([3:/android/security/cts/PerfEventParanoidTest.java]:[VIEW]:[3]:method_text:[ookPropValue                        + "", paranoid="" + paranoidOut);            }        }    }}])', 1), ('([1:/android/carrierapi/cts/NetworkScanApiTest.java]:[SENDTO]:[1]:method_text:[      waitUntilDone();            getAndSetLocationSwitch(isLocationSwitchOn);        }    }   ])', 1), ('([1:/android/carrierapi/cts/NetworkScanApiTest.java]:[SENDTO]:[1]:method_text:[InfoCallback was interrupted: "" + ex);        }        return resultsCallback.cellInfo;    }   ])', 1), ('([6:/android/view/cts/View_DefaultFocusHighlightTest.java]:[VIEW]:[6]:method_text:[=            new ActivityTestRule<>(DefaultFocusHighlightCtsActivity.class);    @UiThreadTest   ])', 1), ('([19:/android/view/cts/View_DefaultFocusHighlightTest.java]:[VIEW]:[19]:method_text:[);        assertFalse(linearLayout.getDefaultFocusHighlightEnabled());    }    @UiThreadTest   ])', 1), ('([15:/android/view/cts/View_DefaultFocusHighlightTest.java]:[VIEW]:[15]:method_text:[);        assertFalse(linearLayout.getDefaultFocusHighlightEnabled());    }    @UiThreadTest   ])', 1), ('([14:/android/view/cts/View_DefaultFocusHighlightTest.java]:[VIEW]:[14]:method_text:[es[j]);                    assertFalse(isNeeded);                }            }        }    }}])', 1), ('([2:/android/view/cts/ContextThemeWrapperTest.java]:[VIEW]:[2]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([2:/android/view/inputmethod/cts/CompletionInfoTest.java]:[VIEW]:[2]:method_text:[ing TEXT = ""CompletionInfoText"";    private static final String LABEL = ""CompletionInfoLabel"";   ])', 1), ('([3:/android/view/cts/InputDeviceEnabledTest.java]:[VIEW]:[3]:method_text:[rgetContext().getSystemService(InputManager.class);        assertNotNull(mInputManager);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java]:[SMS]:[1]:method_text:[e that {@link UserManager} understands that it is applied but not as a base restriction.     */   ])', 1), ('([18:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[18]:method_text:[    PollingCheck.waitFor(() -> mTextView.isFocused() && (mTextView.getLayout() != null));    }   ])', 1), ('([14:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[14]:method_text:[View.FOCUS_LEFT);        });        verifySelection(END_OF_ALL_TEXT);    }    @UiThreadTest   ])', 1), ('([1:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[1]:method_text:[      initTextViewWithNullLayout();        verifySelectEndOfContent();    }    @UiThreadTest   ])', 1), ('([3:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[3]:method_text:[ mArrowKeyMovementMethod.onTakeFocus(null, mEditable, View.FOCUS_DOWN);    }    @UiThreadTest   ])', 1), ('([3:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[3]:method_text:[ mArrowKeyMovementMethod.onTakeFocus(mTextView, null, View.FOCUS_DOWN);    }    @UiThreadTest   ])', 1), ('([7:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[7]:method_text:[        // second line        // last line        verifySelection(0);    }    @UiThreadTest   ])', 1), ('([7:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[7]:method_text:[nd line        // last line|        verifySelection(END_OF_ALL_TEXT);    }    @UiThreadTest   ])', 1), ('([8:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[8]:method_text:[ond line        // last line        verifySelection(END_OF_1ST_LINE);    }    @UiThreadTest   ])', 1), ('([8:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[8]:method_text:[ line        // |last line        verifySelection(START_OF_3RD_LINE);    }    @UiThreadTest   ])', 1), ('([4:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[4]:method_text:[        // second line        // last line        verifySelection(0);    }    @UiThreadTest   ])', 1), ('([4:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[4]:method_text:[nd line        // last line|        verifySelection(END_OF_ALL_TEXT);    }    @UiThreadTest   ])', 1), ('([6:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[6]:method_text:[d line        // last line        verifySelection(START_OF_2ND_LINE);    }    @UiThreadTest   ])', 1), ('([6:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[6]:method_text:[nd line|        // last line        verifySelection(END_OF_2ND_LINE);    }    @UiThreadTest   ])', 1), ('([3:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[3]:method_text:[hod.onKeyDown(mTextView, mEditable, KeyEvent.KEYCODE_DPAD_RIGHT, null);    }    @UiThreadTest   ])', 1), ('([20:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[20]:method_text:[yEvent(0, 0, KeyEvent.ACTION_MULTIPLE, KeyEvent.KEYCODE_MOVE_END, 2)));    }    @UiThreadTest   ])', 1), ('([4:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[4]:method_text:[Event.ACTION_DOWN,                        KeyEvent.KEYCODE_UNKNOWN)));    }    @UiThreadTest   ])', 1), ('([2:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[2]:method_text:[ KeyEvent.META_SHIFT_ON)));        verifySelection(SPACE_IN_2ND_LINE);    }    @UiThreadTest   ])', 1), ('([5:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[5]:method_text:[        MotionEvent.obtain(now, now, MotionEvent.ACTION_UP, 1, 1, 0)));    }    @UiThreadTest   ])', 1), ('([1:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[1]:method_text:[vent.ACTION_UP, 1, 1, 0)));        verifySelection(SPACE_IN_2ND_LINE);    }    @UiThreadTest   ])', 1), ('([2:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[2]:method_text:[od.onTouchEvent(null, mEditable, MotionEvent.obtain(0, 0, 0, 1, 1, 0));    }    @UiThreadTest   ])', 1), ('([2:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[2]:method_text:[od.onTouchEvent(mTextView, null, MotionEvent.obtain(0, 0, 0, 1, 1, 0));    }    @UiThreadTest   ])', 1), ('([2:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[2]:method_text:[onEvent is null        mArrowKeyMovementMethod.onTouchEvent(mTextView, mEditable, null);    }   ])', 1), ('([1:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[1]:method_text:[hen param spannable is null        method.initialize(mTextView, null);    }    @UiThreadTest   ])', 1), ('([5:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[5]:method_text:[(mArrowKeyMovementMethod.onTrackballEvent(mTextView, mEditable, null));    }    @UiThreadTest   ])', 1), ('([8:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[8]:method_text:[c   ?:?    \\n\\n""            + ""lectus porta consequ\\u00e4t...  LOReM iPSuM"";    @UiThreadTest   ])', 1), ('([1:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[1]:method_text:[CtrlChord(KeyEvent.KEYCODE_DPAD_RIGHT));        verifySelection(155);    }    @UiThreadTest   ])', 1), ('([1:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[1]:method_text:[BERS =            ""Lorem ipsum123,456.90   dolor sit.. 4-0.0=2 ADipiscing4"";    @UiThreadTest   ])', 1), ('([1:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[1]:method_text:[sCtrlChord(KeyEvent.KEYCODE_DPAD_RIGHT));        verifySelection(55);    }    @UiThreadTest   ])', 1), ('([1:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[1]:method_text:[    private static final String TEXT_WORDS_WITH_1CHAR_FINAL_WORD = ""abc d"";    @UiThreadTest   ])', 1), ('([1:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[1]:method_text:[ent.KEYCODE_DPAD_RIGHT));        verifySelection(mEditable.length());    }    @UiThreadTest   ])', 1), ('([1:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[1]:method_text:[essCtrlChord(KeyEvent.KEYCODE_DPAD_LEFT));        verifySelection(0);    }    @UiThreadTest   ])', 1), ('([26:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[VIEW]:[26]:method_text:[ALL_TEXT);    }    private static class MyMetaKeyKeyListener extends MetaKeyKeyListener {    }}])', 1), ('([7:/android/widget/cts/TableRowTest.java]:[VIEW]:[7]:method_text:[;    @Before    public void setup() {        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([11:/android/widget/cts/TableRowTest.java]:[VIEW]:[11]:method_text:[ewAt(0);        verifyNoMoreInteractions(mockHierarchyChangeListener);    }    @UiThreadTest   ])', 1), ('([11:/android/widget/cts/TableRowTest.java]:[VIEW]:[11]:method_text:[      ((TextView) tableRow.getVirtualChildAt(4)).getText().toString());    }    @UiThreadTest   ])', 1), ('([4:/android/widget/cts/TableRowTest.java]:[VIEW]:[4]:method_text:[Row) tableLayout.getChildAt(0);        assertEquals(5, tableRow.getVirtualChildCount());    }   ])', 1), ('([1:/android/widget/cts/TableRowTest.java]:[VIEW]:[1]:method_text:[out.LayoutParams(200, 300)));        assertFalse(mockTableRow.checkLayoutParams(null));    }   ])', 1), ('([1:/android/widget/cts/TableRowTest.java]:[VIEW]:[1]:method_text:[ layoutParams.height);        assertTrue(layoutParams instanceof TableRow.LayoutParams);    }   ])', 1), ('([1:/android/widget/cts/TableRowTest.java]:[VIEW]:[1]:method_text:[ow(mActivity);        mockTableRow.generateLayoutParams((ViewGroup.LayoutParams) null);    }   ])', 1), ('([2:/android/widget/cts/TableRowTest.java]:[VIEW]:[2]:method_text:[htMeasureSpec) {            super.onMeasure(widthMeasureSpec, heightMeasureSpec);        }    }}])', 1)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-14-1		[('android.telecom.cts.CallRedirectionServiceTest', 2), ('android.autofillservice.cts.SettingsIntentTest', 2), ('android.content.cts.AvailableIntentsTest', 2)]		[('CtsTelecomTestCases', 2), ('CtsAutoFillServiceTestCases', 2), ('CtsContentTestCases', 2)]		3.2.3.5/C-14-1	"""C-14-1] MUST fully implement the AutofillService and AutofillManager APIs and honor the android.settings.REQUEST_SET_AUTOFILL_SERVICE intent to show a default app settings menu to enable and disable autofill and change the default autofill service for the user. If device implementations include a pre-installed app or wish to allow third-party apps to access the usage statistics; they: """	03020305.671401	3.2.3.5 C-14-1 3.2.3.5/C-14-1 android.settings.REQUEST REQUEST_SET_AUTOFILL_SERVICE				[('REQUEST_SET_AUTOFILL_SERVICE', 4), ('3.2.3.5', 2)]		CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsAutoFillServiceTestCases:android.autofillservice.cts.SettingsIntentTest.testWarningShown_userRejectsByTappingBack CtsContentTestCases:android.content.cts.AvailableIntentsTest.testRequestSetAutofillServiceIntent CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsAutoFillServiceTestCases:android.autofillservice.cts.SettingsIntentTest.testWarningShown_userRejectsByTappingBack CtsContentTestCases:android.content.cts.AvailableIntentsTest.testRequestSetAutofillServiceIntent		/android/content/cts/AvailableIntentsTest.java	[('/android/telecom/cts/CallRedirectionServiceTest.java', 4), ('/android/autofillservice/cts/SettingsIntentTest.java', 4), ('/android/content/cts/AvailableIntentsTest.java', 4)]	"[('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);        assertTrue(result);    }}])', 2), ('([1:/android/autofillservice/cts/SettingsIntentTest.java]:[REQUEST_SET_AUTOFILL_SERVICE]:[1]:method_text:[FLAG_ACTIVITY_NEW_TASK)                .setData(Uri.parse(""package:"" + Helper.MY_PACKAGE));    }}])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[REQUEST_SET_AUTOFILL_SERVICE]:[1]:method_text:[  .setData(Uri.parse(""package:android.content.cts""));        assertCanBeHandled(intent);    }   ])', 2)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-11-1		[('android.webkit.cts.WebSettingsTest', 52), ('android.media.cts.RoutingSessionInfoTest', 18), ('android.telephony.cts.VisualVoicemailServiceTest', 10), ('android.app.role.cts.RoleManagerTest', 9), ('android.content.pm.cts.LauncherAppsTest', 9), ('android.view.accessibility.cts.AccessibilityShortcutTest', 8), ('android.systemintents.cts.TestManageOverlayPermissionIntents', 7), ('android.media.cts.AudioManagerTest', 7), ('android.media.tv.tuner.cts.TunerTest', 6), ('android.view.inputmethod.cts.SearchViewTest', 4), ('android.database.cts.AbstractCursorTest', 4), ('com.android.cts.userspacereboot.host.UserspaceRebootHostTest', 4), ('android.media.cts.MediaRoute2ProviderServiceTest', 4), ('android.provider.cts.contacts.ContactsTest', 4), ('android.voicesettings.cts.ZenModeTest', 3), ('android.graphics.cts.FontVariationAxisTest', 3), ('android.net.cts.ConnectivityManagerTest', 3), ('android.text.style.cts.CharacterStyleTest', 3), ('android.text.cts.StaticLayoutLineBreakingTest', 3), ('android.app.cts.NotificationManagerTest', 3), ('android.telecom.cts.DefaultPhoneAccountTest', 3), ('android.media.tv.cts.TvInputServiceTest', 2), ('com.android.cts.deviceowner.CreateAndManageUserTest', 2), ('android.text.format.cts.DateFormatTest', 2), ('android.server.wm.WindowInsetsAnimationSynchronicityTests', 2), ('android.carrierapi.cts.NetworkScanApiTest', 2), ('com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest', 2), ('android.alarmmanager.cts.TimeChangeTests', 2), ('android.server.wm.AssistantStackTests', 2), ('com.android.cts.net.hostside.VpnTest', 2), ('android.server.wm.WindowInputTests', 2), ('android.display.cts.DisplayTest', 2), ('android.SustainedPerformance.cts.SustainedPerformanceHostTest', 2), ('android.widget.cts.AdapterViewTest', 2), ('com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase', 2), ('android.bluetooth.cts.AdvertiseCallbackTest', 2), ('android.app.cts.NotificationTest', 2), ('android.media.cts.MediaProjectionTest', 2), ('com.android.cts.externalstorageapp.ReadDefaultUris', 2), ('android.provider.cts.settings.Settings_NameValueTableTest', 2), ('com.android.server.cts.PowerIncidentTest', 2), ('android.app.cts.ActivityManagerAppExitInfoTest', 2), ('android.text.method.cts.PasswordTransformationMethodTest', 1), ('android.accessibilityservice.cts.AccessibilityButtonSdk29Test', 1), ('android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest', 1), ('android.app.usage.cts.NetworkUsageStatsTest', 1), ('com.android.cts.devicepolicy.MixedProfileOwnerTest', 1), ('android.jobscheduler.cts.BatteryConstraintTest', 1), ('android.appsecurity.cts.AuthBoundKeyTest', 1), ('android.hardware.camera2.cts.HeifWriterTest', 1), ('android.server.wm.AnrTests', 1), ('android.graphics.drawable.cts.VectorDrawableTest', 1), ('com.android.server.cts.GraphicsStatsValidationTest', 1), ('com.android.cts.devicepolicy.DeviceOwnerTest', 1), ('android.hardware.cts.CameraTest', 1), ('com.android.server.cts.IncidentdTest', 1), ('android.view.accessibility.cts.AccessibilityServiceInfoTest', 1), ('android.security.cts.KernelSettingsTest', 1), ('android.telecom.cts.CallRedirectionServiceTest', 1), ('android.permission.cts.telephony.TelephonyManagerPermissionTest', 1), ('android.server.wm.ToastWindowTest', 1), ('com.android.cts.devicepolicy.PasswordComplexityTest', 1), ('android.appsecurity.cts.ApplicationVisibilityTest', 1), ('android.appsecurity.cts.AppDataIsolationTests', 1), ('android.security.cts.Poc17_03', 1), ('com.android.cts.deviceowner.WifiConfigLockdownTest', 1), ('android.text.method.cts.MultiTapKeyListenerTest', 1), ('android.cts.backup.SuccessNotificationHostSideTest', 1), ('com.google.android.cts.settings.PrivacyDeviceOwnerTest', 1), ('com.android.server.cts.AlarmManagerIncidentTest', 1), ('com.android.cts.normalapp.ClientTest', 1), ('android.print.cts.CustomPrintOptionsTest', 1), ('android.net.wifi.cts.ConnectedNetworkScorerTest', 1)]	[('getInstrumentation', 46), ('setUp', 41), ('tearDown', 28), ('getDevice', 28), ('getContext', 22), ('getPackageName', 17), ('getPackageManager', 13), ('build', 11), ('getContentResolver', 11), ('getTargetContext', 10), ('toString', 8), ('setup', 7), ('getId', 7), ('getUiAutomation', 6), ('Object', 5), ('close', 5), ('getMessage', 5), ('trim', 5), ('getResources', 5), ('getActiveNotifications', 5), ('getWho', 4), ('getService', 4), ('getSimpleName', 4), ('length', 4), ('getLineCount', 4), ('requestFocus', 3), ('run', 3), ('elapsedRealtime', 3), ('updateTitle', 3), ('BroadcastReceiver', 3), ('getAction', 3), ('getActivity', 2), ('waitForIdleSync', 2), ('resetCounts', 2), ('get', 2), ('customSetup', 2), ('AccessibilityDumpOnFailureRule', 2), ('oneTimeSetup', 2), ('getTimeFormat', 2), ('getDefault', 2), ('enableAppOps', 2), ('teardown', 2), ('StringBuilder', 2), ('cleanup', 2), ('start', 2), ('notifyAll', 2), ('getLooper', 2), ('getSystem', 2), ('countDown', 2), ('bind', 2), ('unbind', 2), ('myUserHandle', 2), ('getMetricAffectingSpan', 2), ('performAccessibilityShortcut', 2), ('cancelAll', 2), ('printStackTrace', 2), ('getKey', 2), ('getGroupKey', 2), ('saveRoleHolder', 1), ('PasswordTransformationMethod', 1), ('pressHome', 1), ('StubCallback', 1), ('StubTimeShiftPositionCallback', 1), ('StubRecordingCallback', 1), ('resetPassedValues', 1), ('UnlockScreenRule', 1), ('setupDatabase', 1), ('getFileDescriptor', 1), ('hasNext', 1), ('next', 1), ('LimitedErrorCollector', 1), ('init', 1), ('quit', 1), ('waitUntilReady', 1), ('waitUntilDone', 1), ('onLooperPrepared', 1), ('getNetworkType', 1), ('getTransportType', 1), ('getMetered', 1), ('hashCode', 1), ('hasBattery', 1), ('getJobState', 1), ('assertJobReady', 1), ('assertJobWaiting', 1), ('assertJobNotReady', 1), ('useInvalidatedAuthBoundKey', 1), ('InstallMultiple', 1), ('getNetworkImageHtml', 1), ('separateLogs', 1), ('areChannelsBypassingDnd', 1), ('hasVibrator', 1), ('getRingerMode', 1), ('getNotificationPolicy', 1), ('getCurrentInterruptionFilter', 1), ('rtcAlarmsRescheduled', 1), ('runDumpsysBatteryReset', 1), ('supportedHardware', 1), ('storePrivateDnsSetting', 1), ('waitForIdle', 1), ('restorePrivateDnsSetting', 1), ('stopVpn', 1), ('open', 1), ('IntentFilter', 1), ('getCurrentUser', 1), ('Random', 1), ('pressWakeupButton', 1), ('pressUnlockButton', 1), ('launchHomeActivityNoWait', 1), ('setUpPackage', 1), ('launchScreenOnActivity', 1), ('getSupportedWideColorGamut', 1), ('cellConnectAttempted', 1), ('RequiredPropertiesRule', 1), ('MeterednessConfigurationRule', 1), ('getConnectivityManager', 1), ('getResultData', 1), ('getRestrictBackgroundStatus', 1), ('assertBackgroundState', 1), ('assertForegroundNetworkAccess', 1), ('assertForegroundState', 1), ('assertForegroundServiceNetworkAccess', 1), ('assertForegroundServiceState', 1), ('assertsForegroundAlwaysHasNetworkAccess', 1), ('TextPaint', 1), ('getAssets', 1), ('MetricAffectingSpan', 1), ('getConfiguredNetworks', 1), ('enableAutoCapSettings', 1), ('resetAutoCapSettings', 1), ('RouteCallback', 1), ('newSingleThreadExecutor', 1), ('check', 1), ('getInstance', 1), ('AccessibilityShortcutSettingsRule', 1), ('performAccessibilityShortcut_launchAccessibilityService', 1), ('performAccessibilityShortcut_launchShortcutTargetActivity', 1), ('performAccessibilityShortcut_withReqA11yButtonService_a11yButtonCallback', 1), ('enableService', 1), ('getAccessibilityButton_assignedTarget_returnAssignedTarget', 1), ('getAccessibilityButton_assignedMultipleTargets_returnMultipleTargets', 1), ('randomUUID', 1), ('getNotificationChannels', 1), ('getNotificationChannelGroups', 1), ('getCount', 1), ('moveToFirst', 1), ('getPendingIntent', 1), ('getClass', 1), ('getGroup', 1), ('getNotification', 1), ('getOverrideGroupKey', 1), ('getPages', 1), ('setUpServicesAndAdapter', 1), ('getMock', 1), ('getSession', 1), ('myUid', 1), ('supportsMultipleUsers', 1)]	[('CtsWebkitTestCases', 52), ('CtsMediaTestCases', 31), ('CtsTextTestCases', 10), ('CtsTelephonyTestCases', 10), ('CtsRoleTestCases', 9), ('CtsAccessibilityTestCases', 9), ('CtsContentTestCases', 9), ('CtsTvTestCases', 8), ('CtsWindowManagerDeviceTestCases', 8), ('CtsSystemIntentTestCases', 7), ('CtsAppTestCases', 5), ('CtsInputMethodTestCases', 4), ('CtsDatabaseTestCases', 4), ('CtsGraphicsTestCases', 4), ('CtsTelecomTestCases', 4), ('CtsContactsProviderTestCases', 4), ('CtsVoiceSettingsTestCases', 3), ('CtsCarrierApiTestCases', 2), ('CtsCameraTestCases', 2), ('CtsAlarmManagerTestCases', 2), ('CtsDisplayTestCases', 2), ('CtsWidgetTestCases', 2), ('CtsBluetoothTestCases', 2), ('CtsProviderTestCases', 2), ('CtsAppExitTestCases', 2), ('CtsAccessibilityServiceSdk29TestCases', 1), ('CtsUsageStatsTestCases', 1), ('CtsJobSchedulerTestCases', 1), ('CtsSecurityTestCases', 1), ('CtsPermissionTestCases', 1), ('CtsPrintTestCases', 1), ('CtsWifiTestCases', 1)]		3.2.3.5/C-11-1	"""C-11-1] MUST have an activity that handles the Settings.ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS intent but MAY implement it as a no-op. If device implementations declare the support for camera via android.hardware.camera.any they: """	03020305.671101	Settings.ACTION android.hardware.camera.any ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET 3.2.3.5 TINGS C-11-1 3.2.3.5/C-11-1				[('TINGS', 231), ('Settings.ACTION', 8), ('3.2.3.5', 1)]		CtsRoleTestCases:android.app.role.cts.RoleManagerTest.openDefaultAppListThenHasDefaultApp CtsRoleTestCases:android.app.role.cts.RoleManagerTest.openDefaultAppListThenIsNotDefaultAppInList CtsRoleTestCases:android.app.role.cts.RoleManagerTest.openDefaultAppListAndSetDefaultAppThenIsDefaultApp CtsRoleTestCases:android.app.role.cts.RoleManagerTest.openDefaultAppListAndSetDefaultAppThenIsDefaultAppInList CtsRoleTestCases:android.app.role.cts.RoleManagerTest.isEmpty CtsRoleTestCases:android.app.role.cts.RoleManagerTest.openDefaultAppListThenHasDefaultApp CtsRoleTestCases:android.app.role.cts.RoleManagerTest.openDefaultAppListThenIsNotDefaultAppInList CtsRoleTestCases:android.app.role.cts.RoleManagerTest.openDefaultAppListAndSetDefaultAppThenIsDefaultApp CtsRoleTestCases:android.app.role.cts.RoleManagerTest.openDefaultAppListAndSetDefaultAppThenIsDefaultAppInList CtsTextTestCases:android.text.method.cts.PasswordTransformationMethodTest.isFocused CtsSystemIntentTestCases:android.systemintents.cts.TestManageOverlayPermissionIntents.testStartManageAppOverlayPermissionIntent_whenCallerHasPermission_succeedsOrThrowsActivityNotFound CtsSystemIntentTestCases:android.systemintents.cts.TestManageOverlayPermissionIntents.testStartManageAppOverlayPermissionIntent_whenCallerDoesNotHavePermission_throwsSecurityExceptionOrActivityNotFound CtsSystemIntentTestCases:android.systemintents.cts.TestManageOverlayPermissionIntents.testManageOverlayPermissionIntentWithDataResolvesToSameIntentWithoutData CtsSystemIntentTestCases:android.systemintents.cts.TestManageOverlayPermissionIntents.testStartManageAppOverlayPermissionIntent_whenCallerHasPermission_succeedsOrThrowsActivityNotFound CtsSystemIntentTestCases:android.systemintents.cts.TestManageOverlayPermissionIntents.testStartManageAppOverlayPermissionIntent_whenCallerDoesNotHavePermission_throwsSecurityExceptionOrActivityNotFound CtsSystemIntentTestCases:android.systemintents.cts.TestManageOverlayPermissionIntents.testManageOverlayPermissionIntentWithDataResolvesToSameIntentWithoutData CtsTvTestCases:android.media.tv.cts.TvInputServiceTest.TvInputServiceTest CtsTvTestCases:android.media.tv.cts.TvInputServiceTest.testTvInputServiceRecordingSession CtsInputMethodTestCases:android.view.inputmethod.cts.SearchViewTest.testTapThenSetQuery CtsInputMethodTestCases:android.view.inputmethod.cts.SearchViewTest.testShowImeWithSearchViewFocus CtsInputMethodTestCases:android.view.inputmethod.cts.SearchViewTest.testShowImeWhenSearchViewFocusInListView None:com.android.cts.deviceowner.CreateAndManageUserTest.testCreateAndManageUser_MaxUsers CtsVoiceSettingsTestCases:android.voicesettings.cts.ZenModeTest.testAll CtsAccessibilityServiceSdk29TestCases:android.accessibilityservice.cts.AccessibilityButtonSdk29Test.postTestTearDown CtsDatabaseTestCases:android.database.cts.AbstractCursorTest.exists CtsDatabaseTestCases:android.database.cts.AbstractCursorTest.testSetNotificationUri CtsDatabaseTestCases:android.database.cts.AbstractCursorTest.testSetNotificationUris_selfNotify CtsDatabaseTestCases:android.database.cts.AbstractCursorTest.testGetNotificationUris CtsTextTestCases:android.text.format.cts.DateFormatTest.test_ContextLocaleIsUsed CtsWindowManagerDeviceTestCases:android.server.wm.WindowInsetsAnimationSynchronicityTests.testControl_rendersSynchronouslyBetweenImeWindowAndAppContent None:android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest.isEmpty CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testBuilderConstructorWithInvalidValues CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testBuilderCopyConstructorWithNull CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testBuilderConstructorWithEmptyClientPackageName CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testBuilderBuildWithEmptySelectedRoutesThrowsIAE CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testBuilderAddRouteMethodsWithIllegalArgumentsThrowsIAE CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testBuilderRemoveRouteMethodsWithIllegalArgumentsThrowsIAE CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testBuilderAndGettersOfRoutingSessionInfo CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testBuilderAddRouteMethodsWithBuilderCopyConstructor CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testBuilderRemoveRouteMethods CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testBuilderRemoveRouteMethodsWithBuilderCopyConstructor CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testBuilderClearRouteMethods CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testBuilderClearRouteMethodsWithBuilderCopyConstructor CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testEqualsCreatedWithSameArguments CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testEqualsCreatedWithBuilderCopyConstructor CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testEqualsReturnFalse CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testParcelingAndUnParceling CtsMediaTestCases:android.media.cts.RoutingSessionInfoTest.testDescribeContents CtsCarrierApiTestCases:android.carrierapi.cts.NetworkScanApiTest.adoptShellPermissionIdentity CtsCarrierApiTestCases:android.carrierapi.cts.NetworkScanApiTest.testNetworkScanPermission CtsUsageStatsTestCases:android.app.usage.cts.NetworkUsageStatsTest.getIsDefault CtsTvTestCases:android.media.tv.tuner.cts.TunerTest.adoptShellPermissionIdentity CtsTvTestCases:android.media.tv.tuner.cts.TunerTest.testTuning CtsTvTestCases:android.media.tv.tuner.cts.TunerTest.testScanning CtsTvTestCases:android.media.tv.tuner.cts.TunerTest.testFrontendStatus CtsTvTestCases:android.media.tv.tuner.cts.TunerTest.testReadFilter CtsTvTestCases:android.media.tv.tuner.cts.TunerTest.testShareFrontendFromTuner None:com.android.cts.devicepolicy.MixedProfileOwnerTest.testLockTaskAfterReboot_tryOpeningSettings CtsCameraTestCases:android.hardware.camera2.cts.HeifWriterTest.testHeif CtsGraphicsTestCases:android.graphics.cts.FontVariationAxisTest.testFromFontVariationSetting_Single CtsGraphicsTestCases:android.graphics.cts.FontVariationAxisTest.testFromFontVariationSettings_Invalid CtsGraphicsTestCases:android.graphics.cts.FontVariationAxisTest.testtoFontVariationSettings CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.WebSettingsTest CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testUserAgentString_default CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessUserAgentString CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessAllowFileAccess CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessCacheMode_defaultValue CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessCacheMode_cacheElseNetwork CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessCacheMode_noCache CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessCacheMode_cacheOnly CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessCursiveFontFamily CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessFantasyFontFamily CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessFixedFontFamily CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessSansSerifFontFamily CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessSerifFontFamily CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessStandardFontFamily CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessDefaultFontSize CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessDefaultFixedFontSize CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessDefaultTextEncodingName CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessJavaScriptCanOpenWindowsAutomatically CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessJavaScriptEnabled CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessLayoutAlgorithm CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessMinimumFontSize CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessMinimumLogicalFontSize CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessPluginsEnabled CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testOffscreenPreRaster CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessPluginsPath CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessTextSize CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessUseDoubleTree CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessUseWideViewPort CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testSetNeedInitialFocus CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testSetRenderPriority CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessSupportMultipleWindows CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessSupportZoom CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAccessBuiltInZoomControls CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAppCacheDisabled CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAppCacheEnabled CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testDatabaseDisabled CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testDisabledActionModeMenuItems CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testLoadsImagesAutomatically_default CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testLoadsImagesAutomatically_httpImagesLoaded CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testLoadsImagesAutomatically_dataUriImagesLoaded CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testLoadsImagesAutomatically_blockLoadingImages CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testLoadsImagesAutomatically_loadImagesWithoutReload CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testBlockNetworkImage CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testBlockNetworkLoads CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testLocalImageLoads CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testIframesWhenAccessFromFileURLsEnabled CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testIframesWhenAccessFromFileURLsDisabled CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testXHRWhenAccessFromFileURLsDisabled CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testAllowMixedMode CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testEnableSafeBrowsing CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testForceDark_default CtsWebkitTestCases:android.webkit.cts.WebSettingsTest.testForceDark_rendersDark None:com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest.testSetSecureSettingLogged None:com.android.cts.userspacereboot.host.UserspaceRebootHostTest.testUserspaceRebootWithCheckpoint None:com.android.cts.userspacereboot.host.UserspaceRebootHostTest.testUserspaceReboot_verifyCeStorageIsUnlocked None:com.android.cts.userspacereboot.host.UserspaceRebootHostTest.testUserspaceRebootWithCheckpoint_verifyCeStorageIsUnlocked None:com.android.cts.userspacereboot.host.UserspaceRebootHostTest.testUserspaceRebootWatchdogTriggers None:com.android.server.cts.GraphicsStatsValidationTest.testJankyDrawFrame None:com.android.cts.devicepolicy.DeviceOwnerTest.testCreateAndManageUser_LowStorage CtsCameraTestCases:android.hardware.cts.CameraTest.testSceneMode None:com.android.server.cts.IncidentdTest.incidentdDisabled CtsAccessibilityTestCases:android.view.accessibility.cts.AccessibilityServiceInfoTest.testAccessibilityServiceInfoForEnabledService CtsMediaTestCases:android.media.cts.AudioManagerTest.isMicrophoneMute CtsMediaTestCases:android.media.cts.AudioManagerTest.testMicrophoneMute CtsMediaTestCases:android.media.cts.AudioManagerTest.testMicrophoneMuteIntent CtsMediaTestCases:android.media.cts.AudioManagerTest.testSoundEffects CtsMediaTestCases:android.media.cts.AudioManagerTest.testCheckingZenModeBlockDoesNotRequireNotificationPolicyAccess CtsMediaTestCases:android.media.cts.AudioManagerTest.testMusicActive CtsMediaTestCases:android.media.cts.AudioManagerTest.testAccessMode CtsTelephonyTestCases:android.telephony.cts.VisualVoicemailServiceTest.testPermissionlessService_ignored CtsTelephonyTestCases:android.telephony.cts.VisualVoicemailServiceTest.testFilter_data CtsTelephonyTestCases:android.telephony.cts.VisualVoicemailServiceTest.testFilter_originatingNumber_match_filtered CtsTelephonyTestCases:android.telephony.cts.VisualVoicemailServiceTest.testFilter_originatingNumber_mismatch_notFiltered CtsTelephonyTestCases:android.telephony.cts.VisualVoicemailServiceTest.testFilter_port_match CtsTelephonyTestCases:android.telephony.cts.VisualVoicemailServiceTest.testFilter_port_mismatch CtsTelephonyTestCases:android.telephony.cts.VisualVoicemailServiceTest.testFilter_port_anydata CtsTelephonyTestCases:android.telephony.cts.VisualVoicemailServiceTest.testFilter_port_anydata_notData CtsTelephonyTestCases:android.telephony.cts.VisualVoicemailServiceTest.testGetVisualVoicemailPackageName_isSelf CtsAlarmManagerTestCases:android.alarmmanager.cts.TimeChangeTests.isAutoTimeEnabled CtsWindowManagerDeviceTestCases:android.server.wm.AssistantStackTests.AssistantSession CtsWindowManagerDeviceTestCases:android.server.wm.AssistantStackTests.testPinnedStackWithAssistant None:com.android.cts.net.hostside.VpnTest.finish CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsPermissionTestCases:android.permission.cts.telephony.TelephonyManagerPermissionTest.testVoiceMailNumber CtsWindowManagerDeviceTestCases:android.server.wm.WindowInputTests.testInjectFromThread CtsDisplayTestCases:android.display.cts.DisplayTest.finish CtsDisplayTestCases:android.display.cts.DisplayTest.testFailBrightnessChangeWithoutPermission None:android.SustainedPerformance.cts.SustainedPerformanceHostTest.currentTimeMillis None:android.SustainedPerformance.cts.SustainedPerformanceHostTest.testShader None:android.appsecurity.cts.AppDataIsolationTests.testDirectBootModeWorks None:android.net.cts.ConnectivityManagerTest.disconnectFromCell None:android.net.cts.ConnectivityManagerTest.testRestrictedNetworks None:android.net.cts.ConnectivityManagerTest.testGetMultipathPreference CtsWidgetTestCases:android.widget.cts.AdapterViewTest.testAccessVisiblePosition CtsTextTestCases:android.text.style.cts.CharacterStyleTest.testWrap CtsTextTestCases:android.text.style.cts.CharacterStyleTest.testGetUnderlying None:com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase.finishActivity CtsBluetoothTestCases:android.bluetooth.cts.AdvertiseCallbackTest.MockAdvertiser CtsBluetoothTestCases:android.bluetooth.cts.AdvertiseCallbackTest.testAdvertiseFailure None:android.security.cts.Poc17_03.testPocCVE_2017_0490 CtsContentTestCases:android.content.pm.cts.LauncherAppsTest.testGetAppUsageLimit_isNull CtsContentTestCases:android.content.pm.cts.LauncherAppsTest.testGetAppUsageLimit_isNotNull CtsContentTestCases:android.content.pm.cts.LauncherAppsTest.testGetAppUsageLimit_isNullOnUnregister CtsContentTestCases:android.content.pm.cts.LauncherAppsTest.testGetAppUsageLimit_getTotalUsageLimit CtsContentTestCases:android.content.pm.cts.LauncherAppsTest.testGetAppUsageLimit_getTotalUsageRemaining CtsContentTestCases:android.content.pm.cts.LauncherAppsTest.testGetAppUsageLimit_smallestLimitReturned CtsContentTestCases:android.content.pm.cts.LauncherAppsTest.testGetAppUsageLimit_zeroUsageRemaining CtsContentTestCases:android.content.pm.cts.LauncherAppsTest.testIsActivityEnabled CtsAppTestCases:android.app.cts.NotificationTest.testWriteToParcel CtsAppTestCases:android.app.cts.NotificationTest.testBuilder CtsMediaTestCases:android.media.cts.MediaProjectionTest.testOverlayAllowedDuringScreenCapture CtsTextTestCases:android.text.cts.StaticLayoutLineBreakingTest.testWithOneSpan CtsTextTestCases:android.text.cts.StaticLayoutLineBreakingTest.testWithTwoSpans None:com.android.cts.externalstorageapp.ReadDefaultUris.testPlayDefaultUris None:android.cts.backup.SuccessNotificationHostSideTest.testSuccessNotificationForFullBackup CtsMediaTestCases:android.media.cts.MediaRoute2ProviderServiceTest.finishActivity CtsMediaTestCases:android.media.cts.MediaRoute2ProviderServiceTest.testGetSessionInfoAndGetAllSessionInfo CtsMediaTestCases:android.media.cts.MediaRoute2ProviderServiceTest.testSessionRelatedCallbacks CtsMediaTestCases:android.media.cts.MediaRoute2ProviderServiceTest.testNotifySessionReleased None:com.android.server.cts.AlarmManagerIncidentTest.testAlarmManagerServiceDump CtsAccessibilityTestCases:android.view.accessibility.cts.AccessibilityShortcutTest.postTestTearDown CtsAccessibilityTestCases:android.view.accessibility.cts.AccessibilityShortcutTest.testAccessibilityButtonService_disableSelf_buttonRemoved CtsAccessibilityTestCases:android.view.accessibility.cts.AccessibilityShortcutTest.testAccessibilityButtonService_disableSelf_shortcutRemoved CtsContactsProviderTestCases:android.provider.cts.contacts.ContactsTest.testContactMethodsTable CtsContactsProviderTestCases:android.provider.cts.contacts.ContactsTest.testSettingsTable CtsContactsProviderTestCases:android.provider.cts.contacts.ContactsTest.testExtensionsTable CtsAppTestCases:android.app.cts.NotificationManagerTest.isGroup CtsAppTestCases:android.app.cts.NotificationManagerTest.testCanBubble_ranking CtsAppTestCases:android.app.cts.NotificationManagerTest.testShowBadging_ranking CtsProviderTestCases:android.provider.cts.settings.Settings_NameValueTableTest.AdoptShellPermissionsRule CtsProviderTestCases:android.provider.cts.settings.Settings_NameValueTableTest.testPutString CtsPrintTestCases:android.print.cts.CustomPrintOptionsTest.onPrinterDiscoverySessionDestroyCalled CtsWifiTestCases:android.net.wifi.cts.ConnectedNetworkScorerTest.testWifiUsabilityStatsEntry CtsTelecomTestCases:android.telecom.cts.DefaultPhoneAccountTest.testSetUserSelectedOutgoingPhoneAccount CtsTelecomTestCases:android.telecom.cts.DefaultPhoneAccountTest.testGetDefaultOutgoingNoUserSelected CtsTelecomTestCases:android.telecom.cts.DefaultPhoneAccountTest.testGetDefaultOutgoingPhoneAccountOneOrMany None:com.android.server.cts.PowerIncidentTest.testPowerServiceDump CtsAppExitTestCases:android.app.cts.ActivityManagerAppExitInfoTest.finish CtsAppExitTestCases:android.app.cts.ActivityManagerAppExitInfoTest.testAnr		/android/app/cts/ActivityManagerAppExitInfoTest.java	[('/android/webkit/cts/WebSettingsTest.java', 53), ('/android/media/cts/RoutingSessionInfoTest.java', 19), ('/android/app/role/cts/RoleManagerTest.java', 11), ('/android/telephony/cts/VisualVoicemailServiceTest.java', 11), ('/android/content/pm/cts/LauncherAppsTest.java', 10), ('/android/systemintents/cts/TestManageOverlayPermissionIntents.java', 9), ('/android/view/accessibility/cts/AccessibilityShortcutTest.java', 9), ('/android/media/cts/AudioManagerTest.java', 8), ('/android/media/tv/tuner/cts/TunerTest.java', 7), ('/android/view/inputmethod/cts/SearchViewTest.java', 5), ('/android/voicesettings/cts/ZenModeTest.java', 5), ('/android/database/cts/AbstractCursorTest.java', 5), ('/com/android/cts/userspacereboot/host/UserspaceRebootHostTest.java', 5), ('/android/media/cts/MediaRoute2ProviderServiceTest.java', 5), ('/android/provider/cts/contacts/ContactsTest.java', 5), ('/android/graphics/cts/FontVariationAxisTest.java', 4), ('/android/net/cts/ConnectivityManagerTest.java', 4), ('/android/text/style/cts/CharacterStyleTest.java', 4), ('/android/text/cts/StaticLayoutLineBreakingTest.java', 4), ('/android/app/cts/NotificationManagerTest.java', 4), ('/android/telecom/cts/DefaultPhoneAccountTest.java', 4), ('/android/media/tv/cts/TvInputServiceTest.java', 3), ('/com/android/cts/deviceowner/CreateAndManageUserTest.java', 3), ('/android/text/format/cts/DateFormatTest.java', 3), ('/android/server/wm/WindowInsetsAnimationSynchronicityTests.java', 3), ('/android/carrierapi/cts/NetworkScanApiTest.java', 3), ('/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java', 3), ('/android/alarmmanager/cts/TimeChangeTests.java', 3), ('/android/server/wm/AssistantStackTests.java', 3), ('/com/android/cts/net/hostside/VpnTest.java', 3), ('/android/server/wm/WindowInputTests.java', 3), ('/android/display/cts/DisplayTest.java', 3), ('/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 3), ('/android/widget/cts/AdapterViewTest.java', 3), ('/com/android/cts/net/hostside/AbstractRestrictBackgroundNetworkTestCase.java', 3), ('/android/bluetooth/cts/AdvertiseCallbackTest.java', 3), ('/android/app/cts/NotificationTest.java', 3), ('/android/media/cts/MediaProjectionTest.java', 3), ('/com/android/cts/externalstorageapp/ReadDefaultUris.java', 3), ('/android/provider/cts/settings/Settings_NameValueTableTest.java', 3), ('/com/android/server/cts/PowerIncidentTest.java', 3), ('/android/app/cts/ActivityManagerAppExitInfoTest.java', 3), ('/android/text/method/cts/PasswordTransformationMethodTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 2), ('/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 2), ('/android/app/usage/cts/NetworkUsageStatsTest.java', 2), ('/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 2), ('/android/jobscheduler/cts/BatteryConstraintTest.java', 2), ('/android/appsecurity/cts/AuthBoundKeyTest.java', 2), ('/android/hardware/camera2/cts/HeifWriterTest.java', 2), ('/android/server/wm/AnrTests.java', 2), ('/android/graphics/drawable/cts/VectorDrawableTest.java', 2), ('/com/android/server/cts/GraphicsStatsValidationTest.java', 2), ('/com/android/cts/devicepolicy/DeviceOwnerTest.java', 2), ('/android/hardware/cts/CameraTest.java', 2), ('/com/android/server/cts/IncidentdTest.java', 2), ('/android/view/accessibility/cts/AccessibilityServiceInfoTest.java', 2), ('/android/security/cts/KernelSettingsTest.java', 2), ('/android/telecom/cts/CallRedirectionServiceTest.java', 2), ('/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 2), ('/android/server/wm/ToastWindowTest.java', 2), ('/com/android/cts/devicepolicy/PasswordComplexityTest.java', 2), ('/android/appsecurity/cts/ApplicationVisibilityTest.java', 2), ('/android/appsecurity/cts/AppDataIsolationTests.java', 2), ('/android/security/cts/Poc17_03.java', 2), ('/com/android/cts/deviceowner/WifiConfigLockdownTest.java', 2), ('/android/text/method/cts/MultiTapKeyListenerTest.java', 2), ('/android/cts/backup/SuccessNotificationHostSideTest.java', 2), ('/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java', 2), ('/com/android/server/cts/AlarmManagerIncidentTest.java', 2), ('/com/android/cts/normalapp/ClientTest.java', 2), ('/android/print/cts/CustomPrintOptionsTest.java', 2), ('/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 2)]	"[('([1:/android/media/cts/AudioManagerTest.java]:[TINGS]:[1]:method_text:[    @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")   ])', 3), ('([4:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[4]:method_text:[1, sessionInfo2);        assertEquals(sessionInfo1.hashCode(), sessionInfo2.hashCode());    }   ])', 2), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[that javascript cross-domain request permissions matches file domain settings    // for iframes   ])', 2), ('([1:/android/app/role/cts/RoleManagerTest.java]:[Settings.ACTION]:[1]:method_text:[Y_CLEAR_TASK));        waitFindObject(By.text(ROLE_SHORT_LABEL));        pressBack();    }   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[Settings.ACTION]:[1]:method_text:[(APP_LABEL), UNEXPECTED_TIMEOUT_MILLIS))                .isNull();        pressBack();    }   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[Settings.ACTION]:[1]:method_text:[RoleHolder(ROLE_NAME, APP_PACKAGE_NAME, true);        pressBack();        pressBack();    }   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[Settings.ACTION]:[1]:method_text:[ pressBack() {        UiAutomatorUtils.getUiDevice().pressBack();        waitForIdle();    }   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[TINGS]:[1]:method_text:[Shade() {        sContext.sendBroadcast(new Intent(Intent.ACTION_CLOSE_SYSTEM_DIALOGS));    }   ])', 1), ('([2:/android/app/role/cts/RoleManagerTest.java]:[TINGS]:[2]:method_text:[Y_CLEAR_TASK));        waitFindObject(By.text(ROLE_SHORT_LABEL));        pressBack();    }   ])', 1), ('([2:/android/app/role/cts/RoleManagerTest.java]:[TINGS]:[2]:method_text:[(APP_LABEL), UNEXPECTED_TIMEOUT_MILLIS))                .isNull();        pressBack();    }   ])', 1), ('([2:/android/app/role/cts/RoleManagerTest.java]:[TINGS]:[2]:method_text:[RoleHolder(ROLE_NAME, APP_PACKAGE_NAME, true);        pressBack();        pressBack();    }   ])', 1), ('([2:/android/app/role/cts/RoleManagerTest.java]:[TINGS]:[2]:method_text:[ pressBack() {        UiAutomatorUtils.getUiDevice().pressBack();        waitForIdle();    }   ])', 1), ('([4:/android/text/method/cts/PasswordTransformationMethodTest.java]:[TINGS]:[4]:method_text:[Delimiter(""\\\\A"")) {            return scanner.hasNext() ? scanner.next() : """";        }    }   ])', 1), ('([1:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[Settings.ACTION]:[1]:method_text:[nt            }        });        // ActivityNotFoundException or no exception thrown    }   ])', 1), ('([1:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[Settings.ACTION]:[1]:method_text:[   assertTrue(e instanceof ActivityNotFoundException || e instanceof SecurityException);    }   ])', 1), ('([2:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[Settings.ACTION]:[2]:method_text:[ty.packageName);        assertEquals(errorMessage, genericActivity.name, appActivity.name);    }}])', 1), ('([1:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[TINGS]:[1]:method_text:[    @After    public void tearDown() throws Exception {        mUiDevice.pressHome();    }   ])', 1), ('([1:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[TINGS]:[1]:method_text:[nt            }        });        // ActivityNotFoundException or no exception thrown    }   ])', 1), ('([1:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[TINGS]:[1]:method_text:[   assertTrue(e instanceof ActivityNotFoundException || e instanceof SecurityException);    }   ])', 1), ('([2:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[TINGS]:[2]:method_text:[ty.packageName);        assertEquals(errorMessage, genericActivity.name, appActivity.name);    }}])', 1), ('([1:/android/media/tv/cts/TvInputServiceTest.java]:[TINGS]:[1]:method_text:[gTvInputService.sSession = null;        CountingTvInputService.sTvInputSessionId = null;    }   ])', 1), ('([32:/android/media/tv/cts/TvInputServiceTest.java]:[TINGS]:[32]:method_text:[nnelUri = null;            mRecordedProgramUri = null;            mError = null;        }    }}])', 1), ('([1:/android/view/inputmethod/cts/SearchViewTest.java]:[TINGS]:[1]:method_text:[            }            return layout;        });        return searchViewRef.get();    }   ])', 1), ('([1:/android/view/inputmethod/cts/SearchViewTest.java]:[TINGS]:[1]:method_text:[uals(event.getEventName()), TIMEOUT);            expectImeInvisible(TIMEOUT);        }    }   ])', 1), ('([1:/android/view/inputmethod/cts/SearchViewTest.java]:[TINGS]:[1]:method_text:[       CHECK_EXIT_EVENT_ONLY, TIMEOUT);            expectImeVisible(TIMEOUT);        }    }   ])', 1), ('([1:/android/view/inputmethod/cts/SearchViewTest.java]:[TINGS]:[1]:method_text:[w getView(int i, View view, ViewGroup viewGroup) {            return mSearchView;        }    }}])', 1), ('([1:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[TINGS]:[1]:method_text:[earUserRestriction(getWho(), UserManager.DISALLOW_REMOVE_USER);        super.tearDown();    }   ])', 1), ('([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[TINGS]:[2]:method_text:[text.getContentResolver(),                        Settings.Secure.USER_SETUP_COMPLETE));    }   ])', 1), ('([1:/android/voicesettings/cts/ZenModeTest.java]:[Settings.ACTION]:[1]:method_text:[vate static final int ZEN_MODE_IS_OFF = 0;    private static final int ZEN_MODE_IS_ALARMS = 3;   ])', 1), ('([9:/android/voicesettings/cts/ZenModeTest.java]:[TINGS]:[9]:method_text:[vate static final int ZEN_MODE_IS_OFF = 0;    private static final int ZEN_MODE_IS_ALARMS = 3;   ])', 1), ('([6:/android/voicesettings/cts/ZenModeTest.java]:[TINGS]:[6]:method_text:[dException {        return Settings.Global.getInt(mContext.getContentResolver(), ZEN_MODE);    }}])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java]:[TINGS]:[1]:method_text:[FLAG_REQUEST_ACCESSIBILITY_BUTTON)                == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }   ])', 1), ('([1:/android/database/cts/AbstractCursorTest.java]:[TINGS]:[1]:method_text:[eFile.exists()) {            mDatabaseFile.delete();        }        super.tearDown();    }   ])', 1), ('([2:/android/database/cts/AbstractCursorTest.java]:[TINGS]:[2]:method_text:[tionUri(getInstrumentation().getContext().getContentResolver(),                testUri);    }   ])', 1), ('([5:/android/database/cts/AbstractCursorTest.java]:[TINGS]:[5]:method_text:[testUri2, null);        observer.waitForOnChange(ON_CHANGE_TIMEOUT_MS);    }    @AppModeFull   ])', 1), ('([4:/android/database/cts/AbstractCursorTest.java]:[TINGS]:[4]:method_text:[  Assert.assertArrayEquals(notificationUris, actualNotificationUris.toArray(new Uri[0]));    }   ])', 1), ('([3:/android/text/format/cts/DateFormatTest.java]:[TINGS]:[3]:method_text:[Delimiter(""\\\\A"")) {            return scanner.hasNext() ? scanner.next() : """";        }    }   ])', 1), ('([6:/android/text/format/cts/DateFormatTest.java]:[TINGS]:[6]:method_text:[          ""settings put system "" + Settings.System.TIME_12_24 + "" "" + timeFormat);        }    }}])', 1), ('([1:/android/server/wm/WindowInsetsAnimationSynchronicityTests.java]:[TINGS]:[1]:method_text:[Context = InstrumentationRegistry.getInstrumentation().getContext();    @Ignore(""b/168446060"")   ])', 1), ('([2:/android/server/wm/WindowInsetsAnimationSynchronicityTests.java]:[TINGS]:[2]:method_text:[Context context) {            return new ComponentName(context, SimpleIme.class);        }    }}])', 1), ('([10:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[TINGS]:[10]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.     */   ])', 1), ('([4:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[4]:method_text:[    public static final int TEST_VOLUME_MAX = 100;    public static final int TEST_VOLUME = 65;   ])', 1), ('([5:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[5]:method_text:[, () -> new RoutingSessionInfo.Builder(                emptyId, nullClientPackageName));    }   ])', 1), ('([4:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[4]:method_text:[ion.class,                () -> new RoutingSessionInfo.Builder(nullRoutingSessionInfo));    }   ])', 1), ('([2:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[2]:method_text:[er = new RoutingSessionInfo.Builder(                TEST_ID, """" /* clientPackageName*/);    }   ])', 1), ('([2:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[2]:method_text:[cted routes.        assertThrows(IllegalArgumentException.class, () -> builder.build());    }   ])', 1), ('([2:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[2]:method_text:[gumentException.class,                () -> builder.addTransferableRoute(emptyRouteId));    }   ])', 1), ('([2:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[2]:method_text:[entException.class,                () -> builder.removeTransferableRoute(emptyRouteId));    }   ])', 1), ('([3:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[3]:method_text:[insKey(TEST_KEY));        assertEquals(TEST_VALUE, controlHintsOut.getString(TEST_KEY));    }   ])', 1), ('([4:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[4]:method_text:[));        assertEquals(TEST_ROUTE_ID_7, newSessionInfo.getTransferableRoutes().get(1));    }   ])', 1), ('([2:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[2]:method_text:[ze());        assertEquals(TEST_ROUTE_ID_6, sessionInfo.getTransferableRoutes().get(0));    }   ])', 1), ('([4:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[4]:method_text:[));        assertEquals(TEST_ROUTE_ID_6, newSessionInfo.getTransferableRoutes().get(0));    }   ])', 1), ('([2:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[2]:method_text:[leRoutes().isEmpty());        assertTrue(sessionInfo.getTransferableRoutes().isEmpty());    }   ])', 1), ('([4:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[4]:method_text:[outes().isEmpty());        assertTrue(newSessionInfo.getTransferableRoutes().isEmpty());    }   ])', 1), ('([18:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[18]:method_text:[ume(TEST_VOLUME + 1).build());        // Note: ControlHints will not affect the equals.    }   ])', 1), ('([3:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[3]:method_text:[tain();        sessionInfo.writeToParcel(dummyParcel, 0);        dummyParcel.recycle();    }   ])', 1), ('([2:/android/media/cts/RoutingSessionInfoTest.java]:[TINGS]:[2]:method_text:[UTE_ID_6)                .build();        assertEquals(0, sessionInfo.describeContents());    }}])', 1), ('([1:/android/carrierapi/cts/NetworkScanApiTest.java]:[TINGS]:[1]:method_text:[Specifier;    }    /**     * Tests that the device properly requests a network scan.     */   ])', 1), ('([14:/android/carrierapi/cts/NetworkScanApiTest.java]:[TINGS]:[14]:method_text:[20"");        return mccMncs;    }    /**     * To test its constructor and getters.     */   ])', 1), ('([7:/android/app/usage/cts/NetworkUsageStatsTest.java]:[TINGS]:[7]:method_text:[er) -> telephonyManager.getSubscriberId());        }        return """";    }    @AppModeFull   ])', 1), ('([13:/android/media/tv/tuner/cts/TunerTest.java]:[TINGS]:[13]:method_text:[       if (mTuner != null) {          mTuner.close();          mTuner = null;        }    }   ])', 1), ('([1:/android/media/tv/tuner/cts/TunerTest.java]:[TINGS]:[1]:method_text:[));        res = mTuner.cancelTuning();        assertEquals(Tuner.RESULT_SUCCESS, res);    }   ])', 1), ('([2:/android/media/tv/tuner/cts/TunerTest.java]:[TINGS]:[2]:method_text:[sertEquals(Tuner.RESULT_SUCCESS, res);            }        }        mLockLatch = null;    }   ])', 1), ('([1:/android/media/tv/tuner/cts/TunerTest.java]:[TINGS]:[1]:method_text:[      tuningInfo.isLocked();                tuningInfo.getUec();            }        }    }   ])', 1), ('([5:/android/media/tv/tuner/cts/TunerTest.java]:[TINGS]:[5]:method_text:[       f.flush();        f.read(new byte[3], 0, 3);        f.stop();        f.close();    }   ])', 1), ('([22:/android/media/tv/tuner/cts/TunerTest.java]:[TINGS]:[22]:method_text:[        @Override            public void onSignalTypeReported(int signalType) {}        };    }}])', 1), ('([2:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[TINGS]:[2]:method_text:[LockTaskAfterReboot_tryOpeningSettings();    }    @Override    @FlakyTest(bugId = 140932104)   ])', 1), ('([9:/android/jobscheduler/cts/BatteryConstraintTest.java]:[TINGS]:[9]:method_text:[ that requires the device is charging, when the battery reports it is     * plugged in.     */   ])', 1), ('([5:/android/appsecurity/cts/AuthBoundKeyTest.java]:[TINGS]:[5]:method_text:[           getDevice().executeShellCommand(""cmd lock_settings clear --old 12345"");        }    }}])', 1), ('([1:/android/hardware/camera2/cts/HeifWriterTest.java]:[TINGS]:[1]:method_text:[           }            // TODO: add more key validations.        }        return result;    }}])', 1), ('([12:/android/graphics/cts/FontVariationAxisTest.java]:[TINGS]:[12]:method_text:[es[1].getTag());        assertEquals(1.0f, axes[1].getStyleValue(), FLOT_EQUALITY_PREC);    }   ])', 1), ('([5:/android/graphics/cts/FontVariationAxisTest.java]:[TINGS]:[5]:method_text:[   } catch (IllegalArgumentException e) {                // pass            }        }    }   ])', 1), ('([5:/android/graphics/cts/FontVariationAxisTest.java]:[TINGS]:[5]:method_text:[quals(axes[i].getStyleValue(), newAxes[i].getStyleValue(), FLOT_EQUALITY_PREC);        }    }   ])', 1), ('([10:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[10]:method_text:[>.<minor>     * Chrome/<major>.<minor>.<branch>.<build>[ Mobile] Safari/<major>.<minor>     */   ])', 1), (""([1:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[1]:method_text:[erifies that the useragent testing regex is actually correct, because it's very complex.     */   ])"", 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[AndWaitForCompletion(url);        assertEquals(customUserAgent, mOnUiThread.getTitle());    }   ])', 1), ('([5:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[5]:method_text:[with file access disabled"",                dataDirTitle.equals(mOnUiThread.getTitle()));    }   ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[Sync();        Thread.sleep(100); // Wait for open to be received on the icon db thread.    }   ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[hing resource"",                requestCountAfterSecondLoad, requestCountAfterFirstLoad);    }   ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[d of caching"",                requestCountAfterSecondLoad > requestCountAfterFirstLoad);    }   ])', 1), ('([6:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[6]:method_text:[ of fetching resource"",                requestCountAfterFirstLoad, initialRequestCount);    }   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ewCusiveFamily);        assertEquals(newCusiveFamily, mSettings.getCursiveFontFamily());    }   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[FantasyFamily);        assertEquals(newFantasyFamily, mSettings.getFantasyFontFamily());    }   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ly(newFixedFamily);        assertEquals(newFixedFamily, mSettings.getFixedFontFamily());    }   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ewFixedFamily);        assertEquals(newFixedFamily, mSettings.getSansSerifFontFamily());    }   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ly(newSerifFamily);        assertEquals(newSerifFamily, mSettings.getSerifFontFamily());    }   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ndardFamily);        assertEquals(newStandardFamily, mSettings.getStandardFontFamily());    }   ])', 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[ettings.setDefaultFontSize(10);        assertEquals(10, mSettings.getDefaultFontSize());    }   ])', 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[tDefaultFixedFontSize(10);        assertEquals(10, mSettings.getDefaultFixedFontSize());    }   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[dingName);        assertEquals(newEncodingName, mSettings.getDefaultTextEncodingName());    }   ])', 1), ('([6:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[6]:method_text:[Url(TestHtmlConstants.POPUP_URL));        WebkitUtils.waitForFuture(createWindowFuture);    }   ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[  return ""javascript off"".equals(mOnUiThread.getTitle());            }        }.run();    }   ])', 1), ('([10:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[10]:method_text:[ assertEquals(WebSettings.LayoutAlgorithm.SINGLE_COLUMN, mSettings.getLayoutAlgorithm());    }   ])', 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[ettings.setMinimumFontSize(10);        assertEquals(10, mSettings.getMinimumFontSize());    }   ])', 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[imumLogicalFontSize(10);        assertEquals(10, mSettings.getMinimumLogicalFontSize());    }   ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[   * should be reflected in that test as necessary. See http://go/modifying-webview-cts.     */   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[tings.setOffscreenPreRaster(true);        assertTrue(mSettings.getOffscreenPreRaster());    }   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[nPath);        assertEquals(""Plugin path always empty"", """", mSettings.getPluginsPath());    }   ])', 1), ('([10:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[10]:method_text:[ize(TextSize.SMALLEST);        assertEquals(TextSize.SMALLEST, mSettings.getTextSize());    }   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[        assertFalse(""setUseDoubleTree should be a no-op"", mSettings.getUseDoubleTree());    }   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[  mSettings.setUseWideViewPort(true);        assertTrue(mSettings.getUseWideViewPort());    }   ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[      mSettings.setNeedInitialFocus(false);        mSettings.setNeedInitialFocus(true);    }   ])', 1), ('([6:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[6]:method_text:[erPriority.LOW);        mSettings.setRenderPriority(WebSettings.RenderPriority.NORMAL);    }   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[.setSupportMultipleWindows(true);        assertTrue(mSettings.supportMultipleWindows());    }   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[;        mSettings.setSupportZoom(false);        assertFalse(mSettings.supportZoom());    }   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ngs.setBuiltInZoomControls(true);        assertTrue(mSettings.getBuiltInZoomControls());    }   ])', 1), ('([1:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[1]:method_text:[ccur.        Thread.sleep(1000);        assertEquals(""Loaded"", mOnUiThread.getTitle());    }   ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[res creating a    // webChromeClient and listening to Quota callbacks, which is not documented.   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[test should be reflected in that test as necessary. See http://go/modifying-webview-cts.     */   ])', 1), ('([9:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[9]:method_text:[ms(i);            assertEquals(i, mSettings.getDisabledActionModeMenuItems());        }    }   ])', 1), ('([1:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[1]:method_text:[           return;        }        assertTrue(mSettings.getLoadsImagesAutomatically());    }   ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[, ""text/html"", null);        assertEquals(NETWORK_IMAGE_HEIGHT, mOnUiThread.getTitle());    }   ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[ ""text/html"", null);        assertEquals(DATA_URL_IMAGE_HEIGHT, mOnUiThread.getTitle());    }   ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[ML, ""text/html"", null);        assertEquals(EMPTY_IMAGE_HEIGHT, mOnUiThread.getTitle());    }   ])', 1), ('([5:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[5]:method_text:[tForNonEmptyImage();        assertEquals(DATA_URL_IMAGE_HEIGHT, mOnUiThread.getTitle());    }   ])', 1), ('([5:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[5]:method_text:[ ""text/html"", null);        assertEquals(DATA_URL_IMAGE_HEIGHT, mOnUiThread.getTitle());    }   ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[d.getTitle());    }    // Verify that an image in local file system can be loaded by an asset   ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[    // Verify that enabling file access from file URLs enable XmlHttpRequest (XHR) across files   ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[ename, Context.MODE_PRIVATE);        fos.write(content.getBytes());        fos.close();    }   ])', 1), ('([8:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[8]:method_text:[   * should be reflected in that test as necessary. See http://go/modifying-webview-cts.     */   ])', 1), ('([5:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[5]:method_text:[ram.put(pixel, histogram.getOrDefault(pixel, 0) + 1);        }        return histogram;    }   ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[          params.width = width;            webView.setLayoutParams(params);        });    }   ])', 1), ('([8:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[8]:method_text:[e assertions.            WebkitUtils.waitForNextQueueElement(mReceivedIconQueue);        }    }}])', 1), ('([9:/android/server/wm/AnrTests.java]:[TINGS]:[9]:method_text:[SIVE_ACTIVITY.getPackageName());        stopTestPackage(HOST_ACTIVITY.getPackageName());    }   ])', 1), ('([3:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[TINGS]:[3]:method_text:[droid.cts.permissionapp"";    public static final String PARAM_APP_TO_ENABLE = ""app_to_enable"";   ])', 1), ('([2:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[TINGS]:[2]:method_text:[MIN_RECEIVER_COMPONENT,                DEFAULT_INPUT_METHOD, defaultInputMethodInitial);    }   ])', 1), ('([1:/com/android/cts/userspacereboot/host/UserspaceRebootHostTest.java]:[TINGS]:[1]:method_text:[cceed();    }    /**     * Tests that CE storage is unlocked after userspace reboot.     */   ])', 1), ('([2:/com/android/cts/userspacereboot/host/UserspaceRebootHostTest.java]:[TINGS]:[2]:method_text:[*     * Tests that CE storage is unlocked after userspace reboot with fs-checkpointing.     */   ])', 1), ('([3:/com/android/cts/userspacereboot/host/UserspaceRebootHostTest.java]:[TINGS]:[3]:method_text:[ hard reboot is triggered when a native process fails to stop in a     * given timeout.     */   ])', 1), ('([1:/com/android/cts/userspacereboot/host/UserspaceRebootHostTest.java]:[TINGS]:[1]:method_text:[String ret = getDevice().getProperty(name);        return ret == null ? defaultValue : ret;    }}])', 1), ('([2:/android/graphics/drawable/cts/VectorDrawableTest.java]:[TINGS]:[2]:method_text:[InstrumentationRegistry.getTargetContext();        mResources = mContext.getResources();    }   ])', 1), ('([5:/com/android/server/cts/GraphicsStatsValidationTest.java]:[TINGS]:[5]:method_text:[e[0] = """";            orgiRefreshRate[1] = """";        }        return orgiRefreshRate;    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[TINGS]:[2]:method_text:[                    ""settings delete global sys_storage_threshold_max_bytes"");        }    }   ])', 1), ('([30:/android/hardware/cts/CameraTest.java]:[TINGS]:[30]:method_text:[            }            }        }        terminateMessageLooper();    }    @UiThreadTest   ])', 1), ('([3:/com/android/server/cts/IncidentdTest.java]:[TINGS]:[3]:method_text:[(), filterLevel);    }    // Splitting these into separate methods to make debugging easier.   ])', 1), ('([1:/android/view/accessibility/cts/AccessibilityServiceInfoTest.java]:[TINGS]:[1]:method_text:[s(/* expected= */ 1000,                speakingService.getNonInteractiveUiTimeoutMillis());    }}])', 1), ('([5:/android/media/cts/AudioManagerTest.java]:[TINGS]:[5]:method_text:[    @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")   ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[TINGS]:[1]:method_text:[);        mAudioManager.playSoundEffect(AudioManager.FX_FOCUS_NAVIGATION_RIGHT, volume);    }   ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[TINGS]:[1]:method_text:[ss(mContext.getPackageName(), getInstrumentation(),                    false);        }    }   ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[TINGS]:[1]:method_text:[)    @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")   ])', 1), ('([1:/android/telephony/cts/VisualVoicemailServiceTest.java]:[TINGS]:[1]:method_text:[ull) {                mContext.unregisterReceiver(mSmsReceiver);            }        }    }   ])', 1), ('([2:/android/telephony/cts/VisualVoicemailServiceTest.java]:[TINGS]:[2]:method_text:[ception | InterruptedException e) {            throw new RuntimeException(e);        }    }   ])', 1), ('([4:/android/telephony/cts/VisualVoicemailServiceTest.java]:[TINGS]:[4]:method_text:[Fields().getString(""u""));        assertEquals(""1"", result.getFields().getString(""pw""));    }   ])', 1), ('([4:/android/telephony/cts/VisualVoicemailServiceTest.java]:[TINGS]:[4]:method_text:[            .build();        getSmsFromText(settings, ""//CTSVVM:SYNC:key=value"", true);    }   ])', 1), ('([4:/android/telephony/cts/VisualVoicemailServiceTest.java]:[TINGS]:[4]:method_text:[           .build();        getSmsFromText(settings, ""//CTSVVM:SYNC:key=value"", false);    }   ])', 1), ('([4:/android/telephony/cts/VisualVoicemailServiceTest.java]:[TINGS]:[4]:method_text:[         ""//CTSVVM:STATUS:st=R;rc=0;srv=1;dn=1;ipt=1;spt=0;u=eg@example.com;pw=1"", true);    }   ])', 1), ('([4:/android/telephony/cts/VisualVoicemailServiceTest.java]:[TINGS]:[4]:method_text:[        ""//CTSVVM:STATUS:st=R;rc=0;srv=1;dn=1;ipt=1;spt=0;u=eg@example.com;pw=1"", false);    }   ])', 1), ('([5:/android/telephony/cts/VisualVoicemailServiceTest.java]:[TINGS]:[5]:method_text:[e);    }    /**     * Text SMS should not be filtered with DESTINATION_PORT_DATA_SMS     */   ])', 1), ('([5:/android/telephony/cts/VisualVoicemailServiceTest.java]:[TINGS]:[5]:method_text:[        ""//CTSVVM:STATUS:st=R;rc=0;srv=1;dn=1;ipt=1;spt=0;u=eg@example.com;pw=1"", false);    }   ])', 1), ('([9:/android/telephony/cts/VisualVoicemailServiceTest.java]:[TINGS]:[9]:method_text:[           throw rethrown;            } catch (Exception ignored) {            }        }    }}])', 1), ('([1:/android/security/cts/KernelSettingsTest.java]:[TINGS]:[1]:method_text:[dr.     *     * http://lwn.net/Articles/342330/     * http://lwn.net/Articles/342420/     */   ])', 1), ('([3:/android/alarmmanager/cts/TimeChangeTests.java]:[TINGS]:[3]:method_text:[e they are running        SystemUtil.runShellCommand(""settings put global auto_time 0"");    }   ])', 1), ('([2:/android/alarmmanager/cts/TimeChangeTests.java]:[TINGS]:[2]:method_text:[to time            SystemUtil.runShellCommand(""settings put global auto_time 1"");        }    }}])', 1), ('([3:/android/server/wm/AssistantStackTests.java]:[TINGS]:[3]:method_text:[isplayId;            mDefaultWindowingMode = getDefaultDisplayWindowingMode();        }    }   ])', 1), ('([6:/android/server/wm/AssistantStackTests.java]:[TINGS]:[6]:method_text:[vity(activityName2).getBounds())) {            return true;        }        return false;    }}])', 1), ('([1:/com/android/cts/net/hostside/VpnTest.java]:[TINGS]:[1]:method_text:[l * */public class VpnTest extends InstrumentationTestCase {    // These are neither public nor])', 1), ('([10:/com/android/cts/net/hostside/VpnTest.java]:[TINGS]:[10]:method_text:[      super.onReceive(context, intent);            }            received = true;        }    }}])', 1), ('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);        assertTrue(result);    }}])', 1), ('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[TINGS]:[1]:method_text:[id.Manifest.permission#MODIFY_PHONE_STATE} for     * {@link AudioManager#MODE_IN_CALL}.     */   ])', 1), ('([4:/android/server/wm/ToastWindowTest.java]:[TINGS]:[4]:method_text:[(), SETTING_HIDDEN_API_POLICY,                    mPreviousHiddenApiPolicy);        });    }   ])', 1), ('([1:/com/android/cts/devicepolicy/PasswordComplexityTest.java]:[TINGS]:[1]:method_text:[en) {            getDevice().uninstallPackage(PKG);        }        super.tearDown();    }   ])', 1), ('([3:/android/server/wm/WindowInputTests.java]:[TINGS]:[3]:method_text:[aunchActivity(null);        mInstrumentation.waitForIdleSync();        mClickCount = 0;    }   ])', 1), ('([4:/android/server/wm/WindowInputTests.java]:[TINGS]:[4]:method_text:[   } catch (NumberFormatException e) {                return false;            }        }    }}])', 1), ('([3:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[TINGS]:[3]:method_text:[mand(""settings put global package_verifier_enable ""                + mOldVerifierValue);    }   ])', 1), ('([1:/android/display/cts/DisplayTest.java]:[TINGS]:[1]:method_text:[     * Verify that the getDisplays method returns both a default and an overlay display.     */   ])', 1), ('([6:/android/display/cts/DisplayTest.java]:[TINGS]:[6]:method_text:[N_BRIGHTNESS, originalValue);            } catch (Exception e) {            }        }    }   ])', 1), ('([1:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[TINGS]:[1]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");    }   ])', 1), ('([1:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[TINGS]:[1]:method_text:[e not sustainable"",                    (resDhry > 15) ||                    (resApp > 5));    }}])', 1), ('([6:/android/appsecurity/cts/AppDataIsolationTests.java]:[TINGS]:[6]:method_text:[          }                getDevice().waitForDeviceAvailable();            }        }    }   ])', 1), ('([2:/android/net/cts/ConnectivityManagerTest.java]:[TINGS]:[2]:method_text:[he network may not be connected or ready yet        return mCtsNetUtils.connectToWifi();    }   ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[TINGS]:[1]:method_text:[etered networks.     */    @AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")   ])', 1), ('([4:/android/net/cts/ConnectivityManagerTest.java]:[TINGS]:[4]:method_text:[ted result for various cases.     * Note that only major and minor number are compared.     */   ])', 1), ('([1:/android/widget/cts/AdapterViewTest.java]:[TINGS]:[1]:method_text:[ mActivity = mActivityRule.getActivity();        mAdapterView = new ListView(mActivity);    }   ])', 1), ('([2:/android/widget/cts/AdapterViewTest.java]:[TINGS]:[2]:method_text:[, bottom);        assertEquals(FRUIT.length - 1, mAdapterView.getLastVisiblePosition());    }   ])', 1), ('([1:/android/text/style/cts/CharacterStyleTest.java]:[TINGS]:[1]:method_text:[unit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class CharacterStyleTest {   ])', 1), ('([8:/android/text/style/cts/CharacterStyleTest.java]:[TINGS]:[8]:method_text:[ll);        assertNotNull(result);        assertTrue(result instanceof CharacterStyle);    }   ])', 1), ('([5:/android/text/style/cts/CharacterStyleTest.java]:[TINGS]:[5]:method_text:[acterStyle {        @Override        public void updateDrawState(TextPaint tp) {        }    }}])', 1), ('([1:/com/android/cts/net/hostside/AbstractRestrictBackgroundNetworkTestCase.java]:[TINGS]:[1]:method_text:[ION_REMOTE_INPUT = ""ACTION_REMOTE_INPUT"";    // TODO: Update BatteryManager.BATTERY_PLUGGED_ANY as])', 1), (""([3:/com/android/cts/net/hostside/AbstractRestrictBackgroundNetworkTestCase.java]:[TINGS]:[3]:method_text:[ult so it's displayed on log and failure messages.         */        String getExpected();    }}])"", 1), ('([1:/android/bluetooth/cts/AdvertiseCallbackTest.java]:[TINGS]:[1]:method_text:[vate final BleAdvertiseCallback mAdvertiseCallback = new BleAdvertiseCallback();    @SmallTest   ])', 1), ('([2:/android/bluetooth/cts/AdvertiseCallbackTest.java]:[TINGS]:[2]:method_text:[rtEquals(AdvertiseCallback.ADVERTISE_FAILED_ALREADY_STARTED, error);            }        }    }}])', 1), ('([3:/android/security/cts/Poc17_03.java]:[TINGS]:[3]:method_text:[();        updateKernelStartTime();        assertEquals(bootCountBefore, bootCountAfter);    }}])', 1), ('([4:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[4]:method_text:[e = new ComponentName(PACKAGE_NAME, FULL_CLASS_NAME);        setHomeActivity(mTestHome);    }   ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[NGS_PACKAGE, USER_HANDLE);        assertNull(limit); // An observer was never registered    }   ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[UsageLimit(                SETTINGS_PACKAGE, USER_HANDLE);        assertNotNull(limit);    }   ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[CKAGE, USER_HANDLE);        assertNull(""An unregistered observer was returned."", limit);    }   ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[              TimeUnit.MINUTES.toMillis(DEFAULT_TIME_LIMIT), limit.getTotalUsageLimit());    }   ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[ with no usage."",                limit.getTotalUsageLimit(), limit.getUsageRemaining());    }   ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[t.getTotalUsageLimit());        } finally {            unregisterObserver(1);        }    }   ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[        assertEquals(""Usage remaining expected to be 0."", 0, limit.getUsageRemaining());    }   ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[--user ""                + USER_HANDLE.getIdentifier() + "" "" + component.flattenToString());    }}])', 1), ('([3:/android/app/cts/NotificationTest.java]:[TINGS]:[3]:method_text:[Position(0);        result = new Notification(parcel);        assertNull(result.sound);    }   ])', 1), ('([2:/android/app/cts/NotificationTest.java]:[TINGS]:[2]:method_text:[XTUAL_ACTIONS,                mNotification.getAllowSystemGeneratedContextualActions());    }   ])', 1), ('([1:/android/media/cts/MediaProjectionTest.java]:[TINGS]:[1]:method_text:[Before    public void setUp() {        mContext = InstrumentationRegistry.getContext();    }   ])', 1), ('([3:/android/media/cts/MediaProjectionTest.java]:[TINGS]:[3]:method_text:[EOUT_MS + ""ms"",                stoppedLatch.await(STOP_TIMEOUT_MS, TimeUnit.MILLISECONDS));    }}])', 1), ('([6:/android/text/cts/StaticLayoutLineBreakingTest.java]:[TINGS]:[6]:method_text:[,                    Spanned.SPAN_INCLUSIVE_INCLUSIVE);        }        return result;    }   ])', 1), ('([4:/android/text/cts/StaticLayoutLineBreakingTest.java]:[TINGS]:[4]:method_text:[SIVE);                    layout(ssb, breaks);                }            }        }    }   ])', 1), ('([8:/android/text/cts/StaticLayoutLineBreakingTest.java]:[TINGS]:[8]:method_text:[char c, char r) {        return string.replaceAll(String.valueOf(c), String.valueOf(r));    }   ])', 1), ('([3:/com/android/cts/deviceowner/WifiConfigLockdownTest.java]:[TINGS]:[3]:method_text:[anager.removeNetwork(config.networkId);            }        }        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/externalstorageapp/ReadDefaultUris.java]:[TINGS]:[1]:method_text:[        mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);    }   ])', 1), ('([3:/com/android/cts/externalstorageapp/ReadDefaultUris.java]:[TINGS]:[3]:method_text:[(timeToPlayMs);        mp.stop();        mp.release();        Thread.sleep(timeToPlayMs);    }}])', 1), ('([2:/android/text/method/cts/MultiTapKeyListenerTest.java]:[TINGS]:[2]:method_text:[   @After    public void tearDown() throws IOException {        resetAutoCapSettings();    }   ])', 1), ('([2:/android/cts/backup/SuccessNotificationHostSideTest.java]:[TINGS]:[2]:method_text:[OTIFICATION_APP_PACKAGE, SUCCESS_NOTIFICATION_DEVICE_TEST_NAME,                methodName);    }}])', 1), ('([2:/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java]:[TINGS]:[2]:method_text:[    super.tearDown();    }    /** The case: app is the device owner, has work policy info. */   ])', 1), ('([1:/android/media/cts/MediaRoute2ProviderServiceTest.java]:[TINGS]:[1]:method_text:[(mService != null) {            mService.clear();            mService = null;        }    }   ])', 1), ('([4:/android/media/cts/MediaRoute2ProviderServiceTest.java]:[TINGS]:[4]:method_text:[e.getAllSessionInfo().size());        assertNull(mService.getSessionInfo(SESSION_ID_2));    }   ])', 1), ('([11:/android/media/cts/MediaRoute2ProviderServiceTest.java]:[TINGS]:[11]:method_text:[HintsListener(null);            releaseControllers(mRouter2.getControllers());        }    }   ])', 1), ('([2:/android/media/cts/MediaRoute2ProviderServiceTest.java]:[TINGS]:[2]:method_text:[(transferCallback);            releaseControllers(mRouter2.getControllers());        }    }   ])', 1), ('([8:/com/android/server/cts/AlarmManagerIncidentTest.java]:[TINGS]:[8]:method_text:[);        // Nesting should be non-negative.        assertTrue(0 <= filter.getNesting());    }}])', 1), ('([6:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[6]:method_text:[        sInstrumentation.runOnMainSync(() -> mShortcutTargetActivity.finish());        }    }   ])', 1), ('([2:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[2]:method_text:[rvice();        assertTrue(""Speaking accessibility service starts up"", service != null);    }   ])', 1), ('([2:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[2]:method_text:[cessibility shortcut target starts up"",                mShortcutTargetActivity != null);    }   ])', 1), ('([2:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[2]:method_text:[        performShortcutAndWaitForA11yButtonClicked(mA11yButtonServiceRule.getService());    }   ])', 1), ('([2:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[2]:method_text:[ttonStateChange(                sUiAutomation, Arrays.asList(mSpeakingA11yServiceName));    }   ])', 1), ('([2:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[2]:method_text:[n,                Arrays.asList(mSpeakingA11yServiceName, mShortcutTargetActivityName));    }   ])', 1), ('([3:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[3]:method_text:[orAccessibilityButtonStateChange(sUiAutomation,                Collections.emptyList());    }   ])', 1), ('([3:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[3]:method_text:[Controller()                    .unregisterAccessibilityButtonCallback(callback);        }    }}])', 1), (""([1:/android/provider/cts/contacts/ContactsTest.java]:[TINGS]:[1]:method_text:[ovider's people table     * It does not test any APIs in android.provider.Contacts.java     */   ])"", 1), (""([1:/android/provider/cts/contacts/ContactsTest.java]:[TINGS]:[1]:method_text:[ider's settings table     * It does not test any APIs in android.provider.Contacts.java     */   ])"", 1), (""([36:/android/provider/cts/contacts/ContactsTest.java]:[TINGS]:[36]:method_text:[er's extensions table     * It does not test any APIs in android.provider.Contacts.java     */   ])"", 1), ('([1:/android/provider/cts/contacts/ContactsTest.java]:[TINGS]:[1]:method_text:[groupmembership table     * It does not test any APIs in android.provider.Contacts.java     */   ])', 1), ('([6:/android/app/cts/NotificationManagerTest.java]:[TINGS]:[6]:method_text:[anupSendBubbleActivity() {        mContext.unregisterReceiver(mBubbleBroadcastReceiver);    }   ])', 1), ('([2:/android/app/cts/NotificationManagerTest.java]:[TINGS]:[2]:method_text:[ertFalse(outRanking.canBubble());            }        }        mListener.resetData();    }   ])', 1), ('([10:/android/app/cts/NotificationManagerTest.java]:[TINGS]:[10]:method_text:[                       Settings.Secure.NOTIFICATION_BADGING, originalBadging));        }    }   ])', 1), ('([4:/android/provider/cts/settings/Settings_NameValueTableTest.java]:[TINGS]:[4]:method_text:[    @Rule    public AdoptShellPermissionsRule shellPermRule = new AdoptShellPermissionsRule();   ])', 1), ('([2:/android/provider/cts/settings/Settings_NameValueTableTest.java]:[TINGS]:[2]:method_text:[inally {            // TODO should clean up more better            c.close();        }    }   ])', 1), ('([1:/com/android/cts/normalapp/ClientTest.java]:[TINGS]:[1]:method_text:[s Exception {        InstrumentationRegistry.getContext().unregisterReceiver(mReceiver);    }   ])', 1), ('([3:/android/print/cts/CustomPrintOptionsTest.java]:[TINGS]:[3]:method_text:[Helper.cancelPrinting();        waitForPrinterDiscoverySessionDestroyCallbackCalled(1);    }   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[TINGS]:[1]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([2:/android/telecom/cts/DefaultPhoneAccountTest.java]:[TINGS]:[2]:method_text:[ or more potential outgoing phone accounts with the TEL scheme.     * @throws Exception     */   ])', 1), ('([1:/android/telecom/cts/DefaultPhoneAccountTest.java]:[TINGS]:[1]:method_text:[should pass even if the     * TEL uri scheme was being tested.     * @throws Exception     */   ])', 1), ('([1:/android/telecom/cts/DefaultPhoneAccountTest.java]:[TINGS]:[1]:method_text:[led in Telecom database.        assertPhoneAccountEnabled(phoneAccount.getAccountHandle());    }}])', 1), ('([1:/com/android/server/cts/PowerIncidentTest.java]:[TINGS]:[1]:method_text:[s PowerIncidentTest extends ProtoDumpTestCase {    private static final int SYSTEM_UID = 1000;   ])', 1), ('([12:/com/android/server/cts/PowerIncidentTest.java]:[TINGS]:[12]:method_text:[           assertTrue(0 <= wl.getUid());            assertTrue(0 <= wl.getPid());        }    }}])', 1), ('([25:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[TINGS]:[25]:method_text:[Manager.class);        return am.getHistoricalProcessExitReasons(packageName, pid, max);    }   ])', 1), ('([2:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[TINGS]:[2]:method_text:[f(trace) >= 0);        monitor.finish();        mContext.unregisterReceiver(receiver);    }   ])', 1)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-7-1		[('android.telecom.cts.CallRedirectionServiceTest', 1), ('android.systemintents.cts.TestSystemIntents', 1)]	[('create', 1), ('setUp', 1), ('getInstrumentation', 1), ('getContext', 1), ('getPackageManager', 1)]	[('CtsTelecomTestCases', 1), ('CtsSystemIntentTestCases', 1)]		3.2.3.5/C-7-1	"""C-7-1] MUST provide a user-accessible mechanism to add and configure third-party input methods in response to the android.settings.INPUT_METHOD_SETTINGS intent. If device implementations support third-party accessibility services; they: """	03020305.670701	3.2.3.5 C-7-1 3.2.3.5/C-7-1 INPUT_METHOD_SETTINGS android.settings.INPUT				[('3.2.3.5', 1), ('INPUT_METHOD_SETTINGS', 1)]		CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified		/android/systemintents/cts/TestSystemIntents.java	[('/android/telecom/cts/CallRedirectionServiceTest.java', 2), ('/android/systemintents/cts/TestSystemIntents.java', 2)]	[('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);        assertTrue(result);    }}])', 1), ('([1:/android/systemintents/cts/TestSystemIntents.java]:[INPUT_METHOD_SETTINGS]:[1]:method_text:[etInstrumentation().getContext();        mPackageManager = mContext.getPackageManager();    }   ])', 1)]					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-13-2		[('com.android.cts.managedprofile.ProvisioningTest', 4), ('com.android.cts.deviceowner.DeviceOwnerProvisioningTest', 2), ('com.android.cts.comp.provisioning.ManagedProfileProvisioningTest', 2), ('com.android.cts.devicepolicy.singleadmin.ProvisioningSingleAdminTest', 2), ('com.android.cts.managedprofile.PreManagedProfileTest', 2), ('com.android.cts.deviceowner.PreDeviceOwnerTest', 2), ('com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest', 1), ('android.telecom.cts.CallRedirectionServiceTest', 1), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 1), ('com.android.cts.comp.ManagementTest', 1), ('com.android.cts.profileowner.ManagementTest', 1), ('com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest', 1)]	[('setUp', 5), ('getContext', 2), ('getName', 2), ('getSimpleName', 2), ('getPackageManager', 1), ('getPackage', 1), ('getTargetContext', 1)]	[('CtsTelecomTestCases', 1)]		3.2.3.5/C-13-2	"""C-13-2] MUST honor the intents android.app.action.ADMIN_POLICY_COMPLIANCE; android.app.action.GET_PROVISIONING_MODE; android.app.action.PROVISIONING_SUCCESSFUL; android.app.action.PROVISION_MANAGED_DEVICE; android.app.action.PROVISION_MANAGED_PROFILE; android.app.action.SET_NEW_PARENT_PROFILE_PASSWORD; android.app.action.SET_NEW_PASSWORD & android.app.action.START_ENCRYPTION and have an activity to provide fulfillment for these intents as described in SDK here. If device implementations declare the android.software.autofill feature flag; they: """	03020305.671302	SET_NEW_PASSWORD C-13-2 PROVISIONING_SUCCESSFUL 3.2.3.5/C-13-2 android.app.action.PROVISION SET_NEW_PARENT_PROFILE_PASSWORD android.app.action.PROVISIONING ADMIN_POLICY_COMPLIANCE PROVISION_MANAGED_DEVICE android.app.action.GET android.app.action.ADMIN android.app.action.SET PROVISION_MANAGED_PROFILE 3.2.3.5 android.software.autofill GET_PROVISIONING_MODE android.app.action.START START_ENCRYPTION				[('PROVISION_MANAGED_PROFILE', 13), ('PROVISION_MANAGED_DEVICE', 3), ('PROVISIONING_SUCCESSFUL', 2), ('3.2.3.5', 1), ('android.software.autofill', 1)]		None:com.android.cts.deviceowner.DeviceOwnerProvisioningTest.getSystemPackageNameList None:com.android.cts.deviceowner.DeviceOwnerProvisioningTest.testProvisionDeviceOwner_withAllSystemAppsEnabled None:com.android.cts.comp.provisioning.ManagedProfileProvisioningTest.testProvisioningCorpOwnedManagedProfile None:com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest.testCannotAddManagedProfileViaManagedProvisioning CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified None:com.android.cts.devicepolicy.singleadmin.ProvisioningSingleAdminTest.testManagedProfileProvisioning None:com.android.cts.managedprofile.PreManagedProfileTest.testIsProvisioningAllowedTrue None:com.android.cts.managedprofile.PreManagedProfileTest.testIsProvisioningAllowedFalse None:com.android.cts.devicepolicy.DeviceAndProfileOwnerTest.testDisallowAutofill_allowed None:com.android.cts.comp.ManagementTest.testProvisionManagedProfileNotAllowed None:com.android.cts.managedprofile.ProvisioningTest.PersistableBundle None:com.android.cts.managedprofile.ProvisioningTest.testVerifySuccessfulIntentWasReceived None:com.android.cts.managedprofile.ProvisioningTest.PersistableBundle None:com.android.cts.managedprofile.ProvisioningTest.testAccountNotExist None:com.android.cts.profileowner.ManagementTest.testProvisionManagedProfileNotAllowed None:com.android.cts.deviceowner.PreDeviceOwnerTest.testIsProvisioningAllowedFalse None:com.android.cts.deviceowner.PreDeviceOwnerTest.testIsProvisioningNotAllowedForManagedProfileAction None:com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest.removeTestUsers		/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java	[('/com/android/cts/managedprofile/ProvisioningTest.java', 6), ('/com/android/cts/deviceowner/PreDeviceOwnerTest.java', 4), ('/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java', 3), ('/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java', 3), ('/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java', 3), ('/com/android/cts/managedprofile/PreManagedProfileTest.java', 3), ('/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java', 2), ('/android/telecom/cts/CallRedirectionServiceTest.java', 2), ('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2), ('/com/android/cts/comp/ManagementTest.java', 2), ('/com/android/cts/profileowner/ManagementTest.java', 2), ('/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java', 2)]	"[('([1:/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java]:[PROVISION_MANAGED_DEVICE]:[1]:method_text:[d tearDown() throws Exception {        enableUninstalledApp();        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java]:[PROVISION_MANAGED_DEVICE]:[1]:method_text:[pInfo) -> appInfo.packageName)                .sorted()                .collect(toList());    }}])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[tends AndroidTestCase {    private static final String TAG = ""ManagedProfileProvisioningTest"";   ])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ntent) {        return intent != null && intent.getExtras().containsKey(Intent.EXTRA_USER);    }}])', 1), (""([1:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[se when called with     * ACTION_PROVISION_MANAGED_PROFILE when there's a device owner.     */   ])"", 1), ('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);        assertTrue(result);    }}])', 1), ('([1:/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[    public void setUp() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[TestManager(mContext);        assertTrue(provisioningMgr.startProvisioningAndWait(intent));    }}])', 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[           .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }   ])', 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[             .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }}])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[android.software.autofill]:[1]:method_text:[eTestMethod("".AutofillRestrictionsTest"",                ""testDisallowAutofill_allowed"");    }   ])', 1), ('([1:/com/android/cts/comp/ManagementTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[visioningAllowed(                DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }   ])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISIONING_SUCCESSFUL]:[1]:method_text:[.getTargetContext();        mDpm = mContext.getSystemService(DevicePolicyManager.class);    }   ])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISIONING_SUCCESSFUL]:[1]:method_text:[ences(mContext).getBoolean(KEY_PROVISIONING_SUCCESSFUL_RECEIVED,                false));    }   ])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[.getTargetContext();        mDpm = mContext.getSystemService(DevicePolicyManager.class);    }   ])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ext context) {        return context.getSharedPreferences(SHARED_PREFERENCE_FILE_NAME, 0);    }}])', 1), ('([1:/com/android/cts/profileowner/ManagementTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ProvisioningAllowed(                DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }}])', 1), ('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[PROVISION_MANAGED_DEVICE]:[1]:method_text:[olicyManager.isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_DEVICE));    }   ])', 1), ('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[             .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));    }}])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[().uninstallPackage(SINGLE_ADMIN_PKG);        }        super.tearDown();    }    @FlakyTest   ])', 1)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-12-1		[('com.android.cts.managedprofile.DisallowSharingIntoProfileTest', 2), ('android.telecom.cts.CallRedirectionServiceTest', 1), ('android.content.cts.AvailableIntentsTest', 1)]	[('setUp', 4), ('getInstrumentation', 2), ('getContext', 2)]	[('CtsTelecomTestCases', 1), ('CtsContentTestCases', 1)]		3.2.3.5/C-12-1	"""C-12-1] MUST honor the android.media.action.STILL_IMAGE_CAMERA and android.media.action.STILL_IMAGE_CAMERA_SECURE intent and launch the camera in still image mode as described in the SDK. """	03020305.671201	3.2.3.5/C-12-1 STILL_IMAGE_CAMERA_SECURE android.media.action.STILL STILL_IMAGE_CAMERA 3.2.3.5 C-12-1				[('STILL_IMAGE_CAMERA', 2), ('3.2.3.5', 1), ('STILL_IMAGE_CAMERA_SECURE', 1)]		CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsContentTestCases:android.content.cts.AvailableIntentsTest.testCamera		/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java	[('/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java', 4), ('/android/telecom/cts/CallRedirectionServiceTest.java', 2), ('/android/content/cts/AvailableIntentsTest.java', 2)]	[('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);        assertTrue(result);    }}])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[STILL_IMAGE_CAMERA]:[1]:method_text:[it can more easily be suppressed while we     * fix targets that are out of compliance.     */   ])', 1), ('([1:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[STILL_IMAGE_CAMERA_SECURE]:[1]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1), ('([2:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[STILL_IMAGE_CAMERA]:[2]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1)]					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-15-1		[('android.telecom.cts.CallRedirectionServiceTest', 2), ('android.content.cts.AvailableIntentsTest', 2), ('android.cts.statsd.atom.AtomTestCase', 1), ('com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper', 1)]	[('setUp', 2), ('addIntentsThatDependOnDeviceConfigs', 2), ('addIntentsThatDependOnDeviceFeatures', 2), ('getPackageManager', 2), ('checkIntentForwardingFromPrimary', 2), ('checkIntentsWithOptionalForwardingFromManagedAreHandled', 2), ('hashCode', 1), ('supportsMultipleUsers', 1), ('getExternalStorageState', 1), ('checkIntentForwardingFromManaged', 1)]	[('CtsTelecomTestCases', 2), ('CtsContentTestCases', 2)]		3.2.3.5/C-15-1	"""C-15-1] MUST still have an activity that handles the android.settings.ACTION_USAGE_ACCESS_SETTINGS intent pattern but MUST implement it as a no-op; that is to have an equivalent behavior as when the user is declined for access. If device implementations report the feature android.hardware.audio.output; they: """	03020305.671501	3.2.3.5 android.hardware.audio.output 3.2.3.5/C-15-1 C-15-1 ACTION_USAGE_ACCESS_SETTINGS android.settings.ACTION				[('3.2.3.5', 2), ('ACTION_USAGE_ACCESS_SETTINGS', 2), ('android.hardware.audio.output', 1), ('android.settings.ACTION', 1)]		CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsContentTestCases:android.content.cts.AvailableIntentsTest.testUsageAccessSettings CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified None:android.cts.statsd.atom.AtomTestCase.getReportList CtsContentTestCases:android.content.cts.AvailableIntentsTest.testUsageAccessSettings None:com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper.isEmpty		/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java	[('/android/telecom/cts/CallRedirectionServiceTest.java', 4), ('/android/content/cts/AvailableIntentsTest.java', 4), ('/android/cts/statsd/atom/AtomTestCase.java', 2), ('/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 2)]	"[('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);        assertTrue(result);    }}])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_USAGE_ACCESS_SETTINGS]:[1]:method_text:[         assertCanBeHandled(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));        }    }   ])', 2), ('([1:/android/cts/statsd/atom/AtomTestCase.java]:[android.hardware.audio.output]:[1]:method_text:[estamp is not truncated"")                .that(timestampNs % fiveMinutesInNs).isEqualTo(0);    }}])', 1), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[android.settings.ACTION]:[1]:method_text:[orMessage);                success = false;            }        }        return success;    }}])', 1)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-3-2		[('android.content.cts.AvailableIntentsTest', 4), ('android.telecom.cts.CallRedirectionServiceTest', 2), ('com.android.cts.devicepolicy.BaseManagedProfileTest', 1), ('com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper', 1)]	[('setUp', 2), ('addIntentsThatDependOnDeviceConfigs', 2), ('addIntentsThatDependOnDeviceFeatures', 2), ('getPackageManager', 2), ('checkIntentForwardingFromPrimary', 2), ('checkIntentsWithOptionalForwardingFromManagedAreHandled', 2), ('supportsMultipleUsers', 1), ('getExternalStorageState', 1), ('checkIntentForwardingFromManaged', 1)]	[('CtsContentTestCases', 4), ('CtsTelecomTestCases', 2)]		3.2.3.5/C-3-2	"""C-3-2] MUST honor android.nfc.cardemulation.action.ACTION_CHANGE_DEFAULT intent to show an activity which opens a dialog to ask the user to change the default card emulation service for a certain category as described in the SDK. If device implementations report android.hardware.nfc; they: """	03020305.670302	3.2.3.5 android.hardware.nfc C-3-2 3.2.3.5/C-3-2 android.nfc.cardemulation.action.ACTION ACTION_CHANGE_DEFAULT				[('ACTION_CHANGE_DEFAULT', 5), ('3.2.3.5', 2), ('android.hardware.nfc', 1)]		CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsContentTestCases:android.content.cts.AvailableIntentsTest.testChangeDefaultSmsApplication CtsContentTestCases:android.content.cts.AvailableIntentsTest.testChangeDefaultDialer None:com.android.cts.devicepolicy.BaseManagedProfileTest.removeTestUsers CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsContentTestCases:android.content.cts.AvailableIntentsTest.testChangeDefaultSmsApplication CtsContentTestCases:android.content.cts.AvailableIntentsTest.testChangeDefaultDialer None:com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper.isEmpty		/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java	[('/android/content/cts/AvailableIntentsTest.java', 6), ('/android/telecom/cts/CallRedirectionServiceTest.java', 4), ('/com/android/cts/devicepolicy/BaseManagedProfileTest.java', 2), ('/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 2)]	"[('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);        assertTrue(result);    }}])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_CHANGE_DEFAULT]:[1]:method_text:[   assertCanBeHandled(new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT));        }    }   ])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_CHANGE_DEFAULT]:[1]:method_text:[   assertCanBeHandled(new Intent(TelecomManager.ACTION_CHANGE_DEFAULT_DIALER));        }    }   ])', 2), ('([1:/com/android/cts/devicepolicy/BaseManagedProfileTest.java]:[android.hardware.nfc]:[1]:method_text:[ for command "" + command + "": ""                + getDevice().executeShellCommand(command));    }}])', 1), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[ACTION_CHANGE_DEFAULT]:[1]:method_text:[orMessage);                success = false;            }        }        return success;    }}])', 1)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-5-1		[('android.telecom.cts.CallRedirectionServiceTest', 2), ('android.opengl.cts.OpenGlEsVersionTest', 2), ('android.content.cts.AvailableIntentsTest', 2)]		[('CtsTelecomTestCases', 2), ('CtsOpenGLTestCases', 2), ('CtsContentTestCases', 2)]		3.2.3.5/C-5-1	"""C-5-1] MUST honor the ‘android.bluetooth.adapter.action.REQUEST_ENABLE’ intent and show a system activity to allow the user to turn on Bluetooth. """	03020305.670501	3.2.3.5 android.bluetooth.adapter.action.REQUEST REQUEST_ENABLE 3.2.3.5/C-5-1 C-5-1				[('3.2.3.5', 2), ('C-5-1', 2), ('REQUEST_ENABLE', 2)]		CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsOpenGLTestCases:android.opengl.cts.OpenGlEsVersionTest.testRequiredExtensions CtsContentTestCases:android.content.cts.AvailableIntentsTest.testRequestEnableContentCaptureIntent CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsContentTestCases:android.content.cts.AvailableIntentsTest.testRequestEnableContentCaptureIntent CtsOpenGLTestCases:android.opengl.cts.OpenGlEsVersionTest.testRequiredExtensions		/android/opengl/cts/OpenGlEsVersionTest.java	[('/android/telecom/cts/CallRedirectionServiceTest.java', 4), ('/android/opengl/cts/OpenGlEsVersionTest.java', 4), ('/android/content/cts/AvailableIntentsTest.java', 4)]	"[('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);        assertTrue(result);    }}])', 2), ('([1:/android/opengl/cts/OpenGlEsVersionTest.java]:[C-5-1]:[1]:method_text:[s, es31RequiredList[i]));        }    }    @CddTest(requirement=""7.1.4.1/C-2-1,C-5-1,C-4-1"")   ])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[REQUEST_ENABLE]:[1]:method_text:[tent(Settings.ACTION_REQUEST_ENABLE_CONTENT_CAPTURE);        assertCanBeHandled(intent);    }   ])', 2)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-8-1		[('android.content.cts.AvailableIntentsTest', 4), ('android.telecom.cts.CallRedirectionServiceTest', 2), ('android.accessibilityservice.cts.AccessibilitySettingsTest', 2), ('com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper', 2), ('com.android.cts.verifier.managedprovisioning.PolicyTransparencyTestListActivity', 1)]	[('addIntentsThatDependOnDeviceConfigs', 4), ('addIntentsThatDependOnDeviceFeatures', 4), ('getPackageManager', 4), ('checkIntentForwardingFromPrimary', 4), ('checkIntentsWithOptionalForwardingFromManagedAreHandled', 4), ('supportsMultipleUsers', 2), ('getExternalStorageState', 2), ('checkIntentForwardingFromManaged', 2)]	[('CtsContentTestCases', 4), ('CtsTelecomTestCases', 2), ('CtsAccessibilityServiceTestCases', 2)]		3.2.3.5/C-8-1	"""C-8-1] MUST honor the android.settings.ACCESSIBILITY_SETTINGS intent to provide a user-accessible mechanism to enable and disable the third-party accessibility services alongside the preloaded accessibility services. If device implementations include support for Wi-Fi Easy Connect and expose the functionality to third-party apps; they: """	03020305.670801	3.2.3.5 3.2.3.5/C-8-1 ACCESSIBILITY_SETTINGS C-8-1 android.settings.ACCESSIBILITY				[('ACCESSIBILITY_SETTINGS', 8), ('3.2.3.5', 2), ('android.settings.ACCESSIBILITY', 1)]		CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsAccessibilityServiceTestCases:android.accessibilityservice.cts.AccessibilitySettingsTest.testAccessibilitySettingsIntentHandled CtsContentTestCases:android.content.cts.AvailableIntentsTest.testChangePhoneAccounts CtsContentTestCases:android.content.cts.AvailableIntentsTest.testShowCallAccessibilitySettings CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified None:com.android.cts.verifier.managedprovisioning.PolicyTransparencyTestListActivity.setPassFailButtonClickListeners CtsContentTestCases:android.content.cts.AvailableIntentsTest.testChangePhoneAccounts CtsContentTestCases:android.content.cts.AvailableIntentsTest.testShowCallAccessibilitySettings None:com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper.isEmpty None:com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper.isEmpty CtsAccessibilityServiceTestCases:android.accessibilityservice.cts.AccessibilitySettingsTest.testAccessibilitySettingsIntentHandled		/android/accessibilityservice/cts/AccessibilitySettingsTest.java	[('/android/content/cts/AvailableIntentsTest.java', 6), ('/android/telecom/cts/CallRedirectionServiceTest.java', 4), ('/android/accessibilityservice/cts/AccessibilitySettingsTest.java', 4), ('/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 4), ('/com/android/cts/verifier/managedprovisioning/PolicyTransparencyTestListActivity.java', 2)]	"[('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);        assertTrue(result);    }}])', 2), ('([2:/android/accessibilityservice/cts/AccessibilitySettingsTest.java]:[ACCESSIBILITY_SETTINGS]:[2]:method_text:[ACTION_ACCESSIBILITY_SETTINGS"";        assertTrue(message, !resolvedActivities.isEmpty());    }}])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[ON_SHOW_CALL_ACCESSIBILITY_SETTINGS, it will display the call accessibility preferences.     */   ])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[ }    /**     * Test ACTION_SHOW_CALL_SETTINGS, it will display the call preferences.     */   ])', 2), ('([1:/com/android/cts/verifier/managedprovisioning/PolicyTransparencyTestListActivity.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[tExtra(PolicyTransparencyTestListActivity.EXTRA_MODE, mMode);        startActivity(intent);    }}])', 1), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[orMessage);                success = false;            }        }        return success;    }}])', 1), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[android.settings.ACCESSIBILITY]:[1]:method_text:[orMessage);                success = false;            }        }        return success;    }}])', 1)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-13-1		[('android.admin.cts.DeviceAdminActivationTest', 2), ('android.telecom.cts.CallRedirectionServiceTest', 1)]	[('getSimpleName', 1)]	[('CtsAdminTestCases', 2), ('CtsTelecomTestCases', 1)]		3.2.3.5/C-13-1	"""C-13-1] MUST honor the intent android.app.action.ADD_DEVICE_ADMIN to invoke a UI to bring the user through adding the device administrator to the system (or allowing them to reject it). """	03020305.671301	3.2.3.5 3.2.3.5/C-13-1 C-13-1 ADD_DEVICE_ADMIN android.app.action.ADD				[('ADD_DEVICE_ADMIN', 2), ('3.2.3.5', 1)]		CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsAdminTestCases:android.admin.cts.DeviceAdminActivationTest.DeviceAdminActivationTest CtsAdminTestCases:android.admin.cts.DeviceAdminActivationTest.testActivateBrokenReceiver5Fails		/android/admin/cts/DeviceAdminActivationTest.java	[('/android/admin/cts/DeviceAdminActivationTest.java', 3), ('/android/telecom/cts/CallRedirectionServiceTest.java', 2)]	[('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);        assertTrue(result);    }}])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[ADD_DEVICE_ADMIN]:[1]:method_text:[ctivateDeviceAdminActivity();        } finally {            super.tearDown();        }    }   ])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[ADD_DEVICE_ADMIN]:[1]:method_text:[                new ComponentName(getInstrumentation().getTargetContext(), receiverClass)));    }}])', 1)]					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-9-1		[('android.telecom.cts.CallRedirectionServiceTest', 2), ('android.content.cts.AvailableIntentsTest', 2)]		[('CtsTelecomTestCases', 2), ('CtsContentTestCases', 2)]		3.2.3.5/C-9-1	"""C-9-1] MUST implement the Settings#ACTION_PROCESS_WIFI_EASY_CONNECT_URI Intent APIs as described in the SDK documentation. If device implementations provide the data saver mode; they: *"""	03020305.670901	3.2.3.5 ACTION_PROCESS_WIFI_EASY_CONNECT_URI 3.2.3.5/C-9-1 C-9-1				[('3.2.3.5', 2), ('ACTION_PROCESS_WIFI_EASY_CONNECT_URI', 2)]		CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsContentTestCases:android.content.cts.AvailableIntentsTest.testEasyConnectIntent CtsTelecomTestCases:android.telecom.cts.CallRedirectionServiceTest.testPlaceCallUnmodified CtsContentTestCases:android.content.cts.AvailableIntentsTest.testEasyConnectIntent		/android/content/cts/AvailableIntentsTest.java	[('/android/telecom/cts/CallRedirectionServiceTest.java', 4), ('/android/content/cts/AvailableIntentsTest.java', 4)]	[('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);        assertTrue(result);    }}])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_PROCESS_WIFI_EASY_CONNECT_URI]:[1]:method_text:[     intent.setData(Uri.parse(QRCODE));            assertCanBeHandled(intent);        }    }   ])', 2)]					
42:222291) 3.1.1  . Android Extensions	3.1.1	C-0-2		[('android.security.cts.EncryptionTest', 2)]		[('CtsSecurityTestCases', 2)]		3.1.1/C-0-2	"""C-0-2] MUST only return valid extension version number that have been defined by the AOSP. """	03010100.670002	C-0-2 3.1.1/C-0-2 3.1.1	valid extension version  AOSP.			[('C-0-2', 2)]		CtsSecurityTestCases:android.security.cts.EncryptionTest.aesIsFast CtsSecurityTestCases:android.security.cts.EncryptionTest.aesIsFast		/android/security/cts/EncryptionTest.java	[('/android/security/cts/EncryptionTest.java', 4)]	"[('([1:/android/security/cts/EncryptionTest.java]:[C-0-2]:[1]:method_text:[able    // to instant apps    @AppModeFull    @CddTest(requirement=""9.9.2/C-0-1,C-0-2,C-0-3"")   ])', 2)]"
42:222291) 3.1.1  . Android Extensions	3.1.1	C-0-3		[('android.appsecurity.cts.ApkVerityInstallTest', 12), ('android.security.cts.FileIntegrityManagerTest', 3), ('android.security.cts.EncryptionTest', 1)]	[('setUp', 3), ('getDevice', 2), ('getLaunchApiLevel', 1), ('tearDown', 1), ('getInstrumentation', 1), ('getContext', 1)]	[('CtsSecurityTestCases', 4)]		3.1.1/C-0-3	"""C-0-3] MUST support all the APIs defined by the extension versions returned by android.os.ext.SdkExtensions.getExtensionVersion(int apiLevel) in the same manner as other managed APIs are supported; following the requirements in section 3.1. <h4 id="""	03010100.670003	3.1.1 android.os.ext.SdkExtensions.getExtensionVersion 3.1.1/C-0-3 C-0-3				[('C-0-3', 16)]		None:android.appsecurity.cts.ApkVerityInstallTest.testInstallBase None:android.appsecurity.cts.ApkVerityInstallTest.testInstallBaseWithWrongSignature None:android.appsecurity.cts.ApkVerityInstallTest.testInstallBaseWithSplit None:android.appsecurity.cts.ApkVerityInstallTest.testInstallBaseWithDm None:android.appsecurity.cts.ApkVerityInstallTest.testInstallEverything None:android.appsecurity.cts.ApkVerityInstallTest.testInstallSplitOnly None:android.appsecurity.cts.ApkVerityInstallTest.testInstallSplitOnlyMissingSignature None:android.appsecurity.cts.ApkVerityInstallTest.testInstallSplitOnlyWithoutBaseSignature None:android.appsecurity.cts.ApkVerityInstallTest.testInstallOnlyBaseHasFsvSig None:android.appsecurity.cts.ApkVerityInstallTest.testInstallOnlyDmHasFsvSig None:android.appsecurity.cts.ApkVerityInstallTest.testInstallOnlySplitHasFsvSig CtsSecurityTestCases:android.security.cts.EncryptionTest.aesIsFast CtsSecurityTestCases:android.security.cts.FileIntegrityManagerTest.testSupportedOnDevicesFirstLaunchedWithR CtsSecurityTestCases:android.security.cts.FileIntegrityManagerTest.testCtsReleaseCertificateTrusted		/android/security/cts/FileIntegrityManagerTest.java	[('/android/appsecurity/cts/ApkVerityInstallTest.java', 13), ('/android/security/cts/FileIntegrityManagerTest.java', 4), ('/android/security/cts/EncryptionTest.java', 2)]	"[('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[C-0-3]:[1]:method_text:[_DM)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 3), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[C-0-3]:[1]:method_text:[ verifyFsverityInstall(BASE_APK, SPLIT_APK);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 2), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[C-0-3]:[1]:method_text:[       getDevice().uninstallPackage(PACKAGE_NAME);    }    @CddTest(requirement=""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[C-0-3]:[1]:method_text:[  .run();        verifyFsverityInstall(BASE_APK);    }    @CddTest(requirement=""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[C-0-3]:[1]:method_text:[FIX)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[C-0-3]:[1]:method_text:[erifyFsverityInstall(BASE_APK, BASE_APK_DM);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[C-0-3]:[1]:method_text:[_APK, BASE_APK_DM, SPLIT_APK, SPLIT_APK_DM);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[C-0-3]:[1]:method_text:[APK)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[C-0-3]:[1]:method_text:[);        verifyFsverityInstall(SPLIT_APK);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/security/cts/EncryptionTest.java]:[C-0-3]:[1]:method_text:[able    // to instant apps    @AppModeFull    @CddTest(requirement=""9.9.2/C-0-1,C-0-2,C-0-3"")   ])', 1), ('([1:/android/security/cts/FileIntegrityManagerTest.java]:[C-0-3]:[1]:method_text:[ = CertificateFactory.getInstance(""X.509"");    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/security/cts/FileIntegrityManagerTest.java]:[C-0-3]:[1]:method_text:[tyManager.isApkVeritySupported());        }    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/security/cts/FileIntegrityManagerTest.java]:[C-0-3]:[1]:method_text:[Trusted);        }    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")    @RestrictedBuildTest   ])', 1)]"