"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"Area"	"Shortened"	"Test Level"	"class_def"	"method"	"module"	"class_defs"	"methods"	"modules"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"
"4  Application Packaging Compatibility"	"4"	"C-0-8"	"4/C-0-8"	"04000000.670008"	"""C-0-8] MUST implement support for Incremental File System as documented      [here](https://source.android.com/devices/architecture/kernel/incfs).  """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://source.android.com"	""	""	""
"9.10  Device Integrity"	"9.10"	"C-0-3"	"9.10/C-0-3"	"09100000.670003"	"""C-0-3] MUST support cryptographically verifying file content against a      trusted key without reading the whole file. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"2.2.6  Developer Tools and Options Compatibility"	"6.1"	"H-0-6"	"6.1/H-0-6"	"06010000.720006"	"""[6.1/H-0-6]\* The perfetto traced daemon MUST be         enabled by default (system property `persist.traced.enable`). """	""	""	"persist.traced.enable"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"9.16  Application Data Migration"	"9.16"	"C-1-3"	"9.16/C-1-3"	"09160000.670103"	"""C-1-3] MUST use security key attestation to ensure that both the source      device and the target device in the device-to-device migration are      legitimate Android devices and have a locked bootloader. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"2.2.3  Software"	"3.2.3.1"	"H-0-2"	"3.2.3.1/H-0-2"	"03020301.720002"	"""[3.2.3.1/H-0-2]*  MUST preload one or more applications or service components with an intent handler, for all the public intent filter patterns defined by the following application intents listed [here](https://developer.android.com/about/versions/11/reference/common-intents-30). *   [[3.2.3.1/H-SR] Are STRONGLY RECOMMENDED to preload an email application which can handle [ACTION_SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) or [ACTION_SEND](https://developer.android.com/reference/android/content/Intent#ACTION_SEND) or [ACTION_SEND_MULTIPLE](https://developer.android.com/reference/android/content/Intent#ACTION_SEND_MULTIPLE) intents to send an email. *   ["""	""	""	"RECOMMENDED ACTION_SEND ACTION_SENDTO ACTION_SEND_MULTIPLE"	""	""	""	""	"[('com.android.cts.privilegedupdate.PrivilegedUpdateTest', 9), ('android.content.cts.ReadableUriExtraToClipDataTest', 3), ('android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest', 3), ('com.android.cts.managedprofile.CrossProfileSharingTest', 2), ('android.widget.cts.ToastTest', 2), ('com.android.cts.managedprofile.DisallowSharingIntoProfileTest', 2), ('android.widget.cts.TextViewTest', 2), ('android.view.accessibility.cts.AccessibilityManagerTest', 1), ('android.video.cts.CodecEncoderPerformanceTest', 1), ('android.sharesheet.cts.CtsSharesheetDeviceTest', 1), ('android.view.cts.ViewConfigurationTest', 1), ('android.content.cts.IntentFilterTest', 1), ('android.media.cts.AudioTrackTest', 1), ('android.app.cts.backgroundrestrictions.BroadcastsTest', 1), ('android.hardware.camera2.cts.RecordingTest', 1), ('android.os.cts.StrictModeTest', 1), ('android.os.cts.HwBinderTest', 1), ('android.media.cts.CamcorderProfileTest', 1), ('com.android.cts.managedprofile.BluetoothSharingRestrictionTest', 1), ('android.widget.cts29.ToastTest', 1), ('com.android.cts.managedprofile.NfcTest', 1), ('android.app.notification.legacy29.cts.NotificationAssistantServiceTest', 1), ('android.admin.cts.DevicePolicyManagerTest', 1)]"	"[('getMediaType', 14), ('setUp', 6), ('getContext', 4), ('getCodec', 4), ('getProfile', 3), ('getInstrumentation', 2), ('getHeight', 2), ('getWidth', 2), ('getBitrate', 2), ('getSimpleName', 1), ('input', 1), ('size', 1), ('getMimesOfAvailableHardwareVideoEncoders', 1), ('addCrossProfileIntents', 1), ('IntentFilter', 1), ('clearCrossProfileIntents', 1), ('getSendIntent', 1), ('getName', 1), ('getDefaultDurationSeconds', 1), ('getRecommendedFileFormat', 1), ('getVideoProfiles', 1), ('getFrameRate', 1), ('getAudioProfiles', 1), ('getSampleRate', 1), ('getChannels', 1), ('hasProfile', 1)]"	"[('CtsWidgetTestCases', 5), ('CtsContentTestCases', 4), ('CtsCameraTestCases', 4), ('CtsMediaTestCases', 2), ('CtsAccessibilityTestCases', 1), ('CtsVideoTestCases', 1), ('CtsSharesheetTestCases', 1), ('CtsViewTestCases', 1), ('CtsBackgroundRestrictionsTestCases', 1), ('CtsLegacyNotification29TestCases', 1), ('CtsAdminTestCases', 1)]"	""	""	""	""	"android.admin.cts.DevicePolicyManagerTest"	"hasProfile"	"CtsAdminTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/PrivilegedUpdateApp/src/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ReadableUriExtraToClipDataTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileSharingTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ToastTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/TextViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/video/src/android/video/cts/CodecEncoderPerformanceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/sharesheet/src/android/sharesheet/cts/CtsSharesheetDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentFilterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/background/src/android/app/cts/backgroundrestrictions/BroadcastsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/StrictModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/CamcorderProfileTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/BluetoothSharingRestrictionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget29/src/android/widget/cts29/ToastTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/NfcTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/notificationlegacy/notificationlegacy29/src/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 1)]"	"[('(18,RECOMMENDED,/android/view/accessibility/cts/AccessibilityManagerTest.java)', 1), ('(1,RECOMMENDED,/android/video/cts/CodecEncoderPerformanceTest.java)', 1), ('(1,ACTION_SEND,/android/sharesheet/cts/CtsSharesheetDeviceTest.java)', 1), ('(1,RECOMMENDED,/android/view/cts/ViewConfigurationTest.java)', 1), ('(2,ACTION_SEND,/android/content/cts/ReadableUriExtraToClipDataTest.java)', 1), ('(1,ACTION_SEND_MULTIPLE,/android/content/cts/ReadableUriExtraToClipDataTest.java)', 1), ('(3,ACTION_SEND,/android/content/cts/IntentFilterTest.java)', 1), ('(1,RECOMMENDED,/android/media/cts/AudioTrackTest.java)', 1), ('(1,ACTION_SEND,/android/app/cts/backgroundrestrictions/BroadcastsTest.java)', 1), ('(2,ACTION_SEND,/com/android/cts/managedprofile/CrossProfileSharingTest.java)', 1), ('(1,RECOMMENDED,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(1,ACTION_SEND,/android/os/cts/StrictModeTest.java)', 1), ('(1,RECOMMENDED,/android/os/cts/HwBinderTest.java)', 1), ('(9,ACTION_SEND,/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java)', 1), ('(3,ACTION_SEND_MULTIPLE,/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java)', 1), ('(3,ACTION_SENDTO,/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java)', 1), ('(7,RECOMMENDED,/android/widget/cts/ToastTest.java)', 1), ('(2,ACTION_SEND,/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java)', 1), ('(1,ACTION_SEND_MULTIPLE,/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java)', 1), ('(112,RECOMMENDED,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(1,RECOMMENDED,/android/media/cts/CamcorderProfileTest.java)', 1), ('(1,ACTION_SEND,/com/android/cts/managedprofile/BluetoothSharingRestrictionTest.java)', 1), ('(6,RECOMMENDED,/android/widget/cts29/ToastTest.java)', 1), ('(3,ACTION_SEND,/android/widget/cts/TextViewTest.java)', 1), ('(1,ACTION_SEND,/com/android/cts/managedprofile/NfcTest.java)', 1), ('(1,ACTION_SEND,/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java)', 1), ('(3,RECOMMENDED,/android/admin/cts/DevicePolicyManagerTest.java)', 1)]"	"[('([18:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[RECOMMENDED]:[18]:method_text:[;        } catch (IOException e) {            fail(""Fail to run shell command"");        }    }}])', 1), ('([1:/android/video/cts/CodecEncoderPerformanceTest.java]:[RECOMMENDED]:[1]:method_text:[  /**     * Validates performance of hardware accelerated video encoders     */    @LargeTest   ])', 1), ('([1:/android/sharesheet/cts/CtsSharesheetDeviceTest.java]:[ACTION_SEND]:[1]:method_text:[indObject(By.textContains(containsText)),                WAIT_AND_ASSERT_FOUND_TIMEOUT_MS);    }}])', 1), ('([1:/android/view/cts/ViewConfigurationTest.java]:[RECOMMENDED]:[1]:method_text:[     assertTrue(scaledMinScalingSpanMm < 40.5); // 1.5 times the recommended size of 27mm    }   ])', 1), ('([1:/android/content/cts/ReadableUriExtraToClipDataTest.java]:[ACTION_SEND]:[1]:method_text:[;        getContext().startActivity(intent);        waitForConfirmationReadSuccess();    }   ])', 1), ('([1:/android/content/cts/ReadableUriExtraToClipDataTest.java]:[ACTION_SEND]:[1]:method_text:[ONDS));        } catch (InterruptedException e) {            fail(e.toString());        }    }}])', 1), ('([1:/android/content/cts/ReadableUriExtraToClipDataTest.java]:[ACTION_SEND_MULTIPLE]:[1]:method_text:[ONDS));        } catch (InterruptedException e) {            fail(e.toString());        }    }}])', 1), ('([3:/android/content/cts/IntentFilterTest.java]:[ACTION_SEND]:[3]:method_text:[        ""image/jpeg"",                        ""content:"",                        true));    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[RECOMMENDED]:[1]:method_text:[wn when setBufferSizeInBytes""                  + "" is excluded from builder"");        }    }   ])', 1), ('([1:/android/app/cts/backgroundrestrictions/BroadcastsTest.java]:[ACTION_SEND]:[1]:method_text:[     }            }        } finally {            receiverDeinitializer.run();        }    }}])', 1), ('([1:/com/android/cts/managedprofile/CrossProfileSharingTest.java]:[ACTION_SEND]:[1]:method_text:[_CAN_ACCESS_PARENT |                DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);    }   ])', 1), ('([1:/com/android/cts/managedprofile/CrossProfileSharingTest.java]:[ACTION_SEND]:[1]:method_text:[tch == 0) {                return resolveInfo;            }        }        return null;    }}])', 1), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[RECOMMENDED]:[1]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[ACTION_SEND]:[1]:method_text:[tThat(info.getStackTrace()).contains(badUri + "" exposed beyond app"");                });    }   ])', 1), ('([1:/android/os/cts/HwBinderTest.java]:[RECOMMENDED]:[1]:method_text:[fset), 0.0);            assertEquals(2.0, blob.getDouble(offset + 8), 0.0);        }),    };   ])', 1), ('([3:/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java]:[ACTION_SEND]:[3]:method_text:[ged packages can obtain higher priorities except for those on     * protected actions.      */   ])', 1), ('([3:/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java]:[ACTION_SEND]:[3]:method_text:[ allow any filter obtain a higher priority than what was defined on     * system image.     */   ])', 1), ('([3:/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java]:[ACTION_SEND]:[3]:method_text:[        assertEquals(action + ""; wrong priority"", priority, foundInfo.filter.getPriority());    }}])', 1), ('([1:/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java]:[ACTION_SEND_MULTIPLE]:[1]:method_text:[ged packages can obtain higher priorities except for those on     * protected actions.      */   ])', 1), ('([1:/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java]:[ACTION_SEND_MULTIPLE]:[1]:method_text:[ allow any filter obtain a higher priority than what was defined on     * system image.     */   ])', 1), ('([1:/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java]:[ACTION_SEND_MULTIPLE]:[1]:method_text:[        assertEquals(action + ""; wrong priority"", priority, foundInfo.filter.getPriority());    }}])', 1), ('([1:/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java]:[ACTION_SENDTO]:[1]:method_text:[ged packages can obtain higher priorities except for those on     * protected actions.      */   ])', 1), ('([1:/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java]:[ACTION_SENDTO]:[1]:method_text:[ allow any filter obtain a higher priority than what was defined on     * system image.     */   ])', 1), ('([1:/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java]:[ACTION_SENDTO]:[1]:method_text:[        assertEquals(action + ""; wrong priority"", priority, foundInfo.filter.getPriority());    }}])', 1), ('([1:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[1]:method_text:[          putSecureSetting(SETTINGS_ACCESSIBILITY_UI_TIMEOUT, originalSetting);        }    }   ])', 1), ('([6:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 1), ('([2:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[ACTION_SEND]:[2]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1), ('([1:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[ACTION_SEND_MULTIPLE]:[1]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[1]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 1), ('([67:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[67]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 1), ('([44:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[44]:method_text:[            }        }    }    /**     * Test {@link CameraCharacteristics#getKeys}     */   ])', 1), ('([1:/android/media/cts/CamcorderProfileTest.java]:[RECOMMENDED]:[1]:method_text:[dProfile, highHighSpeedProfile,                specificHighSpeedProfileQualities, null);    }   ])', 1), ('([1:/com/android/cts/managedprofile/BluetoothSharingRestrictionTest.java]:[ACTION_SEND]:[1]:method_text:[         TestCase.fail(component + "" isn\'t available as a handler for "" + intent);        }    }}])', 1), ('([6:/android/widget/cts29/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[ACTION_SEND]:[1]:method_text:[tualAction);        assertEquals(expectedImeOptionFlags, actualFlags);    }    @UiThreadTest   ])', 1), ('([2:/android/widget/cts/TextViewTest.java]:[ACTION_SEND]:[2]:method_text:[orInfo.IME_FLAG_NO_EXTRACT_UI                        | EditorInfo.IME_FLAG_FORCE_ASCII);    }   ])', 1), ('([1:/com/android/cts/managedprofile/NfcTest.java]:[ACTION_SEND]:[1]:method_text:[tyInfo.name)) {                return true;            }        }        return false;    }}])', 1), ('([1:/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java]:[ACTION_SEND]:[1]:method_text:[und || action.actionIntent.equals(sendIntent);        }        assertTrue(actionFound);    }   ])', 1), ('([3:/android/admin/cts/DevicePolicyManagerTest.java]:[RECOMMENDED]:[3]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ])', 1)]"	"https://developer.android.com"	""	"[('ACTION_SEND', 17), ('RECOMMENDED', 14), ('ACTION_SEND_MULTIPLE', 5), ('ACTION_SENDTO', 3)]"	"[('[com.android.cts.privilegedupdate.PrivilegedUpdateTest testSystemAppPriorities None]', 3), ('[com.android.cts.privilegedupdate.PrivilegedUpdateTest testPrivilegedAppPriorities None]', 3), ('[com.android.cts.privilegedupdate.PrivilegedUpdateTest testPrivilegedAppUpgradePriorities None]', 3), ('[android.content.cts.ReadableUriExtraToClipDataTest testUriExtraStreamMigratedToClipData_sendMultipleIntent CtsContentTestCases]', 2), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetRecommendedTimeoutMillis CtsAccessibilityTestCases]', 1), ('[android.sharesheet.cts.CtsSharesheetDeviceTest contentPreviewTest CtsSharesheetTestCases]', 1), ('[android.view.cts.ViewConfigurationTest testInstanceValues CtsViewTestCases]', 1), ('[android.content.cts.ReadableUriExtraToClipDataTest testUriExtraStreamMigratedToClipData_sendIntent CtsContentTestCases]', 1), ('[android.content.cts.IntentFilterTest testAppEnumerationCustomShareSheet CtsContentTestCases]', 1), ('[android.media.cts.AudioTrackTest testAc3BuilderNoBufferSize CtsMediaTestCases]', 1), ('[android.app.cts.backgroundrestrictions.BroadcastsTest testNonSupportedBroadcastsNotDelivered_manifestReceiver CtsBackgroundRestrictionsTestCases]', 1), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes CtsCameraTestCases]', 1), ('[android.os.cts.StrictModeTest testFileUriExposure_Chooser None]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenCustomToastAndWithA11yTimeoutEnabled CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenTextToastAndWithA11yTimeoutEnabled CtsWidgetTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testRecommendedStreamConfigurations CtsCameraTestCases]', 1), ('[com.android.cts.managedprofile.BluetoothSharingRestrictionTest testOppDisabledWhenRestrictionSet None]', 1), ('[android.widget.cts29.ToastTest testAccessDuration_withA11yTimeoutEnabled CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testAccessGravity CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testImeOptions CtsWidgetTestCases]', 1), ('[com.android.cts.managedprofile.NfcTest testNfcShareEnabled None]', 1), ('[android.app.notification.legacy29.cts.NotificationAssistantServiceTest testAdjustNotification_smartActionKey CtsLegacyNotification29TestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetRecommendedGlobalProxy_failIfNotDeviceOwner CtsAdminTestCases]', 1)]"
"2.5.1  Hardware"	"7.3.3"	"A-3-2"	"7.3.3/A-3-2"	"07030300.650302"	"""[7.3.3/A-3-2] MUST meet the time-to-first-fix criteria as      described in """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"2.2.1  Hardware"	"7.1.1.1"	"H-1-1"	"7.1.1.1/H-1-1"	"07010101.720101"	"""[7.1.1.1/H-1-1]* MUST make the logical screen that is made available for third party applications be at least 2 inches on the short edge(s) and 2.7 inches on the long edge(s). Devices which launched on an API level earlier than that of this document are exempted from this requirement.  If Handheld device implementations do not support software screen rotation, they:  *   ["""	""	""	"edge(s)"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"6.1  Developer Tools"	"6.1"	"C-3-2"	"6.1/C-3-2"	"06010000.670302"	"""C-3-2] MUST provide drivers for Windows 7, 8 and 10, allowing     developers to connect to the device using the adb protocol.      If device implementations support adb connections to a host machine via     Wi-Fi, they:      """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"7.5.4  Camera API Behavior"	"7.5.4"	"C-0-12"	"7.5.4/C-0-12"	"07050400.670012"	"""C-0-12] MUST ensure that the facial appearance is NOT altered, including     but not limited to altering facial geometry, facial skin tone, or facial     skin smoothening for any [`android.hardware.camera2`](https://developer.android.com/reference/android/hardware/camera2/package-summary)     or [`android.hardware.Camera`](https://developer.android.com/reference/android/hardware/Camera)     API. """	""	""	"android.hardware.Camera android.hardware.camera"	""	""	""	""	"[('android.hardware.cts.CameraTest', 12), ('android.hardware.camera2.cts.CameraExtensionSessionTest', 8), ('android.hardware.camera2.cts.FastBasicsTest', 4), ('android.hardware.cts.Camera_SizeTest', 4), ('android.hardware.camera2.cts.CameraDeviceTest', 4), ('android.hardware.camera2.cts.NativeCameraDeviceTest', 2), ('android.hardware.camera2.cts.IdleUidTest', 2), ('android.hardware.camera2.cts.CameraExtensionCharacteristicsTest', 2), ('android.hardware.cts.LegacyCameraPerformanceTest', 2), ('android.hardware.camera2.cts.OfflineSessionTest', 2), ('android.hardware.cts.CameraGLTest', 2), ('android.hardware.camera2.cts.ImageWriterTest', 2), ('android.hardware.camera2.cts.MultiViewTest', 2), ('android.media.cts.MediaPlayerTest', 2), ('android.security.cts.OutputConfigurationTest', 2), ('android.hardware.camera2.cts.FlashlightTest', 2), ('android.hardware.camera2.cts.MultiResolutionReprocessCaptureTest', 2), ('android.hardware.cts.Camera_ParametersTest', 2), ('android.mediadrm.cts.MediaPlayerDrmTest', 2), ('android.content.cts.BroadcastReceiverTest', 2), ('android.hardware.camera2.cts.HeifWriterTest', 2), ('android.hardware.camera2.cts.LogicalCameraDeviceTest', 2), ('android.hardware.camera2.cts.SurfaceViewPreviewTest', 2), ('android.hardware.camera2.cts.MultiResolutionImageReaderTest', 2), ('android.hardware.camera2.cts.CaptureRequestTest', 2), ('android.mediastress.cts.MediaRecorderStressTest', 2), ('android.hardware.camera2.cts.BurstCaptureTest', 2), ('android.hardware.multiprocess.camera.cts.CameraEvictionTest', 2), ('android.hardware.camera2.cts.BurstCaptureRawTest', 2), ('android.hardware.camera2.cts.NativeStillCaptureTest', 2), ('android.hardware.camera2.cts.RecordingTest', 2), ('android.hardware.camera2.cts.StaticMetadataTest', 2), ('android.hardware.camera2.cts.CameraManagerTest', 2), ('android.app.cts.SystemFeaturesTest', 2), ('android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest', 2), ('com.android.cts.managedprofile.CameraPolicyTest', 2), ('android.media.cts.CameraProfileTest', 2), ('com.android.cts.deviceandprofileowner.UserRestrictionsParentTest', 2), ('android.hardware.camera2.cts.RobustnessTest', 2), ('com.android.cts.ephemeralapp1.ClientTest', 2), ('com.android.cts.verifier.camera.performance.CameraPerformanceActivity', 2), ('android.hardware.camera2.cts.AllocationTest', 2), ('android.hardware.camera2.cts.NativeCameraManagerTest', 2), ('android.camera.cts.api25test.EnableZslTest', 2), ('android.media.cts.CamcorderProfileTest', 2), ('android.view.cts.TextureViewCameraTest', 2), ('android.adbmanager.cts.AdbManagerHostDeviceTest', 2), ('android.graphics.cts.CameraVulkanGpuTest', 2), ('android.permission.cts.CameraPermissionTest', 2), ('android.hardware.camera2.cts.CtsUtilsTest', 2), ('android.hardware.camera2.cts.CaptureResultTest', 2), ('com.android.server.cts.device.statsdatom.AtomTests', 2), ('android.permission.cts.Camera2PermissionTest', 2), ('android.hardware.camera2.cts.StillCaptureTest', 2), ('android.hardware.camera2.cts.DngCreatorTest', 2), ('android.hardware.camera2.cts.ReprocessCaptureTest', 2), ('android.content.pm.cts.FeatureGroupInfoTest', 2), ('android.hardware.camera2.cts.ZoomCaptureTest', 2), ('android.cts.statsdatom.statsd.UidAtomTests', 2), ('android.hardware.camera2.cts.ImageReaderTest', 2), ('android.hardware.camera2.cts.ConcurrentCameraTest', 2), ('android.media.cts.MediaRecorderTest', 2), ('android.hardware.camera2.cts.PerformanceTest', 2), ('android.hardware.camera2.cts.NativeImageReaderTest', 2), ('android.camera.cts.api31test.SPerfClassTest', 2)]"	"[('setUp', 110), ('tearDown', 68), ('getMediaType', 28), ('getWidth', 12), ('getContext', 10), ('getInstrumentation', 8), ('getHeight', 8), ('getCodec', 8), ('getTargetContext', 6), ('getActivity', 6), ('Monitor', 6), ('getPackageManager', 6), ('getProfile', 6), ('start', 4), ('PreviewCallback', 4), ('ConditionVariable', 4), ('Object', 4), ('close', 4), ('getExternalStorageDirectory', 4), ('getDownloadedFolder', 4), ('getSimpleName', 4), ('getSystemAvailableFeatures', 4), ('startBackgroundThread', 4), ('BlockingStateCallback', 4), ('clearContext', 4), ('toString', 4), ('never', 4), ('getBitrate', 4), ('startHandlerThread', 2), ('stopHandlerThread', 2), ('quit', 2), ('getCameraManager', 2), ('SurfaceTextureCallback', 2), ('SurfaceTextureBurstCallback', 2), ('beforeActivityLaunched', 2), ('Renderer', 2), ('getView', 2), ('before', 2), ('after', 2), ('release', 2), ('updatePreviewSurfaceTexture', 2), ('getTextureView', 2), ('getMediaDirString', 2), ('getAbsolutePath', 2), ('hasFlash', 2), ('getPath', 2), ('getTopDirString', 2), ('CameraErrorCallback', 2), ('RecorderErrorCallback', 2), ('initializeAvailabilityCallbacksNative', 2), ('stopBackgroundThread', 2), ('getContentResolver', 2), ('getUiAutomation', 2), ('getLooper', 2), ('CameraIterable', 2), ('SizeIterable', 2), ('ResultIterable', 2), ('quitSafely', 2), ('getSourceSize', 2), ('getSize', 2), ('getLaunchOptions', 2), ('LaunchOptions', 2), ('toRectF', 2), ('BlockingSessionCallback', 2), ('CaptureCallback', 2), ('advanceInputWaiting', 2), ('execute', 2), ('stopCapture', 2), ('getStateWaiter', 2), ('getInputData', 2), ('getOutputAllocation', 2), ('getBytesSize', 2), ('getOutputData', 2), ('getCacheDir', 2), ('anyInt', 2), ('getDefaultDurationSeconds', 2), ('getRecommendedFileFormat', 2), ('getVideoProfiles', 2), ('getFrameRate', 2), ('getAudioProfiles', 2), ('getSampleRate', 2), ('getChannels', 2), ('hasProfile', 2), ('setup', 2), ('getNumberOfCameras', 2), ('getDevice', 2), ('getStdout', 2), ('trim', 2), ('onShutter', 2), ('flush', 2), ('StreamCombinationTargets', 2), ('getVideoEncoders', 2)]"	"[('CtsCameraTestCases', 106), ('CtsMediaTestCases', 8), ('CtsContentTestCases', 4), ('CtsPermissionTestCases', 4), ('CtsSecurityTestCases', 2), ('CtsMediaDrmTestCases', 2), ('CtsMediaStressTestCases', 2), ('CtsAppTestCases', 2), ('CtsCameraApi25TestCases', 2), ('CtsViewTestCases', 2), ('CtsAdbManagerHostTestCases', 2), ('CtsGraphicsTestCases', 2), ('CtsStatsdAtomHostTestCases', 2), ('CtsCameraApi31TestCases', 2)]"	""	""	""	""	"android.camera.cts.api31test.SPerfClassTest"	"setUp"	"CtsCameraApi31TestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/cts/CameraTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraExtensionSessionTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/FastBasicsTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/cts/Camera_SizeTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraDeviceTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/NativeCameraDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/IdleUidTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/cts/LegacyCameraPerformanceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/OfflineSessionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/cts/CameraGLTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageWriterTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/OutputConfigurationTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/FlashlightTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiResolutionReprocessCaptureTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/cts/Camera_ParametersTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/mediadrm/src/android/mediadrm/cts/MediaPlayerDrmTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/BroadcastReceiverTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/HeifWriterTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/LogicalCameraDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/SurfaceViewPreviewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiResolutionImageReaderTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureRequestTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/mediastress/src/android/mediastress/cts/MediaRecorderStressTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/multiprocess/camera/cts/CameraEvictionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureRawTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/NativeStillCaptureTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/StaticMetadataTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CameraPolicyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/CameraProfileTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/EphemeralApp1/src/com/android/cts/ephemeralapp1/ClientTest.java', 2), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/camera/performance/CameraPerformanceActivity.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/AllocationTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/NativeCameraManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/api25test/src/android/camera/cts/api25test/EnableZslTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/CamcorderProfileTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/TextureViewCameraTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/CameraPermissionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CtsUtilsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/AtomTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/Camera2PermissionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/StillCaptureTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/DngCreatorTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ReprocessCaptureTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/FeatureGroupInfoTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ZoomCaptureTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/statsd/UidAtomTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ConcurrentCameraTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/PerformanceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/NativeImageReaderTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/api31test/src/android/camera/cts/api31test/SPerfClassTest.java', 2)]"	"[('(2,android.hardware.Camera,/android/hardware/camera2/cts/NativeCameraDeviceTest.java)', 1), ('(2,android.hardware.camera,/android/hardware/camera2/cts/NativeCameraDeviceTest.java)', 1), ('(6,android.hardware.Camera,/android/hardware/camera2/cts/IdleUidTest.java)', 1), ('(6,android.hardware.camera,/android/hardware/camera2/cts/IdleUidTest.java)', 1), ('(4,android.hardware.Camera,/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java)', 1), ('(4,android.hardware.camera,/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java)', 1), ('(12,android.hardware.Camera,/android/hardware/camera2/cts/FastBasicsTest.java)', 1), ('(12,android.hardware.camera,/android/hardware/camera2/cts/FastBasicsTest.java)', 1), ('(2,android.hardware.Camera,/android/hardware/cts/LegacyCameraPerformanceTest.java)', 1), ('(2,android.hardware.camera,/android/hardware/cts/LegacyCameraPerformanceTest.java)', 1), ('(13,android.hardware.Camera,/android/hardware/camera2/cts/OfflineSessionTest.java)', 1), ('(13,android.hardware.camera,/android/hardware/camera2/cts/OfflineSessionTest.java)', 1), ('(4,android.hardware.Camera,/android/hardware/cts/CameraGLTest.java)', 1), ('(4,android.hardware.camera,/android/hardware/cts/CameraGLTest.java)', 1), ('(7,android.hardware.Camera,/android/hardware/camera2/cts/ImageWriterTest.java)', 1), ('(7,android.hardware.camera,/android/hardware/camera2/cts/ImageWriterTest.java)', 1), ('(19,android.hardware.Camera,/android/hardware/camera2/cts/CameraExtensionSessionTest.java)', 1), ('(19,android.hardware.camera,/android/hardware/camera2/cts/CameraExtensionSessionTest.java)', 1), ('(13,android.hardware.Camera,/android/hardware/camera2/cts/MultiViewTest.java)', 1), ('(13,android.hardware.camera,/android/hardware/camera2/cts/MultiViewTest.java)', 1), ('(1,android.hardware.Camera,/android/media/cts/MediaPlayerTest.java)', 1), ('(1,android.hardware.camera,/android/media/cts/MediaPlayerTest.java)', 1), ('(1,android.hardware.Camera,/android/security/cts/OutputConfigurationTest.java)', 1), ('(1,android.hardware.camera,/android/security/cts/OutputConfigurationTest.java)', 1), ('(7,android.hardware.Camera,/android/hardware/camera2/cts/FlashlightTest.java)', 1), ('(7,android.hardware.camera,/android/hardware/camera2/cts/FlashlightTest.java)', 1), ('(21,android.hardware.Camera,/android/hardware/camera2/cts/MultiResolutionReprocessCaptureTest.java)', 1), ('(21,android.hardware.camera,/android/hardware/camera2/cts/MultiResolutionReprocessCaptureTest.java)', 1), ('(1,android.hardware.Camera,/android/hardware/cts/Camera_ParametersTest.java)', 1), ('(1,android.hardware.camera,/android/hardware/cts/Camera_ParametersTest.java)', 1), ('(3,android.hardware.Camera,/android/hardware/cts/Camera_SizeTest.java)', 1), ('(3,android.hardware.camera,/android/hardware/cts/Camera_SizeTest.java)', 1), ('(1,android.hardware.Camera,/android/mediadrm/cts/MediaPlayerDrmTest.java)', 1), ('(1,android.hardware.camera,/android/mediadrm/cts/MediaPlayerDrmTest.java)', 1), ('(1,android.hardware.Camera,/android/content/cts/BroadcastReceiverTest.java)', 1), ('(1,android.hardware.camera,/android/content/cts/BroadcastReceiverTest.java)', 1), ('(11,android.hardware.Camera,/android/hardware/camera2/cts/HeifWriterTest.java)', 1), ('(11,android.hardware.camera,/android/hardware/camera2/cts/HeifWriterTest.java)', 1), ('(18,android.hardware.Camera,/android/hardware/camera2/cts/LogicalCameraDeviceTest.java)', 1), ('(18,android.hardware.camera,/android/hardware/camera2/cts/LogicalCameraDeviceTest.java)', 1), ('(14,android.hardware.Camera,/android/hardware/camera2/cts/SurfaceViewPreviewTest.java)', 1), ('(14,android.hardware.camera,/android/hardware/camera2/cts/SurfaceViewPreviewTest.java)', 1), ('(24,android.hardware.Camera,/android/hardware/camera2/cts/MultiResolutionImageReaderTest.java)', 1), ('(24,android.hardware.camera,/android/hardware/camera2/cts/MultiResolutionImageReaderTest.java)', 1), ('(20,android.hardware.Camera,/android/hardware/camera2/cts/CaptureRequestTest.java)', 1), ('(20,android.hardware.camera,/android/hardware/camera2/cts/CaptureRequestTest.java)', 1), ('(4,android.hardware.Camera,/android/mediastress/cts/MediaRecorderStressTest.java)', 1), ('(4,android.hardware.camera,/android/mediastress/cts/MediaRecorderStressTest.java)', 1), ('(11,android.hardware.Camera,/android/hardware/camera2/cts/BurstCaptureTest.java)', 1), ('(11,android.hardware.camera,/android/hardware/camera2/cts/BurstCaptureTest.java)', 1), ('(5,android.hardware.Camera,/android/hardware/multiprocess/camera/cts/CameraEvictionTest.java)', 1), ('(5,android.hardware.camera,/android/hardware/multiprocess/camera/cts/CameraEvictionTest.java)', 1), ('(12,android.hardware.Camera,/android/hardware/camera2/cts/BurstCaptureRawTest.java)', 1), ('(12,android.hardware.camera,/android/hardware/camera2/cts/BurstCaptureRawTest.java)', 1), ('(2,android.hardware.Camera,/android/hardware/camera2/cts/NativeStillCaptureTest.java)', 1), ('(2,android.hardware.camera,/android/hardware/camera2/cts/NativeStillCaptureTest.java)', 1), ('(13,android.hardware.Camera,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(13,android.hardware.camera,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(11,android.hardware.Camera,/android/hardware/camera2/cts/StaticMetadataTest.java)', 1), ('(11,android.hardware.camera,/android/hardware/camera2/cts/StaticMetadataTest.java)', 1), ('(10,android.hardware.Camera,/android/hardware/camera2/cts/CameraManagerTest.java)', 1), ('(10,android.hardware.camera,/android/hardware/camera2/cts/CameraManagerTest.java)', 1), ('(6,android.hardware.Camera,/android/app/cts/SystemFeaturesTest.java)', 1), ('(6,android.hardware.camera,/android/app/cts/SystemFeaturesTest.java)', 1), ('(18,android.hardware.Camera,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(18,android.hardware.camera,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(1,android.hardware.Camera,/com/android/cts/managedprofile/CameraPolicyTest.java)', 1), ('(1,android.hardware.camera,/com/android/cts/managedprofile/CameraPolicyTest.java)', 1), ('(1,android.hardware.Camera,/android/media/cts/CameraProfileTest.java)', 1), ('(1,android.hardware.camera,/android/media/cts/CameraProfileTest.java)', 1), ('(1,android.hardware.Camera,/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java)', 1), ('(1,android.hardware.camera,/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java)', 1), ('(21,android.hardware.Camera,/android/hardware/camera2/cts/RobustnessTest.java)', 1), ('(21,android.hardware.camera,/android/hardware/camera2/cts/RobustnessTest.java)', 1), ('(2,android.hardware.Camera,/com/android/cts/ephemeralapp1/ClientTest.java)', 1), ('(2,android.hardware.camera,/com/android/cts/ephemeralapp1/ClientTest.java)', 1), ('(1,android.hardware.Camera,/com/android/cts/verifier/camera/performance/CameraPerformanceActivity.java)', 1), ('(1,android.hardware.camera,/com/android/cts/verifier/camera/performance/CameraPerformanceActivity.java)', 1), ('(25,android.hardware.Camera,/android/hardware/camera2/cts/AllocationTest.java)', 1), ('(25,android.hardware.camera,/android/hardware/camera2/cts/AllocationTest.java)', 1), ('(22,android.hardware.Camera,/android/hardware/camera2/cts/CameraDeviceTest.java)', 1), ('(22,android.hardware.camera,/android/hardware/camera2/cts/CameraDeviceTest.java)', 1), ('(1,android.hardware.Camera,/android/hardware/camera2/cts/NativeCameraManagerTest.java)', 1), ('(1,android.hardware.camera,/android/hardware/camera2/cts/NativeCameraManagerTest.java)', 1), ('(8,android.hardware.Camera,/android/camera/cts/api25test/EnableZslTest.java)', 1), ('(8,android.hardware.camera,/android/camera/cts/api25test/EnableZslTest.java)', 1), ('(3,android.hardware.Camera,/android/media/cts/CamcorderProfileTest.java)', 1), ('(3,android.hardware.camera,/android/media/cts/CamcorderProfileTest.java)', 1), ('(1,android.hardware.Camera,/android/view/cts/TextureViewCameraTest.java)', 1), ('(1,android.hardware.camera,/android/view/cts/TextureViewCameraTest.java)', 1), ('(1,android.hardware.Camera,/android/adbmanager/cts/AdbManagerHostDeviceTest.java)', 1), ('(1,android.hardware.camera,/android/adbmanager/cts/AdbManagerHostDeviceTest.java)', 1), ('(2,android.hardware.Camera,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(2,android.hardware.camera,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(1,android.hardware.Camera,/android/permission/cts/CameraPermissionTest.java)', 1), ('(1,android.hardware.camera,/android/permission/cts/CameraPermissionTest.java)', 1), ('(22,android.hardware.Camera,/android/hardware/cts/CameraTest.java)', 1), ('(22,android.hardware.camera,/android/hardware/cts/CameraTest.java)', 1), ('(2,android.hardware.Camera,/android/hardware/camera2/cts/CtsUtilsTest.java)', 1), ('(2,android.hardware.camera,/android/hardware/camera2/cts/CtsUtilsTest.java)', 1), ('(14,android.hardware.Camera,/android/hardware/camera2/cts/CaptureResultTest.java)', 1), ('(14,android.hardware.camera,/android/hardware/camera2/cts/CaptureResultTest.java)', 1), ('(3,android.hardware.Camera,/com/android/server/cts/device/statsdatom/AtomTests.java)', 1), ('(3,android.hardware.camera,/com/android/server/cts/device/statsdatom/AtomTests.java)', 1), ('(4,android.hardware.Camera,/android/permission/cts/Camera2PermissionTest.java)', 1), ('(4,android.hardware.camera,/android/permission/cts/Camera2PermissionTest.java)', 1), ('(14,android.hardware.Camera,/android/hardware/camera2/cts/StillCaptureTest.java)', 1), ('(14,android.hardware.camera,/android/hardware/camera2/cts/StillCaptureTest.java)', 1), ('(16,android.hardware.Camera,/android/hardware/camera2/cts/DngCreatorTest.java)', 1), ('(16,android.hardware.camera,/android/hardware/camera2/cts/DngCreatorTest.java)', 1), ('(12,android.hardware.Camera,/android/hardware/camera2/cts/ReprocessCaptureTest.java)', 1), ('(12,android.hardware.camera,/android/hardware/camera2/cts/ReprocessCaptureTest.java)', 1), ('(2,android.hardware.Camera,/android/content/pm/cts/FeatureGroupInfoTest.java)', 1), ('(2,android.hardware.camera,/android/content/pm/cts/FeatureGroupInfoTest.java)', 1), ('(10,android.hardware.Camera,/android/hardware/camera2/cts/ZoomCaptureTest.java)', 1), ('(10,android.hardware.camera,/android/hardware/camera2/cts/ZoomCaptureTest.java)', 1), ('(3,android.hardware.Camera,/android/cts/statsdatom/statsd/UidAtomTests.java)', 1), ('(3,android.hardware.camera,/android/cts/statsdatom/statsd/UidAtomTests.java)', 1), ('(17,android.hardware.Camera,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(17,android.hardware.camera,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(15,android.hardware.Camera,/android/hardware/camera2/cts/ConcurrentCameraTest.java)', 1), ('(15,android.hardware.camera,/android/hardware/camera2/cts/ConcurrentCameraTest.java)', 1), ('(1,android.hardware.Camera,/android/media/cts/MediaRecorderTest.java)', 1), ('(1,android.hardware.camera,/android/media/cts/MediaRecorderTest.java)', 1), ('(17,android.hardware.Camera,/android/hardware/camera2/cts/PerformanceTest.java)', 1), ('(17,android.hardware.camera,/android/hardware/camera2/cts/PerformanceTest.java)', 1), ('(2,android.hardware.Camera,/android/hardware/camera2/cts/NativeImageReaderTest.java)', 1), ('(2,android.hardware.camera,/android/hardware/camera2/cts/NativeImageReaderTest.java)', 1), ('(15,android.hardware.Camera,/android/camera/cts/api31test/SPerfClassTest.java)', 1), ('(15,android.hardware.camera,/android/camera/cts/api31test/SPerfClassTest.java)', 1)]"	"[('([2:/android/hardware/camera2/cts/NativeCameraDeviceTest.java]:[android.hardware.Camera]:[2]:method_text:[dLibrary(""ctscamera2_jni"");        Log.i(""NativeCameraDeviceTest"", ""after loadlibrary"");    }   ])', 1), ('([2:/android/hardware/camera2/cts/NativeCameraDeviceTest.java]:[android.hardware.camera]:[2]:method_text:[dLibrary(""ctscamera2_jni"");        Log.i(""NativeCameraDeviceTest"", ""after loadlibrary"");    }   ])', 1), ('([6:/android/hardware/camera2/cts/IdleUidTest.java]:[android.hardware.Camera]:[6]:method_text:[);    }    /**     * Tests that a UID has access to the camera only in active state.     */   ])', 1), ('([6:/android/hardware/camera2/cts/IdleUidTest.java]:[android.hardware.camera]:[6]:method_text:[);    }    /**     * Tests that a UID has access to the camera only in active state.     */   ])', 1), ('([4:/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java]:[android.hardware.Camera]:[4]:method_text:[nsion"");        } catch (IllegalArgumentException e) {            // Expected        }    }   ])', 1), ('([4:/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java]:[android.hardware.camera]:[4]:method_text:[nsion"");        } catch (IllegalArgumentException e) {            // Expected        }    }   ])', 1), ('([11:/android/hardware/camera2/cts/FastBasicsTest.java]:[android.hardware.Camera]:[11]:method_text:[IMEOUT_MS = 8000;    private static final int FRAMES_TO_WAIT_FOR_CAPTURE = 100;    @Presubmit   ])', 1), ('([1:/android/hardware/camera2/cts/FastBasicsTest.java]:[android.hardware.Camera]:[1]:method_text:[a != null) {                    camera.release();                }            }        }    }}])', 1), ('([11:/android/hardware/camera2/cts/FastBasicsTest.java]:[android.hardware.camera]:[11]:method_text:[IMEOUT_MS = 8000;    private static final int FRAMES_TO_WAIT_FOR_CAPTURE = 100;    @Presubmit   ])', 1), ('([1:/android/hardware/camera2/cts/FastBasicsTest.java]:[android.hardware.camera]:[1]:method_text:[a != null) {                    camera.release();                }            }        }    }}])', 1), ('([2:/android/hardware/cts/LegacyCameraPerformanceTest.java]:[android.hardware.Camera]:[2]:method_text:[  if (mHelper.getCamera() != null) {            mHelper.getCamera().release();        }    }   ])', 1), ('([2:/android/hardware/cts/LegacyCameraPerformanceTest.java]:[android.hardware.camera]:[2]:method_text:[  if (mHelper.getCamera() != null) {            mHelper.getCamera().release();        }    }   ])', 1), ('([13:/android/hardware/camera2/cts/OfflineSessionTest.java]:[android.hardware.Camera]:[13]:method_text:[* surfaces not registered with camera or surfaces used in     * repeating requests.</p>     */   ])', 1), ('([13:/android/hardware/camera2/cts/OfflineSessionTest.java]:[android.hardware.camera]:[13]:method_text:[* surfaces not registered with camera or surfaces used in     * repeating requests.</p>     */   ])', 1), ('([4:/android/hardware/cts/CameraGLTest.java]:[android.hardware.Camera]:[4]:method_text:[.setPreviewTexture in conjunction with the standard Camera preview callback */    @UiThreadTest   ])', 1), ('([4:/android/hardware/cts/CameraGLTest.java]:[android.hardware.camera]:[4]:method_text:[.setPreviewTexture in conjunction with the standard Camera preview callback */    @UiThreadTest   ])', 1), ('([7:/android/hardware/camera2/cts/ImageWriterTest.java]:[android.hardware.Camera]:[7]:method_text:[. This validates the ImageWriter explicit buffer copy     * interface.</li>     * </p>     */   ])', 1), ('([7:/android/hardware/camera2/cts/ImageWriterTest.java]:[android.hardware.camera]:[7]:method_text:[. This validates the ImageWriter explicit buffer copy     * interface.</li>     * </p>     */   ])', 1), ('([14:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[android.hardware.Camera]:[14]:method_text:[ure);    }    // Verify that camera extension sessions can be created and closed as expected.   ])', 1), ('([1:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[android.hardware.Camera]:[1]:method_text:[erage capture latency and if possible    // ensure that the value is within the reported range.   ])', 1), ('([2:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[android.hardware.Camera]:[2]:method_text:[ally increasing timestamps!"");            }            return mLastTimestamp;        }    }   ])', 1), ('([2:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[android.hardware.Camera]:[2]:method_text:[y {                    mTestRule.closeDevice(id);                }            }        }    }}])', 1), ('([14:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[android.hardware.camera]:[14]:method_text:[ure);    }    // Verify that camera extension sessions can be created and closed as expected.   ])', 1), ('([1:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[android.hardware.camera]:[1]:method_text:[erage capture latency and if possible    // ensure that the value is within the reported range.   ])', 1), ('([2:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[android.hardware.camera]:[2]:method_text:[ally increasing timestamps!"");            }            return mLastTimestamp;        }    }   ])', 1), ('([2:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[android.hardware.camera]:[2]:method_text:[y {                    mTestRule.closeDevice(id);                }            }        }    }}])', 1), ('([13:/android/hardware/camera2/cts/MultiViewTest.java]:[android.hardware.Camera]:[13]:method_text:[atic int YUV_IMG_READER_COUNT = 3;    private final static double BITMAP_DIFF_THRESHOLD = 0.1;   ])', 1), ('([13:/android/hardware/camera2/cts/MultiViewTest.java]:[android.hardware.camera]:[13]:method_text:[atic int YUV_IMG_READER_COUNT = 3;    private final static double BITMAP_DIFF_THRESHOLD = 0.1;   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[android.hardware.Camera]:[1]:method_text:[e != null && mOutFile.exists()) {            mOutFile.delete();        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[android.hardware.camera]:[1]:method_text:[e != null && mOutFile.exists()) {            mOutFile.delete();        }    }    @Presubmit   ])', 1), ('([1:/android/security/cts/OutputConfigurationTest.java]:[android.hardware.Camera]:[1]:method_text:[lass OutputConfigurationTest extends AndroidTestCase {    @AsbSecurityTest(cveBugId = 69683251)   ])', 1), ('([1:/android/security/cts/OutputConfigurationTest.java]:[android.hardware.camera]:[1]:method_text:[lass OutputConfigurationTest extends AndroidTestCase {    @AsbSecurityTest(cveBugId = 69683251)   ])', 1), ('([7:/android/hardware/camera2/cts/FlashlightTest.java]:[android.hardware.Camera]:[7]:method_text:[f (info.hasFlash()) {                mFlashCameraIdList.add(id);            }        }    }   ])', 1), ('([7:/android/hardware/camera2/cts/FlashlightTest.java]:[android.hardware.camera]:[7]:method_text:[f (info.hasFlash()) {                mFlashCameraIdList.add(id);            }        }    }   ])', 1), ('([21:/android/hardware/camera2/cts/MultiResolutionReprocessCaptureTest.java]:[android.hardware.Camera]:[21]:method_text:[  private ImageWriter mImageWriter;    private SimpleImageWriterListener mImageWriterListener;   ])', 1), ('([21:/android/hardware/camera2/cts/MultiResolutionReprocessCaptureTest.java]:[android.hardware.camera]:[21]:method_text:[  private ImageWriter mImageWriter;    private SimpleImageWriterListener mImageWriterListener;   ])', 1), ('([1:/android/hardware/cts/Camera_ParametersTest.java]:[android.hardware.Camera]:[1]:method_text:[port android.hardware.Camera.Parameters;public class Camera_ParametersTest extends TestCase {   ])', 1), ('([1:/android/hardware/cts/Camera_ParametersTest.java]:[android.hardware.camera]:[1]:method_text:[port android.hardware.Camera.Parameters;public class Camera_ParametersTest extends TestCase {   ])', 1), ('([2:/android/hardware/cts/Camera_SizeTest.java]:[android.hardware.Camera]:[2]:method_text:[float ASPECT_RATIO_TOLERANCE = 0.05f;    private static final String TAG = ""Camera_SizeTest"";   ])', 1), ('([1:/android/hardware/cts/Camera_SizeTest.java]:[android.hardware.Camera]:[1]:method_text:[see {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}     */   ])', 1), ('([2:/android/hardware/cts/Camera_SizeTest.java]:[android.hardware.camera]:[2]:method_text:[float ASPECT_RATIO_TOLERANCE = 0.05f;    private static final String TAG = ""Camera_SizeTest"";   ])', 1), ('([1:/android/hardware/cts/Camera_SizeTest.java]:[android.hardware.camera]:[1]:method_text:[see {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}     */   ])', 1), ('([1:/android/mediadrm/cts/MediaPlayerDrmTest.java]:[android.hardware.Camera]:[1]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([1:/android/mediadrm/cts/MediaPlayerDrmTest.java]:[android.hardware.camera]:[1]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([1:/android/content/cts/BroadcastReceiverTest.java]:[android.hardware.Camera]:[1]:method_text:[    }    @Override    protected void setUp() throws Exception {        super.setUp();    }   ])', 1), ('([1:/android/content/cts/BroadcastReceiverTest.java]:[android.hardware.camera]:[1]:method_text:[    }    @Override    protected void setUp() throws Exception {        super.setUp();    }   ])', 1), ('([11:/android/hardware/camera2/cts/HeifWriterTest.java]:[android.hardware.Camera]:[11]:method_text:[ }    @Override    public void tearDown() throws Exception {        super.tearDown();    }   ])', 1), ('([11:/android/hardware/camera2/cts/HeifWriterTest.java]:[android.hardware.camera]:[11]:method_text:[ }    @Override    public void tearDown() throws Exception {        super.tearDown();    }   ])', 1), ('([18:/android/hardware/camera2/cts/LogicalCameraDeviceTest.java]:[android.hardware.Camera]:[18]:method_text:[agtion behaves as expected     * for logical multi-camera and non-logical multi-camera.     */   ])', 1), ('([18:/android/hardware/camera2/cts/LogicalCameraDeviceTest.java]:[android.hardware.camera]:[18]:method_text:[agtion behaves as expected     * for logical multi-camera and non-logical multi-camera.     */   ])', 1), ('([14:/android/hardware/camera2/cts/SurfaceViewPreviewTest.java]:[android.hardware.Camera]:[14]:method_text:[e capture timestamp     * (monotonically increasing) ordering are verified.     * </p>     */   ])', 1), ('([14:/android/hardware/camera2/cts/SurfaceViewPreviewTest.java]:[android.hardware.camera]:[14]:method_text:[e capture timestamp     * (monotonically increasing) ordering are verified.     * </p>     */   ])', 1), ('([24:/android/hardware/camera2/cts/MultiResolutionImageReaderTest.java]:[android.hardware.Camera]:[24]:method_text:[er mMultiResolutionImageReader;    private SimpleMultiResolutionImageReaderListener mListener;   ])', 1), ('([24:/android/hardware/camera2/cts/MultiResolutionImageReaderTest.java]:[android.hardware.camera]:[24]:method_text:[er mMultiResolutionImageReader;    private SimpleMultiResolutionImageReaderListener mListener;   ])', 1), ('([20:/android/hardware/camera2/cts/CaptureRequestTest.java]:[android.hardware.Camera]:[20]:method_text:[        super.tearDown();    }    /**     * Test CaptureRequest settings parcelling.     */   ])', 1), ('([20:/android/hardware/camera2/cts/CaptureRequestTest.java]:[android.hardware.camera]:[20]:method_text:[        super.tearDown();    }    /**     * Test CaptureRequest settings parcelling.     */   ])', 1), ('([4:/android/mediastress/cts/MediaRecorderStressTest.java]:[android.hardware.Camera]:[4]:method_text:[order error"");        }    }    //Test case for stressing the camera preview.    @LargeTest   ])', 1), ('([4:/android/mediastress/cts/MediaRecorderStressTest.java]:[android.hardware.camera]:[4]:method_text:[order error"");        }    }    //Test case for stressing the camera preview.    @LargeTest   ])', 1), ('([11:/android/hardware/camera2/cts/BurstCaptureTest.java]:[android.hardware.Camera]:[11]:method_text:[ol.     * Also verifies sensor settings operation if READ_SENSOR_SETTINGS is available.     */   ])', 1), ('([11:/android/hardware/camera2/cts/BurstCaptureTest.java]:[android.hardware.camera]:[11]:method_text:[ol.     * Also verifies sensor settings operation if READ_SENSOR_SETTINGS is available.     */   ])', 1), ('([5:/android/hardware/multiprocess/camera/cts/CameraEvictionTest.java]:[android.hardware.Camera]:[5]:method_text:[per.tearDown();    }    /**     * Test basic eviction scenarios for the Camera1 API.     */   ])', 1), ('([5:/android/hardware/multiprocess/camera/cts/CameraEvictionTest.java]:[android.hardware.camera]:[5]:method_text:[per.tearDown();    }    /**     * Test basic eviction scenarios for the Camera1 API.     */   ])', 1), ('([12:/android/hardware/camera2/cts/BurstCaptureRawTest.java]:[android.hardware.Camera]:[12]:method_text:[own();    }    /**     * Verify raw sensor size information is correctly configured.     */   ])', 1), ('([12:/android/hardware/camera2/cts/BurstCaptureRawTest.java]:[android.hardware.camera]:[12]:method_text:[own();    }    /**     * Verify raw sensor size information is correctly configured.     */   ])', 1), ('([2:/android/hardware/camera2/cts/NativeStillCaptureTest.java]:[android.hardware.Camera]:[2]:method_text:[dLibrary(""ctscamera2_jni"");        Log.i(""NativeStillCaptureTest"", ""after loadlibrary"");    }   ])', 1), ('([2:/android/hardware/camera2/cts/NativeStillCaptureTest.java]:[android.hardware.camera]:[2]:method_text:[dLibrary(""ctscamera2_jni"");        Log.i(""NativeStillCaptureTest"", ""after loadlibrary"");    }   ])', 1), ('([13:/android/hardware/camera2/cts/RecordingTest.java]:[android.hardware.Camera]:[13]:method_text:[on and validate the     * recorded video. Preview is set to the video size.     * </p>     */   ])', 1), ('([13:/android/hardware/camera2/cts/RecordingTest.java]:[android.hardware.camera]:[13]:method_text:[on and validate the     * recorded video. Preview is set to the video size.     * </p>     */   ])', 1), ('([11:/android/hardware/camera2/cts/StaticMetadataTest.java]:[android.hardware.Camera]:[11]:method_text:[  /**     * Test the available capability for different hardware support level devices.     */   ])', 1), ('([11:/android/hardware/camera2/cts/StaticMetadataTest.java]:[android.hardware.camera]:[11]:method_text:[  /**     * Test the available capability for different hardware support level devices.     */   ])', 1), ('([10:/android/hardware/camera2/cts/CameraManagerTest.java]:[android.hardware.Camera]:[10]:method_text:[fail(""Invalid CameraAccessException code: "" + reason);        return -1; // unreachable    }   ])', 1), ('([10:/android/hardware/camera2/cts/CameraManagerTest.java]:[android.hardware.camera]:[10]:method_text:[fail(""Invalid CameraAccessException code: "" + reason);        return -1; // unreachable    }   ])', 1), ('([6:/android/app/cts/SystemFeaturesTest.java]:[android.hardware.Camera]:[6]:method_text:[properly prefixed with ""android."" that are not defined in     * {@link PackageManager}.     */   ])', 1), ('([6:/android/app/cts/SystemFeaturesTest.java]:[android.hardware.camera]:[6]:method_text:[properly prefixed with ""android."" that are not defined in     * {@link PackageManager}.     */   ])', 1), ('([18:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[android.hardware.Camera]:[18]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 1), ('([18:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[android.hardware.camera]:[18]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 1), ('([1:/com/android/cts/managedprofile/CameraPolicyTest.java]:[android.hardware.Camera]:[1]:method_text:[d tearDown() throws Exception {        stopBackgroundThread();        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/managedprofile/CameraPolicyTest.java]:[android.hardware.camera]:[1]:method_text:[d tearDown() throws Exception {        stopBackgroundThread();        super.tearDown();    }   ])', 1), ('([1:/android/media/cts/CameraProfileTest.java]:[android.hardware.Camera]:[1]:method_text:[     assertTrue(high >= 0 && high <= 100);        assertTrue(low <= mid && mid <= high);    }   ])', 1), ('([1:/android/media/cts/CameraProfileTest.java]:[android.hardware.camera]:[1]:method_text:[     assertTrue(high >= 0 && high <= 100);        assertTrue(low <= mid && mid <= high);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[android.hardware.Camera]:[1]:method_text:[ad.sleep(1000);        }        throw new AssertionError(""Failed to get UiAutomation"");    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[android.hardware.camera]:[1]:method_text:[ad.sleep(1000);        }        throw new AssertionError(""Failed to get UiAutomation"");    }   ])', 1), ('([21:/android/hardware/camera2/cts/RobustnessTest.java]:[android.hardware.Camera]:[21]:method_text:[uffer size in the     * available stream configurations for a surface with this format.     */   ])', 1), ('([21:/android/hardware/camera2/cts/RobustnessTest.java]:[android.hardware.camera]:[21]:method_text:[uffer size in the     * available stream configurations for a surface with this format.     */   ])', 1), ('([2:/com/android/cts/ephemeralapp1/ClientTest.java]:[android.hardware.Camera]:[2]:method_text:[s Exception {        InstrumentationRegistry.getContext().unregisterReceiver(mReceiver);    }   ])', 1), ('([2:/com/android/cts/ephemeralapp1/ClientTest.java]:[android.hardware.camera]:[2]:method_text:[s Exception {        InstrumentationRegistry.getContext().unregisterReceiver(mReceiver);    }   ])', 1), ('([1:/com/android/cts/verifier/camera/performance/CameraPerformanceActivity.java]:[android.hardware.Camera]:[1]:method_text:[ends RunListener {        private volatile boolean mCurrentTestReported;        @Override       ])', 1), ('([1:/com/android/cts/verifier/camera/performance/CameraPerformanceActivity.java]:[android.hardware.camera]:[1]:method_text:[ends RunListener {        private volatile boolean mCurrentTestReported;        @Override       ])', 1), ('([25:/android/hardware/camera2/cts/AllocationTest.java]:[android.hardware.Camera]:[25]:method_text:[alSizeOut);        if (VERBOSE) Log.v(TAG, ""validating Buffer , size = "" + actualSize);    }   ])', 1), ('([25:/android/hardware/camera2/cts/AllocationTest.java]:[android.hardware.camera]:[25]:method_text:[alSizeOut);        if (VERBOSE) Log.v(TAG, ""validating Buffer , size = "" + actualSize);    }   ])', 1), ('([20:/android/hardware/camera2/cts/CameraDeviceTest.java]:[android.hardware.Camera]:[20]:method_text:[ure the stable frame rate is guaranteed for the given     * settings.</li>     * </ul>     */   ])', 1), ('([2:/android/hardware/camera2/cts/CameraDeviceTest.java]:[android.hardware.Camera]:[2]:method_text:[progress work. Once the abort is complete, the idle callback will be called.     * </p>     */   ])', 1), ('([20:/android/hardware/camera2/cts/CameraDeviceTest.java]:[android.hardware.camera]:[20]:method_text:[ure the stable frame rate is guaranteed for the given     * settings.</li>     * </ul>     */   ])', 1), ('([2:/android/hardware/camera2/cts/CameraDeviceTest.java]:[android.hardware.camera]:[2]:method_text:[progress work. Once the abort is complete, the idle callback will be called.     * </p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/NativeCameraManagerTest.java]:[android.hardware.Camera]:[1]:method_text:[Library(""ctscamera2_jni"");        Log.i(""NativeCameraManagerTest"", ""after loadlibrary"");    }   ])', 1), ('([1:/android/hardware/camera2/cts/NativeCameraManagerTest.java]:[android.hardware.camera]:[1]:method_text:[Library(""ctscamera2_jni"");        Log.i(""NativeCameraManagerTest"", ""after loadlibrary"");    }   ])', 1), ('([8:/android/camera/cts/api25test/EnableZslTest.java]:[android.hardware.Camera]:[8]:method_text:[ <p>Verify CaptureRequest.CONTROL_ENABLE_ZSL is false if available in all templates.</p>     */   ])', 1), ('([8:/android/camera/cts/api25test/EnableZslTest.java]:[android.hardware.camera]:[8]:method_text:[ <p>Verify CaptureRequest.CONTROL_ENABLE_ZSL is false if available in all templates.</p>     */   ])', 1), ('([3:/android/media/cts/CamcorderProfileTest.java]:[android.hardware.Camera]:[3]:method_text:[dProfile, highHighSpeedProfile,                specificHighSpeedProfileQualities, null);    }   ])', 1), ('([3:/android/media/cts/CamcorderProfileTest.java]:[android.hardware.camera]:[3]:method_text:[dProfile, highHighSpeedProfile,                specificHighSpeedProfileQualities, null);    }   ])', 1), ('([1:/android/view/cts/TextureViewCameraTest.java]:[android.hardware.Camera]:[1]:method_text:[ty = mActivityRule.getActivity();        mNumberOfCameras = Camera.getNumberOfCameras();    }   ])', 1), ('([1:/android/view/cts/TextureViewCameraTest.java]:[android.hardware.camera]:[1]:method_text:[ty = mActivityRule.getActivity();        mNumberOfCameras = Camera.getNumberOfCameras();    }   ])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[android.hardware.Camera]:[1]:method_text:[has-feature "" + feature);        return Boolean.parseBoolean(result.getStdout().trim());    }   ])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[android.hardware.camera]:[1]:method_text:[has-feature "" + feature);        return Boolean.parseBoolean(result.getStdout().trim());    }   ])', 1), ('([2:/android/graphics/cts/CameraVulkanGpuTest.java]:[android.hardware.Camera]:[2]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([2:/android/graphics/cts/CameraVulkanGpuTest.java]:[android.hardware.camera]:[2]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([1:/android/permission/cts/CameraPermissionTest.java]:[android.hardware.Camera]:[1]:method_text:[ Requires Permission:     * {@link android.Manifest.permission#CAMERA}.     */    @MediumTest   ])', 1), ('([1:/android/permission/cts/CameraPermissionTest.java]:[android.hardware.camera]:[1]:method_text:[ Requires Permission:     * {@link android.Manifest.permission#CAMERA}.     */    @MediumTest   ])', 1), ('([13:/android/hardware/cts/CameraTest.java]:[android.hardware.Camera]:[13]:method_text:[ture and verify all the callback     * functions are called properly.     */    @UiThreadTest   ])', 1), ('([1:/android/hardware/cts/CameraTest.java]:[android.hardware.Camera]:[1]:method_text:[r3 == 1) {                mPreviewDone.open();            }        }    }    @UiThreadTest   ])', 1), ('([1:/android/hardware/cts/CameraTest.java]:[android.hardware.Camera]:[1]:method_text:[f (stopped) {                mZoomDone.open();            }        }    }    @UiThreadTest   ])', 1), ('([1:/android/hardware/cts/CameraTest.java]:[android.hardware.Camera]:[1]:method_text:[= PREVIEW_CALLBACK_RECEIVED;            mPreviewDone.open();        }    }    @UiThreadTest   ])', 1), ('([2:/android/hardware/cts/CameraTest.java]:[android.hardware.Camera]:[2]:method_text:[ "")"",                    Character.isLetter(c) && c != \'x\');        }    }    @UiThreadTest   ])', 1), ('([4:/android/hardware/cts/CameraTest.java]:[android.hardware.Camera]:[4]:method_text:[callback, id "" + mId + ""."");            mPreviewDone.open();        }    }    @UiThreadTest   ])', 1), ('([13:/android/hardware/cts/CameraTest.java]:[android.hardware.camera]:[13]:method_text:[ture and verify all the callback     * functions are called properly.     */    @UiThreadTest   ])', 1), ('([1:/android/hardware/cts/CameraTest.java]:[android.hardware.camera]:[1]:method_text:[r3 == 1) {                mPreviewDone.open();            }        }    }    @UiThreadTest   ])', 1), ('([1:/android/hardware/cts/CameraTest.java]:[android.hardware.camera]:[1]:method_text:[f (stopped) {                mZoomDone.open();            }        }    }    @UiThreadTest   ])', 1), ('([1:/android/hardware/cts/CameraTest.java]:[android.hardware.camera]:[1]:method_text:[= PREVIEW_CALLBACK_RECEIVED;            mPreviewDone.open();        }    }    @UiThreadTest   ])', 1), ('([2:/android/hardware/cts/CameraTest.java]:[android.hardware.camera]:[2]:method_text:[ "")"",                    Character.isLetter(c) && c != \'x\');        }    }    @UiThreadTest   ])', 1), ('([4:/android/hardware/cts/CameraTest.java]:[android.hardware.camera]:[4]:method_text:[callback, id "" + mId + ""."");            mPreviewDone.open();        }    }    @UiThreadTest   ])', 1), ('([2:/android/hardware/camera2/cts/CtsUtilsTest.java]:[android.hardware.Camera]:[2]:method_text:[de. * </p> */public class CtsUtilsTest {    private static final byte PADBYTE = (byte)0xa5;   ])', 1), ('([2:/android/hardware/camera2/cts/CtsUtilsTest.java]:[android.hardware.camera]:[2]:method_text:[de. * </p> */public class CtsUtilsTest {    private static final byte PADBYTE = (byte)0xa5;   ])', 1), ('([14:/android/hardware/camera2/cts/CaptureResultTest.java]:[android.hardware.Camera]:[14]:method_text:[y times, and checks if there is any null entries in     * a capture result.     * </p>     */   ])', 1), ('([14:/android/hardware/camera2/cts/CaptureResultTest.java]:[android.hardware.camera]:[14]:method_text:[y times, and checks if there is any null entries in     * a capture result.     * </p>     */   ])', 1), ('([3:/com/android/server/cts/device/statsdatom/AtomTests.java]:[android.hardware.Camera]:[3]:method_text:[VICE, 117);        APP_OPS_ENUM_MAP.put(AppOpsManager.OPSTR_ESTABLISH_VPN_MANAGER, 118);    }   ])', 1), ('([3:/com/android/server/cts/device/statsdatom/AtomTests.java]:[android.hardware.camera]:[3]:method_text:[VICE, 117);        APP_OPS_ENUM_MAP.put(AppOpsManager.OPSTR_ESTABLISH_VPN_MANAGER, 118);    }   ])', 1), ('([4:/android/permission/cts/Camera2PermissionTest.java]:[android.hardware.Camera]:[4]:method_text:[ to open camera. Requires Permission:     * {@link android.Manifest.permission#CAMERA}.     */   ])', 1), ('([4:/android/permission/cts/Camera2PermissionTest.java]:[android.hardware.camera]:[4]:method_text:[ to open camera. Requires Permission:     * {@link android.Manifest.permission#CAMERA}.     */   ])', 1), ('([14:/android/hardware/camera2/cts/StillCaptureTest.java]:[android.hardware.Camera]:[14]:method_text:[  super.tearDown();    }    /**     * Test JPEG capture exif fields for each camera.     */   ])', 1), ('([14:/android/hardware/camera2/cts/StillCaptureTest.java]:[android.hardware.camera]:[14]:method_text:[  super.tearDown();    }    /**     * Test JPEG capture exif fields for each camera.     */   ])', 1), ('([16:/android/hardware/camera2/cts/DngCreatorTest.java]:[android.hardware.Camera]:[16]:method_text:[captured for the first reported camera device to be saved to an output file.     * </p>     */   ])', 1), ('([16:/android/hardware/camera2/cts/DngCreatorTest.java]:[android.hardware.camera]:[16]:method_text:[captured for the first reported camera device to be saved to an output file.     * </p>     */   ])', 1), ('([12:/android/hardware/camera2/cts/ReprocessCaptureTest.java]:[android.hardware.Camera]:[12]:method_text:[KEYS,    }    /**     * Test YUV_420_888 -> YUV_420_888 with maximal supported sizes     */   ])', 1), ('([12:/android/hardware/camera2/cts/ReprocessCaptureTest.java]:[android.hardware.camera]:[12]:method_text:[KEYS,    }    /**     * Test YUV_420_888 -> YUV_420_888 with maximal supported sizes     */   ])', 1), ('([2:/android/content/pm/cts/FeatureGroupInfoTest.java]:[android.hardware.Camera]:[2]:method_text:[o2.flags);                    }                    return diff;                }            };}])', 1), ('([2:/android/content/pm/cts/FeatureGroupInfoTest.java]:[android.hardware.camera]:[2]:method_text:[o2.flags);                    }                    return diff;                }            };}])', 1), ('([10:/android/hardware/camera2/cts/ZoomCaptureTest.java]:[android.hardware.Camera]:[10]:method_text:[ }    @Override    public void tearDown() throws Exception {        super.tearDown();    }   ])', 1), ('([10:/android/hardware/camera2/cts/ZoomCaptureTest.java]:[android.hardware.camera]:[10]:method_text:[ }    @Override    public void tearDown() throws Exception {        super.tearDown();    }   ])', 1), ('([3:/android/cts/statsdatom/statsd/UidAtomTests.java]:[android.hardware.Camera]:[3]:method_text:[atoms logged     * from an isolated process are seen as coming from their host process.     */   ])', 1), ('([3:/android/cts/statsdatom/statsd/UidAtomTests.java]:[android.hardware.camera]:[3]:method_text:[atoms logged     * from an isolated process are seen as coming from their host process.     */   ])', 1), ('([17:/android/hardware/camera2/cts/ImageReaderTest.java]:[android.hardware.Camera]:[17]:method_text:[ }    @Override    public void tearDown() throws Exception {        super.tearDown();    }   ])', 1), ('([17:/android/hardware/camera2/cts/ImageReaderTest.java]:[android.hardware.camera]:[17]:method_text:[ }    @Override    public void tearDown() throws Exception {        super.tearDown();    }   ])', 1), ('([15:/android/hardware/camera2/cts/ConcurrentCameraTest.java]:[android.hardware.Camera]:[15]:method_text:[ this.substituteY8 = substituteY8;            this.combination = combination;        }    };   ])', 1), ('([15:/android/hardware/camera2/cts/ConcurrentCameraTest.java]:[android.hardware.camera]:[15]:method_text:[ this.substituteY8 = substituteY8;            this.combination = combination;        }    };   ])', 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[android.hardware.Camera]:[1]:method_text:[   mNextOutputFileStartedCond = null;        mActivity = null;        super.tearDown();    }   ])', 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[android.hardware.camera]:[1]:method_text:[   mNextOutputFileStartedCond = null;        mActivity = null;        super.tearDown();    }   ])', 1), ('([17:/android/hardware/camera2/cts/PerformanceTest.java]:[android.hardware.Camera]:[17]:method_text:[   * For depth-only devices, timing is done with the DEPTH16 format instead.     * </p>     */   ])', 1), ('([17:/android/hardware/camera2/cts/PerformanceTest.java]:[android.hardware.camera]:[17]:method_text:[   * For depth-only devices, timing is done with the DEPTH16 format instead.     * </p>     */   ])', 1), ('([2:/android/hardware/camera2/cts/NativeImageReaderTest.java]:[android.hardware.Camera]:[2]:method_text:[adLibrary(""ctscamera2_jni"");        Log.i(""NativeImageReaderTest"", ""after loadlibrary"");    }   ])', 1), ('([2:/android/hardware/camera2/cts/NativeImageReaderTest.java]:[android.hardware.camera]:[2]:method_text:[adLibrary(""ctscamera2_jni"");        Log.i(""NativeImageReaderTest"", ""after loadlibrary"");    }   ])', 1), ('([15:/android/camera/cts/api31test/SPerfClassTest.java]:[android.hardware.Camera]:[15]:method_text:[ra S Performance class requirement for JPEG sizes.     */    @CddTest(requirement=""7.5/H-1-8"")   ])', 1), ('([15:/android/camera/cts/api31test/SPerfClassTest.java]:[android.hardware.camera]:[15]:method_text:[ra S Performance class requirement for JPEG sizes.     */    @CddTest(requirement=""7.5/H-1-8"")   ])', 1)]"	"https://developer.android.com"	""	"[('android.hardware.Camera', 76), ('android.hardware.camera', 76)]"	"[('[android.hardware.camera2.cts.CameraExtensionCharacteristicsTest getCameraListener CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.FastBasicsTest testCamera1 CtsCameraTestCases]', 2), ('[android.hardware.cts.LegacyCameraPerformanceTest CameraPerformanceTestHelper CtsCameraTestCases]', 2), ('[android.hardware.cts.CameraGLTest deriveCameraIdsUnderTest CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.CameraExtensionSessionTest testRepeatingCapture CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.CameraExtensionSessionTest testRepeatingAndCaptureCombined CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.CameraExtensionSessionTest testIllegalArguments CtsCameraTestCases]', 2), ('[android.media.cts.MediaPlayerTest exists CtsMediaTestCases]', 2), ('[android.hardware.cts.Camera_SizeTest testConstructor CtsCameraTestCases]', 2), ('[android.content.cts.BroadcastReceiverTest BroadcastReceiverTest CtsContentTestCases]', 2), ('[android.hardware.camera2.cts.HeifWriterTest isInstantApp CtsCameraTestCases]', 2), ('[android.mediastress.cts.MediaRecorderStressTest MediaRecorderStressTest CtsMediaStressTestCases]', 2), ('[android.hardware.multiprocess.camera.cts.CameraEvictionTest CameraEvictionTest CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.RecordingTest isColorOutputSupported CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.CameraManagerTest NoopCameraListener CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics CtsCameraTestCases]', 2), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest dropShellPermissionIdentity None]', 2), ('[com.android.cts.verifier.camera.performance.CameraPerformanceActivity CameraTestInstrumentation None]', 2), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceRepeatingBurst CtsCameraTestCases]', 2), ('[android.camera.cts.api25test.EnableZslTest getCameraIdList CtsCameraApi25TestCases]', 2), ('[android.hardware.cts.CameraTest TestShutterCallback CtsCameraTestCases]', 2), ('[android.hardware.cts.CameraTest testPreviewCallbackWithBuffer CtsCameraTestCases]', 2), ('[android.hardware.cts.CameraTest testSmoothZoom CtsCameraTestCases]', 2), ('[android.hardware.cts.CameraTest testPreviewPictureSizesCombination CtsCameraTestCases]', 2), ('[android.hardware.cts.CameraTest testPreviewFpsRange CtsCameraTestCases]', 2), ('[android.hardware.cts.CameraTest testMultiCameraRelease CtsCameraTestCases]', 2), ('[android.permission.cts.Camera2PermissionTest getCameraIdList CtsPermissionTestCases]', 2), ('[android.content.pm.cts.FeatureGroupInfoTest testFeatureGroupsAreCorrect CtsContentTestCases]', 2), ('[android.cts.statsdatom.statsd.UidAtomTests isNotNull CtsStatsdAtomHostTestCases]', 2), ('[android.media.cts.MediaRecorderTest MediaRecorderTest CtsMediaTestCases]', 2), ('[android.camera.cts.api31test.SPerfClassTest getCameraIdList CtsCameraApi31TestCases]', 2)]"
"7.3.10  Biometric Sensors"	"7.3.10"	"C-4-2"	"7.3.10/C-4-2"	"07031000.670402"	"""C-4-2] MUST recognize and honor each parameter name defined as a constant     in the [Authenticators](https://developer.android.com/reference/android/hardware/biometrics/BiometricManager.Authenticators)     class and any combinations thereof.     Conversely, MUST NOT honor or recognize integer constants passed to the     [canAuthenticate(int)](https://developer.android.com/reference/android/hardware/biometrics/BiometricManager#canAuthenticate%28int%29)     and [setAllowedAuthenticators(int)](https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder#setAllowedAuthenticators%28int%29)     methods other than those documented as public constants in     [Authenticators](https://developer.android.com/reference/android/hardware/biometrics/BiometricManager.Authenticators)     and any combinations thereof. """	""	""	"canAuthenticate(int) BiometricManager.Authenticators BiometricPrompt.Builder setAllowedAuthenticators(int)"	""	""	""	""	"[('android.hardware.biometrics.cts.BiometricPromptTest', 5), ('android.server.biometrics.BiometricSimpleTests', 2), ('android.hardware.biometrics.cts.BiometricManagerTest', 1), ('android.server.biometrics.BiometricSecurityTests', 1), ('com.android.cts.verifier.security.UnlockedDeviceRequiredTest', 1)]"	"[('revertSensorStrengths', 2), ('setUp', 1), ('getInstrumentation', 1), ('getContext', 1), ('ensureReset', 1), ('teardown', 1), ('createKey', 1), ('getMainLooper', 1), ('AuthenticationCallback', 1), ('countDown', 1), ('onAuthenticationFailed', 1)]"	"[('CtsHardwareTestCases', 6), ('CtsBiometricsTestCases', 3)]"	""	""	""	""	"android.hardware.biometrics.cts.BiometricPromptTest"	"onAuthenticationFailed"	"CtsHardwareTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/biometrics/cts/BiometricPromptTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/framework/base/biometrics/src/android/server/biometrics/BiometricSimpleTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/biometrics/cts/BiometricManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/biometrics/src/android/server/biometrics/BiometricSecurityTests.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java', 1)]"	"[('(2,BiometricManager.Authenticators,/android/hardware/biometrics/cts/BiometricManagerTest.java)', 1), ('(1,canAuthenticate(int),/android/server/biometrics/BiometricSimpleTests.java)', 1), ('(1,BiometricManager.Authenticators,/android/server/biometrics/BiometricSimpleTests.java)', 1), ('(1,BiometricManager.Authenticators,/android/server/biometrics/BiometricSecurityTests.java)', 1), ('(1,BiometricManager.Authenticators,/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java)', 1), ('(8,BiometricPrompt.Builder,/android/hardware/biometrics/cts/BiometricPromptTest.java)', 1), ('(1,BiometricManager.Authenticators,/android/hardware/biometrics/cts/BiometricPromptTest.java)', 1)]"	"[('([2:/android/hardware/biometrics/cts/BiometricManagerTest.java]:[BiometricManager.Authenticators]:[2]:method_text:[Context();        mBiometricManager = mContext.getSystemService(BiometricManager.class);    }   ])', 1), ('([1:/android/server/biometrics/BiometricSimpleTests.java]:[canAuthenticate(int)]:[1]:method_text:[EVICE_CREDENTIAL)     * 3) @deprecated BiometricPrompt#setDeviceCredentialAllowed(true)     */   ])', 1), ('([1:/android/server/biometrics/BiometricSimpleTests.java]:[BiometricManager.Authenticators]:[1]:method_text:[lments created via {@link BiometricTestSession} show up in the     * biometric dumpsys.     */   ])', 1), ('([1:/android/server/biometrics/BiometricSecurityTests.java]:[BiometricManager.Authenticators]:[1]:method_text:[t     * have a way to test cases where the requested strength is BIOMETRIC_CONVENIENCE.     */   ])', 1), ('([1:/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java]:[BiometricManager.Authenticators]:[1]:method_text:[ntext()).setMessage(                    mController.getDialogMessage()).create();        }    }}])', 1), ('([2:/android/hardware/biometrics/cts/BiometricPromptTest.java]:[BiometricPrompt.Builder]:[2]:method_text:[tFalse(exceptionTaken);            cancellationSignal.cancel();        }    }    @Presubmit   ])', 1), ('([2:/android/hardware/biometrics/cts/BiometricPromptTest.java]:[BiometricPrompt.Builder]:[2]:method_text:[tBuilder.setConfirmationRequired(false).build().isConfirmationRequired());    }    @Presubmit   ])', 1), ('([2:/android/hardware/biometrics/cts/BiometricPromptTest.java]:[BiometricPrompt.Builder]:[2]:method_text:[assertEquals(authenticators, prompt.getAllowedAuthenticators());        }    }    @Presubmit   ])', 1), ('([2:/android/hardware/biometrics/cts/BiometricPromptTest.java]:[BiometricPrompt.Builder]:[2]:method_text:[ld();            assertEquals(authenticators, prompt.getAllowedAuthenticators());        }    }}])', 1), ('([1:/android/hardware/biometrics/cts/BiometricPromptTest.java]:[BiometricManager.Authenticators]:[1]:method_text:[here are no fingers enrolled. Cts-verifier will check the implementation.     */    @Presubmit   ])', 1)]"	"https://developer.android.com"	""	"[('BiometricManager.Authenticators', 5), ('BiometricPrompt.Builder', 4), ('canAuthenticate(int)', 1)]"	"[('[android.server.biometrics.BiometricSimpleTests testInvalidInputs CtsBiometricsTestCases]', 1), ('[com.android.cts.verifier.security.UnlockedDeviceRequiredTest verifyTestRequirements None]', 1), ('[android.hardware.biometrics.cts.BiometricPromptTest test_authenticate_fingerprint CtsHardwareTestCases]', 1), ('[android.hardware.biometrics.cts.BiometricPromptTest test_isConfirmationRequired CtsHardwareTestCases]', 1), ('[android.hardware.biometrics.cts.BiometricPromptTest test_setAllowedAuthenticators_withoutDeviceCredential CtsHardwareTestCases]', 1), ('[android.hardware.biometrics.cts.BiometricPromptTest test_setAllowedAuthenticators_withDeviceCredential CtsHardwareTestCases]', 1)]"
"7.1.4.2 Vulkan"	"7.1.4.2"	"C-1-10"	"7.1.4.2/C-1-10"	"07010402.670110"	"""C-1-10] MUST pass all Vulkan dEQP Tests in the test lists between     version `132317953` and the version specified in the     `android.software.vulkan.deqp.level` feature flag. """	""	""	"EQP android.software.vulkan.deqp.level"	""	""	""	""	"[('android.graphics.cts.VulkanDeqpLevelTest', 3), ('android.graphics.cts.OpenGlEsDeqpLevelTest', 2), ('android.hardware.camera2.cts.HeifWriterTest', 1), ('com.android.compatibility.common.tradefed.presubmit.CtsConfigLoadingTest', 1), ('android.midi.cts.MidiEchoTest', 1)]"	"[('getSimpleName', 3), ('setup', 3), ('getTargetContext', 3), ('getPackageManager', 3), ('getSystemAvailableFeatures', 2), ('nanoTime', 1), ('notifyAll', 1)]"	"[('CtsGraphicsTestCases', 5), ('CtsCameraTestCases', 1), ('CtsMidiTestCases', 1)]"	""	""	""	""	"android.midi.cts.MidiEchoTest"	"notifyAll"	"CtsMidiTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/VulkanDeqpLevelTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/OpenGlEsDeqpLevelTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/HeifWriterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/midi/src/android/midi/cts/MidiEchoTest.java', 1)]"	"[('(3,EQP,/android/hardware/camera2/cts/HeifWriterTest.java)', 1), ('(10,EQP,/android/graphics/cts/VulkanDeqpLevelTest.java)', 1), ('(1,android.software.vulkan.deqp.level,/android/graphics/cts/VulkanDeqpLevelTest.java)', 1), ('(3,EQP,/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java)', 1), ('(10,EQP,/android/graphics/cts/OpenGlEsDeqpLevelTest.java)', 1), ('(1,EQP,/android/midi/cts/MidiEchoTest.java)', 1)]"	"[('([3:/android/hardware/camera2/cts/HeifWriterTest.java]:[EQP]:[3]:method_text:[           }            // TODO: add more key validations.        }        return result;    }}])', 1), ('([4:/android/graphics/cts/VulkanDeqpLevelTest.java]:[EQP]:[4]:method_text:[              }            }        }    }    @CddTest(requirement = ""7.1.4.2/C-1-8,C-1-9"")   ])', 1), ('([6:/android/graphics/cts/VulkanDeqpLevelTest.java]:[EQP]:[6]:method_text:[kageManager.FEATURE_VULKAN_DEQP_LEVEL,                        MINIMUM_VULKAN_DEQP_LEVEL));    }}])', 1), ('([1:/android/graphics/cts/VulkanDeqpLevelTest.java]:[android.software.vulkan.deqp.level]:[1]:method_text:[              }            }        }    }    @CddTest(requirement = ""7.1.4.2/C-1-8,C-1-9"")   ])', 1), ('([3:/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java]:[EQP]:[3]:method_text:[ * -> Exclude deprecated ApkInstaller.     * -> Check if host-side tests are non empty.     */   ])', 1), ('([4:/android/graphics/cts/OpenGlEsDeqpLevelTest.java]:[EQP]:[4]:method_text:[d setup() {        mPm = InstrumentationRegistry.getTargetContext().getPackageManager();    }   ])', 1), ('([6:/android/graphics/cts/OpenGlEsDeqpLevelTest.java]:[EQP]:[6]:method_text:[Manager.FEATURE_OPENGLES_DEQP_LEVEL,                        MINIMUM_OPENGLES_DEQP_LEVEL));    }}])', 1), ('([1:/android/midi/cts/MidiEchoTest.java]:[EQP]:[1]:method_text:[o.TYPE_VIRTUAL,                echoInfo.getType());    }    // Is the MidiManager supported?   ])', 1)]"	""	""	"[('EQP', 7), ('android.software.vulkan.deqp.level', 1)]"	"[('[android.hardware.camera2.cts.HeifWriterTest testHeif CtsCameraTestCases]', 1), ('[android.graphics.cts.VulkanDeqpLevelTest testVulkanDeqpLevel CtsGraphicsTestCases]', 1), ('[android.graphics.cts.OpenGlEsDeqpLevelTest testOpenGlEsDeqpLevel CtsGraphicsTestCases]', 1), ('[android.midi.cts.MidiEchoTest currentTimeMillis CtsMidiTestCases]', 1)]"
"7.4.5.2  IPv6"	"7.4.5.2"	"C-4-1"	"7.4.5.2/C-4-1"	"07040502.670401"	"""C-4-1] MUST simultaneously meet the above requirements on each network     when the device is simultaneously connected to more than one network type.  """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"9.16  Application Data Migration"	"9.16"	"C-1-2"	"9.16/C-1-2"	"09160000.670102"	"""C-1-2] MUST securely confirm the primary authentication on the source      device and confirm with the user intent to copy the data on the source      device before any data is transferred. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"7.3.10  Biometric Sensors"	"7.3.10"	"C-5-1"	"7.3.10/C-5-1"	"07031000.670501"	"""C-5-1] MUST by default require an additional confirmation step     (e.g. a button press). """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"2.2.3  Software"	"3.8.4"	"H-1-1"	"3.8.4/H-1-1"	"03080400.720101"	"""[3.8.4/H-1-1]* MUST display     conversation notifications ahead of non conversation notifications with     the exception of ongoing foreground service notifications and     [importance:high](https://developer.android.com/reference/android/app/NotificationManager#IMPORTANCE_HIGH)     notifications.  If Android Handheld device implementations support a lock screen, they:  *   ["""	""	""	"IMPORTANCE_HIGH"	""	""	""	""	"[('android.app.cts.NotificationManagerTest', 8), ('android.app.cts.NotificationChannelTest', 4), ('android.app.notification.legacy29.cts.NotificationAssistantServiceTest', 2), ('android.app.cts.NotificationTest', 1)]"	"[('setUp', 6), ('toString', 5), ('build', 5), ('getPackageName', 4), ('getContentResolver', 4), ('getId', 4), ('getMessage', 4), ('getContext', 3), ('cancelAll', 2), ('getActiveNotifications', 2), ('tearDown', 2), ('printStackTrace', 2), ('getGroupKey', 2), ('Notification', 1), ('getSimpleName', 1), ('randomUUID', 1), ('getPackageManager', 1), ('getInstrumentation', 1), ('getNotificationChannels', 1), ('getNotificationChannelGroups', 1), ('restoreDefaultBrowser', 1), ('getCount', 1), ('moveToFirst', 1), ('close', 1), ('getPendingIntent', 1), ('getClass', 1), ('getGroup', 1), ('getNotification', 1), ('getKey', 1), ('getOverrideGroupKey', 1)]"	"[('CtsAppTestCases', 13), ('CtsLegacyNotification29TestCases', 2)]"	""	""	""	""	"android.app.cts.NotificationManagerTest"	"getGroupKey"	"CtsAppTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/NotificationChannelTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/notificationlegacy/notificationlegacy29/src/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/NotificationTest.java', 1)]"	"[('(6,IMPORTANCE_HIGH,/android/app/cts/NotificationChannelTest.java)', 1), ('(1,IMPORTANCE_HIGH,/android/app/cts/NotificationTest.java)', 1), ('(2,IMPORTANCE_HIGH,/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java)', 1), ('(11,IMPORTANCE_HIGH,/android/app/cts/NotificationManagerTest.java)', 1)]"	"[('([1:/android/app/cts/NotificationChannelTest.java]:[IMPORTANCE_HIGH]:[1]:method_text:[ase {    @Override    protected void setUp() throws Exception {        super.setUp();    }   ])', 1), ('([2:/android/app/cts/NotificationChannelTest.java]:[IMPORTANCE_HIGH]:[2]:method_text:[        assertFalse(channel.isDemoted());        assertFalse(channel.isConversation());    }   ])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[IMPORTANCE_HIGH]:[1]:method_text:[icationChannel.CREATOR.createFromParcel(parcel);        assertEquals(channel, channel1);    }   ])', 1), ('([2:/android/app/cts/NotificationChannelTest.java]:[IMPORTANCE_HIGH]:[2]:method_text:[IMPORTANCE_HIGH);        assertEquals(IMPORTANCE_HIGH, channel.getOriginalImportance());    }   ])', 1), ('([1:/android/app/cts/NotificationTest.java]:[IMPORTANCE_HIGH]:[1]:method_text:[per.setUp();        mContext = getContext();        mNotification = new Notification();    }   ])', 1), ('([1:/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java]:[IMPORTANCE_HIGH]:[1]:method_text:[getRanking(sbn.getKey(), out);        assertEquals(newImportance, out.getImportance());    }   ])', 1), ('([1:/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java]:[IMPORTANCE_HIGH]:[1]:method_text:[nking(sbn.getKey(), out);        assertEquals(currentImportance, out.getImportance());    }   ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[IMPORTANCE_HIGH]:[1]:method_text:[oid deactivateGracePeriod() {        UiDevice.getInstance(mInstrumentation).pressHome();    }   ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[IMPORTANCE_HIGH]:[1]:method_text:[FAULT,                mNotificationManager.getNotificationChannel(mId).getImportance());    }   ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[IMPORTANCE_HIGH]:[1]:method_text:[ionManager.getNotificationChannel(mId);        compareChannels(channel, createdChannel);    }   ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[IMPORTANCE_HIGH]:[1]:method_text:[  compareChannels(channel, mNotificationManager.getNotificationChannel(channel.getId()));    }   ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[IMPORTANCE_HIGH]:[1]:method_text:[channel4,                mNotificationManager.getNotificationChannel(channel4.getId()));    }   ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[IMPORTANCE_HIGH]:[1]:method_text:[nue;            }            compareChannels(channelMap.get(nc.getId()), nc);        }    }   ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[IMPORTANCE_HIGH]:[1]:method_text:[hannel,                mNotificationManager.getNotificationChannel(newChannel.getId()));    }   ])', 1), ('([4:/android/app/cts/NotificationManagerTest.java]:[IMPORTANCE_HIGH]:[4]:method_text:[.getImportance());        assertEquals(IMPORTANCE_HIGH, actual.getOriginalImportance());    }   ])', 1)]"	"https://developer.android.com"	""	"[('IMPORTANCE_HIGH', 15)]"	"[('[android.app.cts.NotificationChannelTest testConstructor CtsAppTestCases]', 1), ('[android.app.cts.NotificationChannelTest testWriteToParcel CtsAppTestCases]', 1), ('[android.app.cts.NotificationChannelTest testOriginalImportance CtsAppTestCases]', 1), ('[android.app.notification.legacy29.cts.NotificationAssistantServiceTest testAdjustNotification_importanceKey CtsLegacyNotification29TestCases]', 1), ('[android.app.notification.legacy29.cts.NotificationAssistantServiceTest testAdjustNotification_importanceKey_notAllowed CtsLegacyNotification29TestCases]', 1), ('[android.app.cts.NotificationManagerTest isGroup CtsAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testCreateChannel_rename CtsAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testCreateSameChannelDoesNotUpdate CtsAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testCreateChannelAlreadyExistsNoOp CtsAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testGetChannel CtsAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testGetChannels CtsAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testRecreateDeletedChannel CtsAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testOriginalChannelImportance CtsAppTestCases]', 1)]"
"7.3.10  Biometric Sensors"	"7.3.10"	"C-6-1"	"7.3.10/C-6-1"	"07031000.670601"	"""C-6-1] MUST meet the requirements for **Class 3** as defined in this     section below. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"3.8.6  Themes"	"3.8.6"	"C-1-3"	"3.8.6/C-1-3"	"03080600.670103"	"""C-1-3] MUST use the [Roboto version 2.x](https://github.com/google/roboto)     fonts as the out-of-box Sans-serif font family for languages that Roboto     supports.  Android also includes a “Device Default” theme family as a set of defined styles for application developers to use if they want to match the look and feel of the device theme as defined by the device implementer.  *   Device implementations MAY modify the [Device Default theme attributes](     http://developer.android.com/reference/android/R.style.html) exposed to     applications.  Android supports a variant theme with translucent system bars, which allows application developers to fill the area behind the status and navigation bar with their app content. To enable a consistent developer experience in this configuration, it is important the status bar icon style is maintained across different device implementations.  If device implementations include a system status bar, they:  """	""	""	"github.com style.html"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://github.com http://developer.android.com"	""	""	""
"3.15  Instant Apps"	"3.15"	"C-1-1"	"3.15/C-1-1"	"03150000.670101"	"""C-1-1] MUST preload one or more applications or service components     with an intent handler for the intents listed in the SDK [here](https://developer.android.com/topic/google-play-instant/instant-app-intents)     and make the intents visible for Instant Apps."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://developer.android.com"	""	""	""
"3.18  Contacts"	"3.18"	"C-1-3"	"3.18/C-1-3"	"03180000.670103"	"""C-1-3] Raw contacts that are inserted by third party applications with      the **default local account** (i.e. by setting null values for      `ACCOUNT_NAME` and `ACCOUNT_TYPE`) MUST be inserted to the **custom local      account**. """	""	""	"ACCOUNT_NAME ACCOUNT_TYPE"	""	""	""	""	"[('android.accounts.cts.AccountManagerTest', 49), ('android.provider.cts.contacts.ContactsContract_RawContactsTest', 18), ('android.provider.cts.contacts.ContactsContract_DataTest', 16), ('com.android.cts.accountmanager.AccountManagerCrossUserTest', 10), ('android.accounts.cts.AbstractAuthenticatorTests', 7), ('com.android.cts.devicepolicy.accountmanagement.AccountManagementTest', 6), ('android.provider.cts.contacts.ContactsContract_StructuredPhoneticName', 6), ('com.android.cts.managedprofile.ContactsTest', 6), ('android.host.accounts.AccountManagerHostSideTest', 5), ('android.provider.cts.calendar.CalendarTest', 5), ('android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest', 4), ('android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest', 4), ('android.provider.cts.contacts.ContactsContract_AllUriTest', 4), ('android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests', 4), ('android.provider.cts.contacts.ContactsContract_IsSuperPrimaryName', 4), ('com.android.cts.deviceandprofileowner.AccountManagementParentTest', 4), ('com.android.cts.deviceandprofileowner.AllowedAccountManagementTest', 4), ('android.provider.cts.contacts.ContactsContract_GroupMembershipTest', 4), ('android.content.cts.ContentResolverSyncTestCase', 4), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 3), ('com.android.cts.devicepolicy.accountmanagement.AccountUtilsTest', 3), ('android.devicepolicy.cts.DevicePolicyManagerTest', 3), ('android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest', 2), ('com.android.cts.devicepolicy.accountcheck.AccountCheckTest', 2), ('android.provider.cts.contacts.ContactsContract_SearchSnippetsTest', 2), ('android.provider.cts.contacts.ContactsContract_DirectoryTest', 2), ('android.provider.cts.contacts.ContactsContract_StatusUpdatesTest', 2), ('android.provider.cts.contacts.ContactsContract_ContactCountsTest', 2), ('android.provider.cts.contacts.ContactsContract_AggregationSuggestionsTest', 2), ('android.telephony.ims.cts.EabBulkCapabilityUpdaterTest', 2), ('android.provider.cts.contacts.ContactsContract_PhoneLookup', 2), ('android.provider.cts.contacts.ContactsContract_Subquery', 2), ('android.provider.cts.contacts.ContactsTest', 2), ('android.provider.cts.contacts.ContactsContract_ProviderStatus', 2), ('android.security.cts.NanoAppBundleTest', 1), ('android.security.cts.Poc18_07', 1), ('android.content.sync.cts.InvalidSyncAuthoritiesDeviceTest', 1)]"	"[('setUp', 51), ('getDevice', 35), ('ContentValues', 34), ('tearDown', 33), ('getContext', 19), ('getContentResolver', 16), ('moveToFirst', 14), ('build', 13), ('getInstrumentation', 11), ('size', 8), ('getMessage', 8), ('getCount', 8), ('getMockSyncAdapter', 8), ('getTargetContext', 7), ('failIfFailed', 6), ('buildUpon', 6), ('Bundle', 6), ('cleanup', 6), ('getUiAutomation', 4), ('waitForDirectorySetup', 4), ('elapsedRealtime', 4), ('close', 4), ('BackupUtils', 2), ('getAccount', 2), ('StringBuilder', 2), ('length', 2), ('getColumnNames', 2), ('CancellationSignal', 2), ('assertNoPhotoUri', 2), ('waitForBroadcastIdle', 2), ('getApplicationContext', 2), ('getPackageManager', 2), ('CalendarHelper', 2), ('SyncStateHelper', 2), ('EventHelper', 2), ('AttendeeHelper', 2), ('ColorHelper', 2), ('ReminderHelper', 2), ('ExtendedPropertiesHelper', 2), ('clearData', 2), ('getResult', 2), ('getSimpleName', 1), ('getUserId', 1), ('getCurrentUser', 1), ('tesAddAccount_logsMetrics', 1), ('tesAddAccountExplicitly_logsMetrics', 1), ('tesGetAuthToken_logsMetrics', 1), ('CollectingOutputReceiver', 1), ('getOutput', 1)]"	"[('CtsContactsProviderTestCases', 76), ('CtsAccountManagerTestCases', 60), ('CtsAccountsHostTestCases', 5), ('CtsCalendarProviderTestCases', 5), ('CtsContentTestCases', 4), ('CtsDevicePolicyManagerTestCases', 3), ('CtsDevicePolicyTestCases', 3), ('CtsTelephonyTestCases', 2), ('CtsSecurityTestCases', 1), ('CtsSecurityBulletinHostTestCases', 1)]"	""	""	""	""	"android.accounts.cts.AbstractAuthenticatorTests"	"cleanup"	"CtsAccountManagerTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/accounts/src/android/accounts/cts/AccountManagerTest.java', 49), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_RawContactsTest.java', 18), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_DataTest.java', 16), ('/home/gpoor/cts-12-source/cts/hostsidetests/accounts/test-apps/AccountManagerCrossUserApp/src/com/android/cts/accountmanager/AccountManagerCrossUserTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/accounts/src/android/accounts/cts/AbstractAuthenticatorTests.java', 7), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/AccountManagement/src/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java', 6), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java', 6), ('/home/gpoor/cts-12-source/cts/hostsidetests/accounts/src/android/host/accounts/AccountManagerHostSideTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/calendarprovider/src/android/provider/cts/calendar/CalendarTest.java', 5), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/SyncAdapterSettingsApp/src/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_AllUriTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/accounts/src/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentResolverSyncTestCase.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/AccountManagement/src/com/android/cts/devicepolicy/accountmanagement/AccountUtilsTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/DevicePolicyManagerTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/AccountCheck/Auth/src/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_SearchSnippetsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_DirectoryTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_StatusUpdatesTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_ContactCountsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_AggregationSuggestionsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_PhoneLookup.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_Subquery.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_ProviderStatus.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/NanoAppBundleTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc18_07.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/content/test-apps/CtsSyncInvalidAccountAuthorityTestCases/src/android/content/sync/cts/InvalidSyncAuthoritiesDeviceTest.java', 1)]"	"[('(11,ACCOUNT_TYPE,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(2,ACCOUNT_NAME,/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java)', 1), ('(4,ACCOUNT_TYPE,/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java)', 1), ('(2,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java)', 1), ('(2,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java)', 1), ('(2,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_AllUriTest.java)', 1), ('(2,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_AllUriTest.java)', 1), ('(3,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java)', 1), ('(3,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java)', 1), ('(5,ACCOUNT_TYPE,/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java)', 1), ('(1,ACCOUNT_TYPE,/android/security/cts/NanoAppBundleTest.java)', 1), ('(9,ACCOUNT_NAME,/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java)', 1), ('(2,ACCOUNT_TYPE,/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java)', 1), ('(6,ACCOUNT_TYPE,/com/android/cts/devicepolicy/accountmanagement/AccountUtilsTest.java)', 1), ('(4,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java)', 1), ('(4,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java)', 1), ('(3,ACCOUNT_NAME,/com/android/cts/accountmanager/AccountManagerCrossUserTest.java)', 1), ('(12,ACCOUNT_TYPE,/com/android/cts/accountmanager/AccountManagerCrossUserTest.java)', 1), ('(3,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_SearchSnippetsTest.java)', 1), ('(3,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_SearchSnippetsTest.java)', 1), ('(5,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_DirectoryTest.java)', 1), ('(5,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_DirectoryTest.java)', 1), ('(1,ACCOUNT_NAME,/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java)', 1), ('(15,ACCOUNT_TYPE,/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java)', 1), ('(3,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_StatusUpdatesTest.java)', 1), ('(3,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_StatusUpdatesTest.java)', 1), ('(5,ACCOUNT_TYPE,/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java)', 1), ('(5,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java)', 1), ('(5,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java)', 1), ('(1,ACCOUNT_NAME,/android/security/cts/Poc18_07.java)', 1), ('(6,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_ContactCountsTest.java)', 1), ('(6,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_ContactCountsTest.java)', 1), ('(6,ACCOUNT_NAME,/com/android/cts/managedprofile/ContactsTest.java)', 1), ('(8,ACCOUNT_TYPE,/com/android/cts/managedprofile/ContactsTest.java)', 1), ('(30,ACCOUNT_NAME,/android/accounts/cts/AccountManagerTest.java)', 1), ('(112,ACCOUNT_TYPE,/android/accounts/cts/AccountManagerTest.java)', 1), ('(3,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_AggregationSuggestionsTest.java)', 1), ('(3,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_AggregationSuggestionsTest.java)', 1), ('(5,ACCOUNT_TYPE,/android/host/accounts/AccountManagerHostSideTest.java)', 1), ('(2,ACCOUNT_NAME,/android/devicepolicy/cts/DevicePolicyManagerTest.java)', 1), ('(3,ACCOUNT_TYPE,/android/devicepolicy/cts/DevicePolicyManagerTest.java)', 1), ('(1,ACCOUNT_NAME,/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java)', 1), ('(1,ACCOUNT_TYPE,/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java)', 1), ('(3,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_PhoneLookup.java)', 1), ('(3,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_PhoneLookup.java)', 1), ('(18,ACCOUNT_TYPE,/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java)', 1), ('(1,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_Subquery.java)', 1), ('(1,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_Subquery.java)', 1), ('(6,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsTest.java)', 1), ('(7,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsTest.java)', 1), ('(20,ACCOUNT_NAME,/android/provider/cts/calendar/CalendarTest.java)', 1), ('(12,ACCOUNT_TYPE,/android/provider/cts/calendar/CalendarTest.java)', 1), ('(12,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_DataTest.java)', 1), ('(15,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_DataTest.java)', 1), ('(4,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java)', 1), ('(4,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java)', 1), ('(3,ACCOUNT_TYPE,/android/content/sync/cts/InvalidSyncAuthoritiesDeviceTest.java)', 1), ('(1,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_ProviderStatus.java)', 1), ('(1,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_ProviderStatus.java)', 1), ('(2,ACCOUNT_NAME,/android/content/cts/ContentResolverSyncTestCase.java)', 1), ('(2,ACCOUNT_TYPE,/android/content/cts/ContentResolverSyncTestCase.java)', 1), ('(13,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_RawContactsTest.java)', 1), ('(14,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_RawContactsTest.java)', 1), ('(9,ACCOUNT_NAME,/android/accounts/cts/AbstractAuthenticatorTests.java)', 1), ('(3,ACCOUNT_TYPE,/android/accounts/cts/AbstractAuthenticatorTests.java)', 1)]"	"[('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ Or separate the authenticator and test app to allow the instant app mode test.    @AppModeFull   ])', 3), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[1]:method_text:[status token should be included in     * the result as session bundle is not inspected.     */   ])', 2), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ Or separate the authenticator and test app to allow the instant app mode test.    @AppModeFull   ])', 2), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ Or separate the authenticator and test app to allow the instant app mode test.    @AppModeFull   ])', 2), ('([1:/android/host/accounts/AccountManagerHostSideTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[UTH_TOKEN_TYPE,                        REQUIRED_FEATURES_STR)                .build());    }   ])', 2), ('([1:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_NAME]:[1]:method_text:[               lookupContact.getId(), data.load().getRawContact().load().getContactId());    }   ])', 2), ('([1:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[               lookupContact.getId(), data.load().getRawContact().load().getContactId());    }   ])', 2), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[wrong contact"",                lookupContact.getId(), rawContact.load().getContactId());    }   ])', 2), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[wrong contact"",                lookupContact.getId(), rawContact.load().getContactId());    }   ])', 2), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[.        getDevice().executeShellCommand(""input keyevent 3"");        super.tearDown();    }   ])', 1), ('([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[ACCOUNT_TYPE]:[4]:method_text:[, ACCOUNT_TYPE, mUserId);        }        executeAccountTest(""testAddAccount_allowed"");    }   ])', 1), ('([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[ACCOUNT_TYPE]:[4]:method_text:[CCOUNT_TYPE, mUserId);        }        executeAccountTest(""testRemoveAccount_allowed"");    }   ])', 1), ('([1:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ge.     * 3. Check restored MasterSyncAutomatically=true is the same with backup value.     */   ])', 1), ('([1:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[   Account account = accounts[i];            am.removeAccountExplicitly(account);        }    }}])', 1), ('([1:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ge.     * 3. Check restored MasterSyncAutomatically=true is the same with backup value.     */   ])', 1), ('([3:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[   Account account = accounts[i];            am.removeAccountExplicitly(account);        }    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ut this should not be done for the local account.     */    @CddTest(requirement=""3.18/C-1-4"")   ])', 1), ('([1:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ to an added account will be removed but this should not be done for these SIM accounts.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ut this should not be done for the local account.     */    @CddTest(requirement=""3.18/C-1-4"")   ])', 1), ('([1:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ to an added account will be removed but this should not be done for these SIM accounts.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ull);    }    /**     * Make sure all URLs are accessible with all arguments = null.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCOUNT_NAME]:[1]:method_text:[    mResolver.delete(uri, ""1=2"", null);            });        }        failIfFailed();    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ull);    }    /**     * Make sure all URLs are accessible with all arguments = null.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[    mResolver.delete(uri, ""1=2"", null);            });        }        failIfFailed();    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[ACCOUNT_NAME]:[3]:method_text:[).load();        return new long[] {contact.getId(), contact2.getId(), contact3.getId()};    }}])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[).load();        return new long[] {contact.getId(), contact2.getId(), contact3.getId()};    }}])', 1), ('([1:/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[.getSystemService(AccountManager.class);    }    /**     * Remove all test accounts.     */   ])', 1), ('([4:/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java]:[ACCOUNT_TYPE]:[4]:method_text:[_ACCOUNT_TYPE));    }    /**     * Add an incompatible account, type A, no features.     */   ])', 1), ('([1:/android/security/cts/NanoAppBundleTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[.getPackageManager();        return pm.hasSystemFeature(PackageManager.FEATURE_AUTOMOTIVE);    }}])', 1), ('([2:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[ACCOUNT_NAME]:[2]:method_text:[ expected because default implementation cannot     * understand custom session bundle.     */   ])', 1), ('([7:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[ACCOUNT_NAME]:[7]:method_text:[EN_UNAFFILIATED,                result.getString(AccountManager.KEY_ACCOUNT_STATUS_TOKEN));    }}])', 1), ('([1:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[ACCOUNT_TYPE]:[1]:method_text:[ expected because default implementation cannot     * understand custom session bundle.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[ACCOUNT_TYPE]:[1]:method_text:[EN_UNAFFILIATED,                result.getString(AccountManager.KEY_ACCOUNT_STATUS_TOKEN));    }}])', 1), ('([2:/com/android/cts/devicepolicy/accountmanagement/AccountUtilsTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[   mAccountManager = (AccountManager) mContext.getSystemService(Context.ACCOUNT_SERVICE);    }   ])', 1), ('([2:/com/android/cts/devicepolicy/accountmanagement/AccountUtilsTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[anager.getAccountsByType(MockAccountAuthenticator.ACCOUNT_TYPE)                .length);    }   ])', 1), ('([2:/com/android/cts/devicepolicy/accountmanagement/AccountUtilsTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[tManager.getAccountsByType(MockAccountAuthenticator.ACCOUNT_TYPE)                .length);    }}])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java]:[ACCOUNT_NAME]:[2]:method_text:[   contact.load();        contact.assertColumn(Contacts.DISPLAY_NAME, otherDisplayName);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java]:[ACCOUNT_NAME]:[2]:method_text:[_TOGETHER);        mResolver.update(AggregationExceptions.CONTENT_URI, values, null, null);    }}])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java]:[ACCOUNT_TYPE]:[2]:method_text:[   contact.load();        contact.assertColumn(Contacts.DISPLAY_NAME, otherDisplayName);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java]:[ACCOUNT_TYPE]:[2]:method_text:[_TOGETHER);        mResolver.update(AggregationExceptions.CONTENT_URI, values, null, null);    }}])', 1), ('([1:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_NAME]:[1]:method_text:[mberFormatException ignore) {            }        }        return numAccountsExpected;    }   ])', 1), ('([2:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_NAME]:[2]:method_text:[accounts = accountManagerAsUser.getAccounts();        assertThat(accounts).hasLength(1);    }   ])', 1), ('([1:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[mberFormatException ignore) {            }        }        return numAccountsExpected;    }   ])', 1), ('([3:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[accounts = accountManagerAsUser.getAccounts();        assertThat(accounts).hasLength(1);    }   ])', 1), ('([1:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ity= */ null,                /* callback= */ null,                /* handler= */ null);    }   ])', 1), ('([1:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[            assertThat(accounts).hasLength(1);        } catch (Exception e) {        }    }   ])', 1), ('([2:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ssertThat(accountManager.getAccountsByType(MockAuthenticator.ACCOUNT_TYPE)).hasLength(1);    }   ])', 1), ('([2:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[  assertThat(accountManager.getAccountsByType(MockAuthenticator.ACCOUNT_TYPE)).isEmpty();    }   ])', 1), ('([1:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[sByType(MockAuthenticator.ACCOUNT_TYPE)).hasLength(                numAccountsExpected);    }   ])', 1), ('([1:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[n,                mContext.getPackageName())).isEqualTo(PackageManager.PERMISSION_DENIED);    }}])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_SearchSnippetsTest.java]:[ACCOUNT_NAME]:[3]:method_text:[new long[] {                contact.getId(), contact2.getId(), contact3.getId()        };    }}])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_SearchSnippetsTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[new long[] {                contact.getId(), contact2.getId(), contact3.getId()        };    }}])', 1), ('([5:/android/provider/cts/contacts/ContactsContract_DirectoryTest.java]:[ACCOUNT_NAME]:[5]:method_text:[D));            }        }        fail(""Directory didn\'t show up"");        return -1;    }   ])', 1), ('([5:/android/provider/cts/contacts/ContactsContract_DirectoryTest.java]:[ACCOUNT_TYPE]:[5]:method_text:[D));            }        }        fail(""Directory didn\'t show up"");        return -1;    }   ])', 1), ('([1:/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java]:[ACCOUNT_NAME]:[1]:method_text:[TokenType"", false);        assertEquals(MockAccountAuthenticator.AUTH_TOKEN, authToken);    }   ])', 1), ('([3:/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[ockAccountAuthenticator.ACCOUNT_TYPE)                .length);        super.tearDown();    }   ])', 1), ('([3:/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[anager.getAccountsByType(MockAccountAuthenticator.ACCOUNT_TYPE)                .length);    }   ])', 1), ('([3:/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[TokenType"", false);        assertEquals(MockAccountAuthenticator.AUTH_TOKEN, authToken);    }   ])', 1), ('([3:/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[E);        assertEquals(1, accounts.length);        assertEquals(ACCOUNT, accounts[0]);    }   ])', 1), ('([3:/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[ntManager.getAccountsByType(MockAccountAuthenticator.ACCOUNT_TYPE)                .length);    }}])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_StatusUpdatesTest.java]:[ACCOUNT_NAME]:[3]:method_text:[    assertNotNull(results[1].uri);        dataId = ContentUris.parseId(results[1].uri);    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_StatusUpdatesTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[    assertNotNull(results[1].uri);        dataId = ContentUris.parseId(results[1].uri);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1), ('([2:/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[      assertThat(mDevicePolicyManager.getAccountTypesWithManagementDisabled()).isEmpty();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[esWithManagementDisabled()).asList()                .containsExactly(SOME_ACCOUNT_TYPE);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ssertThat(parentDevicePolicyManager).isNotNull();        return parentDevicePolicyManager;    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java]:[ACCOUNT_NAME]:[1]:method_text:[ntacts.DISPLAY_NAME_SOURCE,                DisplayNameSources.STRUCTURED_PHONETIC_NAME);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java]:[ACCOUNT_NAME]:[2]:method_text:[   }    // Same as testPhoneticStructuredName_phoneticPriority1, but with setup order reversed   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java]:[ACCOUNT_NAME]:[2]:method_text:[awContact2.getContact().load();        contact.assertColumn(Contacts.DISPLAY_NAME, ""name"");    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java]:[ACCOUNT_TYPE]:[1]:method_text:[ntacts.DISPLAY_NAME_SOURCE,                DisplayNameSources.STRUCTURED_PHONETIC_NAME);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java]:[ACCOUNT_TYPE]:[2]:method_text:[   }    // Same as testPhoneticStructuredName_phoneticPriority1, but with setup order reversed   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java]:[ACCOUNT_TYPE]:[2]:method_text:[awContact2.getContact().load();        contact.assertColumn(Contacts.DISPLAY_NAME, ""name"");    }}])', 1), ('([1:/android/security/cts/Poc18_07.java]:[ACCOUNT_NAME]:[1]:method_text:[ator: Add SIM account.*ContactsProvider: Accounts changed"",                logcat);      }    }}])', 1), ('([6:/android/provider/cts/contacts/ContactsContract_ContactCountsTest.java]:[ACCOUNT_NAME]:[6]:method_text:[), contact3.getId(), contact4.getId(),                contact5.getId(), contact6.getId()};    }}])', 1), ('([6:/android/provider/cts/contacts/ContactsContract_ContactCountsTest.java]:[ACCOUNT_TYPE]:[6]:method_text:[), contact3.getId(), contact4.getId(),                contact5.getId(), contact6.getId()};    }}])', 1), ('([2:/com/android/cts/managedprofile/ContactsTest.java]:[ACCOUNT_NAME]:[2]:method_text:[PolicyManager) mContext                .getSystemService(Context.DEVICE_POLICY_SERVICE);    }   ])', 1), ('([1:/com/android/cts/managedprofile/ContactsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[YPE);        AccountManager.get(getContext()).addAccountExplicitly(account, null, null);    }   ])', 1), ('([3:/com/android/cts/managedprofile/ContactsTest.java]:[ACCOUNT_NAME]:[3]:method_text:[ArgumentException is not thrown"");        } catch (IllegalArgumentException ex) {        }    }}])', 1), ('([2:/com/android/cts/managedprofile/ContactsTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[PolicyManager) mContext                .getSystemService(Context.DEVICE_POLICY_SERVICE);    }   ])', 1), ('([1:/com/android/cts/managedprofile/ContactsTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[YPE);        AccountManager.get(getContext()).addAccountExplicitly(account, null, null);    }   ])', 1), ('([5:/com/android/cts/managedprofile/ContactsTest.java]:[ACCOUNT_TYPE]:[5]:method_text:[ArgumentException is not thrown"");        } catch (IllegalArgumentException ex) {        }    }}])', 1), ('([14:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[14]:method_text:[eak;            }        }        return result;    }    /**     * Test singleton     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ /**     * Test successful blockingGetAuthToken() with customTokens=true authenticator.     */   ])', 1), ('([4:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[4]:method_text:[countSession(...). A bundle containing account name and account     * type is expected.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ted when     * AccountManager.ERROR_CODE_INVALID_RESPONSE is returned by authenticator.     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[2]:method_text:[ should be returned via the callback regardless of     * whether a handler is provided.     */   ])', 1), ('([4:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[4]:method_text:[s a basic isCredentialsUpdateSuggested() which returns a bundle containing boolean true.     */   ])', 1), ('([23:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[23]:method_text:[eak;            }        }        return result;    }    /**     * Test singleton     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[nResult(resultBundle);    }    /**     * Test addAccount() with callback and handler     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[    @AppModeFull(reason = ""The methods are for sign-up wizards associated with authenticators."")   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ @AppModeFull(reason = ""The methods requires the caller to match signature with authenticator."")   ])', 1), ('([9:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[9]:method_text:[ @AppModeFull(reason = ""The methods requires the caller to match signature with authenticator."")   ])', 1), ('([6:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[6]:method_text:[kage(null, PACKAGE_NAME_1));    }    /**     * Test setUserData() and getUserData().     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[    assertEquals(0, accounts.length);    }    /**     * Test getAuthenticatorTypes()     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ator type: "" + ACCOUNT_TYPE);    }    /**     * Test setPassword() and getPassword()     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[th);    }    /**     * Test getAccountsByTypeAndFeatures() with callback and handler     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ptedException"");        }    }    /**     * Test setAuthToken() and peekAuthToken()     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[/**     * Test successful blockingGetAuthToken() with customTokens=false authenticator.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ /**     * Test successful blockingGetAuthToken() with customTokens=true authenticator.     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[getAccountType());    }    /**     * Test editProperties() with callback and handler     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[tion"");        }    }    /**     * Test addOnAccountsUpdatedListener() with handler     */   ])', 1), ('([4:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[4]:method_text:[ner(listener);    }    /**     * Test removeOnAccountsUpdatedListener() with handler     */   ])', 1), ('([3:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[count);    }    /**     * Tests that AccountManagerService is properly caching data.     */   ])', 1), ('([5:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[5]:method_text:[ a bundle containing     * encrypted session bundle, account password and status token.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[status token should be included in the result as session     * bundle is not inspected.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[status token should be included in     * the result as session bundle is not inspected.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[thenticator return     * {@link AccountManager#ERROR_CODE_INVALID_RESPONSE} error code.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[k should be triggered with the result regardless of a     * handler is provided or not.     */   ])', 1), ('([4:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[4]:method_text:[ a bundle containing     * encrypted session bundle, account password and status token.     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[tialsSession(...). A bundle containing account name and account     * type is expected.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[on bundle. IllegalArgumentException     * is expected as session bundle cannot be null.     */   ])', 1), ('([3:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[rSerivce will always add account type to the session bundle     * before encrypting it.     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ce     * will always overrides account type to the session bundle before encrypting it.     */   ])', 1), ('([3:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[vce will always override account type to the session bundle     * before encrypting it.     */   ])', 1), ('([3:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[ted when     * AccountManager.ERROR_CODE_INVALID_RESPONSE is returned by authenticator.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ should be returned via the callback regardless of     * whether a handler is provided.     */   ])', 1), ('([10:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[10]:method_text:[s a basic isCredentialsUpdateSuggested() which returns a bundle containing boolean true.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[eSuggested() when account is null.     * It should throw IllegalArgumentationException.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[   * authenticator return {@link AccountManager#ERROR_CODE_INVALID_RESPONSE} error code.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[k should be triggered with the result regardless of a handler is     * provided or not.     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[),                firstPositionForType.get(type) + counterForType.get(type) - 1);        }    }}])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_AggregationSuggestionsTest.java]:[ACCOUNT_NAME]:[3]:method_text:[.getContactId(),                rawContact2.getContactId(), rawContact3.getContactId()};    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_AggregationSuggestionsTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[.getContactId(),                rawContact2.getContactId(), rawContact3.getContactId()};    }   ])', 1), ('([1:/android/host/accounts/AccountManagerHostSideTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ])', 1), ('([1:/android/host/accounts/AccountManagerHostSideTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[PERMISSION_PKG,                        expectedVisibilityStr)                .build());    }   ])', 1), ('([1:/android/host/accounts/AccountManagerHostSideTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ %s"", output);            fail(""\'am wait-for-broadcase-idle\' did not complete."");        }    }}])', 1), ('([2:/android/devicepolicy/cts/DevicePolicyManagerTest.java]:[ACCOUNT_NAME]:[2]:method_text:[e(PackageManager.FEATURE_DEVICE_ADMIN)    @RequireFeature(PackageManager.FEATURE_MANAGED_USERS)   ])', 1), ('([2:/android/devicepolicy/cts/DevicePolicyManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[e(PackageManager.FEATURE_DEVICE_ADMIN)    @RequireFeature(PackageManager.FEATURE_MANAGED_USERS)   ])', 1), ('([1:/android/devicepolicy/cts/DevicePolicyManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[  }    }    @RequireRunOnPrimaryUser    @RequireFeature(PackageManager.FEATURE_DEVICE_ADMIN)   ])', 1), ('([1:/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java]:[ACCOUNT_NAME]:[1]:method_text:[uld not format "" + number + "", error: "" + e);            }        }        return number;    }}])', 1), ('([1:/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[uld not format "" + number + "", error: "" + e);            }        }        return number;    }}])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_PhoneLookup.java]:[ACCOUNT_NAME]:[3]:method_text:[    * Test for {@link android.provider.ContactsContract.PhoneLookup#CONTENT_FILTER_URI}.     */   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_PhoneLookup.java]:[ACCOUNT_TYPE]:[3]:method_text:[    * Test for {@link android.provider.ContactsContract.PhoneLookup#CONTENT_FILTER_URI}.     */   ])', 1), ('([3:/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[MPONENT,                UserManager.DISALLOW_MODIFY_ACCOUNTS);        super.tearDown();    }   ])', 1), ('([6:/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java]:[ACCOUNT_TYPE]:[6]:method_text:[    assertEquals(0, mDevicePolicyManager.getAccountTypesWithManagementDisabled().length);    }   ])', 1), ('([5:/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java]:[ACCOUNT_TYPE]:[5]:method_text:[        assertEquals(ACCOUNT_TYPE_1, result.getString(AccountManager.KEY_ACCOUNT_TYPE));    }   ])', 1), ('([4:/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java]:[ACCOUNT_TYPE]:[4]:method_text:[l).getResult();        assertTrue(result.getBoolean(AccountManager.KEY_BOOLEAN_RESULT));    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_Subquery.java]:[ACCOUNT_NAME]:[1]:method_text:[ exists(select 1)"", null, null)) {            assertEquals(0, cursor.getCount());        }    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_Subquery.java]:[ACCOUNT_TYPE]:[1]:method_text:[ exists(select 1)"", null, null)) {            assertEquals(0, cursor.getCount());        }    }}])', 1), (""([6:/android/provider/cts/contacts/ContactsTest.java]:[ACCOUNT_NAME]:[6]:method_text:[er's extensions table     * It does not test any APIs in android.provider.Contacts.java     */   ])"", 1), (""([7:/android/provider/cts/contacts/ContactsTest.java]:[ACCOUNT_TYPE]:[7]:method_text:[er's extensions table     * It does not test any APIs in android.provider.Contacts.java     */   ])"", 1), ('([14:/android/provider/cts/calendar/CalendarTest.java]:[ACCOUNT_NAME]:[14]:method_text:[tResolver = getInstrumentation().getTargetContext().getContentResolver();    }    @MediumTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[ACCOUNT_NAME]:[1]:method_text:[    }    /**     * Tests Colors interaction with the Calendars table.     */    @MediumTest   ])', 1), ('([4:/android/provider/cts/calendar/CalendarTest.java]:[ACCOUNT_NAME]:[4]:method_text:[   }    /**     * Tests correct behavior of Events.isOrganizer column     */    @MediumTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[ACCOUNT_NAME]:[1]:method_text:[);    }    /**     * Tests correct behavior of Events.uid2445 column     */    @MediumTest   ])', 1), ('([12:/android/provider/cts/calendar/CalendarTest.java]:[ACCOUNT_TYPE]:[12]:method_text:[tResolver = getInstrumentation().getTargetContext().getContentResolver();    }    @MediumTest   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ void tearDown() throws Exception {        super.tearDown();        mBuilder.cleanup();    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_NAME]:[1]:method_text:[              DATA_PROJECTION,                new long[]{data.load().getId()}        );    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_NAME]:[2]:method_text:[oupMembership.GROUP_SOURCE_ID},                new long[]{rawContact.getId()}        );    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_NAME]:[2]:method_text:[                   Data.LAST_TIME_USED},                new long[]{contactId}        );    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_NAME]:[1]:method_text:[);        } finally {            // Clean up            rawContact.delete();        }    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_NAME]:[3]:method_text:[              toReturn[i] = cv.get(i);            }            return toReturn;        }    }}])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ void tearDown() throws Exception {        super.tearDown();        mBuilder.cleanup();    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[              DATA_PROJECTION,                new long[]{data.load().getId()}        );    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[oupMembership.GROUP_SOURCE_ID},                new long[]{rawContact.getId()}        );    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[                   Data.LAST_TIME_USED},                new long[]{contactId}        );    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[);        } finally {            // Clean up            rawContact.delete();        }    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[              toReturn[i] = cv.get(i);            }            return toReturn;        }    }}])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java]:[ACCOUNT_NAME]:[2]:method_text:[_id"");        groupMembership.assertColumn(GroupMembership.GROUP_ROW_ID, group.getId());    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java]:[ACCOUNT_NAME]:[2]:method_text:[ertColumn(GroupMembership.GROUP_ROW_ID, group.getId());        group.deletePermanently();    }}])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[_id"");        groupMembership.assertColumn(GroupMembership.GROUP_ROW_ID, group.getId());    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ertColumn(GroupMembership.GROUP_ROW_ID, group.getId());        group.deletePermanently();    }}])', 1), ('([3:/android/content/sync/cts/InvalidSyncAuthoritiesDeviceTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[ger.addAccountExplicitly(mValidAccount, ""password"", null));        return mValidAccount;    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_ProviderStatus.java]:[ACCOUNT_NAME]:[1]:method_text:[ {            if (cursor != null) {                cursor.close();            }        }    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_ProviderStatus.java]:[ACCOUNT_TYPE]:[1]:method_text:[ {            if (cursor != null) {                cursor.close();            }        }    }}])', 1), ('([1:/android/content/cts/ContentResolverSyncTestCase.java]:[ACCOUNT_NAME]:[1]:method_text:[etIsSyncable(account, authority, (b) ? 1 : 0);    }    /**     * Test a sync request     */   ])', 1), ('([1:/android/content/cts/ContentResolverSyncTestCase.java]:[ACCOUNT_NAME]:[1]:method_text:[    /**     * Test to verify that a SyncAdapter is called on all the accounts accounts     */   ])', 1), ('([1:/android/content/cts/ContentResolverSyncTestCase.java]:[ACCOUNT_TYPE]:[1]:method_text:[etIsSyncable(account, authority, (b) ? 1 : 0);    }    /**     * Test a sync request     */   ])', 1), ('([1:/android/content/cts/ContentResolverSyncTestCase.java]:[ACCOUNT_TYPE]:[1]:method_text:[found);    }    /**     * Test if a badly formed sync request is throwing exceptions     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ void tearDown() throws Exception {        super.tearDown();        mBuilder.cleanup();    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[/base/core/res/res/values/config.xml.     */    @CddTest(requirement=""3.18/C-1-1,C-1-2,C-1-3"")   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[2]:method_text:[ctCreate_noAccountUsesLocalAccount()}     */    @CddTest(requirement=""3.18/C-1-1,C-1-2,C-1-3"")   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[2]:method_text:[ntext), row[0]);        assertEquals(RawContacts.getLocalAccountType(mContext), row[1]);    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[       RAW_CONTACTS_PROJECTION,                new long[]{rawContact.getId()}        );    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[3]:method_text:[          assertEquals(0, rawContact.getLong(RawContacts.LAST_TIME_CONTACTED));        }    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[S_CONTACTED));        assertEquals(0, rawContact.getLong(RawContacts.LAST_TIME_CONTACTED));    }}])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ void tearDown() throws Exception {        super.tearDown();        mBuilder.cleanup();    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[/base/core/res/res/values/config.xml.     */    @CddTest(requirement=""3.18/C-1-1,C-1-2,C-1-3"")   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ctCreate_noAccountUsesLocalAccount()}     */    @CddTest(requirement=""3.18/C-1-1,C-1-2,C-1-3"")   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ntext), row[0]);        assertEquals(RawContacts.getLocalAccountType(mContext), row[1]);    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[       RAW_CONTACTS_PROJECTION,                new long[]{rawContact.getId()}        );    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[          assertEquals(0, rawContact.getLong(RawContacts.LAST_TIME_CONTACTED));        }    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[S_CONTACTED));        assertEquals(0, rawContact.getLong(RawContacts.LAST_TIME_CONTACTED));    }}])', 1), ('([1:/android/accounts/cts/AbstractAuthenticatorTests.java]:[ACCOUNT_NAME]:[1]:method_text:[rypted session     * bundle should always be returned without password or status token.     */   ])', 1), ('([2:/android/accounts/cts/AbstractAuthenticatorTests.java]:[ACCOUNT_NAME]:[2]:method_text:[   * Only account name and account type should be returned as a bundle.     */    @AppModeFull   ])', 1), ('([3:/android/accounts/cts/AbstractAuthenticatorTests.java]:[ACCOUNT_NAME]:[3]:method_text:[   * Only account name and account type should be returned as a bundle.     */    @AppModeFull   ])', 1), ('([3:/android/accounts/cts/AbstractAuthenticatorTests.java]:[ACCOUNT_NAME]:[3]:method_text:[Suggested default implementation.     * A bundle with boolean false should be returned.     */   ])', 1), ('([1:/android/accounts/cts/AbstractAuthenticatorTests.java]:[ACCOUNT_TYPE]:[1]:method_text:[rypted session     * bundle should always be returned without password or status token.     */   ])', 1), ('([1:/android/accounts/cts/AbstractAuthenticatorTests.java]:[ACCOUNT_TYPE]:[1]:method_text:[   * Only account name and account type should be returned as a bundle.     */    @AppModeFull   ])', 1), ('([1:/android/accounts/cts/AbstractAuthenticatorTests.java]:[ACCOUNT_TYPE]:[1]:method_text:[Suggested default implementation.     * A bundle with boolean false should be returned.     */   ])', 1)]"	""	""	"[('ACCOUNT_TYPE', 129), ('ACCOUNT_NAME', 71)]"	"[('[android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest testIsSyncableIsOne_ifTurnOffSyncEnabled None]', 2), ('[android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest testAccountRemovalWithMergedContact_deletesContacts CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest testAccountRemoval_doesNotDeleteLocalAccountContacts CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_AllUriTest testAllOperations CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequent_projection CtsContactsProviderTestCases]', 2), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testDefaultFinishSessiontWithStartAddAccountSessionImpl CtsAccountManagerTestCases]', 2), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testDefaultFinishSessionWithCustomStartUpdateCredentialsSessionImpl CtsAccountManagerTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_IsSuperPrimaryName testIsSuperPrimary_name2SuperPrimary CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_IsSuperPrimaryName testIsSuperPrimaryName_mergeBothSuperPrimary CtsContactsProviderTestCases]', 2), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest dropShellPermissionIdentity None]', 2), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_addMockAccount None]', 2), ('[android.provider.cts.contacts.ContactsContract_SearchSnippetsTest testEnterpriseSearchSnippets_DeferredSnippetingMultiWordQuerySnippetNotDeferred CtsContactsProviderTestCases]', 2), ('[com.android.cts.devicepolicy.accountmanagement.AccountManagementTest testAddAccount_allowed None]', 2), ('[android.provider.cts.contacts.ContactsContract_StructuredPhoneticName testPhoneticStructuredName CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_StructuredPhoneticName testPhoneticStructuredName_phoneticPriority1 CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_StructuredPhoneticName testPhoneticStructuredName_phoneticPriority2 CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_ContactCountsTest testContactCounts_correctCountsReturned CtsContactsProviderTestCases]', 2), ('[com.android.cts.managedprofile.ContactsTest assertPhotoUrisReadable None]', 2), ('[com.android.cts.managedprofile.ContactsTest testAddTestAccount None]', 2), ('[com.android.cts.managedprofile.ContactsTest testQuickContact None]', 2), ('[android.accounts.cts.AccountManagerTest AccountManagerTest CtsAccountManagerTestCases]', 2), ('[android.accounts.cts.AccountManagerTest testBlockingGetAuthToken_DefaultToken_Success CtsAccountManagerTestCases]', 2), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSessionWithNullSessionBundle CtsAccountManagerTestCases]', 2), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSessionWithEmptySessionBundle CtsAccountManagerTestCases]', 2), ('[android.accounts.cts.AccountManagerTest testFinishSessionWithReturnIntent CtsAccountManagerTestCases]', 2), ('[android.accounts.cts.AccountManagerTest testFinishSessionError CtsAccountManagerTestCases]', 2), ('[android.accounts.cts.AccountManagerTest testFinishSessionErrorWithCallbackAndHandler CtsAccountManagerTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_AggregationSuggestionsTest testAggregationSuggestionsByName_matchFirstNameParameter CtsContactsProviderTestCases]', 2), ('[android.devicepolicy.cts.DevicePolicyManagerTest TestApis CtsDevicePolicyTestCases]', 2), ('[android.telephony.ims.cts.EabBulkCapabilityUpdaterTest deleteContactTest CtsTelephonyTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_PhoneLookup setupTestData CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_Subquery testProviderStatus_addedContacts CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsTest testSettingsTable CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_DataTest testGetLookupUriBySourceId CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_DataTest testDataProjection CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_DataTest testRawContactsEntityProjection CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_DataTest testEntityProjection CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_DataTest testGetLookupUriByDisplayName CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_DataTest testContactablesUri CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_DataTest testDataUpdate_updatesContactLastUpdatedTimestamp CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_GroupMembershipTest testAddGroupMembershipWithGroupSourceId CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_GroupMembershipTest testAddGroupMembershipWithUnknownGroupSourceId CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_ProviderStatus testProviderStatus_addedContacts CtsContactsProviderTestCases]', 2), ('[android.content.cts.ContentResolverSyncTestCase isDone CtsContentTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testGetLookupUriBySourceId CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testGetLookupUriByDisplayName CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testRawContactCreate_updatesContactUpdatedTimestamp CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testRawContactCreate_noAccountUsesLocalAccount CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testRawContactCreate_nullAccountUsesLocalAccount CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testProjection CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testInsertUsageStat CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testUpdateUsageStat CtsContactsProviderTestCases]', 2), ('[android.accounts.cts.AbstractAuthenticatorTests testStartAddAccountSessionDefaultImpl CtsAccountManagerTestCases]', 2), ('[android.accounts.cts.AbstractAuthenticatorTests testFinishSessionAndStartAddAccountSessionDefaultImpl CtsAccountManagerTestCases]', 2), ('[android.accounts.cts.AbstractAuthenticatorTests testFinishSessionAndStartUpdateCredentialsSessionDefaultImpl CtsAccountManagerTestCases]', 2), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledAddAccount CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledRemoveAccount CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.accountcheck.AccountCheckTest testRemoveAllAccounts None]', 1), ('[android.security.cts.NanoAppBundleTest testPoc_cve_2018_9471 CtsSecurityTestCases]', 1), ('[com.android.cts.devicepolicy.accountmanagement.AccountUtilsTest testAddAccountExplicitly None]', 1), ('[com.android.cts.devicepolicy.accountmanagement.AccountUtilsTest testRemoveAccountExplicitly None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_addMockAccountForCurrentUser None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_getAccountsForTestUser None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_addAccountExplicitlyForCurrentUser None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testRemoveAccountExplicitly None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_getAccountsForCurrentUser None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_startAddAccountSessionForCurrentUser None]', 1), ('[com.android.cts.devicepolicy.accountmanagement.AccountManagementTest testAddAccount_blocked None]', 1), ('[com.android.cts.devicepolicy.accountmanagement.AccountManagementTest testRemoveAccount_blocked None]', 1), ('[com.android.cts.devicepolicy.accountmanagement.AccountManagementTest testRemoveAccount_allowed None]', 1), ('[com.android.cts.deviceandprofileowner.AccountManagementParentTest testSetAccountManagementDisabledOnParent None]', 1), ('[com.android.cts.deviceandprofileowner.AccountManagementParentTest testAccountManagementDisabled None]', 1), ('[com.android.cts.deviceandprofileowner.AccountManagementParentTest testEnableAccountManagement None]', 1), ('[android.security.cts.Poc18_07 testPocCVE_2017_18275 CtsSecurityBulletinHostTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartUpdateCredentialsSessionWithNullSessionBundle CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartUpdateCredentialsSessionWithEmptySessionBundle CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartUpdateCredentialsSessionErrorWithCallbackAndHandler CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testAddAccount CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testAddAccountWithNoAuthenticator CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testAddAccountExplicitlyWithVisibility CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetAccountsAndVisibilityForPackage CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetAccountsReturnedOrder CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetAccountsAndGetAccountsByType CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetAuthenticatorTypes CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetAccountsByTypeAndFeatures CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetAccountsByTypeAndFeaturesWithCallbackAndHandler CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testSetAndPeekAndInvalidateAuthToken CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testConfirmCredentialsAccountNotOnDevice CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testEditProperties CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testEditPropertiesWithCallbackAndHandler CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testAddOnAccountsUpdatedListenerWithVisibility CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testHasFeature CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetsAreCached CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSession CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSessionIntervene CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSessionWithReturnIntent CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSessionError CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSessionErrorWithCallbackAndHandler CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionWithStartAddAccountSession CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionWithStartUpdateCredentialsSession CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionFromStartAddAccountWithoutAccountType CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionFromStartUpdateCredentialsSessionWithoutAccountType CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionFromStartAddAccountAccountTypeOverriden CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionFromStartUpdateCredentialsSessionAccountTypeOverriden CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionIntervene CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testIsCredentialsUpdateSuggested_Success CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testIsCredentialsUpdateSuggestedEmptyToken_IllegalArgumentationException CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testIsCredentialsUpdateSuggested_Error CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testIsCredentialsUpdateSuggestedErrorWithCallbackAndHandler CtsAccountManagerTestCases]', 1), ('[android.host.accounts.AccountManagerHostSideTest testStartAddAccountSession_logsMetrics CtsAccountsHostTestCases]', 1), ('[android.devicepolicy.cts.DevicePolicyManagerTest newlyProvisionedManagedProfile_setsCrossProfilePackages CtsDevicePolicyTestCases]', 1), ('[com.android.cts.deviceandprofileowner.AllowedAccountManagementTest clearAllAccountManagementDisabled None]', 1), ('[com.android.cts.deviceandprofileowner.AllowedAccountManagementTest testAccountManagementDisabled_setterAndGetter None]', 1), ('[com.android.cts.deviceandprofileowner.AllowedAccountManagementTest testAccountManagementDisabled_profileAndDeviceOwnerCanAddAccount None]', 1), ('[com.android.cts.deviceandprofileowner.AllowedAccountManagementTest testUserRestriction_profileAndDeviceOwnerCanAddAndRemoveAccount None]', 1), ('[android.provider.cts.calendar.CalendarTest testColorWriteRequirements CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testCalendarIsPrimary CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testEventsIsOrganizer CtsCalendarProviderTestCases]', 1), ('[android.content.sync.cts.InvalidSyncAuthoritiesDeviceTest createTestAccount None]', 1), ('[android.content.cts.ContentResolverSyncTestCase testValidateSyncExtrasBundle CtsContentTestCases]', 1), ('[android.content.cts.ContentResolverSyncTestCase testGetSyncAdapterTypes CtsContentTestCases]', 1), ('[android.accounts.cts.AbstractAuthenticatorTests testStartUpdateCredentialsSessionDefaultImpl CtsAccountManagerTestCases]', 1)]"
"2.3.3  Software"	"3.2.3.1"	"T-0-1"	"3.2.3.1/T-0-1"	"03020301.840001"	"""[3.2.3.1/T-0-1]  MUST preload one or more applications or service components with an intent handler, for all the public intent filter patterns defined by the following application intents listed [here](https://developer.android.com/about/versions/11/reference/common-intents-30). *   ["""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://developer.android.com"	""	""	""
"2.5.3  Software"	"3.2.3.1"	"A-0-1"	"3.2.3.1/A-0-1"	"03020301.650001"	"""[3.2.3.1/A-0-1]  MUST preload one or more applications or service components with an intent handler, for all the public intent filter patterns defined by the following application intents listed [here](https://developer.android.com/about/versions/11/reference/common-intents-30).  *   ["""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://developer.android.com"	""	""	""
"7.4.3  Bluetooth"	"7.4.3"	"C-3-5"	"7.4.3/C-3-5"	"07040300.670305"	"""C-3-5] MUST implement a Resolvable Private Address (RPA) timeout no longer     than 15 minutes and rotate the address at timeout to protect user privacy     when device is actively using BLE for scanning or advertising.     To prevent timing attacks, timeout intervals MUST also be randomized     between 5 and 15 minutes. *   SHOULD support offloading of the filtering logic to the bluetooth chipset when implementing the [ScanFilter API]( https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html). *   SHOULD support offloading of the batched scanning to the bluetooth chipset. *   SHOULD support multi advertisement with at least 4 slots.  If device implementations support Bluetooth LE and use Bluetooth LE for location scanning, they:  """	""	""	"BLE RPA ScanFilter.html"	""	""	""	""	"[('android.graphics.drawable.cts.DrawableTest', 57), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 35), ('android.autofillservice.cts.dropdown.CheckoutActivityTest', 17), ('android.webkit.cts.WebChromeClientTest', 12), ('android.security.identity.cts.IdentityApiTest', 12), ('com.android.cts.webkit.WebViewHostSideStartupTest', 8), ('android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest', 6), ('android.view.inputmethod.cts.CursorAnchorInfoTest', 5), ('android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest', 5), ('com.android.cts.writeexternalstorageapp.WriteExternalStorageTest', 4), ('android.view.animation.cts.GridLayoutAnimationControllerTest', 4), ('com.android.cts.appcompat.CompatChangesSelinuxTest', 4), ('test.java.com.android.queryable.queries.SerializableQueryHelperTest', 4), ('com.android.cts.deviceowner.proxy.PacProxyTest', 3), ('android.content.cts.MutableContextWrapperTest', 3), ('test.java.com.android.bedstead.deviceadminapp.DeviceAdminAppTest', 3), ('com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest', 3), ('android.media.cts.NativeDecoderTest', 2), ('android.graphics.cts.MovieTest', 2), ('android.security.cts.FileDescriptorTest', 2), ('dot.junit.opcodes.shr_long.Test_shr_long', 2), ('com.android.cts.deviceandprofileowner.PersistentIntentResolvingTest', 2), ('android.location.cts.privileged.PrivilegedLocationPermissionTest', 2), ('android.media.cts.EncoderTest', 2), ('com.android.cts.devicepolicy.MixedProfileOwnerTest', 2), ('android.view.textclassifier.cts.ConversationActionsTest', 2), ('android.opengl.cts.ParamsTest', 2), ('android.renderscript.cts.generated.TestExpm1', 1), ('android.appsecurity.cts.AccessSerialNumberTest', 1), ('android.autofillservice.cts.commontests.TimePickerTestCase', 1), ('android.permission2.cts.NoWriteSecureSettingsPermissionTest', 1), ('android.view.cts.ViewGroup_LayoutParamsTest', 1), ('android.bluetooth.cts.ScanFilterTest', 1), ('android.app.usage.cts.CacheQuotaHintTest', 1), ('android.security.NetworkSecurityPolicyTestBase', 1), ('android.cts.statsdatom.integrity.IntegrityCheckStatsTests', 1), ('android.app.usage.cts.UsageReportingTest', 1), ('dot.junit.opcodes.mul_float_2addr.Test_mul_float_2addr', 1), ('android.security.cts.CVE_2019_2206', 1), ('com.android.server.cts.device.batterystats.BatteryStatsAlarmTest', 1), ('android.net.http.cts.HttpResponseCacheTest', 1), ('android.keystore.cts.performance.HmacKeyGenPerformanceTest', 1), ('android.graphics.pdf.cts.PdfRendererTest', 1), ('android.hardware.consumerir.cts.ConsumerIrTest', 1), ('android.util.proto.cts.ProtoOutputStreamUInt64Test', 1), ('android.hardware.camera2.cts.NativeCameraDeviceTest', 1), ('android.util.proto.cts.ProtoOutputStreamBytesTest', 1)]"	"[('destroy', 26), ('getDevice', 25), ('toString', 24), ('setUp', 18), ('tearDown', 14), ('getAutofillValue', 10), ('StringBuilder', 8), ('Builder', 6), ('build', 5), ('waitForPacDownload', 4), ('getTargetContext', 4), ('ArgumentsFloatFloat', 4), ('ArgumentsHalfHalf', 4), ('enableService', 4), ('requestFocus', 4), ('getNextFillRequest', 4), ('assertAutoFilled', 4), ('getInstrumentation', 3), ('getResources', 3), ('exec', 3), ('toUpperCase', 2), ('toLowerCase', 2), ('startServer', 2), ('stopServer', 2), ('setPacURLAndWaitForDownload', 2), ('getPacURL', 2), ('setup', 2), ('getPackageManager', 2), ('getSaveCc', 2), ('getDatePicker', 2), ('getTimePicker', 2), ('getAddress', 2), ('close', 2), ('getName', 2), ('fork', 1), ('checkExpm1FloatFloat', 1), ('checkExpm1Float2Float2', 1), ('checkExpm1Float3Float3', 1), ('checkExpm1Float4Float4', 1), ('checkExpm1HalfHalf', 1), ('checkExpm1Half2Half2', 1), ('checkExpm1Half3Half3', 1), ('checkExpm1Half4Half4', 1), ('getDefaultAdapter', 1), ('IntentFilter', 1), ('ConfirmReceiver', 1), ('getEditTextAutoFillValue', 1), ('getCcNumber', 1), ('autofillCompoundButtonWithTextValue', 1), ('getCompoundButtonAutoFillValue', 1), ('getSpinnerAutoFillValue', 1), ('getCcExpiration', 1), ('autofillDatePickerWithTextValue', 1), ('getYear', 1), ('getMonth', 1), ('getDayOfMonth', 1), ('getConfiguration', 1), ('getLocales', 1), ('getDatePickerAutoFillValue', 1), ('autofillTimePickerWithTextValue', 1), ('getHour', 1), ('getMinute', 1), ('getTimePickerAutoFillValue', 1), ('autofillRadioGroupWithTextValue', 1), ('getRadioGroupAutoFillValue', 1), ('MockWebServer', 1), ('randomUUID', 1), ('mkdirs', 1), ('getPath', 1), ('shutdown', 1), ('usePageAfterClose', 1), ('getHeight', 1), ('getWidth', 1), ('getIndex', 1), ('getMediaDirString', 1), ('release', 1), ('now', 1), ('systemDefault', 1), ('Bundle', 1), ('BackupUtils', 1), ('getUiAutomation', 1), ('getAccount', 1), ('matches_noRestrictions_returnsTrue', 1)]"	"[('CtsGraphicsTestCases', 59), ('CtsDevicePolicyManagerTestCases', 37), ('CtsAutoFillServiceTestCases', 18), ('CtsWebkitTestCases', 12), ('CtsIdentityTestCases', 12), ('CtsViewTestCases', 5), ('CtsInputMethodTestCases', 5), ('CtsShortcutManagerTestCases', 5), ('CtsMediaTestCases', 4), ('CtsAppCompatHostTestCases', 4), ('CtsContentTestCases', 3), ('CtsSecurityTestCases', 2), ('CtsUsageStatsTestCases', 2), ('CtsLocationPrivilegedTestCases', 2), ('CtsProtoTestCases', 2), ('CtsTextClassifierTestCases', 2), ('CtsOpenGLTestCases', 2), ('CtsRenderscriptTestCases', 1), ('CtsAppSecurityHostTestCases', 1), ('CtsPermission2TestCases', 1), ('CtsBluetoothTestCases', 1), ('CtsStatsdAtomHostTestCases', 1), ('CtsSecurityBulletinHostTestCases', 1), ('CtsApacheHttpTestCases', 1), ('CtsKeystoreTestCases', 1), ('CtsPdfTestCases', 1), ('CtsHardwareTestCases', 1), ('CtsCameraTestCases', 1)]"	""	""	""	""	"test.java.com.android.queryable.queries.SerializableQueryHelperTest"	"matches_noRestrictions_returnsTrue"	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/DrawableTest.java', 57), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 35), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/dropdown/CheckoutActivityTest.java', 17), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebChromeClientTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/IdentityApiTest.java', 12), ('/home/gpoor/cts-12-source/cts/hostsidetests/webkit/src/com/android/cts/webkit/WebViewHostSideStartupTest.java', 8), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/SyncAdapterSettingsApp/src/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/CursorAnchorInfoTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java', 5), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/GridLayoutAnimationControllerTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appcompat/compatchanges/src/com/android/cts/appcompat/CompatChangesSelinuxTest.java', 4), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/queryable/src/test/java/com/android/queryable/queries/SerializableQueryHelperTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/PacProxyTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/MutableContextWrapperTest.java', 3), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/deviceadminapp/src/test/java/com/android/bedstead/deviceadminapp/DeviceAdminAppTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/NativeDecoderTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/MovieTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/FileDescriptorTest.java', 2), ('/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/shr_long/Test_shr_long.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/PrivilegedLocationPermissionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/EncoderTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/textclassifier/src/android/view/textclassifier/cts/ConversationActionsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/opengl/src/android/opengl/cts/ParamsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestExpm1.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AccessSerialNumberTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/commontests/TimePickerTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/NoWriteSecureSettingsPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewGroup_LayoutParamsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanFilterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/CacheQuotaHintTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/netsecpolicy/src/android/security/NetworkSecurityPolicyTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/integrity/IntegrityCheckStatsTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageReportingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/mul_float_2addr/Test_mul_float_2addr.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2019_2206.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/apps/batterystatsapp/src/com/android/server/cts/device/batterystats/BatteryStatsAlarmTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/apache-http/src/android/net/http/cts/HttpResponseCacheTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/pdf/src/android/graphics/pdf/cts/PdfRendererTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/consumerir/cts/ConsumerIrTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/proto/src/android/util/proto/cts/ProtoOutputStreamUInt64Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/NativeCameraDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/proto/src/android/util/proto/cts/ProtoOutputStreamBytesTest.java', 1)]"	"[('(3,BLE,/android/media/cts/NativeDecoderTest.java)', 1), ('(3,RPA,/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java)', 1), ('(6,BLE,/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java)', 1), ('(10,BLE,/com/android/cts/webkit/WebViewHostSideStartupTest.java)', 1), ('(2,RPA,/com/android/cts/deviceowner/proxy/PacProxyTest.java)', 1), ('(3,BLE,/com/android/cts/deviceowner/proxy/PacProxyTest.java)', 1), ('(13,BLE,/android/content/cts/MutableContextWrapperTest.java)', 1), ('(4,BLE,/android/view/animation/cts/GridLayoutAnimationControllerTest.java)', 1), ('(25,BLE,/com/android/cts/appcompat/CompatChangesSelinuxTest.java)', 1), ('(3,BLE,/android/graphics/cts/MovieTest.java)', 1), ('(3,BLE,/android/security/cts/FileDescriptorTest.java)', 1), ('(3,BLE,/dot/junit/opcodes/shr_long/Test_shr_long.java)', 1), ('(54,BLE,/android/renderscript/cts/generated/TestExpm1.java)', 1), ('(2,BLE,/android/appsecurity/cts/AccessSerialNumberTest.java)', 1), ('(3,BLE,/android/autofillservice/cts/commontests/TimePickerTestCase.java)', 1), ('(1,BLE,/android/permission2/cts/NoWriteSecureSettingsPermissionTest.java)', 1), ('(22,BLE,/android/webkit/cts/WebChromeClientTest.java)', 1), ('(5,BLE,/android/view/cts/ViewGroup_LayoutParamsTest.java)', 1), ('(1,BLE,/android/bluetooth/cts/ScanFilterTest.java)', 1), ('(1,BLE,/android/app/usage/cts/CacheQuotaHintTest.java)', 1), ('(5,BLE,/android/security/NetworkSecurityPolicyTestBase.java)', 1), ('(30,BLE,/android/view/inputmethod/cts/CursorAnchorInfoTest.java)', 1), ('(1,RPA,/android/cts/statsdatom/integrity/IntegrityCheckStatsTests.java)', 1), ('(2,BLE,/android/app/usage/cts/UsageReportingTest.java)', 1), ('(2,RPA,/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java)', 1), ('(9,RPA,/android/location/cts/privileged/PrivilegedLocationPermissionTest.java)', 1), ('(6,BLE,/android/location/cts/privileged/PrivilegedLocationPermissionTest.java)', 1), ('(1,BLE,/dot/junit/opcodes/mul_float_2addr/Test_mul_float_2addr.java)', 1), ('(29,BLE,/android/autofillservice/cts/dropdown/CheckoutActivityTest.java)', 1), ('(1,BLE,/android/security/cts/CVE_2019_2206.java)', 1), ('(1,BLE,/com/android/server/cts/device/batterystats/BatteryStatsAlarmTest.java)', 1), ('(1,BLE,/android/net/http/cts/HttpResponseCacheTest.java)', 1), ('(7,BLE,/test/java/com/android/bedstead/deviceadminapp/DeviceAdminAppTest.java)', 1), ('(2,BLE,/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java)', 1), ('(1,BLE,/android/graphics/pdf/cts/PdfRendererTest.java)', 1), ('(2,BLE,/android/media/cts/EncoderTest.java)', 1), ('(1,BLE,/android/hardware/consumerir/cts/ConsumerIrTest.java)', 1), ('(3,BLE,/android/util/proto/cts/ProtoOutputStreamUInt64Test.java)', 1), ('(2,BLE,/com/android/cts/devicepolicy/MixedProfileOwnerTest.java)', 1), ('(5,BLE,/android/view/textclassifier/cts/ConversationActionsTest.java)', 1), ('(6,RPA,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(193,BLE,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(2,RPA,/android/opengl/cts/ParamsTest.java)', 1), ('(1,BLE,/android/hardware/camera2/cts/NativeCameraDeviceTest.java)', 1), ('(16,BLE,/android/security/identity/cts/IdentityApiTest.java)', 1), ('(4,RPA,/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java)', 1), ('(2,BLE,/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java)', 1), ('(2,BLE,/android/util/proto/cts/ProtoOutputStreamBytesTest.java)', 1), ('(438,BLE,/android/graphics/drawable/cts/DrawableTest.java)', 1), ('(63,BLE,/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java)', 1), ('(10,BLE,/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java)', 1), ('(34,BLE,/test/java/com/android/queryable/queries/SerializableQueryHelperTest.java)', 1)]"	"[('([1:/android/security/identity/cts/IdentityApiTest.java]:[BLE]:[1]:method_text:[        assertEquals(""Message 2"", e.getMessage());        assertEquals(t, e.getCause());    }   ])', 10), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[BLE]:[1]:method_text:[ // ============================================================================================   ])', 4), ('([8:/com/android/cts/appcompat/CompatChangesSelinuxTest.java]:[BLE]:[8]:method_text:[enabledChanges, disabledChanges);            uninstallPackage(TEST_PKG, true);        }    }   ])', 2), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[BLE]:[1]:method_text:[tDataset(""ACME CC"");        // Check the results.        mActivity.assertAutoFilled();    }   ])', 2), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[2]:method_text:[dAsDefault"");    }    // TODO(b/184175078): Migrate test to Bedstead when the infra is ready.   ])', 2), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[RPA]:[1]:method_text:[     assertTrue(request.isValid());            assertTrue(request.accept());        });    }   ])', 2), ('([3:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[3]:method_text:[eFile.exists()) {                assertTrue(imageFile.delete());            }        }    }   ])', 2), ('([6:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[6]:method_text:[;            assertEquals(densityAdjustedSize, drawable.getIntrinsicHeight());        }    }   ])', 2), ('([12:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[12]:method_text:[h());        assertEquals(expected.getIntrinsicHeight(), drawable.getIntrinsicHeight());    }   ])', 2), ('([13:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[13]:method_text:[h());        assertEquals(expected.getIntrinsicHeight(), drawable.getIntrinsicHeight());    }   ])', 2), ('([1:/android/media/cts/NativeDecoderTest.java]:[BLE]:[1]:method_text:[e,            int fd, long startOffset, long length);    @Presubmit    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/NativeDecoderTest.java]:[BLE]:[2]:method_text:[ deleteAMediaExtractor(long ex);    private static native void deleteAMediaDataSource(long ds);}])', 1), ('([3:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[RPA]:[3]:method_text:[              assertDirNoWriteAccess(userPath);                }            }        }    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[BLE]:[1]:method_text:[ / 1000;        assertEquals(newTimeSeconds, Os.fstat(fd.getFileDescriptor()).st_mtime);    }   ])', 1), ('([3:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[BLE]:[3]:method_text:[.trim().equals(""true"");    }    /**     * Verify that .nomedia is created correctly.     */   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[BLE]:[2]:method_text:[ctories tested by     * {@link CommonExternalStorageTest#testAllPackageDirsWritable()}.     */   ])', 1), ('([1:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[BLE]:[1]:method_text:[        super.setUp();    }    @AppModeFull(reason = ""Instant apps cannot open TCP sockets."")   ])', 1), ('([1:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[BLE]:[1]:method_text:[AvailableException {        assertDeviceTestPasses(""testCookieManagerBlockingUiThread"");    }   ])', 1), ('([1:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[BLE]:[1]:method_text:[ableException {        assertDeviceTestPasses(""testGetCurrentWebViewPackageOnUiThread"");    }   ])', 1), ('([1:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[BLE]:[1]:method_text:[ceNotAvailableException {        assertDeviceTestPasses(""testGetCurrentWebViewPackage"");    }   ])', 1), ('([1:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[BLE]:[1]:method_text:[vailableException {        assertDeviceTestPasses(""testStrictModeNotViolatedOnStartup"");    }   ])', 1), ('([1:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[BLE]:[1]:method_text:[NotAvailableException {        assertDeviceTestPasses(""testGetWebViewLooperOnUiThread"");    }   ])', 1), ('([1:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[BLE]:[1]:method_text:[{        assertDeviceTestPasses(""testGetWebViewLooperCreatedOnUiThreadFromInstrThread"");    }   ])', 1), ('([3:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[BLE]:[3]:method_text:[nstrumentationTests(testRunner, listener));        return listener.getCurrentRunResults();    }}])', 1), ('([2:/com/android/cts/deviceowner/proxy/PacProxyTest.java]:[RPA]:[2]:method_text:[ the PAC file can be set and it downloads it   * from the local HTTP server we are hosting.   */ ])', 1), ('([2:/com/android/cts/deviceowner/proxy/PacProxyTest.java]:[BLE]:[2]:method_text:[ the PAC file can be set and it downloads it   * from the local HTTP server we are hosting.   */ ])', 1), ('([1:/com/android/cts/deviceowner/proxy/PacProxyTest.java]:[BLE]:[1]:method_text:[ * the proxy and pass data back and forth.  See PassthroughTestHelper for   * more details.   */ ])', 1), ('([5:/android/content/cts/MutableContextWrapperTest.java]:[BLE]:[5]:method_text:[MutableContextWrapper = null;        mContext = getInstrumentation().getTargetContext();    }   ])', 1), ('([3:/android/content/cts/MutableContextWrapperTest.java]:[BLE]:[3]:method_text:[ontextWrapper(mContext);        assertNotNull(mMutableContextWrapper);    }    @UiThreadTest   ])', 1), ('([5:/android/content/cts/MutableContextWrapperTest.java]:[BLE]:[5]:method_text:[aseContext(base);        assertTrue(base.equals(mMutableContextWrapper.getBaseContext()));    }}])', 1), ('([1:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[BLE]:[1]:method_text:[mation(float alpha) {        assertTrue(alpha > 0.0f);        assertTrue(alpha < 1.0f);    }   ])', 1), ('([1:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[BLE]:[1]:method_text:[mation2.getAlpha(), DELTA);        assertIsRunningAnimation(transformation3.getAlpha());    }   ])', 1), ('([1:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[BLE]:[1]:method_text:[   layoutParams.layoutAnimationParameters = animationParams;        return layoutParams;    }   ])', 1), ('([1:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[BLE]:[1]:method_text:[mation1.getAlpha(), DELTA);        assertIsRunningAnimation(transformation2.getAlpha());    }   ])', 1), ('([1:/com/android/cts/appcompat/CompatChangesSelinuxTest.java]:[BLE]:[1]:method_text:[e static final Pattern PS_ENTRY_PATTERN = Pattern.compile(""^(?<label>\\\\S+)\\\\s+(?<name>\\\\S+)"");   ])', 1), ('([8:/com/android/cts/appcompat/CompatChangesSelinuxTest.java]:[BLE]:[8]:method_text:[t -n "" + TEST_PKG + ""/"" + TEST_PKG + "".Empty"");        Thread.currentThread().sleep(100);    }}])', 1), ('([1:/android/graphics/cts/MovieTest.java]:[BLE]:[1]:method_text:[       mResources = mContext.getResources();        mMovie = mResources.getMovie(MOVIE);    }   ])', 1), ('([2:/android/graphics/cts/MovieTest.java]:[BLE]:[2]:method_text:[vertDipToPixels(mContext, mMovie.width());        assertEquals(expectedWidth, scaledWidth);    }}])', 1), ('([1:/android/security/cts/FileDescriptorTest.java]:[BLE]:[1]:method_text:[g fcntl(F_GETFD) on the file descriptor,   * and verifying that the FD_CLOEXEC flag is set.   */ ])', 1), ('([2:/android/security/cts/FileDescriptorTest.java]:[BLE]:[2]:method_text:[      throw e;        }      }    }    if (failed) {      fail(failMsg.toString());    }  }}])', 1), ('([1:/dot/junit/opcodes/shr_long/Test_shr_long.java]:[BLE]:[1]:method_text:[ }        /**     * @constraint B1      * @title types of arguments - long, double     */   ])', 1), ('([2:/dot/junit/opcodes/shr_long/Test_shr_long.java]:[BLE]:[2]:method_text:[le, int. The verifier checks that longs     * and doubles are not used interchangeably.     */   ])', 1), ('([54:/android/renderscript/cts/generated/TestExpm1.java]:[BLE]:[54]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([2:/android/appsecurity/cts/AccessSerialNumberTest.java]:[BLE]:[2]:method_text:[ion {        super.tearDown();        getDevice().uninstallPackage(ACCESS_SERIAL_PKG);    }   ])', 1), ('([3:/android/autofillservice/cts/commontests/TimePickerTestCase.java]:[BLE]:[3]:method_text:[        assertTextAndValue(findNodeByResourceId(saveRequest.structure, ID_OUTPUT), ""10:40"");    }}])', 1), ('([1:/android/permission2/cts/NoWriteSecureSettingsPermissionTest.java]:[BLE]:[1]:method_text:[TINGS);        } catch (SecurityException expected) {           /* do nothing */        }    }}])', 1), ('([1:/android/webkit/cts/WebChromeClientTest.java]:[BLE]:[1]:method_text:[IconDb.removeAllIcons();            mIconDb.close();        }        super.tearDown();    }   ])', 1), ('([1:/android/webkit/cts/WebChromeClientTest.java]:[BLE]:[1]:method_text:[            return webChromeClient.hadOnProgressChanged();            }        }.run();    }   ])', 1), ('([1:/android/webkit/cts/WebChromeClientTest.java]:[BLE]:[1]:method_text:[       assertEquals(TestHtmlConstants.HELLO_WORLD_TITLE, webChromeClient.getPageTitle());    }   ])', 1), ('([3:/android/webkit/cts/WebChromeClientTest.java]:[BLE]:[3]:method_text:[);        } else {            assertFalse(webChromeClient.hadOnCloseWindow());        }    }   ])', 1), ('([1:/android/webkit/cts/WebChromeClientTest.java]:[BLE]:[1]:method_text:[wUtils.isWebViewAvailable()) {            return;        }        runWindowTest(true);    }   ])', 1), ('([1:/android/webkit/cts/WebChromeClientTest.java]:[BLE]:[1]:method_text:[ return;        }        mBlockWindowCreationSync = true;        runWindowTest(false);    }   ])', 1), ('([1:/android/webkit/cts/WebChromeClientTest.java]:[BLE]:[1]:method_text:[    runWindowTest(false);    }    // Note that test is still a little flaky. See b/119468441.   ])', 1), ('([4:/android/webkit/cts/WebChromeClientTest.java]:[BLE]:[4]:method_text:[lConstants.HELLO_WORLD_URL));        WebkitUtils.waitForFuture(onJsBeforeUnloadFuture);    }   ])', 1), ('([2:/android/webkit/cts/WebChromeClientTest.java]:[BLE]:[2]:method_text:[  }        }.run();        assertEquals(webChromeClient.getMessage(), ""testOnJsAlert"");    }   ])', 1), ('([2:/android/webkit/cts/WebChromeClientTest.java]:[BLE]:[2]:method_text:[}        }.run();        assertEquals(webChromeClient.getMessage(), ""testOnJsConfirm"");    }   ])', 1), ('([2:/android/webkit/cts/WebChromeClientTest.java]:[BLE]:[2]:method_text:[ }        }.run();        assertEquals(webChromeClient.getMessage(), ""testOnJsPrompt"");    }   ])', 1), ('([3:/android/webkit/cts/WebChromeClientTest.java]:[BLE]:[3]:method_text:[onReceivedIcon(WebView view, Bitmap icon) {            mHadOnReceivedIcon = true;        }    }}])', 1), ('([5:/android/view/cts/ViewGroup_LayoutParamsTest.java]:[BLE]:[5]:method_text:[, int heightAttr) {            super.setBaseAttributes(a, widthAttr, heightAttr);        }    }}])', 1), ('([1:/android/bluetooth/cts/ScanFilterTest.java]:[BLE]:[1]:method_text:[000000L);            mFilterBuilder = new ScanFilter.Builder();        }    }    @SmallTest   ])', 1), ('([1:/android/app/usage/cts/CacheQuotaHintTest.java]:[BLE]:[1]:method_text:[port org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)public class CacheQuotaHintTest {   ])', 1), ('([5:/android/security/NetworkSecurityPolicyTestBase.java]:[BLE]:[5]:method_text:[) {            synchronized (mLock) {                return mDone;            }        }    }}])', 1), ('([23:/android/view/inputmethod/cts/CursorAnchorInfoTest.java]:[BLE]:[23]:method_text:[ION,        FLAG_HAS_INVISIBLE_REGION,        FLAG_HAS_INVISIBLE_REGION | FLAG_IS_RTL,    };   ])', 1), ('([2:/android/view/inputmethod/cts/CursorAnchorInfoTest.java]:[BLE]:[2]:method_text:[kerBottom(), EPSILON);        assertEquals(new Matrix(), uninitializedInfo.getMatrix());    }   ])', 1), ('([3:/android/view/inputmethod/cts/CursorAnchorInfoTest.java]:[BLE]:[3]:method_text:[seline1, insertionMarkerBottom1,                        insertionMarkerFlags2).build());    }   ])', 1), ('([1:/android/view/inputmethod/cts/CursorAnchorInfoTest.java]:[BLE]:[1]:method_text:[ption ex) {                fail();            }            builder.reset();        }    }   ])', 1), ('([1:/android/view/inputmethod/cts/CursorAnchorInfoTest.java]:[BLE]:[1]:method_text:[            if (parcel != null) {                parcel.recycle();            }        }    }}])', 1), ('([1:/android/cts/statsdatom/integrity/IntegrityCheckStatsTests.java]:[RPA]:[1]:method_text:[ByAppCertRule()).isFalse();        assertThat(result.getCausedByInstallerRule()).isFalse();    }}])', 1), ('([2:/android/app/usage/cts/UsageReportingTest.java]:[BLE]:[2]:method_text:[ger.reportUsageStop(activity, TOKEN_0);        assertAppOrTokenUsed(mFullToken0, false);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java]:[RPA]:[1]:method_text:[PACKAGE_NAME);        mContext.unregisterReceiver(mReceiver);        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java]:[RPA]:[1]:method_text:[sistentPreferredActivity(ADMIN_RECEIVER_COMPONENT, filter,                targetComponent);    }}])', 1), ('([9:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[RPA]:[9]:method_text:[;        mLocationManager.setExtraLocationControllerPackageEnabled(originalPackageEnabeld);    }}])', 1), ('([6:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[BLE]:[6]:method_text:[;        mLocationManager.setExtraLocationControllerPackageEnabled(originalPackageEnabeld);    }}])', 1), ('([1:/dot/junit/opcodes/mul_float_2addr/Test_mul_float_2addr.java]:[BLE]:[1]:method_text:[}        /**     * @constraint B1      * @title types of arguments - float, double     */   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[BLE]:[1]:method_text:[ing onProvideAutofillStructure(),    // but that would require creating a custom ViewStructure.   ])', 1), ('([3:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[BLE]:[3]:method_text:[       assertToggleValue(findNodeByResourceId(saveRequest.structure, ID_SAVE_CC), false);    }   ])', 1), ('([5:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[BLE]:[5]:method_text:[nored when the selected spinner element is not     * available in the autofill options.     */   ])', 1), ('([2:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[BLE]:[2]:method_text:[ // ============================================================================================   ])', 1), ('([2:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[BLE]:[2]:method_text:[            assertThat(editText.getText().toString()).isEqualTo(expectedText);        }    }   ])', 1), ('([2:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[BLE]:[2]:method_text:[ {            assertThat(compoundButton.isChecked()).isEqualTo(expectedValue);        }    }   ])', 1), ('([3:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[BLE]:[3]:method_text:[        assertThat(spinner.getSelectedItemPosition()).isEqualTo(expectedValue);        }    }   ])', 1), ('([2:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[BLE]:[2]:method_text:[calendar.set(year, month, day, hour, minute);        return calendar.getTimeInMillis();    }   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[BLE]:[1]:method_text:[    Helper.assertTimeValue(timePicker, nonAutofilledHour, nonAutofilledMinute);        }    }   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[BLE]:[1]:method_text:[lue= */                        false, /* workAddrValue= */true);            }        }    }   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[BLE]:[1]:method_text:[ radioGroup.setEnabled(false));        assertThat(radioGroup.getAutofillValue()).isNull();    }}])', 1), ('([1:/android/security/cts/CVE_2019_2206.java]:[BLE]:[1]:method_text:[();        AdbUtils.runPocAssertNoCrashesNotVulnerable(""CVE-2019-2206"", null, getDevice());    }}])', 1), ('([1:/com/android/server/cts/device/batterystats/BatteryStatsAlarmTest.java]:[BLE]:[1]:method_text:[     assertTrue(""Didn\'t receive all broadcasts."", latch.await(60 * 1000, TimeUnit.SECONDS));    }}])', 1), ('([1:/android/net/http/cts/HttpResponseCacheTest.java]:[BLE]:[1]:method_text:[     ResponseCache.setDefault(null);        server.shutdown();        super.tearDown();    }   ])', 1), ('([1:/test/java/com/android/bedstead/deviceadminapp/DeviceAdminAppTest.java]:[BLE]:[1]:method_text:[endency of the test    @Before    public void setUp() {        EventLogs.resetLogs();    }   ])', 1), ('([3:/test/java/com/android/bedstead/deviceadminapp/DeviceAdminAppTest.java]:[BLE]:[3]:method_text:[ge(sContext.getPackageName());            assertThat(logs.poll()).isNotNull();        }    }   ])', 1), ('([3:/test/java/com/android/bedstead/deviceadminapp/DeviceAdminAppTest.java]:[BLE]:[3]:method_text:[                .onUser(profile);            assertThat(logs.poll()).isNotNull();        }    }}])', 1), ('([2:/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java]:[BLE]:[2]:method_text:[               .setKeySize(keySize)                                    .build());        }    }}])', 1), ('([1:/android/graphics/pdf/cts/PdfRendererTest.java]:[BLE]:[1]:method_text:[ODE_FOR_DISPLAY),                NullPointerException.class);        renderer.close();    }   ])', 1), ('([1:/android/media/cts/EncoderTest.java]:[BLE]:[1]:method_text:[ltEncoders.put(mime, codec.getName());        codec.release();        return isDefault;    }   ])', 1), ('([1:/android/media/cts/EncoderTest.java]:[BLE]:[1]:method_text:[            muxer.stop();            muxer.release();            muxer = null;        }    }}])', 1), ('([1:/android/hardware/consumerir/cts/ConsumerIrTest.java]:[BLE]:[1]:method_text:[ assertTrue(msg, newTime - currentTime <= totalXmitTimeNanos * (1.0 + margin));        }    }   ])', 1), ('([3:/android/util/proto/cts/ProtoOutputStreamUInt64Test.java]:[BLE]:[3]:method_text:[ new long[0]);        } catch (IllegalArgumentException ex) {            // good        }    }}])', 1), ('([1:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[BLE]:[1]:method_text:[wner of an organization-owned managed profile or a profile owner on user 0.    }    @Override   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[BLE]:[1]:method_text:[   assumeTrue(""Skipping test: profile owner is not on system user"", mUserId == USER_SYSTEM);    }}])', 1), ('([1:/android/view/textclassifier/cts/ConversationActionsTest.java]:[BLE]:[1]:method_text:[ic final Bundle EXTRAS = new Bundle();    static {        EXTRAS.putString(TEXT, TEXT);    }   ])', 1), ('([4:/android/view/textclassifier/cts/ConversationActionsTest.java]:[BLE]:[4]:method_text:[cel, 0);        parcel.setDataPosition(0);        return creator.createFromParcel(parcel);    }}])', 1), ('([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[RPA]:[4]:method_text:[row SecurityException"",                result.contains(""java.lang.SecurityException""));    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[RPA]:[2]:method_text:[    } finally {            changeUserCredential(null, TEST_PASSWORD, mUserId);        }    }   ])', 1), ('([13:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[13]:method_text:[.        getDevice().executeShellCommand(""input keyevent 3"");        super.tearDown();    }   ])', 1), ('([8:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[8]:method_text:[Delegations} to test that     *    the scope can only be delegatd to one app at a time.     */   ])', 1), ('([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[4]:method_text:[tallDelegateApp() throws Exception {        installAppAsUser(DELEGATE_APP_APK, mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[1]:method_text:[YSTEM, because     * network rules for this user will affect UID 0.     */    @RequiresDevice   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[1]:method_text:[iceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testCleanup"");        }    }    @RequiresDevice   ])', 1), ('([5:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[5]:method_text:[e(DEVICE_ADMIN_PKG)                    .setBoolean(false)                    .build());    }   ])', 1), ('([6:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[6]:method_text:[ist(mUserId, false /* disabled */);            clearVoiceInteractionService();        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[1]:method_text:[, ACCOUNT_TYPE, mUserId);        }        executeAccountTest(""testAddAccount_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[1]:method_text:[CCOUNT_TYPE, mUserId);        }        executeAccountTest(""testRemoveAccount_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[1]:method_text:[n app, that tries to set wallpaper.    // Non-admin apps must not violate any user restriction.   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[2]:method_text:[;        } finally {            setDefaultContentCaptureServiceEnabled(true);        }    }   ])', 1), ('([15:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[15]:method_text:[           ""cmd content_capture set default-service-enabled "" + mUserId + "" "" + enabled);    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[2]:method_text:[abled(true);            executeDeviceTestClass("".MeteredDataRestrictionTest"");        }    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[2]:method_text:[pendPackageTest"", ""testSuspendNotSuspendablePackages"");    }    @FlakyTest(bugId = 141314026)   ])', 1), ('([10:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[10]:method_text:[row SecurityException"",                result.contains(""java.lang.SecurityException""));    }   ])', 1), ('([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[4]:method_text:[PARENT)                    .build());    }    /** Test for resetPassword for all devices. */   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[1]:method_text:[ allowing failures.        executeResetPasswordWithTokenTests(/* allowFailures */ true);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[1]:method_text:[          changeUserCredential(null /*newCredential*/, TEST_PASSWORD, mUserId);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[1]:method_text:[     runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UnavailableSecureLockScreenTest"", mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[1]:method_text:[                DEVICE_ADMIN_PKG, STORAGE_ENCRYPTION_TEST_CLASS, null, mUserId, params);    }   ])', 1), ('([10:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[10]:method_text:[E)                    .setStrings(NOT_CALLED_FROM_PARENT)                    .build());    }   ])', 1), ('([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[4]:method_text:[RE_CAMERA)                .setStrings(NOT_CALLED_FROM_PARENT)                .build());    }   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[3]:method_text:[thod("".KeyguardDisabledFeaturesTest"",                ""testSetKeyguardDisabledFeatures"");    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[2]:method_text:[e(DEVICE_ADMIN_PKG)                    .setBoolean(false)                    .build());    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[2]:method_text:[_ADMIN_PKG)                        .setBoolean(false)                        .build());    }   ])', 1), ('([13:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[13]:method_text:[lean(false)                .setStrings(systemPackageToEnable)                .build());    }   ])', 1), ('([9:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[9]:method_text:[lse)                .setStrings(""android.intent.action.MAIN"")                .build());    }   ])', 1), ('([10:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[10]:method_text:[.map(line -> line.substring(prefixLength))                .collect(Collectors.toList());    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[1]:method_text:[ntSpecificIdTest"",                ""testThrowsWhenTryingToReSetOrganizationId"", mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[1]:method_text:[d("".SensorPermissionGrantTest"",                ""testAdminCannotGrantSensorsPermission"");    }   ])', 1), ('([54:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[BLE]:[54]:method_text:[and(                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);    }}])', 1), ('([1:/android/opengl/cts/ParamsTest.java]:[RPA]:[1]:method_text:[ntException.class)    public void testNullBufferParam() {        glGenBuffers(1, null);    }   ])', 1), ('([1:/android/opengl/cts/ParamsTest.java]:[RPA]:[1]:method_text:[ assertTrue(buffer.get() > 0);        buffer.rewind();        glDeleteBuffers(1, buffer);    }}])', 1), ('([1:/android/hardware/camera2/cts/NativeCameraDeviceTest.java]:[BLE]:[1]:method_text:[dLibrary(""ctscamera2_jni"");        Log.i(""NativeCameraDeviceTest"", ""after loadlibrary"");    }   ])', 1), ('([1:/android/security/identity/cts/IdentityApiTest.java]:[BLE]:[1]:method_text:[quals;public class IdentityApiTest {    private static final String TAG = ""IdentityApiTest"";   ])', 1), ('([5:/android/security/identity/cts/IdentityApiTest.java]:[BLE]:[5]:method_text:[        assertEquals(""Message 2"", e.getMessage());        assertEquals(t, e.getCause());    }   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[RPA]:[2]:method_text:[getClassName())) {                return info;            }        }        return null;    }}])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[BLE]:[1]:method_text:[          assertNull(getLauncherApps().getShortcutConfigActivityIntent(lai));        });    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[BLE]:[1]:method_text:[s(CONFIG_ACTIVITY_NAME, intent.getComponent().getClassName());        activity.finish();    }   ])', 1), ('([2:/android/util/proto/cts/ProtoOutputStreamBytesTest.java]:[BLE]:[2]:method_text:[ new byte[0]);        } catch (IllegalArgumentException ex) {            // good        }    }}])', 1), ('([7:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[7]:method_text:[InstrumentationRegistry.getTargetContext();        mResources = mContext.getResources();    }   ])', 1), ('([9:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[9]:method_text:[      mockDrawable.clearColorFilter();        assertNull(mockDrawable.getColorFilter());    }   ])', 1), ('([12:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[12]:method_text:[hould throw NullPointerException."");        } catch (NullPointerException e) {        }    }   ])', 1), ('([3:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[3]:method_text:[rtNotNull(Drawable.createFromPath(u.toString()));        assertTrue(imageFile.delete());    }   ])', 1), ('([5:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[5]:method_text:[rce.read(buffer)) {                target.write(buffer, 0, len);            }        }    }   ])', 1), ('([3:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[3]:method_text:[le.delete());            }        }    }    private Boolean isClosed = new Boolean(false);   ])', 1), ('([1:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[1]:method_text:[                assertTrue(imageFile.delete());                }            }        }    }   ])', 1), ('([8:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[8]:method_text:[hould throw NullPointerException."");        } catch (NullPointerException e) {        }    }   ])', 1), ('([10:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[10]:method_text:[ALUE);        assertEquals(Integer.MIN_VALUE, mockDrawable.getChangingConfigurations());    }   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[4]:method_text:[e mockDrawable = new MockDrawable();        assertNull(mockDrawable.getConstantState());    }   ])', 1), ('([5:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[5]:method_text:[awable = new MockDrawable();        assertSame(mockDrawable, mockDrawable.getCurrent());    }   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[4]:method_text:[awable = new MockDrawable();        assertEquals(-1, mockDrawable.getIntrinsicHeight());    }   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[4]:method_text:[rawable = new MockDrawable();        assertEquals(-1, mockDrawable.getIntrinsicWidth());    }   ])', 1), ('([12:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[12]:method_text:[alse(mockDrawable.setLevel(10000));        assertEquals(10000, mockDrawable.getLevel());    }   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[4]:method_text:[kDrawable = new MockDrawable();        assertEquals(0, mockDrawable.getMinimumHeight());    }   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[4]:method_text:[ckDrawable = new MockDrawable();        assertEquals(0, mockDrawable.getMinimumWidth());    }   ])', 1), ('([5:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[5]:method_text:[hould throw NullPointerException."");        } catch (NullPointerException e) {        }    }   ])', 1), ('([7:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[7]:method_text:[     assertEquals(states, mockDrawable.getState());        mockDrawable.setState(null);    }   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[4]:method_text:[ckDrawable = new MockDrawable();        assertNull(mockDrawable.getTransparentRegion());    }   ])', 1), ('([7:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[7]:method_text:[    // visibility set to false in resource        assertFalse(mockDrawable.isVisible());    }   ])', 1), ('([10:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[10]:method_text:[nvalidateSelf();        verify(mockCallback, times(1)).invalidateDrawable(mockDrawable);    }   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[4]:method_text:[awable mockDrawable = new MockDrawable();        assertFalse(mockDrawable.isStateful());    }   ])', 1), ('([18:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[18]:method_text:[True(mockDrawable.setVisible(true, false));        assertTrue(mockDrawable.isVisible());    }   ])', 1), ('([5:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[5]:method_text:[ in the Drawable superclass.        mockDrawable.onBoundsChange(new Rect(0, 0, 10, 10));    }   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[4]:method_text:[le mockDrawable = new MockDrawable();        assertFalse(mockDrawable.onLevelChange(0));    }   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[4]:method_text:[mockDrawable = new MockDrawable();        assertFalse(mockDrawable.onStateChange(null));    }   ])', 1), ('([5:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[5]:method_text:[AQUE,                Drawable.resolveOpacity(PixelFormat.RGB_888, PixelFormat.RGB_565));    }   ])', 1), ('([25:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[25]:method_text:[       verify(mockCallback).scheduleDrawable(eq(mockDrawable), eq(runnable), eq(-1000L));    }   ])', 1), ('([7:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[7]:method_text:[  mockDrawable.setCallback(null);        assertEquals(null, mockDrawable.getCallback());    }   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[4]:method_text:[able = new MockDrawable();        mockDrawable.setColorFilter(5, PorterDuff.Mode.CLEAR);    }   ])', 1), ('([5:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[5]:method_text:[e();        // No-op in the Drawable superclass.        mockDrawable.setDither(false);    }   ])', 1), ('([5:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[5]:method_text:[o-op in the Drawable superclass.        mockDrawable.setHotspotBounds(10, 15, 100, 150);    }   ])', 1), ('([5:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[5]:method_text:[  // No-op in the Drawable superclass.        mockDrawable.getHotspotBounds(new Rect());    }   ])', 1), ('([7:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[7]:method_text:[RTL);        assertEquals(View.LAYOUT_DIRECTION_RTL, mockDrawable.getLayoutDirection());    }   ])', 1), ('([5:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[5]:method_text:[ble superclass.        mockDrawable.onLayoutDirectionChanged(View.LAYOUT_DIRECTION_LTR);    }   ])', 1), ('([5:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[5]:method_text:[        // No-op in the Drawable superclass.        mockDrawable.setFilterBitmap(false);    }   ])', 1), ('([5:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[5]:method_text:[e();        // No-op in the Drawable superclass.        mockDrawable.isFilterBitmap();    }   ])', 1), ('([9:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[9]:method_text:[elf(null);        verify(mockCallback, times(1)).unscheduleDrawable(mockDrawable, null);    }   ])', 1), ('([5:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[5]:method_text:[ckDrawable = new MockDrawable();        assertSame(mockDrawable, mockDrawable.mutate());    }   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[4]:method_text:[= new MockDrawable();        assertEquals(Insets.NONE, mockDrawable.getOpticalInsets());    }   ])', 1), ('([8:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[8]:method_text:[tModeInvoked());        assertEquals(1, testTintDrawable.getNumTimesBlendModeInvoked());    }   ])', 1), ('([13:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[13]:method_text:[tModeInvoked());        assertEquals(2, testTintDrawable.getNumTimesBlendModeInvoked());    }   ])', 1), ('([10:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[10]:method_text:[tModeInvoked());        assertEquals(2, testTintDrawable.getNumTimesBlendModeInvoked());    }   ])', 1), ('([9:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[9]:method_text:[tNumTimesBlendModeInvoked());        assertEquals(0, test.getNumTimesTintModeInvoked());    }   ])', 1), ('([6:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[6]:method_text:[tNumTimesTintModeInvoked());        assertEquals(1, test.getNumTimesBlendModeInvoked());    }   ])', 1), ('([6:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[6]:method_text:[tNumTimesBlendModeInvoked());        assertEquals(1, test.getNumTimesTintModeInvoked());    }   ])', 1), ('([3:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[3]:method_text:[tNumTimesTintModeInvoked());        assertEquals(0, test.getNumTimesBlendModeInvoked());    }   ])', 1), ('([6:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[6]:method_text:[   d.setTintMode((PorterDuff.Mode) null);        assertEquals(BlendMode.SRC_IN, d.mode);    }   ])', 1), ('([50:/android/graphics/drawable/cts/DrawableTest.java]:[BLE]:[50]:method_text:[ublic int getNumTimesBlendModeInvoked() {            return mSetBlendModeInvoked;        }    }}])', 1), ('([2:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[BLE]:[2]:method_text:[ge.     * 3. Check restored MasterSyncAutomatically=true is the same with backup value.     */   ])', 1), ('([2:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[BLE]:[2]:method_text:[e.     * 3. Check restored MasterSyncAutomatically=false is the same with backup value.     */   ])', 1), ('([10:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[BLE]:[10]:method_text:[e AccountSyncSettingsBackupHelper#restoreExistingAccountSyncSettingsFromJSON(JSONObject)     */   ])', 1), ('([15:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[BLE]:[15]:method_text:[e AccountSyncSettingsBackupHelper#restoreExistingAccountSyncSettingsFromJSON(JSONObject)     */   ])', 1), ('([19:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[BLE]:[19]:method_text:[ckage.     * 3. Check restored syncEnabled=false and isSyncable=1. Then remove account.     */   ])', 1), ('([15:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[BLE]:[15]:method_text:[   Account account = accounts[i];            am.removeAccountExplicitly(account);        }    }}])', 1), ('([1:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[BLE]:[1]:method_text:[ }    }    /**     * If the intent is not resolvable, it should return {@code null}.     */   ])', 1), ('([4:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[BLE]:[4]:method_text:[getUser));        }    }    /**     * Make sure we cannot bind unprotected service.     */   ])', 1), ('([5:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[BLE]:[5]:method_text:[ace CrossUserCallable<T> {        T call(ICrossUserService service) throws RemoteException;    }}])', 1), ('([12:/test/java/com/android/queryable/queries/SerializableQueryHelperTest.java]:[BLE]:[12]:method_text:[alizableString"";    private final Serializable mDifferentSerializable = ""SerializableString2"";   ])', 1), ('([6:/test/java/com/android/queryable/queries/SerializableQueryHelperTest.java]:[BLE]:[6]:method_text:[<>(mQuery);        assertThat(serializableQueryHelper.matches(mSerializable)).isTrue();    }   ])', 1), ('([8:/test/java/com/android/queryable/queries/SerializableQueryHelperTest.java]:[BLE]:[8]:method_text:[ializable);        assertThat(serializableQueryHelper.matches(mSerializable)).isTrue();    }   ])', 1), ('([8:/test/java/com/android/queryable/queries/SerializableQueryHelperTest.java]:[BLE]:[8]:method_text:[erializable);        assertThat(serializableQueryHelper.matches(mSerializable)).isFalse();    }}])', 1)]"	"https://developer.android.com"	""	"[('BLE', 212), ('RPA', 13)]"	"[('[android.autofillservice.cts.dropdown.CheckoutActivityTest isNull CtsAutoFillServiceTestCases]', 6), ('[android.location.cts.privileged.PrivilegedLocationPermissionTest testExtraLocationControllerPackage CtsLocationPrivilegedTestCases]', 2), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testAutofill CtsAutoFillServiceTestCases]', 2), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testCannotEnableOrDisableDeviceOwnerOrProfileOwner CtsDevicePolicyManagerTestCases]', 2), ('[android.media.cts.NativeDecoderTest testDataSourceWithCallback CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testAMediaDataSourceClose CtsMediaTestCases]', 1), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testSecondaryMountPoints None]', 1), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testWriteExternalStorage None]', 1), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testSecondaryWalkingUpTreeReadWrite None]', 1), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testVerifyNoMediaCreated None]', 1), ('[com.android.cts.webkit.WebViewHostSideStartupTest testCookieManager None]', 1), ('[com.android.cts.webkit.WebViewHostSideStartupTest testWebViewVersionApiOnUiThread None]', 1), ('[com.android.cts.webkit.WebViewHostSideStartupTest testWebViewVersionApi None]', 1), ('[com.android.cts.webkit.WebViewHostSideStartupTest testStrictMode None]', 1), ('[com.android.cts.webkit.WebViewHostSideStartupTest testGetWebViewLooperOnUiThread None]', 1), ('[com.android.cts.webkit.WebViewHostSideStartupTest testGetWebViewLooperFromUiThread None]', 1), ('[com.android.cts.webkit.WebViewHostSideStartupTest testGetWebViewLooperCreatedOnBackgroundThreadFromInstThread None]', 1), ('[com.android.cts.deviceowner.proxy.PacProxyTest testProxyIsUp None]', 1), ('[android.content.cts.MutableContextWrapperTest testConstructor CtsContentTestCases]', 1), ('[android.content.cts.MutableContextWrapperTest testSetBaseContext CtsContentTestCases]', 1), ('[android.view.animation.cts.GridLayoutAnimationControllerTest testAccessDelay CtsViewTestCases]', 1), ('[android.view.animation.cts.GridLayoutAnimationControllerTest testAccessDirection CtsViewTestCases]', 1), ('[android.view.animation.cts.GridLayoutAnimationControllerTest testGetDelayForView CtsViewTestCases]', 1), ('[android.view.animation.cts.GridLayoutAnimationControllerTest testAccessDirectionPriority CtsViewTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesSelinuxTest testTargetSdkQAppIsInLatestDomainWithLatestOptin CtsAppCompatHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesSelinuxTest testTargetSdkQAppIsInRDomainWithROptin CtsAppCompatHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesSelinuxTest testTargetSdkRAppIsInLatestDomainWithLatestOptin CtsAppCompatHostTestCases]', 1), ('[android.graphics.cts.MovieTest testGetMovieProperties CtsGraphicsTestCases]', 1), ('[android.security.cts.FileDescriptorTest testCLOEXEC CtsSecurityTestCases]', 1), ('[dot.junit.opcodes.shr_long.Test_shr_long testVFE1 None]', 1), ('[dot.junit.opcodes.shr_long.Test_shr_long testVFE5 None]', 1), ('[android.autofillservice.cts.commontests.TimePickerTestCase testAutoFillAndSave CtsAutoFillServiceTestCases]', 1), ('[android.permission2.cts.NoWriteSecureSettingsPermissionTest testWriteSecureSettings CtsPermission2TestCases]', 1), ('[android.webkit.cts.WebChromeClientTest WebChromeClientTest CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebChromeClientTest testOnProgressChanged CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebChromeClientTest testOnReceivedTitle CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebChromeClientTest testOnReceivedIcon CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebChromeClientTest testWindows CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebChromeClientTest testBlockWindowsSync CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebChromeClientTest testBlockWindowsAsync CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebChromeClientTest testOnJsBeforeUnloadIsCalled CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebChromeClientTest testOnJsAlert CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebChromeClientTest testOnJsConfirm CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebChromeClientTest testOnJsPrompt CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebChromeClientTest testOnConsoleMessage CtsWebkitTestCases]', 1), ('[android.view.cts.ViewGroup_LayoutParamsTest testSetBaseAttributes CtsViewTestCases]', 1), ('[android.security.NetworkSecurityPolicyTestBase testDownloadManager None]', 1), ('[android.view.inputmethod.cts.CursorAnchorInfoTest testBuilder CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.CursorAnchorInfoTest testEquality CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.CursorAnchorInfoTest testMatrixIsRequired CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.CursorAnchorInfoTest testBuilderAddCharacterBounds CtsInputMethodTestCases]', 1), ('[android.cts.statsdatom.integrity.IntegrityCheckStatsTests testIntegrityCheckAtomReportedDuringInstall CtsStatsdAtomHostTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testExceptionOnRepeatReport CtsUsageStatsTestCases]', 1), ('[com.android.cts.deviceandprofileowner.PersistentIntentResolvingTest testAddAndClearPersistentPreferredActivitiesYieldsResolverActivity None]', 1), ('[dot.junit.opcodes.mul_float_2addr.Test_mul_float_2addr testVFE1 None]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testGetAutofillOptionsSorted CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testSanitization CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testCustomizedSaveUiWithContentDescription CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testCustomizedSaveUiWhenListResolutionFails CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest autofillTextWithListValue CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest isChecked CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest getTimeInMillis CtsAutoFillServiceTestCases]', 1), ('[android.security.cts.CVE_2019_2206 testPocCVE_2019_2206 CtsSecurityBulletinHostTestCases]', 1), ('[com.android.server.cts.device.batterystats.BatteryStatsAlarmTest testAlarms None]', 1), ('[test.java.com.android.bedstead.deviceadminapp.DeviceAdminAppTest TestApis None]', 1), ('[test.java.com.android.bedstead.deviceadminapp.DeviceAdminAppTest setAsDeviceOwner_isEnabled None]', 1), ('[test.java.com.android.bedstead.deviceadminapp.DeviceAdminAppTest setAsProfileOwner_isEnabled None]', 1), ('[android.keystore.cts.performance.HmacKeyGenPerformanceTest testHmacKeyGen CtsKeystoreTestCases]', 1), ('[android.media.cts.EncoderTest testAACEncoders CtsMediaTestCases]', 1), ('[android.hardware.consumerir.cts.ConsumerIrTest test_timing CtsHardwareTestCases]', 1), ('[android.util.proto.cts.ProtoOutputStreamUInt64Test testBadFieldIds CtsProtoTestCases]', 1), ('[com.android.cts.devicepolicy.MixedProfileOwnerTest testSetAutoTimeZoneEnabled CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.MixedProfileOwnerTest testSetAutoTimeEnabled CtsDevicePolicyManagerTestCases]', 1), ('[android.view.textclassifier.cts.ConversationActionsTest testConversationActions_minimal CtsTextClassifierTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testGetPasswordExpiration CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictions CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegation CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testStateOfSensorsRelatedPermissionsCannotBeRead CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnPackageUninstalled CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testScreenCaptureDisabled CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testScreenCaptureDisabled_assist CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledAddAccount CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledRemoveAccount CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetKeyGrant CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowContentCapture_allowed CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowContentSuggestions_allowed CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetMeteredDataDisabledPackages CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSuspendPackage CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetCameraDisabledLogged CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testResetPasswordWithToken CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testGetCurrentFailedPasswordAttempts CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPasswordQualityWithoutSecureLockScreen CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetStorageEncryption CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetKeyguardDisabledFeaturesLogged CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetKeyguardDisabledSecureCameraLogged CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetKeyguardDisabledFeatures CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetAutoTimeEnabled CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetAutoTimeZoneEnabled CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testEnableSystemAppLogged CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testEnableSystemAppWithIntentLogged CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSecondaryLockscreen CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testEnrollmentSpecificIdEmptyAndMultipleSet CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAdminControlOverSensorPermissionGrantsDefault CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testGetNearbyNotificationStreamingPolicy_getsNearbyStreamingDisabledAsDefault CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testGetNearbyAppStreamingPolicy_getsNearbyStreamingDisabledAsDefault CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetNearbyAppStreamingPolicy_changesPolicy CtsDevicePolicyManagerTestCases]', 1), ('[android.opengl.cts.ParamsTest testNullBufferParam CtsOpenGLTestCases]', 1), ('[android.opengl.cts.ParamsTest testBufferParam CtsOpenGLTestCases]', 1), ('[android.security.identity.cts.IdentityApiTest testConstructorsAlreadyPersonalizedException CtsIdentityTestCases]', 1), ('[android.security.identity.cts.IdentityApiTest testConstructorsCipherSuiteNotSupportedException CtsIdentityTestCases]', 1), ('[android.security.identity.cts.IdentityApiTest testConstructorsDocTypeNotSupportedException CtsIdentityTestCases]', 1), ('[android.security.identity.cts.IdentityApiTest testConstructorsEphemeralPublicKeyNotFoundException CtsIdentityTestCases]', 1), ('[android.security.identity.cts.IdentityApiTest testConstructorsIdentityCredentialException CtsIdentityTestCases]', 1), ('[android.security.identity.cts.IdentityApiTest testConstructorsInvalidReaderSignatureException CtsIdentityTestCases]', 1), ('[android.security.identity.cts.IdentityApiTest testConstructorsInvalidRequestMessageException CtsIdentityTestCases]', 1), ('[android.security.identity.cts.IdentityApiTest testConstructorsMessageDecryptionException CtsIdentityTestCases]', 1), ('[android.security.identity.cts.IdentityApiTest testConstructorsNoAuthenticationKeyAvailableException CtsIdentityTestCases]', 1), ('[android.security.identity.cts.IdentityApiTest testConstructorsSessionTranscriptMismatchException CtsIdentityTestCases]', 1), ('[android.security.identity.cts.IdentityApiTest testConstructorsUnknownAuthenticationKeyException CtsIdentityTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testCreateShortcutResultIntent_defaultLauncher CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testCreateShortcutResultIntent_defaultChanges CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testCreateShortcutResultIntent_noDefault CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testIntentSenderNotCreatedForWrongActivity CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testCorrectIntentSenderCreated CtsShortcutManagerTestCases]', 1), ('[android.util.proto.cts.ProtoOutputStreamBytesTest testBadFieldIds CtsProtoTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testClearColorFilter CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testCopyBounds CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testCreateFromPath CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testCreateFromIncomplete CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testCreateFromStream CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testCreateFromStream2 CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testCreateFromResourceStream1 CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testCreateFromResourceStream2 CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testImageIntrinsicScaledForDensity CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testImageIntrinsicScaledForDensityWithBitmapOptions CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testCreateFromXml CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testCreateFromXmlThemed CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testCreateFromXmlInner CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testCreateFromXmlInnerThemed CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testAccessBounds CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testAccessChangingConfigurations CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testGetConstantState CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testGetCurrent CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testGetIntrinsicHeight CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testGetIntrinsicWidth CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testAccessLevel CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testGetMinimumHeight CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testGetMinimumWidth CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testGetPadding CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testAccessState CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testGetTransparentRegion CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testInflate CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testInvalidateSelf CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testIsStateful CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testVisible CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testOnBoundsChange CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testOnLevelChange CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testOnStateChange CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testResolveOpacity CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testScheduleSelf CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testAccessCallback CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testSetColorFilter CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testSetDither CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testSetHotspotBounds CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testGetHotspotBounds CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testAccessLayoutDirection CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testOnLayoutDirectionChanged CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testSetFilterBitmap CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testIsFilterBitmap CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testUnscheduleSelf CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testMutate CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testDefaultOpticalInsetsIsNone CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testNoSetTintModeInfiniteLoop CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testPorterDuffTintWithUnsupportedBlendMode CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testPorterDuffTintWithSupportedBlendMode CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testBlendModeImplementationInvokedWithBlendMode CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testBlendModeImplementationInvokedWithPorterDuffMode CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testPorterDuffImplementationInvokedWithBlendMode CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testPorterDuffImplementationInvokedWithPorterDuffMode CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testNullPorterDuffReturnsDefaultBlendMode CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableTest testNullBlendModeReturnsDefaultPorterDuffMode CtsGraphicsTestCases]', 1), ('[android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest testMasterSyncAutomatically_whenOn_isRestored None]', 1), ('[android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest testMasterSyncAutomatically_whenOff_isRestored None]', 1), ('[android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest testIsSyncableChanged_ifTurnOnSyncEnabled None]', 1), ('[android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest testIsSyncableIsZero_ifTurnOffSyncEnabled None]', 1), ('[android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest testIsSyncableIsOne_ifTurnOffSyncEnabled None]', 1), ('[com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest testCannotBind_implicitIntent None]', 1), ('[com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest testCannotBind_notResolvableIntent None]', 1), ('[com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest testCrossProfileCall_getUserHandle None]', 1), ('[test.java.com.android.queryable.queries.SerializableQueryHelperTest isTrue None]', 1), ('[test.java.com.android.queryable.queries.SerializableQueryHelperTest matches_isEqualTo_meetsRestriction_returnsTrue None]', 1), ('[test.java.com.android.queryable.queries.SerializableQueryHelperTest matches_isEqualTo_doesNotMeetRestriction_returnsFalse None]', 1)]"
"2.5.1  Hardware"	"7.3.3"	"A-3-1"	"7.3.3/A-3-1"	"07030300.650301"	"""[7.3.3/A-3-1] MUST determine location the very first time      the GPS/GNSS receiver is turned on or after 4+ days within 60 seconds. *    ["""	""	""	"GPS GNSS"	""	""	""	""	"[('android.location.cts.fine.LocationManagerFineTest', 25), ('android.location.cts.gnss.GnssNavigationMessageTest', 8), ('android.location.cts.coarse.LocationManagerCoarseTest', 7), ('android.location.cts.gnss.GnssLocationRateChangeTest', 7), ('android.location.cts.none.GnssAntennaInfoTest', 7), ('android.location.cts.gnss.GnssPseudorangeVerificationTest', 6), ('android.location.cts.gnss.GnssMeasurementRegistrationTest', 6), ('android.location.cts.fine.GnssClockTest', 6), ('android.location.cts.none.GnssMeasurementTest', 6), ('android.location.cts.privileged.GnssMeasurementRegistrationTest', 6), ('android.location.cts.none.GnssStatusTest', 6), ('android.location.cts.privileged.GnssMeasurementTest', 6), ('android.location.cts.none.GnssMeasurementRequestTest', 5), ('android.location.cts.privileged.GnssMeasurementRequestTest', 5), ('android.location.cts.gnss.GnssStatusTest', 5), ('android.location.cts.gnss.GnssLocationUpdateIntervalTest', 5), ('com.android.server.cts.device.statsdatom.AtomTests', 5), ('android.location.cts.gnss.GnssLocationValuesTest', 5), ('android.location.cts.gnss.GnssMeasurementsConstellationTest', 4), ('android.cts.statsdatom.gnss.GnssStatsTests', 4), ('android.location.cts.privileged.GnssMeasurementValuesTest', 4), ('android.location.cts.gnss.GnssMeasurementValuesTest', 4), ('android.location.cts.gnss.GnssMeasurementWhenNoLocationTest', 4), ('android.location.cts.gnss.GnssNavigationMessageRegistrationTest', 4), ('android.location.cts.privileged.GnssCapabilitiesTest', 4), ('android.location.cts.privileged.GnssLocationValuesTest', 3), ('android.location.cts.gnss.GnssTtffTests', 3), ('android.location.cts.fine.LocationProviderBaseTest', 3), ('android.location.cts.none.GnssMeasurementsEventTest', 3), ('android.media.cts.ExifInterfaceTest', 3), ('android.location.cts.gnss.GnssAntennaInfoTest', 3), ('android.hardware.camera2.cts.DngCreatorTest', 3), ('android.telephony.cts.CarrierConfigManagerTest', 2), ('android.cts.statsdatom.statsd.UidAtomTests', 2), ('android.cts.statsdatom.gnss.GnssPowerStatsTests', 2), ('android.webkit.cts.GeolocationTest', 1), ('android.provider.cts.media.MediaStore_Video_MediaTest', 1), ('android.dumpsys.cts.ProcessStatsDumpsysTest', 1), ('android.hardware.camera2.cts.StaticMetadataTest', 1), ('android.telephony.cts.ServiceStateTest', 1), ('android.provider.cts.media.MediaStore_Images_MediaTest', 1), ('android.app.cts.SystemFeaturesTest', 1), ('android.scopedstorage.cts.device.RedactUriDeviceTest', 1), ('android.hardware.cts.CameraTest', 1), ('android.hardware.camera2.cts.CaptureResultTest', 1), ('android.hardware.camera2.cts.StillCaptureTest', 1), ('android.permission.cts.FileSystemPermissionTest', 1)]"	"[('setUp', 67), ('tearDown', 47), ('getContext', 28), ('getInstrumentation', 15), ('getUiAutomation', 12), ('getApplicationContext', 4), ('getSimpleName', 3), ('getThumbnailRange', 3), ('Builder', 2), ('build', 2), ('initiate_getCurrentPosition', 2), ('trim', 2), ('hasThumbnail', 2), ('getThumbnailBytes', 2), ('getThumbnailBitmap', 2), ('getPackageManager', 1), ('fail', 1), ('hasTelephony', 1), ('gotLocation', 1), ('errorDenied', 1), ('errorUnavailable', 1), ('errorTimeout', 1), ('getMediaDirString', 1), ('recycle', 1), ('getWidth', 1), ('getHeight', 1), ('getThumbnail', 1), ('clearContext', 1)]"	"[('CtsLocationGnssTestCases', 64), ('CtsLocationFineTestCases', 34), ('CtsLocationPrivilegedTestCases', 28), ('CtsLocationNoneTestCases', 27), ('CtsStatsdAtomHostTestCases', 8), ('CtsLocationCoarseTestCases', 7), ('CtsCameraTestCases', 7), ('CtsTelephonyTestCases', 3), ('CtsMediaTestCases', 3), ('CtsProviderTestCases', 2), ('CtsWebkitTestCases', 1), ('CtsDumpsysHostTestCases', 1), ('CtsAppTestCases', 1), ('CtsPermissionTestCases', 1)]"	""	""	""	""	"android.location.cts.privileged.GnssCapabilitiesTest"	"tearDown"	"CtsLocationPrivilegedTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/location/location_fine/src/android/location/cts/fine/LocationManagerFineTest.java', 25), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssNavigationMessageTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/location/location_coarse/src/android/location/cts/coarse/LocationManagerCoarseTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssLocationRateChangeTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/location/location_none/src/android/location/cts/none/GnssAntennaInfoTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssPseudorangeVerificationTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssMeasurementRegistrationTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/location/location_fine/src/android/location/cts/fine/GnssClockTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/location/location_none/src/android/location/cts/none/GnssMeasurementTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRegistrationTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/location/location_none/src/android/location/cts/none/GnssStatusTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/location/location_none/src/android/location/cts/none/GnssMeasurementRequestTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRequestTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssStatusTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssLocationUpdateIntervalTest.java', 5), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/AtomTests.java', 5), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssLocationValuesTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssMeasurementsConstellationTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/gnss/GnssStatsTests.java', 4), ('/home/gpoor/cts-12-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementValuesTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssMeasurementValuesTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssMeasurementWhenNoLocationTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssNavigationMessageRegistrationTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssCapabilitiesTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssLocationValuesTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssTtffTests.java', 3), ('/home/gpoor/cts-12-source/cts/tests/location/location_fine/src/android/location/cts/fine/LocationProviderBaseTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/location/location_none/src/android/location/cts/none/GnssMeasurementsEventTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/ExifInterfaceTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssAntennaInfoTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/DngCreatorTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CarrierConfigManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/statsd/UidAtomTests.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/gnss/GnssPowerStatsTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/GeolocationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Video_MediaTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/ProcessStatsDumpsysTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/StaticMetadataTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/ServiceStateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Images_MediaTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/device/src/android/scopedstorage/cts/device/RedactUriDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/cts/CameraTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/StillCaptureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/FileSystemPermissionTest.java', 1)]"	"[('(23,GNSS,/android/location/cts/none/GnssMeasurementRequestTest.java)', 1), ('(29,GNSS,/android/location/cts/gnss/GnssMeasurementsConstellationTest.java)', 1), ('(10,GPS,/android/location/cts/gnss/GnssMeasurementsConstellationTest.java)', 1), ('(18,GNSS,/android/location/cts/privileged/GnssLocationValuesTest.java)', 1), ('(2,GPS,/android/location/cts/privileged/GnssLocationValuesTest.java)', 1), ('(23,GNSS,/android/location/cts/privileged/GnssMeasurementRequestTest.java)', 1), ('(39,GNSS,/android/location/cts/gnss/GnssStatusTest.java)', 1), ('(4,GPS,/android/location/cts/gnss/GnssStatusTest.java)', 1), ('(13,GNSS,/android/location/cts/gnss/GnssTtffTests.java)', 1), ('(2,GPS,/android/location/cts/gnss/GnssTtffTests.java)', 1), ('(8,GPS,/android/telephony/cts/CarrierConfigManagerTest.java)', 1), ('(3,GPS,/android/location/cts/fine/LocationProviderBaseTest.java)', 1), ('(31,GNSS,/android/location/cts/none/GnssMeasurementsEventTest.java)', 1), ('(1,GPS,/android/webkit/cts/GeolocationTest.java)', 1), ('(85,GPS,/android/media/cts/ExifInterfaceTest.java)', 1), ('(8,GNSS,/android/cts/statsdatom/gnss/GnssStatsTests.java)', 1), ('(4,GPS,/android/cts/statsdatom/gnss/GnssStatsTests.java)', 1), ('(3,GNSS,/android/location/cts/coarse/LocationManagerCoarseTest.java)', 1), ('(14,GPS,/android/location/cts/coarse/LocationManagerCoarseTest.java)', 1), ('(55,GNSS,/android/location/cts/gnss/GnssPseudorangeVerificationTest.java)', 1), ('(5,GPS,/android/location/cts/gnss/GnssPseudorangeVerificationTest.java)', 1), ('(41,GNSS,/android/location/cts/gnss/GnssMeasurementRegistrationTest.java)', 1), ('(12,GPS,/android/location/cts/gnss/GnssMeasurementRegistrationTest.java)', 1), ('(19,GNSS,/android/location/cts/fine/GnssClockTest.java)', 1), ('(2,GPS,/android/location/cts/fine/GnssClockTest.java)', 1), ('(23,GNSS,/android/location/cts/none/GnssMeasurementTest.java)', 1), ('(47,GNSS,/android/location/cts/gnss/GnssNavigationMessageTest.java)', 1), ('(7,GPS,/android/location/cts/gnss/GnssNavigationMessageTest.java)', 1), ('(2,GPS,/android/provider/cts/media/MediaStore_Video_MediaTest.java)', 1), ('(5,GPS,/android/dumpsys/cts/ProcessStatsDumpsysTest.java)', 1), ('(1,GPS,/android/hardware/camera2/cts/StaticMetadataTest.java)', 1), ('(1,GPS,/android/telephony/cts/ServiceStateTest.java)', 1), ('(2,GPS,/android/provider/cts/media/MediaStore_Images_MediaTest.java)', 1), ('(3,GPS,/android/app/cts/SystemFeaturesTest.java)', 1), ('(2,GPS,/android/scopedstorage/cts/device/RedactUriDeviceTest.java)', 1), ('(30,GNSS,/android/location/cts/privileged/GnssMeasurementValuesTest.java)', 1), ('(4,GPS,/android/location/cts/privileged/GnssMeasurementValuesTest.java)', 1), ('(42,GNSS,/android/location/cts/fine/LocationManagerFineTest.java)', 1), ('(34,GPS,/android/location/cts/fine/LocationManagerFineTest.java)', 1), ('(13,GNSS,/android/location/cts/gnss/GnssLocationUpdateIntervalTest.java)', 1), ('(7,GPS,/android/location/cts/gnss/GnssLocationUpdateIntervalTest.java)', 1), ('(11,GNSS,/android/location/cts/gnss/GnssLocationRateChangeTest.java)', 1), ('(7,GPS,/android/location/cts/gnss/GnssLocationRateChangeTest.java)', 1), ('(49,GNSS,/android/location/cts/gnss/GnssMeasurementValuesTest.java)', 1), ('(6,GPS,/android/location/cts/gnss/GnssMeasurementValuesTest.java)', 1), ('(38,GPS,/android/hardware/cts/CameraTest.java)', 1), ('(2,GPS,/android/hardware/camera2/cts/CaptureResultTest.java)', 1), ('(32,GNSS,/android/location/cts/gnss/GnssAntennaInfoTest.java)', 1), ('(2,GPS,/android/location/cts/gnss/GnssAntennaInfoTest.java)', 1), ('(17,GNSS,/com/android/server/cts/device/statsdatom/AtomTests.java)', 1), ('(9,GPS,/com/android/server/cts/device/statsdatom/AtomTests.java)', 1), ('(2,GPS,/android/hardware/camera2/cts/StillCaptureTest.java)', 1), ('(22,GPS,/android/hardware/camera2/cts/DngCreatorTest.java)', 1), ('(14,GPS,/android/cts/statsdatom/statsd/UidAtomTests.java)', 1), ('(67,GNSS,/android/location/cts/none/GnssAntennaInfoTest.java)', 1), ('(33,GNSS,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(12,GPS,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(5,GPS,/android/permission/cts/FileSystemPermissionTest.java)', 1), ('(48,GNSS,/android/location/cts/gnss/GnssMeasurementWhenNoLocationTest.java)', 1), ('(24,GPS,/android/location/cts/gnss/GnssMeasurementWhenNoLocationTest.java)', 1), ('(44,GNSS,/android/location/cts/gnss/GnssNavigationMessageRegistrationTest.java)', 1), ('(14,GPS,/android/location/cts/gnss/GnssNavigationMessageRegistrationTest.java)', 1), ('(20,GNSS,/android/cts/statsdatom/gnss/GnssPowerStatsTests.java)', 1), ('(51,GNSS,/android/location/cts/none/GnssStatusTest.java)', 1), ('(3,GPS,/android/location/cts/none/GnssStatusTest.java)', 1), ('(18,GNSS,/android/location/cts/privileged/GnssMeasurementTest.java)', 1), ('(14,GNSS,/android/location/cts/gnss/GnssLocationValuesTest.java)', 1), ('(3,GPS,/android/location/cts/gnss/GnssLocationValuesTest.java)', 1), ('(40,GNSS,/android/location/cts/privileged/GnssCapabilitiesTest.java)', 1)]"	"[('([1:/android/location/cts/coarse/LocationManagerCoarseTest.java]:[GPS]:[1]:method_text:[Random));            assertThat(capture.getNextLocation(TIMEOUT_MS)).isNull();        }    }   ])', 2), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[GPS]:[1]:method_text:[null!"");        } catch (IllegalArgumentException e) {            // expected        }    }   ])', 2), ('([2:/android/location/cts/gnss/GnssLocationRateChangeTest.java]:[GNSS]:[2]:method_text:[te machine layers, ensuring Location output remains responsive     * after all is done.     */   ])', 2), ('([2:/android/location/cts/gnss/GnssLocationRateChangeTest.java]:[GPS]:[2]:method_text:[te machine layers, ensuring Location output remains responsive     * after all is done.     */   ])', 2), ('([7:/android/location/cts/none/GnssMeasurementRequestTest.java]:[GNSS]:[7]:method_text:[Builder();        builder.setFullTracking(fullTracking);        return builder.build();    }   ])', 1), ('([4:/android/location/cts/none/GnssMeasurementRequestTest.java]:[GNSS]:[4]:method_text:[2 = getTestGnssMeasurementRequest(false);        assertFalse(request2.isFullTracking());    }   ])', 1), ('([2:/android/location/cts/none/GnssMeasurementRequestTest.java]:[GNSS]:[2]:method_text:[getTestGnssMeasurementRequest(true);        assertEquals(request.describeContents(), 0);    }   ])', 1), ('([4:/android/location/cts/none/GnssMeasurementRequestTest.java]:[GNSS]:[4]:method_text:[mentRequest.CREATOR.createFromParcel(parcel);        assertEquals(request, fromParcel);    }   ])', 1), ('([6:/android/location/cts/none/GnssMeasurementRequestTest.java]:[GNSS]:[6]:method_text:[lse);        assertEquals(request1, request2);        assertNotEquals(request3, request2);    }}])', 1), ('([17:/android/location/cts/gnss/GnssMeasurementsConstellationTest.java]:[GNSS]:[17]:method_text:[        super.tearDown();    }    /**     * Test Gnss multi constellation supported.     */   ])', 1), ('([12:/android/location/cts/gnss/GnssMeasurementsConstellationTest.java]:[GNSS]:[12]:method_text:[                    isExpectedConstellationType);        }        softAssert.assertAll();    }}])', 1), ('([2:/android/location/cts/gnss/GnssMeasurementsConstellationTest.java]:[GPS]:[2]:method_text:[        super.tearDown();    }    /**     * Test Gnss multi constellation supported.     */   ])', 1), ('([8:/android/location/cts/gnss/GnssMeasurementsConstellationTest.java]:[GPS]:[8]:method_text:[                    isExpectedConstellationType);        }        softAssert.assertAll();    }}])', 1), (""([6:/android/location/cts/privileged/GnssLocationValuesTest.java]:[GNSS]:[6]:method_text:[* 2. Get low-power GNSS locations.     * 3. Check whether all fields' value make sense.     */   ])"", 1), ('([12:/android/location/cts/privileged/GnssLocationValuesTest.java]:[GNSS]:[12]:method_text:[ m/s"",                    location.getSpeed() >= 0 && location.getSpeed() <= 5);        }    }}])', 1), ('([2:/android/location/cts/privileged/GnssLocationValuesTest.java]:[GPS]:[2]:method_text:[ m/s"",                    location.getSpeed() >= 0 && location.getSpeed() <= 5);        }    }}])', 1), ('([3:/android/location/cts/privileged/GnssMeasurementRequestTest.java]:[GNSS]:[3]:method_text:[tion()                .getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([4:/android/location/cts/privileged/GnssMeasurementRequestTest.java]:[GNSS]:[4]:method_text:[urementRequest(false);        assertFalse(request2.isCorrelationVectorOutputsEnabled());    }   ])', 1), ('([2:/android/location/cts/privileged/GnssMeasurementRequestTest.java]:[GNSS]:[2]:method_text:[getTestGnssMeasurementRequest(true);        assertEquals(request.describeContents(), 0);    }   ])', 1), ('([4:/android/location/cts/privileged/GnssMeasurementRequestTest.java]:[GNSS]:[4]:method_text:[mentRequest.CREATOR.createFromParcel(parcel);        assertEquals(request, fromParcel);    }   ])', 1), ('([10:/android/location/cts/privileged/GnssMeasurementRequestTest.java]:[GNSS]:[10]:method_text:[etCorrelationVectorOutputsEnabled(correlationVectorOutputs);        return builder.build();    }}])', 1), ('([7:/android/location/cts/gnss/GnssStatusTest.java]:[GNSS]:[7]:method_text:[tionManager(getContext());  }  /**   * Tests that one can listen for {@link GnssStatus}.   */ ])', 1), ('([18:/android/location/cts/gnss/GnssStatusTest.java]:[GNSS]:[18]:method_text:[   success);    softAssert.assertAll();  }  /**   * Tests values of {@link GnssStatus}.   */ ])', 1), ('([14:/android/location/cts/gnss/GnssStatusTest.java]:[GNSS]:[14]:method_text:[ "" + status.hasEphemerisData(i));      Log.i(TAG, ""usedInFix: "" + status.usedInFix(i));    }  }}])', 1), ('([2:/android/location/cts/gnss/GnssStatusTest.java]:[GPS]:[2]:method_text:[   success);    softAssert.assertAll();  }  /**   * Tests values of {@link GnssStatus}.   */ ])', 1), ('([2:/android/location/cts/gnss/GnssStatusTest.java]:[GPS]:[2]:method_text:[ "" + status.hasEphemerisData(i));      Log.i(TAG, ""usedInFix: "" + status.usedInFix(i));    }  }}])', 1), ('([5:/android/location/cts/gnss/GnssTtffTests.java]:[GNSS]:[5]:method_text:[  @AppModeFull(reason = ""permission ACCESS_LOCATION_EXTRA_COMMANDS not available to instant apps"") ])', 1), ('([8:/android/location/cts/gnss/GnssTtffTests.java]:[GNSS]:[8]:method_text:[        + "" . In current test, TTFF value is: "" + ttffTimeMillis, ttffTimeMillis < threshold);  }}])', 1), ('([2:/android/location/cts/gnss/GnssTtffTests.java]:[GPS]:[2]:method_text:[        + "" . In current test, TTFF value is: "" + ttffTimeMillis, ttffTimeMillis < threshold);  }}])', 1), ('([7:/android/telephony/cts/CarrierConfigManagerTest.java]:[GPS]:[7]:method_text:[E_BOOL.startsWith(                                CarrierConfigManager.Gps.KEY_PREFIX));    }   ])', 1), ('([1:/android/telephony/cts/CarrierConfigManagerTest.java]:[GPS]:[1]:method_text:[     assertFalse(config.containsKey(CarrierConfigManager.Gps.KEY_SUPL_ES_STRING));        }    }}])', 1), ('([1:/android/location/cts/fine/LocationProviderBaseTest.java]:[GPS]:[1]:method_text:[IES, mMock);        mLocationProvider.asProvider().setLocationProviderManager(mManager);    }   ])', 1), ('([1:/android/location/cts/fine/LocationProviderBaseTest.java]:[GPS]:[1]:method_text:[onProvider.reportLocation(location);        verify(mManager).onReportLocation(expected);    }   ])', 1), ('([1:/android/location/cts/fine/LocationProviderBaseTest.java]:[GPS]:[1]:method_text:[rovider.reportLocations(locations);        verify(mManager).onReportLocations(expected);    }   ])', 1), ('([5:/android/location/cts/none/GnssMeasurementsEventTest.java]:[GNSS]:[5]:method_text:[ort java.util.Iterator;@RunWith(AndroidJUnit4.class)public class GnssMeasurementsEventTest {   ])', 1), ('([9:/android/location/cts/none/GnssMeasurementsEventTest.java]:[GNSS]:[9]:method_text:[lock, new GnssMeasurement[] {m1, m2});        assertEquals(0, event.describeContents());    }   ])', 1), ('([17:/android/location/cts/none/GnssMeasurementsEventTest.java]:[GNSS]:[17]:method_text:[rement newM2 = iterator.next();        assertEquals(43999, newM2.getReceivedSvTimeNanos());    }}])', 1), ('([1:/android/webkit/cts/GeolocationTest.java]:[GPS]:[1]:method_text:[ept, mRetain);        }    }    // Test loading a page and accepting the domain for one load   ])', 1), ('([56:/android/media/cts/ExifInterfaceTest.java]:[GPS]:[56]:method_text:[         .detectUnbufferedIo()                .penaltyDeath()                .build());    }   ])', 1), ('([1:/android/media/cts/ExifInterfaceTest.java]:[GPS]:[1]:method_text:[riginalValue, exif.getAttribute(ExifInterface.TAG_DATETIME));        imageFile.delete();    }   ])', 1), ('([28:/android/media/cts/ExifInterfaceTest.java]:[GPS]:[28]:method_text:[Comment, exif.getAttribute(ExifInterface.TAG_USER_COMMENT));        imageFile.delete();    }   ])', 1), ('([2:/android/cts/statsdatom/gnss/GnssStatsTests.java]:[GNSS]:[2]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ])', 1), ('([6:/android/cts/statsdatom/gnss/GnssStatsTests.java]:[GNSS]:[6]:method_text:[ttle_package_whitelist %s"",                        origWhitelist));            }        }    }}])', 1), ('([2:/android/cts/statsdatom/gnss/GnssStatsTests.java]:[GPS]:[2]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ])', 1), ('([2:/android/cts/statsdatom/gnss/GnssStatsTests.java]:[GPS]:[2]:method_text:[ttle_package_whitelist %s"",                        origWhitelist));            }        }    }}])', 1), ('([3:/android/location/cts/coarse/LocationManagerCoarseTest.java]:[GNSS]:[3]:method_text:[  return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_LOCATION_GPS);    }}])', 1), ('([1:/android/location/cts/coarse/LocationManagerCoarseTest.java]:[GPS]:[1]:method_text:[ockLocationProvider(InstrumentationRegistry.getInstrumentation(),                false);    }   ])', 1), ('([1:/android/location/cts/coarse/LocationManagerCoarseTest.java]:[GPS]:[1]:method_text:[t(capture.getNextLocation(TIMEOUT_MS)).isNearby(loc, mMaxCoarseFudgeDistanceM);        }    }   ])', 1), ('([3:/android/location/cts/coarse/LocationManagerCoarseTest.java]:[GPS]:[3]:method_text:[tains(GPS_PROVIDER));        }        assertTrue(providers.contains(PASSIVE_PROVIDER));    }   ])', 1), ('([7:/android/location/cts/coarse/LocationManagerCoarseTest.java]:[GPS]:[7]:method_text:[  return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_LOCATION_GPS);    }}])', 1), ('([15:/android/location/cts/gnss/GnssPseudorangeVerificationTest.java]:[GNSS]:[15]:method_text:[d.   * This tests uses actual data retrieved from Gnss HAL.   */  @CddTest(requirement=""7.3.3"") ])', 1), ('([34:/android/location/cts/gnss/GnssPseudorangeVerificationTest.java]:[GNSS]:[34]:method_text:[instant mode"")    @RequiresDevice  // emulated devices do not support real measurements so far.   ])', 1), ('([6:/android/location/cts/gnss/GnssPseudorangeVerificationTest.java]:[GNSS]:[6]:method_text:[         + LOW_ENOUGH_VELOCITY_UNCERTAINTY_MPS,                someLocationsHaveLowVelUnc);    }}])', 1), ('([2:/android/location/cts/gnss/GnssPseudorangeVerificationTest.java]:[GPS]:[2]:method_text:[d.   * This tests uses actual data retrieved from Gnss HAL.   */  @CddTest(requirement=""7.3.3"") ])', 1), ('([1:/android/location/cts/gnss/GnssPseudorangeVerificationTest.java]:[GPS]:[1]:method_text:[instant mode"")    @RequiresDevice  // emulated devices do not support real measurements so far.   ])', 1), ('([2:/android/location/cts/gnss/GnssPseudorangeVerificationTest.java]:[GPS]:[2]:method_text:[         + LOW_ENOUGH_VELOCITY_UNCERTAINTY_MPS,                someLocationsHaveLowVelUnc);    }}])', 1), ('([24:/android/location/cts/gnss/GnssMeasurementRegistrationTest.java]:[GNSS]:[24]:method_text:[   }        super.tearDown();    }    /**     * Test GPS measurements registration.     */   ])', 1), ('([4:/android/location/cts/gnss/GnssMeasurementRegistrationTest.java]:[GNSS]:[4]:method_text:[();    }    /**     * Test GPS measurements registration with full tracking enabled.     */   ])', 1), ('([13:/android/location/cts/gnss/GnssMeasurementRegistrationTest.java]:[GNSS]:[13]:method_text:[          + ""reported."",                events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([2:/android/location/cts/gnss/GnssMeasurementRegistrationTest.java]:[GPS]:[2]:method_text:[   }        super.tearDown();    }    /**     * Test GPS measurements registration.     */   ])', 1), ('([4:/android/location/cts/gnss/GnssMeasurementRegistrationTest.java]:[GPS]:[4]:method_text:[();    }    /**     * Test GPS measurements registration with full tracking enabled.     */   ])', 1), ('([6:/android/location/cts/gnss/GnssMeasurementRegistrationTest.java]:[GPS]:[6]:method_text:[          + ""reported."",                events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([3:/android/location/cts/fine/GnssClockTest.java]:[GNSS]:[3]:method_text:[droidJUnit4.class)public class GnssClockTest {    private static final double DELTA = 0.001;   ])', 1), ('([4:/android/location/cts/fine/GnssClockTest.java]:[GNSS]:[4]:method_text:[R.createFromParcel(parcel);        verifyTestValues(newClock);        parcel.recycle();    }   ])', 1), ('([2:/android/location/cts/fine/GnssClockTest.java]:[GNSS]:[2]:method_text:[blic void testReset() {        GnssClock clock = new GnssClock();        clock.reset();    }   ])', 1), ('([4:/android/location/cts/fine/GnssClockTest.java]:[GNSS]:[4]:method_text:[Clock = new GnssClock();        newClock.set(clock);        verifyTestValues(newClock);    }   ])', 1), ('([6:/android/location/cts/fine/GnssClockTest.java]:[GNSS]:[6]:method_text:[8, clock.getTimeNanos());        assertEquals(9.0, clock.getTimeUncertaintyNanos(), DELTA);    }}])', 1), ('([2:/android/location/cts/fine/GnssClockTest.java]:[GPS]:[2]:method_text:[8, clock.getTimeNanos());        assertEquals(9.0, clock.getTimeUncertaintyNanos(), DELTA);    }}])', 1), ('([3:/android/location/cts/none/GnssMeasurementTest.java]:[GNSS]:[3]:method_text:[Unit4.class)public class GnssMeasurementTest {    private static final double DELTA = 0.001;   ])', 1), ('([2:/android/location/cts/none/GnssMeasurementTest.java]:[GNSS]:[2]:method_text:[urement = new GnssMeasurement();        assertEquals(0, measurement.describeContents());    }   ])', 1), ('([2:/android/location/cts/none/GnssMeasurementTest.java]:[GNSS]:[2]:method_text:[        GnssMeasurement measurement = new GnssMeasurement();        measurement.reset();    }   ])', 1), ('([4:/android/location/cts/none/GnssMeasurementTest.java]:[GNSS]:[4]:method_text:[teFromParcel(parcel);        verifyTestValues(newMeasurement);        parcel.recycle();    }   ])', 1), ('([4:/android/location/cts/none/GnssMeasurementTest.java]:[GNSS]:[4]:method_text:[ent();        newMeasurement.set(measurement);        verifyTestValues(newMeasurement);    }   ])', 1), ('([8:/android/location/cts/none/GnssMeasurementTest.java]:[GNSS]:[8]:method_text:[measurement.getSvid());        assertEquals(16.0, measurement.getTimeOffsetNanos(), DELTA);    }}])', 1), ('([18:/android/location/cts/gnss/GnssNavigationMessageTest.java]:[GNSS]:[18]:method_text:[Navigation messages received.     * This tests uses actual data retrieved from GPS HAL.     */   ])', 1), ('([17:/android/location/cts/gnss/GnssNavigationMessageTest.java]:[GNSS]:[17]:method_text:[tSvid());        assertEquals(GnssNavigationMessage.TYPE_GPS_L2CNAV, message.getType());    }   ])', 1), ('([2:/android/location/cts/gnss/GnssNavigationMessageTest.java]:[GNSS]:[2]:method_text:[igationMessage message = new GnssNavigationMessage();        message.describeContents();    }   ])', 1), ('([4:/android/location/cts/gnss/GnssNavigationMessageTest.java]:[GNSS]:[4]:method_text:[createFromParcel(parcel);        verifyTestValues(newMessage);        parcel.recycle();    }   ])', 1), ('([2:/android/location/cts/gnss/GnssNavigationMessageTest.java]:[GNSS]:[2]:method_text:[    GnssNavigationMessage message = new GnssNavigationMessage();        message.reset();    }   ])', 1), ('([4:/android/location/cts/gnss/GnssNavigationMessageTest.java]:[GNSS]:[4]:method_text:[sNavigationMessage();        newMessage.set(message);        verifyTestValues(newMessage);    }}])', 1), ('([3:/android/location/cts/gnss/GnssNavigationMessageTest.java]:[GPS]:[3]:method_text:[Navigation messages received.     * This tests uses actual data retrieved from GPS HAL.     */   ])', 1), ('([4:/android/location/cts/gnss/GnssNavigationMessageTest.java]:[GPS]:[4]:method_text:[tSvid());        assertEquals(GnssNavigationMessage.TYPE_GPS_L2CNAV, message.getType());    }   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Video_MediaTest.java]:[GPS]:[2]:method_text:[that we can place both media and subtitles together in the same     * location on disk.     */   ])', 1), ('([5:/android/dumpsys/cts/ProcessStatsDumpsysTest.java]:[GPS]:[5]:method_text:[            + "".ProcStatsHelperServiceSub,"").replace(""$U"", uid),//                lines));    }}])', 1), ('([1:/android/hardware/camera2/cts/StaticMetadataTest.java]:[GPS]:[1]:method_text:[eraId, capabilityName));            }        }    }    /**     * Test lens facing.     */   ])', 1), ('([1:/android/telephony/cts/ServiceStateTest.java]:[GPS]:[1]:method_text:[iceState.addNetworkRegistrationInfo(nri);        assertTrue(serviceState.isSearching());    }   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_MediaTest.java]:[GPS]:[2]:method_text:[ssertTrue(""Invalid display name "" + displayName, displayName.endsWith("".jpg""));        }    }   ])', 1), ('([3:/android/app/cts/SystemFeaturesTest.java]:[GPS]:[3]:method_text:[else {            assertNotAvailable(PackageManager.FEATURE_LOCATION_NETWORK);        }    }   ])', 1), ('([2:/android/scopedstorage/cts/device/RedactUriDeviceTest.java]:[GPS]:[2]:method_text:[have to external storage            FileUtils.copy(in, out);        }        return img;    }}])', 1), ('([15:/android/location/cts/privileged/GnssMeasurementValuesTest.java]:[GNSS]:[15]:method_text:[or the measurements received.     * This tests uses actual data retrieved from GPS HAL.     */   ])', 1), ('([15:/android/location/cts/privileged/GnssMeasurementValuesTest.java]:[GNSS]:[15]:method_text:[(measurement, softAssert, timeInNs);            }        }        softAssert.assertAll();    }}])', 1), ('([2:/android/location/cts/privileged/GnssMeasurementValuesTest.java]:[GPS]:[2]:method_text:[or the measurements received.     * This tests uses actual data retrieved from GPS HAL.     */   ])', 1), ('([2:/android/location/cts/privileged/GnssMeasurementValuesTest.java]:[GPS]:[2]:method_text:[(measurement, softAssert, timeInNs);            }        }        softAssert.assertAll();    }}])', 1), ('([9:/android/location/cts/fine/LocationManagerFineTest.java]:[GNSS]:[9]:method_text:[ LocationUtils.registerMockLocationProvider(getInstrumentation(),                false);    }   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[GNSS]:[1]:method_text:[ure, 1);            assertThat(capture.getNextFlush(TIMEOUT_MS)).isEqualTo(1);        }    }   ])', 1), ('([2:/android/location/cts/fine/LocationManagerFineTest.java]:[GNSS]:[2]:method_text:[sProvider(GPS_PROVIDER));        assertThat(mManager.getGnssCapabilities()).isNotNull();    }   ])', 1), ('([2:/android/location/cts/fine/LocationManagerFineTest.java]:[GNSS]:[2]:method_text:[assumeTrue(mManager.hasProvider(GPS_PROVIDER));        mManager.getGnssYearOfHardware();    }   ])', 1), ('([6:/android/location/cts/fine/LocationManagerFineTest.java]:[GNSS]:[6]:method_text:[   return;        }        assertThat(gnssHardwareModelName.length()).isGreaterThan(3);    }   ])', 1), ('([4:/android/location/cts/fine/LocationManagerFineTest.java]:[GNSS]:[4]:method_text:[      } else {            assertThat(mManager.getGnssAntennaInfos()).isNull();        }    }   ])', 1), ('([5:/android/location/cts/fine/LocationManagerFineTest.java]:[GNSS]:[5]:method_text:[ngleThreadExecutor(), callback);        mManager.unregisterGnssStatusCallback(callback);    }   ])', 1), ('([5:/android/location/cts/fine/LocationManagerFineTest.java]:[GNSS]:[5]:method_text:[t(status).isEqualTo(GnssMeasurementsEvent.Callback.STATUS_READY);            }        }    }   ])', 1), ('([3:/android/location/cts/fine/LocationManagerFineTest.java]:[GNSS]:[3]:method_text:[t)) {            mManager.registerAntennaInfoListener(Runnable::run, capture);        }    }   ])', 1), ('([5:/android/location/cts/fine/LocationManagerFineTest.java]:[GNSS]:[5]:method_text:[        mManager.setTestProviderEnabled(TEST_PROVIDER, true);    }    @Ignore(""b/181693958"")   ])', 1), ('([2:/android/location/cts/fine/LocationManagerFineTest.java]:[GPS]:[2]:method_text:[ LocationUtils.registerMockLocationProvider(getInstrumentation(),                false);    }   ])', 1), ('([7:/android/location/cts/fine/LocationManagerFineTest.java]:[GPS]:[7]:method_text:[s.enableBatterySaver(false);            BatteryUtils.runDumpsysBatteryReset();        }    }   ])', 1), ('([7:/android/location/cts/fine/LocationManagerFineTest.java]:[GPS]:[7]:method_text:[hat(location.distanceTo(networkLocation)).isGreaterThan(1000.0f);            }        }    }   ])', 1), ('([3:/android/location/cts/fine/LocationManagerFineTest.java]:[GPS]:[3]:method_text:[ure, 1);            assertThat(capture.getNextFlush(TIMEOUT_MS)).isEqualTo(1);        }    }   ])', 1), ('([2:/android/location/cts/fine/LocationManagerFineTest.java]:[GPS]:[2]:method_text:[IVE_PROVIDER)).isTrue();        assertThat(providers.contains(TEST_PROVIDER)).isFalse();    }   ])', 1), ('([2:/android/location/cts/fine/LocationManagerFineTest.java]:[GPS]:[2]:method_text:[        assertThat(mManager.getBestProvider(criteria, true)).isNotEqualTo(TEST_PROVIDER);    }   ])', 1), ('([3:/android/location/cts/fine/LocationManagerFineTest.java]:[GPS]:[3]:method_text:[null!"");        } catch (IllegalArgumentException e) {            // expected        }    }   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[GPS]:[1]:method_text:[sProvider(GPS_PROVIDER));        assertThat(mManager.getGnssCapabilities()).isNotNull();    }   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[GPS]:[1]:method_text:[assumeTrue(mManager.hasProvider(GPS_PROVIDER));        mManager.getGnssYearOfHardware();    }   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[GPS]:[1]:method_text:[   return;        }        assertThat(gnssHardwareModelName.length()).isGreaterThan(3);    }   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[GPS]:[1]:method_text:[      } else {            assertThat(mManager.getGnssAntennaInfos()).isNull();        }    }   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[GPS]:[1]:method_text:[t(status).isEqualTo(GnssMeasurementsEvent.Callback.STATUS_READY);            }        }    }   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[GPS]:[1]:method_text:[        mManager.setTestProviderEnabled(TEST_PROVIDER, true);    }    @Ignore(""b/181693958"")   ])', 1), ('([6:/android/location/cts/gnss/GnssLocationUpdateIntervalTest.java]:[GNSS]:[6]:method_text:[   }    /**     * Tests the location update intervals are within expected thresholds.     */   ])', 1), ('([7:/android/location/cts/gnss/GnssLocationUpdateIntervalTest.java]:[GNSS]:[7]:method_text:[lator += diff * diff;        }        return Math.sqrt(accumulator / (deltas.size() - 1));    }}])', 1), ('([1:/android/location/cts/gnss/GnssLocationUpdateIntervalTest.java]:[GPS]:[1]:method_text:[   }    /**     * Tests the location update intervals are within expected thresholds.     */   ])', 1), ('([1:/android/location/cts/gnss/GnssLocationUpdateIntervalTest.java]:[GPS]:[1]:method_text:[ /**     * Tests the time differences between GPS time and elapsedRealtime are bounded.     */   ])', 1), ('([5:/android/location/cts/gnss/GnssLocationUpdateIntervalTest.java]:[GPS]:[5]:method_text:[lator += diff * diff;        }        return Math.sqrt(accumulator / (deltas.size() - 1));    }}])', 1), ('([7:/android/location/cts/gnss/GnssLocationRateChangeTest.java]:[GNSS]:[7]:method_text:[emains responsive after all is done.     */    @AppModeFull(reason = ""Flaky in instant mode."")   ])', 1), ('([2:/android/location/cts/gnss/GnssLocationRateChangeTest.java]:[GPS]:[2]:method_text:[emains responsive after all is done.     */    @AppModeFull(reason = ""Flaky in instant mode."")   ])', 1), ('([1:/android/location/cts/gnss/GnssLocationRateChangeTest.java]:[GPS]:[1]:method_text:[                mLocationListenerAfterRateChanges.await());        softAssert.assertAll();    }}])', 1), ('([19:/android/location/cts/gnss/GnssMeasurementValuesTest.java]:[GNSS]:[19]:method_text:[or the measurements received.     * This tests uses actual data retrieved from GPS HAL.     */   ])', 1), ('([30:/android/location/cts/gnss/GnssMeasurementValuesTest.java]:[GNSS]:[30]:method_text:[() ? ""None"" : svDiff),                svDiff.size() <= 1);        softAssert.assertAll();    }}])', 1), ('([2:/android/location/cts/gnss/GnssMeasurementValuesTest.java]:[GPS]:[2]:method_text:[or the measurements received.     * This tests uses actual data retrieved from GPS HAL.     */   ])', 1), ('([4:/android/location/cts/gnss/GnssMeasurementValuesTest.java]:[GPS]:[4]:method_text:[() ? ""None"" : svDiff),                svDiff.size() <= 1);        softAssert.assertAll();    }}])', 1), ('([38:/android/hardware/cts/CameraTest.java]:[GPS]:[38]:method_text:[assertNull(exif.getAttribute(ExifInterface.TAG_GPS_PROCESSING_METHOD));    }    @UiThreadTest   ])', 1), ('([2:/android/hardware/camera2/cts/CaptureResultTest.java]:[GPS]:[2]:method_text:[* End generated code     *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/}])', 1), ('([7:/android/location/cts/gnss/GnssAntennaInfoTest.java]:[GNSS]:[7]:method_text:[rrier frequency reported from {@link GnssAntennaInfo} can be found in     * GnssStatus.     */   ])', 1), ('([25:/android/location/cts/gnss/GnssAntennaInfoTest.java]:[GNSS]:[25]:method_text:[ors.""                        + "" Consider retrying test outdoors."").that(success).isTrue();    }}])', 1), ('([2:/android/location/cts/gnss/GnssAntennaInfoTest.java]:[GPS]:[2]:method_text:[ors.""                        + "" Consider retrying test outdoors."").that(success).isTrue();    }}])', 1), ('([1:/com/android/server/cts/device/statsdatom/AtomTests.java]:[GNSS]:[1]:method_text:[VICE, 117);        APP_OPS_ENUM_MAP.put(AppOpsManager.OPSTR_ESTABLISH_VPN_MANAGER, 118);    }   ])', 1), ('([16:/com/android/server/cts/device/statsdatom/AtomTests.java]:[GNSS]:[16]:method_text:[pdates(locListener);        locManager.unregisterGnssStatusCallback(gnssStatusCallback);    }   ])', 1), ('([1:/com/android/server/cts/device/statsdatom/AtomTests.java]:[GPS]:[1]:method_text:[VICE, 117);        APP_OPS_ENUM_MAP.put(AppOpsManager.OPSTR_ESTABLISH_VPN_MANAGER, 118);    }   ])', 1), ('([4:/com/android/server/cts/device/statsdatom/AtomTests.java]:[GPS]:[4]:method_text:[           }        }.execute();        waitForReceiver(context, 59_000, latch, null);    }   ])', 1), ('([4:/com/android/server/cts/device/statsdatom/AtomTests.java]:[GPS]:[4]:method_text:[pdates(locListener);        locManager.unregisterGnssStatusCallback(gnssStatusCallback);    }   ])', 1), ('([2:/android/hardware/camera2/cts/StillCaptureTest.java]:[GPS]:[2]:method_text:[sRegionsSupported && mStaticInfo.hasFocuser();        }        return isRegionsSupported;    }}])', 1), ('([8:/android/hardware/camera2/cts/DngCreatorTest.java]:[GPS]:[8]:method_text:[captured for the first reported camera device to be saved to an output file.     * </p>     */   ])', 1), ('([2:/android/hardware/camera2/cts/DngCreatorTest.java]:[GPS]:[2]:method_text:[captured for the first reported camera device to be saved to an output file.     * </p>     */   ])', 1), ('([12:/android/hardware/camera2/cts/DngCreatorTest.java]:[GPS]:[12]:method_text:[s test     * using:     * adb shell setprop log.tag.DngCreatorTest VERBOSE     * </p>     */   ])', 1), ('([3:/android/cts/statsdatom/statsd/UidAtomTests.java]:[GPS]:[3]:method_text:[atoms logged     * from an isolated process are seen as coming from their host process.     */   ])', 1), ('([11:/android/cts/statsdatom/statsd/UidAtomTests.java]:[GPS]:[11]:method_text:[e_package_whitelist %s"",                        origWhitelist));            }        }    }   ])', 1), ('([5:/android/location/cts/none/GnssAntennaInfoTest.java]:[GNSS]:[5]:method_text:[ {2.13, 4.30, 1.36, 3.86, 1.02, 2.96},            {3.22, 3.95, 3.75, 1.73, 1.91, 4.93}    };   ])', 1), ('([4:/android/location/cts/none/GnssAntennaInfoTest.java]:[GNSS]:[4]:method_text:[teFullTestGnssAntennaInfo();        assertEquals(0, gnssAntennaInfo.describeContents());    }   ])', 1), ('([4:/android/location/cts/none/GnssAntennaInfoTest.java]:[GNSS]:[4]:method_text:[artialTestGnssAntennaInfo();        assertEquals(0, gnssAntennaInfo.describeContents());    }   ])', 1), ('([9:/android/location/cts/none/GnssAntennaInfoTest.java]:[GNSS]:[9]:method_text:[ verifyFullGnssAntennaInfoValuesAndGetters(newGnssAntennaInfo);        parcel.recycle();    }   ])', 1), ('([9:/android/location/cts/none/GnssAntennaInfoTest.java]:[GNSS]:[9]:method_text:[rifyPartialGnssAntennaInfoValuesAndGetters(newGnssAntennaInfo);        parcel.recycle();    }   ])', 1), ('([6:/android/location/cts/none/GnssAntennaInfoTest.java]:[GNSS]:[6]:method_text:[estGnssAntennaInfo();        verifyFullGnssAntennaInfoValuesAndGetters(gnssAntennaInfo);    }   ])', 1), ('([30:/android/location/cts/none/GnssAntennaInfoTest.java]:[GNSS]:[30]:method_text:[ION_UNCERTAINTIES,                signalGainCorrections.getCorrectionUncertaintiesArray());    }}])', 1), ('([18:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[GNSS]:[18]:method_text:[();    }    /**     * Test GPS measurements registration with full tracking enabled.     */   ])', 1), ('([5:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[GNSS]:[5]:method_text:[   /**     * Test GPS measurements registration with correlation vector outputs enabled     */   ])', 1), ('([10:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[GNSS]:[10]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([3:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[GPS]:[3]:method_text:[();    }    /**     * Test GPS measurements registration with full tracking enabled.     */   ])', 1), ('([4:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[GPS]:[4]:method_text:[   /**     * Test GPS measurements registration with correlation vector outputs enabled     */   ])', 1), ('([5:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[GPS]:[5]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([5:/android/permission/cts/FileSystemPermissionTest.java]:[GPS]:[5]:method_text:[here looking for bad directories.  There has to be     * a better way...     */    @LargeTest   ])', 1), ('([26:/android/location/cts/gnss/GnssMeasurementWhenNoLocationTest.java]:[GNSS]:[26]:method_text:[ocation fix.     */    @AppModeFull(reason = ""Requires use of extra LocationManager commands"")   ])', 1), ('([22:/android/location/cts/gnss/GnssMeasurementWhenNoLocationTest.java]:[GNSS]:[22]:method_text:[ {                TestUtils.setAirplaneModeOn(getContext(), false);            }        }    }}])', 1), ('([7:/android/location/cts/gnss/GnssMeasurementWhenNoLocationTest.java]:[GPS]:[7]:method_text:[ocation fix.     */    @AppModeFull(reason = ""Requires use of extra LocationManager commands"")   ])', 1), ('([17:/android/location/cts/gnss/GnssMeasurementWhenNoLocationTest.java]:[GPS]:[17]:method_text:[ {                TestUtils.setAirplaneModeOn(getContext(), false);            }        }    }}])', 1), ('([25:/android/location/cts/gnss/GnssNavigationMessageRegistrationTest.java]:[GNSS]:[25]:method_text:[on purposes.     * It only performs sanity checks for the Navigation messages received.     */   ])', 1), ('([19:/android/location/cts/gnss/GnssNavigationMessageRegistrationTest.java]:[GNSS]:[19]:method_text:[ were not received without registering for location"" +                        "" updates."");    }}])', 1), ('([6:/android/location/cts/gnss/GnssNavigationMessageRegistrationTest.java]:[GPS]:[6]:method_text:[on purposes.     * It only performs sanity checks for the Navigation messages received.     */   ])', 1), ('([8:/android/location/cts/gnss/GnssNavigationMessageRegistrationTest.java]:[GPS]:[8]:method_text:[ were not received without registering for location"" +                        "" updates."");    }}])', 1), ('([2:/android/cts/statsdatom/gnss/GnssPowerStatsTests.java]:[GNSS]:[2]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ])', 1), ('([18:/android/cts/statsdatom/gnss/GnssPowerStatsTests.java]:[GNSS]:[18]:method_text:[etVendorSpecificPowerModesEnergyMicroJoule9())                    .isAtLeast(0L);        }    }}])', 1), ('([2:/android/location/cts/none/GnssStatusTest.java]:[GNSS]:[2]:method_text:[droidJUnit4.class)public class GnssStatusTest {    private static final float DELTA = 1e-3f;   ])', 1), ('([4:/android/location/cts/none/GnssStatusTest.java]:[GNSS]:[4]:method_text:[       GnssStatus gnssStatus = getTestGnssStatus();        verifyTestValues(gnssStatus);    }   ])', 1), ('([4:/android/location/cts/none/GnssStatusTest.java]:[GNSS]:[4]:method_text:[GnssStatus status = builder.build();        assertEquals(0, status.getSatelliteCount());    }   ])', 1), ('([41:/android/location/cts/none/GnssStatusTest.java]:[GNSS]:[41]:method_text:[andCn0DbHz(0), DELTA);        assertEquals(26.9f, gnssStatus.getBasebandCn0DbHz(1), DELTA);    }}])', 1), ('([1:/android/location/cts/none/GnssStatusTest.java]:[GPS]:[1]:method_text:[GnssStatus status = builder.build();        assertEquals(0, status.getSatelliteCount());    }   ])', 1), ('([2:/android/location/cts/none/GnssStatusTest.java]:[GPS]:[2]:method_text:[andCn0DbHz(0), DELTA);        assertEquals(26.9f, gnssStatus.getBasebandCn0DbHz(1), DELTA);    }}])', 1), ('([2:/android/location/cts/privileged/GnssMeasurementTest.java]:[GNSS]:[2]:method_text:[ction<CorrelationVector> TEST_CORRELATION_VECTORS =            createTestCorrelationVectors();   ])', 1), ('([2:/android/location/cts/privileged/GnssMeasurementTest.java]:[GNSS]:[2]:method_text:[urement = new GnssMeasurement();        assertEquals(0, measurement.describeContents());    }   ])', 1), ('([2:/android/location/cts/privileged/GnssMeasurementTest.java]:[GNSS]:[2]:method_text:[        GnssMeasurement measurement = new GnssMeasurement();        measurement.reset();    }   ])', 1), ('([4:/android/location/cts/privileged/GnssMeasurementTest.java]:[GNSS]:[4]:method_text:[teFromParcel(parcel);        verifyTestValues(newMeasurement);        parcel.recycle();    }   ])', 1), ('([4:/android/location/cts/privileged/GnssMeasurementTest.java]:[GNSS]:[4]:method_text:[ent();        newMeasurement.set(measurement);        verifyTestValues(newMeasurement);    }   ])', 1), ('([4:/android/location/cts/privileged/GnssMeasurementTest.java]:[GNSS]:[4]:method_text:[ 3000, 0, 0, 1000, 0})                        .build());        return correlationVectors;    }}])', 1), ('([5:/android/location/cts/gnss/GnssLocationValuesTest.java]:[GNSS]:[5]:method_text:[e accuracy fields are new O-features,   * only test them if the hardware is later than 2017   */ ])', 1), (""([4:/android/location/cts/gnss/GnssLocationValuesTest.java]:[GNSS]:[4]:method_text:[*   * Get the location info from the device   * check whether all fields' value make sense   */ ])"", 1), ('([5:/android/location/cts/gnss/GnssLocationValuesTest.java]:[GNSS]:[5]:method_text:[range of [0, 5] m/s"",          location.getSpeed() >= 0 && location.getSpeed() <= 5);    }  }}])', 1), (""([1:/android/location/cts/gnss/GnssLocationValuesTest.java]:[GPS]:[1]:method_text:[*   * Get the location info from the device   * check whether all fields' value make sense   */ ])"", 1), ('([2:/android/location/cts/gnss/GnssLocationValuesTest.java]:[GPS]:[2]:method_text:[range of [0, 5] m/s"",          location.getSpeed() >= 0 && location.getSpeed() <= 5);    }  }}])', 1), ('([3:/android/location/cts/privileged/GnssCapabilitiesTest.java]:[GNSS]:[3]:method_text:[l, and verifying setters. */@RunWith(AndroidJUnit4.class)public class GnssCapabilitiesTest {   ])', 1), ('([6:/android/location/cts/privileged/GnssCapabilitiesTest.java]:[GNSS]:[6]:method_text:[s.Builder(getTestGnssCapabilities()).build();        verifyTestValues(gnssCapabilities);    }   ])', 1), ('([4:/android/location/cts/privileged/GnssCapabilitiesTest.java]:[GNSS]:[4]:method_text:[gnssCapabilities = getTestGnssCapabilities();        verifyTestValues(gnssCapabilities);    }   ])', 1), ('([27:/android/location/cts/privileged/GnssCapabilitiesTest.java]:[GNSS]:[27]:method_text:[ies.hasSatelliteBlocklist());        assertEquals(true, gnssCapabilities.hasSatellitePvt());    }])', 1)]"	""	""	"[('GNSS', 104), ('GPS', 89)]"	"[('[android.location.cts.gnss.GnssMeasurementsConstellationTest testGnssMultiConstellationSupported CtsLocationGnssTestCases]', 2), ('[android.location.cts.privileged.GnssLocationValuesTest testLowPowerModeGnssLocation CtsLocationPrivilegedTestCases]', 2), ('[android.location.cts.gnss.GnssStatusTest testGnssStatusChanges CtsLocationGnssTestCases]', 2), ('[android.location.cts.gnss.GnssStatusTest testGnssStatusValues CtsLocationGnssTestCases]', 2), ('[android.location.cts.gnss.GnssTtffTests testTtffWithNetwork CtsLocationGnssTestCases]', 2), ('[android.cts.statsdatom.gnss.GnssStatsTests isNotNull CtsStatsdAtomHostTestCases]', 2), ('[android.cts.statsdatom.gnss.GnssStatsTests testGnssStats CtsStatsdAtomHostTestCases]', 2), ('[android.location.cts.coarse.LocationManagerCoarseTest testGnssProvidedClock CtsLocationCoarseTestCases]', 2), ('[android.location.cts.gnss.GnssPseudorangeVerificationTest testPseudorangeValue CtsLocationGnssTestCases]', 2), ('[android.location.cts.gnss.GnssPseudorangeVerificationTest testPseudoPosition CtsLocationGnssTestCases]', 2), ('[android.location.cts.gnss.GnssMeasurementRegistrationTest testGnssMeasurementRegistration CtsLocationGnssTestCases]', 2), ('[android.location.cts.gnss.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableFullTracking CtsLocationGnssTestCases]', 2), ('[android.location.cts.fine.GnssClockTest testHasAndReset CtsLocationFineTestCases]', 2), ('[android.location.cts.gnss.GnssNavigationMessageTest testGnssNavigationMessageMandatoryFieldRanges CtsLocationGnssTestCases]', 2), ('[android.location.cts.privileged.GnssMeasurementValuesTest dropShellPermissionIdentity CtsLocationPrivilegedTestCases]', 2), ('[android.location.cts.privileged.GnssMeasurementValuesTest testListenForGnssMeasurements CtsLocationPrivilegedTestCases]', 2), ('[android.location.cts.fine.LocationManagerFineTest currentTimeMillis CtsLocationFineTestCases]', 2), ('[android.location.cts.fine.LocationManagerFineTest testRequestFlush_Gnss CtsLocationFineTestCases]', 2), ('[android.location.cts.fine.LocationManagerFineTest testGetGnssCapabilities CtsLocationFineTestCases]', 2), ('[android.location.cts.fine.LocationManagerFineTest testGetGnssYearOfHardware CtsLocationFineTestCases]', 2), ('[android.location.cts.fine.LocationManagerFineTest testGetGnssHardwareModelName CtsLocationFineTestCases]', 2), ('[android.location.cts.fine.LocationManagerFineTest testGetGnssAntennaInfos CtsLocationFineTestCases]', 2), ('[android.location.cts.fine.LocationManagerFineTest testRegisterGnssMeasurementsCallback CtsLocationFineTestCases]', 2), ('[android.location.cts.fine.LocationManagerFineTest testRegisterGnssNavigationMessageCallback CtsLocationFineTestCases]', 2), ('[android.location.cts.gnss.GnssLocationUpdateIntervalTest testTimeDriftBetweenUtcTimeAndElapsedRealtime CtsLocationGnssTestCases]', 2), ('[android.location.cts.gnss.GnssLocationRateChangeTest testVariedRates CtsLocationGnssTestCases]', 2), ('[android.location.cts.gnss.GnssLocationRateChangeTest testVariedRatesOnOff CtsLocationGnssTestCases]', 2), ('[android.location.cts.gnss.GnssMeasurementValuesTest testListenForGnssMeasurements CtsLocationGnssTestCases]', 2), ('[android.location.cts.gnss.GnssAntennaInfoTest testGnssAntennaInfoValues CtsLocationGnssTestCases]', 2), ('[com.android.server.cts.device.statsdatom.AtomTests testGpsStatus None]', 2), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest dropShellPermissionIdentity CtsLocationPrivilegedTestCases]', 2), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableFullTracking CtsLocationPrivilegedTestCases]', 2), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableCorrelationOutputs CtsLocationPrivilegedTestCases]', 2), ('[android.location.cts.gnss.GnssMeasurementWhenNoLocationTest testGnssMeasurementWhenNoLocation CtsLocationGnssTestCases]', 2), ('[android.location.cts.gnss.GnssNavigationMessageRegistrationTest testGnssNavigationMessageRegistration CtsLocationGnssTestCases]', 2), ('[android.location.cts.none.GnssStatusTest testBuilder_ClearSatellites CtsLocationNoneTestCases]', 2), ('[android.location.cts.none.GnssStatusTest testRoundtrip CtsLocationNoneTestCases]', 2), ('[android.location.cts.gnss.GnssLocationValuesTest testAccuracyFields CtsLocationGnssTestCases]', 2), ('[android.location.cts.gnss.GnssLocationValuesTest testLocationRegularFields CtsLocationGnssTestCases]', 2), ('[android.location.cts.none.GnssMeasurementRequestTest testGetValues CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.GnssMeasurementRequestTest testDescribeContents CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.GnssMeasurementRequestTest testWriteToParcel CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.GnssMeasurementRequestTest testEquals CtsLocationNoneTestCases]', 1), ('[android.location.cts.privileged.GnssLocationValuesTest dropShellPermissionIdentity CtsLocationPrivilegedTestCases]', 1), ('[android.location.cts.privileged.GnssMeasurementRequestTest dropShellPermissionIdentity CtsLocationPrivilegedTestCases]', 1), ('[android.location.cts.privileged.GnssMeasurementRequestTest testGetValues CtsLocationPrivilegedTestCases]', 1), ('[android.location.cts.privileged.GnssMeasurementRequestTest testDescribeContents CtsLocationPrivilegedTestCases]', 1), ('[android.location.cts.privileged.GnssMeasurementRequestTest testWriteToParcel CtsLocationPrivilegedTestCases]', 1), ('[android.location.cts.privileged.GnssMeasurementRequestTest testEquals CtsLocationPrivilegedTestCases]', 1), ('[android.telephony.cts.CarrierConfigManagerTest isDataCapable CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CarrierConfigManagerTest testGetConfigByComponentForSubId CtsTelephonyTestCases]', 1), ('[android.location.cts.fine.LocationProviderBaseTest currentTimeMillis CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.LocationProviderBaseTest testReportLocation_stripExtras CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.LocationProviderBaseTest testReportLocations_stripExtras CtsLocationFineTestCases]', 1), ('[android.location.cts.none.GnssMeasurementsEventTest testDescribeContents CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.GnssMeasurementsEventTest testWriteToParcel CtsLocationNoneTestCases]', 1), ('[android.webkit.cts.GeolocationTest GeolocationTest CtsWebkitTestCases]', 1), ('[android.media.cts.ExifInterfaceTest isThumbnailCompressed CtsMediaTestCases]', 1), ('[android.media.cts.ExifInterfaceTest testGetSetDateTime CtsMediaTestCases]', 1), ('[android.media.cts.ExifInterfaceTest testSetAttribute CtsMediaTestCases]', 1), ('[android.location.cts.coarse.LocationManagerCoarseTest currentTimeMillis CtsLocationCoarseTestCases]', 1), ('[android.location.cts.coarse.LocationManagerCoarseTest testRequestLocationUpdates CtsLocationCoarseTestCases]', 1), ('[android.location.cts.coarse.LocationManagerCoarseTest testRequestLocationUpdates_Passive CtsLocationCoarseTestCases]', 1), ('[android.location.cts.coarse.LocationManagerCoarseTest testRequestLocationUpdates_PendingIntent CtsLocationCoarseTestCases]', 1), ('[android.location.cts.coarse.LocationManagerCoarseTest testGetProviders CtsLocationCoarseTestCases]', 1), ('[android.location.cts.fine.GnssClockTest testWriteToParcel CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.GnssClockTest testReset CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.GnssClockTest testSet CtsLocationFineTestCases]', 1), ('[android.location.cts.none.GnssMeasurementTest testDescribeContents CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.GnssMeasurementTest testReset CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.GnssMeasurementTest testWriteToParcel CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.GnssMeasurementTest testSet CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.GnssMeasurementTest testSetReset CtsLocationNoneTestCases]', 1), ('[android.location.cts.gnss.GnssNavigationMessageTest testDescribeContents CtsLocationGnssTestCases]', 1), ('[android.location.cts.gnss.GnssNavigationMessageTest testWriteToParcel CtsLocationGnssTestCases]', 1), ('[android.location.cts.gnss.GnssNavigationMessageTest testReset CtsLocationGnssTestCases]', 1), ('[android.location.cts.gnss.GnssNavigationMessageTest testSet CtsLocationGnssTestCases]', 1), ('[android.provider.cts.media.MediaStore_Video_MediaTest testMetadata CtsProviderTestCases]', 1), ('[android.dumpsys.cts.ProcessStatsDumpsysTest testProcstatsOutput CtsDumpsysHostTestCases]', 1), ('[android.hardware.camera2.cts.StaticMetadataTest testCapabilities CtsCameraTestCases]', 1), ('[android.telephony.cts.ServiceStateTest testIsSearchingPs CtsTelephonyTestCases]', 1), ('[android.provider.cts.media.MediaStore_Images_MediaTest testMetadata CtsProviderTestCases]', 1), ('[android.app.cts.SystemFeaturesTest testLocationFeatures CtsAppTestCases]', 1), ('[android.scopedstorage.cts.device.RedactUriDeviceTest testOpenOnRedactedUri_read None]', 1), ('[android.location.cts.fine.LocationManagerFineTest testRegisterGnssStatusCallback CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.LocationManagerFineTest testRegisterGnssAntennaInfoCallback CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.LocationManagerFineTest testRequestLocationUpdates_BatterySaver_GpsDisabledScreenOff CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.LocationManagerFineTest testRequestGpsUpdates_B9758659 CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.LocationManagerFineTest testRequestFlush CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.LocationManagerFineTest testRequestFlush_PendingIntent CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.LocationManagerFineTest testGetAllProviders CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.LocationManagerFineTest testGetBestProvider CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.LocationManagerFineTest testGetProvider CtsLocationFineTestCases]', 1), ('[android.location.cts.gnss.GnssLocationUpdateIntervalTest testLocationUpdatesAtVariousIntervals CtsLocationGnssTestCases]', 1), ('[android.location.cts.gnss.GnssLocationRateChangeTest testVariedRatesRepetitive CtsLocationGnssTestCases]', 1), ('[android.hardware.cts.CameraTest testJpegExif CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CaptureResultTest testResultTimestamps CtsCameraTestCases]', 1), ('[com.android.server.cts.device.statsdatom.AtomTests testGpsScan None]', 1), ('[android.hardware.camera2.cts.StillCaptureTest testFocalLengths CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.DngCreatorTest testSingleImageBasicMaximumResolution CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.DngCreatorTest testSingleImageThumbnail CtsCameraTestCases]', 1), ('[android.cts.statsdatom.statsd.UidAtomTests isNotNull CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.statsd.UidAtomTests testGpsScan CtsStatsdAtomHostTestCases]', 1), ('[android.location.cts.none.GnssAntennaInfoTest testFullAntennaInfoDescribeContents CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.GnssAntennaInfoTest testPartialAntennaInfoDescribeContents CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.GnssAntennaInfoTest testFullAntennaInfoWriteToParcel CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.GnssAntennaInfoTest testPartialAntennaInfoWriteToParcel CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.GnssAntennaInfoTest testCreateFullGnssAntennaInfoAndGetValues CtsLocationNoneTestCases]', 1), ('[android.location.cts.none.GnssAntennaInfoTest testCreatePartialGnssAntennaInfoAndGetValues CtsLocationNoneTestCases]', 1), ('[android.permission.cts.FileSystemPermissionTest testAllOtherDirectoriesNotWritable CtsPermissionTestCases]', 1), ('[android.cts.statsdatom.gnss.GnssPowerStatsTests isNotNull CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.gnss.GnssPowerStatsTests testGnssPowerStats CtsStatsdAtomHostTestCases]', 1), ('[android.location.cts.none.GnssStatusTest testGetValues CtsLocationNoneTestCases]', 1), ('[android.location.cts.privileged.GnssMeasurementTest createTestCorrelationVectors CtsLocationPrivilegedTestCases]', 1), ('[android.location.cts.privileged.GnssMeasurementTest testDescribeContents CtsLocationPrivilegedTestCases]', 1), ('[android.location.cts.privileged.GnssMeasurementTest testReset CtsLocationPrivilegedTestCases]', 1), ('[android.location.cts.privileged.GnssMeasurementTest testWriteToParcel CtsLocationPrivilegedTestCases]', 1), ('[android.location.cts.privileged.GnssMeasurementTest testSet CtsLocationPrivilegedTestCases]', 1), ('[android.location.cts.privileged.GnssMeasurementTest testSetReset CtsLocationPrivilegedTestCases]', 1), ('[android.location.cts.privileged.GnssCapabilitiesTest testBuilderWithGnssCapabilities CtsLocationPrivilegedTestCases]', 1), ('[android.location.cts.privileged.GnssCapabilitiesTest testGetValues CtsLocationPrivilegedTestCases]', 1), ('[android.location.cts.privileged.GnssCapabilitiesTest testWriteToParcel CtsLocationPrivilegedTestCases]', 1)]"
"9.8.9  Installed apps"	"9.8.9"	"C-0-1"	"9.8.9/C-0-1"	"09080900.670001"	"""C-0-1] MUST NOT expose to any app targeting API level 30 or above details     about any other installed app, unless the app is already able to see details     about the other installed app through the managed APIs. This includes but is     not limited to details exposed by any custom APIs added by the device     implementer, or accessible via the filesystem.  """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"7.3  Sensors"	"7.3"	"C-3-1"	"7.3/C-3-1"	"07030000.670301"	"""C-3-1] MUST set the resolution to 1 for the sensor and report the value     via the [`Sensor.getResolution()`](https://developer.android.com/reference/android/hardware/Sensor#getResolution%28%29)     API method.  If device implementations include a particular sensor type which supports [SensorAdditionalInfo#TYPE_VEC3_CALIBRATION](https://developer.android.com/reference/android/hardware/SensorAdditionalInfo#TYPE_VEC3_CALIBRATION) and the sensor is exposed to third-party developers, they:  """	""	""	"Sensor.getResolution getResolution() TYPE_VEC3_CALIBRATION"	""	""	""	""	"[('android.hardware.cts.SensorTest', 2), ('android.print.cts.PrintAttributesTest', 1), ('android.print.cts.InterfaceForAppsTest', 1), ('android.hardware.cts.SensorAdditionalInfoTest', 1), ('android.print.cts.PrintJobTest', 1), ('android.print.cts.PrinterCapabilitiesTest', 1)]"	"[('size', 4), ('getDefaults', 4), ('build', 3), ('getMock', 2), ('getSession', 2), ('toString', 2), ('getMediaSizes', 2), ('getResolutions', 2), ('Builder', 1), ('getPrinters', 1), ('changedPrintJobInfo', 1), ('advancedOption', 1), ('sanePrinterCapabilityInfos', 1), ('getService', 1), ('getCapabilities', 1), ('getMediaSize', 1), ('getResolution', 1), ('getColorModes', 1), ('getColorMode', 1), ('getDuplexModes', 1), ('getDuplexMode', 1), ('getMinMargins', 1)]"	"[('CtsPrintTestCases', 4), ('CtsSensorTestCases', 3)]"	""	""	""	""	"android.print.cts.PrinterCapabilitiesTest"	"getMinMargins"	"CtsPrintTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrintAttributesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/InterfaceForAppsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorAdditionalInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrintJobTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrinterCapabilitiesTest.java', 1)]"	"[('(8,getResolution(),/android/hardware/cts/SensorTest.java)', 1), ('(8,Sensor.getResolution,/android/hardware/cts/SensorTest.java)', 1), ('(2,getResolution(),/android/print/cts/PrintAttributesTest.java)', 1), ('(1,getResolution(),/android/print/cts/InterfaceForAppsTest.java)', 1), ('(2,TYPE_VEC3_CALIBRATION,/android/hardware/cts/SensorAdditionalInfoTest.java)', 1), ('(1,getResolution(),/android/print/cts/PrintJobTest.java)', 1), ('(1,getResolution(),/android/print/cts/PrinterCapabilitiesTest.java)', 1)]"	"[('([8:/android/hardware/cts/SensorTest.java]:[getResolution()]:[8]:method_text:[ sensor.getFifoReservedEventCount() == 0);        }    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([8:/android/hardware/cts/SensorTest.java]:[Sensor.getResolution]:[8]:method_text:[ sensor.getFifoReservedEventCount() == 0);        }    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([2:/android/print/cts/PrintAttributesTest.java]:[getResolution()]:[2]:method_text:[ibutes to the first selection.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/InterfaceForAppsTest.java]:[getResolution()]:[1]:method_text:[etCreationTime());        assertTrue(job.getInfo().getCreationTime() <= afterStart + 5000);    }}])', 1), ('([2:/android/hardware/cts/SensorAdditionalInfoTest.java]:[TYPE_VEC3_CALIBRATION]:[2]:method_text:[boolean vec3CalibrationDuplicate() {            return mVec3CalibrationDuplicate;        }    }}])', 1), ('([1:/android/print/cts/PrintJobTest.java]:[getResolution()]:[1]:method_text:[     if (!testSuccess[0]) {            throw new Exception(""Did not succeed"");        }    }   ])', 1), ('([1:/android/print/cts/PrinterCapabilitiesTest.java]:[getResolution()]:[1]:method_text:[     * of historical reasons.     *     * @throws Exception If anything is unexpected     */   ])', 1)]"	"https://developer.android.com"	""	"[('getResolution()', 5), ('Sensor.getResolution', 1), ('TYPE_VEC3_CALIBRATION', 1)]"	"[('[android.hardware.cts.SensorTest testBatchAndFlushWithMultipleSensors CtsSensorTestCases]', 2), ('[android.print.cts.PrintAttributesTest isEmpty CtsPrintTestCases]', 1), ('[android.print.cts.InterfaceForAppsTest currentTimeMillis CtsPrintTestCases]', 1), ('[android.hardware.cts.SensorAdditionalInfoTest testSensorAdditionalInfo CtsSensorTestCases]', 1), ('[android.print.cts.PrintJobTest createFirstMockPrinterDiscoverySessionCallbacks CtsPrintTestCases]', 1), ('[android.print.cts.PrinterCapabilitiesTest onPrinterDiscoverySessionCreateCalled CtsPrintTestCases]', 1)]"
"7.4.5.3  Captive Portals"	"7.4.5.3"	"C-1-5"	"7.4.5.3/C-1-5"	"07040503.670105"	"""C-1-5] MUST ensure that, while the user is logging in to a captive     portal, the default network used by applications (as returned by     [`ConnectivityManager.getActiveNetwork`](https://developer.android.com/reference/android/net/ConnectivityManager#getActiveNetwork%28%29),     [`ConnectivityManager.registerDefaultNetworkCallback`](https://developer.android.com/reference/android/net/ConnectivityManager#registerDefaultNetworkCallback%28android.net.ConnectivityManager.NetworkCallback%29),     and used by default by Java networking APIs such as java.net.Socket,     and native APIs such as connect()) is any other available network     that provides internet access, if available.  """	""	""	"ConnectivityManager.registerDefaultNetworkCallback java.net.Socket ConnectivityManager.getActiveNetwork android.net.ConnectivityManager.NetworkCallback connect()"	""	""	""	""	"[('android.telephony.ims.cts.SipDelegateManagerTest', 17), ('android.media.cts.MediaBrowserTest', 8), ('android.net.wifi.cts.WifiManagerTest', 6), ('android.app.cts.ActivityManagerProcessStateTest', 5), ('android.bluetooth.cts.HearingAidProfileTest', 5), ('android.media.cts.MediaScannerTest', 5), ('android.telecom.cts.RemoteConnectionTest', 4), ('android.telecom.cts.BackgroundCallAudioTest', 3), ('com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity', 3), ('android.bluetooth.cts.BluetoothLeAudioTest', 3), ('android.permission.cts.NoWifiStatePermissionTest', 3), ('android.telecom.cts.CallDiagnosticServiceTest', 2), ('android.car.cts.CarAppFocusManagerTest', 2), ('android.telephony.cts.CarrierMessagingServiceWrapperTest', 2), ('android.media.cts.MediaScannerConnectionTest', 2), ('com.android.cts.deviceowner.NetworkLoggingTest', 2), ('android.car.cts.CarTest', 2), ('android.net.wifi.cts.ConnectedNetworkScorerTest', 2), ('com.android.server.cts.device.statsdatom.AtomTests', 2), ('android.telecom.cts.HandoverTest', 2), ('android.quickaccesswallet.cts.QuickAccessWalletClientTest', 2), ('android.media.cts.NativeDecoderTest', 1), ('com.android.cts.deviceowner.proxy.PacProxyTest', 1), ('android.security.NetworkSecurityPolicyTestBase', 1), ('android.suspendapps.cts.DualSuspendTests', 1), ('android.net.wifi.cts.WifiNetworkSpecifierTest', 1), ('android.appsecurity.cts.listeningports.ListeningPortsTest', 1), ('android.media.cts.ConnectionStatus', 1), ('android.security.cts.StagefrightTest', 1), ('android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest', 1), ('com.android.cts.appwithdata.CreatePrivateDataTest', 1), ('android.telecom.cts.RemoteConferenceTest', 1), ('android.telecom.cts.ExtendedInCallServiceTest', 1), ('android.cts.statsdatom.wifi.WifiStatsTests', 1), ('android.keystore.cts.KeyPairGeneratorTest', 1), ('com.android.cts.deviceandprofileowner.NetworkLoggingTest', 1), ('android.media.cts.StreamingMediaPlayerTest', 1), ('com.android.cts.appaccessdata.AccessPrivateDataTest', 1), ('android.signature.cts.InterfaceChecker', 1), ('android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest', 1), ('android.media.cts.MediaPlayerFlakyNetworkTest', 1), ('android.security.net.config.cts.DownloadManagerTest', 1), ('android.net.wifi.cts.WifiLocationInfoTest', 1), ('android.telecom.cts.OutgoingCallTest', 1), ('android.graphics.cts.ColorSpaceTest', 1), ('android.media.cts.MediaSession2Test', 1), ('android.net.wifi.cts.WifiInfoTest', 1), ('android.os.cts.StrictModeTest', 1), ('com.android.cts.deviceandprofileowner.AlwaysOnVpnTest', 1), ('android.telecom.cts.CallDetailsTest', 1), ('com.android.cts.delegate.NetworkLoggingDelegateTest', 1), ('com.android.cts.delegate.WorkProfileNetworkLoggingDelegateTest', 1), ('android.suspendapps.cts.SuspendPackagesTest', 1), ('android.media.cts.MediaSession2ServiceTest', 1), ('android.telecom.cts.PhoneAccountSuggestionServiceTest', 1), ('android.net.wifi.cts.WifiNetworkSuggestionTest', 1), ('android.suspendapps.cts.DialogTests', 1), ('android.app.usage.cts.NetworkUsageStatsTest', 1), ('android.telecom.cts.VideoCallTest', 1), ('android.jvmti.cts.JvmtiAttachingHostTest', 1), ('android.net.cts.network.permission.UpdateStatsPermissionTest', 1), ('android.telephony.cts.SubscriptionManagerTest', 1), ('android.jdwptunnel.cts.JdwpTunnelTest', 1), ('android.net.wifi.cts.ScanResultTest', 1), ('android.telecom.cts.BasicInCallServiceTest', 1), ('android.os.cts.ParcelFileDescriptorTest', 1), ('android.net.wifi.cts.ConcurrencyTest', 1), ('android.media.cts.MediaBrowserServiceTest', 1), ('android.permission.cts.NoNetworkStatePermissionTest', 1), ('android.net.cts.network.permission.InternetPermissionTest', 1)]"	"[('setUp', 23), ('getInstrumentation', 16), ('tearDown', 15), ('getContext', 10), ('notify', 8), ('size', 6), ('getMediaDirString', 4), ('stream', 4), ('now', 4), ('setUpClass', 3), ('getAbsoluteClassName', 3), ('getAction', 3), ('countDown', 3), ('getTargetContext', 3), ('waitForPacDownload', 2), ('getMethods', 2), ('connect', 2), ('getPackageName', 2), ('getService', 2), ('getLastCall', 2), ('BroadcastReceiver', 2), ('getDevice', 2), ('moveToHomeScreen', 2), ('name', 2), ('findFirst', 2), ('trim', 2), ('toUpperCase', 1), ('toLowerCase', 1), ('startServer', 1), ('stopServer', 1), ('setPacURLAndWaitForDownload', 1), ('getPacURL', 1), ('printStackTrace', 1), ('getNotConnectedReason', 1), ('getActiveNetworkInfo', 1), ('getReason', 1), ('getArguments', 1), ('getMediumType', 1), ('reconnect', 1), ('getSpanTypeIdInternal', 1), ('eglReleaseThread', 1), ('getFilter', 1), ('getCurrentImeTouchRegion', 1), ('keySet', 1), ('getState', 1), ('checkQueued', 1), ('entrySet', 1), ('getKey', 1), ('getValue', 1), ('negate', 1), ('getDeclaredMethods', 1), ('getModifiers', 1), ('toGenericString', 1), ('getImplInterfaces', 1), ('releaseMediaPlayer', 1), ('releaseHttpServer', 1), ('clearQueue', 1), ('waitForCarrierConfigChanged', 1), ('getSipDelegateManager', 1), ('setDefaultSmsApp', 1), ('getUserSelectedOutgoingPhoneAccount', 1), ('getDefaultSubscriptionId', 1), ('getPackageManager', 1), ('StubConnectionCallback', 1), ('StubSubscriptionCallback', 1), ('StubItemCallback', 1), ('getCount', 1), ('getWho', 1), ('getNetworkType', 1), ('getTransportType', 1), ('getMetered', 1), ('getCurrentUser', 1), ('waitForAvailable', 1), ('virtualMachineManager', 1), ('attachingConnectors', 1), ('transport', 1), ('defaultArguments', 1), ('eventRequestManager', 1), ('suspend', 1), ('allClasses', 1), ('createClassPrepareRequest', 1), ('enable', 1), ('resume', 1), ('eventQueue', 1), ('remove', 1), ('request', 1), ('referenceType', 1), ('BitSet', 1), ('WifiP2pGroup', 1), ('MySync', 1), ('MyResponse', 1), ('getExternalMediaDirs', 1), ('getAbsolutePath', 1), ('cleanup', 1), ('Object', 1), ('ConnectionCallback', 1), ('onConnected', 1), ('SubscriptionCallback', 1), ('ItemCallback', 1), ('Runnable', 1), ('run', 1), ('Bundle', 1), ('myPid', 1), ('myUid', 1)]"	"[('CtsMediaTestCases', 21), ('CtsTelephonyTestCases', 20), ('CtsTelecomTestCases', 18), ('CtsWifiTestCases', 16), ('CtsBluetoothTestCases', 8), ('CtsAppTestCases', 5), ('CtsCarTestCases', 4), ('CtsPermissionTestCases', 4), ('CtsSuspendAppsTestCases', 3), ('CtsNetTestCases', 2), ('CtsQuickAccessWalletTestCases', 2), ('CtsSecurityTestCases', 1), ('CtsStatsdAtomHostTestCases', 1), ('CtsKeystoreTestCases', 1), ('CtsNetSecConfigDownloadManagerTestCases', 1), ('CtsGraphicsTestCases', 1), ('CtsUsageStatsTestCases', 1), ('CtsJvmtiAttachingHostTestCases', 1), ('CtsJdwpTunnelHostTestCases', 1)]"	""	""	""	""	"android.net.cts.network.permission.InternetPermissionTest"	"tearDown"	"CtsNetTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/SipDelegateManagerTest.java', 17), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaBrowserTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/HearingAidProfileTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaScannerTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/RemoteConnectionTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/BackgroundCallAudioTest.java', 3), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BluetoothLeAudioTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoWifiStatePermissionTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/CallDiagnosticServiceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarAppFocusManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CarrierMessagingServiceWrapperTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaScannerConnectionTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/NetworkLoggingTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/AtomTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/HandoverTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/quickaccesswallet/src/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/NativeDecoderTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/PacProxyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/netsecpolicy/src/android/security/NetworkSecurityPolicyTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/DualSuspendTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ListeningPortsApp/src/android/appsecurity/cts/listeningports/ListeningPortsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/common/src/android/media/cts/ConnectionStatus.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/StagefrightTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppWithData/src/com/android/cts/appwithdata/CreatePrivateDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/RemoteConferenceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/ExtendedInCallServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/wifi/WifiStatsTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyPairGeneratorTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/StreamingMediaPlayerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppAccessData/src/com/android/cts/appaccessdata/AccessPrivateDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/signature/lib/common/src/android/signature/cts/InterfaceChecker.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerFlakyNetworkTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/networksecurityconfig/networksecurityconfig-downloadmanager/src/android/security/net/config/cts/DownloadManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/OutgoingCallTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/ColorSpaceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaSession2Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/StrictModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/CallDetailsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/SuspendPackagesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaSession2ServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/PhoneAccountSuggestionServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/DialogTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/NetworkUsageStatsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/VideoCallTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/attaching/host/src/android/jvmti/cts/JvmtiAttachingHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/netpermission/updatestatspermission/src/android/net/cts/network/permission/UpdateStatsPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SubscriptionManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/jdwptunnel/src/android/jdwptunnel/cts/JdwpTunnelTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ScanResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/BasicInCallServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/ParcelFileDescriptorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConcurrencyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaBrowserServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoNetworkStatePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/netpermission/internetpermission/src/android/net/cts/network/permission/InternetPermissionTest.java', 1)]"	"[('(1,java.net.Socket,/android/media/cts/NativeDecoderTest.java)', 1), ('(1,java.net.Socket,/com/android/cts/deviceowner/proxy/PacProxyTest.java)', 1), ('(2,connect(),/android/security/NetworkSecurityPolicyTestBase.java)', 1), ('(25,connect(),/android/app/cts/ActivityManagerProcessStateTest.java)', 1), ('(1,connect(),/android/suspendapps/cts/DualSuspendTests.java)', 1), ('(1,android.net.ConnectivityManager.NetworkCallback,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(1,java.net.Socket,/android/appsecurity/cts/listeningports/ListeningPortsTest.java)', 1), ('(3,ConnectivityManager.getActiveNetwork,/android/media/cts/ConnectionStatus.java)', 1), ('(1,java.net.Socket,/android/security/cts/StagefrightTest.java)', 1), ('(1,connect(),/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(3,connect(),/android/telecom/cts/CallDiagnosticServiceTest.java)', 1), ('(7,connect(),/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(1,java.net.Socket,/com/android/cts/appwithdata/CreatePrivateDataTest.java)', 1), ('(1,connect(),/android/telecom/cts/RemoteConferenceTest.java)', 1), ('(1,connect(),/android/telecom/cts/ExtendedInCallServiceTest.java)', 1), ('(2,connect(),/android/car/cts/CarAppFocusManagerTest.java)', 1), ('(1,connect(),/android/cts/statsdatom/wifi/WifiStatsTests.java)', 1), ('(1,java.net.Socket,/android/keystore/cts/KeyPairGeneratorTest.java)', 1), ('(1,connect(),/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java)', 1), ('(1,java.net.Socket,/android/media/cts/StreamingMediaPlayerTest.java)', 1), ('(1,java.net.Socket,/com/android/cts/appaccessdata/AccessPrivateDataTest.java)', 1), ('(1,connect(),/android/signature/cts/InterfaceChecker.java)', 1), ('(1,connect(),/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java)', 1), ('(1,java.net.Socket,/android/media/cts/MediaPlayerFlakyNetworkTest.java)', 1), ('(18,connect(),/android/telephony/ims/cts/SipDelegateManagerTest.java)', 1), ('(1,java.net.Socket,/android/security/net/config/cts/DownloadManagerTest.java)', 1), ('(1,connect(),/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(1,connect(),/android/telecom/cts/OutgoingCallTest.java)', 1), ('(4,connect(),/android/telecom/cts/BackgroundCallAudioTest.java)', 1), ('(1,connect(),/android/graphics/cts/ColorSpaceTest.java)', 1), ('(1,connect(),/android/media/cts/MediaSession2Test.java)', 1), ('(1,connect(),/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(1,java.net.Socket,/android/os/cts/StrictModeTest.java)', 1), ('(1,java.net.Socket,/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java)', 1), ('(1,connect(),/android/telecom/cts/CallDetailsTest.java)', 1), ('(1,connect(),/com/android/cts/delegate/NetworkLoggingDelegateTest.java)', 1), ('(1,connect(),/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java)', 1), ('(1,connect(),/android/suspendapps/cts/SuspendPackagesTest.java)', 1), ('(1,connect(),/android/media/cts/MediaSession2ServiceTest.java)', 1), ('(1,connect(),/android/telecom/cts/PhoneAccountSuggestionServiceTest.java)', 1), ('(2,connect(),/android/telephony/cts/CarrierMessagingServiceWrapperTest.java)', 1), ('(4,connect(),/android/telecom/cts/RemoteConnectionTest.java)', 1), ('(1,connect(),/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(4,connect(),/android/media/cts/MediaScannerConnectionTest.java)', 1), ('(15,connect(),/android/media/cts/MediaBrowserTest.java)', 1), ('(1,java.net.Socket,/com/android/cts/deviceowner/NetworkLoggingTest.java)', 1), ('(1,connect(),/com/android/cts/deviceowner/NetworkLoggingTest.java)', 1), ('(1,connect(),/android/suspendapps/cts/DialogTests.java)', 1), ('(3,connect(),/android/car/cts/CarTest.java)', 1), ('(3,connect(),/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(2,connect(),/android/app/usage/cts/NetworkUsageStatsTest.java)', 1), ('(5,connect(),/com/android/server/cts/device/statsdatom/AtomTests.java)', 1), ('(1,connect(),/android/telecom/cts/VideoCallTest.java)', 1), ('(1,java.net.Socket,/android/jvmti/cts/JvmtiAttachingHostTest.java)', 1), ('(1,java.net.Socket,/android/net/cts/network/permission/UpdateStatsPermissionTest.java)', 1), ('(1,ConnectivityManager.getActiveNetwork,/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java)', 1), ('(1,android.net.ConnectivityManager.NetworkCallback,/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java)', 1), ('(5,connect(),/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java)', 1), ('(1,android.net.ConnectivityManager.NetworkCallback,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(7,connect(),/android/bluetooth/cts/HearingAidProfileTest.java)', 1), ('(1,java.net.Socket,/android/jdwptunnel/cts/JdwpTunnelTest.java)', 1), ('(1,connect(),/android/net/wifi/cts/ScanResultTest.java)', 1), ('(4,connect(),/android/bluetooth/cts/BluetoothLeAudioTest.java)', 1), ('(1,connect(),/android/telecom/cts/BasicInCallServiceTest.java)', 1), ('(1,java.net.Socket,/android/os/cts/ParcelFileDescriptorTest.java)', 1), ('(6,connect(),/android/permission/cts/NoWifiStatePermissionTest.java)', 1), ('(1,android.net.ConnectivityManager.NetworkCallback,/android/net/wifi/cts/ConcurrencyTest.java)', 1), ('(2,connect(),/android/telecom/cts/HandoverTest.java)', 1), ('(8,connect(),/android/media/cts/MediaScannerTest.java)', 1), ('(2,connect(),/android/media/cts/MediaBrowserServiceTest.java)', 1), ('(2,ConnectivityManager.getActiveNetwork,/android/permission/cts/NoNetworkStatePermissionTest.java)', 1), ('(3,connect(),/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java)', 1), ('(1,java.net.Socket,/android/net/cts/network/permission/InternetPermissionTest.java)', 1)]"	"[('([1:/android/telephony/ims/cts/SipDelegateManagerTest.java]:[connect()]:[1]:method_text:[ces.transport.getDelegates().size());        verifyUpdateRegistrationCalled(ifaces.reg);    }   ])', 13), ('([1:/android/telephony/ims/cts/SipDelegateManagerTest.java]:[connect()]:[1]:method_text:[       ifaces.delegateConn.verifyAllDenied(SipDelegateManager.DENIED_REASON_NOT_ALLOWED);    }   ])', 2), ('([1:/android/telecom/cts/BackgroundCallAudioTest.java]:[connect()]:[1]:method_text:[assertEquals(DisconnectCause.REJECTED, call.getDetails().getDisconnectCause().getCode());    }   ])', 2), ('([1:/android/telecom/cts/RemoteConnectionTest.java]:[connect()]:[1]:method_text:[onnectionService.tearDown();            CtsRemoteConnectionService.tearDown();        }    }   ])', 2), ('([1:/android/media/cts/NativeDecoderTest.java]:[java.net.Socket]:[1]:method_text:[     if (testsRun == 0) {            MediaUtils.skipTest(""no decoders found"");        }    }   ])', 1), ('([1:/com/android/cts/deviceowner/proxy/PacProxyTest.java]:[java.net.Socket]:[1]:method_text:[ the PAC file can be set and it downloads it   * from the local HTTP server we are hosting.   */ ])', 1), ('([2:/android/security/NetworkSecurityPolicyTestBase.java]:[connect()]:[2]:method_text:[l).build();        assertFalse(mHttpOnlyWebServer.wasResourceRequested(uri.toString()));    }   ])', 1), ('([4:/android/app/cts/ActivityManagerProcessStateTest.java]:[connect()]:[4]:method_text:[nd: first     * allowing a service to be started, then stopped by the system when idle.     */   ])', 1), ('([5:/android/app/cts/ActivityManagerProcessStateTest.java]:[connect()]:[5]:method_text:[t allow services to be started from broadcasts except when in     * the correct states.     */   ])', 1), ('([4:/android/app/cts/ActivityManagerProcessStateTest.java]:[connect()]:[4]:method_text:[/**     * Test that background check does allow services to be started from activities.     */   ])', 1), ('([4:/android/app/cts/ActivityManagerProcessStateTest.java]:[connect()]:[4]:method_text:[   /**     * Test that the foreground service app op does prevent the foreground state.     */   ])', 1), ('([8:/android/app/cts/ActivityManagerProcessStateTest.java]:[connect()]:[8]:method_text:[ound services demoted to     * ordinary service state when it is no longer the top app.     */   ])', 1), ('([1:/android/suspendapps/cts/DualSuspendTests.java]:[connect()]:[1]:method_text:[verHandler);        }        removeDeviceAdmin();        SuspendTestUtils.unsuspendAll();    }}])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[android.net.ConnectivityManager.NetworkCallback]:[1]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([1:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[java.net.Socket]:[1]:method_text:[e file and the boolean     * values are received as parameters from the host side test.     */   ])', 1), ('([3:/android/media/cts/ConnectionStatus.java]:[ConnectivityManager.getActiveNetwork]:[3]:method_text:[       break;            }        }        // ping test timeout        return false;    }   ])', 1), ('([1:/android/security/cts/StagefrightTest.java]:[java.net.Socket]:[1]:method_text:[ore any existing test methods     ***********************************************************/   ])', 1), ('([1:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[connect()]:[1]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([1:/android/telecom/cts/CallDiagnosticServiceTest.java]:[connect()]:[1]:method_text:[ adding a call binds to the call diagnostic service.     * @throws InterruptedException     */   ])', 1), ('([2:/android/telecom/cts/CallDiagnosticServiceTest.java]:[connect()]:[2]:method_text:[    * Test passing of BT call quality report to CDS.     * @throws InterruptedException     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[connect()]:[2]:method_text:[ }    /**     * Test the WifiManager APIs that return whether a feature is supported.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[connect()]:[1]:method_text:[ateCallback(Executor,     * WifiManager.TrafficStateCallback)} by sending some traffic.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[connect()]:[1]:method_text:[));    }    /**     * Tests {@link WifiManager#isWpa3SaeSupported()} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[connect()]:[1]:method_text:[;        }    }    /**     * Tests {@link WifiManager#allowAutojoin(int, boolean)}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[connect()]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[connect()]:[1]:method_text:[     }    }    /**     * Tests {@link WifiManager#isWapiSupported()} does not crash.     */   ])', 1), ('([1:/com/android/cts/appwithdata/CreatePrivateDataTest.java]:[java.net.Socket]:[1]:method_text:[d traffic stats.     * @throws IOException if any error occurred when creating the file     */   ])', 1), ('([1:/android/telecom/cts/RemoteConferenceTest.java]:[connect()]:[1]:method_text:[backInvoker.getArgs(0)[1]);        mRemoteConferenceObject.unregisterCallback(callback);    }   ])', 1), ('([1:/android/telecom/cts/ExtendedInCallServiceTest.java]:[connect()]:[1]:method_text:[);        inCallService.disconnectLastCall();        assertNumCalls(inCallService, 0);    }   ])', 1), ('([1:/android/car/cts/CarAppFocusManagerTest.java]:[connect()]:[1]:method_text:[Manager.APP_FOCUS_TYPE_NAVIGATION, true));        mManager.removeFocusListener(change);    }   ])', 1), ('([1:/android/car/cts/CarAppFocusManagerTest.java]:[connect()]:[1]:method_text:[T_WAIT_TIMEOUT_MS,                CarAppFocusManager.APP_FOCUS_TYPE_NAVIGATION, false));    }   ])', 1), ('([1:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[connect()]:[1]:method_text:[ported.Trigger.RECONNECT_SAME_NETWORK);        assertThat(a1.getNetworkUsed()).isTrue();    }   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorTest.java]:[java.net.Socket]:[1]:method_text:[ mKeyStore = KeyStore.getInstance(""AndroidKeyStore"");        mKeyStore.load(null, null);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java]:[connect()]:[1]:method_text:[(""Did not get DeviceAdminReceiver#onNetworkLogsAvailable callback"");            }        }    }}])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[java.net.Socket]:[1]:method_text:[ondition.   Disable until better solution is available    // Streaming RTSP video from YouTube   ])', 1), (""([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[java.net.Socket]:[1]:method_text:[ntext();    }    /**     * Tests that another app's private data cannot be accessed.     */   ])"", 1), ('([1:/android/signature/cts/InterfaceChecker.java]:[connect()]:[1]:method_text:[       } else {            class2Description.put(runtimeClass, classDescription);        }    }}])', 1), ('([1:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[connect()]:[1]:method_text:[ to a network using peer to peer API.     * 3. Verify that both connections are active.     */   ])', 1), ('([1:/android/media/cts/MediaPlayerFlakyNetworkTest.java]:[java.net.Socket]:[1]:method_text:[on {        releaseMediaPlayer();        releaseHttpServer();        super.tearDown();    }   ])', 1), ('([2:/android/telephony/ims/cts/SipDelegateManagerTest.java]:[connect()]:[2]:method_text:[nnectCarrierImsService();            sServiceConnector.restoreDefaultSmsApp();        }    }   ])', 1), ('([1:/android/telephony/ims/cts/SipDelegateManagerTest.java]:[connect()]:[1]:method_text:[ext getContext() {        return InstrumentationRegistry.getInstrumentation().getContext();    }}])', 1), ('([1:/android/security/net/config/cts/DownloadManagerTest.java]:[java.net.Socket]:[1]:method_text:[ength: 5\\r\\n\\r\\nhello"";    private static final long TIMEOUT = 3 * DateUtils.SECOND_IN_MILLIS;   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[connect()]:[1]:method_text:[E_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_TRANSPORT_INFO_SERVICE), status);    }   ])', 1), ('([1:/android/telecom/cts/OutgoingCallTest.java]:[connect()]:[1]:method_text:[.TEST_PHONE_ACCOUNT_HANDLE_2, conn.getPhoneAccountHandle());        conn.onDisconnect();    }   ])', 1), ('([2:/android/telecom/cts/BackgroundCallAudioTest.java]:[connect()]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);        assertTrue(result);    }}])', 1), ('([1:/android/graphics/cts/ColorSpaceTest.java]:[connect()]:[1]:method_text:[pace.Named.SRGB));        assertSame(connector.getSource(), connector.getDestination());    }   ])', 1), ('([1:/android/media/cts/MediaSession2Test.java]:[connect()]:[1]:method_text:[ession);            assertEquals(controllerInfo, sessionCallback.mController);        }    }   ])', 1), ('([1:/android/net/wifi/cts/WifiInfoTest.java]:[connect()]:[1]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[java.net.Socket]:[1]:method_text:[icy);    }    public interface ThrowingRunnable {        void run() throws Exception;    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java]:[java.net.Socket]:[1]:method_text:[MPONENT, VPN_PACKAGE,                /* restrictions */ null);        super.tearDown();    }   ])', 1), ('([1:/android/telecom/cts/CallDetailsTest.java]:[connect()]:[1]:method_text:[OLTE);    }    /**     * Verifies operation of the test telecom call ID system APIs.     */   ])', 1), ('([1:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[connect()]:[1]:method_text:[tch (IOException e) {            Log.w(TAG, ""Failed to connect to "" + server, e);        }    }}])', 1), ('([1:/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java]:[connect()]:[1]:method_text:[urlConnection != null) {                urlConnection.disconnect();            }        }    }}])', 1), ('([1:/android/suspendapps/cts/SuspendPackagesTest.java]:[connect()]:[1]:method_text:[lable(String[] packageNames, UserHandle user,                boolean replacing) {        }    }}])', 1), ('([1:/android/media/cts/MediaSession2ServiceTest.java]:[connect()]:[1]:method_text:[Session(ControllerInfo)}     * can return different sessions for different controllers.     */   ])', 1), ('([1:/android/telecom/cts/PhoneAccountSuggestionServiceTest.java]:[connect()]:[1]:method_text:[oneAccountSuggestionService.disableService(mContext);        }        super.tearDown();    }   ])', 1), ('([1:/android/telephony/cts/CarrierMessagingServiceWrapperTest.java]:[connect()]:[1]:method_text:[**     * Tests that the device properly connects to available CarrierMessagingServices.     */   ])', 1), ('([1:/android/telephony/cts/CarrierMessagingServiceWrapperTest.java]:[connect()]:[1]:method_text:[ice the all CarrierMessagingServices can receive sms and     * triggers valid callback.     */   ])', 1), ('([1:/android/telecom/cts/RemoteConnectionTest.java]:[connect()]:[1]:method_text:[NECTED);        assertConnectionState(mRemoteConnection, Connection.STATE_DISCONNECTED);    }   ])', 1), ('([1:/android/telecom/cts/RemoteConnectionTest.java]:[connect()]:[1]:method_text:[ection#pullExternalCall()} is proxied to     * {@link Connection#onPullExternalCall()}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[connect()]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/media/cts/MediaScannerConnectionTest.java]:[connect()]:[1]:method_text:[ediaScannerConnection.disconnect();            mMediaScannerConnection = null;        }    }   ])', 1), ('([3:/android/media/cts/MediaScannerConnectionTest.java]:[connect()]:[3]:method_text:[th;            if (uri != null) {                mediaUri = uri;            }        }    }}])', 1), ('([1:/android/media/cts/MediaBrowserTest.java]:[connect()]:[1]:method_text:[ll) {            mMediaBrowser.disconnect();            mMediaBrowser = null;        }    }   ])', 1), ('([1:/android/media/cts/MediaBrowserTest.java]:[connect()]:[1]:method_text:[k() {                return !mMediaBrowser.isConnected();            }        }.run();    }   ])', 1), ('([1:/android/media/cts/MediaBrowserTest.java]:[connect()]:[1]:method_text:[    fail();        } catch (IllegalStateException e) {            // expected        }    }   ])', 1), ('([1:/android/media/cts/MediaBrowserTest.java]:[connect()]:[1]:method_text:[    && mConnectionCallback.mConnectionSuspendedCount == 0;            }        }.run();    }   ])', 1), ('([3:/android/media/cts/MediaBrowserTest.java]:[connect()]:[3]:method_text:[              return mItemCallback.mLastMediaItem != null;            }        }.run();    }   ])', 1), ('([3:/android/media/cts/MediaBrowserTest.java]:[connect()]:[3]:method_text:[tionFailedCount);        assertEquals(0, mConnectionCallback.mConnectionSuspendedCount);    }   ])', 1), ('([2:/android/media/cts/MediaBrowserTest.java]:[connect()]:[2]:method_text:[mChildrenLoadedWithOptionCount);        assertNull(mSubscriptionCallback.mLastParentId);    }   ])', 1), ('([3:/android/media/cts/MediaBrowserTest.java]:[connect()]:[3]:method_text:[ @Override        public void onError(String id) {            mLastErrorId = id;        }    }}])', 1), (""([1:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[java.net.Socket]:[1]:method_text:[ there's one user on the device or all     * secondary users / profiles are affiliated.     */   ])"", 1), ('([1:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[connect()]:[1]:method_text:[ork logging enabled for %s"", admin).that(reallyEnabled)                .isEqualTo(enabled);    }}])', 1), ('([1:/android/suspendapps/cts/DialogTests.java]:[connect()]:[1]:method_text:[erface.disconnect();        }        mUiDevice.pressBack();        mUiDevice.pressHome();    }}])', 1), ('([1:/android/car/cts/CarTest.java]:[connect()]:[1]:method_text:[       if (mCar != null && mCar.isConnected()) {            mCar.disconnect();        }    }   ])', 1), ('([2:/android/car/cts/CarTest.java]:[connect()]:[2]:method_text:[ertThat(mCar.isConnected()).isFalse();        assertThat(mCar.isConnecting()).isFalse();    }   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[connect()]:[1]:method_text:[ilityStatsEntry} retrieved from     * {@link WifiManager.OnWifiUsabilityStatsListener}.     */   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[connect()]:[2]:method_text:[r works even after wifi restart.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/app/usage/cts/NetworkUsageStatsTest.java]:[connect()]:[2]:method_text:[er) -> telephonyManager.getSubscriberId());        }        return """";    }    @AppModeFull   ])', 1), ('([1:/com/android/server/cts/device/statsdatom/AtomTests.java]:[connect()]:[1]:method_text:[connect(context);        sleep(500);        wifiReconnect(context);        sleep(500);    }   ])', 1), ('([4:/com/android/server/cts/device/statsdatom/AtomTests.java]:[connect()]:[4]:method_text:[PORT_WIFI)) {                return true;            }        }        return false;    }   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[connect()]:[1]:method_text:[(10.0f);        assertZoomChanged(mockVideoProvider, 10.0f);        call.disconnect();    }   ])', 1), ('([1:/android/jvmti/cts/JvmtiAttachingHostTest.java]:[java.net.Socket]:[1]:method_text:[cted void setUp() throws Exception {        mCurrentUser = getDevice().getCurrentUser();    }   ])', 1), ('([1:/android/net/cts/network/permission/UpdateStatsPermissionTest.java]:[java.net.Socket]:[1]:method_text:[ission:     *   {@link android.Manifest.permission#UPDATE_DEVICE_STATS}.     */    @SmallTest   ])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[ConnectivityManager.getActiveNetwork]:[1]:method_text:[}    }    private interface SetWifiCallback {        void onComplete(boolean isSuccess);    }}])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[android.net.ConnectivityManager.NetworkCallback]:[1]:method_text:[stCallback =            new MultinetworkTestCallback() {                @Override               ])', 1), ('([5:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[connect()]:[5]:method_text:[}    }    private interface SetWifiCallback {        void onComplete(boolean isSuccess);    }}])', 1), (""([1:/android/telephony/cts/SubscriptionManagerTest.java]:[android.net.ConnectivityManager.NetworkCallback]:[1]:method_text:[R} network must both be     * either defined or undefined; you can't cross the streams.     */   ])"", 1), ('([2:/android/bluetooth/cts/HearingAidProfileTest.java]:[connect()]:[2]:method_text:[ * Basic test case to make sure that a fictional device is disconnected.     */    @MediumTest   ])', 1), ('([1:/android/bluetooth/cts/HearingAidProfileTest.java]:[connect()]:[1]:method_text:[     * Basic test case to get the list of connected Hearing Aid devices.     */    @MediumTest   ])', 1), ('([1:/android/bluetooth/cts/HearingAidProfileTest.java]:[connect()]:[1]:method_text:[matching Hearing Aid devices for each of the 4 connection     * states.     */    @MediumTest   ])', 1), ('([1:/android/bluetooth/cts/HearingAidProfileTest.java]:[connect()]:[1]:method_text:[ changed intent is called, the parameters and     * device are correct.     */    @MediumTest   ])', 1), ('([2:/android/bluetooth/cts/HearingAidProfileTest.java]:[connect()]:[2]:method_text:[ t) {        try {            Thread.sleep(t);        } catch (InterruptedException e) {}    }}])', 1), ('([1:/android/jdwptunnel/cts/JdwpTunnelTest.java]:[java.net.Socket]:[1]:method_text:[of the activity     * class and put and wait for a breakpoint on the onCreate function.     */   ])', 1), ('([1:/android/net/wifi/cts/ScanResultTest.java]:[connect()]:[1]:method_text:[sidQuoted);        assertThat(currentNetwork.frequency).isEqualTo(wifiInfo.getFrequency());    }}])', 1), ('([1:/android/bluetooth/cts/BluetoothLeAudioTest.java]:[connect()]:[1]:method_text:[ mBluetoothLeAudio.getConnectedDevices();        assertTrue(connectedDevices.isEmpty());    }   ])', 1), ('([1:/android/bluetooth/cts/BluetoothLeAudioTest.java]:[connect()]:[1]:method_text:[getDevicesMatchingConnectionStates(null);        assertTrue(connectedDevices.isEmpty());    }   ])', 1), ('([2:/android/bluetooth/cts/BluetoothLeAudioTest.java]:[connect()]:[2]:method_text:[     }        @Override        public void onServiceDisconnected(int profile) {        }    }}])', 1), ('([1:/android/telecom/cts/BasicInCallServiceTest.java]:[connect()]:[1]:method_text:[onnect();                lock.release();            }        };        return callbacks;    }}])', 1), ('([1:/android/os/cts/ParcelFileDescriptorTest.java]:[java.net.Socket]:[1]:method_text:[    private Context getContext() {        return InstrumentationRegistry.getContext();    }   ])', 1), ('([1:/android/permission/cts/NoWifiStatePermissionTest.java]:[connect()]:[1]:method_text:[ <p>Requires Permission:     *   {@link android.Manifest.permission#CHANGE_WIFI_STATE}.     */   ])', 1), ('([3:/android/permission/cts/NoWifiStatePermissionTest.java]:[connect()]:[3]:method_text:[ <p>Requires Permission:     *   {@link android.Manifest.permission#CHANGE_WIFI_STATE}.     */   ])', 1), ('([2:/android/permission/cts/NoWifiStatePermissionTest.java]:[connect()]:[2]:method_text:[ <p>Requires Permission:     *   {@link android.Manifest.permission#CHANGE_WIFI_STATE}.     */   ])', 1), ('([1:/android/net/wifi/cts/ConcurrencyTest.java]:[android.net.ConnectivityManager.NetworkCallback]:[1]:method_text:[ED, mMySync.expectedP2pState);        removeAllPersistentGroups();        return true;    }   ])', 1), ('([1:/android/telecom/cts/HandoverTest.java]:[connect()]:[1]:method_text:[     * does not declare {@link android.telecom.PhoneAccount#EXTRA_SUPPORTS_HANDOVER_TO}.     */   ])', 1), ('([1:/android/telecom/cts/HandoverTest.java]:[connect()]:[1]:method_text:[ support handover that an outgoing handover     * request will be successfully relayed.     */   ])', 1), ('([1:/android/media/cts/MediaScannerTest.java]:[connect()]:[1]:method_text:[tContentUri(""external""),                ""_data like ?"", new String[] { mFileDir + ""%""});    }   ])', 1), ('([2:/android/media/cts/MediaScannerTest.java]:[connect()]:[2]:method_text:[Title, c.getString(0));        mMediaScannerConnection.disconnect();        c.close();    }   ])', 1), ('([2:/android/media/cts/MediaScannerTest.java]:[connect()]:[2]:method_text:[1b);        mMediaScannerConnection.disconnect();        checkConnectionState(false);    }   ])', 1), ('([2:/android/media/cts/MediaScannerTest.java]:[connect()]:[2]:method_text:[ll);        mMediaScannerConnection.disconnect();        checkConnectionState(false);    }   ])', 1), ('([1:/android/media/cts/MediaScannerTest.java]:[connect()]:[1]:method_text:[d_3.mp3"",                    new String[] {""谭咏麟"", ""二十年白金畅销金曲全记录"", null, ""知心当玩偶"", null})    };   ])', 1), ('([2:/android/media/cts/MediaBrowserServiceTest.java]:[connect()]:[2]:method_text:[ll) {            mMediaBrowser.disconnect();            mMediaBrowser = null;        }    }   ])', 1), ('([2:/android/permission/cts/NoNetworkStatePermissionTest.java]:[ConnectivityManager.getActiveNetwork]:[2]:method_text:[ssion:     *   {@link android.Manifest.permission#ACCESS_NETWORK_STATE}.     */    @SmallTest   ])', 1), ('([2:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[connect()]:[2]:method_text:[t.disconnect();        TestQuickAccessWalletService.awaitUnbinding(3, TimeUnit.SECONDS);    }   ])', 1), ('([1:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[connect()]:[1]:method_text:[hat(callback.mResponse).isNotNull();        assertThat(callback2.mResponse).isNotNull();    }   ])', 1), ('([1:/android/net/cts/network/permission/InternetPermissionTest.java]:[java.net.Socket]:[1]:method_text:[>Tests Permission:     *   {@link android.Manifest.permission#INTERNET}.     */    @SmallTest   ])', 1)]"	"https://developer.android.com"	""	"[('connect()', 106), ('java.net.Socket', 18), ('android.net.ConnectivityManager.NetworkCallback', 4), ('ConnectivityManager.getActiveNetwork', 3)]"	"[('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None]', 2), ('[android.media.cts.NativeDecoderTest SKIP_testExtractor CtsMediaTestCases]', 1), ('[android.security.NetworkSecurityPolicyTestBase testDefaultHttpURLConnection None]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckService CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckStopsService CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckBroadcastService CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckActivityService CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testForegroundServiceAppOp CtsAppTestCases]', 1), ('[android.suspendapps.cts.DualSuspendTests testCannotSuspendUnderDisallowUninstallApps CtsSuspendAppsTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isNotNull CtsWifiTestCases]', 1), ('[android.media.cts.ConnectionStatus isAvailable None]', 1), ('[android.security.cts.StagefrightTest TestName CtsSecurityTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported CtsWifiTestCases]', 1), ('[android.telecom.cts.CallDiagnosticServiceTest onDisconnect CtsTelecomTestCases]', 1), ('[android.telecom.cts.CallDiagnosticServiceTest testAddMultipleCalls CtsTelecomTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDeprecatedApis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsStaApConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetCurrentNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDisableEphemeralNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoin CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinGlobal CtsWifiTestCases]', 1), ('[android.telecom.cts.RemoteConferenceTest testRemoteConferenceCallbacks_Disconnect CtsTelecomTestCases]', 1), ('[android.telecom.cts.ExtendedInCallServiceTest testAddNewOutgoingCallAndThenDisconnect CtsTelecomTestCases]', 1), ('[android.car.cts.CarAppFocusManagerTest testFocusChange CtsCarTestCases]', 1), ('[android.car.cts.CarAppFocusManagerTest testFilter CtsCarTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiReconnect CtsStatsdAtomHostTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest currentTimeMillis CtsKeystoreTestCases]', 1), ('[com.android.cts.deviceandprofileowner.NetworkLoggingTest testSetDelegateScope_noDelegation None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest isStaConcurrencyForLocalOnlyConnectionsSupported CtsWifiTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest connectTestImsServiceWithSipTransportAndConfig CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testCloseActiveDialog CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testReceivedActiveDialogClose CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testActiveDialogPendingNewInvite CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testCloseSessionByePendingCleanup CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testCloseSessionPendingBye CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testCloseMultipleSessionsPendingBye CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testCloseSessionBye CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testSwitchAppPendingBye CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testSwitchAppActiveSession CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testActiveSessionDeregistering CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testActiveSessionDeregisteringNoResponse CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testMultipleActiveSessionDeregisteringNoResponse CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testActiveSessionDeregisteringNewInviteDenied CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testInviteDeniedTag CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testInviteAcceptContactNotAssociated CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testIncomingInviteDeregistering CtsTelephonyTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.telecom.cts.OutgoingCallTest testExtraPhoneAccountHandleAvailable CtsTelecomTestCases]', 1), ('[android.telecom.cts.BackgroundCallAudioTest testAudioProcessingFromCallScreeningDisallow CtsTelecomTestCases]', 1), ('[android.telecom.cts.BackgroundCallAudioTest testManualAudioCallScreenReject CtsTelecomTestCases]', 1), ('[android.telecom.cts.BackgroundCallAudioTest testLowerApiLevelCompatibility2 CtsTelecomTestCases]', 1), ('[android.graphics.cts.ColorSpaceTest testConnect CtsGraphicsTestCases]', 1), ('[android.media.cts.MediaSession2Test testCallback_onConnect_onDisconnect CtsMediaTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties CtsWifiTestCases]', 1), ('[android.os.cts.StrictModeTest SimpleOnGestureListener None]', 1), ('[android.telecom.cts.CallDetailsTest testLogFeatures CtsTelecomTestCases]', 1), ('[com.android.cts.delegate.NetworkLoggingDelegateTest testNetworkLogging None]', 1), ('[com.android.cts.delegate.WorkProfileNetworkLoggingDelegateTest testSetNetworkLogsEnabled_false None]', 1), ('[android.suspendapps.cts.SuspendPackagesTest testOpCameraOnSuspend CtsSuspendAppsTestCases]', 1), ('[android.media.cts.MediaSession2ServiceTest testOnGetSession_returnsSession CtsMediaTestCases]', 1), ('[android.telecom.cts.PhoneAccountSuggestionServiceTest disconnect CtsTelecomTestCases]', 1), ('[android.telephony.cts.CarrierMessagingServiceWrapperTest disconnect CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CarrierMessagingServiceWrapperTest testCloseWrapper CtsTelephonyTestCases]', 1), ('[android.telecom.cts.RemoteConnectionTest testRemoteConnectionOutgoingCall CtsTelecomTestCases]', 1), ('[android.telecom.cts.RemoteConnectionTest testRemoteIncomingConference CtsTelecomTestCases]', 1), ('[android.telecom.cts.RemoteConnectionTest testRemoteOutgoingConference CtsTelecomTestCases]', 1), ('[android.telecom.cts.RemoteConnectionTest testRemoteConnectionCallbacks_Disconnect CtsTelecomTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled CtsWifiTestCases]', 1), ('[android.media.cts.MediaScannerConnectionTest currentTimeMillis CtsMediaTestCases]', 1), ('[android.media.cts.MediaScannerConnectionTest testMediaScannerConnection CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest disconnect CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest testMediaBrowser CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest testConnectTwice CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest testConnectionFailed CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest testReconnection CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest testConnectionCallbackNotCalledAfterDisconnect CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest testSubscriptionCallbackNotCalledAfterDisconnect CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest testItemCallbackNotCalledAfterDisconnect CtsMediaTestCases]', 1), ('[com.android.cts.deviceowner.NetworkLoggingTest testNetworkLoggingAndRetrieval None]', 1), ('[android.suspendapps.cts.DialogTests testInterceptorActivity_strings CtsSuspendAppsTestCases]', 1), ('[android.car.cts.CarTest isConnected CtsCarTestCases]', 1), ('[android.car.cts.CarTest testConnection CtsCarTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testConnectedNetworkScorerWithSessionId CtsWifiTestCases]', 1), ('[android.app.usage.cts.NetworkUsageStatsTest getIsDefault CtsUsageStatsTestCases]', 1), ('[com.android.server.cts.device.statsdatom.AtomTests testWifiReconnect None]', 1), ('[com.android.server.cts.device.statsdatom.AtomTests testGenerateMobileTraffic None]', 1), ('[android.telecom.cts.VideoCallTest testSetZoom CtsTelecomTestCases]', 1), ('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity testStarted None]', 1), ('[android.telephony.cts.SubscriptionManagerTest isSupported CtsTelephonyTestCases]', 1), ('[android.bluetooth.cts.HearingAidProfileTest test_getProxyServiceConnect CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.HearingAidProfileTest test_getConnectionState CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.HearingAidProfileTest test_getConnectedDevices CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.HearingAidProfileTest test_getDevicesMatchingConnectionStates CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.HearingAidProfileTest test_getConnectionStateChangedIntent CtsBluetoothTestCases]', 1), ('[android.jdwptunnel.cts.JdwpTunnelTest disable CtsJdwpTunnelHostTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultMatchesWifiInfo CtsWifiTestCases]', 1), ('[android.bluetooth.cts.BluetoothLeAudioTest testGetConnectedDevices CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.BluetoothLeAudioTest testGetDevicesMatchingConnectionStates CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.BluetoothLeAudioTest testGetConnectionState CtsBluetoothTestCases]', 1), ('[android.telecom.cts.BasicInCallServiceTest testTelephonyCall_bindsToInCallServiceAndAddsCall CtsTelecomTestCases]', 1), ('[android.permission.cts.NoWifiStatePermissionTest testGetDhcpInfo CtsPermissionTestCases]', 1), ('[android.permission.cts.NoWifiStatePermissionTest testDisconnect CtsPermissionTestCases]', 1), ('[android.permission.cts.NoWifiStatePermissionTest testReconnect CtsPermissionTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest ActionListener CtsWifiTestCases]', 1), ('[android.telecom.cts.HandoverTest testHandoverSourceFailed CtsTelecomTestCases]', 1), ('[android.telecom.cts.HandoverTest testHandoverDestinationFailed CtsTelecomTestCases]', 1), ('[android.media.cts.MediaScannerTest currentTimeMillis CtsMediaTestCases]', 1), ('[android.media.cts.MediaScannerTest testLocalizeRingtoneTitles CtsMediaTestCases]', 1), ('[android.media.cts.MediaScannerTest testMediaScanner CtsMediaTestCases]', 1), ('[android.media.cts.MediaScannerTest testWildcardPaths CtsMediaTestCases]', 1), ('[android.media.cts.MediaScannerTest testCanonicalize CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserServiceTest disconnect CtsMediaTestCases]', 1), ('[android.permission.cts.NoNetworkStatePermissionTest testGetActiveNetworkInfo CtsPermissionTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testDisconnect_shouldClearListenersAndDisconnect CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testConnect_disconnect_reconnect_shouldWork CtsQuickAccessWalletTestCases]', 1)]"
"7.3.6  Thermometer"	"7.3.6"	"C-2-1"	"7.3.6/C-2-1"	"07030600.670201"	"""C-2-1] MUST NOT define [`SENSOR_TYPE_AMBIENT_TEMPERATURE`](https://developer.android.com/reference/android/hardware/Sensor#TYPE_AMBIENT_TEMPERATURE)     for the temperature sensor.  """	""	""	"TYPE_AMBIENT_TEMPERATURE SENSOR_TYPE_AMBIENT_TEMPERATURE"	""	""	""	""	"[('android.app.cts.SystemFeaturesTest', 1)]"	""	"[('CtsAppTestCases', 1)]"	""	""	""	""	"android.app.cts.SystemFeaturesTest"	""	"CtsAppTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java', 1)]"	"[('(1,TYPE_AMBIENT_TEMPERATURE,/android/app/cts/SystemFeaturesTest.java)', 1)]"	"[('([1:/android/app/cts/SystemFeaturesTest.java]:[TYPE_AMBIENT_TEMPERATURE]:[1]:method_text:[;                features.add(feature);            }        }        return features;    }   ])', 1)]"	"https://developer.android.com"	""	"[('TYPE_AMBIENT_TEMPERATURE', 1)]"	"[('[android.app.cts.SystemFeaturesTest testSensorFeatures CtsAppTestCases]', 1)]"
"2.2.3  Software"	"3.8.16"	"H-1-4"	"3.8.16/H-1-4"	"03081600.720104"	"""[3.8.16/H-1-4] MUST accurately render     in this user affordance the name and icon of each third-party app that     provides controls via the [`ControlsProviderService`](https://developer.android.com/reference/android/service/controls/ControlsProviderService)     API as well as any specified fields provided by the [`Control`](https://developer.android.com/reference/android/service/controls/Control)     APIs.  Conversely, If Handheld device implementations do not implement such controls, they:  *   ["""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://developer.android.com"	""	""	""
"7.2.4  Touchscreen Input"	"7.2.4"	"C-3-2"	"7.2.4/C-3-2"	"07020400.670302"	"""C-3-2] MUST report only `android.hardware.faketouch`. """	""	""	"android.hardware.faketouch"	""	""	""	""	"[('android.app.cts.SystemFeaturesTest', 2)]"	""	"[('CtsAppTestCases', 2)]"	""	""	""	""	"android.app.cts.SystemFeaturesTest"	""	"CtsAppTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java', 2)]"	"[('(6,android.hardware.faketouch,/android/app/cts/SystemFeaturesTest.java)', 1)]"	"[('([1:/android/app/cts/SystemFeaturesTest.java]:[android.hardware.faketouch]:[1]:method_text:[RE_TOUCHSCREEN);            assertAvailable(PackageManager.FEATURE_FAKETOUCH);        }    }   ])', 1), ('([5:/android/app/cts/SystemFeaturesTest.java]:[android.hardware.faketouch]:[5]:method_text:[UCH_JAZZHAND)) {            assertAvailable(PackageManager.FEATURE_FAKETOUCH);        }    }   ])', 1)]"	""	""	"[('android.hardware.faketouch', 2)]"	"[('[android.app.cts.SystemFeaturesTest testTouchScreenFeatures CtsAppTestCases]', 1), ('[android.app.cts.SystemFeaturesTest testFakeTouchFeatures CtsAppTestCases]', 1)]"
"2.2.1  Hardware"	"7.1.4.6"	"H-1-3"	"7.1.4.6/H-1-3"	"07010406.720103"	"""[7.1.4.6/H-1-3] MUST report conformant values      for the device’s GPU RenderStages following the      [render stage trace packet proto](https://android.googlesource.com/platform/external/perfetto/+/refs/heads/master/protos/perfetto/trace/gpu/gpu_render_stage_event.proto). *    ["""	""	""	"GPU android.googlesource.com gpu_render_stage_event.proto"	""	""	""	""	"[('android.gputools.cts.CtsRootlessGpuDebugHostTest', 16), ('com.android.server.cts.GraphicsStatsValidationTest', 3), ('android.appmanifest.cts.UsesNativeLibraryTestCase', 3), ('android.hardware.camera2.cts.MultiViewTest', 2), ('android.graphics.cts.CameraGpuTest', 2), ('android.graphics.cts.BitmapTest', 2), ('android.security.cts.Poc17_01', 2), ('android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest', 2), ('android.hardware.camera2.cts.CameraExtensionSessionTest', 1), ('android.SustainedPerformance.cts.SustainedPerformanceHostTest', 1), ('android.deviceconfig.cts.DeviceConfigApiPermissionTests', 1), ('android.renderscript.cts.refocus.RefocusTest', 1), ('android.graphics.cts.BasicVulkanGpuTest', 1), ('android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.graphics.cts.MediaVulkanGpuTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('com.android.compatibility.common.tradefed.presubmit.CtsConfigLoadingTest', 1), ('android.adb.cts.AdbHostTest', 1), ('android.appsecurity.cts.KeySetHostTest', 1), ('android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest', 1), ('com.android.cts.deviceowner.HardwarePropertiesManagerTest', 1), ('android.app.uiautomation.cts.UiAutomationTest', 1), ('android.graphics.gpuprofiling.cts.CtsFrameTracerDataSourceTest', 1), ('android.view.cts.PixelCopyTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest', 1), ('android.hardware.camera2.cts.RobustnessTest', 1), ('android.hardware.nativehardware.cts.HardwareBufferVrTest', 1), ('android.view.cts.ASurfaceControlTest', 1), ('android.graphics.cts.CameraVulkanGpuTest', 1), ('com.android.cts.deviceowner.VrTemperatureTest', 1), ('android.security.cts.ActivityManagerTest', 1), ('android.graphics.cts.SyncTest', 1), ('android.sensorratepermission.cts.debuggableapi31.DebuggableAPI31Test', 1), ('android.view.cts.FrameMetricsListenerTest', 1), ('android.hardware.camera2.cts.ImageReaderTest', 1), ('android.security.cts.RunningAppProcessInfoTest', 1), ('android.hardware.cts.HardwareBufferTest', 1), ('android.dumpsys.cts.GfxInfoDumpsysTest', 1)]"	"[('getDevice', 19), ('setUp', 4), ('getWidth', 3), ('getHeight', 2), ('cleanup', 2), ('trim', 2), ('tearDown', 2), ('stream', 2), ('data', 1), ('getFramePixels', 1), ('getContext', 1), ('getAssets', 1), ('flush', 1), ('close', 1), ('deleteOnExit', 1), ('run', 1), ('getMessage', 1), ('init', 1), ('getTime', 1), ('LogScanResult', 1), ('turnScreenOn', 1), ('getSimpleName', 1), ('setup', 1), ('teardown', 1), ('matches', 1), ('size', 1), ('getOverrideConfig', 1)]"	"[('CtsGpuToolsHostTestCases', 16), ('CtsGraphicsTestCases', 8), ('CtsCameraTestCases', 5), ('CtsViewTestCases', 3), ('CtsShortcutManagerTestCases', 3), ('CtsIncidentHostTestCases', 3), ('CtsSecurityBulletinHostTestCases', 2), ('CtsGpuProfilingDataTestCases', 2), ('CtsSecurityTestCases', 2), ('CtsSustainedPerformanceHostTestCases', 1), ('CtsDeviceConfigTestCases', 1), ('CtsRenderscriptTestCases', 1), ('CtsSensorTestCases', 1), ('CtsMediaTestCases', 1), ('CtsAdbHostTestCases', 1), ('CtsAppSecurityHostTestCases', 1), ('CtsUiAutomationTestCases', 1), ('CtsNativeHardwareTestCases', 1), ('CtsHardwareTestCases', 1), ('CtsDumpsysHostTestCases', 1)]"	""	""	""	""	"android.dumpsys.cts.GfxInfoDumpsysTest"	"getOverrideConfig"	"CtsDumpsysHostTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/gputools/src/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 16), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/src/com/android/server/cts/GraphicsStatsValidationTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/library/src/android/appmanifest/cts/UsesNativeLibraryTestCase.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraGpuTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_01.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraExtensionSessionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/deviceconfig/src/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/refocus/RefocusTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BasicVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/DirectReportAPI30/src/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/MediaVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/adb/src/android/adb/cts/AdbHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/KeySetHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uiautomation/src/android/app/uiautomation/cts/UiAutomationTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/PixelCopyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/nativehardware/src/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/VrTemperatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/ActivityManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/SyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/DebuggableAPI31/src/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/FrameMetricsListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/RunningAppProcessInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/cts/HardwareBufferTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/GfxInfoDumpsysTest.java', 1)]"	"[('(1,GPU,/android/hardware/camera2/cts/CameraExtensionSessionTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/MultiViewTest.java)', 1), ('(2,GPU,/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java)', 1), ('(1,GPU,/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java)', 1), ('(5,GPU,/android/graphics/cts/CameraGpuTest.java)', 1), ('(1,GPU,/android/renderscript/cts/refocus/RefocusTest.java)', 1), ('(2,GPU,/android/graphics/cts/BasicVulkanGpuTest.java)', 1), ('(1,GPU,/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java)', 1), ('(2,GPU,/android/graphics/cts/BitmapTest.java)', 1), ('(1,GPU,/android/hardware/cts/SensorDirectReportTest.java)', 1), ('(3,GPU,/android/security/cts/Poc17_01.java)', 1), ('(1,GPU,/android/graphics/cts/MediaVulkanGpuTest.java)', 1), ('(3,GPU,/android/media/cts/PresentationSyncTest.java)', 1), ('(1,GPU,/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java)', 1), ('(1,android.googlesource.com,/android/adb/cts/AdbHostTest.java)', 1), ('(1,GPU,/android/appsecurity/cts/KeySetHostTest.java)', 1), ('(24,GPU,/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java)', 1), ('(14,GPU,/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java)', 1), ('(1,GPU,/android/app/uiautomation/cts/UiAutomationTest.java)', 1), ('(2,GPU,/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java)', 1), ('(1,GPU,/android/view/cts/PixelCopyTest.java)', 1), ('(1,GPU,/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java)', 1), ('(94,GPU,/android/gputools/cts/CtsRootlessGpuDebugHostTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/RobustnessTest.java)', 1), ('(8,GPU,/com/android/server/cts/GraphicsStatsValidationTest.java)', 1), ('(2,GPU,/android/hardware/nativehardware/cts/HardwareBufferVrTest.java)', 1), ('(1,GPU,/android/view/cts/ASurfaceControlTest.java)', 1), ('(1,GPU,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(9,GPU,/com/android/cts/deviceowner/VrTemperatureTest.java)', 1), ('(1,android.googlesource.com,/android/security/cts/ActivityManagerTest.java)', 1), ('(2,GPU,/android/graphics/cts/SyncTest.java)', 1), ('(1,GPU,/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java)', 1), ('(5,GPU,/android/view/cts/FrameMetricsListenerTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(4,GPU,/android/appmanifest/cts/UsesNativeLibraryTestCase.java)', 1), ('(3,GPU,/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java)', 1), ('(1,android.googlesource.com,/android/security/cts/RunningAppProcessInfoTest.java)', 1), ('(3,GPU,/android/hardware/cts/HardwareBufferTest.java)', 1), ('(1,GPU,/android/dumpsys/cts/GfxInfoDumpsysTest.java)', 1)]"	"[('([1:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[GPU]:[1]:method_text:[epeating with multi frame capture on all supported extensions.    // Verify still frame output.   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[ify the Bitmap     * from the first TextureView is identical to the second TextureView.     */   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[    }    /*     * Verify behavior of sharing surfaces within one OutputConfiguration     */   ])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[GPU]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");    }   ])', 1), ('([1:/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java]:[GPU]:[1]:method_text:[      Exception e) {        violations.append(message).append("": "").append(e).append(""\\n"");    }}])', 1), ('([4:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[4]:method_text:[> mActivityRule =            new ActivityTestRule<>(CameraGpuCtsActivity.class, false, false);   ])', 1), ('([1:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[1]:method_text:[e.launchActivity(null);        activity.waitToFinishRendering();        activity.finish();    }}])', 1), ('([1:/android/renderscript/cts/refocus/RefocusTest.java]:[GPU]:[1]:method_text:[+                context.getResources().getResourceEntryName(resID));        return path;    }}])', 1), ('([2:/android/graphics/cts/BasicVulkanGpuTest.java]:[GPU]:[2]:method_text:[rmat;    public BasicVulkanGpuTest(String name, int format) {        mFormat = format;    }   ])', 1), ('([1:/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java]:[GPU]:[1]:method_text:[                        > SensorRatePermissionDirectReportTestHelper.CAPPED_SAMPLE_RATE_HZ);    }])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[ hwBuffer2.getLayers());        assertEquals(hwBuffer.getUsage(), hwBuffer2.getUsage());    }   ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[tory.Options();        options.inPreferredConfig = Config.HARDWARE;        return options;    }}])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[GPU]:[1]:method_text:[der.nativeOrder());        return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned    }}])', 1), ('([1:/android/security/cts/Poc17_01.java]:[GPU]:[1]:method_text:[ls.runPoc(""CVE-2016-8426"", getDevice(), 60);        }    }    /**     *  b/31799885     */   ])', 1), ('([2:/android/security/cts/Poc17_01.java]:[GPU]:[2]:method_text:[ls.runPoc(""CVE-2016-8427"", getDevice(), 60);        }    }    /**     *  b/31993456     */   ])', 1), ('([1:/android/graphics/cts/MediaVulkanGpuTest.java]:[GPU]:[1]:method_text:[map.getWidth(),                         bitmap.getHeight());        return framePixels;    }   ])', 1), ('([3:/android/media/cts/PresentationSyncTest.java]:[GPU]:[3]:method_text:[sleep(10); }                catch (InterruptedException ignored) {}            }        }    }}])', 1), ('([1:/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java]:[GPU]:[1]:method_text:[ * -> Exclude deprecated ApkInstaller.     * -> Check if host-side tests are non empty.     */   ])', 1), ('([1:/android/adb/cts/AdbHostTest.java]:[android.googlesource.com]:[1]:method_text:[c7c6d5edcbe04454eb9a40f947ac0a3045f64eb    // for the patch that enabled this on Pixel devices.   ])', 1), ('([1:/android/appsecurity/cts/KeySetHostTest.java]:[GPU]:[1]:method_text:[k that an apk with an upgrade key that has no corresponding public key fails to install.     */   ])', 1), ('([24:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[GPU]:[24]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.     */   ])', 1), ('([14:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[GPU]:[14]:method_text:[ges);            oldFanSpeeds = fanSpeeds;            oldCpuUsages = cpuUsages;        }    }}])', 1), ('([1:/android/app/uiautomation/cts/UiAutomationTest.java]:[GPU]:[1]:method_text:[entation getInstrumentation() {        return InstrumentationRegistry.getInstrumentation();    }}])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[GPU]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                FEATURE_WATCH, FEATURE_TELEVISION);    }   ])', 1), ('([1:/android/view/cts/PixelCopyTest.java]:[GPU]:[1]:method_text:[se();                    } catch (Throwable t) {}                }            }        }    }}])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java]:[GPU]:[1]:method_text:[           assertEquals(""title3"", s.getShortLabel());                    });        });    }   ])', 1), ('([30:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[30]:method_text:[es layers to our debuggable app and ensures they are     * loaded in the correct order.     */   ])', 1), (""([6:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[6]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.     */   ])"", 1), ('([1:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[1]:method_text:[not enumerate layers in base     * directory if enable_gpu_debug_layers is not enabled.     */   ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[e apps do not enumerate layers in base     * directory if gpu_debug_app does not match.     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[e apps do not enumerate layers in base     * directory if gpu_debug_layers are not set.     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[     * This test ensures we can still use properties if no layer specified via Settings     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[    /**     * This test ensures system properties are ignored if Settings load a layer     */   ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[  /**     * This test ensures a debuggable app can load layers from an external package     */   ])', 1), (""([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.     */   ])"", 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[not enumerate layers in base     * directory if enable_gpu_debug_layers is not enabled.     */   ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[S apps do not enumerate layers in base     * directory if gpu_debug_app does not match.     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[S apps do not enumerate layers in base     * directory if gpu_debug_layers are not set.     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**     * This test ensures we can still use properties if no GLES layers are specified     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**     * This test ensures system properties are ignored if Settings load a GLES layer     */   ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[/**     * This test ensures that external GLES layers can be loaded by a debuggable app     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[ppStartTime);        Assert.assertTrue(GLES_LAYER_C + "" was not loaded"", glesResult.found);    }}])', 1), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[GPU]:[2]:method_text:[processable mandatory stream combinations are     * present and advertised accordingly.     */   ])', 1), ('([1:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[1]:method_text:[eyevent KEYCODE_WAKEUP"");        getDevice().executeShellCommand(""wm dismiss-keyguard"");    }   ])', 1), ('([4:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[4]:method_text:[e[0] = """";            origRefreshRate[1] = """";        }        return origRefreshRate;    }   ])', 1), ('([3:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[3]:method_text:[tStatsEnd());                latest = proto;            }        }        return latest;    }}])', 1), ('([2:/android/hardware/nativehardware/cts/HardwareBufferVrTest.java]:[GPU]:[2]:method_text:[s(format, buffer.getFormat());            assertEquals(flags, buffer.getUsage());        }    }}])', 1), ('([1:/android/view/cts/ASurfaceControlTest.java]:[GPU]:[1]:method_text:[                        return pixelCount == 0;                    }                });    }   ])', 1), ('([1:/android/graphics/cts/CameraVulkanGpuTest.java]:[GPU]:[1]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([9:/com/android/cts/deviceowner/VrTemperatureTest.java]:[GPU]:[9]:method_text:[inThrottlingThresholds, skinShutdownThresholds,                skinVrThrottlingThresholds);    }}])', 1), ('([1:/android/security/cts/ActivityManagerTest.java]:[android.googlesource.com]:[1]:method_text:[ow this exception        }    }    // b/144285917    @AsbSecurityTest(cveBugId = 144285917)   ])', 1), ('([2:/android/graphics/cts/SyncTest.java]:[GPU]:[2]:method_text:[er    public void teardown() throws Throwable {        EGL14.eglTerminate(mEglDisplay);    }   ])', 1), ('([1:/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java]:[GPU]:[1]:method_text:[ecurityException"");        } catch (SecurityException e) {            // Expected        }    }])', 1), ('([5:/android/view/cts/FrameMetricsListenerTest.java]:[GPU]:[5]:method_text:[rawFrameMetric,                (firstDrawFrameMetric == 0) || (firstDrawFrameMetric == 1));    }}])', 1), ('([2:/android/hardware/camera2/cts/ImageReaderTest.java]:[GPU]:[2]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 1), ('([2:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[2]:method_text:[package manager is the same as     * the public.libraries*.txt files in the partitions.     */   ])', 1), ('([1:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[1]:method_text:[iredLibs, optionalLibs, availableLibs, unavailableLibs)));        runInstalledTestApp();    }   ])', 1), ('([1:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[1]:method_text:[quiredLibs, optionalLibs, availableLibs, unavailableLibs)));        runInstalledTestApp();    }}])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[2]:method_text:[at=PNG,""                + ""icon_quality=100"";    }    @AsbSecurityTest(cveBugId = 109824443)   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[1]:method_text:[name mismatch"",                () -> runWithCaller(callerContext, () -> r.run())        );    }}])', 1), ('([1:/android/security/cts/RunningAppProcessInfoTest.java]:[android.googlesource.com]:[1]:method_text:[se/+"" +                ""/aaa0fee0d7a8da347a0c47cef5249c70efee209e"", (appList.size() == 1));    }}])', 1), ('([3:/android/hardware/cts/HardwareBufferTest.java]:[GPU]:[3]:method_text:[        1, HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE | HardwareBuffer.USAGE_GPU_COLOR_OUTPUT));    }}])', 1), ('([1:/android/dumpsys/cts/GfxInfoDumpsysTest.java]:[GPU]:[1]:method_text:[  foundAtLeastOneRow = true;            }        }        assertTrue(foundAtLeastOneRow);    }}])', 1)]"	"https://android.googlesource.com"	""	"[('GPU', 60), ('android.googlesource.com', 3)]"	"[('[android.hardware.camera2.cts.CameraExtensionSessionTest testConcurrentSessions CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testTextureImageWriterReaderOperation CtsCameraTestCases]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis CtsSustainedPerformanceHostTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigPublicNamespacesWithoutReadPermission CtsDeviceConfigTestCases]', 1), ('[android.graphics.cts.CameraGpuTest testCameraImageCaptureAndRendering CtsGraphicsTestCases]', 1), ('[android.renderscript.cts.refocus.RefocusTest testNewRefocus CtsRenderscriptTestCases]', 1), ('[android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test testSamplingRateMicToggleOffOnOff None]', 1), ('[android.graphics.cts.BitmapTest testWrapHardwareBufferWithRgbBufferButNonRgbColorSpaceFails CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkCompressBadParameter CtsGraphicsTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8426 CtsSecurityBulletinHostTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8427 CtsSecurityBulletinHostTestCases]', 1), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.appsecurity.cts.KeySetHostTest testBadUpgradeMissingPubKey CtsAppSecurityHostTestCases]', 1), ('[android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest isEmpty CtsGpuProfilingDataTestCases]', 1), ('[com.android.cts.deviceowner.HardwarePropertiesManagerTest testHardwarePropertiesManager None]', 1), ('[android.app.uiautomation.cts.UiAutomationTest testCallingPublicAPIsWithDontUseAccessibilityFlag_shouldNotThrowException CtsUiAutomationTestCases]', 1), ('[android.view.cts.PixelCopyTest testBufferQueueCrop CtsViewTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest currentTimeMillis CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testInjectLayerLoadVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testReleaseLayerLoadGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testMultipleExternalApps CtsGpuToolsHostTestCases]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables CtsCameraTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest killTestApp CtsIncidentHostTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testJankyDrawFrame CtsIncidentHostTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testDaveyDrawFrame CtsIncidentHostTestCases]', 1), ('[android.hardware.nativehardware.cts.HardwareBufferVrTest testLayeredBuffersForVr CtsNativeHardwareTestCases]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_setBufferOpaque_transparent CtsViewTestCases]', 1), ('[com.android.cts.deviceowner.VrTemperatureTest testVrTemperatures None]', 1), ('[android.security.cts.ActivityManagerTest testActivityManager_injectInputEvents CtsSecurityTestCases]', 1), ('[android.sensorratepermission.cts.debuggableapi31.DebuggableAPI31Test testDirectChannel None]', 1), ('[android.view.cts.FrameMetricsListenerTest testDropCount CtsViewTestCases]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected CtsCameraTestCases]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase getTestInformation None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase testNewAppDependsOnSomePublicLibraries None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase testNewAppOptionallyDependsOnSomePublicLibraries None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.security.cts.RunningAppProcessInfoTest testRunningAppProcessInfo CtsSecurityTestCases]', 1), ('[android.hardware.cts.HardwareBufferTest testIsSupported CtsHardwareTestCases]', 1), ('[android.dumpsys.cts.GfxInfoDumpsysTest testGfxinfoFramestats CtsDumpsysHostTestCases]', 1)]"
"9.10  Device Integrity"	"9.10"	"C-0-4"	"9.10/C-0-4"	"09100000.670004"	"""C-0-4] MUST NOT allow the read requests on a protected file to succeed      when the read content do not verify against a trusted key. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"7.4.5.2  IPv6"	"7.4.5.2"	"C-0-5"	"7.4.5.2/C-0-5"	"07040502.670005"	"""C-0-5] Rate-limiting MUST NOT cause the device to lose IPv6       connectivity on any IPv6-compliant network that uses RA lifetimes of       at least 180 seconds. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"7.4.5.1  Minimum Network Capability"	"7.4.5.1"	"C-0-1"	"7.4.5.1/C-0-1"	"07040501.670001"	"""C-0-1] MUST include support for one or more forms of data networking. Specifically, device implementations MUST include support for at least one data standard capable of 200 Kbit/sec or greater. Examples of     technologies that satisfy this requirement include EDGE, HSPA, EV-DO,     802.11g, Ethernet and Bluetooth PAN. *   SHOULD also include support for at least one common wireless data standard, such as 802.11 (Wi-Fi), when a physical networking standard (such as Ethernet) is the primary data connection. *   MAY implement more than one form of data connectivity.  """	""	""	"EDGE HSPA PAN"	""	""	""	""	"[('android.widget.cts.ExpandableListViewTest', 36), ('android.widget.cts.SimpleExpandableListAdapterTest', 28), ('android.text.util.cts.LinkifyTest', 24), ('android.processor.view.inspector.cts.PlatformInspectableProcessorTest', 17), ('android.text.style.cts.QuoteSpanTest', 12), ('android.text.style.cts.UnderlineSpanTest', 11), ('android.text.style.cts.AbsoluteSizeSpanTest', 11), ('android.text.method.cts.MetaKeyKeyListenerTest', 9), ('android.text.style.cts.ForegroundColorSpanTest', 8), ('android.devicepolicy.cts.AppUriAuthenticationPolicyTest', 8), ('android.text.style.cts.URLSpanTest', 8), ('android.text.method.cts.ArrowKeyMovementMethodTest', 6), ('android.text.style.cts.LeadingMarginSpan_StandardTest', 4), ('android.app.cts.ExpandableListActivityTest', 4), ('android.text.cts.DynamicLayoutTest', 4), ('android.accessibilityservice.cts.AccessibilityPaneTest', 4), ('android.appsecurity.cts.ListeningPortsTest', 4), ('android.permission.cts.OneTimePermissionTest', 4), ('android.view.cts.ViewConfigurationTest', 4), ('android.media.cts.AudioPreProcessingTest', 3), ('android.view.textclassifier.cts.TextViewIntegrationTest', 3), ('android.telephony.ims.cts.ImsServiceTest', 3), ('android.appsecurity.cts.PrivilegedUpdateTests', 3), ('com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest', 2), ('android.media.cts.MediaCodecTest', 2), ('android.graphics.cts.AImageDecoderTest', 2), ('android.webkit.cts.WebViewTest', 2), ('android.server.wm.WindowTest', 2), ('android.cts.backup.AutoRestoreHostSideTest', 2), ('android.sharesheet.cts.CtsSharesheetDeviceTest', 2), ('android.content.cts.ClipDescriptionTest', 2), ('android.server.wm.ForceRelayoutSdk29Test', 2), ('android.print.cts.CustomPrintOptionsTest', 1), ('android.graphics.cts.PictureTest', 1), ('android.media.cts.AudioManagerTest', 1), ('android.media.cts.EnvReverbTest', 1), ('android.app.cts.ActivityManagerProcessStateTest', 1), ('android.provider.cts.contacts.ContactsContract_AllUriTest', 1), ('android.hardware.cts.CameraGLTest', 1), ('android.media.cts.BassBoostTest', 1), ('android.util.cts.RationalTest', 1), ('android.content.cts.AvailableIntentsTest', 1), ('android.media.cts.LoudnessEnhancerTest', 1), ('android.slice.cts.SlicePermissionsTest', 1), ('android.providerui.cts.MediaStoreUiTest', 1), ('android.security.cts.SecurityTestCase', 1), ('com.android.cts.documentclient.DocumentsClientTest', 1), ('android.renderscript.cts.generated.TestStep', 1), ('android.print.cts.PrintAttributesTest', 1), ('com.android.cts.normalapp.ClientTest', 1), ('android.widget.cts.TabHost_TabSpecTest', 1), ('android.appsecurity.cts.listeningports.ListeningPortsTest', 1), ('android.print.cts.ClassParametersTest', 1), ('android.transition.cts.TransitionTest', 1)]"	"[('destroy', 82), ('toString', 62), ('StringBuilder', 21), ('ArgumentsFloatFloatFloat', 10), ('ArgumentsHalfHalfHalf', 10), ('Builder', 10), ('setup', 8), ('setUp', 8), ('build', 7), ('getInstrumentation', 6), ('getTargetContext', 4), ('length', 3), ('getContext', 3), ('getMock', 2), ('getSession', 2), ('getCropRect', 2), ('getWidth', 2), ('getHeight', 2), ('getAccessibilityPaneTitle', 2), ('getPaneNode', 2), ('getPaneTitle', 2), ('tearDown', 2), ('getPackageManager', 2), ('getTextLink', 2), ('getActivity', 2), ('getPages', 1), ('setUpServicesAndAdapter', 1), ('getService', 1), ('getMediaDirString', 1), ('getAssetManager', 1), ('getResources', 1), ('getFd', 1), ('getExifImages', 1), ('TextPaint', 1), ('AccessibilityDumpOnFailureRule', 1), ('oneTimeSetup', 1), ('getUiAutomation', 1), ('paneTitleFromXml_reportedToAccessibility', 1), ('windowLikeViewSettersWork_andNewValuesReportedToAccessibility', 1), ('group', 1), ('getExternalStorageDirectory', 1), ('getAbsolutePath', 1), ('checkStepFloatFloatFloat', 1), ('checkStepFloat2Float2Float2', 1), ('checkStepFloat3Float3Float3', 1), ('checkStepFloat4Float4Float4', 1), ('checkStepHalfHalfHalf', 1), ('checkStepHalf2Half2Half2', 1), ('checkStepHalf3Half3Half3', 1), ('checkStepHalf4Half4Half4', 1), ('checkStepFloat2FloatFloat2', 1), ('checkStepFloat3FloatFloat3', 1), ('checkStepFloat4FloatFloat4', 1), ('checkStepHalf2HalfHalf2', 1), ('checkStepHalf3HalfHalf3', 1), ('checkStepHalf4HalfHalf4', 1), ('checkStepFloatFloat2Float2', 1), ('checkStepFloatFloat3Float3', 1), ('checkStepFloatFloat4Float4', 1), ('checkStepHalfHalf2Half2', 1), ('checkStepHalfHalf3Half3', 1), ('checkStepHalfHalf4Half4', 1), ('getPrinters', 1), ('wakeUp', 1), ('getDevice', 1), ('uninstall_pruneInstantApp_shouldNotBeUserInitiated', 1), ('getApplicationContext', 1), ('smartLinkify', 1), ('getScenario', 1), ('AtomicInteger', 1), ('getInstance', 1), ('getStart', 1), ('getEnd', 1), ('smartSelection_cancelSelectionDoesNotInvokeClassifyText', 1), ('wakeUpScreen', 1), ('installApp', 1), ('prepareDeviceForOneTime', 1), ('uninstallApp', 1), ('restoreDeviceForOneTime', 1), ('illegalPrintAttributesDuplexMode', 1), ('addAppAndUriMapping_nullUri_throwException', 1), ('addAppAndUriMapping_nullPackageName_throwException', 1), ('addAppAndUriMapping_nullAlias_throwException', 1), ('equals_sameAuthenticationPolicy_equal', 1), ('equals_differentAuthenticationPolicy_notEqual', 1), ('Random', 1)]"	"[('CtsTextTestCases', 97), ('CtsWidgetTestCases', 65), ('CtsViewInspectorAnnotationProcessorTestCases', 17), ('CtsMediaTestCases', 9), ('CtsDevicePolicyTestCases', 8), ('CtsAppSecurityHostTestCases', 7), ('CtsAppTestCases', 5), ('CtsAccessibilityServiceTestCases', 4), ('CtsPermissionTestCases', 4), ('CtsViewTestCases', 4), ('CtsPrintTestCases', 3), ('CtsGraphicsTestCases', 3), ('CtsContentTestCases', 3), ('CtsTextClassifierTestCases', 3), ('CtsTelephonyTestCases', 3), ('CtsDevicePolicyManagerTestCases', 2), ('CtsWebkitTestCases', 2), ('CtsWindowManagerDeviceTestCases', 2), ('CtsBackupHostTestCases', 2), ('CtsSharesheetTestCases', 2), ('CtsWindowManagerSdk29TestCases', 2), ('CtsContactsProviderTestCases', 1), ('CtsCameraTestCases', 1), ('CtsUtilTestCases', 1), ('CtsSliceTestCases', 1), ('CtsProviderUiTestCases', 1), ('CtsSecurityBulletinHostTestCases', 1), ('CtsRenderscriptTestCases', 1), ('CtsTransitionTestCases', 1)]"	""	""	""	""	"android.widget.cts.ExpandableListViewTest"	"getActivity"	"CtsWidgetTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 36), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/SimpleExpandableListAdapterTest.java', 28), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/util/cts/LinkifyTest.java', 24), ('/home/gpoor/cts-12-source/cts/tests/tests/tools/processors/view_inspector/src/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java', 17), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/style/cts/QuoteSpanTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/style/cts/UnderlineSpanTest.java', 11), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/style/cts/AbsoluteSizeSpanTest.java', 11), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/MetaKeyKeyListenerTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/style/cts/ForegroundColorSpanTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/AppUriAuthenticationPolicyTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/style/cts/URLSpanTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/ArrowKeyMovementMethodTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/style/cts/LeadingMarginSpan_StandardTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ExpandableListActivityTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/cts/DynamicLayoutTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityPaneTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ListeningPortsTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioPreProcessingTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/textclassifier/src/android/view/textclassifier/cts/TextViewIntegrationTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsServiceTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PrivilegedUpdateTests.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaCodecTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/AImageDecoderTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/src/android/cts/backup/AutoRestoreHostSideTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/sharesheet/src/android/sharesheet/cts/CtsSharesheetDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/testsdk29/src/android/server/wm/ForceRelayoutSdk29Test.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/CustomPrintOptionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/PictureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/EnvReverbTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_AllUriTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/cts/CameraGLTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/BassBoostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/util/src/android/util/cts/RationalTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/LoudnessEnhancerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/slice/src/android/slice/cts/SlicePermissionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/providerui/src/android/providerui/cts/MediaStoreUiTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/SecurityTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/DocumentClient/src/com/android/cts/documentclient/DocumentsClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestStep.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrintAttributesTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/NormalApp/src/com/android/cts/normalapp/ClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/TabHost_TabSpecTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ListeningPortsApp/src/android/appsecurity/cts/listeningports/ListeningPortsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/ClassParametersTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/transition/src/android/transition/cts/TransitionTest.java', 1)]"	"[('(9,EDGE,/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java)', 1), ('(1,EDGE,/android/print/cts/CustomPrintOptionsTest.java)', 1), ('(1,EDGE,/android/graphics/cts/PictureTest.java)', 1), ('(1,PAN,/android/media/cts/MediaCodecTest.java)', 1), ('(1,EDGE,/android/media/cts/MediaCodecTest.java)', 1), ('(1,EDGE,/android/media/cts/AudioManagerTest.java)', 1), ('(91,PAN,/android/text/style/cts/UnderlineSpanTest.java)', 1), ('(1,EDGE,/android/media/cts/EnvReverbTest.java)', 1), ('(1,PAN,/android/app/cts/ActivityManagerProcessStateTest.java)', 1), ('(1,PAN,/android/provider/cts/contacts/ContactsContract_AllUriTest.java)', 1), ('(2,PAN,/android/graphics/cts/AImageDecoderTest.java)', 1), ('(2,EDGE,/android/webkit/cts/WebViewTest.java)', 1), ('(29,PAN,/android/text/method/cts/ArrowKeyMovementMethodTest.java)', 1), ('(3,EDGE,/android/hardware/cts/CameraGLTest.java)', 1), ('(1,EDGE,/android/media/cts/BassBoostTest.java)', 1), ('(80,PAN,/android/text/style/cts/QuoteSpanTest.java)', 1), ('(8,PAN,/android/server/wm/WindowTest.java)', 1), ('(3,EDGE,/android/media/cts/AudioPreProcessingTest.java)', 1), ('(8,PAN,/android/text/style/cts/LeadingMarginSpan_StandardTest.java)', 1), ('(211,PAN,/android/text/method/cts/MetaKeyKeyListenerTest.java)', 1), ('(3,PAN,/android/util/cts/RationalTest.java)', 1), ('(1,PAN,/android/content/cts/AvailableIntentsTest.java)', 1), ('(1,EDGE,/android/media/cts/LoudnessEnhancerTest.java)', 1), ('(6,PAN,/android/app/cts/ExpandableListActivityTest.java)', 1), ('(17,PAN,/android/text/cts/DynamicLayoutTest.java)', 1), ('(1,PAN,/android/slice/cts/SlicePermissionsTest.java)', 1), ('(9,PAN,/android/providerui/cts/MediaStoreUiTest.java)', 1), ('(3,PAN,/android/cts/backup/AutoRestoreHostSideTest.java)', 1), ('(42,PAN,/android/accessibilityservice/cts/AccessibilityPaneTest.java)', 1), ('(4,PAN,/android/sharesheet/cts/CtsSharesheetDeviceTest.java)', 1), ('(4,PAN,/android/security/cts/SecurityTestCase.java)', 1), ('(333,PAN,/android/text/util/cts/LinkifyTest.java)', 1), ('(2,HSPA,/android/text/util/cts/LinkifyTest.java)', 1), ('(45,PAN,/android/text/style/cts/ForegroundColorSpanTest.java)', 1), ('(2,PAN,/com/android/cts/documentclient/DocumentsClientTest.java)', 1), ('(323,EDGE,/android/renderscript/cts/generated/TestStep.java)', 1), ('(2,EDGE,/android/print/cts/PrintAttributesTest.java)', 1), ('(10,PAN,/android/content/cts/ClipDescriptionTest.java)', 1), ('(4,EDGE,/android/appsecurity/cts/ListeningPortsTest.java)', 1), ('(2,PAN,/com/android/cts/normalapp/ClientTest.java)', 1), ('(2,PAN,/android/widget/cts/TabHost_TabSpecTest.java)', 1), ('(23,PAN,/android/view/textclassifier/cts/TextViewIntegrationTest.java)', 1), ('(1,EDGE,/android/appsecurity/cts/listeningports/ListeningPortsTest.java)', 1), ('(3,EDGE,/android/telephony/ims/cts/ImsServiceTest.java)', 1), ('(3,PAN,/android/server/wm/ForceRelayoutSdk29Test.java)', 1), ('(15,PAN,/android/permission/cts/OneTimePermissionTest.java)', 1), ('(1,EDGE,/android/print/cts/ClassParametersTest.java)', 1), ('(95,PAN,/android/widget/cts/SimpleExpandableListAdapterTest.java)', 1), ('(67,PAN,/android/text/style/cts/AbsoluteSizeSpanTest.java)', 1), ('(16,PAN,/android/devicepolicy/cts/AppUriAuthenticationPolicyTest.java)', 1), ('(8,PAN,/android/appsecurity/cts/PrivilegedUpdateTests.java)', 1), ('(40,PAN,/android/text/style/cts/URLSpanTest.java)', 1), ('(51,PAN,/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java)', 1), ('(7,PAN,/android/view/cts/ViewConfigurationTest.java)', 1), ('(4,EDGE,/android/view/cts/ViewConfigurationTest.java)', 1), ('(3,PAN,/android/transition/cts/TransitionTest.java)', 1), ('(300,PAN,/android/widget/cts/ExpandableListViewTest.java)', 1)]"	"[('([1:/android/appsecurity/cts/ListeningPortsTest.java]:[EDGE]:[1]:method_text:[  * unauthorized access to computers systems without user knowledge or     * awareness.     */   ])', 3), ('([2:/android/devicepolicy/cts/AppUriAuthenticationPolicyTest.java]:[PAN]:[2]:method_text:[llPointerException expected) {            // Expected behavior, nothing to do.        }    }   ])', 3), ('([36:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[PAN]:[36]:method_text:[      assertEquals(Spanned.SPAN_POINT_POINT, text.getSpanFlags(Selection.SELECTION_END));    }   ])', 2), ('([1:/android/telephony/ims/cts/ImsServiceTest.java]:[EDGE]:[1]:method_text:[(SmsReceiverHelper.EXTRA_RESULT_CODE,                        Activity.RESULT_CANCELED));    }   ])', 2), ('([4:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[EDGE]:[4]:method_text:[sionTest"",                    ""testClearComplianceSharedPreference"", mUserId);        }    }   ])', 1), ('([5:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[EDGE]:[5]:method_text:[sionTest"",                    ""testClearComplianceSharedPreference"", mUserId);        }    }   ])', 1), ('([1:/android/print/cts/CustomPrintOptionsTest.java]:[EDGE]:[1]:method_text:[Helper.cancelPrinting();        waitForPrinterDiscoverySessionDestroyCallbackCalled(1);    }   ])', 1), ('([1:/android/graphics/cts/PictureTest.java]:[EDGE]:[1]:method_text:[ed picture from actively recording picture    //   - actively recording picture after draw call   ])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[PAN]:[1]:method_text:[ts:     * <br> dequeueInputBuffer() fails when encoder configured with an input Surface     */   ])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[EDGE]:[1]:method_text:[s are thrown from MediaCodec     * methods when called in incorrect operational states.     */   ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[EDGE]:[1]:method_text:[ibutes() require privledged permission MODIFY_AUDIO_ROUTING    // and thus cannot be tested here.}])', 1), ('([4:/android/text/style/cts/UnderlineSpanTest.java]:[PAN]:[4]:method_text:[junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class UnderlineSpanTest {   ])', 1), ('([2:/android/text/style/cts/UnderlineSpanTest.java]:[PAN]:[2]:method_text:[            new UnderlineSpan(p);        } finally {            p.recycle();        }    }   ])', 1), ('([4:/android/text/style/cts/UnderlineSpanTest.java]:[PAN]:[4]:method_text:[));        underlineSpan.updateDrawState(tp);        assertTrue(tp.isUnderlineText());    }   ])', 1), ('([4:/android/text/style/cts/UnderlineSpanTest.java]:[PAN]:[4]:method_text:[neSpan underlineSpan = new UnderlineSpan();        underlineSpan.updateDrawState(null);    }   ])', 1), ('([4:/android/text/style/cts/UnderlineSpanTest.java]:[PAN]:[4]:method_text:[erlineSpan underlineSpan = new UnderlineSpan();        underlineSpan.describeContents();    }   ])', 1), ('([6:/android/text/style/cts/UnderlineSpanTest.java]:[PAN]:[6]:method_text:[UnderlineSpan underlineSpan = new UnderlineSpan();        underlineSpan.getSpanTypeId();    }   ])', 1), ('([6:/android/text/style/cts/UnderlineSpanTest.java]:[PAN]:[6]:method_text:[  text, 0, text.length(), tp, largeWidth).build();        return layout.getLineWidth(0);    }   ])', 1), (""([33:/android/text/style/cts/UnderlineSpanTest.java]:[PAN]:[33]:method_text:[ss is identical to UnderlineSpan in visual behavior, so it shouldn't affect width    // either.   ])"", 1), (""([10:/android/text/style/cts/UnderlineSpanTest.java]:[PAN]:[10]:method_text:[UnderlineSpan is used    // that doesn't draw an underline. This shouldn't affect width either.   ])"", 1), ('([12:/android/text/style/cts/UnderlineSpanTest.java]:[PAN]:[12]:method_text:[   // MetricAffectingSpan, but we need to keep it behaving correctly for backward compatibility.   ])', 1), ('([6:/android/text/style/cts/UnderlineSpanTest.java]:[PAN]:[6]:method_text:[LineWidth = textWidth(text);        assertTrue(underlinedLineWidth > origLineWidth + 1.0f);    }}])', 1), ('([1:/android/media/cts/EnvReverbTest.java]:[EDGE]:[1]:method_text:[Reverb();        }    }    //Test case 2.1: test setEnabled() throws exception after release   ])', 1), ('([1:/android/app/cts/ActivityManagerProcessStateTest.java]:[PAN]:[1]:method_text:[    /**     * Test FGS compatibility with START_STICKY flag.     * @throws Exception     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[PAN]:[1]:method_text:[lIfFailed();//    }    /**     * Make sure all URLs are accessible with a selection.     */   ])', 1), ('([1:/android/graphics/cts/AImageDecoderTest.java]:[PAN]:[1]:method_text:[               crop.left, crop.top, crop.right, crop.bottom);        nCloseAsset(asset);    }   ])', 1), ('([1:/android/graphics/cts/AImageDecoderTest.java]:[PAN]:[1]:method_text:[       R.drawable.webp_orientation7,            R.drawable.webp_orientation8,        };    }   ])', 1), ('([1:/android/webkit/cts/WebViewTest.java]:[EDGE]:[1]:method_text:[lCount;                }            }.run();        }        return pictureRef.get();    }   ])', 1), ('([1:/android/webkit/cts/WebViewTest.java]:[EDGE]:[1]:method_text:[eturn listener.callCount > oldCallCount;            }        }.run();    }    @UiThreadTest   ])', 1), ('([2:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[PAN]:[2]:method_text:[    PollingCheck.waitFor(() -> mTextView.isFocused() && (mTextView.getLayout() != null));    }   ])', 1), ('([2:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[PAN]:[2]:method_text:[ mArrowKeyMovementMethod.onTakeFocus(mTextView, null, View.FOCUS_DOWN);    }    @UiThreadTest   ])', 1), ('([2:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[PAN]:[2]:method_text:[od.onTouchEvent(mTextView, null, MotionEvent.obtain(0, 0, 0, 1, 1, 0));    }    @UiThreadTest   ])', 1), ('([14:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[PAN]:[14]:method_text:[electionStart(spannable));        assertEquals(0, Selection.getSelectionEnd(spannable));    }   ])', 1), ('([2:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[PAN]:[2]:method_text:[hen param spannable is null        method.initialize(mTextView, null);    }    @UiThreadTest   ])', 1), ('([7:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[PAN]:[7]:method_text:[c   ?:?    \\n\\n""            + ""lectus porta consequ\\u00e4t...  LOReM iPSuM"";    @UiThreadTest   ])', 1), ('([3:/android/hardware/cts/CameraGLTest.java]:[EDGE]:[3]:method_text:["";        // Magic key        private static final int GL_TEXTURE_EXTERNAL_OES = 0x8D65;    }}])', 1), ('([1:/android/media/cts/BassBoostTest.java]:[EDGE]:[1]:method_text:[sBoost();        }    }    //Test case 2.1: test setEnabled() throws exception after release   ])', 1), ('([2:/android/text/style/cts/QuoteSpanTest.java]:[PAN]:[2]:method_text:[org.junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class QuoteSpanTest {   ])', 1), ('([9:/android/text/style/cts/QuoteSpanTest.java]:[PAN]:[9]:method_text:[       assertTrue(span.getGapWidth() > 0);        assertTrue(span.getStripeWidth() > 0);    }   ])', 1), ('([9:/android/text/style/cts/QuoteSpanTest.java]:[PAN]:[9]:method_text:[       assertTrue(span.getStripeWidth() > 0);        assertTrue(span.getGapWidth() > 0);    }   ])', 1), ('([7:/android/text/style/cts/QuoteSpanTest.java]:[PAN]:[7]:method_text:[    assertEquals(10, span.getStripeWidth());        assertEquals(5, span.getGapWidth());    }   ])', 1), ('([11:/android/text/style/cts/QuoteSpanTest.java]:[PAN]:[11]:method_text:[sertEquals(5, span.getGapWidth());        } finally {            p.recycle();        }    }   ])', 1), ('([5:/android/text/style/cts/QuoteSpanTest.java]:[PAN]:[5]:method_text:[();        quoteSpan.getLeadingMargin(true);        quoteSpan.getLeadingMargin(false);    }   ])', 1), ('([7:/android/text/style/cts/QuoteSpanTest.java]:[PAN]:[7]:method_text:[Span = new QuoteSpan(Color.BLUE);        assertEquals(Color.BLUE, quoteSpan.getColor());    }   ])', 1), ('([4:/android/text/style/cts/QuoteSpanTest.java]:[PAN]:[4]:method_text:[aint();        quoteSpan.drawLeadingMargin(c, p, 0, 0, 0, 0, 0, null, 0, 0, true, null);    }   ])', 1), ('([4:/android/text/style/cts/QuoteSpanTest.java]:[PAN]:[4]:method_text:[        quoteSpan.drawLeadingMargin(null, null, 0, 0, 0, 0, 0, null, 0, 0, true, null);    }   ])', 1), ('([4:/android/text/style/cts/QuoteSpanTest.java]:[PAN]:[4]:method_text:[    QuoteSpan quoteSpan = new QuoteSpan(Color.RED);        quoteSpan.describeContents();    }   ])', 1), ('([6:/android/text/style/cts/QuoteSpanTest.java]:[PAN]:[6]:method_text:[       QuoteSpan quoteSpan = new QuoteSpan(Color.RED);        quoteSpan.getSpanTypeId();    }   ])', 1), ('([12:/android/text/style/cts/QuoteSpanTest.java]:[PAN]:[12]:method_text:[lculateLeadingMargin(int stripeWidth, int gapWidth) {        return stripeWidth + gapWidth;    }}])', 1), ('([1:/android/server/wm/WindowTest.java]:[PAN]:[1]:method_text:[hanged, used.     * getCallback: Return the current Callback interface for this window.     */   ])', 1), ('([7:/android/server/wm/WindowTest.java]:[PAN]:[7]:method_text:[      @Override        public int getNavigationBarColor() {            return 0;        }    }}])', 1), ('([1:/android/media/cts/AudioPreProcessingTest.java]:[EDGE]:[1]:method_text:[ion    //----------------------------------    //Test case 2.1: test AEC creation and release   ])', 1), ('([1:/android/media/cts/AudioPreProcessingTest.java]:[EDGE]:[1]:method_text:[ion    //----------------------------------    //Test case 3.1: test AGC creation and release   ])', 1), ('([1:/android/media/cts/AudioPreProcessingTest.java]:[EDGE]:[1]:method_text:[eption e) {            fail(""AudioRecord invalid parameter"");        }        return ar;    }}])', 1), ('([3:/android/text/style/cts/LeadingMarginSpan_StandardTest.java]:[PAN]:[3]:method_text:[RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class LeadingMarginSpan_StandardTest {   ])', 1), ('([2:/android/text/style/cts/LeadingMarginSpan_StandardTest.java]:[PAN]:[2]:method_text:[dard.getLeadingMargin(true));        assertEquals(-1, standard.getLeadingMargin(false));    }   ])', 1), ('([1:/android/text/style/cts/LeadingMarginSpan_StandardTest.java]:[PAN]:[1]:method_text:[;        standard.drawLeadingMargin(null, null, 0, 0, 0, 0, 0, null, 0, 0, false, null);    }   ])', 1), ('([2:/android/text/style/cts/LeadingMarginSpan_StandardTest.java]:[PAN]:[2]:method_text:[TypeId() {        Standard standard = new Standard(1);        standard.getSpanTypeId();    }   ])', 1), ('([2:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[PAN]:[2]:method_text:[@RunWith(AndroidJUnit4.class)public class MetaKeyKeyListenerTest extends KeyListenerTestCase {   ])', 1), (""([18:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[PAN]:[18]:method_text:[KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_3));        assertEquals('3', content.charAt(3));    }   ])"", 1), ('([18:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[PAN]:[18]:method_text:[CTION_DOWN, KeyEvent.KEYCODE_3));        assertEquals(str.charAt(3), content.charAt(3));    }   ])', 1), ('([37:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[PAN]:[37]:method_text:[   assertEquals(Spanned.SPAN_POINT_POINT, content.getSpanFlags(Selection.SELECTION_END));    }   ])', 1), ('([37:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[PAN]:[37]:method_text:[      assertEquals(Spanned.SPAN_POINT_POINT, text.getSpanFlags(Selection.SELECTION_END));    }   ])', 1), ('([15:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[PAN]:[15]:method_text:[hould throw NullPointerException."");        } catch (NullPointerException e) {        }    }   ])', 1), ('([12:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[PAN]:[12]:method_text:[    public CharSequence subSequence(int start, int end) {            return null;        }    }}])', 1), ('([3:/android/util/cts/RationalTest.java]:[PAN]:[3]:method_text:[, flipAndReduce.getNumerator());        assertEquals(2, flipAndReduce.getDenominator());    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[PAN]:[1]:method_text:[          assertCanBeHandled(new Intent(Settings.ACTION_NFC_PAYMENT_SETTINGS));        }    }   ])', 1), ('([1:/android/media/cts/LoudnessEnhancerTest.java]:[EDGE]:[1]:method_text:[hancer();        }    }    //Test case 2.1: test setEnabled() throws exception after release   ])', 1), ('([3:/android/app/cts/ExpandableListActivityTest.java]:[PAN]:[3]:method_text:[ent"", new ComponentName(getContext(),                ExpandableListTestActivity.class));    }   ])', 1), ('([1:/android/app/cts/ExpandableListActivityTest.java]:[PAN]:[1]:method_text:[public void testSelect() {        runLaunchpad(LaunchpadActivity.EXPANDLIST_SELECT);    }    ])', 1), ('([1:/android/app/cts/ExpandableListActivityTest.java]:[PAN]:[1]:method_text:[public void testView() {        runLaunchpad(LaunchpadActivity.EXPANDLIST_VIEW);    }    ])', 1), ('([1:/android/app/cts/ExpandableListActivityTest.java]:[PAN]:[1]:method_text:[public void testCallback() {        runLaunchpad(LaunchpadActivity.EXPANDLIST_CALLBACK);    }}])', 1), ('([4:/android/text/cts/DynamicLayoutTest.java]:[PAN]:[4]:method_text:[nt();        mDynamicLayout = createBuilderWithDefaults(MULTLINE_CHAR_SEQUENCE).build();    }   ])', 1), ('([2:/android/text/cts/DynamicLayoutTest.java]:[PAN]:[2]:method_text:[dd,                spacingMultiplier);        assertLineSpecs(expected, dynamicLayout);    }   ])', 1), ('([2:/android/text/cts/DynamicLayoutTest.java]:[PAN]:[2]:method_text:[;            assertEquals(expected.getLineBottom(i), actual.getLineBottom(i));        }    }   ])', 1), ('([9:/android/text/cts/DynamicLayoutTest.java]:[PAN]:[9]:method_text:[neSpacing(SPACING_ADD_NO_SCALE, SPACING_MULT_NO_SCALE)                .setIncludePad(true);    }}])', 1), ('([1:/android/slice/cts/SlicePermissionsTest.java]:[PAN]:[1]:method_text:[ANTED,                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));    }   ])', 1), ('([9:/android/providerui/cts/MediaStoreUiTest.java]:[PAN]:[9]:method_text:[                FileUtils.copy(source, target);            }        }        return file;    }}])', 1), (""([1:/android/cts/backup/AutoRestoreHostSideTest.java]:[PAN]:[1]:method_text:[  *   <li>Install the package again and verify shared prefs aren't restored     * </ol>     */   ])"", 1), ('([2:/android/cts/backup/AutoRestoreHostSideTest.java]:[PAN]:[2]:method_text:[cedure(String testName) throws Exception {        runDeviceTests(PACKAGE, CLASS, testName);    }}])', 1), ('([6:/android/accessibilityservice/cts/AccessibilityPaneTest.java]:[PAN]:[6]:method_text:[ainSync(() ->  {            mPaneView = mActivity.findViewById(R.id.button);        });    }   ])', 1), ('([11:/android/accessibilityservice/cts/AccessibilityPaneTest.java]:[PAN]:[11]:method_text:[eInfo paneNode = getPaneNode();        assertEquals(paneTitle, paneNode.getPaneTitle());    }   ])', 1), ('([7:/android/accessibilityservice/cts/AccessibilityPaneTest.java]:[PAN]:[7]:method_text:[wLikeNode = getPaneNode();        assertEquals(newTitle, windowLikeNode.getPaneTitle());    }   ])', 1), ('([18:/android/accessibilityservice/cts/AccessibilityPaneTest.java]:[PAN]:[18]:method_text:[OnMainSync(                () -> ((View) mPaneView.getParent()).setVisibility(visibility));    }}])', 1), ('([2:/android/sharesheet/cts/CtsSharesheetDeviceTest.java]:[PAN]:[2]:method_text:[nding on test success, close it if it is            closeSharesheetIfNeeded();        }    }   ])', 1), ('([2:/android/sharesheet/cts/CtsSharesheetDeviceTest.java]:[PAN]:[2]:method_text:[indObject(By.textContains(containsText)),                WAIT_AND_ASSERT_FOUND_TIMEOUT_MS);    }}])', 1), ('([4:/android/security/cts/SecurityTestCase.java]:[PAN]:[4]:method_text:[y managed.     *     * Example of skipping a test based on mainline modules:     *  <pre>     * ])', 1), ('([3:/android/text/util/cts/LinkifyTest.java]:[PAN]:[3]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([25:/android/text/util/cts/LinkifyTest.java]:[PAN]:[25]:method_text:[il.com"", spans[0].getURL());        assertFalse(Linkify.addLinks((Spannable) null, 0));    }   ])', 1), ('([2:/android/text/util/cts/LinkifyTest.java]:[PAN]:[2]:method_text:[bUrls() {        Linkify.addLinks((Spannable) null, Linkify.WEB_URLS);    }    @UiThreadTest   ])', 1), ('([17:/android/text/util/cts/LinkifyTest.java]:[PAN]:[17]:method_text:[.getURL());        assertFalse(Linkify.addLinks((TextView) null, 0));    }    @UiThreadTest   ])', 1), ('([22:/android/text/util/cts/LinkifyTest.java]:[PAN]:[22]:method_text:[URL());        assertEquals(""test:AZ0101.pattern"", spans[1].getURL());    }    @UiThreadTest   ])', 1), ('([30:/android/text/util/cts/LinkifyTest.java]:[PAN]:[30]:method_text:[spans[0].getURL());        assertEquals(""test:12"", spans[1].getURL());    }    @UiThreadTest   ])', 1), ('([25:/android/text/util/cts/LinkifyTest.java]:[PAN]:[25]:method_text:[URL());        assertEquals(""test:AZ0101.pattern"", spans[1].getURL());    }    @UiThreadTest   ])', 1), ('([3:/android/text/util/cts/LinkifyTest.java]:[PAN]:[3]:method_text:[      Linkify.addLinks((Spannable)null, LINKIFY_TEST_PATTERN, ""Test:"");    }    @UiThreadTest   ])', 1), ('([5:/android/text/util/cts/LinkifyTest.java]:[PAN]:[5]:method_text:[annable = new SpannableString(text);        Linkify.addLinks(spannable, null, ""Test:"");    }   ])', 1), ('([48:/android/text/util/cts/LinkifyTest.java]:[PAN]:[48]:method_text:[spans[0].getURL());        assertEquals(""test:12"", spans[1].getURL());    }    @UiThreadTest   ])', 1), ('([3:/android/text/util/cts/LinkifyTest.java]:[PAN]:[3]:method_text:[,                mMatchFilterStartWithDot, mTransformFilterUpperChar);    }    @UiThreadTest   ])', 1), ('([5:/android/text/util/cts/LinkifyTest.java]:[PAN]:[5]:method_text:[ble, null, ""Test:"", mMatchFilterStartWithDot,                mTransformFilterUpperChar);    }   ])', 1), ('([30:/android/text/util/cts/LinkifyTest.java]:[PAN]:[30]:method_text:[y.addLinks((Spannable) null, 0));    }    // Add links with scheme (array)    @UiThreadTest   ])', 1), ('([5:/android/text/util/cts/LinkifyTest.java]:[PAN]:[5]:method_text:[s[0].getURL());        assertEquals(""android.com"", spans[1].getURL());    }    @UiThreadTest   ])', 1), ('([5:/android/text/util/cts/LinkifyTest.java]:[PAN]:[5]:method_text:[tURL());        assertEquals(""http://android.com"", spans[1].getURL());    }    @UiThreadTest   ])', 1), ('([4:/android/text/util/cts/LinkifyTest.java]:[PAN]:[4]:method_text:[length);        assertEquals(""http://android.com"", spans[0].getURL());    }    @UiThreadTest   ])', 1), ('([7:/android/text/util/cts/LinkifyTest.java]:[PAN]:[7]:method_text:[xtends URLSpan {        public MyUrlSpan(String url) {            super(url);        }    }   ])', 1), ('([29:/android/text/util/cts/LinkifyTest.java]:[PAN]:[29]:method_text:[s(0, spannable.length(), URLSpan.class);        assertArrayEquals(myUrlSpans, urlSpans);    }   ])', 1), ('([28:/android/text/util/cts/LinkifyTest.java]:[PAN]:[28]:method_text:[n.class);        assertArrayEquals(myUrlSpans, urlSpans);    }    // WEB_URLS Related Tests   ])', 1), ('([4:/android/text/util/cts/LinkifyTest.java]:[PAN]:[4]:method_text:[e, Linkify.ALL);        assertFalse(""Should not add link with unknown TLD"", linksAdded);    }   ])', 1), ('([1:/android/text/util/cts/LinkifyTest.java]:[PAN]:[1]:method_text:[rlSucceeds(""Should match URL without a TLD and starting with http"",                url);    }   ])', 1), ('([32:/android/text/util/cts/LinkifyTest.java]:[PAN]:[32]:method_text:[ matches(CharSequence arg) {            return mReference.equals(arg.toString());        }    }}])', 1), ('([1:/android/text/util/cts/LinkifyTest.java]:[HSPA]:[1]:method_text:[s(0, spannable.length(), URLSpan.class);        assertArrayEquals(myUrlSpans, urlSpans);    }   ])', 1), ('([1:/android/text/util/cts/LinkifyTest.java]:[HSPA]:[1]:method_text:[n.class);        assertArrayEquals(myUrlSpans, urlSpans);    }    // WEB_URLS Related Tests   ])', 1), ('([2:/android/text/style/cts/ForegroundColorSpanTest.java]:[PAN]:[2]:method_text:[runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class ForegroundColorSpanTest {   ])', 1), ('([3:/android/text/style/cts/ForegroundColorSpanTest.java]:[PAN]:[3]:method_text:[       new ForegroundColorSpan(p);        } finally {            p.recycle();        }    }   ])', 1), ('([7:/android/text/style/cts/ForegroundColorSpanTest.java]:[PAN]:[7]:method_text:[olor.BLACK);        assertEquals(Color.BLACK, foregroundColorSpan.getForegroundColor());    }   ])', 1), ('([7:/android/text/style/cts/ForegroundColorSpanTest.java]:[PAN]:[7]:method_text:[regroundColorSpan.updateDrawState(tp);        assertEquals(Color.DKGRAY, tp.getColor());    }   ])', 1), ('([4:/android/text/style/cts/ForegroundColorSpanTest.java]:[PAN]:[4]:method_text:[ new ForegroundColorSpan(Color.CYAN);        foregroundColorSpan.updateDrawState(null);    }   ])', 1), ('([4:/android/text/style/cts/ForegroundColorSpanTest.java]:[PAN]:[4]:method_text:[pan = new ForegroundColorSpan(Color.RED);        foregroundColorSpan.describeContents();    }   ])', 1), ('([6:/android/text/style/cts/ForegroundColorSpanTest.java]:[PAN]:[6]:method_text:[orSpan = new ForegroundColorSpan(Color.RED);        foregroundColorSpan.getSpanTypeId();    }   ])', 1), ('([12:/android/text/style/cts/ForegroundColorSpanTest.java]:[PAN]:[12]:method_text:[lor.MAGENTA, f.getForegroundColor());        } finally {            p.recycle();        }    }}])', 1), ('([2:/com/android/cts/documentclient/DocumentsClientTest.java]:[PAN]:[2]:method_text:[id tearDown() throws Exception {        super.tearDown();        deleteTestDirectory();    }   ])', 1), ('([323:/android/renderscript/cts/generated/TestStep.java]:[EDGE]:[323]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([2:/android/print/cts/PrintAttributesTest.java]:[EDGE]:[2]:method_text:[ibutes to the first selection.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([2:/android/content/cts/ClipDescriptionTest.java]:[PAN]:[2]:method_text:[        mUiDevice.wakeUp();        launchActivity(MockActivity.class);    }    @UiThreadTest   ])', 1), ('([8:/android/content/cts/ClipDescriptionTest.java]:[PAN]:[8]:method_text:[        assertThat(clipboardManager.getPrimaryClipDescription().isStyledText()).isTrue();    }   ])', 1), ('([1:/android/appsecurity/cts/ListeningPortsTest.java]:[EDGE]:[1]:method_text:[uthorized access to computers systems without user knowledge or     * awareness.     */    /*   ])', 1), ('([2:/com/android/cts/normalapp/ClientTest.java]:[PAN]:[2]:method_text:[rruptedException e) {                throw new RuntimeException(e);            }        }    }}])', 1), ('([2:/android/widget/cts/TabHost_TabSpecTest.java]:[PAN]:[2]:method_text:[ {            final ListView lv = new ListView(mActivity);            return lv;        }    }}])', 1), ('([5:/android/view/textclassifier/cts/TextViewIntegrationTest.java]:[PAN]:[5]:method_text:[      TRANSITION_ANIMATION_SCALE, sOriginalTransitionAnimationDurationScale);        });    }   ])', 1), ('([12:/android/view/textclassifier/cts/TextViewIntegrationTest.java]:[PAN]:[12]:method_text:[   assertFloatingToolbarIsDisplayed();        assertFloatingToolbarContainsItem(""Test"");    }   ])', 1), ('([6:/android/view/textclassifier/cts/TextViewIntegrationTest.java]:[PAN]:[6]:method_text:[.singletonMap(TextClassifier.TYPE_URL, 1.0f));            return builder.build();        }    }}])', 1), ('([1:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[EDGE]:[1]:method_text:[e file and the boolean     * values are received as parameters from the host side test.     */   ])', 1), ('([1:/android/telephony/ims/cts/ImsServiceTest.java]:[EDGE]:[1]:method_text:[Utils.TEST_TIMEOUT_MS);        assertEquals(EXPECTED_RECEIVED_MESSAGE, receivedMessage);    }   ])', 1), ('([1:/android/server/wm/ForceRelayoutSdk29Test.java]:[PAN]:[1]:method_text:[org.junit.Test;@Presubmitpublic class ForceRelayoutSdk29Test extends ForceRelayoutTestBase {   ])', 1), ('([2:/android/server/wm/ForceRelayoutSdk29Test.java]:[PAN]:[2]:method_text:[ange(                false /* expectRelayoutWhenInsetsChange */, SOFT_INPUT_ADJUST_PAN);    }   ])', 1), ('([2:/android/permission/cts/OneTimePermissionTest.java]:[PAN]:[2]:method_text:[ions_timeout_millis"",                        mOldOneTimePermissionTimeoutValue, false));    }   ])', 1), ('([1:/android/permission/cts/OneTimePermissionTest.java]:[PAN]:[1]:method_text:[_PERIOD);        assertExpectedLifespan(exitTime, ONE_TIME_TIMEOUT_MILLIS);    }    @Ignore   ])', 1), ('([5:/android/permission/cts/OneTimePermissionTest.java]:[PAN]:[5]:method_text:[_UPPER_GRACE_PERIOD);        assertExpectedLifespan(exitTime, expectedLifespanMillis);    }   ])', 1), ('([7:/android/permission/cts/OneTimePermissionTest.java]:[PAN]:[7]:method_text:[               mActivityManager.removeOnUidImportanceListener(this);            }        }    }}])', 1), ('([1:/android/print/cts/ClassParametersTest.java]:[EDGE]:[1]:method_text:[ution with illegal parameters.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([11:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[11]:method_text:[xt.LAYOUT_INFLATER_SERVICE)).inflate(                R.layout.cursoradapter_host, null);    }   ])', 1), ('([5:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[5]:method_text:[st, CHILD_LAYOUT, LAST_CHILD_LAYOUT,                COLUMNS_CHILD_FROM, VIEWS_CHILD_TO);    }   ])', 1), ('([2:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[2]:method_text:[   assertEquals(expected, mSimpleExpandableListAdapter.getChild(3, 3));    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[ositionTooLow() {        mSimpleExpandableListAdapter.getChild(-1, 0);    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[ositionTooHigh() {        mSimpleExpandableListAdapter.getChild(4, 0);    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[ositionTooLow() {        mSimpleExpandableListAdapter.getChild(0, -1);    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[testGetChildChildPositionTooHigh() {        mSimpleExpandableListAdapter.getChild(0, 1);    }   ])', 1), ('([6:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[6]:method_text:[        assertEquals(4, mSimpleExpandableListAdapter.getChildId(0, 4));    }    @UiThreadTest   ])', 1), ('([9:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[9]:method_text:[     assertEquals(""child10"", ((TextView) result).getText().toString());    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[leExpandableListAdapter.getChildView(-1, 0, false, null, mAdapterHost);    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[pleExpandableListAdapter.getChildView(4, 0, false, null, mAdapterHost);    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[leExpandableListAdapter.getChildView(0, -1, false, null, mAdapterHost);    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[pleExpandableListAdapter.getChildView(0, 1, false, null, mAdapterHost);    }    @UiThreadTest   ])', 1), ('([7:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[7]:method_text:[tanceof TwoLineListItem);        assertNotNull(result.findViewById(android.R.id.text1));    }   ])', 1), ('([4:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[4]:method_text:[drenCount(2));        assertEquals(4, mSimpleExpandableListAdapter.getChildrenCount(3));    }   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[enCountGroupPositionTooLow() {        mSimpleExpandableListAdapter.getChildrenCount(-1);    }   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[enCountGroupPositionTooHigh() {        mSimpleExpandableListAdapter.getChildrenCount(4);    }   ])', 1), ('([2:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[2]:method_text:[0"", ""group30"");        assertEquals(expected, mSimpleExpandableListAdapter.getGroup(3));    }   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[id testGetGroupGroupPositionTooLow() {        mSimpleExpandableListAdapter.getGroup(-1);    }   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[id testGetGroupGroupPositionTooHigh() {        mSimpleExpandableListAdapter.getGroup(4);    }   ])', 1), ('([4:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[4]:method_text:[, VIEWS_CHILD_TO);        assertEquals(9, mSimpleExpandableListAdapter.getGroupCount());    }   ])', 1), ('([4:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[4]:method_text:[);        assertEquals(4, mSimpleExpandableListAdapter.getGroupId(4));    }    @UiThreadTest   ])', 1), ('([11:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[11]:method_text:[     assertEquals(""group10"", ((TextView) result).getText().toString());    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[impleExpandableListAdapter.getGroupView(-1, false, null, mAdapterHost);    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[SimpleExpandableListAdapter.getGroupView(4, false, null, mAdapterHost);    }    @UiThreadTest   ])', 1), ('([9:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[9]:method_text:[tanceof TwoLineListItem);        assertNotNull(result.findViewById(android.R.id.text1));    }   ])', 1), ('([6:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[6]:method_text:[ectable(4, 0));        assertTrue(mSimpleExpandableListAdapter.isChildSelectable(0, 1));    }   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[PAN]:[1]:method_text:[efix + i + """" + j);            }            list.add(row);        }        return list;    }}])', 1), ('([2:/android/text/style/cts/AbsoluteSizeSpanTest.java]:[PAN]:[2]:method_text:[it.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class AbsoluteSizeSpanTest {   ])', 1), ('([5:/android/text/style/cts/AbsoluteSizeSpanTest.java]:[PAN]:[5]:method_text:[          new AbsoluteSizeSpan(p);        } finally {            p.recycle();        }    }   ])', 1), ('([7:/android/text/style/cts/AbsoluteSizeSpanTest.java]:[PAN]:[7]:method_text:[izeSpan = new AbsoluteSizeSpan(-5);        assertEquals(-5, absoluteSizeSpan.getSize());    }   ])', 1), ('([7:/android/text/style/cts/AbsoluteSizeSpanTest.java]:[PAN]:[7]:method_text:[eSizeSpan = new AbsoluteSizeSpan(5, true);        assertTrue(absoluteSizeSpan.getDip());    }   ])', 1), ('([7:/android/text/style/cts/AbsoluteSizeSpanTest.java]:[PAN]:[7]:method_text:[luteSizeSpan.updateMeasureState(tp);        assertEquals(10.0f, tp.getTextSize(), 0.0f);    }   ])', 1), ('([4:/android/text/style/cts/AbsoluteSizeSpanTest.java]:[PAN]:[4]:method_text:[teSizeSpan = new AbsoluteSizeSpan(1);        absoluteSizeSpan.updateMeasureState(null);    }   ])', 1), ('([9:/android/text/style/cts/AbsoluteSizeSpanTest.java]:[PAN]:[9]:method_text:[soluteSizeSpan.updateDrawState(tp);        assertEquals(20.0f, tp.getTextSize(), 0.0f);    }   ])', 1), ('([4:/android/text/style/cts/AbsoluteSizeSpanTest.java]:[PAN]:[4]:method_text:[oluteSizeSpan = new AbsoluteSizeSpan(2);        absoluteSizeSpan.updateDrawState(null);    }   ])', 1), ('([4:/android/text/style/cts/AbsoluteSizeSpanTest.java]:[PAN]:[4]:method_text:[ absoluteSizeSpan = new AbsoluteSizeSpan(2);        absoluteSizeSpan.describeContents();    }   ])', 1), ('([6:/android/text/style/cts/AbsoluteSizeSpanTest.java]:[PAN]:[6]:method_text:[pan absoluteSizeSpan = new AbsoluteSizeSpan(2);        absoluteSizeSpan.getSpanTypeId();    }   ])', 1), ('([12:/android/text/style/cts/AbsoluteSizeSpanTest.java]:[PAN]:[12]:method_text:[uals(-5, absoluteSizeSpan.getSize());        } finally {            p.recycle();        }    }}])', 1), ('([1:/android/devicepolicy/cts/AppUriAuthenticationPolicyTest.java]:[PAN]:[1]:method_text:[                   .addAppAndUriMapping(PACKAGE_NAME, URI, ALIAS)                    .build();   ])', 1), ('([3:/android/devicepolicy/cts/AppUriAuthenticationPolicyTest.java]:[PAN]:[3]:method_text:[as.containsKey(URI)).isTrue();        assertThat(urisToAlias.get(URI)).isEqualTo(ALIAS);    }   ])', 1), ('([4:/android/devicepolicy/cts/AppUriAuthenticationPolicyTest.java]:[PAN]:[4]:method_text:[.containsKey(URI2)).isTrue();        assertThat(urisToAlias.get(URI2)).isEqualTo(ALIAS);    }   ])', 1), ('([1:/android/devicepolicy/cts/AppUriAuthenticationPolicyTest.java]:[PAN]:[1]:method_text:[    .build();        assertThat(authenticationPolicy).isEqualTo(AUTHENTICATION_POLICY);    }   ])', 1), ('([1:/android/devicepolicy/cts/AppUriAuthenticationPolicyTest.java]:[PAN]:[1]:method_text:[    .build();        assertThat(authenticationPolicy).isNotEqualTo(AUTHENTICATION_POLICY);    }}])', 1), ('([2:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[PAN]:[2]:method_text:[        runDeviceTests(TEST_PKG, "".PrivilegedAppDisableTest"", ""testPrivAppAndDisabled"");    }   ])', 1), ('([3:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[PAN]:[3]:method_text:[bled"");        } finally {            getDevice().uninstallPackage(SHIM_PKG);        }    }   ])', 1), ('([3:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[PAN]:[3]:method_text:[ion {        Utils.runDeviceTests(getDevice(), packageName, testClassName, testMethodName);    }}])', 1), ('([6:/android/text/style/cts/URLSpanTest.java]:[PAN]:[6]:method_text:[;    @Before    public void setup() {        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([5:/android/text/style/cts/URLSpanTest.java]:[PAN]:[5]:method_text:[on(0);            new URLSpan(p);        } finally {            p.recycle();        }    }   ])', 1), ('([4:/android/text/style/cts/URLSpanTest.java]:[PAN]:[4]:method_text:[= new URLSpan(TEST_URL);        assertEquals(TEST_URL, urlSpan.getURL());    }    @LargeTest   ])', 1), ('([5:/android/text/style/cts/URLSpanTest.java]:[PAN]:[5]:method_text:[ivityWithTimeout(5000);        assertNotNull(newActivity);        newActivity.finish();    }   ])', 1), ('([4:/android/text/style/cts/URLSpanTest.java]:[PAN]:[4]:method_text:[lure() {        URLSpan urlSpan = new URLSpan(TEST_URL);        urlSpan.onClick(null);    }   ])', 1), ('([4:/android/text/style/cts/URLSpanTest.java]:[PAN]:[4]:method_text:[() {        URLSpan urlSpan = new URLSpan(TEST_URL);        urlSpan.describeContents();    }   ])', 1), ('([6:/android/text/style/cts/URLSpanTest.java]:[PAN]:[6]:method_text:[eId() {        URLSpan urlSpan = new URLSpan(TEST_URL);        urlSpan.getSpanTypeId();    }   ])', 1), ('([6:/android/text/style/cts/URLSpanTest.java]:[PAN]:[6]:method_text:[  assertEquals(TEST_URL, u.getURL());        } finally {            p.recycle();        }    }}])', 1), ('([1:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[1]:method_text:[@InspectableProperty        public int getValue() {            return mValue;        }    }   ])', 1), ('([2:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[2]:method_text:[   mapAndRead(node);        assertEquals(node.getValue(), mPropertyReader.get(""value""));    }   ])', 1), ('([1:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[1]:method_text:[ertyMapper);        assertEquals(R.attr.value, mPropertyMapper.getAttributeId(""value""));    }   ])', 1), ('([2:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[2]:method_text:[AttributeId = false)        public int getValue() {            return mValue;        }    }   ])', 1), ('([1:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[1]:method_text:[y(hasAttributeId = false)        public int getValue() {            return 0;        }    }   ])', 1), ('([1:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[1]:method_text:[attributeId = 0xdecafbad)        public int getValue() {            return 0;        }    }   ])', 1), ('([1:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[1]:method_text:[buteId = false)        public int obtainValueC() {            return mValueC;        }    }   ])', 1), ('([1:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[1]:method_text:[Id = false)        public boolean obtainValueC() {            return mValueC;        }    }   ])', 1), ('([1:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[1]:method_text:[false)        public Color getColorObject() {            return mColorObject;        }    }   ])', 1), ('([1:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[1]:method_text:[E)        @ColorInt        public int getValue() {            return mValue;        }    }   ])', 1), ('([1:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[1]:method_text:[tributeId = false)        public short getShort() {            return mShort;        }    }   ])', 1), ('([1:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[1]:method_text:[ttributeId = false)        public Objects getNull() {            return null;        }    }   ])', 1), ('([1:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[1]:method_text:[       }        public void setValue(int value) {            mValue = value;        }    }   ])', 1), ('([7:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[7]:method_text:[       }        public void setValue(int value) {            mValue = value;        }    }   ])', 1), ('([10:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[10]:method_text:[ue;        PublicFieldTest(Random seed) {            value = seed.nextInt();        }    }   ])', 1), ('([1:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[1]:method_text:[_ID)        public int getUnannotatedId() {            return mUnannotatedId;        }    }   ])', 1), ('([18:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[PAN]:[18]:method_text:[defghijklmnopqrstuvwxyz"";        return alphabet.charAt(random.nextInt(alphabet.length()));    }}])', 1), ('([5:/android/view/cts/ViewConfigurationTest.java]:[PAN]:[5]:method_text:[     assertTrue(scaledMinScalingSpanMm < 40.5); // 1.5 times the recommended size of 27mm    }   ])', 1), ('([2:/android/view/cts/ViewConfigurationTest.java]:[PAN]:[2]:method_text:[e the classification. Therefore, this multiplier should be always greater or equal to 1.     */   ])', 1), ('([2:/android/view/cts/ViewConfigurationTest.java]:[EDGE]:[2]:method_text:[ration.getKeyRepeatDelay();        ViewConfiguration.getDefaultActionModeHideDuration();    }   ])', 1), ('([2:/android/view/cts/ViewConfigurationTest.java]:[EDGE]:[2]:method_text:[     assertTrue(scaledMinScalingSpanMm < 40.5); // 1.5 times the recommended size of 27mm    }   ])', 1), ('([3:/android/transition/cts/TransitionTest.java]:[PAN]:[3]:method_text:[rement of an incomplete transition."");            }            return mDuration;        }    }}])', 1), ('([11:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[11]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([15:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[15]:method_text:[xpandableListView(mActivity, attrs);        new ExpandableListView(mActivity, attrs, 0);    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[1]:method_text:[    public void testConstructorWithNullContext1() {        new ExpandableListView(null);    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[1]:method_text:[blic void testConstructorWithNullContext2() {        new ExpandableListView(null, null);    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[1]:method_text:[c void testConstructorWithNullContext3() {        new ExpandableListView(null, null, 0);    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[1]:method_text:[).getDrawable(R.drawable.scenery);        mExpandableListView.setChildDivider(drawable);    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[1]:method_text:[ongType() {        mExpandableListView.setAdapter((ListAdapter) null);    }    @UiThreadTest   ])', 1), ('([7:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[7]:method_text:[dableAdapter);        assertNotNull(mExpandableListView.getAdapter());    }    @UiThreadTest   ])', 1), ('([11:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[11]:method_text:[ame(expandableAdapter, mExpandableListView.getExpandableListAdapter());    }    @UiThreadTest   ])', 1), ('([6:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[6]:method_text:[ times(1)).onItemClick(eq(mExpandableListView),                any(), eq(100), eq(99L));    }   ])', 1), ('([5:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[5]:method_text:[mockOnItemClickListener, mExpandableListView.getOnItemClickListener());    }    @UiThreadTest   ])', 1), ('([47:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[47]:method_text:[should throw NullPointerException"");        } catch (NullPointerException e) {        }    }   ])', 1), ('([48:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[48]:method_text:[           } catch (NullPointerException e) {            }        });    }    @UiThreadTest   ])', 1), ('([22:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[22]:method_text:[ointerException"");        } catch (NullPointerException e) {        }    }    @UiThreadTest   ])', 1), ('([7:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[7]:method_text:[upClick(eq(mExpandableListView),                any(), eq(0), eq(0L));    }    @UiThreadTest   ])', 1), ('([10:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[10]:method_text:[(eq(mExpandableListView),                any(), eq(0), eq(0), eq(0L));    }    @UiThreadTest   ])', 1), ('([18:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[18]:method_text:[ULL,                mExpandableListView.getExpandableListPosition(2));    }    @UiThreadTest   ])', 1), ('([7:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[7]:method_text:[quals(1, mExpandableListView.getFlatListPosition(0x8000000100000000L));    }    @UiThreadTest   ])', 1), ('([8:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[8]:method_text:[1);        assertEquals(0, mExpandableListView.getSelectedPosition());    }    @UiThreadTest   ])', 1), ('([7:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[7]:method_text:[Group(1);        assertEquals(0, mExpandableListView.getSelectedId());    }    @UiThreadTest   ])', 1), ('([6:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[6]:method_text:[1);        assertEquals(0, mExpandableListView.getSelectedPosition());    }    @UiThreadTest   ])', 1), ('([4:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[4]:method_text:[;        assertTrue(mExpandableListView.setSelectedChild(0, 1, true));    }    @UiThreadTest   ])', 1), ('([9:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[9]:method_text:[ListView.isGroupExpanded(0));        assertTrue(mExpandableListView.isGroupExpanded(1));    }   ])', 1), ('([7:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[7]:method_text:[PE_CHILD,                ExpandableListView.getPackedPositionType(0x8000000000000000L));    }   ])', 1), ('([5:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[5]:method_text:[assertEquals(0x7FFFFFFF, ExpandableListView.getPackedPositionGroup(0x7FFFFFFF00000000L));    }   ])', 1), ('([5:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[5]:method_text:[assertEquals(0xffffffff, ExpandableListView.getPackedPositionChild(0x80000000ffffffffL));    }   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[2]:method_text:[            ExpandableListView.getPackedPositionForChild(Integer.MAX_VALUE, 0xffffffff));    }   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[2]:method_text:[00000L,                ExpandableListView.getPackedPositionForGroup(Integer.MAX_VALUE));    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[1]:method_text:[ublic void testSetChildIndicator() {        mExpandableListView.setChildIndicator(null);    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[1]:method_text:[tSetChildIndicatorBounds() {        mExpandableListView.setChildIndicatorBounds(10, 20);    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[1]:method_text:[orBoundsRelative() {        mExpandableListView.setChildIndicatorBoundsRelative(10, 20);    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[1]:method_text:[drawable = new BitmapDrawable();        mExpandableListView.setGroupIndicator(drawable);    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[1]:method_text:[c void testSetIndicatorBounds() {        mExpandableListView.setIndicatorBounds(10, 30);    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[1]:method_text:[dicatorBoundsRelative() {        mExpandableListView.setIndicatorBoundsRelative(10, 30);    }   ])', 1), ('([4:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[4]:method_text:[e p2 = dest.onSaveInstanceState();        assertNotNull(p1);        assertNotNull(p2);    }   ])', 1), ('([16:/android/widget/cts/ExpandableListViewTest.java]:[PAN]:[16]:method_text:[otected void dispatchDraw(Canvas canvas) {            super.dispatchDraw(canvas);        }    }}])', 1)]"	""	""	"[('PAN', 228), ('EDGE', 28), ('HSPA', 2)]"	"[('[android.text.util.cts.LinkifyTest testAddLinks_UrlSpanFactory_withSpannable CtsTextTestCases]', 2), ('[android.text.util.cts.LinkifyTest testAddLinks_UrlSpanFactory_withSpannableAndFilter CtsTextTestCases]', 2), ('[android.view.cts.ViewConfigurationTest testInstanceValues CtsViewTestCases]', 2), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testWorkProfileMaximumTimeOff_complianceRequiredBroadcastDefault CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testWorkProfileMaximumTimeOff_complianceRequiredBroadcastOverride CtsDevicePolicyManagerTestCases]', 1), ('[android.print.cts.CustomPrintOptionsTest onPrinterDiscoverySessionDestroyCalled CtsPrintTestCases]', 1), ('[android.media.cts.MediaCodecTest testAsyncStopAndReset CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testGetDevices CtsMediaTestCases]', 1), ('[android.text.style.cts.UnderlineSpanTest testConstructor CtsTextTestCases]', 1), ('[android.text.style.cts.UnderlineSpanTest testUpdateDrawState CtsTextTestCases]', 1), ('[android.text.style.cts.UnderlineSpanTest testUpdateDrawStateNull CtsTextTestCases]', 1), ('[android.text.style.cts.UnderlineSpanTest testDescribeContents CtsTextTestCases]', 1), ('[android.text.style.cts.UnderlineSpanTest testGetSpanTypeId CtsTextTestCases]', 1), ('[android.text.style.cts.UnderlineSpanTest testWriteToParcel CtsTextTestCases]', 1), ('[android.text.style.cts.UnderlineSpanTest testDoesntAffectWidth CtsTextTestCases]', 1), ('[android.text.style.cts.UnderlineSpanTest testDoesntAffectWidth_safeSubclass CtsTextTestCases]', 1), ('[android.text.style.cts.UnderlineSpanTest testDoesntAffectWidth_noUnderlineSubclass CtsTextTestCases]', 1), ('[android.text.style.cts.UnderlineSpanTest testAffectsWidth_ElegantSubclass CtsTextTestCases]', 1), ('[android.media.cts.EnvReverbTest test2_0SetEnabledGetEnabled CtsMediaTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCycleFgAppAndAlert CtsAppTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_AllUriTest testSelectWithProjection CtsContactsProviderTestCases]', 1), ('[android.webkit.cts.WebViewTest testJavascriptInterfaceForClientPopup CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebViewTest testSetPictureListener CtsWebkitTestCases]', 1), ('[android.text.method.cts.ArrowKeyMovementMethodTest MyMetaKeyKeyListener CtsTextTestCases]', 1), ('[android.text.method.cts.ArrowKeyMovementMethodTest testOnTakeFocusNullSpannable CtsTextTestCases]', 1), ('[android.text.method.cts.ArrowKeyMovementMethodTest testOnTouchEventNullSpannable CtsTextTestCases]', 1), ('[android.text.method.cts.ArrowKeyMovementMethodTest testInitialize CtsTextTestCases]', 1), ('[android.text.method.cts.ArrowKeyMovementMethodTest testIntializeNullSpannable CtsTextTestCases]', 1), ('[android.text.method.cts.ArrowKeyMovementMethodTest testOnKeyUp CtsTextTestCases]', 1), ('[android.hardware.cts.CameraGLTest testCameraToSurfaceTextureMetadata CtsCameraTestCases]', 1), ('[android.media.cts.BassBoostTest test2_0SetEnabledGetEnabled CtsMediaTestCases]', 1), ('[android.text.style.cts.QuoteSpanTest testDefaultConstructor CtsTextTestCases]', 1), ('[android.text.style.cts.QuoteSpanTest testConstructorFromColor CtsTextTestCases]', 1), ('[android.text.style.cts.QuoteSpanTest testConstructorFromColorStripeWidthGapWidth CtsTextTestCases]', 1), ('[android.text.style.cts.QuoteSpanTest testConstructorFromParcel CtsTextTestCases]', 1), ('[android.text.style.cts.QuoteSpanTest testGetLeadingMargin CtsTextTestCases]', 1), ('[android.text.style.cts.QuoteSpanTest testGetColor CtsTextTestCases]', 1), ('[android.text.style.cts.QuoteSpanTest testDrawLeadingMargin CtsTextTestCases]', 1), ('[android.text.style.cts.QuoteSpanTest testDrawLeadingMarginNull CtsTextTestCases]', 1), ('[android.text.style.cts.QuoteSpanTest testDescribeContents CtsTextTestCases]', 1), ('[android.text.style.cts.QuoteSpanTest testGetSpanTypeId CtsTextTestCases]', 1), ('[android.text.style.cts.QuoteSpanTest testWriteToParcel CtsTextTestCases]', 1), ('[android.server.wm.WindowTest testRequireViewByIdInvalid CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetLocalFocus CtsWindowManagerDeviceTestCases]', 1), ('[android.media.cts.AudioPreProcessingTest test1_2NsSetEnabledGetEnabled CtsMediaTestCases]', 1), ('[android.media.cts.AudioPreProcessingTest test2_2AecSetEnabledGetEnabled CtsMediaTestCases]', 1), ('[android.media.cts.AudioPreProcessingTest test3_2AgcSetEnabledGetEnabled CtsMediaTestCases]', 1), ('[android.text.style.cts.LeadingMarginSpan_StandardTest testGetLeadingMargin CtsTextTestCases]', 1), ('[android.text.style.cts.LeadingMarginSpan_StandardTest testDrawLeadingMargin CtsTextTestCases]', 1), ('[android.text.style.cts.LeadingMarginSpan_StandardTest testGetSpanTypeId CtsTextTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testPressKey CtsTextTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testReleaseKey CtsTextTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testAdjustMetaAfterKeypress CtsTextTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testResetMetaState CtsTextTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testResetLockedMeta CtsTextTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testClearMetaKeyState CtsTextTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testClearMetaKeyState2 CtsTextTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testHandleKeyUp CtsTextTestCases]', 1), ('[android.util.cts.RationalTest testReduction CtsUtilTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testTapAnPaySettings CtsContentTestCases]', 1), ('[android.media.cts.LoudnessEnhancerTest test2_0SetEnabledGetEnabled CtsMediaTestCases]', 1), ('[android.app.cts.ExpandableListActivityTest testSelect CtsAppTestCases]', 1), ('[android.app.cts.ExpandableListActivityTest testView CtsAppTestCases]', 1), ('[android.app.cts.ExpandableListActivityTest testCallback CtsAppTestCases]', 1), ('[android.text.cts.DynamicLayoutTest testLineSpacing CtsTextTestCases]', 1), ('[android.text.cts.DynamicLayoutTest testLineSpacing_textEndingWithNextLine CtsTextTestCases]', 1), ('[android.text.cts.DynamicLayoutTest testReflow_afterSpanChangedShouldNotThrowException CtsTextTestCases]', 1), ('[android.slice.cts.SlicePermissionsTest testGrantParentExpands CtsSliceTestCases]', 1), ('[android.providerui.cts.MediaStoreUiTest testGetMediaUriAccess_MediaDocumentsProvider CtsProviderUiTestCases]', 1), ('[android.cts.backup.AutoRestoreHostSideTest testSetAutoRestore_autoRestoresDataWhenEnabled CtsBackupHostTestCases]', 1), ('[android.cts.backup.AutoRestoreHostSideTest testSetAutoRestore_dontAutoRestoresDataWhenDisabled CtsBackupHostTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityPaneTest windowLikeViewVisibility_reportAsWindowStateChanges CtsAccessibilityServiceTestCases]', 1), ('[android.sharesheet.cts.CtsSharesheetDeviceTest bulkTest1 CtsSharesheetTestCases]', 1), ('[android.sharesheet.cts.CtsSharesheetDeviceTest contentPreviewTest CtsSharesheetTestCases]', 1), ('[android.security.cts.SecurityTestCase TestName CtsSecurityBulletinHostTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinksToSpannable CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinksToSpannableNullWithWebUrls CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinksToTextView CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinksToTextViewWithScheme CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinksToTextViewWithSchemeAndFilter CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinksToSpannableWithScheme CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinksToSpannableWithSchemeNullSpannable CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinksToSpannableWithSchemeNullPattern CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinksToSpannableWithSchemeAndFilter CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinksToSpannableWithSchemeAndFilterNullSpannable CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinksToSpannableWithSchemeAndFilterNullPattern CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinksPhoneNumbers CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinks_withTextView_addsLinksWhenDefaultSchemeIsNull CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinks_withTextView_addsLinksWhenSchemesArrayIsNull CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinks_withTextView_prependsDefaultSchemeToBeginingOfLink CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinks_withTextView_doesNotPrependSchemeIfSchemeExists CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinks_doesNotAddLinksForUrlWithoutProtocolAndWithoutKnownTld CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinks_matchesUrlStartingWithHttpAndDoesNotHaveTld CtsTextTestCases]', 1), ('[android.text.util.cts.LinkifyTest testAddLinks_unsupportedCharacters CtsTextTestCases]', 1), ('[android.text.style.cts.ForegroundColorSpanTest testConstructor CtsTextTestCases]', 1), ('[android.text.style.cts.ForegroundColorSpanTest testGetForegroundColor CtsTextTestCases]', 1), ('[android.text.style.cts.ForegroundColorSpanTest testUpdateDrawState CtsTextTestCases]', 1), ('[android.text.style.cts.ForegroundColorSpanTest testUpdateDrawStateNull CtsTextTestCases]', 1), ('[android.text.style.cts.ForegroundColorSpanTest testDescribeContents CtsTextTestCases]', 1), ('[android.text.style.cts.ForegroundColorSpanTest testGetSpanTypeId CtsTextTestCases]', 1), ('[android.text.style.cts.ForegroundColorSpanTest testWriteToParcel CtsTextTestCases]', 1), ('[com.android.cts.documentclient.DocumentsClientTest findRootListSelector None]', 1), ('[android.print.cts.PrintAttributesTest isEmpty CtsPrintTestCases]', 1), ('[android.content.cts.ClipDescriptionTest testIsStyledText CtsContentTestCases]', 1), ('[android.appsecurity.cts.ListeningPortsTest installDeviceTestPkg CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ListeningPortsTest testNoRemotelyAccessibleListeningTcpPorts CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ListeningPortsTest testNoRemotelyAccessibleListeningTcp6Ports CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ListeningPortsTest testNoRemotelyAccessibleListeningUdpPorts CtsAppSecurityHostTestCases]', 1), ('[com.android.cts.normalapp.ClientTest isFalse None]', 1), ('[android.widget.cts.TabHost_TabSpecTest testSetContent3 CtsWidgetTestCases]', 1), ('[android.view.textclassifier.cts.TextViewIntegrationTest workAroundNotificationShadeWindowIssue CtsTextClassifierTestCases]', 1), ('[android.view.textclassifier.cts.TextViewIntegrationTest isDisplayed CtsTextClassifierTestCases]', 1), ('[android.view.textclassifier.cts.TextViewIntegrationTest isAtLeastS CtsTextClassifierTestCases]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSmsDeliveryReportQCompat CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSmsDeliveryReportR CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelReceiveSms CtsTelephonyTestCases]', 1), ('[android.server.wm.ForceRelayoutSdk29Test testNoRelayoutWhenInsetsChange_adjustPan CtsWindowManagerSdk29TestCases]', 1), ('[android.permission.cts.OneTimePermissionTest testOneTimePermission CtsPermissionTestCases]', 1), ('[android.permission.cts.OneTimePermissionTest testForegroundServiceMaintainsPermission CtsPermissionTestCases]', 1), ('[android.permission.cts.OneTimePermissionTest testStickyServiceMaintainsPermissionOnRestart CtsPermissionTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testConstructor CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetChild CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetChildGroupPositionTooLow CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetChildGroupPositionTooHigh CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetChildChildPositionTooLow CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetChildChildPositionTooHigh CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetChildId CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetChildView CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetChildViewGroupPositionTooLow CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetChildViewGroupPositionTooHigh CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetChildViewChildPositionTooLow CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetChildViewChildPositionTooHigh CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testNewChildView CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetChildrenCount CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetChildrenCountGroupPositionTooLow CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetChildrenCountGroupPositionTooHigh CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetGroup CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetGroupGroupPositionTooLow CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetGroupGroupPositionTooHigh CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetGroupCount CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetGroupId CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetGroupView CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetGroupViewGroupPositionTooLow CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testGetGroupViewGroupPositionTooHigh CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testNewGroupView CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testIsChildSelectable CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleExpandableListAdapterTest testHasStableIds CtsWidgetTestCases]', 1), ('[android.text.style.cts.AbsoluteSizeSpanTest testConstructor CtsTextTestCases]', 1), ('[android.text.style.cts.AbsoluteSizeSpanTest testGetSize CtsTextTestCases]', 1), ('[android.text.style.cts.AbsoluteSizeSpanTest testGetDip CtsTextTestCases]', 1), ('[android.text.style.cts.AbsoluteSizeSpanTest testUpdateMeasureState CtsTextTestCases]', 1), ('[android.text.style.cts.AbsoluteSizeSpanTest testUpdateMeasureStateNull CtsTextTestCases]', 1), ('[android.text.style.cts.AbsoluteSizeSpanTest testUpdateDrawState CtsTextTestCases]', 1), ('[android.text.style.cts.AbsoluteSizeSpanTest testUpdateDrawStateNull CtsTextTestCases]', 1), ('[android.text.style.cts.AbsoluteSizeSpanTest testDescribeContents CtsTextTestCases]', 1), ('[android.text.style.cts.AbsoluteSizeSpanTest testGetSpanTypeId CtsTextTestCases]', 1), ('[android.text.style.cts.AbsoluteSizeSpanTest testWriteToParcel CtsTextTestCases]', 1), ('[android.devicepolicy.cts.AppUriAuthenticationPolicyTest getAppAndUrisMappings_returnsMapping CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.AppUriAuthenticationPolicyTest getAppAnyUrisMappings_multipleUrisSameAlias_containsBothUris CtsDevicePolicyTestCases]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testDisableSystemApp CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testDisableUpdatedSystemApp CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testUpdatedSystemAppPreservedOnReboot CtsAppSecurityHostTestCases]', 1), ('[android.text.style.cts.URLSpanTest testConstructor CtsTextTestCases]', 1), ('[android.text.style.cts.URLSpanTest testGetURL CtsTextTestCases]', 1), ('[android.text.style.cts.URLSpanTest testOnClick CtsTextTestCases]', 1), ('[android.text.style.cts.URLSpanTest testOnClickFailure CtsTextTestCases]', 1), ('[android.text.style.cts.URLSpanTest testDescribeContents CtsTextTestCases]', 1), ('[android.text.style.cts.URLSpanTest testGetSpanTypeId CtsTextTestCases]', 1), ('[android.text.style.cts.URLSpanTest testWriteToParcel CtsTextTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest TestPropertyMapper CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testMapAndReadInt CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testInferredAttributeId CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testUninitializedPropertyMap CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testNamedProperty CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testHasAttributeIdFalse CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testAttributeIdEquals CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testInferredPropertyName CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testInferredBooleanName CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testColorTypeInference CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testValueTypeEquals CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testPrimitiveProperties CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testObjectProperties CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testIntEnum CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testIntFlag CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testPublicField CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testResourceId CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.view.cts.ViewConfigurationTest testExceptionsThrown CtsViewTestCases]', 1), ('[android.view.cts.ViewConfigurationTest testStaticValues CtsViewTestCases]', 1), ('[android.transition.cts.TransitionTest testGoWithNullParameter CtsTransitionTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest getExpandableListView CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testConstructor CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testConstructorWithNullContext1 CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testConstructorWithNullContext2 CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testConstructorWithNullContext3 CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testSetChildDivider CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testSetAdapterOfWrongType CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testGetAdapter CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testAccessExpandableListAdapter CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testPerformItemClick CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testSetOnItemClickListener CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testExpandGroup CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testExpandGroupSmooth CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testCollapseGroup CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testSetOnGroupClickListener CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testSetOnChildClickListener CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testGetExpandableListPosition CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testGetFlatListPosition CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testGetSelectedPosition CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testGetSelectedId CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testSetSelectedGroup CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testSetSelectedChild CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testIsGroupExpanded CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testGetPackedPositionType CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testGetPackedPositionGroup CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testGetPackedPositionChild CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testGetPackedPositionForChild CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testGetPackedPositionForGroup CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testSetChildIndicator CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testSetChildIndicatorBounds CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testSetChildIndicatorBoundsRelative CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testSetGroupIndicator CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testSetIndicatorBounds CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testSetIndicatorBoundsRelative CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testOnSaveInstanceState CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewTest testDispatchDraw CtsWidgetTestCases]', 1)]"
"9.8.11  Data blobs sharing"	"9.8.11"	"C-1-1"	"9.8.11/C-1-1"	"09081100.670101"	"""C-1-1] MUST NOT share data blobs belonging to apps beyond what they     intended to allow (i.e. the scope of default access and the other access     modes that can be specified using     [BlobStoreManager.session#allowPackageAccess()](     https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session#allowPackageAccess%28java.lang.String%2C%2520byte%5B%5D%29),     [BlobStoreManager.session#allowSameSignatureAccess()](     https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session#allowSameSignatureAccess%28%29),     or [BlobStoreManager.session#allowPublicAccess()](     https://developer.android.com/reference/android/app/blob/BlobStoreManager.Session#allowPublicAccess%28%29)     MUST NOT be modified). The AOSP reference implementation meets these     requirements.   """	""	""	"allowPackageAccess() allowPublicAccess() BlobStoreManager.session BlobStoreManager.Session java.lang.String allowSameSignatureAccess()"	""	""	""	""	"[('com.android.cts.blob.BlobStoreManagerTest', 48), ('android.signature.cts.tests.ApiComplianceCheckerTest', 15), ('com.android.cts.device.blob.DataCleanupTest', 12), ('com.android.cts.device.blob.DataPersistenceTest', 6), ('android.gesture.cts.GestureStorageTester', 3), ('com.android.cts.device.blob.AtomTest', 2), ('com.android.compatibility.common.util.DeviceReportTest', 1), ('dot.junit.opcodes.const_class.Test_const_class', 1), ('android.effect.cts.EffectTest', 1), ('android.signature.cts.InterfaceChecker', 1), ('android.trustedvoice.cts.TrustedVoiceHostTest', 1), ('com.android.cts.appsearch.app.GlobalSearchSessionPlatformCtsTest', 1)]"	"[('getAbsoluteClassName', 3), ('getMethods', 2), ('getMediumType', 1), ('reconnect', 1), ('getSpanTypeIdInternal', 1), ('eglReleaseThread', 1), ('getFilter', 1), ('getCurrentImeTouchRegion', 1), ('keySet', 1), ('getState', 1), ('checkQueued', 1), ('entrySet', 1), ('getKey', 1), ('getValue', 1), ('size', 1), ('stream', 1), ('negate', 1), ('getDeclaredMethods', 1), ('getModifiers', 1), ('toGenericString', 1), ('getImplInterfaces', 1)]"	"[('CtsBlobStoreTestCases', 48), ('CtsGestureTestCases', 3), ('CtsEffectTestCases', 1), ('CtsTrustedVoiceHostTestCases', 1), ('CtsAppSearchTestCases', 1)]"	""	""	""	""	"com.android.cts.device.blob.DataPersistenceTest"	"getMethods"	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 48), ('/home/gpoor/cts-12-source/cts/tests/signature/tests/src/android/signature/cts/tests/ApiComplianceCheckerTest.java', 15), ('/home/gpoor/cts-12-source/cts/hostsidetests/blobstore/test-apps/BlobStoreHostTestHelper/src/com/android/cts/device/blob/DataCleanupTest.java', 12), ('/home/gpoor/cts-12-source/cts/hostsidetests/blobstore/test-apps/BlobStoreHostTestHelper/src/com/android/cts/device/blob/DataPersistenceTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/gesture/src/android/gesture/cts/GestureStorageTester.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/blobstore/test-apps/BlobStoreHostTestHelper/src/com/android/cts/device/blob/AtomTest.java', 2), ('/home/gpoor/cts-12-source/cts/common/device-side/util-axt/tests/src/com/android/compatibility/common/util/DeviceReportTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/const_class/Test_const_class.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/effect/src/android/effect/cts/EffectTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/signature/lib/common/src/android/signature/cts/InterfaceChecker.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/trustedvoice/src/android/trustedvoice/cts/TrustedVoiceHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/app/GlobalSearchSessionPlatformCtsTest.java', 1)]"	"[('(1,allowPackageAccess(),/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(27,BlobStoreManager.session,/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(27,BlobStoreManager.Session,/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(6,allowSameSignatureAccess(),/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(8,allowPublicAccess(),/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(4,BlobStoreManager.session,/com/android/cts/device/blob/DataCleanupTest.java)', 1), ('(4,BlobStoreManager.Session,/com/android/cts/device/blob/DataCleanupTest.java)', 1), ('(2,allowSameSignatureAccess(),/com/android/cts/device/blob/DataCleanupTest.java)', 1), ('(2,allowPublicAccess(),/com/android/cts/device/blob/DataCleanupTest.java)', 1), ('(1,BlobStoreManager.session,/com/android/cts/device/blob/AtomTest.java)', 1), ('(1,BlobStoreManager.Session,/com/android/cts/device/blob/AtomTest.java)', 1), ('(1,java.lang.String,/com/android/compatibility/common/util/DeviceReportTest.java)', 1), ('(3,java.lang.String,/android/gesture/cts/GestureStorageTester.java)', 1), ('(1,java.lang.String,/dot/junit/opcodes/const_class/Test_const_class.java)', 1), ('(1,java.lang.String,/android/effect/cts/EffectTest.java)', 1), ('(2,java.lang.String,/android/signature/cts/InterfaceChecker.java)', 1), ('(1,java.lang.String,/android/trustedvoice/cts/TrustedVoiceHostTest.java)', 1), ('(34,java.lang.String,/android/signature/cts/tests/ApiComplianceCheckerTest.java)', 1), ('(1,allowPackageAccess(),/com/android/cts/appsearch/app/GlobalSearchSessionPlatformCtsTest.java)', 1), ('(3,BlobStoreManager.session,/com/android/cts/device/blob/DataPersistenceTest.java)', 1), ('(3,BlobStoreManager.Session,/com/android/cts/device/blob/DataPersistenceTest.java)', 1)]"	"[('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[essAllowed());            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[ctSuccess */);            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[rifyBlob(pfd);            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[1]:method_text:[essAllowed());            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[1]:method_text:[ctSuccess */);            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[1]:method_text:[rifyBlob(pfd);            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPackageAccess()]:[1]:method_text:[cess(blobData, HELPER_PKG3);        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[BlobHandle());            }        } finally {            blobData.delete();        }    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[2]:method_text:[kg(sessionId, HELPER_PKG2));        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[ger.openSession(sessionId));        } finally {            blobData.delete();        }    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[2]:method_text:[ssion.close();            }        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[.getBytes()));            }        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[rite(0L, 0L));            }        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[esults.add(result);            }        }        assertThat(invalidResults).isEmpty();    }   ])', 1), ('([3:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[3]:method_text:[(0L,                afterStatsForUid.getDataBytes() - beforeStatsForUid.getDataBytes());    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[id.getDataBytes());        } finally {            serviceConnection.unbind();        }    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[2]:method_text:[ze());            commitSession(sessionId, session, blobData.getBlobHandle());        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[;        }, Pair.create(KEY_SESSION_EXPIRY_TIMEOUT_MS, String.valueOf(waitDurationMs)));    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[    }        }, Pair.create(KEY_MAX_BLOB_ACCESS_PERMITTED_PACKAGES, String.valueOf(1)));    }   ])', 1), ('([4:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[4]:method_text:[) {            mCommandReceiver = null;            mContext.unbindService(this);        }    }}])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[1]:method_text:[BlobHandle());            }        } finally {            blobData.delete();        }    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[2]:method_text:[kg(sessionId, HELPER_PKG2));        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[1]:method_text:[ger.openSession(sessionId));        } finally {            blobData.delete();        }    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[2]:method_text:[ssion.close();            }        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[1]:method_text:[.getBytes()));            }        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[1]:method_text:[rite(0L, 0L));            }        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[1]:method_text:[esults.add(result);            }        }        assertThat(invalidResults).isEmpty();    }   ])', 1), ('([3:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[3]:method_text:[(0L,                afterStatsForUid.getDataBytes() - beforeStatsForUid.getDataBytes());    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[1]:method_text:[id.getDataBytes());        } finally {            serviceConnection.unbind();        }    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[2]:method_text:[ze());            commitSession(sessionId, session, blobData.getBlobHandle());        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[1]:method_text:[;        }, Pair.create(KEY_SESSION_EXPIRY_TIMEOUT_MS, String.valueOf(waitDurationMs)));    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[1]:method_text:[    }        }, Pair.create(KEY_MAX_BLOB_ACCESS_PERMITTED_PACKAGES, String.valueOf(1)));    }   ])', 1), ('([4:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.Session]:[4]:method_text:[) {            mCommandReceiver = null;            mContext.unbindService(this);        }    }}])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowSameSignatureAccess()]:[2]:method_text:[cess(blobData, HELPER_PKG3);        } finally {            blobData.delete();        }    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowSameSignatureAccess()]:[2]:method_text:[essAllowed());            }        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowSameSignatureAccess()]:[1]:method_text:[cess(blobData, HELPER_PKG3);        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowSameSignatureAccess()]:[1]:method_text:[1.unbind();            connection2.unbind();            connection3.unbind();        }    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPublicAccess()]:[2]:method_text:[kg(sessionId, HELPER_PKG2));        } finally {            blobData.delete();        }    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPublicAccess()]:[2]:method_text:[cess(blobData, HELPER_PKG3);        } finally {            blobData.delete();        }    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPublicAccess()]:[2]:method_text:[essAllowed());            }        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPublicAccess()]:[1]:method_text:[inally {            blobData.delete();            serviceConnection.unbind();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPublicAccess()]:[1]:method_text:[id.getDataBytes());        } finally {            serviceConnection.unbind();        }    }   ])', 1), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[BlobStoreManager.session]:[1]:method_text:[ssion, 0, PARTIAL_FILE_LENGTH_BYTES);        }        addSessionIdToResults(sessionId);    }   ])', 1), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[BlobStoreManager.session]:[1]:method_text:[            assertThat(session.getSize()).isEqualTo(PARTIAL_FILE_LENGTH_BYTES);        }    }   ])', 1), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[BlobStoreManager.session]:[1]:method_text:[       .isEqualTo(0);        }        addBlobHandleToResults(blobData.getBlobHandle());    }   ])', 1), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[BlobStoreManager.session]:[1]:method_text:[egistry.getArguments();        return ""1"".equals(args.getString(KEY_ALLOW_SAME_SIGNATURE));    }}])', 1), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[BlobStoreManager.Session]:[1]:method_text:[ssion, 0, PARTIAL_FILE_LENGTH_BYTES);        }        addSessionIdToResults(sessionId);    }   ])', 1), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[BlobStoreManager.Session]:[1]:method_text:[            assertThat(session.getSize()).isEqualTo(PARTIAL_FILE_LENGTH_BYTES);        }    }   ])', 1), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[BlobStoreManager.Session]:[1]:method_text:[       .isEqualTo(0);        }        addBlobHandleToResults(blobData.getBlobHandle());    }   ])', 1), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[BlobStoreManager.Session]:[1]:method_text:[egistry.getArguments();        return ""1"".equals(args.getString(KEY_ALLOW_SAME_SIGNATURE));    }}])', 1), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[allowSameSignatureAccess()]:[1]:method_text:[       .isEqualTo(0);        }        addBlobHandleToResults(blobData.getBlobHandle());    }   ])', 1), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[allowSameSignatureAccess()]:[1]:method_text:[egistry.getArguments();        return ""1"".equals(args.getString(KEY_ALLOW_SAME_SIGNATURE));    }}])', 1), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[allowPublicAccess()]:[1]:method_text:[       .isEqualTo(0);        }        addBlobHandleToResults(blobData.getBlobHandle());    }   ])', 1), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[allowPublicAccess()]:[1]:method_text:[egistry.getArguments();        return ""1"".equals(args.getString(KEY_ALLOW_SAME_SIGNATURE));    }}])', 1), ('([1:/com/android/cts/device/blob/AtomTest.java]:[BlobStoreManager.session]:[1]:method_text:[   callback.get(BLOB_COMMIT_CALLBACK_TIMEOUT_SEC, TimeUnit.SECONDS)).isEqualTo(0);        }    }}])', 1), ('([1:/com/android/cts/device/blob/AtomTest.java]:[BlobStoreManager.Session]:[1]:method_text:[   callback.get(BLOB_COMMIT_CALLBACK_TIMEOUT_SEC, TimeUnit.SECONDS)).isEqualTo(0);        }    }}])', 1), ('([1:/com/android/compatibility/common/util/DeviceReportTest.java]:[java.lang.String]:[1]:method_text:[REAM_NAME_3 = ""SampleStream3"";    private static final String STREAM_NAME_4 = ""SampleStream4"";   ])', 1), ('([1:/android/gesture/cts/GestureStorageTester.java]:[java.lang.String]:[1]:method_text:[ android.gesture.GestureStore#removeGesture(java.lang.String, android.gesture.Gesture)}.     */   ])', 1), ('([1:/android/gesture/cts/GestureStorageTester.java]:[java.lang.String]:[1]:method_text:[   * Test method for {@link android.gesture.GestureStore#removeEntry(java.lang.String)}.     */   ])', 1), ('([1:/android/gesture/cts/GestureStorageTester.java]:[java.lang.String]:[1]:method_text:[   * Test method for {@link android.gesture.GestureStore#getGestures(java.lang.String)}.     */   ])', 1), ('([1:/dot/junit/opcodes/const_class/Test_const_class.java]:[java.lang.String]:[1]:method_text:[e().compareTo(""java.lang.String""));    }        /**     * @title const-class v254, I     */   ])', 1), ('([1:/android/effect/cts/EffectTest.java]:[java.lang.String]:[1]:method_text:[EffectSupported(""java.lang.String""));    }    /** Assert that we can instantiate an effect */   ])', 1), ('([2:/android/signature/cts/InterfaceChecker.java]:[java.lang.String]:[2]:method_text:[       } else {            class2Description.put(runtimeClass, classDescription);        }    }}])', 1), ('([1:/android/trustedvoice/cts/TrustedVoiceHostTest.java]:[java.lang.String]:[1]:method_text:[*     * Tests the app successfully unlocked the device.     *     * @throws Exception     */   ])', 1), ('([2:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[2]:method_text:[  assertEquals(constructor.toSignatureString(), ""private NormalClass(java.lang.String)"");    }   ])', 1), ('([4:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[4]:method_text:[) "" +                        ""throws android.signature.cts.tests.data.NormalException"");    }   ])', 1), ('([6:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[6]:method_text:[(),                ""NormalClass(java.lang.String, java.lang.String, java.lang.String)"");    }   ])', 1), ('([2:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[2]:method_text:[assertEquals(method.toSignatureString(), ""protected java.lang.String protectedMethod()"");    }   ])', 1), ('([2:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[2]:method_text:[    assertEquals(field.toSignatureString(), ""public final java.lang.String FINAL_FIELD"");    }   ])', 1), ('([2:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[2]:method_text:[  assertEquals(field.toSignatureString(), ""public static java.lang.String STATIC_FIELD"");    }   ])', 1), ('([2:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[2]:method_text:[sertEquals(field.toSignatureString(), ""public volatile java.lang.String VOLATILE_FIELD"");    }   ])', 1), ('([2:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[2]:method_text:[oSignatureString(),                ""public transient java.lang.String TRANSIENT_FIELD"");    }   ])', 1), ('([2:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[2]:method_text:[(clz);        assertEquals(field.toSignatureString(), ""java.lang.String PACAKGE_FIELD"");    }   ])', 1), ('([2:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[2]:method_text:[       assertEquals(field.toSignatureString(), ""private java.lang.String PRIVATE_FIELD"");    }   ])', 1), ('([2:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[2]:method_text:[   assertEquals(field.toSignatureString(), ""protected java.lang.String PROTECTED_FIELD"");    }   ])', 1), ('([2:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[2]:method_text:[ertEquals(field.toSignatureString(), ""public static final java.lang.String VALUE_FIELD"");    }   ])', 1), ('([2:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[2]:method_text:[ring(), ""public static final java.lang.String VALUE_FIELD"");        observer.validate();    }   ])', 1), ('([1:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[1]:method_text:[z);        assertEquals(clz.toSignatureString(), ""public class NormalClass.InnerClass"");    }   ])', 1), ('([1:/android/signature/cts/tests/ApiComplianceCheckerTest.java]:[java.lang.String]:[1]:method_text:[ignatureString(),                ""public class NormalClass.InnerClass.InnerInnerClass"");    }   ])', 1), ('([1:/com/android/cts/appsearch/app/GlobalSearchSessionPlatformCtsTest.java]:[allowPackageAccess()]:[1]:method_text:[ assertPackageCanAccess(EMAIL_DOCUMENT, PKG_A);        assertPackageCannotAccess(PKG_B);    }   ])', 1), ('([1:/com/android/cts/device/blob/DataPersistenceTest.java]:[BlobStoreManager.session]:[1]:method_text:[UT_WAIT_FOR_IDLE_MS),                Exception.class, android.Manifest.permission.DUMP);    }   ])', 1), ('([1:/com/android/cts/device/blob/DataPersistenceTest.java]:[BlobStoreManager.session]:[1]:method_text:[BYTES,                    blobData.getFileSize() - PARTIAL_FILE_LENGTH_BYTES);        }    }   ])', 1), ('([1:/com/android/cts/device/blob/DataPersistenceTest.java]:[BlobStoreManager.session]:[1]:method_text:[_COMMIT_CALLBACK_MS, TimeUnit.MILLISECONDS))                    .isEqualTo(0);        }    }   ])', 1), ('([1:/com/android/cts/device/blob/DataPersistenceTest.java]:[BlobStoreManager.Session]:[1]:method_text:[UT_WAIT_FOR_IDLE_MS),                Exception.class, android.Manifest.permission.DUMP);    }   ])', 1), ('([1:/com/android/cts/device/blob/DataPersistenceTest.java]:[BlobStoreManager.Session]:[1]:method_text:[BYTES,                    blobData.getFileSize() - PARTIAL_FILE_LENGTH_BYTES);        }    }   ])', 1), ('([1:/com/android/cts/device/blob/DataPersistenceTest.java]:[BlobStoreManager.Session]:[1]:method_text:[_COMMIT_CALLBACK_MS, TimeUnit.MILLISECONDS))                    .isEqualTo(0);        }    }   ])', 1)]"	"https://developer.android.com"	""	"[('BlobStoreManager.session', 27), ('BlobStoreManager.Session', 27), ('java.lang.String', 23), ('allowPublicAccess()', 7), ('allowSameSignatureAccess()', 6), ('allowPackageAccess()', 2)]"	"[('[com.android.cts.device.blob.DataCleanupTest testCommitBlob None]', 4), ('[com.android.cts.device.blob.DataCleanupTest testRecommitBlob None]', 4), ('[com.android.cts.blob.BlobStoreManagerTest testOpenSession_fromAnotherPkg CtsBlobStoreTestCases]', 3), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPublicAccess_abandonedSession CtsBlobStoreTestCases]', 3), ('[com.android.cts.blob.BlobStoreManagerTest testAllowSameSignatureAccess_abandonedSession CtsBlobStoreTestCases]', 3), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_acquireLease CtsBlobStoreTestCases]', 3), ('[com.android.cts.blob.BlobStoreManagerTest testOpenReadWriteSession CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testOpenSessionAndAbandon CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testCloseSession CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPackageAccess_abandonedSession CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incompleteData CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incorrectData CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_largeBlob CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testCommitSession_multipleReadWrites CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testOpenBlob CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttributedToSelf CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testCommitBlobAfterIdleMaintenance CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testExpiredSessionsDeleted_withPartialData CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPackageAccess_countLimitExceeded CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testBlobHandleCreation CtsBlobStoreTestCases]', 2), ('[com.android.cts.device.blob.DataCleanupTest testCreateSession None]', 2), ('[com.android.cts.device.blob.DataCleanupTest testOpenSession None]', 2), ('[com.android.cts.device.blob.AtomTest testBlobStoreOps None]', 2), ('[com.android.cts.device.blob.DataPersistenceTest testCreateSession None]', 2), ('[com.android.cts.device.blob.DataPersistenceTest testOpenSessionAndWrite None]', 2), ('[com.android.cts.device.blob.DataPersistenceTest testCommitSession None]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPackageAccess CtsBlobStoreTestCases]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testAllowSameSignatureAccess CtsBlobStoreTestCases]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testMixedAccessType CtsBlobStoreTestCases]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testMixedAccessType_fromMultiplePackages CtsBlobStoreTestCases]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPublicAccess CtsBlobStoreTestCases]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testAcquireLease_multipleLeasees CtsBlobStoreTestCases]', 1), ('[android.gesture.cts.GestureStorageTester testRecognize CtsGestureTestCases]', 1), ('[android.gesture.cts.GestureStorageTester testRemoveGesture CtsGestureTestCases]', 1), ('[android.gesture.cts.GestureStorageTester testRemoveEntry CtsGestureTestCases]', 1), ('[dot.junit.opcodes.const_class.Test_const_class testN1 None]', 1), ('[android.effect.cts.EffectTest test4_effectCreate CtsEffectTestCases]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testOneArgConstructor None]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testConstructorThrowsException None]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testPackageProtectedConstructor None]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testProtectedMethod None]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testFinalField None]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testStaticField None]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testVolatileFiled None]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testTransientField None]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testPackageField None]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testPrivateField None]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testProtectedField None]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testFieldValue None]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testFieldValueChanged None]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testInnerClass None]', 1), ('[android.signature.cts.tests.ApiComplianceCheckerTest testInnerInnerClass None]', 1), ('[com.android.cts.appsearch.app.GlobalSearchSessionPlatformCtsTest testAllowPackageAccess CtsAppSearchTestCases]', 1)]"
"9.8.10  Connectivity Bug Report"	"9.8.10"	"C-1-1"	"9.8.10/C-1-1"	"09081000.670101"	"""C-1-1] MUST obtain user consent every time the System API     `BUGREPORT_MODE_TELEPHONY` is called to generate a report and MUST NOT     prompt the user to consent to all future requests from the application. """	""	""	"BUGREPORT_MODE_TELEPHONY"	""	""	""	""	"[('android.bugreport.cts.BugreportManagerTest', 1), ('android.carrierapi.cts.BugreportManagerTest', 1)]"	"[('startBugreport_connectivityBugreport', 1), ('BugreportCallbackImpl', 1)]"	"[('CtsBugreportTestCases', 1), ('CtsCarrierApiTestCases', 1)]"	""	""	""	""	"android.carrierapi.cts.BugreportManagerTest"	"BugreportCallbackImpl"	"CtsCarrierApiTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/bugreport/src/android/bugreport/cts/BugreportManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/BugreportManagerTest.java', 1)]"	"[('(1,BUGREPORT_MODE_TELEPHONY,/android/bugreport/cts/BugreportManagerTest.java)', 1), ('(1,BUGREPORT_MODE_TELEPHONY,/android/carrierapi/cts/BugreportManagerTest.java)', 1)]"	"[('([1:/android/bugreport/cts/BugreportManagerTest.java]:[BUGREPORT_MODE_TELEPHONY]:[1]:method_text:[port does not take any screenshot        assertThat(screenshot).isNull();    }    @LargeTest   ])', 1), ('([1:/android/carrierapi/cts/BugreportManagerTest.java]:[BUGREPORT_MODE_TELEPHONY]:[1]:method_text:[ertThat(mScreenshotFile.length()).isEqualTo(0L);        assertFdIsClosed(mScreenshotFd);    }   ])', 1)]"	""	""	"[('BUGREPORT_MODE_TELEPHONY', 2)]"	"[('[android.bugreport.cts.BugreportManagerTest testTelephonyBugreport CtsBugreportTestCases]', 1), ('[android.carrierapi.cts.BugreportManagerTest hasEarlyReportFinished CtsCarrierApiTestCases]', 1)]"
"2.2.3  Software"	"3.8.16"	"H-2-1"	"3.8.16/H-2-1"	"03081600.720201"	"""[3.8.16/H-2-1] MUST report `null` for     the [`ControlsProviderService`](https://developer.android.com/reference/android/service/controls/ControlsProviderService)     and the [`Control`](https://developer.android.com/reference/android/service/controls/Control)     APIs. *   ["""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://developer.android.com"	""	""	""
"3.18  Contacts"	"3.18"	"C-1-2"	"3.18/C-1-2"	"03180000.670102"	"""C-1-2] The      [`ACCOUNT_TYPE`](https://developer.android.com/reference/android/provider/ContactsContract.SyncColumns.html#ACCOUNT_TYPE),      of the **custom local account** MUST be returned by      [`ContactsContract.RawContacts.getLocalAccountType`](https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html#getLocalAccountType\(\)) """	""	""	"ContactsContract.RawContacts.html ContactsContract.RawContacts.getLocalAccountType ACCOUNT_TYPE ContactsContract.SyncColumns.html"	""	""	""	""	"[('android.accounts.cts.AccountManagerTest', 39), ('android.provider.cts.contacts.ContactsContract_RawContactsTest', 9), ('com.android.cts.accountmanager.AccountManagerCrossUserTest', 8), ('android.provider.cts.contacts.ContactsContract_DataTest', 8), ('com.android.cts.devicepolicy.accountmanagement.AccountManagementTest', 5), ('android.host.accounts.AccountManagerHostSideTest', 5), ('com.android.cts.deviceandprofileowner.AccountManagementParentTest', 4), ('com.android.cts.deviceandprofileowner.AllowedAccountManagementTest', 4), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 3), ('android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest', 3), ('com.android.cts.devicepolicy.accountmanagement.AccountUtilsTest', 3), ('android.provider.cts.contacts.ContactsContract_StructuredPhoneticName', 3), ('com.android.cts.managedprofile.ContactsTest', 3), ('android.accounts.cts.AbstractAuthenticatorTests', 3), ('android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest', 2), ('android.provider.cts.contacts.ContactsContract_AllUriTest', 2), ('com.android.cts.devicepolicy.accountcheck.AccountCheckTest', 2), ('android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests', 2), ('android.provider.cts.contacts.ContactsContract_IsSuperPrimaryName', 2), ('android.devicepolicy.cts.DevicePolicyManagerTest', 2), ('android.provider.cts.contacts.ContactsContract_GroupMembershipTest', 2), ('android.content.cts.ContentResolverSyncTestCase', 2), ('android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest', 1), ('android.security.cts.NanoAppBundleTest', 1), ('android.provider.cts.contacts.ContactsContract_SearchSnippetsTest', 1), ('android.provider.cts.contacts.ContactsContract_DirectoryTest', 1), ('android.provider.cts.contacts.ContactsContract_StatusUpdatesTest', 1), ('android.provider.cts.contacts.ContactsContract_ContactCountsTest', 1), ('android.provider.cts.contacts.ContactsContract_AggregationSuggestionsTest', 1), ('android.telephony.ims.cts.EabBulkCapabilityUpdaterTest', 1), ('android.provider.cts.contacts.ContactsContract_PhoneLookup', 1), ('android.provider.cts.contacts.ContactsContract_Subquery', 1), ('android.provider.cts.contacts.ContactsTest', 1), ('android.provider.cts.calendar.CalendarTest', 1), ('android.content.sync.cts.InvalidSyncAuthoritiesDeviceTest', 1), ('android.provider.cts.contacts.ContactsContract_ProviderStatus', 1)]"	"[('getDevice', 35), ('setUp', 32), ('tearDown', 19), ('ContentValues', 17), ('getContext', 11), ('getContentResolver', 8), ('build', 8), ('moveToFirst', 7), ('getInstrumentation', 6), ('getTargetContext', 4), ('size', 4), ('getMessage', 4), ('getCount', 4), ('getMockSyncAdapter', 4), ('failIfFailed', 3), ('buildUpon', 3), ('Bundle', 3), ('cleanup', 3), ('getUiAutomation', 2), ('waitForDirectorySetup', 2), ('elapsedRealtime', 2), ('waitForBroadcastIdle', 2), ('close', 2), ('BackupUtils', 1), ('getAccount', 1), ('StringBuilder', 1), ('length', 1), ('getColumnNames', 1), ('CancellationSignal', 1), ('getSimpleName', 1), ('getUserId', 1), ('assertNoPhotoUri', 1), ('getCurrentUser', 1), ('tesAddAccount_logsMetrics', 1), ('tesAddAccountExplicitly_logsMetrics', 1), ('tesGetAuthToken_logsMetrics', 1), ('CollectingOutputReceiver', 1), ('getOutput', 1), ('getApplicationContext', 1), ('getPackageManager', 1), ('CalendarHelper', 1), ('SyncStateHelper', 1), ('EventHelper', 1), ('AttendeeHelper', 1), ('ColorHelper', 1), ('ReminderHelper', 1), ('ExtendedPropertiesHelper', 1), ('clearData', 1), ('getResult', 1)]"	"[('CtsAccountManagerTestCases', 44), ('CtsContactsProviderTestCases', 39), ('CtsAccountsHostTestCases', 5), ('CtsDevicePolicyManagerTestCases', 3), ('CtsDevicePolicyTestCases', 2), ('CtsContentTestCases', 2), ('CtsSecurityTestCases', 1), ('CtsTelephonyTestCases', 1), ('CtsCalendarProviderTestCases', 1)]"	""	""	""	""	"android.accounts.cts.AbstractAuthenticatorTests"	"cleanup"	"CtsAccountManagerTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/accounts/src/android/accounts/cts/AccountManagerTest.java', 39), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_RawContactsTest.java', 9), ('/home/gpoor/cts-12-source/cts/hostsidetests/accounts/test-apps/AccountManagerCrossUserApp/src/com/android/cts/accountmanager/AccountManagerCrossUserTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_DataTest.java', 8), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/AccountManagement/src/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java', 5), ('/home/gpoor/cts-12-source/cts/hostsidetests/accounts/src/android/host/accounts/AccountManagerHostSideTest.java', 5), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/AccountManagement/src/com/android/cts/devicepolicy/accountmanagement/AccountUtilsTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/accounts/src/android/accounts/cts/AbstractAuthenticatorTests.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/SyncAdapterSettingsApp/src/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_AllUriTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/AccountCheck/Auth/src/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/accounts/src/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java', 2), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/DevicePolicyManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentResolverSyncTestCase.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/NanoAppBundleTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_SearchSnippetsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_DirectoryTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_StatusUpdatesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_ContactCountsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_AggregationSuggestionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_PhoneLookup.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_Subquery.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/calendarprovider/src/android/provider/cts/calendar/CalendarTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/content/test-apps/CtsSyncInvalidAccountAuthorityTestCases/src/android/content/sync/cts/InvalidSyncAuthoritiesDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_ProviderStatus.java', 1)]"	"[('(11,ACCOUNT_TYPE,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(4,ACCOUNT_TYPE,/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java)', 1), ('(1,ContactsContract.RawContacts.getLocalAccountType,/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java)', 1), ('(2,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java)', 1), ('(2,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_AllUriTest.java)', 1), ('(3,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java)', 1), ('(5,ACCOUNT_TYPE,/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java)', 1), ('(1,ACCOUNT_TYPE,/android/security/cts/NanoAppBundleTest.java)', 1), ('(2,ACCOUNT_TYPE,/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java)', 1), ('(6,ACCOUNT_TYPE,/com/android/cts/devicepolicy/accountmanagement/AccountUtilsTest.java)', 1), ('(4,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java)', 1), ('(12,ACCOUNT_TYPE,/com/android/cts/accountmanager/AccountManagerCrossUserTest.java)', 1), ('(3,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_SearchSnippetsTest.java)', 1), ('(5,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_DirectoryTest.java)', 1), ('(15,ACCOUNT_TYPE,/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java)', 1), ('(3,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_StatusUpdatesTest.java)', 1), ('(5,ACCOUNT_TYPE,/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java)', 1), ('(5,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java)', 1), ('(6,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_ContactCountsTest.java)', 1), ('(8,ACCOUNT_TYPE,/com/android/cts/managedprofile/ContactsTest.java)', 1), ('(112,ACCOUNT_TYPE,/android/accounts/cts/AccountManagerTest.java)', 1), ('(3,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_AggregationSuggestionsTest.java)', 1), ('(5,ACCOUNT_TYPE,/android/host/accounts/AccountManagerHostSideTest.java)', 1), ('(3,ACCOUNT_TYPE,/android/devicepolicy/cts/DevicePolicyManagerTest.java)', 1), ('(1,ACCOUNT_TYPE,/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java)', 1), ('(3,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_PhoneLookup.java)', 1), ('(18,ACCOUNT_TYPE,/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java)', 1), ('(1,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_Subquery.java)', 1), ('(7,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsTest.java)', 1), ('(12,ACCOUNT_TYPE,/android/provider/cts/calendar/CalendarTest.java)', 1), ('(15,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_DataTest.java)', 1), ('(4,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java)', 1), ('(3,ACCOUNT_TYPE,/android/content/sync/cts/InvalidSyncAuthoritiesDeviceTest.java)', 1), ('(1,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_ProviderStatus.java)', 1), ('(2,ACCOUNT_TYPE,/android/content/cts/ContentResolverSyncTestCase.java)', 1), ('(14,ACCOUNT_TYPE,/android/provider/cts/contacts/ContactsContract_RawContactsTest.java)', 1), ('(3,ACCOUNT_TYPE,/android/accounts/cts/AbstractAuthenticatorTests.java)', 1)]"	"[('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ Or separate the authenticator and test app to allow the instant app mode test.    @AppModeFull   ])', 3), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ Or separate the authenticator and test app to allow the instant app mode test.    @AppModeFull   ])', 2), ('([1:/android/host/accounts/AccountManagerHostSideTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[UTH_TOKEN_TYPE,                        REQUIRED_FEATURES_STR)                .build());    }   ])', 2), ('([1:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[               lookupContact.getId(), data.load().getRawContact().load().getContactId());    }   ])', 2), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[wrong contact"",                lookupContact.getId(), rawContact.load().getContactId());    }   ])', 2), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[.        getDevice().executeShellCommand(""input keyevent 3"");        super.tearDown();    }   ])', 1), ('([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[ACCOUNT_TYPE]:[4]:method_text:[, ACCOUNT_TYPE, mUserId);        }        executeAccountTest(""testAddAccount_allowed"");    }   ])', 1), ('([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[ACCOUNT_TYPE]:[4]:method_text:[CCOUNT_TYPE, mUserId);        }        executeAccountTest(""testRemoveAccount_allowed"");    }   ])', 1), ('([1:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ge.     * 3. Check restored MasterSyncAutomatically=true is the same with backup value.     */   ])', 1), ('([3:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[   Account account = accounts[i];            am.removeAccountExplicitly(account);        }    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[ContactsContract.RawContacts.getLocalAccountType]:[1]:method_text:[ to an added account will be removed but this should not be done for these SIM accounts.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ut this should not be done for the local account.     */    @CddTest(requirement=""3.18/C-1-4"")   ])', 1), ('([1:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ to an added account will be removed but this should not be done for these SIM accounts.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ull);    }    /**     * Make sure all URLs are accessible with all arguments = null.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[    mResolver.delete(uri, ""1=2"", null);            });        }        failIfFailed();    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[).load();        return new long[] {contact.getId(), contact2.getId(), contact3.getId()};    }}])', 1), ('([1:/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[.getSystemService(AccountManager.class);    }    /**     * Remove all test accounts.     */   ])', 1), ('([4:/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java]:[ACCOUNT_TYPE]:[4]:method_text:[_ACCOUNT_TYPE));    }    /**     * Add an incompatible account, type A, no features.     */   ])', 1), ('([1:/android/security/cts/NanoAppBundleTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[.getPackageManager();        return pm.hasSystemFeature(PackageManager.FEATURE_AUTOMOTIVE);    }}])', 1), ('([1:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[ACCOUNT_TYPE]:[1]:method_text:[ expected because default implementation cannot     * understand custom session bundle.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[ACCOUNT_TYPE]:[1]:method_text:[EN_UNAFFILIATED,                result.getString(AccountManager.KEY_ACCOUNT_STATUS_TOKEN));    }}])', 1), ('([2:/com/android/cts/devicepolicy/accountmanagement/AccountUtilsTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[   mAccountManager = (AccountManager) mContext.getSystemService(Context.ACCOUNT_SERVICE);    }   ])', 1), ('([2:/com/android/cts/devicepolicy/accountmanagement/AccountUtilsTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[anager.getAccountsByType(MockAccountAuthenticator.ACCOUNT_TYPE)                .length);    }   ])', 1), ('([2:/com/android/cts/devicepolicy/accountmanagement/AccountUtilsTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[tManager.getAccountsByType(MockAccountAuthenticator.ACCOUNT_TYPE)                .length);    }}])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java]:[ACCOUNT_TYPE]:[2]:method_text:[   contact.load();        contact.assertColumn(Contacts.DISPLAY_NAME, otherDisplayName);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java]:[ACCOUNT_TYPE]:[2]:method_text:[_TOGETHER);        mResolver.update(AggregationExceptions.CONTENT_URI, values, null, null);    }}])', 1), ('([1:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[mberFormatException ignore) {            }        }        return numAccountsExpected;    }   ])', 1), ('([3:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[accounts = accountManagerAsUser.getAccounts();        assertThat(accounts).hasLength(1);    }   ])', 1), ('([1:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ity= */ null,                /* callback= */ null,                /* handler= */ null);    }   ])', 1), ('([1:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[            assertThat(accounts).hasLength(1);        } catch (Exception e) {        }    }   ])', 1), ('([2:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ssertThat(accountManager.getAccountsByType(MockAuthenticator.ACCOUNT_TYPE)).hasLength(1);    }   ])', 1), ('([2:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[  assertThat(accountManager.getAccountsByType(MockAuthenticator.ACCOUNT_TYPE)).isEmpty();    }   ])', 1), ('([1:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[sByType(MockAuthenticator.ACCOUNT_TYPE)).hasLength(                numAccountsExpected);    }   ])', 1), ('([1:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[n,                mContext.getPackageName())).isEqualTo(PackageManager.PERMISSION_DENIED);    }}])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_SearchSnippetsTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[new long[] {                contact.getId(), contact2.getId(), contact3.getId()        };    }}])', 1), ('([5:/android/provider/cts/contacts/ContactsContract_DirectoryTest.java]:[ACCOUNT_TYPE]:[5]:method_text:[D));            }        }        fail(""Directory didn\'t show up"");        return -1;    }   ])', 1), ('([3:/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[ockAccountAuthenticator.ACCOUNT_TYPE)                .length);        super.tearDown();    }   ])', 1), ('([3:/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[anager.getAccountsByType(MockAccountAuthenticator.ACCOUNT_TYPE)                .length);    }   ])', 1), ('([3:/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[TokenType"", false);        assertEquals(MockAccountAuthenticator.AUTH_TOKEN, authToken);    }   ])', 1), ('([3:/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[E);        assertEquals(1, accounts.length);        assertEquals(ACCOUNT, accounts[0]);    }   ])', 1), ('([3:/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[ntManager.getAccountsByType(MockAccountAuthenticator.ACCOUNT_TYPE)                .length);    }}])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_StatusUpdatesTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[    assertNotNull(results[1].uri);        dataId = ContentUris.parseId(results[1].uri);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[getSystemService(DevicePolicyManager.class);        assertNotNull(mDevicePolicyManager);    }   ])', 1), ('([2:/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[      assertThat(mDevicePolicyManager.getAccountTypesWithManagementDisabled()).isEmpty();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[esWithManagementDisabled()).asList()                .containsExactly(SOME_ACCOUNT_TYPE);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ssertThat(parentDevicePolicyManager).isNotNull();        return parentDevicePolicyManager;    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java]:[ACCOUNT_TYPE]:[1]:method_text:[ntacts.DISPLAY_NAME_SOURCE,                DisplayNameSources.STRUCTURED_PHONETIC_NAME);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java]:[ACCOUNT_TYPE]:[2]:method_text:[   }    // Same as testPhoneticStructuredName_phoneticPriority1, but with setup order reversed   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java]:[ACCOUNT_TYPE]:[2]:method_text:[awContact2.getContact().load();        contact.assertColumn(Contacts.DISPLAY_NAME, ""name"");    }}])', 1), ('([6:/android/provider/cts/contacts/ContactsContract_ContactCountsTest.java]:[ACCOUNT_TYPE]:[6]:method_text:[), contact3.getId(), contact4.getId(),                contact5.getId(), contact6.getId()};    }}])', 1), ('([2:/com/android/cts/managedprofile/ContactsTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[PolicyManager) mContext                .getSystemService(Context.DEVICE_POLICY_SERVICE);    }   ])', 1), ('([1:/com/android/cts/managedprofile/ContactsTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[YPE);        AccountManager.get(getContext()).addAccountExplicitly(account, null, null);    }   ])', 1), ('([5:/com/android/cts/managedprofile/ContactsTest.java]:[ACCOUNT_TYPE]:[5]:method_text:[ArgumentException is not thrown"");        } catch (IllegalArgumentException ex) {        }    }}])', 1), ('([23:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[23]:method_text:[eak;            }        }        return result;    }    /**     * Test singleton     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[nResult(resultBundle);    }    /**     * Test addAccount() with callback and handler     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[    @AppModeFull(reason = ""The methods are for sign-up wizards associated with authenticators."")   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ @AppModeFull(reason = ""The methods requires the caller to match signature with authenticator."")   ])', 1), ('([9:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[9]:method_text:[ @AppModeFull(reason = ""The methods requires the caller to match signature with authenticator."")   ])', 1), ('([6:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[6]:method_text:[kage(null, PACKAGE_NAME_1));    }    /**     * Test setUserData() and getUserData().     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[    assertEquals(0, accounts.length);    }    /**     * Test getAuthenticatorTypes()     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ator type: "" + ACCOUNT_TYPE);    }    /**     * Test setPassword() and getPassword()     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[th);    }    /**     * Test getAccountsByTypeAndFeatures() with callback and handler     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ptedException"");        }    }    /**     * Test setAuthToken() and peekAuthToken()     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[/**     * Test successful blockingGetAuthToken() with customTokens=false authenticator.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ /**     * Test successful blockingGetAuthToken() with customTokens=true authenticator.     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[getAccountType());    }    /**     * Test editProperties() with callback and handler     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[tion"");        }    }    /**     * Test addOnAccountsUpdatedListener() with handler     */   ])', 1), ('([4:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[4]:method_text:[ner(listener);    }    /**     * Test removeOnAccountsUpdatedListener() with handler     */   ])', 1), ('([3:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[count);    }    /**     * Tests that AccountManagerService is properly caching data.     */   ])', 1), ('([5:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[5]:method_text:[ a bundle containing     * encrypted session bundle, account password and status token.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[status token should be included in the result as session     * bundle is not inspected.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[status token should be included in     * the result as session bundle is not inspected.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[thenticator return     * {@link AccountManager#ERROR_CODE_INVALID_RESPONSE} error code.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[k should be triggered with the result regardless of a     * handler is provided or not.     */   ])', 1), ('([4:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[4]:method_text:[ a bundle containing     * encrypted session bundle, account password and status token.     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[tialsSession(...). A bundle containing account name and account     * type is expected.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[on bundle. IllegalArgumentException     * is expected as session bundle cannot be null.     */   ])', 1), ('([3:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[rSerivce will always add account type to the session bundle     * before encrypting it.     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ce     * will always overrides account type to the session bundle before encrypting it.     */   ])', 1), ('([3:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[vce will always override account type to the session bundle     * before encrypting it.     */   ])', 1), ('([3:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[ted when     * AccountManager.ERROR_CODE_INVALID_RESPONSE is returned by authenticator.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ should be returned via the callback regardless of     * whether a handler is provided.     */   ])', 1), ('([10:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[10]:method_text:[s a basic isCredentialsUpdateSuggested() which returns a bundle containing boolean true.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[eSuggested() when account is null.     * It should throw IllegalArgumentationException.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[   * authenticator return {@link AccountManager#ERROR_CODE_INVALID_RESPONSE} error code.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[k should be triggered with the result regardless of a handler is     * provided or not.     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[),                firstPositionForType.get(type) + counterForType.get(type) - 1);        }    }}])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_AggregationSuggestionsTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[.getContactId(),                rawContact2.getContactId(), rawContact3.getContactId()};    }   ])', 1), ('([1:/android/host/accounts/AccountManagerHostSideTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ])', 1), ('([1:/android/host/accounts/AccountManagerHostSideTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[PERMISSION_PKG,                        expectedVisibilityStr)                .build());    }   ])', 1), ('([1:/android/host/accounts/AccountManagerHostSideTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[ %s"", output);            fail(""\'am wait-for-broadcase-idle\' did not complete."");        }    }}])', 1), ('([2:/android/devicepolicy/cts/DevicePolicyManagerTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[e(PackageManager.FEATURE_DEVICE_ADMIN)    @RequireFeature(PackageManager.FEATURE_MANAGED_USERS)   ])', 1), ('([1:/android/devicepolicy/cts/DevicePolicyManagerTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[  }    }    @RequireRunOnPrimaryUser    @RequireFeature(PackageManager.FEATURE_DEVICE_ADMIN)   ])', 1), ('([1:/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[uld not format "" + number + "", error: "" + e);            }        }        return number;    }}])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_PhoneLookup.java]:[ACCOUNT_TYPE]:[3]:method_text:[    * Test for {@link android.provider.ContactsContract.PhoneLookup#CONTENT_FILTER_URI}.     */   ])', 1), ('([3:/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[MPONENT,                UserManager.DISALLOW_MODIFY_ACCOUNTS);        super.tearDown();    }   ])', 1), ('([6:/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java]:[ACCOUNT_TYPE]:[6]:method_text:[    assertEquals(0, mDevicePolicyManager.getAccountTypesWithManagementDisabled().length);    }   ])', 1), ('([5:/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java]:[ACCOUNT_TYPE]:[5]:method_text:[        assertEquals(ACCOUNT_TYPE_1, result.getString(AccountManager.KEY_ACCOUNT_TYPE));    }   ])', 1), ('([4:/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java]:[ACCOUNT_TYPE]:[4]:method_text:[l).getResult();        assertTrue(result.getBoolean(AccountManager.KEY_BOOLEAN_RESULT));    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_Subquery.java]:[ACCOUNT_TYPE]:[1]:method_text:[ exists(select 1)"", null, null)) {            assertEquals(0, cursor.getCount());        }    }}])', 1), (""([7:/android/provider/cts/contacts/ContactsTest.java]:[ACCOUNT_TYPE]:[7]:method_text:[er's extensions table     * It does not test any APIs in android.provider.Contacts.java     */   ])"", 1), ('([12:/android/provider/cts/calendar/CalendarTest.java]:[ACCOUNT_TYPE]:[12]:method_text:[tResolver = getInstrumentation().getTargetContext().getContentResolver();    }    @MediumTest   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ void tearDown() throws Exception {        super.tearDown();        mBuilder.cleanup();    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[              DATA_PROJECTION,                new long[]{data.load().getId()}        );    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[oupMembership.GROUP_SOURCE_ID},                new long[]{rawContact.getId()}        );    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[                   Data.LAST_TIME_USED},                new long[]{contactId}        );    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[);        } finally {            // Clean up            rawContact.delete();        }    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[              toReturn[i] = cv.get(i);            }            return toReturn;        }    }}])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[_id"");        groupMembership.assertColumn(GroupMembership.GROUP_ROW_ID, group.getId());    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ertColumn(GroupMembership.GROUP_ROW_ID, group.getId());        group.deletePermanently();    }}])', 1), ('([3:/android/content/sync/cts/InvalidSyncAuthoritiesDeviceTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[ger.addAccountExplicitly(mValidAccount, ""password"", null));        return mValidAccount;    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_ProviderStatus.java]:[ACCOUNT_TYPE]:[1]:method_text:[ {            if (cursor != null) {                cursor.close();            }        }    }}])', 1), ('([1:/android/content/cts/ContentResolverSyncTestCase.java]:[ACCOUNT_TYPE]:[1]:method_text:[etIsSyncable(account, authority, (b) ? 1 : 0);    }    /**     * Test a sync request     */   ])', 1), ('([1:/android/content/cts/ContentResolverSyncTestCase.java]:[ACCOUNT_TYPE]:[1]:method_text:[found);    }    /**     * Test if a badly formed sync request is throwing exceptions     */   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ void tearDown() throws Exception {        super.tearDown();        mBuilder.cleanup();    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[/base/core/res/res/values/config.xml.     */    @CddTest(requirement=""3.18/C-1-1,C-1-2,C-1-3"")   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ctCreate_noAccountUsesLocalAccount()}     */    @CddTest(requirement=""3.18/C-1-1,C-1-2,C-1-3"")   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[2]:method_text:[ntext), row[0]);        assertEquals(RawContacts.getLocalAccountType(mContext), row[1]);    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[       RAW_CONTACTS_PROJECTION,                new long[]{rawContact.getId()}        );    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[3]:method_text:[          assertEquals(0, rawContact.getLong(RawContacts.LAST_TIME_CONTACTED));        }    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_TYPE]:[1]:method_text:[S_CONTACTED));        assertEquals(0, rawContact.getLong(RawContacts.LAST_TIME_CONTACTED));    }}])', 1), ('([1:/android/accounts/cts/AbstractAuthenticatorTests.java]:[ACCOUNT_TYPE]:[1]:method_text:[rypted session     * bundle should always be returned without password or status token.     */   ])', 1), ('([1:/android/accounts/cts/AbstractAuthenticatorTests.java]:[ACCOUNT_TYPE]:[1]:method_text:[   * Only account name and account type should be returned as a bundle.     */    @AppModeFull   ])', 1), ('([1:/android/accounts/cts/AbstractAuthenticatorTests.java]:[ACCOUNT_TYPE]:[1]:method_text:[Suggested default implementation.     * A bundle with boolean false should be returned.     */   ])', 1)]"	"https://developer.android.com"	""	"[('ACCOUNT_TYPE', 129), ('ContactsContract.RawContacts.getLocalAccountType', 1)]"	"[('[android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest testAccountRemoval_doesNotDeleteLocalAccountContacts CtsContactsProviderTestCases]', 2), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledAddAccount CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledRemoveAccount CtsDevicePolicyManagerTestCases]', 1), ('[android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest testIsSyncableIsOne_ifTurnOffSyncEnabled None]', 1), ('[android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest testAccountRemovalWithMergedContact_deletesContacts CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_AllUriTest testAllOperations CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequent_projection CtsContactsProviderTestCases]', 1), ('[com.android.cts.devicepolicy.accountcheck.AccountCheckTest testRemoveAllAccounts None]', 1), ('[android.security.cts.NanoAppBundleTest testPoc_cve_2018_9471 CtsSecurityTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testDefaultFinishSessiontWithStartAddAccountSessionImpl CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testDefaultFinishSessionWithCustomStartUpdateCredentialsSessionImpl CtsAccountManagerTestCases]', 1), ('[com.android.cts.devicepolicy.accountmanagement.AccountUtilsTest testAddAccountExplicitly None]', 1), ('[com.android.cts.devicepolicy.accountmanagement.AccountUtilsTest testRemoveAccountExplicitly None]', 1), ('[android.provider.cts.contacts.ContactsContract_IsSuperPrimaryName testIsSuperPrimary_name2SuperPrimary CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_IsSuperPrimaryName testIsSuperPrimaryName_mergeBothSuperPrimary CtsContactsProviderTestCases]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest dropShellPermissionIdentity None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_addMockAccount None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_addMockAccountForCurrentUser None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_getAccountsForTestUser None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_addAccountExplicitlyForCurrentUser None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testRemoveAccountExplicitly None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_getAccountsForCurrentUser None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_startAddAccountSessionForCurrentUser None]', 1), ('[android.provider.cts.contacts.ContactsContract_SearchSnippetsTest testEnterpriseSearchSnippets_DeferredSnippetingMultiWordQuerySnippetNotDeferred CtsContactsProviderTestCases]', 1), ('[com.android.cts.devicepolicy.accountmanagement.AccountManagementTest testAddAccount_blocked None]', 1), ('[com.android.cts.devicepolicy.accountmanagement.AccountManagementTest testAddAccount_allowed None]', 1), ('[com.android.cts.devicepolicy.accountmanagement.AccountManagementTest testRemoveAccount_blocked None]', 1), ('[com.android.cts.devicepolicy.accountmanagement.AccountManagementTest testRemoveAccount_allowed None]', 1), ('[com.android.cts.deviceandprofileowner.AccountManagementParentTest testSetAccountManagementDisabledOnParent None]', 1), ('[com.android.cts.deviceandprofileowner.AccountManagementParentTest testAccountManagementDisabled None]', 1), ('[com.android.cts.deviceandprofileowner.AccountManagementParentTest testEnableAccountManagement None]', 1), ('[android.provider.cts.contacts.ContactsContract_StructuredPhoneticName testPhoneticStructuredName CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_StructuredPhoneticName testPhoneticStructuredName_phoneticPriority1 CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_StructuredPhoneticName testPhoneticStructuredName_phoneticPriority2 CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_ContactCountsTest testContactCounts_correctCountsReturned CtsContactsProviderTestCases]', 1), ('[com.android.cts.managedprofile.ContactsTest assertPhotoUrisReadable None]', 1), ('[com.android.cts.managedprofile.ContactsTest testAddTestAccount None]', 1), ('[com.android.cts.managedprofile.ContactsTest testQuickContact None]', 1), ('[android.accounts.cts.AccountManagerTest AccountManagerTest CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testAddAccount CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testAddAccountWithNoAuthenticator CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testAddAccountExplicitlyWithVisibility CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetAccountsAndVisibilityForPackage CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetAccountsReturnedOrder CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetAccountsAndGetAccountsByType CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetAuthenticatorTypes CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetAccountsByTypeAndFeatures CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetAccountsByTypeAndFeaturesWithCallbackAndHandler CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testSetAndPeekAndInvalidateAuthToken CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testBlockingGetAuthToken_DefaultToken_Success CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testConfirmCredentialsAccountNotOnDevice CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testEditProperties CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testEditPropertiesWithCallbackAndHandler CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testAddOnAccountsUpdatedListenerWithVisibility CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testHasFeature CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetsAreCached CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSession CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSessionWithNullSessionBundle CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSessionWithEmptySessionBundle CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSessionIntervene CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSessionWithReturnIntent CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSessionError CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSessionErrorWithCallbackAndHandler CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionWithStartAddAccountSession CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionWithStartUpdateCredentialsSession CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionFromStartAddAccountWithoutAccountType CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionFromStartUpdateCredentialsSessionWithoutAccountType CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionFromStartAddAccountAccountTypeOverriden CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionFromStartUpdateCredentialsSessionAccountTypeOverriden CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionIntervene CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionWithReturnIntent CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionError CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionErrorWithCallbackAndHandler CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testIsCredentialsUpdateSuggested_Success CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testIsCredentialsUpdateSuggestedEmptyToken_IllegalArgumentationException CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testIsCredentialsUpdateSuggested_Error CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testIsCredentialsUpdateSuggestedErrorWithCallbackAndHandler CtsAccountManagerTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_AggregationSuggestionsTest testAggregationSuggestionsByName_matchFirstNameParameter CtsContactsProviderTestCases]', 1), ('[android.host.accounts.AccountManagerHostSideTest testStartAddAccountSession_logsMetrics CtsAccountsHostTestCases]', 1), ('[android.devicepolicy.cts.DevicePolicyManagerTest TestApis CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.DevicePolicyManagerTest newlyProvisionedManagedProfile_setsCrossProfilePackages CtsDevicePolicyTestCases]', 1), ('[android.telephony.ims.cts.EabBulkCapabilityUpdaterTest deleteContactTest CtsTelephonyTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_PhoneLookup setupTestData CtsContactsProviderTestCases]', 1), ('[com.android.cts.deviceandprofileowner.AllowedAccountManagementTest clearAllAccountManagementDisabled None]', 1), ('[com.android.cts.deviceandprofileowner.AllowedAccountManagementTest testAccountManagementDisabled_setterAndGetter None]', 1), ('[com.android.cts.deviceandprofileowner.AllowedAccountManagementTest testAccountManagementDisabled_profileAndDeviceOwnerCanAddAccount None]', 1), ('[com.android.cts.deviceandprofileowner.AllowedAccountManagementTest testUserRestriction_profileAndDeviceOwnerCanAddAndRemoveAccount None]', 1), ('[android.provider.cts.contacts.ContactsContract_Subquery testProviderStatus_addedContacts CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsTest testSettingsTable CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testGetLookupUriBySourceId CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testDataProjection CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testRawContactsEntityProjection CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testEntityProjection CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testGetLookupUriByDisplayName CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testContactablesUri CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testDataUpdate_updatesContactLastUpdatedTimestamp CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_GroupMembershipTest testAddGroupMembershipWithGroupSourceId CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_GroupMembershipTest testAddGroupMembershipWithUnknownGroupSourceId CtsContactsProviderTestCases]', 1), ('[android.content.sync.cts.InvalidSyncAuthoritiesDeviceTest createTestAccount None]', 1), ('[android.provider.cts.contacts.ContactsContract_ProviderStatus testProviderStatus_addedContacts CtsContactsProviderTestCases]', 1), ('[android.content.cts.ContentResolverSyncTestCase isDone CtsContentTestCases]', 1), ('[android.content.cts.ContentResolverSyncTestCase testGetSyncAdapterTypes CtsContentTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testGetLookupUriBySourceId CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testGetLookupUriByDisplayName CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testRawContactCreate_updatesContactUpdatedTimestamp CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testRawContactCreate_noAccountUsesLocalAccount CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testRawContactCreate_nullAccountUsesLocalAccount CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testProjection CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testInsertUsageStat CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testUpdateUsageStat CtsContactsProviderTestCases]', 1), ('[android.accounts.cts.AbstractAuthenticatorTests testStartAddAccountSessionDefaultImpl CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AbstractAuthenticatorTests testFinishSessionAndStartAddAccountSessionDefaultImpl CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AbstractAuthenticatorTests testFinishSessionAndStartUpdateCredentialsSessionDefaultImpl CtsAccountManagerTestCases]', 1)]"
"7.3  Sensors"	"7.3"	"C-1-6"	"7.3/C-1-6"	"07030000.670106"	"""C-1-6] MUST [report the event time]( http://developer.android.com/reference/android/hardware/SensorEvent.html#timestamp) in nanoseconds as defined in the Android SDK documentation, representing the time the event happened and synchronized with the SystemClock.elapsedRealtimeNano() clock.  | C-1-6] MUST set a non-zero resolution for all sensors, and report the value     via the [`Sensor.getResolution()`](https://developer.android.com/reference/android/hardware/Sensor#getResolution%28%29)     API method.  Some sensor types are composite, meaning they can be derived from data provided by one or more other sensors. (Examples include the orientation sensor and the linear acceleration sensor.)  Device implementations:  *   SHOULD implement these sensor types, when they include the prerequisite physical sensors as described in [sensor types](https://source.android.com/devices/sensors/sensor-types.html).  If device implementations include a composite sensor, they:  """	""	""	"elapsedRealtimeNano() getResolution() types.html SensorEvent.html Sensor.getResolution SystemClock.elapsedRealtimeNano"	""	""	""	""	"[('android.view.inputmethod.cts.InputMethodServiceTest', 4), ('android.media.cts.AudioRecordTest', 2), ('android.hardware.cts.SensorTest', 2), ('android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest', 2), ('android.view.inputmethod.cts.InputMethodStartInputLifecycleTest', 2), ('android.telephony.cts.SmsManagerTest', 2), ('android.hardware.consumerir.cts.ConsumerIrTest', 1), ('android.print.cts.PrintAttributesTest', 1), ('android.view.inputmethod.cts.ImeInsetsVisibilityTest', 1), ('android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test', 1), ('android.server.wm.KeyguardLockedTests', 1), ('android.print.cts.InterfaceForAppsTest', 1), ('android.inputmethodservice.cts.devicetest.MultiUserDeviceTest', 1), ('android.webkit.cts.GeolocationTest', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.server.wm.MultiDisplaySystemDecorationTests', 1), ('android.view.inputmethod.cts.KeyboardVisibilityControlTest', 1), ('android.location.cts.coarse.LocationManagerCoarseTest', 1), ('android.view.inputmethod.cts.EditTextImeSupportTest', 1), ('android.view.inputmethod.cts.InputConnectionBlockingMethodTest', 1), ('android.view.cts.input.InputDeviceSensorManagerTest', 1), ('android.location.cts.fine.LocationManagerFineTest', 1), ('android.print.cts.PrintJobTest', 1), ('android.uwb.cts.RangingMeasurementTest', 1), ('android.server.wm.WindowInsetsControllerTests', 1), ('android.view.inputmethod.cts.PackageVisibilityTest', 1), ('android.hardware.camera2.cts.CaptureResultTest', 1), ('android.view.inputmethod.cts.FocusHandlingTest', 1), ('android.print.cts.PrinterCapabilitiesTest', 1), ('android.hardware.camera2.cts.DngCreatorTest', 1)]"	"[('UnlockScreenRule', 4), ('getId', 4), ('size', 4), ('getDefaults', 4), ('build', 3), ('getMock', 2), ('getSession', 2), ('initiate_getCurrentPosition', 2), ('countDown', 2), ('hasWindowFocus', 2), ('toString', 2), ('getMediaSizes', 2), ('getResolutions', 2), ('Builder', 1), ('getPrinters', 1), ('getValidTimestamp', 1), ('elapsedRealtimeNanos', 1), ('getInvalidTimestamp', 1), ('changedPrintJobInfo', 1), ('gotLocation', 1), ('errorDenied', 1), ('errorUnavailable', 1), ('errorTimeout', 1), ('getSimpleName', 1), ('Object', 1), ('waitForConnection', 1), ('currentThread', 1), ('interrupt', 1), ('advancedOption', 1), ('requestFocus', 1), ('get', 1), ('getViewTreeObserver', 1), ('sanePrinterCapabilityInfos', 1), ('getService', 1), ('getCapabilities', 1), ('getMediaSize', 1), ('getResolution', 1), ('getColorModes', 1), ('getColorMode', 1), ('getDuplexModes', 1), ('getDuplexMode', 1), ('getMinMargins', 1)]"	"[('CtsInputMethodTestCases', 12), ('CtsSensorTestCases', 5), ('CtsPrintTestCases', 4), ('CtsWindowManagerDeviceTestCases', 3), ('CtsMediaTestCases', 2), ('CtsCameraTestCases', 2), ('CtsTelephonyTestCases', 2), ('CtsHardwareTestCases', 1), ('CtsWebkitTestCases', 1), ('CtsLocationCoarseTestCases', 1), ('CtsViewTestCases', 1), ('CtsLocationFineTestCases', 1), ('CtsUwbTestCases', 1)]"	""	""	""	""	"android.telephony.cts.SmsManagerTest"	"getMinMargins"	"CtsTelephonyTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodServiceTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioRecordTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SmsManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/consumerir/cts/ConsumerIrTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrintAttributesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/ImeInsetsVisibilityTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/DirectReportAPI30/src/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardLockedTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/InterfaceForAppsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/inputmethodservice/deviceside/devicetest/src/android/inputmethodservice/cts/devicetest/MultiUserDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/GeolocationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MultiDisplaySystemDecorationTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_coarse/src/android/location/cts/coarse/LocationManagerCoarseTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/EditTextImeSupportTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/input/InputDeviceSensorManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_fine/src/android/location/cts/fine/LocationManagerFineTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrintJobTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/uwb/src/android/uwb/cts/RangingMeasurementTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsControllerTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/PackageVisibilityTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/FocusHandlingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrinterCapabilitiesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/DngCreatorTest.java', 1)]"	"[('(4,SystemClock.elapsedRealtimeNano,/android/hardware/consumerir/cts/ConsumerIrTest.java)', 1), ('(2,SystemClock.elapsedRealtimeNano,/android/media/cts/AudioRecordTest.java)', 1), ('(8,Sensor.getResolution,/android/hardware/cts/SensorTest.java)', 1), ('(8,getResolution(),/android/hardware/cts/SensorTest.java)', 1), ('(2,getResolution(),/android/print/cts/PrintAttributesTest.java)', 1), ('(1,SystemClock.elapsedRealtimeNano,/android/view/inputmethod/cts/ImeInsetsVisibilityTest.java)', 1), ('(4,SystemClock.elapsedRealtimeNano,/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java)', 1), ('(3,SystemClock.elapsedRealtimeNano,/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java)', 1), ('(1,SystemClock.elapsedRealtimeNano,/android/server/wm/KeyguardLockedTests.java)', 1), ('(1,getResolution(),/android/print/cts/InterfaceForAppsTest.java)', 1), ('(1,SystemClock.elapsedRealtimeNano,/android/inputmethodservice/cts/devicetest/MultiUserDeviceTest.java)', 1), ('(1,SystemClock.elapsedRealtimeNano,/android/webkit/cts/GeolocationTest.java)', 1), ('(5,SystemClock.elapsedRealtimeNano,/android/hardware/cts/SensorDirectReportTest.java)', 1), ('(3,SystemClock.elapsedRealtimeNano,/android/server/wm/MultiDisplaySystemDecorationTests.java)', 1), ('(1,SystemClock.elapsedRealtimeNano,/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java)', 1), ('(2,SystemClock.elapsedRealtimeNano,/android/location/cts/coarse/LocationManagerCoarseTest.java)', 1), ('(1,SystemClock.elapsedRealtimeNano,/android/view/inputmethod/cts/EditTextImeSupportTest.java)', 1), ('(4,SystemClock.elapsedRealtimeNano,/android/view/inputmethod/cts/InputMethodServiceTest.java)', 1), ('(1,SystemClock.elapsedRealtimeNano,/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java)', 1), ('(2,SystemClock.elapsedRealtimeNano,/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java)', 1), ('(1,SystemClock.elapsedRealtimeNano,/android/view/cts/input/InputDeviceSensorManagerTest.java)', 1), ('(1,SystemClock.elapsedRealtimeNano,/android/location/cts/fine/LocationManagerFineTest.java)', 1), ('(1,getResolution(),/android/print/cts/PrintJobTest.java)', 1), ('(1,SystemClock.elapsedRealtimeNano,/android/uwb/cts/RangingMeasurementTest.java)', 1), ('(1,SystemClock.elapsedRealtimeNano,/android/server/wm/WindowInsetsControllerTests.java)', 1), ('(1,SystemClock.elapsedRealtimeNano,/android/view/inputmethod/cts/PackageVisibilityTest.java)', 1), ('(2,SystemClock.elapsedRealtimeNano,/android/hardware/camera2/cts/CaptureResultTest.java)', 1), ('(1,SystemClock.elapsedRealtimeNano,/android/view/inputmethod/cts/FocusHandlingTest.java)', 1), ('(1,getResolution(),/android/print/cts/PrinterCapabilitiesTest.java)', 1), ('(2,SystemClock.elapsedRealtimeNano,/android/hardware/camera2/cts/DngCreatorTest.java)', 1), ('(3,SystemClock.elapsedRealtimeNano,/android/telephony/cts/SmsManagerTest.java)', 1)]"	"[('([4:/android/hardware/consumerir/cts/ConsumerIrTest.java]:[SystemClock.elapsedRealtimeNano]:[4]:method_text:[ assertTrue(msg, newTime - currentTime <= totalXmitTimeNanos * (1.0 + margin));        }    }   ])', 1), ('([1:/android/media/cts/AudioRecordTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[                record.release();                record = null;            }        }    }   ])', 1), ('([1:/android/media/cts/AudioRecordTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[nstrumentation().getTargetContext();    }    /*     * Microphone Direction API tests     */   ])', 1), ('([8:/android/hardware/cts/SensorTest.java]:[Sensor.getResolution]:[8]:method_text:[ sensor.getFifoReservedEventCount() == 0);        }    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([8:/android/hardware/cts/SensorTest.java]:[getResolution()]:[8]:method_text:[ sensor.getFifoReservedEventCount() == 0);        }    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([2:/android/print/cts/PrintAttributesTest.java]:[getResolution()]:[2]:method_text:[ibutes to the first selection.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/view/inputmethod/cts/ImeInsetsVisibilityTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[    }    @Rule    public final UnlockScreenRule mUnlockScreenRule = new UnlockScreenRule();   ])', 1), ('([2:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[SystemClock.elapsedRealtimeNano]:[2]:method_text:[ }    /**     * Test that the verification passes when there are not missing events.     */   ])', 1), ('([2:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[SystemClock.elapsedRealtimeNano]:[2]:method_text:[tion(expectedUs);        verification.addSensorEvents(events);        return verification;    }}])', 1), ('([3:/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java]:[SystemClock.elapsedRealtimeNano]:[3]:method_text:[                        > SensorRatePermissionDirectReportTestHelper.CAPPED_SAMPLE_RATE_HZ);    }])', 1), ('([1:/android/server/wm/KeyguardLockedTests.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[_PINNED)                .setActivityType(ACTIVITY_TYPE_STANDARD)                .build());    }}])', 1), ('([1:/android/print/cts/InterfaceForAppsTest.java]:[getResolution()]:[1]:method_text:[etCreationTime());        assertTrue(job.getInfo().getCreationTime() <= afterStart + 5000);    }}])', 1), ('([1:/android/inputmethodservice/cts/devicetest/MultiUserDeviceTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[EOUT_MILLISEC, TimeUnit.MILLISECONDS);        assertEquals(Process.myUserHandle(), result);    }}])', 1), ('([1:/android/webkit/cts/GeolocationTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[ept, mRetain);        }    }    // Test loading a page and accepting the domain for one load   ])', 1), ('([5:/android/hardware/cts/SensorDirectReportTest.java]:[SystemClock.elapsedRealtimeNano]:[5]:method_text:[der.nativeOrder());        return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned    }}])', 1), ('([3:/android/server/wm/MultiDisplaySystemDecorationTests.java]:[SystemClock.elapsedRealtimeNano]:[3]:method_text:[e);        assertEquals(""Display bounds not the same"", displayBounds, displayBoundsForIme);    }}])', 1), ('([1:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[onNull String marker) {        return launchTestActivity(marker, getTestMarker()).first;    }   ])', 1), ('([2:/android/location/cts/coarse/LocationManagerCoarseTest.java]:[SystemClock.elapsedRealtimeNano]:[2]:method_text:[  return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_LOCATION_GPS);    }}])', 1), ('([1:/android/view/inputmethod/cts/EditTextImeSupportTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[    return editTextRef.get();    }    /**     * A regression test for Bug 161330778.     */   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodServiceTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[putMethodService#onUpdateCursorAnchorInfo(CursorAnchorInfo)}     * will be called back.     */   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodServiceTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[  /** Test that no exception is thrown when {@link InputMethodService#getDisplay()} is called */   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodServiceTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[    assertEquals(newSelectionEnd, newCursorPosition + firstCommitMsg.length());        }    }   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodServiceTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[            this.mIsTestingTextView = isTestingTextView;            return this;        }    }}])', 1), ('([1:/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[ /**     * Test {@link InputConnection#getTextAfterCursor(int, int)} works as expected.     */   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[able window hosted by a different process     * temporarily becomes the focused window.     */   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[Matcher() {        return event -> TextUtils.equals(""onFinishInput"", event.getEventName());    }}])', 1), ('([1:/android/view/cts/input/InputDeviceSensorManagerTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[tLooper());    }    @After    public void tearDown() {        mUinputDevice.close();    }   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[        }        } finally {            automation.dropShellPermissionIdentity();        }    }])', 1), ('([1:/android/print/cts/PrintJobTest.java]:[getResolution()]:[1]:method_text:[     if (!testSuccess[0]) {            throw new Exception(""Did not succeed"");        }    }   ])', 1), ('([1:/android/uwb/cts/RangingMeasurementTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[urement.Builder.build() to succeed"");            }        }        return measurement;    }   ])', 1), ('([1:/android/server/wm/WindowInsetsControllerTests.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[    dialog.getWindow().addFlags(FLAG_ALT_FOCUSABLE_IM);            dialog.show();        }    }}])', 1), ('([1:/android/view/inputmethod/cts/PackageVisibilityTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[return () -> TestUtils.forceStopPackage(TEST_ACTIVITY.getPackageName());    }    @AppModeFull   ])', 1), ('([2:/android/hardware/camera2/cts/CaptureResultTest.java]:[SystemClock.elapsedRealtimeNano]:[2]:method_text:[* End generated code     *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/}])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[KER_PREFIX + ""/""  + SystemClock.elapsedRealtimeNanos();    }    @FlakyTest(bugId = 149246840)   ])', 1), ('([1:/android/print/cts/PrinterCapabilitiesTest.java]:[getResolution()]:[1]:method_text:[     * of historical reasons.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([2:/android/hardware/camera2/cts/DngCreatorTest.java]:[SystemClock.elapsedRealtimeNano]:[2]:method_text:[s test     * using:     * adb shell setprop log.tag.DngCreatorTest VERBOSE     * </p>     */   ])', 1), (""([2:/android/telephony/cts/SmsManagerTest.java]:[SystemClock.elapsedRealtimeNano]:[2]:method_text:[network doesn't support Data(binary) SMS message.            // Skip the test.        }    }   ])"", 1), (""([1:/android/telephony/cts/SmsManagerTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[SM network doesn't support Multipart SMS message.            // Skip the test.        }    }   ])"", 1)]"	"https://developer.android.com https://source.android.com http://developer.android.com"	""	"[('SystemClock.elapsedRealtimeNano', 32), ('getResolution()', 5), ('Sensor.getResolution', 1)]"	"[('[android.hardware.cts.SensorTest testBatchAndFlushWithMultipleSensors CtsSensorTestCases]', 2), ('[android.hardware.consumerir.cts.ConsumerIrTest test_timing CtsHardwareTestCases]', 1), ('[android.media.cts.AudioRecordTest testTimestamp CtsMediaTestCases]', 1), ('[android.media.cts.AudioRecordTest testGetActiveRecordingConfiguration CtsMediaTestCases]', 1), ('[android.print.cts.PrintAttributesTest isEmpty CtsPrintTestCases]', 1), ('[android.view.inputmethod.cts.ImeInsetsVisibilityTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest uptimeMillis CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest testVerify_no_events_fail CtsSensorTestCases]', 1), ('[android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test testSamplingRateMicToggleOffOnOff None]', 1), ('[android.server.wm.KeyguardLockedTests testImeShowsAfterLockScreenOnEditorTap CtsWindowManagerDeviceTestCases]', 1), ('[android.print.cts.InterfaceForAppsTest currentTimeMillis CtsPrintTestCases]', 1), ('[android.inputmethodservice.cts.devicetest.MultiUserDeviceTest testConnectingToTheSameUserIme None]', 1), ('[android.webkit.cts.GeolocationTest GeolocationTest CtsWebkitTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 1), ('[android.server.wm.MultiDisplaySystemDecorationTests testImeWindowCanShownWhenActivityMovedToDisplay CtsWindowManagerDeviceTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.location.cts.coarse.LocationManagerCoarseTest testGnssProvidedClock CtsLocationCoarseTestCases]', 1), ('[android.view.inputmethod.cts.EditTextImeSupportTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodServiceTest testSendDownUpKeyEvents CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodServiceTest testOnUpdateCursorAnchorInfo CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodServiceTest testCursorAfterLaunchAnotherActivity CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodServiceTest testImeVisibleAfterRotation CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputConnectionBlockingMethodTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testInputConnectionStateWhenScreenStateChanges CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testNoStartNewInputWhileOtherProcessHasWindowFocus CtsInputMethodTestCases]', 1), ('[android.view.cts.input.InputDeviceSensorManagerTest assertNoDisconnection CtsViewTestCases]', 1), ('[android.location.cts.fine.LocationManagerFineTest testRequestLocationUpdatesNoteOps_simultaneousRequests CtsLocationFineTestCases]', 1), ('[android.print.cts.PrintJobTest createFirstMockPrinterDiscoverySessionCallbacks CtsPrintTestCases]', 1), ('[android.uwb.cts.RangingMeasurementTest testBuilder CtsUwbTestCases]', 1), ('[android.server.wm.WindowInsetsControllerTests testDispatchApplyWindowInsetsCount_ime CtsWindowManagerDeviceTestCases]', 1), ('[android.view.inputmethod.cts.PackageVisibilityTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.hardware.camera2.cts.CaptureResultTest testResultTimestamps CtsCameraTestCases]', 1), ('[android.view.inputmethod.cts.FocusHandlingTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.print.cts.PrinterCapabilitiesTest onPrinterDiscoverySessionCreateCalled CtsPrintTestCases]', 1), ('[android.hardware.camera2.cts.DngCreatorTest testSingleImageThumbnail CtsCameraTestCases]', 1), ('[android.telephony.cts.SmsManagerTest testSmsRetriever CtsTelephonyTestCases]', 1), ('[android.telephony.cts.SmsManagerTest testSmsBlocking CtsTelephonyTestCases]', 1)]"
"2.2.3  Software"	"3.8.16"	"H-2-2"	"3.8.16/H-2-2"	"03081600.720202"	"""[3.8.16/H-2-2] MUST declare the feature     flag [`android.software.controls`](https://developer.android.com/reference/android/content/pm/PackageManager#FEATURE_CONTROLS)     and set it to `false`.  Handheld device implementations:  *  ["""	""	""	"android.software.controls FEATURE_CONTROLS"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://developer.android.com"	""	""	""
"4  Application Packaging Compatibility"	"4"	"C-0-9"	"4/C-0-9"	"04000000.670009"	"""C-0-9] MUST support verifying .apk files using the      [APK Signature Scheme v4](https://source.android.com/security/apksigning/v4.html).  *    If device implementations are already launched on an earlier Android      version and cannot meet the requirements [C-0-8] and [C-0-9] through a      system software update, they MAY be exempted from these requirements. """	""	""	"APK v4.html"	""	""	""	""	"[('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 35), ('android.content.pm.cts.ChecksumsTest', 29), ('android.appsecurity.cts.IsolatedSplitsTests', 27), ('com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest', 20), ('com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest', 20), ('com.android.cts.dexmetadata.InstallDexMetadataHostTest', 13), ('com.android.cts.appcompat.CompatChangesOverrideOnReleaseBuildTest', 10), ('android.content.pm.cts.PackageManagerTest', 8), ('android.appsecurity.cts.CorruptApkTests', 7), ('com.android.cts.appcompat.CompatChangesSelinuxTest', 6), ('android.appsecurity.cts.InstantCookieHostTest', 6), ('com.android.cts.releaseparser.ApkParserTest', 4), ('android.appsecurity.cts.ReadableSettingsFieldsTest', 4), ('android.cts.backup.FullBackupOnlyHostSideTest', 4), ('com.android.cts.devicepolicy.AccountCheckHostSideTest', 3), ('com.android.cts.packagemanager.stats.host.PackageInstallerV2StatsTests', 3), ('android.appsecurity.cts.AccessSerialNumberTest', 2), ('com.android.compatibility.common.tradefed.presubmit.ApkPackageNameCheck', 2), ('com.android.cts.dexmetadata.InstallDexMetadataTest', 2), ('com.android.cts.devicepolicy.LauncherAppsMultiUserTest', 2), ('android.sample.cts.SampleHostJUnit4Test', 2), ('android.cts.backup.AutoRestoreHostSideTest', 2), ('android.content.pm.cts.shortcuthost.ShortcutManagerUpgradeTest', 2), ('com.android.cts.devicepolicy.MixedProfileOwnerTest', 1), ('android.content.pm.cts.shortcutmanager.throttling.ShortcutManagerThrottlingTestReceiver', 1), ('com.android.tests.loadingprogress.host.IncrementalLoadingProgressTest', 1), ('com.android.cts.devicepolicy.MixedManagedProfileOwnerTestApi25', 1), ('android.permission.cts.PermissionControllerTest', 1), ('android.app.cts.ActivityManagerProcessStateTest', 1), ('android.os.cts.PowerManagerTests', 1), ('android.media.cts.bitstreams.ReportProcessor', 1), ('android.mediaprovidertranscode.cts.TranscodeTest', 1), ('android.inputmethodservice.cts.hostside.InlineSuggestionsRequestHostTest', 1), ('android.theme.cts.ThemeHostTest', 1), ('android.os.cts.RequiredComponentsTest', 1), ('android.scopedstorage.cts.host.AppCloningHostTest', 1), ('android.appsecurity.cts.ListeningPortsTest', 1), ('android.security.cts.CVE_2021_0305', 1), ('android.car.cts.PreCreateUsersHostTest', 1)]"	"[('getDevice', 53), ('setUp', 33), ('tearDown', 22), ('getPackageManager', 5), ('getContext', 4), ('getAbsolutePath', 4), ('getInstrumentation', 4), ('retrieveInfo', 3), ('uninstallApks', 3), ('getUiAutomation', 3), ('getTargetContext', 3), ('Intent', 3), ('setup', 2), ('getPackageInstaller', 2), ('getName', 2), ('clearAppCookieData', 2), ('getClass', 1), ('trim', 1), ('toLowerCase', 1), ('getAction', 1), ('getBuild', 1), ('Builder', 1), ('build', 1), ('newCachedThreadPool', 1), ('getSerialNumber', 1), ('close', 1), ('resetAppState', 1), ('installApp', 1), ('uninstallApp', 1), ('AbandonAllPackageSessionsRule', 1), ('onBefore', 1), ('onAfter', 1), ('getArgs', 1), ('emptyMap', 1), ('delete', 1), ('getExternalStorageDirectory', 1), ('nanoTime', 1), ('pollForExternalStorageState', 1), ('getPackageName', 1), ('getInstalledPackageNames', 1), ('empty', 1), ('getBackupUtils', 1), ('getRuntime', 1), ('availableProcessors', 1), ('getNextEntry', 1), ('deleteOnExit', 1), ('getLaunchApiLevel', 1), ('InstallMultiple', 1), ('run', 1), ('canRequestInteractAcrossProfiles', 1), ('canInteractAcrossProfiles', 1), ('createRequestInteractAcrossProfilesIntent', 1)]"	"[('CtsDevicePolicyManagerTestCases', 82), ('CtsAppSecurityHostTestCases', 47), ('CtsContentTestCases', 37), ('CtsAppCompatHostTestCases', 16), ('CtsDexMetadataHostTestCases', 13), ('CtsBackupHostTestCases', 6), ('CtsPackageManagerStatsHostTestCases', 3), ('CtsSampleHostTestCases', 2), ('CtsShortcutHostTestCases', 2), ('CtsPermissionTestCases', 1), ('CtsAppTestCases', 1), ('CtsOsHostTestCases', 1), ('CtsMediaBitstreamsTestCases', 1), ('CtsInputMethodServiceHostTestCases', 1), ('CtsThemeHostTestCases', 1), ('CtsSecurityBulletinHostTestCases', 1), ('CtsCarHostTestCases', 1)]"	""	""	""	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"createRequestInteractAcrossProfilesIntent"	"CtsDevicePolicyManagerTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 35), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/ChecksumsTest.java', 29), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/IsolatedSplitsTests.java', 27), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java', 20), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java', 20), ('/home/gpoor/cts-12-source/cts/hostsidetests/dexmetadata/host/src/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java', 13), ('/home/gpoor/cts-12-source/cts/hostsidetests/appcompat/compatchanges/src/com/android/cts/appcompat/CompatChangesOverrideOnReleaseBuildTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java', 8), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/CorruptApkTests.java', 7), ('/home/gpoor/cts-12-source/cts/hostsidetests/appcompat/compatchanges/src/com/android/cts/appcompat/CompatChangesSelinuxTest.java', 6), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/InstantCookieHostTest.java', 6), ('/home/gpoor/cts-12-source/cts/tools/release-parser/tests/src/com/android/cts/releaseparser/ApkParserTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ReadableSettingsFieldsTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/src/android/cts/backup/FullBackupOnlyHostSideTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AccountCheckHostSideTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/packagemanager/stats/src/com/android/cts/packagemanager/stats/host/PackageInstallerV2StatsTests.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AccessSerialNumberTest.java', 2), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/dexmetadata/app/src/com/android/cts/dexmetadata/InstallDexMetadataTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsMultiUserTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/sample/src/android/sample/cts/SampleHostJUnit4Test.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/src/android/cts/backup/AutoRestoreHostSideTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/hostside/src/android/content/pm/cts/shortcuthost/ShortcutManagerUpgradeTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/throttling/src/android/content/pm/cts/shortcutmanager/throttling/ShortcutManagerThrottlingTestReceiver.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/packagemanager/installedloadingprogess/hostside/src/com/android/tests/loadingprogress/host/IncrementalLoadingProgressTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi25.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/PermissionControllerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/os/src/android/os/cts/PowerManagerTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/media/bitstreams/src/android/media/cts/bitstreams/ReportProcessor.java', 1), ('/home/gpoor/cts-12-source/cts/tests/MediaProviderTranscode/src/android/mediaprovidertranscode/cts/TranscodeTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/inputmethodservice/hostside/src/android/inputmethodservice/cts/hostside/InlineSuggestionsRequestHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/theme/src/android/theme/cts/ThemeHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/RequiredComponentsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/host/src/android/scopedstorage/cts/host/AppCloningHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ListeningPortsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2021_0305.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/car/src/android/car/cts/PreCreateUsersHostTest.java', 1)]"	"[('(9,APK,/com/android/cts/appcompat/CompatChangesSelinuxTest.java)', 1), ('(6,APK,/android/appsecurity/cts/AccessSerialNumberTest.java)', 1), ('(24,APK,/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java)', 1), ('(1,APK,/com/android/cts/devicepolicy/MixedProfileOwnerTest.java)', 1), ('(115,APK,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(31,APK,/android/content/pm/cts/PackageManagerTest.java)', 1), ('(41,APK,/android/appsecurity/cts/CorruptApkTests.java)', 1), ('(38,APK,/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java)', 1), ('(7,APK,/com/android/cts/dexmetadata/InstallDexMetadataTest.java)', 1), ('(32,APK,/com/android/cts/releaseparser/ApkParserTest.java)', 1), ('(1,APK,/android/content/pm/cts/shortcutmanager/throttling/ShortcutManagerThrottlingTestReceiver.java)', 1), ('(16,APK,/com/android/tests/loadingprogress/host/IncrementalLoadingProgressTest.java)', 1), ('(1,APK,/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi25.java)', 1), ('(6,APK,/android/permission/cts/PermissionControllerTest.java)', 1), ('(190,APK,/android/content/pm/cts/ChecksumsTest.java)', 1), ('(2,APK,/android/app/cts/ActivityManagerProcessStateTest.java)', 1), ('(3,APK,/android/os/cts/PowerManagerTests.java)', 1), ('(1,APK,/android/media/cts/bitstreams/ReportProcessor.java)', 1), ('(2,APK,/com/android/cts/devicepolicy/LauncherAppsMultiUserTest.java)', 1), ('(2,APK,/android/mediaprovidertranscode/cts/TranscodeTest.java)', 1), ('(5,APK,/android/sample/cts/SampleHostJUnit4Test.java)', 1), ('(1,APK,/android/inputmethodservice/cts/hostside/InlineSuggestionsRequestHostTest.java)', 1), ('(18,APK,/com/android/cts/devicepolicy/AccountCheckHostSideTest.java)', 1), ('(15,APK,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(16,APK,/com/android/cts/packagemanager/stats/host/PackageInstallerV2StatsTests.java)', 1), ('(4,APK,/android/cts/backup/AutoRestoreHostSideTest.java)', 1), ('(6,APK,/android/content/pm/cts/shortcuthost/ShortcutManagerUpgradeTest.java)', 1), ('(1,APK,/android/theme/cts/ThemeHostTest.java)', 1), ('(1,APK,/android/os/cts/RequiredComponentsTest.java)', 1), ('(162,APK,/android/appsecurity/cts/IsolatedSplitsTests.java)', 1), ('(1,APK,/android/scopedstorage/cts/host/AppCloningHostTest.java)', 1), ('(6,APK,/android/appsecurity/cts/ListeningPortsTest.java)', 1), ('(2,APK,/android/security/cts/CVE_2021_0305.java)', 1), ('(74,APK,/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java)', 1), ('(1,APK,/android/car/cts/PreCreateUsersHostTest.java)', 1), ('(15,APK,/com/android/cts/appcompat/CompatChangesOverrideOnReleaseBuildTest.java)', 1), ('(14,APK,/android/appsecurity/cts/ReadableSettingsFieldsTest.java)', 1), ('(15,APK,/android/cts/backup/FullBackupOnlyHostSideTest.java)', 1), ('(40,APK,/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java)', 1)]"	"[('([4:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[4]:method_text:[OXY_WITHOUT_EXTRACTING,                APK_FEATURE_PROVIDER_A_WITHOUT_EXTRACTING).run();    }   ])', 4), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[iceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testCleanup"");        }    }    @RequiresDevice   ])', 3), ('([4:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[4]:method_text:[].getInstallerPackageName());        assertNull(checksums[0].getInstallerCertificate());    }   ])', 3), ('([5:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[5]:method_text:[        APK_FEATURE_PROVIDER_B_WITHOUT_EXTRACTING, APK_FEATURE_PROXY_WITHOUT_EXTRACTING);    }   ])', 3), ('([1:/com/android/cts/appcompat/CompatChangesOverrideOnReleaseBuildTest.java]:[APK]:[1]:method_text:[sChange.hasRawOverrides).isFalse();        assertThat(ctsChange.hasOverrides).isFalse();    }   ])', 3), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[les_returnsTrue"",                mPrimaryUserId,                Collections.EMPTY_MAP);    }   ])', 3), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[ion_returnsTrue"",                mPrimaryUserId,                Collections.EMPTY_MAP);    }   ])', 3), ('([1:/com/android/cts/appcompat/CompatChangesSelinuxTest.java]:[APK]:[1]:method_text:[enabledChanges, disabledChanges);            uninstallPackage(TEST_PKG, true);        }    }   ])', 2), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[sionTest"",                    ""testClearComplianceSharedPreference"", mUserId);        }    }   ])', 2), ('([5:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[5]:method_text:[].getInstallerPackageName());        assertNull(checksums[0].getInstallerCertificate());    }   ])', 2), ('([7:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[7]:method_text:[].getInstallerPackageName());        assertNull(checksums[2].getInstallerCertificate());    }   ])', 2), ('([6:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[6]:method_text:[].getInstallerPackageName());        assertNull(checksums[2].getInstallerCertificate());    }   ])', 2), ('([5:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[5]:method_text:[ER_A_WITH_EXTRACTING).runExpectingFailure(                ""INSTALL_FAILED_INVALID_APK"");    }   ])', 2), ('([4:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[4]:method_text:[        APK_FEATURE_PROXY_WITH_EXTRACTING, APK_FEATURE_PROVIDER_A_WITH_EXTRACTING).run();    }   ])', 2), ('([5:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[5]:method_text:[              APK_FEATURE_PROVIDER_B_WITH_EXTRACTING, APK_FEATURE_PROXY_WITH_EXTRACTING);    }   ])', 2), ('([2:/com/android/cts/appcompat/CompatChangesOverrideOnReleaseBuildTest.java]:[APK]:[2]:method_text:[e();        assertThat(ctsChange.overridesStr).isEqualTo(""{"" + OVERRIDE_PKG + ""=true}"");    }   ])', 2), ('([2:/android/cts/backup/FullBackupOnlyHostSideTest.java]:[APK]:[2]:method_text:[     * We check that key/value data was not restored after reinstall and dolly data was.     */   ])', 2), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[1]:method_text:[es_returnsFalse"",                mPrimaryUserId,                Collections.EMPTY_MAP);    }   ])', 2), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[ed_returnsFalse"",                mPrimaryUserId,                Collections.EMPTY_MAP);    }   ])', 2), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[1]:method_text:[le_returnsFalse"",                mPrimaryUserId,                Collections.EMPTY_MAP);    }   ])', 2), ('([4:/com/android/cts/appcompat/CompatChangesSelinuxTest.java]:[APK]:[4]:method_text:[e static final Pattern PS_ENTRY_PATTERN = Pattern.compile(""^(?<label>\\\\S+)\\\\s+(?<name>\\\\S+)"");   ])', 1), ('([1:/com/android/cts/appcompat/CompatChangesSelinuxTest.java]:[APK]:[1]:method_text:[ted_app_29"");        } finally {            uninstallPackage(TEST_PKG, true);        }    }   ])', 1), ('([1:/com/android/cts/appcompat/CompatChangesSelinuxTest.java]:[APK]:[1]:method_text:[ted_app_30"");        } finally {            uninstallPackage(TEST_PKG, true);        }    }   ])', 1), ('([1:/com/android/cts/appcompat/CompatChangesSelinuxTest.java]:[APK]:[1]:method_text:[t -n "" + TEST_PKG + ""/"" + TEST_PKG + "".Empty"");        Thread.currentThread().sleep(100);    }}])', 1), ('([4:/android/appsecurity/cts/AccessSerialNumberTest.java]:[APK]:[4]:method_text:[ion {        super.tearDown();        getDevice().uninstallPackage(ACCESS_SERIAL_PKG);    }   ])', 1), ('([2:/android/appsecurity/cts/AccessSerialNumberTest.java]:[APK]:[2]:method_text:[android.os.cts.AccessSerialModernTest"",                ""testAccessSerialPermissionNeeded"");    }}])', 1), ('([3:/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java]:[APK]:[3]:method_text:[ with same package names may be installed. Otherwise it may results in     * conflicts.     */   ])', 1), ('([21:/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java]:[APK]:[21]:method_text:[);                        }                    }                }            }        }    }}])', 1), ('([1:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[APK]:[1]:method_text:[N_RECEIVER_TEST_CLASS, mUserId));        super.tearDown();    }    @Override    @FlakyTest   ])', 1), ('([53:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[53]:method_text:[.        getDevice().executeShellCommand(""input keyevent 3"");        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[elper"",            ""testAssertCallerIsApplicationRestrictionsManagingPackage"", mUserId);    }   ])', 1), ('([5:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[5]:method_text:[Delegations} to test that     *    the scope can only be delegatd to one app at a time.     */   ])', 1), ('([5:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[5]:method_text:[tallDelegateApp() throws Exception {        installAppAsUser(DELEGATE_APP_APK, mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[kageName(CERT_INSTALLER_PKG)                .setBoolean(true)                .build());    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[      executeDeviceTestClassNoRestrictBackground("".AlwaysOnVpnTest"");    }    @RequiresDevice   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[3]:method_text:[hod("".AlwaysOnVpnUnsupportedTest"", ""testClearAlwaysOnVpn"");        }    }    @RequiresDevice   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[hod("".AlwaysOnVpnUnsupportedTest"", ""testClearAlwaysOnVpn"");        }    }    @RequiresDevice   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[          .setBoolean(true)                    .setInt(0)                    .build());    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionGrantState_preMApp"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[ist(mUserId, false /* disabled */);            clearVoiceInteractionService();        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[ngs(PERMISSIONS_APP_PKG, ""not_hidden"", NOT_CALLED_FROM_PARENT)                .build());    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[ANAGEMENT_APK, mUserId);        executeDeviceTestClass("".AllowedAccountManagementTest"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[CCOUNTS, false, mUserId);        }        executeAccountTest(""testAddAccount_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[UNTS, false, mUserId);        }        executeAccountTest(""testRemoveAccount_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[, ACCOUNT_TYPE, mUserId);        }        executeAccountTest(""testAddAccount_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[CCOUNT_TYPE, mUserId);        }        executeAccountTest(""testRemoveAccount_allowed"");    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[aller app is called directly rather than via intents from    // the DelegatedCertinstallerTest.   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[n app, that tries to set wallpaper.    // Non-admin apps must not violate any user restriction.   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[    // inside. But these restrictions must have no effect on the device/profile owner behavior.   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[eTestMethod("".AutofillRestrictionsTest"",                ""testDisallowAutofill_allowed"");    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[;        } finally {            setDefaultContentCaptureServiceEnabled(true);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[           ""cmd content_capture set default-service-enabled "" + mUserId + "" "" + enabled);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[abled(true);            executeDeviceTestClass("".MeteredDataRestrictionTest"");        }    }   ])', 1), ('([11:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[11]:method_text:[TEST_APP_PKG);            getDevice().uninstallPackage(PACKAGE_INSTALLER_PKG);        }    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[pendPackageTest"", ""testSuspendNotSuspendablePackages"");    }    @FlakyTest(bugId = 141314026)   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[that the app launches        executeSuspendPackageTestMethod(""testPackageNotSuspended"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[G + "".ClearApplicationDataTest"",                ""testSharedPreferenceCleared"", mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[AsUser(PRINTING_APP_APK, mUserId);        executeDeviceTestClass("".PrintingPolicyTest"");    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[ser(SHARED_UID_APP2_APK, mUserId);        executeDeviceTestClass("".KeyManagementTest"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[oolean(false)                .setStrings(PERMISSIONS_APP_PKG)                .build());    }   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[3]:method_text:[and(                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);    }}])', 1), ('([16:/android/content/pm/cts/PackageManagerTest.java]:[APK]:[16]:method_text:[lPackage(EMPTY_APP_MAX_PACKAGE_NAME);        uninstallPackage(HELLO_WORLD_PACKAGE_NAME);    }   ])', 1), ('([4:/android/content/pm/cts/PackageManagerTest.java]:[APK]:[4]:method_text:[e PackageManager#addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName)     */   ])', 1), ('([4:/android/content/pm/cts/PackageManagerTest.java]:[APK]:[4]:method_text:[ been collected when GET_SIGNATURES flag specified"",                pkgInfo.signatures);    }   ])', 1), (""([1:/android/content/pm/cts/PackageManagerTest.java]:[APK]:[1]:method_text:[RY_ONLY flag doesn't add new package names in the result of     * getInstalledPackages.     */   ])"", 1), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[APK]:[1]:method_text:[PackageName_fail() {        assertThat(installPackage(LONG_PACKAGE_NAME_APK)).isFalse();    }   ])', 1), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[APK]:[1]:method_text:[redUserId_fail() {        assertThat(installPackage(LONG_SHARED_USER_ID_APK)).isFalse();    }   ])', 1), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[APK]:[1]:method_text:[ackageName_success() {        assertThat(installPackage(MAX_PACKAGE_NAME_APK)).isTrue();    }   ])', 1), ('([3:/android/content/pm/cts/PackageManagerTest.java]:[APK]:[3]:method_text:[age(String packageName) {        SystemUtil.runShellCommand(""pm uninstall "" + packageName);    }}])', 1), ('([24:/android/appsecurity/cts/CorruptApkTests.java]:[APK]:[24]:method_text:[Info());    }    /** Installing the APK described in b/71360999 must not crash the device. */   ])', 1), ('([4:/android/appsecurity/cts/CorruptApkTests.java]:[APK]:[4]:method_text:[9.apk"");    }    /** Installing the APK described in b/71361168 must not crash the device. */   ])', 1), ('([4:/android/appsecurity/cts/CorruptApkTests.java]:[APK]:[4]:method_text:[8.apk"");    }    /** Installing the APK described in b/79488511 must not crash the device. */   ])', 1), ('([4:/android/appsecurity/cts/CorruptApkTests.java]:[APK]:[4]:method_text:[    }    /** APKs that target pre-R and have a compressed resources.arsc can be installed. */   ])', 1), ('([2:/android/appsecurity/cts/CorruptApkTests.java]:[APK]:[2]:method_text:[   }    /** APKs that target R+ and have a compressed resources.arsc must not be installed. */   ])', 1), ('([1:/android/appsecurity/cts/CorruptApkTests.java]:[APK]:[1]:method_text:[;    }    /** APKs that target pre-R and have a unaligned resources.arsc can be installed. */   ])', 1), ('([2:/android/appsecurity/cts/CorruptApkTests.java]:[APK]:[2]:method_text:[    }    /** APKs that target R+ and have a unaligned resources.arsc must not be installed. */   ])', 1), ('([15:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[15]:method_text:[                           mUserId, DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS));    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[D, mPrimaryUserId);            getDevice().uninstallPackage(DEVICE_ADMIN_PKG);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[              ""testUserRestrictionDisallowConfigDateTimeIsNotPersisted"", mPrimaryUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[trictionsParentTest"",                    ""testCanOpenCamera"", mPrimaryUserId);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[rId);        testSecurityLoggingOnWorkProfile(DEVICE_ADMIN_PKG, "".SecurityLoggingTest"");    }   ])', 1), ('([2:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[2]:method_text:[ce().setSetting(""global"", ""stay_on_while_plugged_in"", stayAwake);            }        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[lingIsOrganizationOwnedWithManagedProfileExpectingTrue"",                mPrimaryUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[// Should be launchable again.        assertCanStartPersonalApp(DEVICE_ADMIN_PKG, true);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[           suspended ? ""testSuspendPersonalApps"" : ""testUnsuspendPersonalApps"", mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[          ""cmd role remove-role-holder --user %d android.app.role.SMS %s"", userId, app));    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[  assertCanStartPersonalApp(TEST_IME_PKG, true);        setPersonalAppsSuspended(false);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[gementParentTest"",                    ""testEnableAccountManagement"", mUserId);        }    }   ])', 1), ('([3:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[3]:method_text:[+ ADMIN_RECEIVER_TEST_CLASS,                        userId, /* expectFailure */ false));    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[sonalAppsSuspensionTest"",                ""testPersonalAppsSuspendedByTimeout"", mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[,                ""testGenerateKeyPairWithDeviceIdAttestationExpectingSuccess"", mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[serId);        testNetworkLoggingOnWorkProfile(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"");    }   ])', 1), ('([2:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[2]:method_text:[testClassName,                    ""testSetNetworkLogsEnabled_false"", mUserId);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[APK]:[1]:method_text:[d"", userId),                s -> s.startsWith(USER_IS_NOT_STARTED), USER_STOP_TIMEOUT_SEC);    }}])', 1), ('([3:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[APK]:[3]:method_text:[  }    /**     * Verify that we installed the .dm files for base (no split install).     */   ])', 1), ('([4:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[APK]:[4]:method_text:[     result.put(codePath, dexMetadataPath);            }        }        return result;    }}])', 1), ('([13:/com/android/cts/releaseparser/ApkParserTest.java]:[APK]:[13]:method_text:[    /**     * Test {@link ApkParser} with an simple APK     *     * @throws Exception     */   ])', 1), ('([5:/com/android/cts/releaseparser/ApkParserTest.java]:[APK]:[5]:method_text:[     * Test {@link ApkParser} with an Sys(priv-app) APK     *     * @throws Exception     */   ])', 1), ('([5:/com/android/cts/releaseparser/ApkParserTest.java]:[APK]:[5]:method_text:[ ApkParser} with an APK with Shared Objects/Nactive Code     *     * @throws Exception     */   ])', 1), ('([9:/com/android/cts/releaseparser/ApkParserTest.java]:[APK]:[9]:method_text:[ntToString(fileEntry)),                fileEntry.equals(expectedfileEntryBuilder.build()));    }}])', 1), ('([1:/android/content/pm/cts/shortcutmanager/throttling/ShortcutManagerThrottlingTestReceiver.java]:[APK]:[1]:method_text:[plyAction, ""Unknown test: "" + method);                    break;            }        }    }   ])', 1), ('([16:/com/android/tests/loadingprogress/host/IncrementalLoadingProgressTest.java]:[APK]:[16]:method_text:[       assertFalse(getDevice().isPackageInstalled(TEST_APP_PACKAGE_NAME));    }    @LargeTest   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi25.java]:[APK]:[1]:method_text:[       removeUser(mUserId);        super.tearDown();    }    @Override    @PermissionsTest   ])', 1), ('([6:/android/permission/cts/PermissionControllerTest.java]:[APK]:[6]:method_text:[ions as permissionInfos        assertThat(numRuntimeGranted).isAtLeast(numInfosGranted);    }   ])', 1), ('([30:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[30]:method_text:[ageSilently(FIXED_PACKAGE_NAME);        assertFalse(isAppInstalled(FIXED_PACKAGE_NAME));    }   ])', 1), ('([5:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[5]:method_text:[ os.toByteArray();            Assert.assertArrayEquals(fileBytes, localBytes);        }    }   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[1]:method_text:[th, 1);        assertEquals(checksums[0].getType(), TYPE_PARTIAL_MERKLE_ROOT_1M_SHA256);    }   ])', 1), ('([2:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[2]:method_text:[hdpi"");        assertEquals(checksums[5].getType(), TYPE_PARTIAL_MERKLE_ROOT_1M_SHA256);    }   ])', 1), ('([3:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[3]:method_text:[), TEST_FIXED_APK_V2_SHA256);        assertNull(checksums[0].getInstallerCertificate());    }   ])', 1), ('([2:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[2]:method_text:[getResult();        assertNotNull(checksums);        assertEquals(checksums.length, 0);    }   ])', 1), ('([2:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[2]:method_text:[391cdfb8a18c6710f9f27916a0"");        assertNull(checksums[0].getInstallerCertificate());    }   ])', 1), ('([2:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[2]:method_text:[ does not cover the whole file.        assertEquals(checksums.length, 0);    }    @LargeTest   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[1]:method_text:[ assertEquals(checksums[6].getType(), TYPE_PARTIAL_MERKLE_ROOT_1M_SHA512);    }    @LargeTest   ])', 1), ('([5:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[5]:method_text:[    + ""5f2888afcb71524196dda0d6dd16a6a3292bb75b431b8ff74fb60d796e882f80"");    }    @LargeTest   ])', 1), ('([2:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[2]:method_text:[                   + ""e2c8b6baa16ef54014ad6c5b90c37b26b0f5c8aeb01b63a1db2eca133091c8d1"");    }   ])', 1), ('([2:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[2]:method_text:[ngth, 1);        assertEquals(checksums[0].getType(), TYPE_WHOLE_MERKLE_ROOT_4K_SHA256);    }   ])', 1), ('([2:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[2]:method_text:[      ""90553b8d221ab1b900b242a93e4cc659ace3a2ff1d5c62e502488b385854e66a"");    }    @LargeTest   ])', 1), ('([5:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[5]:method_text:[                   + ""5f2888afcb71524196dda0d6dd16a6a3292bb75b431b8ff74fb60d796e882f80"");    }   ])', 1), ('([2:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[2]:method_text:[       } finally {            getUiAutomation().dropShellPermissionIdentity();        }    }   ])', 1), ('([4:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[4]:method_text:[                ""INSTALL_FAILED_SESSION_INVALID: Invalid checksum name(s): wrong_name"");    }   ])', 1), ('([3:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[3]:method_text:[PackageName());            assertNull(checksums[9].getInstallerCertificate());        }    }   ])', 1), ('([13:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[13]:method_text:[PackageName());            assertNull(checksums[9].getInstallerCertificate());        }    }   ])', 1), ('([8:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[8]:method_text:[].getInstallerPackageName());        assertNull(checksums[2].getInstallerCertificate());    }   ])', 1), ('([48:/android/content/pm/cts/ChecksumsTest.java]:[APK]:[48]:method_text:[     checkFailure(result, PackageInstaller.STATUS_FAILURE, expectedStatusMessage);        }    }}])', 1), ('([2:/android/app/cts/ActivityManagerProcessStateTest.java]:[APK]:[2]:method_text:[ * Test basic state changes as processes go up and down due to services running in them.     */   ])', 1), ('([3:/android/os/cts/PowerManagerTests.java]:[APK]:[3]:method_text:[/**     * Tests that cached process releases wake lock.     *     * @throws Exception     */   ])', 1), ('([1:/android/media/cts/bitstreams/ReportProcessor.java]:[APK]:[1]:method_text:[rivate class MediaBitstreamsListener implements ITestInvocationListener {        @Override       ])', 1), ('([1:/com/android/cts/devicepolicy/LauncherAppsMultiUserTest.java]:[APK]:[1]:method_text:[,                Collections.singletonMap(PARAM_TEST_USER, mSecondaryUserSerialNumber));    }   ])', 1), ('([1:/com/android/cts/devicepolicy/LauncherAppsMultiUserTest.java]:[APK]:[1]:method_text:[rId,                Collections.singletonMap(PARAM_TEST_USER, mSecondaryUserSerialNumber));    }}])', 1), ('([2:/android/mediaprovidertranscode/cts/TranscodeTest.java]:[APK]:[2]:method_text:[   * Tests that we return FD of transcoded file for legacy apps     * @throws Exception     */   ])', 1), ('([4:/android/sample/cts/SampleHostJUnit4Test.java]:[APK]:[4]:method_text:[ing was successfully logged to Logcat from the activity.     *     * @throws Exception     */   ])', 1), ('([1:/android/sample/cts/SampleHostJUnit4Test.java]:[APK]:[1]:method_text:[://source.android.com/devices/tech/test_infra/tradefed/testing/through-tf/report-metrics     */   ])', 1), ('([1:/android/inputmethodservice/cts/hostside/InlineSuggestionsRequestHostTest.java]:[APK]:[1]:method_text:[ed void setUp() throws Exception {        installPackage(DeviceTestConstants.APK, true);    }   ])', 1), ('([8:/com/android/cts/devicepolicy/AccountCheckHostSideTest.java]:[APK]:[8]:method_text:[user when     * there is/are different types of accounts added on the target test user.     */   ])', 1), ('([6:/com/android/cts/devicepolicy/AccountCheckHostSideTest.java]:[APK]:[6]:method_text:[t-only"" flag changes when an app is updated, we still respect     * the original value.     */   ])', 1), ('([4:/com/android/cts/devicepolicy/AccountCheckHostSideTest.java]:[APK]:[4]:method_text:[clean up after a failure: "" + e.getMessage());            }            throw e;        }    }}])', 1), ('([4:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[4]:method_text:[ception {        uninstallPackage(INSTANT_COOKIE_APP_PKG);        clearAppCookieData();    }   ])', 1), ('([1:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[1]:method_text:[P_PKG, ""test.instant.cookie.CookieTest"",                ""testCookieUpdateAndRetrieval"");    }   ])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[2]:method_text:[instant.cookie.CookieTest"",                ""testCookiePersistedAcrossInstantInstalls2"");    }   ])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[2]:method_text:[st.instant.cookie.CookieTest"",                ""testCookiePersistedUpgradeFromInstant2"");    }   ])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[2]:method_text:[est.instant.cookie.CookieTest"",                ""testCookieResetOnNonInstantReinstall2"");    }   ])', 1), ('([4:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[4]:method_text:[s Exception {        getDevice().executeShellCommand(""pm clear "" + INSTANT_COOKIE_APP_PKG);    }}])', 1), ('([6:/com/android/cts/packagemanager/stats/host/PackageInstallerV2StatsTests.java]:[APK]:[6]:method_text:[n {        getDevice().uninstallPackage(TEST_INSTALL_PACKAGE);        super.tearDown();    }   ])', 1), ('([3:/com/android/cts/packagemanager/stats/host/PackageInstallerV2StatsTests.java]:[APK]:[3]:method_text:[t.getUid() != 0);        assertEquals(getAppUid(TEST_INSTALL_PACKAGE), report.getUid());    }   ])', 1), ('([7:/com/android/cts/packagemanager/stats/host/PackageInstallerV2StatsTests.java]:[APK]:[7]:method_text:[         }        }        assertEquals(1, reports.size());        return reports.get(0);    }}])', 1), ('([3:/android/cts/backup/AutoRestoreHostSideTest.java]:[APK]:[3]:method_text:[     *   <li>Install the package again and verify shared prefs are restored     * </ol>     */   ])', 1), ('([1:/android/cts/backup/AutoRestoreHostSideTest.java]:[APK]:[1]:method_text:[cedure(String testName) throws Exception {        runDeviceTests(PACKAGE, CLASS, testName);    }}])', 1), ('([4:/android/content/pm/cts/shortcuthost/ShortcutManagerUpgradeTest.java]:[APK]:[4]:method_text:[upgrade,     * ShortcutManager correctly resolves the right resources by resource name.     */   ])', 1), ('([2:/android/content/pm/cts/shortcuthost/ShortcutManagerUpgradeTest.java]:[APK]:[2]:method_text:[    runDeviceTestsAsUser(TARGET_PKG, "".ShortcutManagerPostUpgradeTest"", getPrimaryUserId());    }}])', 1), ('([1:/android/theme/cts/ThemeHostTest.java]:[APK]:[1]:method_text:[D);        restoreDensityIfNeeded(mDevice, mRestoreDensity);        super.tearDown();    }   ])', 1), ('([1:/android/os/cts/RequiredComponentsTest.java]:[APK]:[1]:method_text:[ic final String PACKAGE_MIME_TYPE = ""application/vnd.android.package-archive"";    @AppModeFull   ])', 1), ('([42:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[42]:method_text:[    public void tearDown() throws Exception {        getDevice().uninstallPackage(PKG);    }   ])', 1), ('([1:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[1]:method_text:[    Utils.runDeviceTestsAsCurrentUser(getDevice(), PKG, TEST_CLASS, ""shouldLoadDefault"");    }   ])', 1), ('([2:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[2]:method_text:[tils.runDeviceTestsAsCurrentUser(getDevice(), PKG, TEST_CLASS, ""shouldLoadPolishLocale"");    }   ])', 1), ('([2:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[2]:method_text:[ InstallMultiple(instant).addFile(APK_BASE).addFile(APK_FEATURE_B).runExpectingFailure();    }   ])', 1), ('([2:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[2]:method_text:[tant).addFile(APK_BASE).addFile(                APK_FEATURE_A_pl).runExpectingFailure();    }   ])', 1), ('([2:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[2]:method_text:[CurrentUser(getDevice(), PKG, TEST_CLASS,                ""shouldLoadFeatureAReceivers"");    }   ])', 1), ('([4:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[4]:method_text:[rentUser(getDevice(), PKG, TEST_CLASS,                ""shouldLoadFeatureAPolishLocale"");    }   ])', 1), ('([3:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[3]:method_text:[entUser(getDevice(), PKG, TEST_CLASS,                ""shouldLoadFeatureAAndBReceivers"");    }   ])', 1), ('([6:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[6]:method_text:[rentUser(getDevice(), PKG, TEST_CLASS,                ""shouldLoadFeatureBPolishLocale"");    }   ])', 1), ('([4:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[4]:method_text:[ser(getDevice(), PKG, TEST_CLASS,                ""shouldLoadFeatureAAndBAndCReceivers"");    }   ])', 1), ('([7:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[7]:method_text:[AsCurrentUser(getDevice(), PKG, TEST_CLASS,                ""shouldLoadFeatureCDefault"");    }   ])', 1), ('([5:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[5]:method_text:[rentUser(getDevice(), PKG, TEST_CLASS,                ""shouldLoadFeatureADiffRevision"");    }   ])', 1), ('([8:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[8]:method_text:[ks) {            installMultiple.addFile(apk);        }        return installMultiple;    }   ])', 1), ('([15:/android/appsecurity/cts/IsolatedSplitsTests.java]:[APK]:[15]:method_text:[                ""testNativeSplit_withoutExtractLibs_nativeLibraryCannotBeLoaded"");        }    }}])', 1), ('([1:/android/scopedstorage/cts/host/AppCloningHostTest.java]:[APK]:[1]:method_text:[oviderHandler.tearDown();        executeShellCommand(""pm remove-user %s"", mCloneUserId);    }   ])', 1), ('([6:/android/appsecurity/cts/ListeningPortsTest.java]:[APK]:[6]:method_text:[  * unauthorized access to computers systems without user knowledge or     * awareness.     */   ])', 1), ('([2:/android/security/cts/CVE_2021_0305.java]:[APK]:[2]:method_text:[  public void setUp() throws Exception {        uninstallPackage(getDevice(), TEST_PKG);    }   ])', 1), ('([23:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[APK]:[23]:method_text:[mTmpDir);    }    /**     * Verify .dm installation for stand-alone base (no splits)     */   ])', 1), ('([2:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[APK]:[2]:method_text:[SS, ""testDmForBase""));    }    /**     * Verify .dm installation for base and splits     */   ])', 1), ('([4:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[APK]:[4]:method_text:[eAndSplit""));    }    /**     * Verify .dm installation for base but not for splits.     */   ])', 1), ('([4:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[APK]:[4]:method_text:[utNoSplit""));    }    /**     * Verify .dm installation for splits but not for base.     */   ])', 1), ('([4:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[APK]:[4]:method_text:[litButNoBase""));    }    /**     * Verify that updating .dm files works as expected.     */   ])', 1), (""([13:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[APK]:[13]:method_text:[ for base but not for splits and with a .dm name     * that doesn't match the apk name.     */   ])"", 1), ('([4:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[APK]:[4]:method_text:[            bb.getInt();  // fileSize            bb.getInt();  // inflatedSize        }    }   ])', 1), ('([4:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[APK]:[4]:method_text:[    /**     * Verify .dm installation for stand-alone base (no splits) with vdex file.     */   ])', 1), ('([2:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[APK]:[2]:method_text:[e""));    }    /**     * Verify .dm installation for base and splits with vdex files.     */   ])', 1), ('([4:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[APK]:[4]:method_text:[ ""testDmForBaseAndSplit""));    }    /** Verify .dm installation without .fsv_sig for base. */   ])', 1), ('([2:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[APK]:[2]:method_text:[estDmForBase""));        }    }    /** Verify .dm installation without .fsv_sig for split. */   ])', 1), ('([4:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[APK]:[4]:method_text:[));        }    }    /** Verify .dm installation without .fsv_sig for split-only install. */   ])', 1), ('([4:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[APK]:[4]:method_text:[ultiple> {        InstallMultiple() {            super(getDevice(), getBuild());        }    }}])', 1), ('([1:/android/car/cts/PreCreateUsersHostTest.java]:[APK]:[1]:method_text:[* Verifies a pre-created user have same packages as non-precreated users.     */    @Presubmit   ])', 1), ('([3:/com/android/cts/appcompat/CompatChangesOverrideOnReleaseBuildTest.java]:[APK]:[3]:method_text:[        runCommand(""settings put global force_non_debuggable_final_build_for_compat 0"");    }   ])', 1), ('([2:/com/android/cts/appcompat/CompatChangesOverrideOnReleaseBuildTest.java]:[APK]:[2]:method_text:[""=[-9223372036854775808,1,true]}"");        assertThat(ctsChange.hasOverrides).isFalse();    }   ])', 1), ('([1:/com/android/cts/appcompat/CompatChangesOverrideOnReleaseBuildTest.java]:[APK]:[1]:method_text:[nabledChanges*/ImmutableSet.of(),                /*disabledChanges*/ ImmutableSet.of());    }   ])', 1), ('([1:/com/android/cts/appcompat/CompatChangesOverrideOnReleaseBuildTest.java]:[APK]:[1]:method_text:[);        assertThat(ctsChange.rawOverrideStr).isEqualTo(""{"" + OVERRIDE_PKG + ""=true}"");    }   ])', 1), ('([1:/com/android/cts/appcompat/CompatChangesOverrideOnReleaseBuildTest.java]:[APK]:[1]:method_text:[(ctsChange.hasRawOverrides).isFalse();        assertThat(ctsChange.hasOverrides).isFalse();    }}])', 1), ('([11:/android/appsecurity/cts/ReadableSettingsFieldsTest.java]:[APK]:[11]:method_text:[ic void tearDown() throws Exception {        getDevice().uninstallPackage(TEST_PACKAGE);    }   ])', 1), ('([1:/android/appsecurity/cts/ReadableSettingsFieldsTest.java]:[APK]:[1]:method_text:[GE, TEST_CLASS,                ""testSecureHiddenSettingsKeysReadableWithoutAnnotation"");    }   ])', 1), ('([1:/android/appsecurity/cts/ReadableSettingsFieldsTest.java]:[APK]:[1]:method_text:[GE, TEST_CLASS,                ""testSystemHiddenSettingsKeysReadableWithoutAnnotation"");    }   ])', 1), ('([1:/android/appsecurity/cts/ReadableSettingsFieldsTest.java]:[APK]:[1]:method_text:[CKAGE, TEST_CLASS,                ""testGlobalHiddenSettingsKeysReadableWithoutAnnotation"");    }}])', 1), ('([9:/android/cts/backup/FullBackupOnlyHostSideTest.java]:[APK]:[9]:method_text:[     * We check that key/value data was restored after reinstall and dolly data was not.     */   ])', 1), ('([2:/android/cts/backup/FullBackupOnlyHostSideTest.java]:[APK]:[2]:method_text:[LBACKUPONLY_APP_PACKAGE, FULLBACKUPONLY_DEVICE_TEST_CLASS_NAME,                methodName);    }}])', 1), ('([6:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[6]:method_text:[  @Before    @Override    public void setUp() throws Exception {        super.setUp();    }   ])', 1), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[rofiles_returnsTrue"",                mProfileId,                Collections.EMPTY_MAP);    }   ])', 1), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[es_returnsFalse"",                mPrimaryUserId,                Collections.EMPTY_MAP);    }   ])', 1), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[led_returnsTrue"",                mPrimaryUserId,                Collections.EMPTY_MAP);    }   ])', 1), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[Enabled_returnsTrue"",                mProfileId,                Collections.EMPTY_MAP);    }   ])', 1), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[n_returnsIntent"",                mPrimaryUserId,                Collections.EMPTY_MAP);    }   ])', 1), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[ction_returnsIntent"",                mProfileId,                Collections.EMPTY_MAP);    }   ])', 1), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[geName) {        return Collections.singletonMap(PARAM_CROSS_PROFILE_PACKAGE, packageName);    }}])', 1)]"	"https://source.android.com"	""	"[('APK', 229)]"	"[('[com.android.cts.appcompat.CompatChangesSelinuxTest testTargetSdkQAppIsInQDomainByDefault CtsAppCompatHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesSelinuxTest testTargetSdkQAppIsInLatestDomainWithLatestOptin CtsAppCompatHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesSelinuxTest testTargetSdkQAppIsInRDomainWithROptin CtsAppCompatHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesSelinuxTest testTargetSdkRAppIsInRDomainByDefault CtsAppCompatHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesSelinuxTest testTargetSdkRAppIsInLatestDomainWithLatestOptin CtsAppCompatHostTestCases]', 1), ('[android.appsecurity.cts.AccessSerialNumberTest testSerialAccessPolicy CtsAppSecurityHostTestCases]', 1), ('[com.android.compatibility.common.tradefed.presubmit.ApkPackageNameCheck testApkPackageNames None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictionIsRestricted CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictions CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegation CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegationCertSelection CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpn CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnLockDown CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnAcrossReboot CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnPackageUninstalled CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnUnsupportedPackage CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnUnsupportedPackageReplaced CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnPackageLogged CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPermissionGrantPreMApp CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testScreenCaptureDisabled_assist CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationHidden CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_deviceAndProfileOwnerAlwaysAllowed CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_userRestrictionAddAccount CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_userRestrictionRemoveAccount CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledAddAccount CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledRemoveAccount CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegatedCertInstaller CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetKeyGrant CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetWallpaper_disallowed CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowAutofill_allowed CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowContentCapture_allowed CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowContentSuggestions_allowed CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetMeteredDataDisabledPackages CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPackageInstallUserRestrictions CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSuspendPackage CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSuspendPackageWithPackageManager CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testClearApplicationData_testPkg CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPrintingPolicy CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testKeyManagement CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetUninstallBlockedLogged CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetNearbyAppStreamingPolicy_changesPolicy CtsDevicePolicyManagerTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetInfo CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetPackageArchiveInfo CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetApplicationInfo_icon_MatchesUseRoundIcon CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testInstall_withLongPackageName_fail CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testInstall_withLongSharedUserId_fail CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testInstall_withMaxPackageName_success CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testInstall_withMaxSharedUserId_success CtsContentTestCases]', 1), ('[android.appsecurity.cts.CorruptApkTests testSafeInstallOfCorruptAPK_b71360999 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.CorruptApkTests testSafeInstallOfCorruptAPK_b71361168 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.CorruptApkTests testSafeInstallOfCorruptAPK_b79488511 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.CorruptApkTests testFailInstallCompressedARSC_Q_PlatformConfig_enabled CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.CorruptApkTests testFailInstallCompressedARSC_R CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.CorruptApkTests testFailInstallUnalignedARSC_Q_PlatformConfig_enabled CtsAppSecurityHostTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest removeTestUsers CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testCanRelinquishControlOverDevice CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testUserRestrictionsSetOnParentAreNotPersisted CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testCameraDisabledOnParentIsEnforced CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testSecurityLogging CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testSecurityLoggingDelegate CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testIsDeviceOrganizationOwnedWithManagedProfile CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testPersonalAppsSuspensionNormalApp CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testPersonalAppsSuspensionInstalledApp CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testPersonalAppsSuspensionSms CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testPersonalAppsSuspensionIme CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testCanRestrictAccountManagementOnParentProfile CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testScreenCaptureDisabled CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testWorkProfileMaximumTimeOff CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testWorkProfileMaximumTimeOff_complianceRequiredBroadcastDefault CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testWorkProfileMaximumTimeOff_complianceRequiredBroadcastOverride CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testDelegatedCertInstallerDeviceIdAttestation CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testNetworkLogging CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testNetworkLoggingDelegate CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testNetworkLoggingLogged CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataTest testNoDm None]', 1), ('[com.android.cts.releaseparser.ApkParserTest testSimpleApk None]', 1), ('[com.android.cts.releaseparser.ApkParserTest testSysApk None]', 1), ('[com.android.cts.releaseparser.ApkParserTest testSoApk None]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTestApi25 removeTestUsers CtsDevicePolicyManagerTestCases]', 1), ('[android.permission.cts.PermissionControllerTest OnRevokeRuntimePermissionsCallback CtsPermissionTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testReadWriteChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testDefaultChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testSplitsDefaultChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedDefaultChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedV1DefaultChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedSha512DefaultChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedVerityDefaultChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testAllChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedAllChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedV1AllChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testDefaultIncrementalChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedDefaultIncrementalChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedAllIncrementalChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerChecksumsTrustNone CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerWrongChecksumsTrustAll CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerSignedChecksumsInvalidSignature CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerSignedChecksumsTrustNone CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerSignedChecksumsTrustAll CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerChecksumsTrustAll CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerChecksumsTrustInstaller CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerChecksumsTrustWrongInstaller CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerChecksumsTrustAllWrongName CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerChecksumsUpdate CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerSignedChecksumsUpdate CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerChecksumsIncremental CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerSignedChecksumsIncremental CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerChecksumsIncrementalTrustNone CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerChecksumsDuplicate CtsContentTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest removeTestAppFromWhitelists CtsAppTestCases]', 1), ('[com.android.cts.devicepolicy.LauncherAppsMultiUserTest testGetActivitiesForNonProfileFails CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.LauncherAppsMultiUserTest testNoLauncherCallbackPackageAddedSecondaryUser CtsDevicePolicyManagerTestCases]', 1), ('[android.mediaprovidertranscode.cts.TranscodeTest disableTranscodingForAllPackages None]', 1), ('[android.sample.cts.SampleHostJUnit4Test TestMetrics CtsSampleHostTestCases]', 1), ('[android.sample.cts.SampleHostJUnit4Test testLogcat CtsSampleHostTestCases]', 1), ('[com.android.cts.devicepolicy.AccountCheckHostSideTest runCleanupNonTestOnlyOwnerAllowingFailure CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.AccountCheckHostSideTest testAccountCheck CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.AccountCheckHostSideTest testInheritTestOnly CtsDevicePolicyManagerTestCases]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieUpdateAndRetrieval CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookiePersistedAcrossInstantInstalls CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookiePersistedUpgradeFromInstant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieResetOnNonInstantReinstall CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieValidWhenSignedWithTwoCerts CtsAppSecurityHostTestCases]', 1), ('[com.android.cts.packagemanager.stats.host.PackageInstallerV2StatsTests testPackageInstallerV2MetricsReported CtsPackageManagerStatsHostTestCases]', 1), ('[com.android.cts.packagemanager.stats.host.PackageInstallerV2StatsTests testPackageInstallerV2MetricsReportedForSplits CtsPackageManagerStatsHostTestCases]', 1), ('[android.cts.backup.AutoRestoreHostSideTest isAutoRestoreEnabled CtsBackupHostTestCases]', 1), ('[android.cts.backup.AutoRestoreHostSideTest testSetAutoRestore_dontAutoRestoresDataWhenDisabled CtsBackupHostTestCases]', 1), ('[android.content.pm.cts.shortcuthost.ShortcutManagerUpgradeTest testUpgrade CtsShortcutHostTestCases]', 1), ('[android.theme.cts.ThemeHostTest checkHardwareTypeSkipTest CtsThemeHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallBase_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallBaseAndConfigSplit_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallMissingDependency_usesSplit_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallMissingDependency_configForSplit_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallOneFeatureSplit_full CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallOneFeatureSplitAndConfigSplits_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallDependentFeatureSplits_full CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallDependentFeatureSplitsAndConfigSplits_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallAllFeatureSplits_full CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallAllFeatureSplitsAndConfigSplits_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testSplitsInheritInstall_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testSplitsRemoved_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testNativeInstallable_extractNativeLibs_baseFalse_splitTrue_full CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testNativeInstallable_extractNativeLibs_baseFalse_splitTrue_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testNativeInstallable_extractNativeLibs_baseFalse_splitFalse_full CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testNativeInstallable_extractNativeLibs_baseFalse_splitFalse_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testNativeInstallable_extractNativeLibs_baseTrue_splitTrue_full CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testNativeInstallable_extractNativeLibs_baseTrue_splitTrue_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testNativeInstallable_extractNativeLibs_baseTrue_splitFalse_full CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testNativeInstallable_extractNativeLibs_baseTrue_splitFalse_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testAccessNativeSymbol_bothBaseAndSplitExtracting_full CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testAccessNativeSymbol_bothBaseAndSplitExtracting_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testAccessNativeSymbol_onlyBaseExtracting_full CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testAccessNativeSymbol_onlyBaseExtracting_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testAccessNativeSymbol_neitherBaseNorSplitExtracting_full CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testAccessNativeSymbol_neitherBaseNorSplitExtracting_instant CtsAppSecurityHostTestCases]', 1), ('[android.scopedstorage.cts.host.AppCloningHostTest isHeadlessSystemUserMode None]', 1), ('[android.appsecurity.cts.ListeningPortsTest installDeviceTestPkg CtsAppSecurityHostTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataHostTest testInstallDmForBase CtsDexMetadataHostTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataHostTest testInstallDmForBaseAndSplit CtsDexMetadataHostTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataHostTest testInstallDmForBaseButNoSplit CtsDexMetadataHostTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataHostTest testInstallDmForSplitButNoBase CtsDexMetadataHostTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataHostTest testUpdateDm CtsDexMetadataHostTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataHostTest testInstallDmForBaseButNoSplitWithNoMatchingDm CtsDexMetadataHostTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataHostTest testProfileSnapshotAfterInstall CtsDexMetadataHostTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataHostTest testInstallDmForBaseWithVdex CtsDexMetadataHostTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataHostTest testInstallDmForBaseAndSplitWithVdex CtsDexMetadataHostTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataHostTest testInstallDmFailedWithoutFsvSigForBase CtsDexMetadataHostTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataHostTest testInstallDmWithoutFsvSigForSplit CtsDexMetadataHostTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataHostTest testInstallDmWithoutFsvSigForSplitOnlyInstall CtsDexMetadataHostTestCases]', 1), ('[android.car.cts.PreCreateUsersHostTest testAppsAreNotInstalledOnPreCreatedGuestAfterReboot CtsCarHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesOverrideOnReleaseBuildTest testPutPackageOverridesSecurityExceptionNonOverridableChangeId CtsAppCompatHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesOverrideOnReleaseBuildTest testPutPackageOverridesSecurityExceptionMissingPermission CtsAppCompatHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesOverrideOnReleaseBuildTest testPutPackageOverridesForAllVersions CtsAppCompatHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesOverrideOnReleaseBuildTest testPutPackageOverridesForNewerVersion CtsAppCompatHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesOverrideOnReleaseBuildTest testPutPackageOverridesForOlderVersion CtsAppCompatHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesOverrideOnReleaseBuildTest testRemovePackageOverridesSecurityExceptionNonOverridableChangeId CtsAppCompatHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesOverrideOnReleaseBuildTest testRemovePackageOverridesSecurityExceptionMissingPermission CtsAppCompatHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesOverrideOnReleaseBuildTest testRemovePackageOverridesWhenOverrideNotPresent CtsAppCompatHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesOverrideOnReleaseBuildTest testRemovePackageOverridesWhenOverridePresent CtsAppCompatHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testSecureHiddenSettingsKeysReadableWhenTestOnly CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testSystemHiddenSettingsKeysReadableWhenTestOnly CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testGlobalHiddenSettingsKeysReadableWhenTestOnly CtsAppSecurityHostTestCases]', 1), ('[android.cts.backup.FullBackupOnlyHostSideTest testFullBackupOnlyFalse_WithAgent CtsBackupHostTestCases]', 1), ('[android.cts.backup.FullBackupOnlyHostSideTest testFullBackupOnlyFalse_NoAgent CtsBackupHostTestCases]', 1), ('[android.cts.backup.FullBackupOnlyHostSideTest testFullBackupOnlyTrue_WithAgent CtsBackupHostTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest assumeTestEnabled CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_fromPersonalProfile_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_fromWorkProfile_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_noOtherProfiles_ReturnsFalse CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_packageNotAllowed_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_packageNotInstalled_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_permissionNotRequested_returnsFalse CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_profileOwner_returnsFalse CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withAppOpEnabled_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withCrossProfilesPermission_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withCrossUsersPermission_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withCrossUsersFullPermission_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_fromWorkProfile_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withAppOpDisabled_returnsFalse CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withNoOtherProfile_returnsFalse CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withAppOpDisabledOnCallingProfile_returnsFalse CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withAppOpDisabledOnOtherProfiles_returnsFalse CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCreateRequestInteractAcrossProfilesIntent_fromWorkProfile_returnsIntent CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCreateRequestInteractAcrossProfilesIntent_canNotRequestInteraction_throwsSecurityException CtsDevicePolicyManagerTestCases]', 1)]"
"7.4.5.2  IPv6"	"7.4.5.2"	"C-0-4"	"7.4.5.2/C-0-4"	"07040502.670004"	"""C-0-4] MUST maintain IPv6 connectivity in doze mode.       """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"7.3.10  Biometric Sensors"	"7.3.10"	"C-4-1"	"7.3.10/C-4-1"	"07031000.670401"	"""C-4-1] MUST meet the requirements for **Class 3** or **Class 2** biometric     as defined in this document. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"9.10  Device Integrity"	"9.10"	"C-0-5"	"9.10/C-0-5"	"09100000.670005"	"""C-0-5] MUST enable the above-described cryptographic file verification      protection for all files for the package that is installed      with trusted signature files as described [here](      https://developer.android.com/preview/security/features/apk-verity).  If device implementations are already launched without the ability to verify file content against a trusted key on an earlier Android version and can not add support for this feature with a system software update, they MAY be exempted from the requirement. The upstream Android Open Source project provides a preferred implementation of this feature based on the Linux kernel [fs-verity]( https://www.kernel.org/doc/html/latest/filesystems/fsverity.html) feature.  Device implementations:  """	""	""	"fsverity.html www.kernel.org"	""	""	""	""	"[('android.security.cts.HwRngTest', 2)]"	""	"[('CtsSecurityTestCases', 2)]"	""	""	""	""	"android.security.cts.HwRngTest"	""	"CtsSecurityTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/HwRngTest.java', 2)]"	"[('(2,www.kernel.org,/android/security/cts/HwRngTest.java)', 1)]"	"[('([1:/android/security/cts/HwRngTest.java]:[www.kernel.org]:[1]:method_text:[  * Reports whether the {@code /dev/hw_random} device is found. This test always passes.     */   ])', 1), ('([1:/android/security/cts/HwRngTest.java]:[www.kernel.org]:[1]:method_text:[    try {                in.close();            } catch (IOException ignored) {}        }    }}])', 1)]"	"https://developer.android.com https://www.kernel.org"	""	"[('www.kernel.org', 2)]"	"[('[android.security.cts.HwRngTest testConfigurationIfFilePresent CtsSecurityTestCases]', 1)]"
"7.3.10  Biometric Sensors"	"7.3.10"	"C-5-2"	"7.3.10/C-5-2"	"07031000.670502"	"""C-5-2] MUST additionally implement an implicit authentication flow     (without confirmation step) corresponding to     [setConfirmationRequired(boolean)](https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder#setConfirmationRequired%28boolean%29),     which applications can set to utilize for sign-in flows.  If device implementations have multiple biometric sensors, they:  """	""	""	"setConfirmationRequired(boolean) BiometricPrompt.Builder"	""	""	""	""	"[('android.hardware.biometrics.cts.BiometricPromptTest', 4)]"	""	"[('CtsHardwareTestCases', 4)]"	""	""	""	""	"android.hardware.biometrics.cts.BiometricPromptTest"	""	"CtsHardwareTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/biometrics/cts/BiometricPromptTest.java', 4)]"	"[('(8,BiometricPrompt.Builder,/android/hardware/biometrics/cts/BiometricPromptTest.java)', 1)]"	"[('([2:/android/hardware/biometrics/cts/BiometricPromptTest.java]:[BiometricPrompt.Builder]:[2]:method_text:[tFalse(exceptionTaken);            cancellationSignal.cancel();        }    }    @Presubmit   ])', 1), ('([2:/android/hardware/biometrics/cts/BiometricPromptTest.java]:[BiometricPrompt.Builder]:[2]:method_text:[tBuilder.setConfirmationRequired(false).build().isConfirmationRequired());    }    @Presubmit   ])', 1), ('([2:/android/hardware/biometrics/cts/BiometricPromptTest.java]:[BiometricPrompt.Builder]:[2]:method_text:[assertEquals(authenticators, prompt.getAllowedAuthenticators());        }    }    @Presubmit   ])', 1), ('([2:/android/hardware/biometrics/cts/BiometricPromptTest.java]:[BiometricPrompt.Builder]:[2]:method_text:[ld();            assertEquals(authenticators, prompt.getAllowedAuthenticators());        }    }}])', 1)]"	"https://developer.android.com"	""	"[('BiometricPrompt.Builder', 4)]"	"[('[android.hardware.biometrics.cts.BiometricPromptTest test_authenticate_fingerprint CtsHardwareTestCases]', 1), ('[android.hardware.biometrics.cts.BiometricPromptTest test_isConfirmationRequired CtsHardwareTestCases]', 1), ('[android.hardware.biometrics.cts.BiometricPromptTest test_setAllowedAuthenticators_withoutDeviceCredential CtsHardwareTestCases]', 1), ('[android.hardware.biometrics.cts.BiometricPromptTest test_setAllowedAuthenticators_withDeviceCredential CtsHardwareTestCases]', 1)]"
"2.2.3  Software"	"3.8.16"	"H-1-3"	"3.8.16/H-1-3"	"03081600.720103"	"""[3.8.16/H-1-3] MUST provide access to     this user affordance within three interactions from a default Launcher. *   ["""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"9.11.3  Identity Credential"	"9.11.3"	"C-0-1"	"9.11.3/C-0-1"	"09110300.670001"	"""C-0-1] MUST return non-null for the [IdentityCredentialStore#getInstance()](      https://developer.android.com/reference/android/security/identity/IdentityCredentialStore#getInstance%28android.content.Context%29)      method.  """	""	""	"getInstance() android.content.Context"	""	""	""	""	"[('android.telephony.ims.cts.ImsServiceTest', 12), ('android.text.method.cts.MetaKeyKeyListenerTest', 6), ('android.webkit.cts.GeolocationTest', 5), ('android.view.inputmethod.cts.NavigationBarColorTest', 4), ('android.provider.cts.media.MediaStore_Audio_Artists_AlbumsTest', 3), ('android.server.wm.StartActivityTests', 3), ('android.provider.cts.media.MediaStore_Audio_Genres_MembersTest', 3), ('android.security.cts.StagefrightTest', 3), ('android.text.method.cts.DigitsKeyListenerTest', 3), ('android.security.NetworkSecurityPolicyTestBase', 2), ('android.webkit.cts.WebViewTest', 2), ('android.app.cts.CloseSystemDialogsTest', 2), ('android.text.method.cts.DateKeyListenerTest', 2), ('android.content.cts.ClipDescriptionTest', 2), ('android.telephony.cts.PhoneNumberUtilsTest', 2), ('android.app.cts.AppTaskTests', 2), ('android.telecom.cts.CallDiagnosticServiceTest', 2), ('com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest', 2), ('android.provider.cts.media.MediaStore_Audio_ArtistsTest', 2), ('android.telephony.ims.cts.EabControllerTest', 2), ('android.webkit.cts.WebSettingsTest', 2), ('android.content.cts.MutableContextWrapperTest', 1), ('android.net.wifi.nl80211.cts.PnoNetworkTest', 1), ('android.graphics.cts.MovieTest', 1), ('android.security.net.config.cts.TestAttributes', 1), ('android.autofillservice.cts.commontests.TimePickerTestCase', 1), ('android.webkit.cts.WebChromeClientTest', 1), ('android.view.cts.ViewGroup_LayoutParamsTest', 1), ('android.os.cts.PowerManager_WakeLockTest', 1), ('android.app.usage.cts.UsageReportingTest', 1), ('com.android.cts.deviceandprofileowner.PersistentIntentResolvingTest', 1), ('android.location.cts.privileged.PrivilegedLocationPermissionTest', 1), ('com.android.server.cts.device.batterystats.BatteryStatsAlarmTest', 1), ('test.java.com.android.bedstead.deviceadminapp.DeviceAdminAppTest', 1), ('android.graphics.pdf.cts.PdfRendererTest', 1), ('android.media.cts.EncoderTest', 1), ('com.android.compatibility.common.tradefed.presubmit.ApkPackageNameCheck', 1), ('android.hardware.consumerir.cts.ConsumerIrTest', 1), ('android.security.identity.cts.IdentityApiTest', 1), ('android.net.wifi.cts.WifiLockTest', 1), ('android.graphics.drawable.cts.DrawableTest', 1), ('android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest', 1), ('com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest', 1), ('android.content.pm.cts.PackageManagerTest', 1), ('android.telephony.cts.TelephonyLocationTests', 1), ('test.java.com.android.eventlib.premade.EventLibActivityTest', 1), ('android.os.cts.CountDownTimerTest', 1), ('com.android.cts.comp.provisioning.ManagedProfileProvisioningTest', 1), ('android.widget.cts.MediaControllerTest', 1), ('android.acceleration.cts.BaseAccelerationTest', 1), ('android.net.wifi.nl80211.cts.NativeWifiClientTest', 1), ('android.service.settings.suggestions.SuggestionTest', 1), ('android.provider.cts.simphonebook.SimPhonebookContract_SimRecordsTest', 1), ('android.content.res.cts.ResourcesTest', 1), ('test.java.com.android.eventlib.EventLogsTest', 1), ('com.android.cts.dexmetadata.InstallDexMetadataTest', 1), ('android.hardware.camera2.cts.CameraExtensionCharacteristicsTest', 1), ('android.appsecurity.cts.keyrotationtest.test.SignatureQueryServiceInstrumentationTest', 1), ('android.cts.backup.preservedsettingsapp.PreservedSettingsRestoreTest', 1), ('android.telecom.cts.DataObjectUnitTests', 1), ('android.view.cts.OrientationEventListenerTest', 1), ('android.media.cts.AudioManagerTest', 1), ('android.packageinstaller.admin.cts.SessionCommitBroadcastTest', 1), ('android.view.accessibility.cts.AccessibilityManagerTest', 1), ('android.content.om.cts.OverlayManagerTest', 1), ('android.content.pm.cts.shortcutmanager.throttling.ShortcutManagerThrottlingTestReceiver', 1), ('android.apppredictionservice.cts.AppPredictionServiceTest', 1), ('android.text.method.cts.PasswordTransformationMethodTest', 1), ('com.android.cts.verifier.audio.AudioFrequencyActivity', 1), ('android.media.cts.MidiSoloTest', 1), ('com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest', 1), ('android.app.cts.BadProviderTest', 1), ('android.permission.cts.PermissionControllerTest', 1), ('android.media.cts.AudioRecordTest', 1), ('com.android.cts.certinstaller.PreSelectedKeyAccessTest', 1), ('android.app.cts.ActivityManagerProcessStateTest', 1), ('com.android.cts.blob.BlobStoreManagerTest', 1), ('android.widget.cts.SimpleCursorAdapterTest', 1), ('android.app.cts.ApplicationTest', 1), ('android.hardware.camera2.cts.OfflineSessionTest', 1), ('android.hardware.cts.SensorTest', 1), ('android.inputmethodservice.cts.devicetest.InputMethodServiceDeviceTest', 1), ('android.content.cts.ComponentNameTest', 1), ('android.text.method.cts.ArrowKeyMovementMethodTest', 1), ('android.hardware.cts.CameraGLTest', 1), ('android.view.accessibility.cts.AccessibilityEventTest', 1), ('android.graphics.drawable.cts.VectorDrawableSizeTest', 1), ('android.server.wm.WindowTest', 1), ('android.server.wm.StartActivityAsUserTests', 1), ('android.server.wm.AppConfigurationTests', 1), ('android.media.cts.RingtoneTest', 1), ('android.cts.backup.includeexcludeapp.IncludeExcludeTest', 1), ('android.widget.cts.ImageSwitcherTest', 1), ('android.graphics.cts.TypefaceTest', 1), ('android.location.cts.fine.GeofencingTest', 1), ('android.renderscript.cts.Float16ArithmeticTest', 1), ('android.telephony.cts.MmsTest', 1), ('android.location.cts.privileged.GnssMeasurementRequestTest', 1), ('android.telephonyprovider.cts.SmsConversationTest', 1), ('com.android.cts.externalstorageapp.ReadDefaultUris', 1), ('test.java.com.android.eventlib.events.activities.ActivityPausedEventTest', 1), ('android.media.cts.MediaPlayerTest', 1), ('android.media.cts.RoutingTest', 1), ('android.content.cts.AvailableIntentsTest', 1), ('android.hardware.biometrics.cts.BiometricManagerTest', 1), ('android.media.cts.LoudnessEnhancerTest', 1), ('android.graphics.pdf.cts.PdfRendererTransformTest', 1), ('android.provider.cts.contacts.CallLogTest', 1), ('android.packageinstaller.tapjacking.cts.TapjackingTest', 1), ('com.android.cts.comp.provisioning.AffiliationTest', 1), ('android.slice.cts.SlicePermissionsTest', 1), ('android.providerui.cts.MediaStoreUiTest', 1), ('android.view.cts.ViewGroupChildDrawingOrderTest', 1), ('android.graphics.drawable.cts.GradientDrawableTest', 1), ('android.provider.cts.DocumentsContractTest', 1), ('com.android.cts.intent.receiver.ClearApplicationDataTest', 1), ('android.suspendapps.cts.DualSuspendTests', 1), ('com.android.cts.deviceandprofileowner.AffiliationTest', 1), ('android.sharesheet.cts.CtsSharesheetDeviceTest', 1), ('android.content.cts.ContentResolverWrapTest', 1), ('android.jobscheduler.cts.TriggerContentTest', 1), ('android.text.util.cts.LinkifyTest', 1), ('android.text.format.cts.FormatterTest', 1), ('android.telecom.cts.SelfManagedAwareInCallServiceTest', 1), ('android.keystore.cts.SignatureTest', 1), ('com.android.cts.documentclient.DocumentsClientTest', 1), ('android.cts.rscpp.RSResizeTest', 1), ('android.webkit.cts.PacProcessorTest', 1), ('android.database.sqlite.cts.SQLiteProgramTest', 1), ('android.cts.backup.othersoundssettingsapp.OtherSoundsSettingsTest', 1), ('android.vr.cts.VrDisplayTest', 1), ('android.media.cts.MediaSessionManagerTest', 1), ('android.hardware.cts.SensorSupportTest', 1), ('android.os.cts.DebugTest', 1), ('android.media.session.cts.MediaSessionManagerTest', 1), ('com.android.cts.intent.sender.SuspendPackageTest', 1), ('com.android.cts.comp.BindDeviceAdminServiceFailsTest', 1), ('test.java.com.android.bedstead.nene.users.UserReferenceTest', 1), ('com.android.cts.normalapp.ClientTest', 1), ('com.android.cts.instrumentationdiffcertapp.InstrumentationFailToRunTest', 1), ('android.content.cts.ContextMoreTest', 1), ('android.provider.cts.contacts.ContactsContract_ContactsTest', 1), ('android.provider.cts.SearchRecentSuggestionsTest', 1), ('android.devicepolicy.cts.StartProfilesTest', 1), ('android.autofillservice.cts.SessionLifecycleTest', 1), ('com.android.cts.deviceandprofileowner.CustomizationRestrictionsTest', 1), ('com.android.cts.managedprofile.PreManagedProfileTest', 1), ('android.widget.cts.GridViewTest', 1), ('android.widget.cts.AbsListView_LayoutParamsTest', 1), ('android.view.textclassifier.cts.TextViewIntegrationTest', 1), ('android.accessibilityservice.cts.AccessibilityLoggingTest', 1), ('android.net.wifi.cts.WifiNetworkSpecifierTest', 1), ('android.webkit.cts.WebHistoryItemTest', 1), ('android.hardware.cts.SingleSensorTests', 1), ('android.os.cts.SeccompTest', 1), ('com.android.cts.transferowner.DeviceAndProfileOwnerTransferOutgoingTest', 1), ('android.widget.cts.RelativeLayoutTest', 1), ('android.content.cts.Intent_ShortcutIconResourceTest', 1), ('com.android.server.cts.storaged.StoragedTest', 1), ('android.security.cts.IntentSenderRemovalTest', 1), ('android.media.cts.RemoteControllerTest', 1), ('android.net.wifi.nl80211.cts.NativeScanResultTest', 1), ('android.systemintents.cts.TestManageOverlayPermissionIntents', 1), ('com.android.cts.graphics.framerateoverride.FrameRateOverrideTestActivity', 1), ('android.permission.cts.OneTimePermissionTest', 1), ('android.text.cts.AutoTextTest', 1), ('android.net.wifi.nl80211.cts.RadioChainInfoTest', 1), ('android.jobscheduler.cts.ExpeditedJobTest', 1), ('com.android.cts.usespermissiondiffcertapp.UriGrantsServiceTest', 1), ('android.app.cts.AliasActivityTest', 1), ('com.android.cts.packagemanager.preferredactivity.app.PreferredActivityDeviceTests', 1), ('android.app.usage.cts.UsageStatsTest', 1), ('android.widget.cts.SimpleExpandableListAdapterTest', 1), ('android.widget.cts.TextClockTest', 1), ('android.database.cts.DatabaseCursorTest', 1), ('android.translation.cts.UiTranslationManagerTest', 1), ('android.permission.cts.RemovePermissionTest', 1), ('android.permission2.cts.NoReceiveSmsPermissionTest', 1), ('android.net.wifi.cts.WifiBackupRestoreTest', 1), ('android.gwpasan.GwpAsanTestActivity', 1), ('android.security.cts.IsolatedProcessTest', 1), ('android.dpi.cts.ConfigurationScreenLayoutTest', 1), ('android.security.cts.ConscryptIntermediateVerificationTest', 1), ('android.provider.cts.media.MediaStoreAudioTestHelper', 1), ('android.graphics.drawable.cts.ClipDrawableTest', 1), ('android.controls.cts.CtsControlsServiceTest', 1), ('android.widget.cts.TextViewIsHorizontallyScrollableTest', 1), ('android.media.metrics.cts.MediaMetricsAtomHostSideTests', 1), ('com.android.cts.usespermissiondiffcertapp.UriGrantsClipboardTest', 1), ('android.media.cts.ConnectionStatus', 1), ('android.cts.rscpp.RS3DLUTTest', 1), ('android.uirendering.cts.testclasses.ShadowTests', 1), ('com.android.cts.verifier.audio.RingerModeActivity', 1), ('android.telephony.cts.CarrierConfigManagerTest', 1), ('android.telephony.cts.TelephonyRegistryManagerTest', 1), ('android.hardware.hdmi.cts.HdmiControlManagerTest', 1), ('android.nfc.cts.NfcPreferredPaymentTest', 1), ('android.view.cts.ViewConfigurationTest', 1), ('android.display.cts.BrightnessTest', 1), ('android.permission.cts.MainlineNetworkStackPermissionTest', 1), ('android.widget.cts.HeaderViewListAdapterTest', 1), ('android.widget.cts.TimePickerTest', 1), ('android.os.storage.cts.StorageCrateTest', 1), ('android.widget.cts.ExpandableListViewTest', 1), ('android.widget.cts.TabWidgetTest', 1), ('android.telephony.cts.CarrierSignalTest', 1), ('com.android.cts.externalstorageapp.CommonExternalStorageTest', 1), ('android.content.pm.cts.LauncherAppsTest', 1), ('android.cts.rscpp.RSElementTest', 1), ('android.alarmmanager.cts.AppStandbyTests', 1), ('android.server.wm.AlertWindowsImportanceTests', 1), ('android.telephony.euicc.cts.EuiccManagerTest', 1), ('android.view.cts.ViewUnbufferedTest', 1), ('android.view.cts.ChoreographerNativeTest', 1), ('android.permission.cts.NoCaptureVideoPermissionTest', 1), ('android.admin.cts.DeviceAdminActivationTest', 1), ('android.view.accessibility.cts.AccessibilityShortcutTest', 1), ('android.net.wifi.cts.MulticastLockTest', 1), ('android.text.cts.BidiFormatterTest', 1), ('android.mediapc.cts.EncoderInitializationLatencyTest', 1), ('android.renderscript.cts.refocus.RefocusTest', 1), ('test.java.com.android.eventlib.events.deviceadminreceivers.DeviceAdminSystemUpdatePendingEventTest', 1), ('android.uirendering.cts.testclasses.AlphaBlendTest', 1), ('test.java.com.android.eventlib.events.activities.ActivityStoppedEventTest', 1), ('android.cts.backup.fullbackupapp.FullbackupTest', 1), ('android.media.cts.AudioRecordSharedAudioTest', 1), ('android.appsearch.app.a.AppSearchStorageAugmenterDeviceTest', 1), ('android.mediadrm.cts.MediaPlayerDrmTest', 1), ('com.android.cts.mediastorageapp.MediaStorageTest', 1), ('com.android.cts.managedprofile.CrossProfileWidgetPrimaryUserTest', 1), ('android.net.wifi.aware.cts.SingleDeviceTest', 1), ('android.telecom.cts.ConnectionServiceTest', 1), ('android.server.wm.DisplayHashManagerTest', 1), ('android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest', 1), ('android.display.cts.DisplayTest', 1), ('android.content.cts.BroadcastReceiverTest', 1), ('android.content.cts.ReadableUriExtraToClipDataTest', 1), ('android.content.cts.SharedPreferencesTest', 1), ('com.android.cts.crossprofilenopermissionappstest.CrossProfileAppsWithNoPermission', 1), ('android.app.cts.BooleanTileServiceTest', 1), ('android.view.animation.cts.AnimatorInflaterTest', 1), ('com.android.cts.splitapp.SplitAppTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofDetectionTest', 1), ('android.location.cts.fine.LocationProviderBaseTest', 1), ('android.telephony.embms.cts.MbmsDownloadReceiverTest', 1), ('android.os.cts.powerexemption.PowerExemptionTest', 1), ('android.jobscheduler.cts.shareduidtests.SharedUidTest', 1), ('android.server.wm.WindowContextTests', 1), ('android.view.cts.AttachedSurfaceControlSyncTest', 1), ('android.database.cts.DatabaseUtilsTest', 1), ('android.graphics.drawable.cts.RippleDrawableTest', 1), ('android.provider.cts.media.MediaStorePlacementTest', 1), ('android.util.cts.PrintWriterPrinterTest', 1), ('android.view.cts.ViewOutlineProviderTest', 1), ('android.server.wm.SurfaceControlViewHostTests', 1), ('android.hardware.cts.SensorIntegrationTests', 1), ('android.app.cts.TimePickerDialogTest', 1), ('android.content.cts.ContentProviderClientTest', 1), ('android.permission2.cts.NoProcessOutgoingCallPermissionTest', 1), ('android.cts.rscpp.RSYuvTest', 1), ('android.alarmmanager.cts.BasicApiTests', 1), ('android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test', 1), ('android.appsecurity.cts.apkveritytestapp.InstalledFilesCheck', 1), ('android.view.inputmethod.cts.InputMethodServiceStrictModeTest', 1), ('android.text.style.cts.ImageSpanTest', 1), ('android.hardware.camera2.cts.LogicalCameraDeviceTest', 1), ('android.app.cts.AlertDialog_BuilderCursorTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerStartShortcutTest', 1), ('android.net.cts.legacy.api22.permission.NoNetworkStatePermissionTest', 1), ('android.text.cts.StaticLayoutLineBreakingTest', 1), ('android.graphics.drawable.cts.LayerDrawableTest', 1), ('com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest', 1), ('com.android.cts.deviceandprofileowner.DeviceIdentifiersTest', 1), ('android.autofillservice.cts.unittests.VisibilitySetterActionTest', 1), ('android.text.method.cts.LinkMovementMethodTest', 1), ('com.android.cts.deviceandprofileowner.ApplicationRestrictionsTest', 1), ('android.permission.cts.NearbyDevicesRenouncePermissionTest', 1), ('android.keystore.cts.AndroidKeyStoreTest', 1), ('android.quickaccesswallet.cts.WalletCardTest', 1), ('android.media.cts.SoundPoolTest', 1), ('android.provider.cts.contacts.Contacts_PeopleTest', 1), ('android.widget.cts.TextViewFontWeightTest', 1), ('android.net.wifi.cts.WifiManagerTest', 1), ('android.alarmmanager.cts.TimeChangeTests', 1), ('com.android.cts.storageapp.StorageTest', 1), ('android.edi.cts.app.ClasspathDeviceTest', 1), ('android.controls.cts.CtsControlTemplateTest', 1), ('android.widget.cts.TableLayoutTest', 1), ('android.permission.cts.NoKeyPermissionTest', 1), ('com.android.compatibility.common.tradefed.presubmit.PresubmitSetupValidation', 1), ('android.security.cts.MotionEventTest', 1), ('test.java.com.android.eventlib.events.deviceadminreceivers.DeviceAdminDisabledEventTest', 1), ('android.content.cts.IntentTest', 1), ('com.android.cts.appwithdata.CreatePrivateDataTest', 1), ('android.telecom.cts.CallRedirectionServiceTest', 1), ('android.content.syncmanager.cts.CtsSyncManagerTest', 1), ('android.security.cts.NanoAppBundleTest', 1), ('com.android.tests.silentupdate.SilentUpdateTests', 1), ('com.android.cts.usespermissiondiffcertapp.UriGrantsTest', 1), ('com.android.cts.useprocess.AccessNetworkTest', 1), ('com.android.cts.deviceowner.CreateAndManageUserTest', 1), ('android.location.cts.fine.SettingInjectorServiceTest', 1), ('android.app.classloaderfactory.cts.AppComponentFactoryTest', 1), ('android.view.cts.SearchEventTest', 1), ('android.accessibilityservice.cts.TouchExplorerTest', 1), ('android.media.cts.MediaExtractorTest', 1), ('android.media.cts.AudioSystemUsageTest', 1), ('android.view.cts.DisplayRefreshRateTest', 1), ('android.os.storage.cts.StorageManagerTest', 1), ('android.telecom.cts.ExtendedInCallServiceTest', 1), ('android.bluetooth.cts.BasicAdapterTest', 1), ('android.provider.cts.BlockedNumberContractTest', 1), ('android.widget.cts.RemoteViewsTest', 1), ('android.provider.cts.SettingsPanelTest', 1), ('android.app.cts.AlertDialog_BuilderTest', 1), ('android.car.cts.CarAppFocusManagerTest', 1), ('com.android.tests.loadingprogress.device.LoadingProgressTest', 1), ('android.app.cts.IntentServiceTest', 1), ('android.cts.backup.includeexcludeapp.DataExtractionRulesApplicabilityTest', 1), ('com.android.cts.overlay.app.OverlayableTest', 1), ('android.graphics.drawable.cts.ThemedDrawableTest', 1), ('android.systemintents.cts.TestSystemIntents', 1), ('android.permission.cts.ShellPermissionTest', 1), ('android.provider.cts.contacts.testapp.CallLogDirectBootTest', 1), ('android.widget.cts.SimpleCursorTreeAdapterTest', 1), ('com.android.cts.profileowner.ManagementTest', 1), ('android.security.identity.cts.ProvisioningTest', 1), ('android.server.wm.LocationOnScreenTests', 1), ('android.app.cts.ServiceTest', 1), ('android.widget.cts.CursorAdapterTest', 1), ('android.uirendering.cts.testclasses.ViewFadingEdgeTests', 1), ('com.android.cts.deviceowner.HeadlessSystemUserTest', 1), ('android.rotationresolverservice.cts.CtsRotationResolverServiceDeviceTest', 1), ('android.translation.cts.TranslationManagerTest', 1), ('android.telephony4.cts.SimRestrictedApisTest', 1), ('test.java.com.android.eventlib.events.activities.ActivityCreatedEventTest', 1), ('android.widget.cts.FrameLayout_LayoutParamsTest', 1), ('android.media.cts.AudioTrackTest', 1), ('android.cts.rscpp.RSBlendTest', 1), ('android.security.cts.ParcelableExceptionTest', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.preference.cts.PreferenceDataStoreTest', 1), ('android.accessibilityservice.cts.AccessibilityGestureDetectorTest', 1), ('android.app.cts.backgroundrestrictions.BroadcastsTest', 1), ('com.android.cts.deviceandprofileowner.NetworkLoggingTest', 1), ('android.quickaccesswallet.cts.GetWalletCardsResponseTest', 1), ('android.media.cts.MediaProjectionTest', 1), ('com.android.cts.usespermissiondiffcertapp.ModifyInstallerPackageTest', 1), ('android.server.wm.MultiDisplayActivityLaunchTests', 1), ('android.app.cts.UiModeManagerTest', 1), ('android.widget.cts.CompoundButtonTest', 1), ('android.os.cts.CrossProcessExceptionTest', 1), ('com.android.cts.authboundkey.AuthBoundKeyAppTest', 1), ('android.provider.cts.media.MediaStoreNotificationTest', 1), ('android.security.cts.FileIntegrityManagerTest', 1), ('android.app.cts.ActivityManagerApi29Test', 1), ('android.view.animation.cts.AlphaAnimationTest', 1), ('android.widget.cts.DatePickerTest', 1), ('com.android.cts.verifier.sensors.MotionIndicatorView', 1), ('android.telephony.cts.CellInfoTest', 1), ('android.app.cts.TaskDescriptionTest', 1), ('com.android.cts.managedprofile.DeviceIdentifiersTest', 1), ('android.content.wm.cts.ContextGetDisplayTest', 1), ('android.view.inputmethod.cts.InlineSuggestionTest', 1), ('android.security.cts.CVE_2021_0309', 1), ('android.view.cts.TouchDelegateTest', 1), ('android.text.method.cts.MultiTapKeyListenerTest', 1), ('android.database.cts.SQLiteCantOpenDatabaseExceptionTest', 1), ('android.content.pm.cts.FeatureTest', 1), ('com.android.cts.appaccessdata.AccessPrivateDataTest', 1), ('android.telephony2.cts.PhoneNumberTest', 1), ('android.server.wm.MultiDisplaySystemDecorationTests', 1), ('android.telephony.cts.VisualVoicemailServiceTest', 1), ('android.app.people.cts.ConversationStatusTest', 1), ('com.android.cts.devicepolicy.accountmanagement.AccountUtilsTest', 1), ('com.android.cts.crossprofileappstest.CrossProfileAppsPermissionToInteractTest', 1), ('android.text.format.cts.TimeTest', 1), ('android.location.cts.fine.GeocoderTest', 1), ('android.cts.rscpp.RSConvolveTest', 1), ('android.hardware.cts.SensorParameterRangeTest', 1), ('android.telecom.cts.DefaultDialerOperationsNoPermissionsTest', 1), ('android.telecom.cts.SimCallManagerTest', 1), ('android.location.cts.none.NoLocationPermissionTest', 1), ('android.seccomp.cts.app.SeccompDeviceTest', 1), ('android.telecom.cts.PhoneAccountOperationsTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest', 1), ('android.autofillservice.cts.dropdown.LoginActivityTest', 1), ('com.android.cts.managedprofile.CrossProfileSharingTest', 1), ('com.android.cts.extractnativelibs.app.noextract.ExtractNativeLibsFalseDeviceTest', 1), ('com.android.cts.transferowner.DeviceAndProfileOwnerTransferIncomingTest', 1), ('android.app.cts.PendingIntentTest', 1), ('android.location.cts.coarse.LocationManagerCoarseTest', 1), ('android.widget.cts.LinearLayoutTest', 1), ('android.content.pm.cts.PackageManagerShellCommandTest', 1), ('android.uirendering.cts.testclasses.EdgeEffectTests', 1), ('android.database.sqlite.cts.SQLiteStatementTest', 1), ('android.permission.cts.PermissionManagerTest', 1), ('com.android.compatibility.common.deviceinfo.DeviceInfo', 1), ('com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest', 1), ('android.media.cts.MediaSyncTest', 1), ('android.media.tv.tuner.cts.TunerDvrTest', 1), ('com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest', 1), ('android.security.cts.VisualizerEffectTest', 1), ('android.display.cts.VirtualDisplayTest', 1), ('android.view.cts.ViewGroup_MarginLayoutParamsTest', 1), ('android.database.sqlite.cts.SQLiteQueryBuilderTest', 1), ('android.graphics.cts.PaintTest', 1), ('android.widget.cts.RadioGroup_LayoutParamsTest', 1), ('com.android.compatibility.common.tradefed.presubmit.CtsConfigLoadingTest', 1), ('com.android.cts.appbinding.app.MyEnabler', 1), ('com.android.cts.managedprofile.CrossProfileWidgetTest', 1), ('test.java.com.android.bedstead.nene.packages.PackageReferenceTest', 1), ('android.telecom.cts.DefaultDialerOperationsTest', 1), ('android.permission.cts.NearbyDevicesPermissionTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerLauncherCallbackTest', 1), ('android.database.cts.AbstractCursorTest', 1), ('android.telephony2.cts.TelephonyManagerNoPermissionTest', 1), ('test.java.com.android.eventlib.premade.EventLibDeviceAdminReceiverTest', 1), ('android.permission.cts.BackgroundPermissionsTest', 1), ('android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest', 1)]"	"[('setUp', 247), ('getInstrumentation', 163), ('getContext', 134), ('getTargetContext', 114), ('tearDown', 96), ('setup', 54), ('getPackageManager', 41), ('getUiAutomation', 27), ('getActivity', 24), ('build', 24), ('getContentResolver', 23), ('getPackageName', 21), ('getAction', 19), ('getName', 17), ('getSimpleName', 17), ('getResources', 16), ('getApplicationContext', 13), ('Object', 13), ('toString', 13), ('close', 13), ('release', 12), ('Intent', 12), ('Builder', 12), ('countDown', 12), ('size', 11), ('getMainLooper', 11), ('getInstance', 11), ('clear', 11), ('Bundle', 9), ('IntentFilter', 8), ('getPackage', 8), ('data', 8), ('length', 8), ('getMessage', 8), ('getSharedVolumeNames', 7), ('ContentValues', 7), ('BroadcastReceiver', 7), ('notifyAll', 7), ('destroy', 6), ('start', 6), ('any', 6), ('getMediaDirString', 5), ('getRingerMode', 5), ('AccessibilityDumpOnFailureRule', 5), ('reset', 5), ('StringBuilder', 5), ('getFilesDir', 5), ('getExternalStorageDirectory', 5), ('ServiceConnection', 4), ('run', 4), ('notify', 4), ('ConditionVariable', 4), ('WindowManagerStateHelper', 4), ('getUserId', 4), ('setupFiles', 4), ('cleanup', 4), ('waitForIdleSync', 4), ('moveToFirst', 4), ('printStackTrace', 4), ('pressHome', 4), ('oneTimeSetup', 4), ('getBytes', 4), ('getRefreshRate', 4), ('getLineCount', 4), ('newBuilder', 4), ('initiate_getCurrentPosition', 4), ('hasMicrophone', 3), ('Monitor', 3), ('myPid', 3), ('delete', 3), ('wakeUp', 3), ('waitForBroadcast', 3), ('clearQueue', 3), ('resetStaticState', 3), ('myUserHandle', 3), ('AlarmManagerDeviceConfigHelper', 3), ('getCWidth', 3), ('getCHeight', 3), ('getAssets', 3), ('updateTitle', 3), ('BackupUtils', 2), ('getDataDir', 2), ('getSystem', 2), ('installApp', 2), ('uninstallApp', 2), ('prepare', 2), ('loop', 2), ('Thread', 2), ('wait', 2), ('quit', 2), ('enableAppOps', 2), ('enableUserFinal', 2), ('IntentReceiver', 2), ('resetUserFinal', 2), ('resetData', 2), ('ensureDefaultSmsApp', 2), ('getAbsolutePath', 2), ('ProviderInfo', 2), ('CancellationSignal', 2), ('getPath', 2), ('createInstance', 2), ('getConfiguration', 2), ('getTextLink', 2), ('BasicAdminReceiver', 2), ('waitForChanged', 2), ('getCapability', 2), ('wakeUpScreen', 2), ('getDefault', 2), ('getTranslationReplier', 2), ('enableDebugLog', 2), ('oneTimeReset', 2), ('resetTemporaryTranslationService', 2), ('Audio1', 2), ('supportsHardware', 2), ('poll', 2), ('getDownloadedFolder', 2), ('getLooper', 2), ('waitForAnyCallback', 2), ('getActivityIntent', 2), ('removeAllAppTasks', 2), ('getMode', 2), ('getPrefs', 2), ('edit', 2), ('commit', 2), ('getHost', 2), ('getMetricAffectingSpan', 2), ('enableBluetooth', 2), ('supportsBluetooth', 2), ('getAdapter', 2), ('getSoundA', 2), ('getSoundCs', 2), ('getSoundE', 2), ('getSoundB', 2), ('getSoundGs', 2), ('getFileName', 2), ('getState', 2), ('clearFreezeRecord', 2), ('resetSyncConfig', 2), ('getSyncDumpsys', 2), ('getWho', 2), ('gotLocation', 2), ('errorDenied', 2), ('errorUnavailable', 2), ('errorTimeout', 2), ('getExampleDrivingPrivilegesCbor', 2), ('ByteArrayOutputStream', 2), ('end', 2), ('getPreferenceManager', 2), ('getSharedPreferences', 2), ('getInitiatingPackageSigningInfo', 2), ('get', 2), ('getPackageInstaller', 2), ('checkIncrementalDeliveryFeature', 2), ('EdgeEffectValidator', 2), ('shutdown', 1), ('ConfirmReceiver', 1), ('getAccount', 1), ('getHardwareAcceleratedView', 1), ('getSoftwareAcceleratedView', 1), ('getManualHardwareAcceleratedView', 1), ('getManualSoftwareAcceleratedView', 1), ('SimPhonebookRequirementsRule', 1), ('getDefaultSubscriptionId', 1), ('newSingleThreadScheduledExecutor', 1), ('getCameraManager', 1), ('createNewFile', 1), ('getService', 1), ('areChannelsBypassingDnd', 1), ('hasVibrator', 1), ('getNotificationPolicy', 1), ('getCurrentInterruptionFilter', 1), ('getDefaultLauncher', 1), ('SessionCommitReceiver', 1), ('ServiceReporter', 1), ('getMaxMessageSize', 1), ('onFlush', 1), ('resetAppState', 1), ('onStart', 1), ('myLooper', 1), ('makeSimpleCursorAdapter', 1), ('SurfaceTextureCallback', 1), ('SurfaceTextureBurstCallback', 1), ('PreviewCallback', 1), ('beforeActivityLaunched', 1), ('Renderer', 1), ('getView', 1), ('enableService', 1), ('getWindow', 1), ('anyInt', 1), ('teardown', 1), ('setFlagFalse', 1), ('supportsMultipleUsers', 1), ('createSecondUser', 1), ('trim', 1), ('removeSecondUser', 1), ('getStreamType', 1), ('Paint', 1), ('getStyle', 1), ('SentReceiver', 1), ('getResultCode', 1), ('getComponentInfo', 1), ('getParameters', 1), ('Matrix', 1), ('clearResult', 1), ('addAndAssertProfileOwner', 1), ('init', 1), ('meetsResolutionRequirements', 1), ('createMatchingIntent', 1), ('stream', 1), ('toSet', 1), ('hashCode', 1), ('getPathSegments', 1), ('getScannedPath', 1), ('getScannedUri', 1), ('makePhotosJobInfo', 1), ('group', 1), ('getConnectionService', 1), ('getInCallService', 1), ('waitForUnBinding', 1), ('getCacheDir', 1), ('checkForErrors', 1), ('stopAllocCounting', 1), ('resetAllCounts', 1), ('temporarilySkipActivityLaunch', 1), ('getSystemService', 1), ('getProvider', 1), ('sleep', 1), ('setUserIcon', 1), ('setBitmap', 1), ('BlockingBroadcastReceiver', 1), ('smartLinkify', 1), ('getScenario', 1), ('AtomicInteger', 1), ('getStart', 1), ('getEnd', 1), ('setUpClass', 1), ('Callback', 1), ('getSurface', 1), ('prepareDeviceForOneTime', 1), ('restoreDeviceForOneTime', 1), ('resetTemporaryContentCaptureService', 1), ('setContextAndInstrumentation', 1), ('Exception', 1), ('getTrustManager', 1), ('getDefaultType', 1), ('getTrustManagers', 1), ('CtsControlsService', 1), ('resetProperties', 1), ('getNotConnectedReason', 1), ('getActiveNetworkInfo', 1), ('getReason', 1), ('fail', 1), ('hasTelephony', 1), ('flattenToString', 1), ('acquire', 1), ('HeaderViewFullAdapter', 1), ('HeaderViewEmptyAdapter', 1), ('getTabWidget', 1), ('elapsedRealtime', 1), ('FrameCallback', 1), ('getX', 1), ('getY', 1), ('getEventTime', 1), ('getSource', 1), ('getWidth', 1), ('getHeight', 1), ('nativeGetChoreographer', 1), ('AccessibilityShortcutSettingsRule', 1), ('hasOverlappingRendering', 1), ('getNoBackupFilesDir', 1), ('Connection', 1), ('waitForService', 1), ('waitForStateChange', 1), ('onAttachFailed', 1), ('getSession', 1), ('getSupportedHashAlgorithms', 1), ('getMainExecutor', 1), ('getPhysicalHeight', 1), ('getPhysicalWidth', 1), ('launchScreenOnActivity', 1), ('getSupportedWideColorGamut', 1), ('HdrSettings', 1), ('cacheAndClearOriginalHdrSettings', 1), ('restoreOriginalHdrSettings', 1), ('availablePermits', 1), ('getWindowManager', 1), ('getOverrideConfig', 1), ('getIntent', 1), ('MbmsDownloadReceiver', 1), ('mkdir', 1), ('getCanonicalPath', 1), ('pressWakeupButton', 1), ('pressUnlockButton', 1), ('pressHomeButton', 1), ('getHolder', 1), ('createCancellationSignal', 1), ('getAttributionSource', 1), ('callPhone', 1), ('Random', 1), ('makeOutput', 1), ('commitAndAwaitPropagation', 1), ('restoreAll', 1), ('cappedSensorTypeSet', 1), ('myUserId', 1), ('UnlockScreenRule', 1), ('requery', 1), ('startUsingNetworkFeature', 1), ('TextPaint', 1), ('MetricAffectingSpan', 1), ('setupCrossProfileApps', 1), ('wakeupDeviceAndPressHome', 1), ('pressMenu', 1), ('readTargetUser', 1), ('getArguments', 1), ('createBundle0', 1), ('createBundle1', 1), ('getSounds', 1), ('getAudioAttributes', 1), ('getWeight', 1), ('getScanResults', 1), ('before', 1), ('now', 1), ('getAirplaneMode', 1), ('setSystemDate', 1), ('setupControlBinder', 1), ('rememberPreviousCallRedirectionApp', 1), ('BroadcastRpc', 1), ('runDumpsysBatteryUnplug', 1), ('runDumpsysBatteryReset', 1), ('removeAllAccounts', 1), ('waitForBroadcastIdle', 1), ('resetSilentUpdatesPolicy', 1), ('waitForResult', 1), ('getClassLoader', 1), ('MediaExtractor', 1), ('getStatSize', 1), ('eglSwapBuffers', 1), ('getFpsResult', 1), ('ReentrantLock', 1), ('newCondition', 1), ('none', 1), ('getCar', 1), ('getActiveAppTypes', 1), ('getApkPaths', 1), ('setTheme', 1), ('newTheme', 1), ('getTheme', 1), ('create', 1), ('createDeviceProtectedStorageContext', 1), ('CborBuilder', 1), ('addArray', 1), ('addMap', 1), ('toByteArray', 1), ('iterator', 1), ('next', 1), ('getPublicKey', 1), ('ErrorCollector', 1), ('getLeftFadingEdgeStrength', 1), ('getRightFadingEdgeStrength', 1), ('getTopFadingEdgeStrength', 1), ('getBottomFadingEdgeStrength', 1), ('getRotationResolverServiceComponent', 1), ('getAttributeSet', 1), ('createDirectChannel', 1), ('getHighestDirectReportRateLevel', 1), ('finalTearDown', 1), ('NetworkLogsReceiver', 1), ('getCurrentUser', 1), ('getInstallingPackageName', 1), ('getInitiatingPackageName', 1), ('getApkContentsSigners', 1), ('releaseAutomotiveProjection', 1), ('PeerConnection', 1), ('CapabilitiesCallback', 1), ('onComplete', 1), ('waitForCarrierConfigChanged', 1), ('getFirstApiLevel', 1), ('getVendorApiLevel', 1), ('getNetworkImageHtml', 1), ('getAllCellInfo', 1), ('Executor', 1), ('resetCounters', 1), ('getDatabasePath', 1), ('getParentFile', 1), ('MemoryInfo', 1), ('getFileDescriptor', 1), ('getSimCallManager', 1), ('waitpid', 1), ('initializeSyscallMap', 1), ('DeviceState', 1), ('BasicAdminReceiverNoMetadata', 1), ('AbandonAllPackageSessionsRule', 1), ('initParameters', 1), ('onBefore', 1), ('onAfter', 1), ('Tracer', 1), ('getDurationScale', 1), ('populateDefaultTable', 1), ('populateBlobTable', 1), ('makeResultDir', 1), ('mkdirs', 1), ('assertClearDefaultRestrictions', 1), ('getDefaultEnabledRestrictions', 1), ('getAllowedRestrictions', 1), ('createEmployeeTable', 1), ('getCallCapablePhoneAccounts', 1), ('getId', 1), ('setupDatabase', 1)]"	"[('CtsTelephonyTestCases', 25), ('CtsWidgetTestCases', 23), ('CtsTextTestCases', 22), ('CtsContentTestCases', 20), ('CtsAppTestCases', 19), ('CtsMediaTestCases', 18), ('CtsProviderTestCases', 16), ('CtsViewTestCases', 14), ('CtsWindowManagerDeviceTestCases', 13), ('CtsWifiTestCases', 12), ('CtsWebkitTestCases', 12), ('CtsSecurityTestCases', 12), ('CtsTelecomTestCases', 11), ('CtsPermissionTestCases', 11), ('CtsGraphicsTestCases', 10), ('CtsDatabaseTestCases', 7), ('CtsSensorTestCases', 6), ('CtsRsCppTestCases', 6), ('CtsInputMethodTestCases', 6), ('CtsAutoFillServiceTestCases', 4), ('CtsCameraTestCases', 4), ('CtsLocationFineTestCases', 4), ('CtsUiRenderingTestCases', 4), ('CtsHardwareTestCases', 3), ('CtsAccessibilityTestCases', 3), ('CtsAccessibilityServiceTestCases', 3), ('CtsDisplayTestCases', 3), ('CtsAlarmManagerTestCases', 3), ('CtsShortcutManagerTestCases', 3), ('CtsUsageStatsTestCases', 2), ('CtsLocationPrivilegedTestCases', 2), ('CtsPdfTestCases', 2), ('CtsIdentityTestCases', 2), ('CtsRenderscriptTestCases', 2), ('CtsJobSchedulerTestCases', 2), ('CtsKeystoreTestCases', 2), ('CtsContactsProviderTestCases', 2), ('CtsSystemIntentTestCases', 2), ('CtsTranslationTestCases', 2), ('CtsPermission2TestCases', 2), ('CtsControlsDeviceTestCases', 2), ('CtsQuickAccessWalletTestCases', 2), ('CtsTelephony2TestCases', 2), ('CtsNetSecConfigAttributeTestCases', 1), ('CtsAccelerationTestCases', 1), ('CtsSimPhonebookProviderTestCases', 1), ('CtsAdminPackageInstallerTestCases', 1), ('CtsAppPredictionServiceTestCases', 1), ('CtsBlobStoreTestCases', 1), ('CtsTelephonyProviderTestCases', 1), ('CtsPackageInstallerTapjackingTestCases', 1), ('CtsSliceTestCases', 1), ('CtsProviderUiTestCases', 1), ('CtsSuspendAppsTestCases', 1), ('CtsSharesheetTestCases', 1), ('CtsVrTestCases', 1), ('CtsDevicePolicyTestCases', 1), ('CtsTextClassifierTestCases', 1), ('CtsGwpAsanTestCases', 1), ('CtsDpiTestCases', 1), ('CtsNfcTestCases', 1), ('CtsAdminTestCases', 1), ('CtsMediaPerformanceClassTestCases', 1), ('CtsMediaDrmTestCases', 1), ('CtsBatterySavingTestCases', 1), ('CtsJobSchedulerSharedUidTestCases', 1), ('CtsUtilTestCases', 1), ('CtsNetTestCases', 1), ('CtsBluetoothTestCases', 1), ('CtsCarTestCases', 1), ('CtsRotationResolverServiceDeviceTestCases', 1), ('CtsSimRestrictedApisTestCases', 1), ('CtsPreferenceTestCases', 1), ('CtsBackgroundRestrictionsTestCases', 1), ('CtsLocationNoneTestCases', 1), ('CtsLocationCoarseTestCases', 1), ('CtsTvTestCases', 1)]"	""	""	""	""	"android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest"	"getUiAutomation"	"CtsWifiTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsServiceTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/MetaKeyKeyListenerTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/GeolocationTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/NavigationBarColorTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/StartActivityTests.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_Genres_MembersTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/StagefrightTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/DigitsKeyListenerTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/netsecpolicy/src/android/security/NetworkSecurityPolicyTestBase.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/CloseSystemDialogsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/DateKeyListenerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneNumberUtilsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/AppTaskTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/CallDiagnosticServiceTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_ArtistsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/EabControllerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebSettingsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/MutableContextWrapperTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/PnoNetworkTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/MovieTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/networksecurityconfig/networksecurityconfig-attributes/src/android/security/net/config/cts/TestAttributes.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/commontests/TimePickerTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebChromeClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewGroup_LayoutParamsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/PowerManager_WakeLockTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageReportingTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/PrivilegedLocationPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/apps/batterystatsapp/src/com/android/server/cts/device/batterystats/BatteryStatsAlarmTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/deviceadminapp/src/test/java/com/android/bedstead/deviceadminapp/DeviceAdminAppTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/pdf/src/android/graphics/pdf/cts/PdfRendererTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/EncoderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/consumerir/cts/ConsumerIrTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/IdentityApiTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLockTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/DrawableTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/SyncAdapterSettingsApp/src/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyLocationTests.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/eventlib/src/test/java/com/android/eventlib/premade/EventLibActivityTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/CountDownTimerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/MediaControllerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/acceleration/src/android/acceleration/cts/BaseAccelerationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/NativeWifiClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/suggestions/src/android/service/settings/suggestions/SuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/simphonebookprovider/src/android/provider/cts/simphonebook/SimPhonebookContract_SimRecordsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/res/cts/ResourcesTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/eventlib/src/test/java/com/android/eventlib/EventLogsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/dexmetadata/app/src/com/android/cts/dexmetadata/InstallDexMetadataTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/KeyRotationTest/ServiceTest/src/android/appsecurity/cts/keyrotationtest/test/SignatureQueryServiceInstrumentationTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/PreservedSettingsApp/src/android/cts/backup/preservedsettingsapp/PreservedSettingsRestoreTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/DataObjectUnitTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/OrientationEventListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/packageinstaller/adminpackageinstaller/src/android/packageinstaller/admin/cts/SessionCommitBroadcastTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/om/cts/OverlayManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/throttling/src/android/content/pm/cts/shortcutmanager/throttling/ShortcutManagerThrottlingTestReceiver.java', 1), ('/home/gpoor/cts-12-source/cts/tests/apppredictionservice/src/android/apppredictionservice/cts/AppPredictionServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/PasswordTransformationMethodTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/AudioFrequencyActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MidiSoloTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/BadProviderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/PermissionControllerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioRecordTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/SimpleCursorAdapterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ApplicationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/OfflineSessionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/inputmethodservice/deviceside/devicetest/src/android/inputmethodservice/cts/devicetest/InputMethodServiceDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ComponentNameTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/ArrowKeyMovementMethodTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/cts/CameraGLTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityEventTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/VectorDrawableSizeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/StartActivityAsUserTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AppConfigurationTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/RingtoneTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/includeexcludeapp/src/android/cts/backup/includeexcludeapp/IncludeExcludeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ImageSwitcherTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/TypefaceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_fine/src/android/location/cts/fine/GeofencingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/Float16ArithmeticTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/MmsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRequestTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephonyprovider/src/android/telephonyprovider/cts/SmsConversationTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ExternalStorageApp/src/com/android/cts/externalstorageapp/ReadDefaultUris.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/eventlib/src/test/java/com/android/eventlib/events/activities/ActivityPausedEventTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/RoutingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/biometrics/cts/BiometricManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/LoudnessEnhancerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/pdf/src/android/graphics/pdf/cts/PdfRendererTransformTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/contacts/CallLogTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/packageinstaller/tapjacking/src/android/packageinstaller/tapjacking/cts/TapjackingTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/AffiliationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/slice/src/android/slice/cts/SlicePermissionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/providerui/src/android/providerui/cts/MediaStoreUiTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewGroupChildDrawingOrderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/GradientDrawableTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/DocumentsContractTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentReceiver/src/com/android/cts/intent/receiver/ClearApplicationDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/DualSuspendTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AffiliationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/sharesheet/src/android/sharesheet/cts/CtsSharesheetDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentResolverWrapTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/JobScheduler/src/android/jobscheduler/cts/TriggerContentTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/util/cts/LinkifyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/format/cts/FormatterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom3/src/android/telecom/cts/SelfManagedAwareInCallServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/SignatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/DocumentClient/src/com/android/cts/documentclient/DocumentsClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSResizeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/PacProcessorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteProgramTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/OtherSoundsSettingsApp/src/android/cts/backup/othersoundssettingsapp/OtherSoundsSettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/vr/src/android/vr/cts/VrDisplayTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaSessionManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorSupportTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/DebugTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/media/app/MediaSessionTest/src/android/media/session/cts/MediaSessionManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/SuspendPackageTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceFailsTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/users/UserReferenceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/NormalApp/src/com/android/cts/normalapp/ClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/InstrumentationAppDiffCert/src/com/android/cts/instrumentationdiffcertapp/InstrumentationFailToRunTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextMoreTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_ContactsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/SearchRecentSuggestionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/StartProfilesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/SessionLifecycleTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CustomizationRestrictionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PreManagedProfileTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/GridViewTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/AbsListView_LayoutParamsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/textclassifier/src/android/view/textclassifier/cts/TextViewIntegrationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityLoggingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebHistoryItemTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SingleSensorTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/SeccompTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/RelativeLayoutTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/Intent_ShortcutIconResourceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/dumpsys/apps/storagedapp/src/com/android/server/cts/storaged/StoragedTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/IntentSenderRemovalTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/RemoteControllerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/NativeScanResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestManageOverlayPermissionIntents.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/framerateoverride/app/src/com/android/cts/graphics/framerateoverride/FrameRateOverrideTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/cts/AutoTextTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/RadioChainInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/JobScheduler/src/android/jobscheduler/cts/ExpeditedJobTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/UriGrantsServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/AliasActivityTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/packagemanager/preferredactivity/apps/testapp/src/com/android/cts/packagemanager/preferredactivity/app/PreferredActivityDeviceTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageStatsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/SimpleExpandableListAdapterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/TextClockTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/database/src/android/database/cts/DatabaseCursorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/translation/src/android/translation/cts/UiTranslationManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/RemovePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/NoReceiveSmsPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/gwp-asan/enabled/src/android/gwpasan/GwpAsanTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/IsolatedProcessTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/dpi/src/android/dpi/cts/ConfigurationScreenLayoutTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/ConscryptIntermediateVerificationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreAudioTestHelper.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/ClipDrawableTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/controls/src/android/controls/cts/CtsControlsServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/TextViewIsHorizontallyScrollableTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/media/app/MediaMetricsTest/src/android/media/metrics/cts/MediaMetricsAtomHostSideTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/common/src/android/media/cts/ConnectionStatus.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RS3DLUTTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/ShadowTests.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/RingerModeActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CarrierConfigManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyRegistryManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/hdmi/cts/HdmiControlManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/nfc/src/android/nfc/cts/NfcPreferredPaymentTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/display/src/android/display/cts/BrightnessTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/MainlineNetworkStackPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/HeaderViewListAdapterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/TimePickerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/storage/cts/StorageCrateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/TabWidgetTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CarrierSignalTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ExternalStorageApp/src/com/android/cts/externalstorageapp/CommonExternalStorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/LauncherAppsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSElementTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/AppStandbyTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AlertWindowsImportanceTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/EuiccManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewUnbufferedTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ChoreographerNativeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoCaptureVideoPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminActivationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityShortcutTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MulticastLockTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/cts/BidiFormatterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/EncoderInitializationLatencyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/refocus/RefocusTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/eventlib/src/test/java/com/android/eventlib/events/deviceadminreceivers/DeviceAdminSystemUpdatePendingEventTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/AlphaBlendTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/eventlib/src/test/java/com/android/eventlib/events/activities/ActivityStoppedEventTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/fullbackupapp/src/android/cts/backup/fullbackupapp/FullbackupTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioRecordSharedAudioTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsearch/test-apps/AppSearchHostTestHelperA/src/android/appsearch/app/a/AppSearchStorageAugmenterDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/mediadrm/src/android/mediadrm/cts/MediaPlayerDrmTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/MediaStorageApp/src/com/android/cts/mediastorageapp/MediaStorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileWidgetPrimaryUserTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/aware/cts/SingleDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/ConnectionServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/DisplayHashManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/display/src/android/display/cts/DisplayTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/BroadcastReceiverTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ReadableUriExtraToClipDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/SharedPreferencesTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsWithNoPermissionTest/src/com/android/cts/crossprofilenopermissionappstest/CrossProfileAppsWithNoPermission.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/BooleanTileServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/AnimatorInflaterTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/SplitApp/src/com/android/cts/splitapp/SplitAppTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofDetectionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_fine/src/android/location/cts/fine/LocationProviderBaseTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/embms/cts/MbmsDownloadReceiverTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/batterysaving/src/android/os/cts/powerexemption/PowerExemptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/JobSchedulerSharedUid/src/android/jobscheduler/cts/shareduidtests/SharedUidTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowContextTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/AttachedSurfaceControlSyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/database/src/android/database/cts/DatabaseUtilsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/RippleDrawableTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStorePlacementTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/util/src/android/util/cts/PrintWriterPrinterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewOutlineProviderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/SurfaceControlViewHostTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorIntegrationTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/TimePickerDialogTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentProviderClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/NoProcessOutgoingCallPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSYuvTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/BasicApiTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/DirectReportAPI30/src/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ApkVerityTestApp/src/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodServiceStrictModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/style/cts/ImageSpanTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/LogicalCameraDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/AlertDialog_BuilderCursorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerStartShortcutTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/netlegacy22.permission/src/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/cts/StaticLayoutLineBreakingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/LayerDrawableTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DeviceIdentifiersTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/VisibilitySetterActionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/LinkMovementMethodTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesRenouncePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/AndroidKeyStoreTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/quickaccesswallet/src/android/quickaccesswallet/cts/WalletCardTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/Contacts_PeopleTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/TextViewFontWeightTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/TimeChangeTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/StorageApp/src/com/android/cts/storageapp/StorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/edi/app/src/android/edi/cts/app/ClasspathDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/controls/src/android/controls/cts/CtsControlTemplateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/TableLayoutTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoKeyPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/PresubmitSetupValidation.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/MotionEventTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/eventlib/src/test/java/com/android/eventlib/events/deviceadminreceivers/DeviceAdminDisabledEventTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppWithData/src/com/android/cts/appwithdata/CreatePrivateDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/CallRedirectionServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/syncmanager/src/android/content/syncmanager/cts/CtsSyncManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/NanoAppBundleTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/silentupdate/testapp/src/com/android/tests/silentupdate/SilentUpdateTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UseProcessSuccess/src/com/android/cts/useprocess/AccessNetworkTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_fine/src/android/location/cts/fine/SettingInjectorServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/classloaderfactory/src/android/app/classloaderfactory/cts/AppComponentFactoryTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/SearchEventTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/TouchExplorerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaExtractorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioSystemUsageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/DisplayRefreshRateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/storage/cts/StorageManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/ExtendedInCallServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BasicAdapterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/BlockedNumberContractTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/RemoteViewsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/SettingsPanelTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/AlertDialog_BuilderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarAppFocusManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/packagemanager/installedloadingprogess/deviceside/src/com/android/tests/loadingprogress/device/LoadingProgressTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/IntentServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/includeexcludeapp/src/android/cts/backup/includeexcludeapp/DataExtractionRulesApplicabilityTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/rro/OverlayApp/src/com/android/cts/overlay/app/OverlayableTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/ThemedDrawableTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestSystemIntents.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/ShellPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/calllog/app/src/android/provider/cts/contacts/testapp/CallLogDirectBootTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/SimpleCursorTreeAdapterTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/ManagementTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/ProvisioningTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/LocationOnScreenTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/CursorAdapterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/ViewFadingEdgeTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HeadlessSystemUserTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/rotationresolverservice/src/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/translation/src/android/translation/cts/TranslationManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony4/src/android/telephony4/cts/SimRestrictedApisTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/eventlib/src/test/java/com/android/eventlib/events/activities/ActivityCreatedEventTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/FrameLayout_LayoutParamsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSBlendTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/ParcelableExceptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/preference/src/android/preference/cts/PreferenceDataStoreTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityGestureDetectorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/background/src/android/app/cts/backgroundrestrictions/BroadcastsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/quickaccesswallet/src/android/quickaccesswallet/cts/GetWalletCardsResponseTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaProjectionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/ModifyInstallerPackageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MultiDisplayActivityLaunchTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/UiModeManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/CompoundButtonTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/CrossProcessExceptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AuthBoundKeyApp/src/com/android/cts/authboundkey/AuthBoundKeyAppTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreNotificationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/FileIntegrityManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityManagerApi29Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/AlphaAnimationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/DatePickerTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/MotionIndicatorView.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CellInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/TaskDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DeviceIdentifiersTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/wm/cts/ContextGetDisplayTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InlineSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/CVE_2021_0309.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/TouchDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/MultiTapKeyListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/database/src/android/database/cts/SQLiteCantOpenDatabaseExceptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/FeatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppAccessData/src/com/android/cts/appaccessdata/AccessPrivateDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony2/src/android/telephony2/cts/PhoneNumberTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MultiDisplaySystemDecorationTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/VisualVoicemailServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/people/cts/ConversationStatusTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/AccountManagement/src/com/android/cts/devicepolicy/accountmanagement/AccountUtilsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/format/cts/TimeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_fine/src/android/location/cts/fine/GeocoderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSConvolveTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorParameterRangeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom2/src/android/telecom/cts/DefaultDialerOperationsNoPermissionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/SimCallManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_none/src/android/location/cts/none/NoLocationPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/seccomp/app/src/android/seccomp/cts/app/SeccompDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/PhoneAccountOperationsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/testapp/src/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/dropdown/LoginActivityTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileSharingTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/packagemanager/extractnativelibs/apps/app_no_extract/src/com/android/cts/extractnativelibs/app/noextract/ExtractNativeLibsFalseDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/PendingIntentTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_coarse/src/android/location/cts/coarse/LocationManagerCoarseTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/LinearLayoutTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerShellCommandTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/EdgeEffectTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteStatementTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/PermissionManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/device-info/src/com/android/compatibility/common/deviceinfo/DeviceInfo.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaSyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/tv/src/android/media/tv/tuner/cts/TunerDvrTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ApplicationVisibilityCrossUserApp/src/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/VisualizerEffectTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/display/src/android/display/cts/VirtualDisplayTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewGroup_MarginLayoutParamsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteQueryBuilderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/PaintTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/RadioGroup_LayoutParamsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appbinding/app/src/com/android/cts/appbinding/app/MyEnabler.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileWidgetTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/packages/PackageReferenceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/DefaultDialerOperationsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerLauncherCallbackTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/database/src/android/database/cts/AbstractCursorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony2/src/android/telephony2/cts/TelephonyManagerNoPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/eventlib/src/test/java/com/android/eventlib/premade/EventLibDeviceAdminReceiverTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/BackgroundPermissionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java', 1)]"	"[('(1,android.content.Context,/android/content/cts/MutableContextWrapperTest.java)', 1), ('(1,android.content.Context,/android/net/wifi/nl80211/cts/PnoNetworkTest.java)', 1), ('(1,android.content.Context,/android/graphics/cts/MovieTest.java)', 1), ('(1,getInstance(),/android/security/net/config/cts/TestAttributes.java)', 1), ('(1,getInstance(),/android/autofillservice/cts/commontests/TimePickerTestCase.java)', 1), ('(1,getInstance(),/android/webkit/cts/WebChromeClientTest.java)', 1), ('(1,android.content.Context,/android/view/cts/ViewGroup_LayoutParamsTest.java)', 1), ('(1,getInstance(),/android/security/NetworkSecurityPolicyTestBase.java)', 1), ('(1,android.content.Context,/android/security/NetworkSecurityPolicyTestBase.java)', 1), ('(1,android.content.Context,/android/os/cts/PowerManager_WakeLockTest.java)', 1), ('(1,android.content.Context,/android/app/usage/cts/UsageReportingTest.java)', 1), ('(1,android.content.Context,/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java)', 1), ('(1,android.content.Context,/android/location/cts/privileged/PrivilegedLocationPermissionTest.java)', 1), ('(1,android.content.Context,/com/android/server/cts/device/batterystats/BatteryStatsAlarmTest.java)', 1), ('(1,android.content.Context,/test/java/com/android/bedstead/deviceadminapp/DeviceAdminAppTest.java)', 1), ('(1,android.content.Context,/android/graphics/pdf/cts/PdfRendererTest.java)', 1), ('(1,android.content.Context,/android/media/cts/EncoderTest.java)', 1), ('(1,getInstance(),/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java)', 1), ('(1,android.content.Context,/android/hardware/consumerir/cts/ConsumerIrTest.java)', 1), ('(1,android.content.Context,/android/security/identity/cts/IdentityApiTest.java)', 1), ('(1,android.content.Context,/android/net/wifi/cts/WifiLockTest.java)', 1), ('(1,android.content.Context,/android/graphics/drawable/cts/DrawableTest.java)', 1), ('(1,android.content.Context,/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java)', 1), ('(1,android.content.Context,/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java)', 1), ('(1,android.content.Context,/android/content/pm/cts/PackageManagerTest.java)', 1), ('(1,android.content.Context,/android/telephony/cts/TelephonyLocationTests.java)', 1), ('(1,android.content.Context,/test/java/com/android/eventlib/premade/EventLibActivityTest.java)', 1), ('(1,android.content.Context,/android/os/cts/CountDownTimerTest.java)', 1), ('(1,android.content.Context,/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/MediaControllerTest.java)', 1), ('(1,android.content.Context,/android/acceleration/cts/BaseAccelerationTest.java)', 1), ('(1,android.content.Context,/android/net/wifi/nl80211/cts/NativeWifiClientTest.java)', 1), ('(1,android.content.Context,/android/service/settings/suggestions/SuggestionTest.java)', 1), ('(1,android.content.Context,/android/provider/cts/simphonebook/SimPhonebookContract_SimRecordsTest.java)', 1), ('(1,android.content.Context,/android/content/res/cts/ResourcesTest.java)', 1), ('(1,android.content.Context,/test/java/com/android/eventlib/EventLogsTest.java)', 1), ('(1,android.content.Context,/com/android/cts/dexmetadata/InstallDexMetadataTest.java)', 1), ('(1,android.content.Context,/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java)', 1), ('(1,android.content.Context,/android/appsecurity/cts/keyrotationtest/test/SignatureQueryServiceInstrumentationTest.java)', 1), ('(1,android.content.Context,/android/cts/backup/preservedsettingsapp/PreservedSettingsRestoreTest.java)', 1), ('(1,android.content.Context,/android/telecom/cts/DataObjectUnitTests.java)', 1), ('(1,android.content.Context,/android/view/cts/OrientationEventListenerTest.java)', 1), ('(1,android.content.Context,/android/media/cts/AudioManagerTest.java)', 1), ('(1,android.content.Context,/android/packageinstaller/admin/cts/SessionCommitBroadcastTest.java)', 1), ('(1,android.content.Context,/android/view/accessibility/cts/AccessibilityManagerTest.java)', 1), ('(1,android.content.Context,/android/content/om/cts/OverlayManagerTest.java)', 1), ('(1,android.content.Context,/android/content/pm/cts/shortcutmanager/throttling/ShortcutManagerThrottlingTestReceiver.java)', 1), ('(1,android.content.Context,/android/apppredictionservice/cts/AppPredictionServiceTest.java)', 1), ('(3,getInstance(),/android/text/method/cts/PasswordTransformationMethodTest.java)', 1), ('(1,android.content.Context,/com/android/cts/verifier/audio/AudioFrequencyActivity.java)', 1), ('(1,android.content.Context,/android/media/cts/MidiSoloTest.java)', 1), ('(1,android.content.Context,/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java)', 1), ('(1,android.content.Context,/android/app/cts/BadProviderTest.java)', 1), ('(1,android.content.Context,/android/permission/cts/PermissionControllerTest.java)', 1), ('(1,android.content.Context,/android/media/cts/AudioRecordTest.java)', 1), ('(1,android.content.Context,/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java)', 1), ('(1,android.content.Context,/android/app/cts/ActivityManagerProcessStateTest.java)', 1), ('(1,android.content.Context,/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(4,getInstance(),/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java)', 1), ('(1,android.content.Context,/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java)', 1), ('(1,getInstance(),/android/webkit/cts/WebViewTest.java)', 1), ('(2,android.content.Context,/android/webkit/cts/WebViewTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/SimpleCursorAdapterTest.java)', 1), ('(1,android.content.Context,/android/app/cts/ApplicationTest.java)', 1), ('(1,android.content.Context,/android/hardware/camera2/cts/OfflineSessionTest.java)', 1), ('(1,android.content.Context,/android/hardware/cts/SensorTest.java)', 1), ('(1,android.content.Context,/android/inputmethodservice/cts/devicetest/InputMethodServiceDeviceTest.java)', 1), ('(1,android.content.Context,/android/content/cts/ComponentNameTest.java)', 1), ('(3,getInstance(),/android/text/method/cts/ArrowKeyMovementMethodTest.java)', 1), ('(1,android.content.Context,/android/hardware/cts/CameraGLTest.java)', 1), ('(1,android.content.Context,/android/view/accessibility/cts/AccessibilityEventTest.java)', 1), ('(1,android.content.Context,/android/graphics/drawable/cts/VectorDrawableSizeTest.java)', 1), ('(1,android.content.Context,/android/server/wm/WindowTest.java)', 1), ('(1,android.content.Context,/android/server/wm/StartActivityAsUserTests.java)', 1), ('(1,android.content.Context,/android/server/wm/AppConfigurationTests.java)', 1), ('(1,android.content.Context,/android/media/cts/RingtoneTest.java)', 1), ('(1,android.content.Context,/android/cts/backup/includeexcludeapp/IncludeExcludeTest.java)', 1), ('(14,getInstance(),/android/text/method/cts/MetaKeyKeyListenerTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/ImageSwitcherTest.java)', 1), ('(1,android.content.Context,/android/graphics/cts/TypefaceTest.java)', 1), ('(1,getInstance(),/android/app/cts/CloseSystemDialogsTest.java)', 1), ('(1,android.content.Context,/android/app/cts/CloseSystemDialogsTest.java)', 1), ('(1,android.content.Context,/android/location/cts/fine/GeofencingTest.java)', 1), ('(1,android.content.Context,/android/renderscript/cts/Float16ArithmeticTest.java)', 1), ('(1,android.content.Context,/android/telephony/cts/MmsTest.java)', 1), ('(1,android.content.Context,/android/location/cts/privileged/GnssMeasurementRequestTest.java)', 1), ('(1,android.content.Context,/android/telephonyprovider/cts/SmsConversationTest.java)', 1), ('(1,android.content.Context,/com/android/cts/externalstorageapp/ReadDefaultUris.java)', 1), ('(1,android.content.Context,/test/java/com/android/eventlib/events/activities/ActivityPausedEventTest.java)', 1), ('(1,android.content.Context,/android/media/cts/MediaPlayerTest.java)', 1), ('(1,android.content.Context,/android/media/cts/RoutingTest.java)', 1), ('(1,android.content.Context,/android/content/cts/AvailableIntentsTest.java)', 1), ('(1,android.content.Context,/android/hardware/biometrics/cts/BiometricManagerTest.java)', 1), ('(1,android.content.Context,/android/media/cts/LoudnessEnhancerTest.java)', 1), ('(1,android.content.Context,/android/graphics/pdf/cts/PdfRendererTransformTest.java)', 1), ('(1,android.content.Context,/android/provider/cts/contacts/CallLogTest.java)', 1), ('(1,android.content.Context,/android/packageinstaller/tapjacking/cts/TapjackingTest.java)', 1), ('(1,android.content.Context,/com/android/cts/comp/provisioning/AffiliationTest.java)', 1), ('(1,android.content.Context,/android/slice/cts/SlicePermissionsTest.java)', 1), ('(1,android.content.Context,/android/providerui/cts/MediaStoreUiTest.java)', 1), ('(1,android.content.Context,/android/view/cts/ViewGroupChildDrawingOrderTest.java)', 1), ('(1,android.content.Context,/android/graphics/drawable/cts/GradientDrawableTest.java)', 1), ('(1,android.content.Context,/android/provider/cts/DocumentsContractTest.java)', 1), ('(1,android.content.Context,/com/android/cts/intent/receiver/ClearApplicationDataTest.java)', 1), ('(1,android.content.Context,/android/suspendapps/cts/DualSuspendTests.java)', 1), ('(1,android.content.Context,/com/android/cts/deviceandprofileowner/AffiliationTest.java)', 1), ('(1,android.content.Context,/android/sharesheet/cts/CtsSharesheetDeviceTest.java)', 1), ('(1,android.content.Context,/android/content/cts/ContentResolverWrapTest.java)', 1), ('(3,android.content.Context,/android/server/wm/StartActivityTests.java)', 1), ('(1,android.content.Context,/android/jobscheduler/cts/TriggerContentTest.java)', 1), ('(1,android.content.Context,/android/text/util/cts/LinkifyTest.java)', 1), ('(1,android.content.Context,/android/text/format/cts/FormatterTest.java)', 1), ('(1,android.content.Context,/android/telecom/cts/SelfManagedAwareInCallServiceTest.java)', 1), ('(1,android.content.Context,/android/keystore/cts/SignatureTest.java)', 1), ('(1,android.content.Context,/com/android/cts/documentclient/DocumentsClientTest.java)', 1), ('(1,android.content.Context,/android/cts/rscpp/RSResizeTest.java)', 1), ('(1,android.content.Context,/android/webkit/cts/PacProcessorTest.java)', 1), ('(1,android.content.Context,/android/database/sqlite/cts/SQLiteProgramTest.java)', 1), ('(4,getInstance(),/android/text/method/cts/DateKeyListenerTest.java)', 1), ('(3,getInstance(),/android/provider/cts/media/MediaStore_Audio_Genres_MembersTest.java)', 1), ('(1,android.content.Context,/android/provider/cts/media/MediaStore_Audio_Genres_MembersTest.java)', 1), ('(1,android.content.Context,/android/cts/backup/othersoundssettingsapp/OtherSoundsSettingsTest.java)', 1), ('(1,android.content.Context,/android/vr/cts/VrDisplayTest.java)', 1), ('(1,android.content.Context,/android/media/cts/MediaSessionManagerTest.java)', 1), ('(1,android.content.Context,/android/hardware/cts/SensorSupportTest.java)', 1), ('(1,android.content.Context,/android/os/cts/DebugTest.java)', 1), ('(1,getInstance(),/android/content/cts/ClipDescriptionTest.java)', 1), ('(1,android.content.Context,/android/content/cts/ClipDescriptionTest.java)', 1), ('(1,android.content.Context,/android/media/session/cts/MediaSessionManagerTest.java)', 1), ('(1,android.content.Context,/com/android/cts/intent/sender/SuspendPackageTest.java)', 1), ('(1,android.content.Context,/com/android/cts/comp/BindDeviceAdminServiceFailsTest.java)', 1), ('(1,android.content.Context,/test/java/com/android/bedstead/nene/users/UserReferenceTest.java)', 1), ('(1,android.content.Context,/com/android/cts/normalapp/ClientTest.java)', 1), ('(1,android.content.Context,/com/android/cts/instrumentationdiffcertapp/InstrumentationFailToRunTest.java)', 1), ('(2,android.content.Context,/android/content/cts/ContextMoreTest.java)', 1), ('(1,android.content.Context,/android/provider/cts/contacts/ContactsContract_ContactsTest.java)', 1), ('(1,android.content.Context,/android/provider/cts/SearchRecentSuggestionsTest.java)', 1), ('(1,android.content.Context,/android/devicepolicy/cts/StartProfilesTest.java)', 1), ('(1,android.content.Context,/android/autofillservice/cts/SessionLifecycleTest.java)', 1), ('(1,android.content.Context,/com/android/cts/deviceandprofileowner/CustomizationRestrictionsTest.java)', 1), ('(1,android.content.Context,/com/android/cts/managedprofile/PreManagedProfileTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/GridViewTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/AbsListView_LayoutParamsTest.java)', 1), ('(1,getInstance(),/android/view/textclassifier/cts/TextViewIntegrationTest.java)', 1), ('(1,android.content.Context,/android/accessibilityservice/cts/AccessibilityLoggingTest.java)', 1), ('(1,android.content.Context,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(1,getInstance(),/android/webkit/cts/WebHistoryItemTest.java)', 1), ('(1,android.content.Context,/android/hardware/cts/SingleSensorTests.java)', 1), ('(1,android.content.Context,/android/os/cts/SeccompTest.java)', 1), ('(1,android.content.Context,/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/RelativeLayoutTest.java)', 1), ('(1,android.content.Context,/android/content/cts/Intent_ShortcutIconResourceTest.java)', 1), ('(1,android.content.Context,/com/android/server/cts/storaged/StoragedTest.java)', 1), ('(1,android.content.Context,/android/security/cts/IntentSenderRemovalTest.java)', 1), ('(1,android.content.Context,/android/media/cts/RemoteControllerTest.java)', 1), ('(1,android.content.Context,/android/net/wifi/nl80211/cts/NativeScanResultTest.java)', 1), ('(19,getInstance(),/android/telephony/ims/cts/ImsServiceTest.java)', 1), ('(1,android.content.Context,/android/telephony/ims/cts/ImsServiceTest.java)', 1), ('(1,android.content.Context,/android/systemintents/cts/TestManageOverlayPermissionIntents.java)', 1), ('(1,getInstance(),/com/android/cts/graphics/framerateoverride/FrameRateOverrideTestActivity.java)', 1), ('(1,android.content.Context,/android/permission/cts/OneTimePermissionTest.java)', 1), ('(1,android.content.Context,/android/text/cts/AutoTextTest.java)', 1), ('(1,android.content.Context,/android/net/wifi/nl80211/cts/RadioChainInfoTest.java)', 1), ('(1,android.content.Context,/android/jobscheduler/cts/ExpeditedJobTest.java)', 1), ('(1,android.content.Context,/com/android/cts/usespermissiondiffcertapp/UriGrantsServiceTest.java)', 1), ('(1,android.content.Context,/android/app/cts/AliasActivityTest.java)', 1), ('(1,android.content.Context,/com/android/cts/packagemanager/preferredactivity/app/PreferredActivityDeviceTests.java)', 1), ('(1,android.content.Context,/android/app/usage/cts/UsageStatsTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/SimpleExpandableListAdapterTest.java)', 1), ('(1,getInstance(),/android/widget/cts/TextClockTest.java)', 1), ('(1,android.content.Context,/android/database/cts/DatabaseCursorTest.java)', 1), ('(3,android.content.Context,/android/translation/cts/UiTranslationManagerTest.java)', 1), ('(1,android.content.Context,/android/permission/cts/RemovePermissionTest.java)', 1), ('(1,android.content.Context,/android/permission2/cts/NoReceiveSmsPermissionTest.java)', 1), ('(1,android.content.Context,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(1,android.content.Context,/android/gwpasan/GwpAsanTestActivity.java)', 1), ('(1,android.content.Context,/android/security/cts/IsolatedProcessTest.java)', 1), ('(1,android.content.Context,/android/dpi/cts/ConfigurationScreenLayoutTest.java)', 1), ('(1,android.content.Context,/android/security/cts/ConscryptIntermediateVerificationTest.java)', 1), ('(6,getInstance(),/android/provider/cts/media/MediaStoreAudioTestHelper.java)', 1), ('(1,android.content.Context,/android/graphics/drawable/cts/ClipDrawableTest.java)', 1), ('(1,android.content.Context,/android/controls/cts/CtsControlsServiceTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/TextViewIsHorizontallyScrollableTest.java)', 1), ('(1,android.content.Context,/android/media/metrics/cts/MediaMetricsAtomHostSideTests.java)', 1), ('(1,android.content.Context,/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java)', 1), ('(1,android.content.Context,/android/media/cts/ConnectionStatus.java)', 1), ('(1,android.content.Context,/android/cts/rscpp/RS3DLUTTest.java)', 1), ('(1,android.content.Context,/android/uirendering/cts/testclasses/ShadowTests.java)', 1), ('(1,android.content.Context,/com/android/cts/verifier/audio/RingerModeActivity.java)', 1), ('(1,android.content.Context,/android/telephony/cts/CarrierConfigManagerTest.java)', 1), ('(1,android.content.Context,/android/telephony/cts/TelephonyRegistryManagerTest.java)', 1), ('(1,android.content.Context,/android/hardware/hdmi/cts/HdmiControlManagerTest.java)', 1), ('(1,android.content.Context,/android/nfc/cts/NfcPreferredPaymentTest.java)', 1), ('(1,android.content.Context,/android/view/cts/ViewConfigurationTest.java)', 1), ('(1,android.content.Context,/android/display/cts/BrightnessTest.java)', 1), ('(1,android.content.Context,/android/permission/cts/MainlineNetworkStackPermissionTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/HeaderViewListAdapterTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/TimePickerTest.java)', 1), ('(1,android.content.Context,/android/os/storage/cts/StorageCrateTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/TabWidgetTest.java)', 1), ('(1,android.content.Context,/android/telephony/cts/CarrierSignalTest.java)', 1), ('(1,android.content.Context,/com/android/cts/externalstorageapp/CommonExternalStorageTest.java)', 1), ('(1,android.content.Context,/android/content/pm/cts/LauncherAppsTest.java)', 1), ('(1,android.content.Context,/android/cts/rscpp/RSElementTest.java)', 1), ('(1,android.content.Context,/android/alarmmanager/cts/AppStandbyTests.java)', 1), ('(4,android.content.Context,/android/server/wm/AlertWindowsImportanceTests.java)', 1), ('(1,android.content.Context,/android/telephony/euicc/cts/EuiccManagerTest.java)', 1), ('(1,getInstance(),/android/view/cts/ViewUnbufferedTest.java)', 1), ('(1,android.content.Context,/android/view/cts/ChoreographerNativeTest.java)', 1), ('(1,android.content.Context,/android/permission/cts/NoCaptureVideoPermissionTest.java)', 1), ('(1,android.content.Context,/android/admin/cts/DeviceAdminActivationTest.java)', 1), ('(1,android.content.Context,/android/view/accessibility/cts/AccessibilityShortcutTest.java)', 1), ('(1,android.content.Context,/android/net/wifi/cts/MulticastLockTest.java)', 1), ('(1,getInstance(),/android/text/cts/BidiFormatterTest.java)', 1), ('(1,android.content.Context,/android/mediapc/cts/EncoderInitializationLatencyTest.java)', 1), ('(1,android.content.Context,/android/renderscript/cts/refocus/RefocusTest.java)', 1), ('(1,android.content.Context,/test/java/com/android/eventlib/events/deviceadminreceivers/DeviceAdminSystemUpdatePendingEventTest.java)', 1), ('(1,android.content.Context,/android/uirendering/cts/testclasses/AlphaBlendTest.java)', 1), ('(1,android.content.Context,/test/java/com/android/eventlib/events/activities/ActivityStoppedEventTest.java)', 1), ('(1,android.content.Context,/android/cts/backup/fullbackupapp/FullbackupTest.java)', 1), ('(2,getInstance(),/android/security/cts/StagefrightTest.java)', 1), ('(1,android.content.Context,/android/security/cts/StagefrightTest.java)', 1), ('(1,android.content.Context,/android/media/cts/AudioRecordSharedAudioTest.java)', 1), ('(8,getInstance(),/android/telephony/cts/PhoneNumberUtilsTest.java)', 1), ('(1,android.content.Context,/android/telephony/cts/PhoneNumberUtilsTest.java)', 1), ('(1,android.content.Context,/android/appsearch/app/a/AppSearchStorageAugmenterDeviceTest.java)', 1), ('(1,android.content.Context,/android/mediadrm/cts/MediaPlayerDrmTest.java)', 1), ('(1,android.content.Context,/com/android/cts/mediastorageapp/MediaStorageTest.java)', 1), ('(1,android.content.Context,/com/android/cts/managedprofile/CrossProfileWidgetPrimaryUserTest.java)', 1), ('(1,android.content.Context,/android/net/wifi/aware/cts/SingleDeviceTest.java)', 1), ('(1,android.content.Context,/android/telecom/cts/ConnectionServiceTest.java)', 1), ('(1,android.content.Context,/android/server/wm/DisplayHashManagerTest.java)', 1), ('(1,android.content.Context,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(1,getInstance(),/android/app/cts/AppTaskTests.java)', 1), ('(2,android.content.Context,/android/app/cts/AppTaskTests.java)', 1), ('(1,android.content.Context,/android/display/cts/DisplayTest.java)', 1), ('(1,android.content.Context,/android/content/cts/BroadcastReceiverTest.java)', 1), ('(1,android.content.Context,/android/content/cts/ReadableUriExtraToClipDataTest.java)', 1), ('(1,android.content.Context,/android/content/cts/SharedPreferencesTest.java)', 1), ('(1,android.content.Context,/com/android/cts/crossprofilenopermissionappstest/CrossProfileAppsWithNoPermission.java)', 1), ('(1,getInstance(),/android/app/cts/BooleanTileServiceTest.java)', 1), ('(1,android.content.Context,/android/view/animation/cts/AnimatorInflaterTest.java)', 1), ('(1,android.content.Context,/com/android/cts/splitapp/SplitAppTest.java)', 1), ('(1,android.content.Context,/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofDetectionTest.java)', 1), ('(1,android.content.Context,/android/location/cts/fine/LocationProviderBaseTest.java)', 1), ('(1,android.content.Context,/android/telephony/embms/cts/MbmsDownloadReceiverTest.java)', 1), ('(1,android.content.Context,/android/os/cts/powerexemption/PowerExemptionTest.java)', 1), ('(1,android.content.Context,/android/jobscheduler/cts/shareduidtests/SharedUidTest.java)', 1), ('(1,android.content.Context,/android/server/wm/WindowContextTests.java)', 1), ('(1,android.content.Context,/android/view/cts/AttachedSurfaceControlSyncTest.java)', 1), ('(1,android.content.Context,/android/database/cts/DatabaseUtilsTest.java)', 1), ('(1,android.content.Context,/android/graphics/drawable/cts/RippleDrawableTest.java)', 1), ('(1,android.content.Context,/android/provider/cts/media/MediaStorePlacementTest.java)', 1), ('(1,android.content.Context,/android/util/cts/PrintWriterPrinterTest.java)', 1), ('(1,android.content.Context,/android/view/cts/ViewOutlineProviderTest.java)', 1), ('(1,android.content.Context,/android/server/wm/SurfaceControlViewHostTests.java)', 1), ('(1,android.content.Context,/android/hardware/cts/SensorIntegrationTests.java)', 1), ('(1,android.content.Context,/android/app/cts/TimePickerDialogTest.java)', 1), ('(2,android.content.Context,/android/content/cts/ContentProviderClientTest.java)', 1), ('(1,android.content.Context,/android/permission2/cts/NoProcessOutgoingCallPermissionTest.java)', 1), ('(1,android.content.Context,/android/cts/rscpp/RSYuvTest.java)', 1), ('(1,android.content.Context,/android/alarmmanager/cts/BasicApiTests.java)', 1), ('(1,android.content.Context,/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java)', 1), ('(6,getInstance(),/android/view/inputmethod/cts/NavigationBarColorTest.java)', 1), ('(1,android.content.Context,/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java)', 1), ('(1,android.content.Context,/android/view/inputmethod/cts/InputMethodServiceStrictModeTest.java)', 1), ('(1,android.content.Context,/android/text/style/cts/ImageSpanTest.java)', 1), ('(1,android.content.Context,/android/hardware/camera2/cts/LogicalCameraDeviceTest.java)', 1), ('(1,android.content.Context,/android/app/cts/AlertDialog_BuilderCursorTest.java)', 1), ('(1,android.content.Context,/android/content/pm/cts/shortcutmanager/ShortcutManagerStartShortcutTest.java)', 1), ('(1,android.content.Context,/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java)', 1), ('(4,getInstance(),/android/text/method/cts/DigitsKeyListenerTest.java)', 1), ('(1,android.content.Context,/android/text/cts/StaticLayoutLineBreakingTest.java)', 1), ('(1,android.content.Context,/android/graphics/drawable/cts/LayerDrawableTest.java)', 1), ('(1,android.content.Context,/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java)', 1), ('(1,android.content.Context,/com/android/cts/deviceandprofileowner/DeviceIdentifiersTest.java)', 1), ('(1,android.content.Context,/android/autofillservice/cts/unittests/VisibilitySetterActionTest.java)', 1), ('(3,getInstance(),/android/text/method/cts/LinkMovementMethodTest.java)', 1), ('(1,android.content.Context,/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java)', 1), ('(2,android.content.Context,/android/permission/cts/NearbyDevicesRenouncePermissionTest.java)', 1), ('(1,getInstance(),/android/telecom/cts/CallDiagnosticServiceTest.java)', 1), ('(1,android.content.Context,/android/telecom/cts/CallDiagnosticServiceTest.java)', 1), ('(1,getInstance(),/android/keystore/cts/AndroidKeyStoreTest.java)', 1), ('(1,android.content.Context,/android/quickaccesswallet/cts/WalletCardTest.java)', 1), ('(1,android.content.Context,/android/media/cts/SoundPoolTest.java)', 1), ('(1,android.content.Context,/android/provider/cts/contacts/Contacts_PeopleTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/TextViewFontWeightTest.java)', 1), ('(1,android.content.Context,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(1,android.content.Context,/android/alarmmanager/cts/TimeChangeTests.java)', 1), ('(1,android.content.Context,/com/android/cts/storageapp/StorageTest.java)', 1), ('(1,android.content.Context,/android/edi/cts/app/ClasspathDeviceTest.java)', 1), ('(1,android.content.Context,/android/controls/cts/CtsControlTemplateTest.java)', 1), ('(1,getInstance(),/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java)', 1), ('(1,android.content.Context,/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/TableLayoutTest.java)', 1), ('(1,android.content.Context,/android/permission/cts/NoKeyPermissionTest.java)', 1), ('(1,getInstance(),/com/android/compatibility/common/tradefed/presubmit/PresubmitSetupValidation.java)', 1), ('(1,android.content.Context,/android/security/cts/MotionEventTest.java)', 1), ('(1,android.content.Context,/test/java/com/android/eventlib/events/deviceadminreceivers/DeviceAdminDisabledEventTest.java)', 1), ('(1,android.content.Context,/android/content/cts/IntentTest.java)', 1), ('(1,android.content.Context,/com/android/cts/appwithdata/CreatePrivateDataTest.java)', 1), ('(1,android.content.Context,/android/telecom/cts/CallRedirectionServiceTest.java)', 1), ('(1,android.content.Context,/android/content/syncmanager/cts/CtsSyncManagerTest.java)', 1), ('(2,android.content.Context,/android/security/cts/NanoAppBundleTest.java)', 1), ('(2,android.content.Context,/com/android/tests/silentupdate/SilentUpdateTests.java)', 1), ('(1,android.content.Context,/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java)', 1), ('(1,android.content.Context,/com/android/cts/useprocess/AccessNetworkTest.java)', 1), ('(1,android.content.Context,/com/android/cts/deviceowner/CreateAndManageUserTest.java)', 1), ('(1,android.content.Context,/android/location/cts/fine/SettingInjectorServiceTest.java)', 1), ('(1,android.content.Context,/android/app/classloaderfactory/cts/AppComponentFactoryTest.java)', 1), ('(1,android.content.Context,/android/view/cts/SearchEventTest.java)', 1), ('(1,android.content.Context,/android/accessibilityservice/cts/TouchExplorerTest.java)', 1), ('(1,android.content.Context,/android/media/cts/MediaExtractorTest.java)', 1), ('(1,android.content.Context,/android/media/cts/AudioSystemUsageTest.java)', 1), ('(1,android.content.Context,/android/view/cts/DisplayRefreshRateTest.java)', 1), ('(1,android.content.Context,/android/os/storage/cts/StorageManagerTest.java)', 1), ('(1,android.content.Context,/android/telecom/cts/ExtendedInCallServiceTest.java)', 1), ('(1,android.content.Context,/android/bluetooth/cts/BasicAdapterTest.java)', 1), ('(1,android.content.Context,/android/provider/cts/BlockedNumberContractTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/RemoteViewsTest.java)', 1), ('(1,android.content.Context,/android/provider/cts/SettingsPanelTest.java)', 1), ('(1,android.content.Context,/android/app/cts/AlertDialog_BuilderTest.java)', 1), ('(1,android.content.Context,/android/car/cts/CarAppFocusManagerTest.java)', 1), ('(1,android.content.Context,/com/android/tests/loadingprogress/device/LoadingProgressTest.java)', 1), ('(24,getInstance(),/android/webkit/cts/GeolocationTest.java)', 1), ('(1,android.content.Context,/android/webkit/cts/GeolocationTest.java)', 1), ('(1,android.content.Context,/android/app/cts/IntentServiceTest.java)', 1), ('(1,getInstance(),/android/provider/cts/media/MediaStore_Audio_ArtistsTest.java)', 1), ('(1,android.content.Context,/android/provider/cts/media/MediaStore_Audio_ArtistsTest.java)', 1), ('(1,android.content.Context,/android/cts/backup/includeexcludeapp/DataExtractionRulesApplicabilityTest.java)', 1), ('(1,android.content.Context,/com/android/cts/overlay/app/OverlayableTest.java)', 1), ('(1,android.content.Context,/android/graphics/drawable/cts/ThemedDrawableTest.java)', 1), ('(1,android.content.Context,/android/systemintents/cts/TestSystemIntents.java)', 1), ('(1,android.content.Context,/android/permission/cts/ShellPermissionTest.java)', 1), ('(1,android.content.Context,/android/provider/cts/contacts/testapp/CallLogDirectBootTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/SimpleCursorTreeAdapterTest.java)', 1), ('(1,android.content.Context,/com/android/cts/profileowner/ManagementTest.java)', 1), ('(1,android.content.Context,/android/security/identity/cts/ProvisioningTest.java)', 1), ('(1,android.content.Context,/android/server/wm/LocationOnScreenTests.java)', 1), ('(1,android.content.Context,/android/app/cts/ServiceTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/CursorAdapterTest.java)', 1), ('(1,android.content.Context,/android/uirendering/cts/testclasses/ViewFadingEdgeTests.java)', 1), ('(1,android.content.Context,/com/android/cts/deviceowner/HeadlessSystemUserTest.java)', 1), ('(1,android.content.Context,/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java)', 1), ('(2,android.content.Context,/android/translation/cts/TranslationManagerTest.java)', 1), ('(1,android.content.Context,/android/telephony4/cts/SimRestrictedApisTest.java)', 1), ('(1,android.content.Context,/test/java/com/android/eventlib/events/activities/ActivityCreatedEventTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/FrameLayout_LayoutParamsTest.java)', 1), ('(1,android.content.Context,/android/media/cts/AudioTrackTest.java)', 1), ('(1,android.content.Context,/android/cts/rscpp/RSBlendTest.java)', 1), ('(1,android.content.Context,/android/security/cts/ParcelableExceptionTest.java)', 1), ('(1,android.content.Context,/android/hardware/cts/SensorDirectReportTest.java)', 1), ('(1,android.content.Context,/android/preference/cts/PreferenceDataStoreTest.java)', 1), ('(1,android.content.Context,/android/accessibilityservice/cts/AccessibilityGestureDetectorTest.java)', 1), ('(1,android.content.Context,/android/app/cts/backgroundrestrictions/BroadcastsTest.java)', 1), ('(1,android.content.Context,/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java)', 1), ('(1,android.content.Context,/android/quickaccesswallet/cts/GetWalletCardsResponseTest.java)', 1), ('(1,android.content.Context,/android/media/cts/MediaProjectionTest.java)', 1), ('(1,android.content.Context,/com/android/cts/usespermissiondiffcertapp/ModifyInstallerPackageTest.java)', 1), ('(1,android.content.Context,/android/server/wm/MultiDisplayActivityLaunchTests.java)', 1), ('(1,android.content.Context,/android/app/cts/UiModeManagerTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/CompoundButtonTest.java)', 1), ('(1,android.content.Context,/android/os/cts/CrossProcessExceptionTest.java)', 1), ('(1,android.content.Context,/com/android/cts/authboundkey/AuthBoundKeyAppTest.java)', 1), ('(1,android.content.Context,/android/provider/cts/media/MediaStoreNotificationTest.java)', 1), ('(1,getInstance(),/android/telephony/ims/cts/EabControllerTest.java)', 1), ('(1,android.content.Context,/android/telephony/ims/cts/EabControllerTest.java)', 1), ('(1,android.content.Context,/android/security/cts/FileIntegrityManagerTest.java)', 1), ('(1,android.content.Context,/android/app/cts/ActivityManagerApi29Test.java)', 1), ('(1,android.content.Context,/android/view/animation/cts/AlphaAnimationTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/DatePickerTest.java)', 1), ('(1,android.content.Context,/com/android/cts/verifier/sensors/MotionIndicatorView.java)', 1), ('(1,getInstance(),/android/webkit/cts/WebSettingsTest.java)', 1), ('(1,android.content.Context,/android/webkit/cts/WebSettingsTest.java)', 1), ('(1,android.content.Context,/android/telephony/cts/CellInfoTest.java)', 1), ('(1,android.content.Context,/android/app/cts/TaskDescriptionTest.java)', 1), ('(1,android.content.Context,/com/android/cts/managedprofile/DeviceIdentifiersTest.java)', 1), ('(2,android.content.Context,/android/content/wm/cts/ContextGetDisplayTest.java)', 1), ('(1,android.content.Context,/android/view/inputmethod/cts/InlineSuggestionTest.java)', 1), ('(1,android.content.Context,/android/security/cts/CVE_2021_0309.java)', 1), ('(1,android.content.Context,/android/view/cts/TouchDelegateTest.java)', 1), ('(1,getInstance(),/android/text/method/cts/MultiTapKeyListenerTest.java)', 1), ('(1,android.content.Context,/android/database/cts/SQLiteCantOpenDatabaseExceptionTest.java)', 1), ('(1,android.content.Context,/android/content/pm/cts/FeatureTest.java)', 1), ('(1,android.content.Context,/com/android/cts/appaccessdata/AccessPrivateDataTest.java)', 1), ('(1,android.content.Context,/android/telephony2/cts/PhoneNumberTest.java)', 1), ('(2,android.content.Context,/android/server/wm/MultiDisplaySystemDecorationTests.java)', 1), ('(1,android.content.Context,/android/telephony/cts/VisualVoicemailServiceTest.java)', 1), ('(1,android.content.Context,/android/app/people/cts/ConversationStatusTest.java)', 1), ('(1,android.content.Context,/com/android/cts/devicepolicy/accountmanagement/AccountUtilsTest.java)', 1), ('(1,android.content.Context,/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java)', 1), ('(1,getInstance(),/android/text/format/cts/TimeTest.java)', 1), ('(1,android.content.Context,/android/location/cts/fine/GeocoderTest.java)', 1), ('(1,android.content.Context,/android/cts/rscpp/RSConvolveTest.java)', 1), ('(1,android.content.Context,/android/hardware/cts/SensorParameterRangeTest.java)', 1), ('(1,android.content.Context,/android/telecom/cts/DefaultDialerOperationsNoPermissionsTest.java)', 1), ('(1,android.content.Context,/android/telecom/cts/SimCallManagerTest.java)', 1), ('(1,android.content.Context,/android/location/cts/none/NoLocationPermissionTest.java)', 1), ('(1,android.content.Context,/android/seccomp/cts/app/SeccompDeviceTest.java)', 1), ('(1,android.content.Context,/android/telecom/cts/PhoneAccountOperationsTest.java)', 1), ('(1,getInstance(),/android/media/cts/PresentationSyncTest.java)', 1), ('(1,android.content.Context,/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java)', 1), ('(2,android.content.Context,/android/autofillservice/cts/dropdown/LoginActivityTest.java)', 1), ('(1,android.content.Context,/com/android/cts/managedprofile/CrossProfileSharingTest.java)', 1), ('(1,android.content.Context,/com/android/cts/extractnativelibs/app/noextract/ExtractNativeLibsFalseDeviceTest.java)', 1), ('(1,android.content.Context,/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java)', 1), ('(1,android.content.Context,/android/app/cts/PendingIntentTest.java)', 1), ('(1,android.content.Context,/android/location/cts/coarse/LocationManagerCoarseTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/LinearLayoutTest.java)', 1), ('(1,android.content.Context,/android/content/pm/cts/PackageManagerShellCommandTest.java)', 1), ('(1,android.content.Context,/android/uirendering/cts/testclasses/EdgeEffectTests.java)', 1), ('(1,android.content.Context,/android/database/sqlite/cts/SQLiteStatementTest.java)', 1), ('(1,android.content.Context,/android/permission/cts/PermissionManagerTest.java)', 1), ('(1,android.content.Context,/com/android/compatibility/common/deviceinfo/DeviceInfo.java)', 1), ('(1,android.content.Context,/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java)', 1), ('(1,android.content.Context,/android/media/cts/MediaSyncTest.java)', 1), ('(1,android.content.Context,/android/media/tv/tuner/cts/TunerDvrTest.java)', 1), ('(1,android.content.Context,/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java)', 1), ('(1,android.content.Context,/android/security/cts/VisualizerEffectTest.java)', 1), ('(1,android.content.Context,/android/display/cts/VirtualDisplayTest.java)', 1), ('(1,android.content.Context,/android/view/cts/ViewGroup_MarginLayoutParamsTest.java)', 1), ('(1,android.content.Context,/android/database/sqlite/cts/SQLiteQueryBuilderTest.java)', 1), ('(1,android.content.Context,/android/graphics/cts/PaintTest.java)', 1), ('(1,android.content.Context,/android/widget/cts/RadioGroup_LayoutParamsTest.java)', 1), ('(1,getInstance(),/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java)', 1), ('(1,android.content.Context,/com/android/cts/appbinding/app/MyEnabler.java)', 1), ('(1,android.content.Context,/com/android/cts/managedprofile/CrossProfileWidgetTest.java)', 1), ('(1,android.content.Context,/test/java/com/android/bedstead/nene/packages/PackageReferenceTest.java)', 1), ('(1,android.content.Context,/android/telecom/cts/DefaultDialerOperationsTest.java)', 1), ('(1,android.content.Context,/android/permission/cts/NearbyDevicesPermissionTest.java)', 1), ('(1,android.content.Context,/android/content/pm/cts/shortcutmanager/ShortcutManagerLauncherCallbackTest.java)', 1), ('(1,android.content.Context,/android/database/cts/AbstractCursorTest.java)', 1), ('(1,android.content.Context,/android/telephony2/cts/TelephonyManagerNoPermissionTest.java)', 1), ('(1,android.content.Context,/test/java/com/android/eventlib/premade/EventLibDeviceAdminReceiverTest.java)', 1), ('(1,android.content.Context,/android/permission/cts/BackgroundPermissionsTest.java)', 1), ('(1,android.content.Context,/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java)', 1)]"	"[('([3:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[getInstance()]:[3]:method_text:[      assertEquals(Spanned.SPAN_POINT_POINT, text.getSpanFlags(Selection.SELECTION_END));    }   ])', 3), ('([1:/android/telephony/ims/cts/ImsServiceTest.java]:[getInstance()]:[1]:method_text:[r.getCarrierService()                .getMmTelFeature().getSmsImplementation().sentPdu);    }   ])', 3), ('([1:/android/telephony/ims/cts/ImsServiceTest.java]:[getInstance()]:[1]:method_text:[(SmsReceiverHelper.EXTRA_RESULT_CODE,                        Activity.RESULT_CANCELED));    }   ])', 2), ('([1:/android/content/cts/MutableContextWrapperTest.java]:[android.content.Context]:[1]:method_text:[MutableContextWrapper = null;        mContext = getInstrumentation().getTargetContext();    }   ])', 1), ('([1:/android/net/wifi/nl80211/cts/PnoNetworkTest.java]:[android.content.Context]:[1]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([1:/android/graphics/cts/MovieTest.java]:[android.content.Context]:[1]:method_text:[       mResources = mContext.getResources();        mMovie = mResources.getMovie(MOVIE);    }   ])', 1), ('([1:/android/security/net/config/cts/TestAttributes.java]:[getInstance()]:[1]:method_text:[ase-config\'s value.        assertTrue(instance.isCleartextTrafficPermitted(""example.com""));    }}])', 1), ('([1:/android/autofillservice/cts/commontests/TimePickerTestCase.java]:[getInstance()]:[1]:method_text:[        assertTextAndValue(findNodeByResourceId(saveRequest.structure, ID_OUTPUT), ""10:40"");    }}])', 1), ('([1:/android/webkit/cts/WebChromeClientTest.java]:[getInstance()]:[1]:method_text:[);        } else {            assertFalse(webChromeClient.hadOnCloseWindow());        }    }   ])', 1), ('([1:/android/view/cts/ViewGroup_LayoutParamsTest.java]:[android.content.Context]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/security/NetworkSecurityPolicyTestBase.java]:[getInstance()]:[1]:method_text:[tted,                NetworkSecurityPolicy.getInstance().isCleartextTrafficPermitted());    }   ])', 1), ('([1:/android/security/NetworkSecurityPolicyTestBase.java]:[android.content.Context]:[1]:method_text:[HttpOnlyWebServer.shutdown();        } finally {            super.tearDown();        }    }   ])', 1), ('([1:/android/os/cts/PowerManager_WakeLockTest.java]:[android.content.Context]:[1]:method_text:[r claim to the CPU or screen being on     * 3 Sets whether this WakeLock is ref counted     */   ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[android.content.Context]:[1]:method_text:[0 = mTargetPackage + ""/"" + TOKEN_0;        mFullToken1 = mTargetPackage + ""/"" + TOKEN_1;    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java]:[android.content.Context]:[1]:method_text:[PACKAGE_NAME);        mContext.unregisterReceiver(mReceiver);        super.tearDown();    }   ])', 1), ('([1:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[android.content.Context]:[1]:method_text:[ry.getInstrumentation().getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([1:/com/android/server/cts/device/batterystats/BatteryStatsAlarmTest.java]:[android.content.Context]:[1]:method_text:[ring TAG = ""BatteryStatsAlarmTest"";    /**     * Set and fire a wakeup alarm 3 times.     */   ])', 1), ('([1:/test/java/com/android/bedstead/deviceadminapp/DeviceAdminAppTest.java]:[android.content.Context]:[1]:method_text:[endency of the test    @Before    public void setUp() {        EventLogs.resetLogs();    }   ])', 1), ('([1:/android/graphics/pdf/cts/PdfRendererTest.java]:[android.content.Context]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/media/cts/EncoderTest.java]:[android.content.Context]:[1]:method_text:[ltEncoders.put(mime, codec.getName());        codec.release();        return isDefault;    }   ])', 1), ('([1:/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java]:[getInstance()]:[1]:method_text:[);                        }                    }                }            }        }    }}])', 1), ('([1:/android/hardware/consumerir/cts/ConsumerIrTest.java]:[android.content.Context]:[1]:method_text:[etContext().getSystemService(                    Context.CONSUMER_IR_SERVICE);        }    }   ])', 1), ('([1:/android/security/identity/cts/IdentityApiTest.java]:[android.content.Context]:[1]:method_text:[quals;public class IdentityApiTest {    private static final String TAG = ""IdentityApiTest"";   ])', 1), ('([1:/android/net/wifi/cts/WifiLockTest.java]:[android.content.Context]:[1]:method_text:[WifiLockTest"";    /**     * Verify acquire and release of High Performance wifi locks     */   ])', 1), ('([1:/android/graphics/drawable/cts/DrawableTest.java]:[android.content.Context]:[1]:method_text:[InstrumentationRegistry.getTargetContext();        mResources = mContext.getResources();    }   ])', 1), ('([1:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[android.content.Context]:[1]:method_text:[ge.     * 3. Check restored MasterSyncAutomatically=true is the same with backup value.     */   ])', 1), ('([1:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[android.content.Context]:[1]:method_text:[entName(mContext));        assertTrue(""No target users found"", mTargetUsers.size() > 0);    }   ])', 1), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[android.content.Context]:[1]:method_text:[lPackage(EMPTY_APP_MAX_PACKAGE_NAME);        uninstallPackage(HELLO_WORLD_PACKAGE_NAME);    }   ])', 1), ('([1:/android/telephony/cts/TelephonyLocationTests.java]:[android.content.Context]:[1]:method_text:[geManager();        mShouldTest = pm.hasSystemFeature(PackageManager.FEATURE_TELEPHONY);    }   ])', 1), ('([1:/test/java/com/android/eventlib/premade/EventLibActivityTest.java]:[android.content.Context]:[1]:method_text:[trumentedContext();    @Before    public void setUp() {        EventLogs.resetLogs();    }   ])', 1), ('([1:/android/os/cts/CountDownTimerTest.java]:[android.content.Context]:[1]:method_text:[       mStartTime = System.currentTimeMillis();        mActivity.countDownTimer.start();    }   ])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[android.content.Context]:[1]:method_text:[tends AndroidTestCase {    private static final String TAG = ""ManagedProfileProvisioningTest"";   ])', 1), ('([1:/android/widget/cts/MediaControllerTest.java]:[android.content.Context]:[1]:method_text:[.getInstrumentation();        mActivity = mActivityRule.getActivity();    }    @UiThreadTest   ])', 1), ('([1:/android/acceleration/cts/BaseAccelerationTest.java]:[android.content.Context]:[1]:method_text:[eratedView();        mManualSoftwareView = mActivity.getManualSoftwareAcceleratedView();    }   ])', 1), ('([1:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[android.content.Context]:[1]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([1:/android/service/settings/suggestions/SuggestionTest.java]:[android.content.Context]:[1]:method_text:[   mIcon = Icon.createWithBitmap(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888));    }   ])', 1), ('([1:/android/provider/cts/simphonebook/SimPhonebookContract_SimRecordsTest.java]:[android.content.Context]:[1]:method_text:[        mDefaultSubscriptionId = new RemovableSims(mContext).getDefaultSubscriptionId();    }   ])', 1), ('([1:/android/content/res/cts/ResourcesTest.java]:[android.content.Context]:[1]:method_text:[ows Exception {        super.setUp();        mResources = getContext().getResources();    }   ])', 1), ('([1:/test/java/com/android/eventlib/EventLogsTest.java]:[android.content.Context]:[1]:method_text:[r the queue            CustomEvent.queryPackage(TEST_APP_PACKAGE_NAME).poll();        }    }   ])', 1), ('([1:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[android.content.Context]:[1]:method_text:[  }    /**     * Verify that we installed the .dm files for base (no split install).     */   ])', 1), ('([1:/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java]:[android.content.Context]:[1]:method_text:[nsion"");        } catch (IllegalArgumentException e) {            // Expected        }    }   ])', 1), ('([1:/android/appsecurity/cts/keyrotationtest/test/SignatureQueryServiceInstrumentationTest.java]:[android.content.Context]:[1]:method_text:[class));        signatureQueryService = ISignatureQueryService.Stub.asInterface(binder);    }   ])', 1), ('([1:/android/cts/backup/preservedsettingsapp/PreservedSettingsRestoreTest.java]:[android.content.Context]:[1]:method_text:[ @After    public void tearDown() {        mUiAutomation.dropShellPermissionIdentity();    }   ])', 1), ('([1:/android/telecom/cts/DataObjectUnitTests.java]:[android.content.Context]:[1]:method_text:[ * working as intended. */public class DataObjectUnitTests extends InstrumentationTestCase {   ])', 1), ('([1:/android/view/cts/OrientationEventListenerTest.java]:[android.content.Context]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[android.content.Context]:[1]:method_text:[    @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")   ])', 1), ('([1:/android/packageinstaller/admin/cts/SessionCommitBroadcastTest.java]:[android.content.Context]:[1]:method_text:[tected void tearDown() throws Exception {        mContext.unregisterReceiver(mReceiver);    }   ])', 1), ('([1:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[android.content.Context]:[1]:method_text:[tUiAutomation().destroy();        InstrumentedAccessibilityService.disableAllServices();    }   ])', 1), ('([1:/android/content/om/cts/OverlayManagerTest.java]:[android.content.Context]:[1]:method_text:[rumentation().getContext();        mManager = new OverlayManager(context, mMockService);    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/throttling/ShortcutManagerThrottlingTestReceiver.java]:[android.content.Context]:[1]:method_text:[plyAction, ""Unknown test: "" + method);                    break;            }        }    }   ])', 1), ('([1:/android/apppredictionservice/cts/AppPredictionServiceTest.java]:[android.content.Context]:[1]:method_text:[vice        setService(null);        mReporter = null;        SystemClock.sleep(1000);    }   ])', 1), ('([3:/android/text/method/cts/PasswordTransformationMethodTest.java]:[getInstance()]:[3]:method_text:[tInt(mActivity.getContentResolver(), System.TEXT_SHOW_PASSWORD,                on ? 1 : 0);    }}])', 1), ('([1:/com/android/cts/verifier/audio/AudioFrequencyActivity.java]:[android.content.Context]:[1]:method_text:[d setMinLevel() {        mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 0, 0);    }   ])', 1), ('([1:/android/media/cts/MidiSoloTest.java]:[android.content.Context]:[1]:method_text:[id tearDown() throws Exception {        // Test case clean up.        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[android.content.Context]:[1]:method_text:[ignature content provider cannot be read,     * since this app lacks the required certs     */   ])', 1), ('([1:/android/app/cts/BadProviderTest.java]:[android.content.Context]:[1]:method_text:[p() {        mContext = InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([1:/android/permission/cts/PermissionControllerTest.java]:[android.content.Context]:[1]:method_text:[ions as permissionInfos        assertThat(numRuntimeGranted).isAtLeast(numInfosGranted);    }   ])', 1), ('([1:/android/media/cts/AudioRecordTest.java]:[android.content.Context]:[1]:method_text:[        mIsOnPeriodicNotificationCalled = false;        mIsHandleMessageCalled = false;    }   ])', 1), ('([1:/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java]:[android.content.Context]:[1]:method_text:[Exception {        super.setUp();    }    // Test that this app can access pre-granted alias   ])', 1), ('([1:/android/app/cts/ActivityManagerProcessStateTest.java]:[android.content.Context]:[1]:method_text:[ * Test basic state changes as processes go up and down due to services running in them.     */   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[android.content.Context]:[1]:method_text:[CE_SEC = 2;    private static final long TIMEOUT_WAIT_FOR_IDLE_MS = 2_000;    // TODO: Make it a])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java]:[getInstance()]:[1]:method_text:[msUri, null, null, null, null);        assertEquals(0, c.getCount());        c.close();    }   ])', 1), ('([3:/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java]:[getInstance()]:[3]:method_text:[rtistUri, null, null, null, null);        assertEquals(0, c.getCount());        c.close();    }}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java]:[android.content.Context]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([1:/android/webkit/cts/WebViewTest.java]:[getInstance()]:[1]:method_text:[yncManager.getInstance());    }    // Static methods should be safe to call on non-UI threads   ])', 1), ('([2:/android/webkit/cts/WebViewTest.java]:[android.content.Context]:[2]:method_text:[      mWebServer = null;        StrictMode.setThreadPolicy(oldPolicy);    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SimpleCursorAdapterTest.java]:[android.content.Context]:[1]:method_text:[ontext, R.layout.cursoradapter_item0, mCursor, COLUMNS_FROM, VIEWS_TO);    }    @UiThreadTest   ])', 1), ('([1:/android/app/cts/ApplicationTest.java]:[android.content.Context]:[1]:method_text:[eption {        SystemUtil.runShellCommand(getInstrumentation(), ERASE_FONT_SCALE_CMD);    }   ])', 1), ('([1:/android/hardware/camera2/cts/OfflineSessionTest.java]:[android.content.Context]:[1]:method_text:[* surfaces not registered with camera or surfaces used in     * repeating requests.</p>     */   ])', 1), ('([1:/android/hardware/cts/SensorTest.java]:[android.content.Context]:[1]:method_text:[Held()) {            mWakeLock.release();        }    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodServiceDeviceTest.java]:[android.content.Context]:[1]:method_text:[ONDS.toMillis(20);    /** Test to check CtsInputMethod1 receives onCreate and onStartInput. */   ])', 1), ('([1:/android/content/cts/ComponentNameTest.java]:[android.content.Context]:[1]:method_text:[/** * Test {@link ComponentName}. */public class ComponentNameTest extends AndroidTestCase {   ])', 1), ('([3:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[getInstance()]:[3]:method_text:[thod.getInstance();        assertNotNull(method1);        assertSame(method0, method1);    }   ])', 1), ('([1:/android/hardware/cts/CameraGLTest.java]:[android.content.Context]:[1]:method_text:[.setPreviewTexture in conjunction with the standard Camera preview callback */    @UiThreadTest   ])', 1), ('([1:/android/view/accessibility/cts/AccessibilityEventTest.java]:[android.content.Context]:[1]:method_text:[(event));            return super.requestSendAccessibilityEvent(child, event);        }    }   ])', 1), ('([1:/android/graphics/drawable/cts/VectorDrawableSizeTest.java]:[android.content.Context]:[1]:method_text:[nstrumentationRegistry.getTargetContext();        mResources = mContext.getResources();    }   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[android.content.Context]:[1]:method_text:[f (mActivity != null) {            mActivity.setFlagFalse();        }    }    @UiThreadTest   ])', 1), ('([1:/android/server/wm/StartActivityAsUserTests.java]:[android.content.Context]:[1]:method_text:[lic void removeSecondUser() {        runShellCommand(""pm remove-user "" + mSecondUserId);    }   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[android.content.Context]:[1]:method_text:[lues reported in fullscreen should be larger than those reported in     * docked state.     */   ])', 1), ('([1:/android/media/cts/RingtoneTest.java]:[android.content.Context]:[1]:method_text:[PackageManager()                .hasSystemFeature(PackageManager.FEATURE_LEANBACK_ONLY);    }   ])', 1), ('([1:/android/cts/backup/includeexcludeapp/IncludeExcludeTest.java]:[android.content.Context]:[1]:method_text:[, ""file_to_include""));        mExcludeFiles.add(new File(directory, ""file_to_exclude""));    }   ])', 1), (""([1:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[getInstance()]:[1]:method_text:[KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_3));        assertEquals('3', content.charAt(3));    }   ])"", 1), ('([1:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[getInstance()]:[1]:method_text:[CTION_DOWN, KeyEvent.KEYCODE_3));        assertEquals(str.charAt(3), content.charAt(3));    }   ])', 1), ('([3:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[getInstance()]:[3]:method_text:[   assertEquals(Spanned.SPAN_POINT_POINT, content.getSpanFlags(Selection.SELECTION_END));    }   ])', 1), ('([1:/android/widget/cts/ImageSwitcherTest.java]:[android.content.Context]:[1]:method_text:[tivity();        mImageSwitcher = (ImageSwitcher) mActivity.findViewById(R.id.switcher);    }   ])', 1), ('([1:/android/graphics/cts/TypefaceTest.java]:[android.content.Context]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/app/cts/CloseSystemDialogsTest.java]:[getInstance()]:[1]:method_text:[        mNotificationListener.resetData();    }    /** Intent.ACTION_CLOSE_SYSTEM_DIALOGS */   ])', 1), ('([1:/android/app/cts/CloseSystemDialogsTest.java]:[android.content.Context]:[1]:method_text:[        mNotificationListener.resetData();    }    /** Intent.ACTION_CLOSE_SYSTEM_DIALOGS */   ])', 1), ('([1:/android/location/cts/fine/GeofencingTest.java]:[android.content.Context]:[1]:method_text:[ockLocationProvider(InstrumentationRegistry.getInstrumentation(),                false);    }   ])', 1), ('([1:/android/renderscript/cts/Float16ArithmeticTest.java]:[android.content.Context]:[1]:method_text:[ y, Float16TestData.ReferenceOutputForAdd,                                  ""addition"");    }   ])', 1), ('([1:/android/telephony/cts/MmsTest.java]:[android.content.Context]:[1]:method_text:[e(Context.TELEPHONY_SERVICE);        mPackageManager = getContext().getPackageManager();    }   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRequestTest.java]:[android.content.Context]:[1]:method_text:[tion()                .getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([1:/android/telephonyprovider/cts/SmsConversationTest.java]:[android.content.Context]:[1]:method_text:[s test is to check most recent insert sms body equals to the Conversation     * Snippet     */   ])', 1), ('([1:/com/android/cts/externalstorageapp/ReadDefaultUris.java]:[android.content.Context]:[1]:method_text:[        mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);    }   ])', 1), ('([1:/test/java/com/android/eventlib/events/activities/ActivityPausedEventTest.java]:[android.content.Context]:[1]:method_text:[Y_CLASS_NAME;    }    @Before    public void setUp() {        EventLogs.resetLogs();    }   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[android.content.Context]:[1]:method_text:[e != null && mOutFile.exists()) {            mOutFile.delete();        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/RoutingTest.java]:[android.content.Context]:[1]:method_text:[          bufferSize,                AudioTrack.MODE_STREAM);        return audioTrack;    }   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[android.content.Context]:[1]:method_text:[en url is http://web_address,     * it will open a browser window to the URL specified.     */   ])', 1), ('([1:/android/hardware/biometrics/cts/BiometricManagerTest.java]:[android.content.Context]:[1]:method_text:[Context();        mBiometricManager = mContext.getSystemService(BiometricManager.class);    }   ])', 1), ('([1:/android/media/cts/LoudnessEnhancerTest.java]:[android.content.Context]:[1]:method_text:[ctor    //----------------------------------    //Test case 0.0: test constructor and release   ])', 1), ('([1:/android/graphics/pdf/cts/PdfRendererTransformTest.java]:[android.content.Context]:[1]:method_text:[o the ""size"" of each individual parameterized run,    // and not the ""full"" run.    @SmallTest   ])', 1), ('([1:/android/provider/cts/contacts/CallLogTest.java]:[android.content.Context]:[1]:method_text:[g TEST_NUMBER = ""5625698388"";    private static final long CONTENT_RESOLVER_TIMEOUT_MS = 5000;   ])', 1), ('([1:/android/packageinstaller/tapjacking/cts/TapjackingTest.java]:[android.content.Context]:[1]:method_text:[ame, id);        return mUiDevice.wait(Until.findObject(selector), WAIT_FOR_UI_TIMEOUT);    }   ])', 1), ('([1:/com/android/cts/comp/provisioning/AffiliationTest.java]:[android.content.Context]:[1]:method_text:[util.Collections;import java.util.Set;public class AffiliationTest extends AndroidTestCase {   ])', 1), ('([1:/android/slice/cts/SlicePermissionsTest.java]:[android.content.Context]:[1]:method_text:[       return;        }        mSliceManager.revokeSlicePermission(mTestPkg, BASE_URI);    }   ])', 1), ('([1:/android/providerui/cts/MediaStoreUiTest.java]:[android.content.Context]:[1]:method_text:[FLAG_GRANT_WRITE_URI_PERMISSION);            }            mActivity.finish();        }    }   ])', 1), ('([1:/android/view/cts/ViewGroupChildDrawingOrderTest.java]:[android.content.Context]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/graphics/drawable/cts/GradientDrawableTest.java]:[android.content.Context]:[1]:method_text:[setup() {        mResources = InstrumentationRegistry.getTargetContext().getResources();    }   ])', 1), ('([1:/android/provider/cts/DocumentsContractTest.java]:[android.content.Context]:[1]:method_text:[mProvider.attachInfo(mContext, pi);        mResolver = ContentResolver.wrap(mProvider);    }   ])', 1), ('([1:/com/android/cts/intent/receiver/ClearApplicationDataTest.java]:[android.content.Context]:[1]:method_text:[haredPrefs = mContext.getSharedPreferences(SHARED_PREFERENCE_NAME, Context.MODE_PRIVATE);    }   ])', 1), ('([1:/android/suspendapps/cts/DualSuspendTests.java]:[android.content.Context]:[1]:method_text:[dle(Intent.EXTRA_PACKAGE_NAME, TEST_APP_PACKAGE_NAME),                mReceiverHandler);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AffiliationTest.java]:[android.content.Context]:[1]:method_text:[cePolicyManager)                context.getSystemService(Context.DEVICE_POLICY_SERVICE);    }   ])', 1), ('([1:/android/sharesheet/cts/CtsSharesheetDeviceTest.java]:[android.content.Context]:[1]:method_text:[    * total run time low, jam as many tests are possible into each visible test portion.     */   ])', 1), ('([1:/android/content/cts/ContentResolverWrapTest.java]:[android.content.Context]:[1]:method_text:[mProvider.attachInfo(mContext, pi);        mResolver = ContentResolver.wrap(mProvider);    }   ])', 1), ('([1:/android/server/wm/StartActivityTests.java]:[android.content.Context]:[1]:method_text:[K} can only be launched     * from an {@link Activity} {@link android.content.Context}.     */   ])', 1), ('([1:/android/server/wm/StartActivityTests.java]:[android.content.Context]:[1]:method_text:[ctivity}     * {@link android.content.Context} with the {@code FLAG_ACTIVITY_NEW_TASK}.     */   ])', 1), ('([1:/android/server/wm/StartActivityTests.java]:[android.content.Context]:[1]:method_text:[id.content.Context} when the target sdk is between N and O Mr1.     * @throws Exception     */   ])', 1), ('([1:/android/jobscheduler/cts/TriggerContentTest.java]:[android.content.Context]:[1]:method_text:[ize(); i++) {            assertEquals(expectedPath.get(i), actualPath.get(i));        }    }   ])', 1), ('([1:/android/text/util/cts/LinkifyTest.java]:[android.content.Context]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/text/format/cts/FormatterTest.java]:[android.content.Context]:[1]:method_text:[import java.util.Locale;@SmallTest@RunWith(AndroidJUnit4.class)public class FormatterTest {   ])', 1), ('([1:/android/telecom/cts/SelfManagedAwareInCallServiceTest.java]:[android.content.Context]:[1]:method_text:[ink TelecomManager#METADATA_INCLUDE_SELF_MANAGED_CALLS} will receive self-managed calls.     */   ])', 1), ('([1:/android/keystore/cts/SignatureTest.java]:[android.content.Context]:[1]:method_text:[e7a42b1ddff0c""));    }    private static final long DAY_IN_MILLIS = TestUtils.DAY_IN_MILLIS;   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[android.content.Context]:[1]:method_text:[id tearDown() throws Exception {        super.tearDown();        deleteTestDirectory();    }   ])', 1), ('([1:/android/cts/rscpp/RSResizeTest.java]:[android.content.Context]:[1]:method_text:[        mVerify.invoke_verify(rsOutput, rsCppOutput, rsInput);        checkForErrors();    }   ])', 1), ('([1:/android/webkit/cts/PacProcessorTest.java]:[android.content.Context]:[1]:method_text:[Test that each {@link PacProcessor#createInstance} call returns a new not null instance.     */   ])', 1), ('([1:/android/database/sqlite/cts/SQLiteProgramTest.java]:[android.content.Context]:[1]:method_text:[e.close();        getContext().deleteDatabase(DATABASE_NAME);        super.tearDown();    }   ])', 1), ('([3:/android/text/method/cts/DateKeyListenerTest.java]:[getInstance()]:[3]:method_text:[assertNotSame(usListener1, irListener);        assertNotSame(usListener1, nullListener);    }   ])', 1), ('([1:/android/text/method/cts/DateKeyListenerTest.java]:[getInstance()]:[1]:method_text:[protected char[] getAcceptedChars() {            return super.getAcceptedChars();        }    }}])', 1), ('([2:/android/provider/cts/media/MediaStore_Audio_Genres_MembersTest.java]:[getInstance()]:[2]:method_text:[a.getContentUri(mVolumeName),                Media._ID + ""="" + mAudioIdOfJamLive, null);    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_Genres_MembersTest.java]:[getInstance()]:[1]:method_text:[ll, null, null);            assertEquals(0, c.getCount());            c.close();        }    }}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_Genres_MembersTest.java]:[android.content.Context]:[1]:method_text:[a.getContentUri(mVolumeName),                Media._ID + ""="" + mAudioIdOfJamLive, null);    }   ])', 1), ('([1:/android/cts/backup/othersoundssettingsapp/OtherSoundsSettingsTest.java]:[android.content.Context]:[1]:method_text:[Restore Settings.     * 5. Check restored Dial pad tones is the same with backup value.     */   ])', 1), ('([1:/android/vr/cts/VrDisplayTest.java]:[android.content.Context]:[1]:method_text:[ Tests that the refresh rate is at least 60Hz.     */     @CddTest(requirement=""7.9.2/C-1-15"")   ])', 1), ('([1:/android/media/cts/MediaSessionManagerTest.java]:[android.content.Context]:[1]:method_text:[trumentation().getUiAutomation().dropShellPermissionIdentity();        super.tearDown();    }   ])', 1), ('([1:/android/hardware/cts/SensorSupportTest.java]:[android.content.Context]:[1]:method_text:[sMag = hasSensorType(Sensor.TYPE_MAGNETIC_FIELD);    }    @CddTest(requirement=""7.3.9/C-2-1"")   ])', 1), ('([1:/android/os/cts/DebugTest.java]:[android.content.Context]:[1]:method_text:[     super.tearDown();        Debug.stopAllocCounting();        Debug.resetAllCounts();    }   ])', 1), ('([1:/android/content/cts/ClipDescriptionTest.java]:[getInstance()]:[1]:method_text:[ity(intent);        mUiDevice.wait(Until.hasObject(By.pkg(clazz.getPackageName())), 15000);    }}])', 1), ('([1:/android/content/cts/ClipDescriptionTest.java]:[android.content.Context]:[1]:method_text:[        mUiDevice.wakeUp();        launchActivity(MockActivity.class);    }    @UiThreadTest   ])', 1), (""([1:/android/media/session/cts/MediaSessionManagerTest.java]:[android.content.Context]:[1]:method_text:[    /**     * Tests if the MediaSessionTestHelper doesn't have an active media session.     */   ])"", 1), ('([1:/com/android/cts/intent/sender/SuspendPackageTest.java]:[android.content.Context]:[1]:method_text:[ temporarilySkipActivityLaunch() {        return UserManager.isHeadlessSystemUserMode();    }   ])', 1), ('([1:/com/android/cts/comp/BindDeviceAdminServiceFailsTest.java]:[android.content.Context]:[1]:method_text:[ePolicyManager)                mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/users/UserReferenceTest.java]:[android.content.Context]:[1]:method_text:[();    @ClassRule @Rule    public static final DeviceState sDeviceState = new DeviceState();   ])', 1), ('([1:/com/android/cts/normalapp/ClientTest.java]:[android.content.Context]:[1]:method_text:[s Exception {        InstrumentationRegistry.getContext().unregisterReceiver(mReceiver);    }   ])', 1), ('([1:/com/android/cts/instrumentationdiffcertapp/InstrumentationFailToRunTest.java]:[android.content.Context]:[1]:method_text:[ent cert fails. */public class InstrumentationFailToRunTest extends InstrumentationTestCase {   ])', 1), ('([2:/android/content/cts/ContextMoreTest.java]:[android.content.Context]:[2]:method_text:[n a while and     * make sure getSystemService() still returns non-null.     */    @LargeTest   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_ContactsTest.java]:[android.content.Context]:[1]:method_text:[ void tearDown() throws Exception {        super.tearDown();        mBuilder.cleanup();    }   ])', 1), ('([1:/android/provider/cts/SearchRecentSuggestionsTest.java]:[android.content.Context]:[1]:method_text:[uggestionsProvider.class,                TestSearchRecentSuggestionsProvider.AUTHORITY);    }   ])', 1), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[android.content.Context]:[1]:method_text:[eturn (intent) -> user.userHandle().equals(intent.getParcelableExtra(Intent.EXTRA_USER));    }   ])', 1), ('([1:/android/autofillservice/cts/SessionLifecycleTest.java]:[android.content.Context]:[1]:method_text:[ystemClock.sleep(WAIT_ACTIVITY_MS);        mUiBot.assertShownByRelativeId(ID_USERNAME);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/CustomizationRestrictionsTest.java]:[android.content.Context]:[1]:method_text:[we check if the new    // wallpaper is different from the old one after we ran a setter method.   ])', 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[android.content.Context]:[1]:method_text:[PolicyManager) mContext                .getSystemService(Context.DEVICE_POLICY_SERVICE);    }   ])', 1), ('([1:/android/widget/cts/GridViewTest.java]:[android.content.Context]:[1]:method_text:[ty.findViewById(R.id.gridview);        PollingCheck.waitFor(mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/widget/cts/AbsListView_LayoutParamsTest.java]:[android.content.Context]:[1]:method_text:[Document(parser, ""ViewGroup_Layout"");        mAttributeSet = Xml.asAttributeSet(parser);    }   ])', 1), ('([1:/android/view/textclassifier/cts/TextViewIntegrationTest.java]:[getInstance()]:[1]:method_text:[   assertFloatingToolbarIsDisplayed();        assertFloatingToolbarContainsItem(""Test"");    }   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityLoggingTest.java]:[android.content.Context]:[1]:method_text:[eRule();    /**     * Tests that new accessibility services are logged by the system.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[android.content.Context]:[1]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([1:/android/webkit/cts/WebHistoryItemTest.java]:[getInstance()]:[1]:method_text:[ assertNotNull(item);        assertEquals(TestHtmlConstants.BR_TAG_TITLE, item.getTitle());    }}])', 1), ('([1:/android/hardware/cts/SingleSensorTests.java]:[android.content.Context]:[1]:method_text:[d by the sensor under test matches that which is     * required by the CDD.     * </p>     */   ])', 1), ('([1:/android/os/cts/SeccompTest.java]:[android.content.Context]:[1]:method_text:[ &&               !(primaryAbi.equals(""armeabi-v7a"") || primaryAbi.equals(""arm64-v8a""));    }   ])', 1), ('([1:/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java]:[android.content.Context]:[1]:method_text:[gedBroadcastAction) {        mOwnerChangedBroadcastAction = ownerChangedBroadcastAction;    }   ])', 1), ('([1:/android/widget/cts/RelativeLayoutTest.java]:[android.content.Context]:[1]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([1:/android/content/cts/Intent_ShortcutIconResourceTest.java]:[android.content.Context]:[1]:method_text:[    super.setUp();        mShortcutIconResource = null;        mContext = getContext();    }   ])', 1), ('([1:/com/android/server/cts/storaged/StoragedTest.java]:[android.content.Context]:[1]:method_text:[setUp() throws Exception {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/security/cts/IntentSenderRemovalTest.java]:[android.content.Context]:[1]:method_text:[he DebugIntentSender activity in Settings has been removed     * and cannot be invoked.     */   ])', 1), ('([1:/android/media/cts/RemoteControllerTest.java]:[android.content.Context]:[1]:method_text:[Controller() {        return new RemoteController(mContext, listener);    }    @UiThreadTest   ])', 1), ('([1:/android/net/wifi/nl80211/cts/NativeScanResultTest.java]:[android.content.Context]:[1]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([1:/android/telephony/ims/cts/ImsServiceTest.java]:[getInstance()]:[1]:method_text:[arrierImsService();            sServiceConnector.disconnectDeviceImsService();        }    }   ])', 1), ('([1:/android/telephony/ims/cts/ImsServiceTest.java]:[getInstance()]:[1]:method_text:[Utils.TEST_TIMEOUT_MS);        assertEquals(EXPECTED_RECEIVED_MESSAGE, receivedMessage);    }   ])', 1), ('([2:/android/telephony/ims/cts/ImsServiceTest.java]:[getInstance()]:[2]:method_text:[  res = waitForIntResult(actionQueue, 500);        assertEquals(res, Integer.MAX_VALUE);    }   ])', 1), ('([4:/android/telephony/ims/cts/ImsServiceTest.java]:[getInstance()]:[4]:method_text:[.equals(                configStr.getBytes(), TestAcsClient.getInstance().getConfig()));    }   ])', 1), ('([3:/android/telephony/ims/cts/ImsServiceTest.java]:[getInstance()]:[3]:method_text:[).getActionQueue());        assertEquals(res, TestAcsClient.ACTION_TRIGGER_AUTO_CONFIG);    }   ])', 1), ('([3:/android/telephony/ims/cts/ImsServiceTest.java]:[getInstance()]:[3]:method_text:[_SET_RCS_CLIENT_CONFIG);        assertEquals(rcc, TestAcsClient.getInstance().getRcc());    }   ])', 1), ('([1:/android/telephony/ims/cts/ImsServiceTest.java]:[android.content.Context]:[1]:method_text:[arrierImsService();            sServiceConnector.disconnectDeviceImsService();        }    }   ])', 1), ('([1:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[android.content.Context]:[1]:method_text:[    @After    public void tearDown() throws Exception {        mUiDevice.pressHome();    }   ])', 1), ('([1:/com/android/cts/graphics/framerateoverride/FrameRateOverrideTestActivity.java]:[getInstance()]:[1]:method_text:[as been observed to    // cause test failures in practice, so we run the test with retry logic.   ])', 1), ('([1:/android/permission/cts/OneTimePermissionTest.java]:[android.content.Context]:[1]:method_text:[ions_timeout_millis"",                        mOldOneTimePermissionTimeoutValue, false));    }   ])', 1), ('([1:/android/text/cts/AutoTextTest.java]:[android.content.Context]:[1]:method_text:[   mContext.getResources().updateConfiguration(config, null);        }    }    @UiThreadTest   ])', 1), ('([1:/android/net/wifi/nl80211/cts/RadioChainInfoTest.java]:[android.content.Context]:[1]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([1:/android/jobscheduler/cts/ExpeditedJobTest.java]:[android.content.Context]:[1]:method_text:[ption {        mTestAppInterface.cleanup();        AppOpsUtils.reset(TEST_APP_PACKAGE);    }   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsServiceTest.java]:[android.content.Context]:[1]:method_text:[ static Context getContext() {        return InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/app/cts/AliasActivityTest.java]:[android.content.Context]:[1]:method_text:[ctivityTest extends InstrumentationTestCase {    private static final long SLEEP_TIME = 1000;   ])', 1), ('([1:/com/android/cts/packagemanager/preferredactivity/app/PreferredActivityDeviceTests.java]:[android.content.Context]:[1]:method_text:[.getContext();    private final PackageManager mPackageManager = mContext.getPackageManager();   ])', 1), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[android.content.Context]:[1]:method_text:[ity(clazz);        }    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([1:/android/widget/cts/SimpleExpandableListAdapterTest.java]:[android.content.Context]:[1]:method_text:[xt.LAYOUT_INFLATER_SERVICE)).inflate(                R.layout.cursoradapter_host, null);    }   ])', 1), ('([1:/android/widget/cts/TextClockTest.java]:[getInstance()]:[1]:method_text:[) {                throw new RuntimeException(t.getMessage());            }        });    }   ])', 1), ('([1:/android/database/cts/DatabaseCursorTest.java]:[android.content.Context]:[1]:method_text:[Database.execSQL(""INSERT INTO test (data) VALUES (\'"" + sString3 + ""\');"");    }    @MediumTest   ])', 1), ('([3:/android/translation/cts/UiTranslationManagerTest.java]:[android.content.Context]:[3]:method_text:[resetTemporaryContentCaptureService();        Helper.resetTemporaryTranslationService();    }   ])', 1), ('([1:/android/permission/cts/RemovePermissionTest.java]:[android.content.Context]:[1]:method_text:[strumentation.getUiAutomation().grantRuntimePermission(                pkg, permission);    }   ])', 1), ('([1:/android/permission2/cts/NoReceiveSmsPermissionTest.java]:[android.content.Context]:[1]:method_text:[     * Note: this test requires that the device under test reports a valid phone number     */   ])', 1), (""([1:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[android.content.Context]:[1]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ])"", 1), ('([1:/android/gwpasan/GwpAsanTestActivity.java]:[android.content.Context]:[1]:method_text:[      throw new Exception();        }        return (mResult - RESULT_FIRST_USER) == 1;    }   ])', 1), ('([1:/android/security/cts/IsolatedProcessTest.java]:[android.content.Context]:[1]:method_text:[(BIND_SERVICE_TIMEOUT, TimeUnit.MILLISECONDS));    }    @AsbSecurityTest(cveBugId = 30202228)   ])', 1), ('([1:/android/dpi/cts/ConfigurationScreenLayoutTest.java]:[android.content.Context]:[1]:method_text:[;    public ConfigurationScreenLayoutTest() {        super(OrientationActivity.class);    }   ])', 1), ('([1:/android/security/cts/ConscryptIntermediateVerificationTest.java]:[android.content.Context]:[1]:method_text:[o find X509TrustManager"");        return null;    }    @AsbSecurityTest(cveBugId = 26232830)   ])', 1), ('([6:/android/provider/cts/media/MediaStoreAudioTestHelper.java]:[getInstance()]:[6]:method_text:[mp3"");            values.put(Media.ARTIST, ARTIST);            return values;        }    }   ])', 1), ('([1:/android/graphics/drawable/cts/ClipDrawableTest.java]:[android.content.Context]:[1]:method_text:[unWith(AndroidJUnit4.class)public class ClipDrawableTest {    @SuppressWarnings(""deprecation"")   ])', 1), ('([1:/android/controls/cts/CtsControlsServiceTest.java]:[android.content.Context]:[1]:method_text:[   @Before    public void setUp() {        mControlsService = new CtsControlsService();    }   ])', 1), ('([1:/android/widget/cts/TextViewIsHorizontallyScrollableTest.java]:[android.content.Context]:[1]:method_text:[nflater.inflate(R.layout.textview_isHorizontallyScrollable_layout,                null);    }   ])', 1), ('([1:/android/media/metrics/cts/MediaMetricsAtomHostSideTests.java]:[android.content.Context]:[1]:method_text:[e property is set.        Thread.sleep(DEVICE_PROPERTY_PROPAGATION_DELAY_MICROSECONDS);    }   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java]:[android.content.Context]:[1]:method_text:[ static Context getContext() {        return InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/media/cts/ConnectionStatus.java]:[android.content.Context]:[1]:method_text:[       break;            }        }        // ping test timeout        return false;    }   ])', 1), ('([1:/android/cts/rscpp/RS3DLUTTest.java]:[android.content.Context]:[1]:method_text:[ean lutTest(String path, int X, int Y, int lutSize, byte[] input, byte[] input2, byte[] output);   ])', 1), ('([1:/android/uirendering/cts/testclasses/ShadowTests.java]:[android.content.Context]:[1]:method_text:[      expectedColor,                }, SamplePointVerifier.DEFAULT_TOLERANCE, verifier);    }   ])', 1), ('([1:/com/android/cts/verifier/audio/RingerModeActivity.java]:[android.content.Context]:[1]:method_text:[eRingerDndOn());        tests.add(new TestSetRingerModePolicyAccessDndOn());        // TODO: Add a])', 1), ('([1:/android/telephony/cts/CarrierConfigManagerTest.java]:[android.content.Context]:[1]:method_text:[E_BOOL.startsWith(                                CarrierConfigManager.Gps.KEY_PREFIX));    }   ])', 1), ('([1:/android/telephony/cts/TelephonyRegistryManagerTest.java]:[android.content.Context]:[1]:method_text:[}    /**     * expect security exception as there is no carrier privilege permission.     */   ])', 1), ('([1:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[android.content.Context]:[1]:method_text:[CEC));        mHdmiControlManager = context.getSystemService(HdmiControlManager.class);    }   ])', 1), ('([1:/android/nfc/cts/NfcPreferredPaymentTest.java]:[android.content.Context]:[1]:method_text:[void tearDown() throws Exception {    }    /** Tests getAidsForPreferredPaymentService API */   ])', 1), ('([1:/android/view/cts/ViewConfigurationTest.java]:[android.content.Context]:[1]:method_text:[onfiguration}. */@SmallTest@RunWith(AndroidJUnit4.class)public class ViewConfigurationTest {   ])', 1), ('([1:/android/display/cts/BrightnessTest.java]:[android.content.Context]:[1]:method_text:[SPLAY_BRIGHTNESS);        revokePermission(Manifest.permission.BRIGHTNESS_SLIDER_USAGE);    }   ])', 1), ('([1:/android/permission/cts/MainlineNetworkStackPermissionTest.java]:[android.content.Context]:[1]:method_text:[g android.permission.MAINLINE_NETWORK_STACK is installed,     * and is a system package     */   ])', 1), ('([1:/android/widget/cts/HeaderViewListAdapterTest.java]:[android.content.Context]:[1]:method_text:[iewFullAdapter();        mEmptyAdapter = new HeaderViewEmptyAdapter();    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/TimePickerTest.java]:[android.content.Context]:[1]:method_text:[ViewById(R.id.timepicker_clock);        PollingCheck.waitFor(mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/os/storage/cts/StorageCrateTest.java]:[android.content.Context]:[1]:method_text:[mCratePath = mCratesRoot.resolve(mTestName.getMethodName());        cleanAllOfCrates();    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[android.content.Context]:[1]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([1:/android/widget/cts/TabWidgetTest.java]:[android.content.Context]:[1]:method_text:[  mActivity = mActivityRule.getActivity();        mTabWidget = mActivity.getTabWidget();    }   ])', 1), ('([1:/android/telephony/cts/CarrierSignalTest.java]:[android.content.Context]:[1]:method_text:[y {            mContext.unregisterReceiver(mReceiver);        } catch (Throwable t) { }    }   ])', 1), ('([1:/com/android/cts/externalstorageapp/CommonExternalStorageTest.java]:[android.content.Context]:[1]:method_text:[om.android.cts.writeexternalstorageapp"";    /**     * Dump helpful debugging details.     */   ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[android.content.Context]:[1]:method_text:[Home != null) {            setDefaultLauncher(mInstrumentation, mDefaultHome);        }    }   ])', 1), ('([1:/android/cts/rscpp/RSElementTest.java]:[android.content.Context]:[1]:method_text:[    System.loadLibrary(""rscpptest_jni"");    }    native boolean testCreatePixel(String path);   ])', 1), ('([1:/android/alarmmanager/cts/AppStandbyTests.java]:[android.content.Context]:[1]:method_text:[  assertTrue(""Alarm exceeding quota not delivered after expected delay"", waitForAlarm());    }   ])', 1), ('([4:/android/server/wm/AlertWindowsImportanceTests.java]:[android.content.Context]:[4]:method_text:[();        context.unbindService(mConnection);        mAm = null;        mAm25 = null;    }   ])', 1), ('([1:/android/telephony/euicc/cts/EuiccManagerTest.java]:[android.content.Context]:[1]:method_text:[iver != null) {            getContext().unregisterReceiver(mCallbackReceiver);        }    }   ])', 1), ('([1:/android/view/cts/ViewUnbufferedTest.java]:[getInstance()]:[1]:method_text:[eCallback(mFrameCallback);    }    // Normal view would expect to receive the buffered event.   ])', 1), ('([1:/android/view/cts/ChoreographerNativeTest.java]:[android.content.Context]:[1]:method_text:[ds)) {            fail(""Failed to setup choreographer tests"");        }    }    @MediumTest   ])', 1), ('([1:/android/permission/cts/NoCaptureVideoPermissionTest.java]:[android.content.Context]:[1]:method_text:[     *   {@link android.Manifest.permission#CAPTURE_SECURE_VIDEO_OUTPUT}.     */    @SmallTest   ])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[android.content.Context]:[1]:method_text:[ctivateDeviceAdminActivity();        } finally {            super.tearDown();        }    }   ])', 1), ('([1:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[android.content.Context]:[1]:method_text:[        sInstrumentation.runOnMainSync(() -> mShortcutTargetActivity.finish());        }    }   ])', 1), ('([1:/android/net/wifi/cts/MulticastLockTest.java]:[android.content.Context]:[1]:method_text:[TAG = ""MulticastLockTest"";    /**     * Verify acquire and release of Multicast locks     */   ])', 1), ('([1:/android/text/cts/BidiFormatterTest.java]:[getInstance()]:[1]:method_text:[);        assertEquals(RTL_FMT, BidiFormatter.getInstance(Locale.forLanguageTag(""ar"")));    }   ])', 1), ('([1:/android/mediapc/cts/EncoderInitializationLatencyTest.java]:[android.content.Context]:[1]:method_text:[s the stats min, max, avg     * of the encoder initialization latencies.     */    @LargeTest   ])', 1), ('([1:/android/renderscript/cts/refocus/RefocusTest.java]:[android.content.Context]:[1]:method_text:[c class RefocusTest extends RSBaseCompute {    /**     * Test the orignal refocus code     */   ])', 1), ('([1:/test/java/com/android/eventlib/events/deviceadminreceivers/DeviceAdminSystemUpdatePendingEventTest.java]:[android.content.Context]:[1]:method_text:[minReceiver {    }    @Before    public void setUp() {        EventLogs.resetLogs();    }   ])', 1), ('([1:/android/uirendering/cts/testclasses/AlphaBlendTest.java]:[android.content.Context]:[1]:method_text:[     * alpha blends correctly with a BLACK parent (without using an offscreen surface).     */   ])', 1), ('([1:/test/java/com/android/eventlib/events/activities/ActivityStoppedEventTest.java]:[android.content.Context]:[1]:method_text:[Y_CLASS_NAME;    }    @Before    public void setUp() {        EventLogs.resetLogs();    }   ])', 1), ('([1:/android/cts/backup/fullbackupapp/FullbackupTest.java]:[android.content.Context]:[1]:method_text:[r, ""file_to_backup"");        mDoBackupFile2 = new File(normalFolder, ""file_to_backup2"");    }   ])', 1), ('([1:/android/security/cts/StagefrightTest.java]:[getInstance()]:[1]:method_text:[     t.join();        policy.setCleartextTrafficPermitted(false);        server.join();    }   ])', 1), (""([1:/android/security/cts/StagefrightTest.java]:[getInstance()]:[1]:method_text:[or thread to exit so we're sure the player was released    }    /*     * b/135207745     */   ])"", 1), ('([1:/android/security/cts/StagefrightTest.java]:[android.content.Context]:[1]:method_text:[ore any existing test methods     ***********************************************************/   ])', 1), ('([1:/android/media/cts/AudioRecordSharedAudioTest.java]:[android.content.Context]:[1]:method_text:[               .dropShellPermissionIdentity();        clearAudioserverPermissionCache();    }   ])', 1), ('([8:/android/telephony/cts/PhoneNumberUtilsTest.java]:[getInstance()]:[8]:method_text:[  assertEquals(PhoneNumberUtils.TOA_Unknown, PhoneNumberUtils.toaFromString(""88888888""));    }   ])', 1), ('([1:/android/telephony/cts/PhoneNumberUtilsTest.java]:[android.content.Context]:[1]:method_text:[ tearDown() throws Exception {        PhoneNumberUtils.setMinMatchForTest(mOldMinMatch);    }   ])', 1), ('([1:/android/appsearch/app/a/AppSearchStorageAugmenterDeviceTest.java]:[android.content.Context]:[1]:method_text:[nner.RunWith;@RunWith(AndroidJUnit4.class)public class AppSearchStorageAugmenterDeviceTest {   ])', 1), ('([1:/android/mediadrm/cts/MediaPlayerDrmTest.java]:[android.content.Context]:[1]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[android.content.Context]:[1]:method_text:[mContentResolver = mContext.getContentResolver();        mUserId = mContext.getUserId();    }   ])', 1), ('([1:/com/android/cts/managedprofile/CrossProfileWidgetPrimaryUserTest.java]:[android.content.Context]:[1]:method_text:[ = new Result(Looper.getMainLooper());        mResultMessenger = new Messenger(mResult);    }   ])', 1), ('([1:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[android.content.Context]:[1]:method_text:[t in the CDD. However, the tested values are     *   based on the Wi-Fi Aware protocol.     */   ])', 1), ('([1:/android/telecom/cts/ConnectionServiceTest.java]:[android.content.Context]:[1]:method_text:[lecomManager.registerPhoneAccount(TestUtils.TEST_SELF_MANAGED_PHONE_ACCOUNT_1);        }    }   ])', 1), ('([1:/android/server/wm/DisplayHashManagerTest.java]:[android.content.Context]:[1]:method_text:[entity(                () -> mDisplayHashManager.setDisplayHashThrottlingEnabled(true));    }   ])', 1), ('([1:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[android.content.Context]:[1]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([1:/android/app/cts/AppTaskTests.java]:[getInstance()]:[1]:method_text:[Tasks();    }    /**     * Launch an activity and ensure it is in the app task list.     */   ])', 1), ('([2:/android/app/cts/AppTaskTests.java]:[android.content.Context]:[2]:method_text:[Tasks();    }    /**     * Launch an activity and ensure it is in the app task list.     */   ])', 1), ('([1:/android/display/cts/DisplayTest.java]:[android.content.Context]:[1]:method_text:[     * Verify that the getDisplays method returns both a default and an overlay display.     */   ])', 1), ('([1:/android/content/cts/BroadcastReceiverTest.java]:[android.content.Context]:[1]:method_text:[    }    @Override    protected void setUp() throws Exception {        super.setUp();    }   ])', 1), ('([1:/android/content/cts/ReadableUriExtraToClipDataTest.java]:[android.content.Context]:[1]:method_text:[   }        mTestFiles.clear();        mTestFileUris.clear();        super.tearDown();    }   ])', 1), ('([1:/android/content/cts/SharedPreferencesTest.java]:[android.content.Context]:[1]:method_text:[nces getPrefs() {        return PreferenceManager.getDefaultSharedPreferences(mContext);    }   ])', 1), ('([1:/com/android/cts/crossprofilenopermissionappstest/CrossProfileAppsWithNoPermission.java]:[android.content.Context]:[1]:method_text:[sProfileApps mCrossProfileApps =            mContext.getSystemService(CrossProfileApps.class);   ])', 1), ('([1:/android/app/cts/BooleanTileServiceTest.java]:[getInstance()]:[1]:method_text:[HECK_DELAY);        }        assertEquals(state, ToggleableTestTileService.isConnected());    }}])', 1), ('([1:/android/view/animation/cts/AnimatorInflaterTest.java]:[android.content.Context]:[1]:method_text:[sertTrue(""object should be unique "" + msg + "", obj:"" + object, identityHashes.add(code));    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[android.content.Context]:[1]:method_text:[n(NORESTART_PKG, INSTANT_APP_NORESTART_URI.getHost(),                false /*enabled*/);    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofDetectionTest.java]:[android.content.Context]:[1]:method_text:[e mismatch"",                () -> runWithCaller(callerContext, () -> r.run())        );    }   ])', 1), ('([1:/android/location/cts/fine/LocationProviderBaseTest.java]:[android.content.Context]:[1]:method_text:[IES, mMock);        mLocationProvider.asProvider().setLocationProviderManager(mManager);    }   ])', 1), ('([1:/android/telephony/embms/cts/MbmsDownloadReceiverTest.java]:[android.content.Context]:[1]:method_text:[cursiveDelete(tempFileRootDir);        tempFileRootDir = null;        super.tearDown();    }   ])', 1), ('([1:/android/os/cts/powerexemption/PowerExemptionTest.java]:[android.content.Context]:[1]:method_text:[nit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class PowerExemptionTest {   ])', 1), (""([1:/android/jobscheduler/cts/shareduidtests/SharedUidTest.java]:[android.content.Context]:[1]:method_text:[ackage wouldn't cancel the jobs from other packages that use     * the same shared UID.     */   ])"", 1), ('([1:/android/server/wm/WindowContextTests.java]:[android.content.Context]:[1]:method_text:[indowContextTests */@Presubmitpublic class WindowContextTests extends WindowContextTestBase {   ])', 1), (""([1:/android/view/cts/AttachedSurfaceControlSyncTest.java]:[android.content.Context]:[1]:method_text:[ Draws a moving 10x10 green rectangle with hole punch, make sure we don't get any sync errors */   ])"", 1), ('([1:/android/database/cts/DatabaseUtilsTest.java]:[android.content.Context]:[1]:method_text:[on {        mDatabase.close();        mDatabaseFile.delete();        super.tearDown();    }   ])', 1), ('([1:/android/graphics/drawable/cts/RippleDrawableTest.java]:[android.content.Context]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/provider/cts/media/MediaStorePlacementTest.java]:[android.content.Context]:[1]:method_text:[ideo.Media.getContentUri(mVolumeName);        mValues.clear();        mExtras.clear();    }   ])', 1), ('([1:/android/util/cts/PrintWriterPrinterTest.java]:[android.content.Context]:[1]:method_text:[() throws Exception {        if (mFile.exists()) {            mFile.delete();        }    }   ])', 1), ('([1:/android/view/cts/ViewOutlineProviderTest.java]:[android.content.Context]:[1]:method_text:[Top(top);        view.setRight(right);        view.setBottom(bottom);    }    @UiThreadTest   ])', 1), ('([1:/android/server/wm/SurfaceControlViewHostTests.java]:[android.content.Context]:[1]:method_text:[oid surfaceChanged(SurfaceHolder holder, int format, int width,            int height) {    }   ])', 1), ('([1:/android/hardware/cts/SensorIntegrationTests.java]:[android.content.Context]:[1]:method_text:[to identify how the interaction     * of several clients can lead to the failing state.     */   ])', 1), ('([1:/android/app/cts/TimePickerDialogTest.java]:[android.content.Context]:[1]:method_text:[Day;                mCallbackMinute = minute;            }        };    }    @UiThreadTest   ])', 1), ('([2:/android/content/cts/ContentProviderClientTest.java]:[android.content.Context]:[2]:method_text:[gnal.isCanceled());            verify(mICancellationSignal, never()).cancel();        }    }   ])', 1), ('([1:/android/permission2/cts/NoProcessOutgoingCallPermissionTest.java]:[android.content.Context]:[1]:method_text:[cel initiated call    @AppModeFull(reason = ""Instant apps cannot start the ACTION_CALL action"")   ])', 1), ('([1:/android/cts/rscpp/RSYuvTest.java]:[android.content.Context]:[1]:method_text:[ormat);    // Test for the API 17 conversion path    // This used a uchar buffer assuming nv21   ])', 1), ('([1:/android/alarmmanager/cts/BasicApiTests.java]:[android.content.Context]:[1]:method_text:[        mContext.unregisterReceiver(mMockAlarmReceiver2);        toggleIdleMode(false);    }   ])', 1), ('([1:/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java]:[android.content.Context]:[1]:method_text:[rectReportTestHelper.flipAndAssertMicToggleOff(mUserID, mSensorPrivacyManager);        }    }   ])', 1), ('([3:/android/view/inputmethod/cts/NavigationBarColorTest.java]:[getInstance()]:[3]:method_text:[                        bitmap.getWidth(), navigationBarHeight);            }        }    }   ])', 1), ('([1:/android/view/inputmethod/cts/NavigationBarColorTest.java]:[getInstance()]:[1]:method_text:[                   DimmingTestMode.NO_DIMMING_DIALOG));    }    @FlakyTest(bugId = 148768026)   ])', 1), ('([1:/android/view/inputmethod/cts/NavigationBarColorTest.java]:[getInstance()]:[1]:method_text:[BottomNavigationBerHeight(),                        DimmingTestMode.NO_DIMMING_DIALOG));    }   ])', 1), ('([1:/android/view/inputmethod/cts/NavigationBarColorTest.java]:[getInstance()]:[1]:method_text:[omNavigationBerHeight(),                        DimmingTestMode.DIMMING_DIALOG_ABOVE_IME));    }}])', 1), ('([1:/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java]:[android.content.Context]:[1]:method_text:[TestAppJni"");    }    private static native boolean hasFsverityNative(@NonNull String path);   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodServiceStrictModeTest.java]:[android.content.Context]:[1]:method_text:[TION,            VERIFY_MODE_GET_GESTURE_DETECTOR,    })    private @interface VerifyMode {}   ])', 1), ('([1:/android/text/style/cts/ImageSpanTest.java]:[android.content.Context]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/hardware/camera2/cts/LogicalCameraDeviceTest.java]:[android.content.Context]:[1]:method_text:[agtion behaves as expected     * for logical multi-camera and non-logical multi-camera.     */   ])', 1), ('([1:/android/app/cts/AlertDialog_BuilderCursorTest.java]:[android.content.Context]:[1]:method_text:[eFile != null) {            mDatabaseFile.delete();        }        super.tearDown();    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerStartShortcutTest.java]:[android.content.Context]:[1]:method_text:[ACTIONS_MULTI = new String[]{""a3"", ""a2"", ""a1""};    /**     * Start a single activity.     */   ])', 1), ('([1:/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java]:[android.content.Context]:[1]:method_text:[ssion:     *   {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.     */    @SmallTest   ])', 1), ('([1:/android/text/method/cts/DigitsKeyListenerTest.java]:[getInstance()]:[1]:method_text:[urn ""123456""     * 14. filter ""+123456"" but dest has \'-\' before dstart, return ""123456""     */   ])', 1), ('([1:/android/text/method/cts/DigitsKeyListenerTest.java]:[getInstance()]:[1]:method_text:[ot be accepted,     *     because text view accepts minus sign iff it at the beginning.     */   ])', 1), ('([2:/android/text/method/cts/DigitsKeyListenerTest.java]:[getInstance()]:[2]:method_text:[er3);        assertSame(listener1, listener2);        assertSame(listener1, listener3);    }   ])', 1), ('([1:/android/text/cts/StaticLayoutLineBreakingTest.java]:[android.content.Context]:[1]:method_text:[,                    Spanned.SPAN_INCLUSIVE_INCLUSIVE);        }        return result;    }   ])', 1), ('([1:/android/graphics/drawable/cts/LayerDrawableTest.java]:[android.content.Context]:[1]:method_text:[esources,                BitmapFactory.decodeResource(resources, R.drawable.icon_blue));    }   ])', 1), ('([1:/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java]:[android.content.Context]:[1]:method_text:[ @After    public void pressHome() throws RemoteException {        mDevice.pressHome();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/DeviceIdentifiersTest.java]:[android.content.Context]:[1]:method_text:[E_STATE permission must receive a ""                    + ""SecurityException when invoking %s"";   ])', 1), ('([1:/android/autofillservice/cts/unittests/VisibilitySetterActionTest.java]:[android.content.Context]:[1]:method_text:[Override        protected void onLayout(boolean changed, int l, int t, int r, int b) {}    };   ])', 1), ('([3:/android/text/method/cts/LinkMovementMethodTest.java]:[getInstance()]:[3]:method_text:[thod.getInstance();        assertNotNull(method1);        assertSame(method0, method1);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java]:[android.content.Context]:[1]:method_text:[_RECEIVER_COMPONENT, mContext.getPackageName(), new Bundle());        super.tearDown();    }   ])', 1), ('([2:/android/permission/cts/NearbyDevicesRenouncePermissionTest.java]:[android.content.Context]:[2]:method_text:[teCounts() {        mLocationNoteCount = 0;        mScanNoteCount = 0;    }    @AppModeFull   ])', 1), ('([1:/android/telecom/cts/CallDiagnosticServiceTest.java]:[getInstance()]:[1]:method_text:[Active();        // Make sure UI knows.        assertCallState(mCall, Call.STATE_ACTIVE);    }}])', 1), ('([1:/android/telecom/cts/CallDiagnosticServiceTest.java]:[android.content.Context]:[1]:method_text:[ adding a call binds to the call diagnostic service.     * @throws InterruptedException     */   ])', 1), ('([1:/android/keystore/cts/AndroidKeyStoreTest.java]:[getInstance()]:[1]:method_text:[legalBlockSizeException e) {            // pass on exception as it is expected        }    }   ])', 1), ('([1:/android/quickaccesswallet/cts/WalletCardTest.java]:[android.content.Context]:[1]:method_text:[eved. Then it clears the     * preferences and asserts they can no longer be retrieved.     */   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[android.content.Context]:[1]:method_text:[       mSoundPool.release();            mSoundPool = null;            return;        }    }   ])', 1), ('([1:/android/provider/cts/contacts/Contacts_PeopleTest.java]:[android.content.Context]:[1]:method_text:[e(row, null, null);        }        mGroupRowsAdded.clear();        super.tearDown();    }   ])', 1), ('([1:/android/widget/cts/TextViewFontWeightTest.java]:[android.content.Context]:[1]:method_text:[(), fontStyle.getWeight());        assertEquals(style.isItalic(), fontStyle.isItalic());    }   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[android.content.Context]:[1]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([1:/android/alarmmanager/cts/TimeChangeTests.java]:[android.content.Context]:[1]:method_text:[e they are running        SystemUtil.runShellCommand(""settings put global auto_time 0"");    }   ])', 1), ('([1:/com/android/cts/storageapp/StorageTest.java]:[android.content.Context]:[1]:method_text:[se {    private Context getContext() {        return getInstrumentation().getContext();    }   ])', 1), ('([1:/android/edi/cts/app/ClasspathDeviceTest.java]:[android.content.Context]:[1]:method_text:[    * Collects details about all shared libraries on the device and writes them to disk.     */   ])', 1), ('([1:/android/controls/cts/CtsControlTemplateTest.java]:[android.content.Context]:[1]:method_text:[endingIntent.getActivity(context, 1, new Intent(), PendingIntent.FLAG_MUTABLE_UNAUDITED);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java]:[getInstance()]:[1]:method_text:[ finally {            mContext.unregisterReceiver(receiver);        }        return true;    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java]:[android.content.Context]:[1]:method_text:[alue.            setAirplaneModeAndWaitBroadcast(0);        }        super.tearDown();    }   ])', 1), ('([1:/android/widget/cts/TableLayoutTest.java]:[android.content.Context]:[1]:method_text:[ty = (MockTableLayout) mActivity.findViewById(R.id.table_custom_empty);    }    @UiThreadTest   ])', 1), ('([1:/android/permission/cts/NoKeyPermissionTest.java]:[android.content.Context]:[1]:method_text:[ermission:     *   {@link android.Manifest.permission#DISABLE_KEYGUARD}.     */    @SmallTest   ])', 1), ('([1:/com/android/compatibility/common/tradefed/presubmit/PresubmitSetupValidation.java]:[getInstance()]:[1]:method_text:[   * properly setup. This dependency is required for some utilities of TradeFed to work.     */   ])', 1), ('([1:/android/security/cts/MotionEventTest.java]:[android.content.Context]:[1]:method_text:[   * screen to determine approximate locations of touch events without the user knowing.     */   ])', 1), ('([1:/test/java/com/android/eventlib/events/deviceadminreceivers/DeviceAdminDisabledEventTest.java]:[android.content.Context]:[1]:method_text:[minReceiver {    }    @Before    public void setUp() {        EventLogs.resetLogs();    }   ])', 1), ('([1:/android/content/cts/IntentTest.java]:[android.content.Context]:[1]:method_text:[ MockActivity.class);        mAnotherComponentName = new ComponentName(mContext, ""tmp"");    }   ])', 1), ('([1:/com/android/cts/appwithdata/CreatePrivateDataTest.java]:[android.content.Context]:[1]:method_text:[d traffic stats.     * @throws IOException if any error occurred when creating the file     */   ])', 1), ('([1:/android/telecom/cts/CallRedirectionServiceTest.java]:[android.content.Context]:[1]:method_text:[         addRoleHolder(ROLE_CALL_REDIRECTION, mPreviousCallRedirectionPackage);        }    }   ])', 1), ('([1:/android/content/syncmanager/cts/CtsSyncManagerTest.java]:[android.content.Context]:[1]:method_text:[       24 * 60 * 60, ContentResolver.getPeriodicSyncs(account, authority).get(0).period);    }   ])', 1), ('([2:/android/security/cts/NanoAppBundleTest.java]:[android.content.Context]:[2]:method_text:[.tearDown();    }    /**     * b/113527124     */    @AsbSecurityTest(cveBugId = 77599679)   ])', 1), ('([2:/com/android/tests/silentupdate/SilentUpdateTests.java]:[android.content.Context]:[2]:method_text:[ext();    }    @After    public void tearDown() {        resetSilentUpdatesPolicy();    }   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[android.content.Context]:[1]:method_text:[  return clip;    }    /**     * Validate behavior of persistable permission grants.     */   ])', 1), ('([1:/com/android/cts/useprocess/AccessNetworkTest.java]:[android.content.Context]:[1]:method_text:[e name) {        }    }    /**     * Test that the main process has network access.     */   ])', 1), ('([1:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[android.content.Context]:[1]:method_text:[earUserRestriction(getWho(), UserManager.DISALLOW_REMOVE_USER);        super.tearDown();    }   ])', 1), ('([1:/android/location/cts/fine/SettingInjectorServiceTest.java]:[android.content.Context]:[1]:method_text:[    public void setUp() {        mContext = ApplicationProvider.getApplicationContext();    }   ])', 1), ('([1:/android/app/classloaderfactory/cts/AppComponentFactoryTest.java]:[android.content.Context]:[1]:method_text:[turn outFile;    }    private final Context mContext = InstrumentationRegistry.getContext();   ])', 1), ('([1:/android/view/cts/SearchEventTest.java]:[android.content.Context]:[1]:method_text:[ctivityRule.getActivity();        PollingCheck.waitFor(5000, mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/accessibilityservice/cts/TouchExplorerTest.java]:[android.content.Context]:[1]:method_text:[           .run();    }    /** Test a slow swipe which should initiate touch exploration. */   ])', 1), ('([1:/android/media/cts/MediaExtractorTest.java]:[android.content.Context]:[1]:method_text:[cted IOException."");        } catch (IOException e) {            // Expected.        }    }   ])', 1), ('([1:/android/media/cts/AudioSystemUsageTest.java]:[android.content.Context]:[1]:method_text:[;        mAudioManager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);    }   ])', 1), ('([1:/android/view/cts/DisplayRefreshRateTest.java]:[android.content.Context]:[1]:method_text:[  mActivity = mActivityRule.getActivity();        mFpsResult = mActivity.getFpsResult();    }   ])', 1), ('([1:/android/os/storage/cts/StorageManagerTest.java]:[android.content.Context]:[1]:method_text:[TORAGE_SERVICE);    }    @AppModeFull(reason = ""Instant apps cannot access external storage"")   ])', 1), ('([1:/android/telecom/cts/ExtendedInCallServiceTest.java]:[android.content.Context]:[1]:method_text:[lecom) {            setupConnectionService(null, FLAG_REGISTER | FLAG_ENABLE);        }    }   ])', 1), ('([1:/android/bluetooth/cts/BasicAdapterTest.java]:[android.content.Context]:[1]:method_text:[eChanged = mAdapterNameChangedlock.newCondition();        mIsAdapterNameChanged = false;    }   ])', 1), ('([1:/android/provider/cts/BlockedNumberContractTest.java]:[android.content.Context]:[1]:method_text:[}        mAddedUris.clear();        setDefaultSmsApp(false);        super.tearDown();    }   ])', 1), ('([1:/android/widget/cts/RemoteViewsTest.java]:[android.content.Context]:[1]:method_text:[ublic void tearDown() {        runShellCommand(""cmd uimode night "" + mInitialNightMode);    }   ])', 1), ('([1:/android/provider/cts/SettingsPanelTest.java]:[android.content.Context]:[1]:method_text:[ect(By.pkg(mLauncherPackage).depth(0)), TIMEOUT);    }    // Check correct package is opened   ])', 1), ('([1:/android/app/cts/AlertDialog_BuilderTest.java]:[android.content.Context]:[1]:method_text:[y();        mContext = activity;        PollingCheck.waitFor(activity::hasWindowFocus);    }   ])', 1), ('([1:/android/car/cts/CarAppFocusManagerTest.java]:[android.content.Context]:[1]:method_text:[ipLossAndAssert(                    DEFAULT_WAIT_TIMEOUT_MS, activeTypes[i]);        }    }   ])', 1), ('([1:/com/android/tests/loadingprogress/device/LoadingProgressTest.java]:[android.content.Context]:[1]:method_text:[ (mCallback != null) {            mLauncherApps.unregisterCallback(mCallback);        }    }   ])', 1), ('([1:/android/webkit/cts/GeolocationTest.java]:[getInstance()]:[1]:method_text:[ept, mRetain);        }    }    // Test loading a page and accepting the domain for one load   ])', 1), ('([5:/android/webkit/cts/GeolocationTest.java]:[getInstance()]:[5]:method_text:[igins(originCheck);        originCheck.run();    }    // Test the GeolocationPermissions API   ])', 1), ('([16:/android/webkit/cts/GeolocationTest.java]:[getInstance()]:[16]:method_text:[n();    }    // Test loading pages and checks rejecting once and rejecting the domain forever   ])', 1), ('([2:/android/webkit/cts/GeolocationTest.java]:[getInstance()]:[2]:method_text:[, falseCheck);        falseCheck.run();    }    // Test deny geolocation on insecure origins   ])', 1), ('([1:/android/webkit/cts/GeolocationTest.java]:[android.content.Context]:[1]:method_text:[ept, mRetain);        }    }    // Test loading a page and accepting the domain for one load   ])', 1), ('([1:/android/app/cts/IntentServiceTest.java]:[android.content.Context]:[1]:method_text:[own() throws Exception {        super.tearDown();        mContext.stopService(mIntent);    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_ArtistsTest.java]:[getInstance()]:[1]:method_text:[, selection, selectionArgs, null);        assertEquals(0, c.getCount());        c.close();    }}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_ArtistsTest.java]:[android.content.Context]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([1:/android/cts/backup/includeexcludeapp/DataExtractionRulesApplicabilityTest.java]:[android.content.Context]:[1]:method_text:[@Before    public void setUp() throws Exception {        mContext = getTargetContext();    }   ])', 1), ('([1:/com/android/cts/overlay/app/OverlayableTest.java]:[android.content.Context]:[1]:method_text:[ertTrue(""Failed to load overlay "" + overlayPackage, task.get(TIMEOUT, TimeUnit.SECONDS));    }   ])', 1), ('([1:/android/graphics/drawable/cts/ThemedDrawableTest.java]:[android.content.Context]:[1]:method_text:[ttr.themeType});        assertTrue(""Theme was applied correctly"", t.getInt(0, -1) == 0);    }   ])', 1), ('([1:/android/systemintents/cts/TestSystemIntents.java]:[android.content.Context]:[1]:method_text:[etInstrumentation().getContext();        mPackageManager = mContext.getPackageManager();    }   ])', 1), ('([1:/android/permission/cts/ShellPermissionTest.java]:[android.content.Context]:[1]:method_text:[oes not have any of the permissions listed in     *   {@link #BLACKLISTED_PERMISSIONS}.     */   ])', 1), ('([1:/android/provider/cts/contacts/testapp/CallLogDirectBootTest.java]:[android.content.Context]:[1]:method_text:[    mDevice = UiDevice.getInstance(getInstrumentation());        assertNotNull(mDevice);    }   ])', 1), ('([1:/android/widget/cts/SimpleCursorTreeAdapterTest.java]:[android.content.Context]:[1]:method_text:[etup() {        mContext = InstrumentationRegistry.getTargetContext();    }    @UiThreadTest   ])', 1), ('([1:/com/android/cts/profileowner/ManagementTest.java]:[android.content.Context]:[1]:method_text:[xt;import android.test.AndroidTestCase;public class ManagementTest extends AndroidTestCase {   ])', 1), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[android.content.Context]:[1]:method_text:[tStackTrace();            assertTrue(false);        }        return certificateChain;    }   ])', 1), ('([1:/android/server/wm/LocationOnScreenTests.java]:[android.content.Context]:[1]:method_text:[_SCREEN | LayoutParams.FLAG_LAYOUT_INSET_DECOR,                PixelFormat.TRANSLUCENT);    }   ])', 1), ('([1:/android/app/cts/ServiceTest.java]:[android.content.Context]:[1]:method_text:[               return super.onTransact(code, data, reply, flags);            }        }    }   ])', 1), ('([1:/android/widget/cts/CursorAdapterTest.java]:[android.content.Context]:[1]:method_text:[l;        }        mDatabase.close();        mDatabaseFile.delete();    }    @UiThreadTest   ])', 1), ('([1:/android/uirendering/cts/testclasses/ViewFadingEdgeTests.java]:[android.content.Context]:[1]:method_text:[tView.findViewById(R.id.frame_layout);        root.addView(child);        return child;    }   ])', 1), ('([1:/com/android/cts/deviceowner/HeadlessSystemUserTest.java]:[android.content.Context]:[1]:method_text:[.getSystemService(UserManager.class);        Log.d(TAG, ""setUp(): userId="" + mUserId);    }   ])', 1), ('([1:/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java]:[android.content.Context]:[1]:method_text:[    @After    public void tearDown() {        clearTestableRotationResolverService();    }   ])', 1), ('([2:/android/translation/cts/TranslationManagerTest.java]:[android.content.Context]:[2]:method_text:[xt();            app.unregisterActivityLifecycleCallbacks(mActivitiesWatcher);        }    }   ])', 1), ('([1:/android/telephony4/cts/SimRestrictedApisTest.java]:[android.content.Context]:[1]:method_text:[     * a SecurityException since the test apk is not signed by a certificate on the SIM.     */   ])', 1), ('([1:/test/java/com/android/eventlib/events/activities/ActivityCreatedEventTest.java]:[android.content.Context]:[1]:method_text:[Y_CLASS_NAME;    }    @Before    public void setUp() {        EventLogs.resetLogs();    }   ])', 1), ('([1:/android/widget/cts/FrameLayout_LayoutParamsTest.java]:[android.content.Context]:[1]:method_text:[stUtils.beginDocument(parser, ""LinearLayout"");        return Xml.asAttributeSet(parser);    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[android.content.Context]:[1]:method_text:[Test case 1: constructor for streaming AudioTrack, mono, 16bit at misc    // valid sample rates   ])', 1), ('([1:/android/cts/rscpp/RSBlendTest.java]:[android.content.Context]:[1]:method_text:[ative boolean blendTest(String path, int X, int Y, byte[] input, byte[] output, int optionFlag);   ])', 1), ('([1:/android/security/cts/ParcelableExceptionTest.java]:[android.content.Context]:[1]:method_text:[ass ParcelableExceptionTest extends AndroidTestCase {    @AsbSecurityTest(cveBugId = 65281159)   ])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[android.content.Context]:[1]:method_text:[ChannelSecondary = null;        }        freeSharedMemory();        super.tearDown();    }   ])', 1), ('([1:/android/preference/cts/PreferenceDataStoreTest.java]:[android.content.Context]:[1]:method_text:[re test correctness.        mManager.getSharedPreferences().edit().remove(KEY).commit();    }   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityGestureDetectorTest.java]:[android.content.Context]:[1]:method_text:[    // Start stub accessibility service.        mService = mServiceRule.enableService();    }   ])', 1), ('([1:/android/app/cts/backgroundrestrictions/BroadcastsTest.java]:[android.content.Context]:[1]:method_text:[droid.launcher.action.INSTALL_SHORTCUT"" won\'t be delivered to a runtime     * receiver.     */   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java]:[android.content.Context]:[1]:method_text:[s);        mDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());    }   ])', 1), ('([1:/android/quickaccesswallet/cts/GetWalletCardsResponseTest.java]:[android.content.Context]:[1]:method_text:[p() {        mContext = InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([1:/android/media/cts/MediaProjectionTest.java]:[android.content.Context]:[1]:method_text:[INDOW,                    new UserHandle(ActivityManager.getCurrentUser()));        });    }   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/ModifyInstallerPackageTest.java]:[android.content.Context]:[1]:method_text:[* Test that we can set the installer package name (but not the initiating package name).     */   ])', 1), ('([1:/android/server/wm/MultiDisplayActivityLaunchTests.java]:[android.content.Context]:[1]:method_text:[tsMultiDisplay());    }    /**     * Tests launching an activity on virtual display.     */   ])', 1), ('([1:/android/app/cts/UiModeManagerTest.java]:[android.content.Context]:[1]:method_text:[ set by this package at the beginning of the test.        releaseAutomotiveProjection();    }   ])', 1), ('([1:/android/widget/cts/CompoundButtonTest.java]:[android.content.Context]:[1]:method_text:[        mCompoundButton = (CompoundButton) mActivity.findViewById(R.id.compound_button);    }   ])', 1), ('([1:/android/os/cts/CrossProcessExceptionTest.java]:[android.content.Context]:[1]:method_text:[ITY_SERVICE);            am.killBackgroundProcesses(context.getPackageName());        }    }   ])', 1), ('([1:/com/android/cts/authboundkey/AuthBoundKeyAppTest.java]:[android.content.Context]:[1]:method_text:[inal String KEY_NAME = ""nice_key"";    private static final String KEYSTORE = ""AndroidKeyStore"";   ])', 1), ('([1:/android/provider/cts/media/MediaStoreNotificationTest.java]:[android.content.Context]:[1]:method_text:[NAL);        mGenericFiles = MediaStore.Files.getContentUri(MediaStore.VOLUME_EXTERNAL);    }   ])', 1), ('([1:/android/telephony/ims/cts/EabControllerTest.java]:[getInstance()]:[1]:method_text:[imes--;        } while (retryTimes > 0 && Instant.now().getEpochSecond() < expirationTime);    }}])', 1), ('([1:/android/telephony/ims/cts/EabControllerTest.java]:[android.content.Context]:[1]:method_text:[   mErrorQueue.clear();        mCompleteQueue.clear();        mCapabilityQueue.clear();    }   ])', 1), ('([1:/android/security/cts/FileIntegrityManagerTest.java]:[android.content.Context]:[1]:method_text:[ = CertificateFactory.getInstance(""X.509"");    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/app/cts/ActivityManagerApi29Test.java]:[android.content.Context]:[1]:method_text:[ * , even its capability is zero, it still has location access.     * @throws Exception     */   ])', 1), ('([1:/android/view/animation/cts/AlphaAnimationTest.java]:[android.content.Context]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/widget/cts/DatePickerTest.java]:[android.content.Context]:[1]:method_text:[de =                (DatePicker) mActivity.findViewById(R.id.date_picker_calendar_mode);    }   ])', 1), ('([1:/com/android/cts/verifier/sensors/MotionIndicatorView.java]:[android.content.Context]:[1]:method_text:[hat draws the user prompt * * The following piece of code should show how to use this view. * * ])', 1), ('([1:/android/webkit/cts/WebSettingsTest.java]:[getInstance()]:[1]:method_text:[Sync();        Thread.sleep(100); // Wait for open to be received on the icon db thread.    }   ])', 1), ('([1:/android/webkit/cts/WebSettingsTest.java]:[android.content.Context]:[1]:method_text:[>.<minor>     * Chrome/<major>.<minor>.<branch>.<build>[ Mobile] Safari/<major>.<minor>     */   ])', 1), ('([1:/android/telephony/cts/CellInfoTest.java]:[android.content.Context]:[1]:method_text:[er receives callbacks every time that new CellInfo     * is received and not otherwise.     */   ])', 1), ('([1:/android/app/cts/TaskDescriptionTest.java]:[android.content.Context]:[1]:method_text:[kActivity.class,                    false /* initialTouchMode */, false /* launchActivity */);   ])', 1), ('([1:/com/android/cts/managedprofile/DeviceIdentifiersTest.java]:[android.content.Context]:[1]:method_text:[ess device identifiers. */public class DeviceIdentifiersTest extends BaseManagedProfileTest {   ])', 1), ('([2:/android/content/wm/cts/ContextGetDisplayTest.java]:[android.content.Context]:[2]:method_text:[splayTest */@Presubmit@SmallTestpublic class ContextGetDisplayTest extends ContextTestBase {   ])', 1), ('([1:/android/view/inputmethod/cts/InlineSuggestionTest.java]:[android.content.Context]:[1]:method_text:[ew InlinePresentationSpec.Builder(            new Size(100, 100), new Size(400, 100)).build();   ])', 1), ('([1:/android/security/cts/CVE_2021_0309.java]:[android.content.Context]:[1]:method_text:[ationRegistry.getContext();    boolean isVulnerable = true;    /**     * b/159145361     */   ])', 1), ('([1:/android/view/cts/TouchDelegateTest.java]:[android.content.Context]:[1]:method_text:[InstrumentationRegistry.getInstrumentation();        mInstrumentation.waitForIdleSync();    }   ])', 1), ('([1:/android/text/method/cts/MultiTapKeyListenerTest.java]:[getInstance()]:[1]:method_text:[        assertNotSame(listener4, listener3);        assertNotSame(listener4, listener1);    }   ])', 1), ('([1:/android/database/cts/SQLiteCantOpenDatabaseExceptionTest.java]:[android.content.Context]:[1]:method_text:[xception message: "" + e.getMessage());        }    }    /** DB\'s directory doesn\'t exist. */   ])', 1), ('([1:/android/content/pm/cts/FeatureTest.java]:[android.content.Context]:[1]:method_text:[;    }    /**     * Test whether device supports managed profiles as required by CDD     */   ])', 1), (""([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[android.content.Context]:[1]:method_text:[ntext();    }    /**     * Tests that another app's private data cannot be accessed.     */   ])"", 1), ('([1:/android/telephony2/cts/PhoneNumberTest.java]:[android.content.Context]:[1]:method_text:[ (IOException e) {            Log.e(TAG, ""Error managing default SMS app"", e);        }    }   ])', 1), ('([2:/android/server/wm/MultiDisplaySystemDecorationTests.java]:[android.content.Context]:[2]:method_text:[/**     * Test WallpaperService.Engine#getDisplayContext can work on secondary display.     */   ])', 1), ('([1:/android/telephony/cts/VisualVoicemailServiceTest.java]:[android.content.Context]:[1]:method_text:[ull) {                mContext.unregisterReceiver(mSmsReceiver);            }        }    }   ])', 1), ('([1:/android/app/people/cts/ConversationStatusTest.java]:[android.content.Context]:[1]:method_text:[ion {        mContext = InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/accountmanagement/AccountUtilsTest.java]:[android.content.Context]:[1]:method_text:[   mAccountManager = (AccountManager) mContext.getSystemService(Context.ACCOUNT_SERVICE);    }   ])', 1), ('([1:/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java]:[android.content.Context]:[1]:method_text:[ry.getInstrumentation().getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([1:/android/text/format/cts/TimeTest.java]:[getInstance()]:[1]:method_text:[sertEquals(expectedMonth, time.month);        assertEquals(expectedDate, time.monthDay);    }   ])', 1), ('([1:/android/location/cts/fine/GeocoderTest.java]:[android.content.Context]:[1]:method_text:[    public void setUp() {        mContext = ApplicationProvider.getApplicationContext();    }   ])', 1), ('([1:/android/cts/rscpp/RSConvolveTest.java]:[android.content.Context]:[1]:method_text:[olveTest(String path, int X, int Y, byte[] input, byte[] output, float[] coeffs, boolean is3x3);   ])', 1), ('([1:/android/hardware/cts/SensorParameterRangeTest.java]:[android.content.Context]:[1]:method_text:[ }    @AppModeFull(reason = ""Instant apps cannot have HIGH_SAMPLING_RATE_SENSORS permission."")   ])', 1), ('([1:/android/telecom/cts/DefaultDialerOperationsNoPermissionsTest.java]:[android.content.Context]:[1]:method_text:[Dialer(getInstrumentation(), mPreviousDefaultDialer);        }        super.tearDown();    }   ])', 1), ('([1:/android/telecom/cts/SimCallManagerTest.java]:[android.content.Context]:[1]:method_text:[Dialer(getInstrumentation(), mPreviousDefaultDialer);        }        super.tearDown();    }   ])', 1), ('([1:/android/location/cts/none/NoLocationPermissionTest.java]:[android.content.Context]:[1]:method_text:[ontext.getSystemService(LocationManager.class);        assertNotNull(mLocationManager);    }   ])', 1), ('([1:/android/seccomp/cts/app/SeccompDeviceTest.java]:[android.content.Context]:[1]:method_text:[ndlerThread.getLooper();        mMessenger = new Messenger(new IncomingHandler(looper));    }   ])', 1), ('([1:/android/telecom/cts/PhoneAccountOperationsTest.java]:[android.content.Context]:[1]:method_text:[Null(""Test account not deregistered."", retrievedPhoneAccount);        super.tearDown();    }   ])', 1), ('([1:/android/media/cts/PresentationSyncTest.java]:[getInstance()]:[1]:method_text:[sleep(10); }                catch (InterruptedException ignored) {}            }        }    }}])', 1), ('([1:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[android.content.Context]:[1]:method_text:[    @Before    public void setup() {        mTestAppProvider = new TestAppProvider();    }   ])', 1), ('([2:/android/autofillservice/cts/dropdown/LoginActivityTest.java]:[android.content.Context]:[2]:method_text:[tends LoginActivityCommonTestCase {    private static final String TAG = ""LoginActivityTest"";   ])', 1), ('([1:/com/android/cts/managedprofile/CrossProfileSharingTest.java]:[android.content.Context]:[1]:method_text:[ cross-profile sharing */@RunWith(AndroidJUnit4.class)public class CrossProfileSharingTest {   ])', 1), ('([1:/com/android/cts/extractnativelibs/app/noextract/ExtractNativeLibsFalseDeviceTest.java]:[android.content.Context]:[1]:method_text:[.getContext();    /** Test that the native lib dir exists but has no native lib file in it. */   ])', 1), ('([1:/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java]:[android.content.Context]:[1]:method_text:[geManager().hasSystemFeature(                PackageManager.FEATURE_SECURE_LOCK_SCREEN);    }   ])', 1), ('([1:/android/app/cts/PendingIntentTest.java]:[android.content.Context]:[1]:method_text:[ SystemClock.elapsedRealtime();            }            return mFinishResult;        }    }   ])', 1), ('([1:/android/location/cts/coarse/LocationManagerCoarseTest.java]:[android.content.Context]:[1]:method_text:[ockLocationProvider(InstrumentationRegistry.getInstrumentation(),                false);    }   ])', 1), ('([1:/android/widget/cts/LinearLayoutTest.java]:[android.content.Context]:[1]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([1:/android/content/pm/cts/PackageManagerShellCommandTest.java]:[android.content.Context]:[1]:method_text:[Manager().hasSystemFeature(                PackageManager.FEATURE_INCREMENTAL_DELIVERY);    }   ])', 1), ('([1:/android/uirendering/cts/testclasses/EdgeEffectTests.java]:[android.content.Context]:[1]:method_text:[   }, true)                .runWithVerifier(verifier);        return verifier.stretch;    }   ])', 1), ('([1:/android/database/sqlite/cts/SQLiteStatementTest.java]:[android.content.Context]:[1]:method_text:[put(""data"", BLOBS[i]);            mDatabase.insert(""blob_test"", null, values);        }    }   ])', 1), ('([1:/android/permission/cts/PermissionManagerTest.java]:[android.content.Context]:[1]:method_text:[nManagerTest {    private final Context mContext = InstrumentationRegistry.getTargetContext();   ])', 1), ('([1:/com/android/compatibility/common/deviceinfo/DeviceInfo.java]:[android.content.Context]:[1]:method_text:[.mkdirs() && !dir.isDirectory()) {            return null;        }        return dir;    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java]:[android.content.Context]:[1]:method_text:[abledRestrictions();    /**     * Test restrictions that should be enabled by default     */   ])', 1), ('([1:/android/media/cts/MediaSyncTest.java]:[android.content.Context]:[1]:method_text:[PUT);    }    /**     * Tests setPlaybackParams is handled correctly for wrong rate.     */   ])', 1), ('([1:/android/media/tv/tuner/cts/TunerDvrTest.java]:[android.content.Context]:[1]:method_text:[       if (mTuner != null) {          mTuner.close();          mTuner = null;        }    }   ])', 1), ('([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[android.content.Context]:[1]:method_text:[onRegistry.getContext();    }    /** Tests getting installed packages for the current user */   ])', 1), ('([1:/android/security/cts/VisualizerEffectTest.java]:[android.content.Context]:[1]:method_text:[r.setUp();    }    //Testing security bug: 30229821    @AsbSecurityTest(cveBugId = 30229821)   ])', 1), ('([1:/android/display/cts/VirtualDisplayTest.java]:[android.content.Context]:[1]:method_text:[ application can create a private virtual display and show     * its own windows on it.     */   ])', 1), ('([1:/android/view/cts/ViewGroup_MarginLayoutParamsTest.java]:[android.content.Context]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/database/sqlite/cts/SQLiteQueryBuilderTest.java]:[android.content.Context]:[1]:method_text:[rgetContext();        mDatabase.close();        context.deleteDatabase(DATABASE_FILE);    }   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[android.content.Context]:[1]:method_text:[        Typeface.MONOSPACE,            Typeface.SANS_SERIF,            Typeface.SERIF,    };   ])', 1), ('([1:/android/widget/cts/RadioGroup_LayoutParamsTest.java]:[android.content.Context]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java]:[getInstance()]:[1]:method_text:[METERS_FAMILY) {            families.put(family, false);        }        return families;    }}])', 1), ('([1:/com/android/cts/appbinding/app/MyEnabler.java]:[android.content.Context]:[1]:method_text:[ */public class MyEnabler {    private static final String TAG = ""CtsAppBindingHostTestCases"";   ])', 1), ('([1:/com/android/cts/managedprofile/CrossProfileWidgetTest.java]:[android.content.Context]:[1]:method_text:[ and verifies that     * if was added successfully and can be found inside the profile.     */   ])', 1), ('([1:/test/java/com/android/bedstead/nene/packages/PackageReferenceTest.java]:[android.content.Context]:[1]:method_text:[ Use annotations to share state instead of doing so manually        sOtherUser.remove();    }   ])', 1), ('([1:/android/telecom/cts/DefaultDialerOperationsTest.java]:[android.content.Context]:[1]:method_text:[Dialer(getInstrumentation(), mPreviousDefaultDialer);        }        super.tearDown();    }   ])', 1), ('([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[android.content.Context]:[1]:method_text:[efore    @After    public void uninstallTestApp() {        uninstallApp(TEST_APP_PKG);    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerLauncherCallbackTest.java]:[android.content.Context]:[1]:method_text:[         return true;                }            }            return false;        }    }   ])', 1), ('([1:/android/database/cts/AbstractCursorTest.java]:[android.content.Context]:[1]:method_text:[eFile.exists()) {            mDatabaseFile.delete();        }        super.tearDown();    }   ])', 1), ('([1:/android/telephony2/cts/TelephonyManagerNoPermissionTest.java]:[android.content.Context]:[1]:method_text:[AGE2,                TelephonyUtils.ENABLE_GET_CALL_STATE_PERMISSION_PROTECTION_STRING);    }   ])', 1), ('([1:/test/java/com/android/eventlib/premade/EventLibDeviceAdminReceiverTest.java]:[android.content.Context]:[1]:method_text:[ent = new Intent();    @Before    public void setUp() {        EventLogs.resetLogs();    }   ])', 1), ('([1:/android/permission/cts/BackgroundPermissionsTest.java]:[android.content.Context]:[1]:method_text:[mation();    @After    public void uninstallTestApp() {        uninstallApp(APP_PKG);    }   ])', 1), ('([1:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[android.content.Context]:[1]:method_text:[ to a network using peer to peer API.     * 3. Verify that both connections are active.     */   ])', 1)]"	"https://developer.android.com"	""	"[('android.content.Context', 398), ('getInstance()', 68)]"	"[('[android.telephony.ims.cts.ImsServiceTest beforeAllTests CtsTelephonyTestCases]', 2), ('[android.webkit.cts.GeolocationTest GeolocationTest CtsWebkitTestCases]', 2), ('[android.security.net.config.cts.TestAttributes testCleartextTrafficPermitted CtsNetSecConfigAttributeTestCases]', 1), ('[android.autofillservice.cts.commontests.TimePickerTestCase testAutoFillAndSave CtsAutoFillServiceTestCases]', 1), ('[android.webkit.cts.WebChromeClientTest testOnReceivedIcon CtsWebkitTestCases]', 1), ('[android.security.NetworkSecurityPolicyTestBase testNetworkSecurityPolicy None]', 1), ('[android.location.cts.privileged.PrivilegedLocationPermissionTest dropShellPermissionIdentity CtsLocationPrivilegedTestCases]', 1), ('[test.java.com.android.bedstead.deviceadminapp.DeviceAdminAppTest TestApis None]', 1), ('[com.android.compatibility.common.tradefed.presubmit.ApkPackageNameCheck testApkPackageNames None]', 1), ('[test.java.com.android.eventlib.premade.EventLibActivityTest TestApis None]', 1), ('[android.os.cts.CountDownTimerTest currentTimeMillis None]', 1), ('[test.java.com.android.eventlib.EventLogsTest TestApis None]', 1), ('[android.hardware.camera2.cts.CameraExtensionCharacteristicsTest getCameraListener CtsCameraTestCases]', 1), ('[android.appsecurity.cts.keyrotationtest.test.SignatureQueryServiceInstrumentationTest ServiceTestRule None]', 1), ('[android.cts.backup.preservedsettingsapp.PreservedSettingsRestoreTest adoptShellPermissionIdentity None]', 1), ('[android.media.cts.AudioManagerTest isMicrophoneMute CtsMediaTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest disableAllServices CtsAccessibilityTestCases]', 1), ('[android.text.method.cts.PasswordTransformationMethodTest testGetInstance CtsTextTestCases]', 1), ('[com.android.cts.verifier.audio.AudioFrequencyActivity OnBtnClickListener None]', 1), ('[android.permission.cts.PermissionControllerTest OnRevokeRuntimePermissionsCallback CtsPermissionTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest removeTestAppFromWhitelists CtsAppTestCases]', 1), ('[android.provider.cts.media.MediaStore_Audio_Artists_AlbumsTest testStoreAudioArtistsAlbums CtsProviderTestCases]', 1), ('[android.provider.cts.media.MediaStore_Audio_Artists_AlbumsTest testDifferentArtistInSameAlbum CtsProviderTestCases]', 1), ('[android.webkit.cts.WebViewTest testCreatingWebViewCreatesCookieSyncManager CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebViewTest WebViewTest CtsWebkitTestCases]', 1), ('[android.hardware.cts.SensorTest NullTriggerEventListener CtsSensorTestCases]', 1), ('[android.text.method.cts.ArrowKeyMovementMethodTest testGetInstance CtsTextTestCases]', 1), ('[android.hardware.cts.CameraGLTest deriveCameraIdsUnderTest CtsCameraTestCases]', 1), ('[android.server.wm.AppConfigurationTests getDefaultDisplay CtsWindowManagerDeviceTestCases]', 1), ('[android.media.cts.RingtoneTest isPlaying CtsMediaTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testPressKey CtsTextTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testReleaseKey CtsTextTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testAdjustMetaAfterKeypress CtsTextTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testResetMetaState CtsTextTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testClearMetaKeyState CtsTextTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testClearMetaKeyState2 CtsTextTestCases]', 1), ('[android.location.cts.fine.GeofencingTest currentTimeMillis CtsLocationFineTestCases]', 1), ('[android.telephony.cts.MmsTest shouldParseContentDisposition CtsTelephonyTestCases]', 1), ('[android.location.cts.privileged.GnssMeasurementRequestTest dropShellPermissionIdentity CtsLocationPrivilegedTestCases]', 1), ('[android.telephonyprovider.cts.SmsConversationTest setupTestEnvironment CtsTelephonyProviderTestCases]', 1), ('[test.java.com.android.eventlib.events.activities.ActivityPausedEventTest TestApis None]', 1), ('[android.media.cts.MediaPlayerTest exists CtsMediaTestCases]', 1), ('[android.media.cts.RoutingTest exists CtsMediaTestCases]', 1), ('[android.packageinstaller.tapjacking.cts.TapjackingTest isScreenOn CtsPackageInstallerTapjackingTestCases]', 1), ('[android.providerui.cts.MediaStoreUiTest getPersistedUriPermissions CtsProviderUiTestCases]', 1), ('[android.server.wm.StartActivityTests testStartHomeIfNoActivities CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.StartActivityTests testStartActivityContexts CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.StartActivityTests testStartActivityFromFinishingActivity CtsWindowManagerDeviceTestCases]', 1), ('[android.jobscheduler.cts.TriggerContentTest exists CtsJobSchedulerTestCases]', 1), ('[com.android.cts.documentclient.DocumentsClientTest findRootListSelector None]', 1), ('[android.text.method.cts.DateKeyListenerTest testGetInstance CtsTextTestCases]', 1), ('[android.text.method.cts.DateKeyListenerTest testDateTimeKeyListener CtsTextTestCases]', 1), ('[android.provider.cts.media.MediaStore_Audio_Genres_MembersTest testStoreAudioGenresMembersExternal CtsProviderTestCases]', 1), ('[android.cts.backup.othersoundssettingsapp.OtherSoundsSettingsTest adoptShellPermissionIdentity None]', 1), ('[android.vr.cts.VrDisplayTest VrDisplayTest CtsVrTestCases]', 1), ('[android.media.cts.MediaSessionManagerTest dropShellPermissionIdentity CtsMediaTestCases]', 1), ('[android.content.cts.ClipDescriptionTest testClassificationConfidenceValuesAreValid CtsContentTestCases]', 1), ('[com.android.cts.intent.sender.SuspendPackageTest isNotNull None]', 1), ('[test.java.com.android.bedstead.nene.users.UserReferenceTest TestApis None]', 1), ('[android.provider.cts.SearchRecentSuggestionsTest SearchRecentSuggestionsTest CtsProviderTestCases]', 1), ('[android.devicepolicy.cts.StartProfilesTest TestApis CtsDevicePolicyTestCases]', 1), ('[android.autofillservice.cts.SessionLifecycleTest SessionLifecycleTest CtsAutoFillServiceTestCases]', 1), ('[android.view.textclassifier.cts.TextViewIntegrationTest isDisplayed CtsTextClassifierTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isNotNull CtsWifiTestCases]', 1), ('[android.webkit.cts.WebHistoryItemTest testWebHistoryItem CtsWebkitTestCases]', 1), ('[android.os.cts.SeccompTest isRunningUnderEmulatedAbi None]', 1), ('[android.media.cts.RemoteControllerTest OnClientUpdateListener CtsMediaTestCases]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSms CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSmsDeliveryReportQCompat CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSmsDeliveryReportR CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSmsRSuccess CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSmsNetworkError CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelReceiveSms CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsServiceTest testProvisioningManagerRcsProvisioningChangedCallback CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsServiceTest testProvisioningManagerNotifyRcsAutoConfigurationReceived CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsServiceTest testProvisioningManagerTriggerRcsReconfiguration CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsServiceTest testProvisioningManagerSetRcsClientConfiguration CtsTelephonyTestCases]', 1), ('[com.android.cts.graphics.framerateoverride.FrameRateOverrideTestActivity DisplayListener None]', 1), ('[android.jobscheduler.cts.ExpeditedJobTest uptimeMillis CtsJobSchedulerTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest isAppStandbyEnabled CtsUsageStatsTestCases]', 1), ('[android.widget.cts.TextClockTest testUpdate12_24 CtsWidgetTestCases]', 1), ('[android.database.cts.DatabaseCursorTest exists CtsDatabaseTestCases]', 1), ('[android.permission.cts.RemovePermissionTest cleanUpTestApps CtsPermissionTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[android.dpi.cts.ConfigurationScreenLayoutTest ConfigurationScreenLayoutTest CtsDpiTestCases]', 1), ('[android.provider.cts.media.MediaStoreAudioTestHelper currentTimeMillis CtsProviderTestCases]', 1), ('[android.media.metrics.cts.MediaMetricsAtomHostSideTests turnOnForTesting None]', 1), ('[android.media.cts.ConnectionStatus isAvailable None]', 1), ('[com.android.cts.verifier.audio.RingerModeActivity isLowRamDevice None]', 1), ('[android.telephony.cts.CarrierConfigManagerTest isDataCapable CtsTelephonyTestCases]', 1), ('[android.os.storage.cts.StorageCrateTest TestName None]', 1), ('[android.widget.cts.ExpandableListViewTest getExpandableListView CtsWidgetTestCases]', 1), ('[android.telephony.cts.CarrierSignalTest TestReceiver CtsTelephonyTestCases]', 1), ('[android.alarmmanager.cts.AppStandbyTests setUpTests CtsAlarmManagerTestCases]', 1), ('[android.view.cts.ViewUnbufferedTest uptimeMillis CtsViewTestCases]', 1), ('[android.view.cts.ChoreographerNativeTest nativeTestRefreshRateCallbacksAreSyncedWithDisplayManager CtsViewTestCases]', 1), ('[android.permission.cts.NoCaptureVideoPermissionTest createVirtualDisplay CtsPermissionTestCases]', 1), ('[android.admin.cts.DeviceAdminActivationTest DeviceAdminActivationTest CtsAdminTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityShortcutTest postTestTearDown CtsAccessibilityTestCases]', 1), ('[android.text.cts.BidiFormatterTest testCachedInstances CtsTextTestCases]', 1), ('[android.mediapc.cts.EncoderInitializationLatencyTest isRPerfClass CtsMediaPerformanceClassTestCases]', 1), ('[test.java.com.android.eventlib.events.deviceadminreceivers.DeviceAdminSystemUpdatePendingEventTest TestApis None]', 1), ('[test.java.com.android.eventlib.events.activities.ActivityStoppedEventTest TestApis None]', 1), ('[android.security.cts.StagefrightTest testStagefright_bug_68342866 CtsSecurityTestCases]', 1), ('[android.security.cts.StagefrightTest testStagefright_cve_2019_1989 CtsSecurityTestCases]', 1), ('[android.security.cts.StagefrightTest TestName CtsSecurityTestCases]', 1), ('[android.media.cts.AudioRecordSharedAudioTest adoptShellPermissionIdentity CtsMediaTestCases]', 1), ('[android.telephony.cts.PhoneNumberUtilsTest testFormatMethods CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneNumberUtilsTest getMinMatchForTest CtsTelephonyTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest waitForListener CtsWifiTestCases]', 1), ('[android.server.wm.DisplayHashManagerTest SyncDisplayHashResultCallback CtsWindowManagerDeviceTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported CtsWifiTestCases]', 1), ('[android.display.cts.DisplayTest finish CtsDisplayTestCases]', 1), ('[android.content.cts.BroadcastReceiverTest BroadcastReceiverTest CtsContentTestCases]', 1), ('[android.content.cts.ReadableUriExtraToClipDataTest exists CtsContentTestCases]', 1), ('[android.app.cts.BooleanTileServiceTest testValueTracksState CtsAppTestCases]', 1), ('[android.view.animation.cts.AnimatorInflaterTest getDefaultDisplay CtsViewTestCases]', 1), ('[android.location.cts.fine.LocationProviderBaseTest currentTimeMillis CtsLocationFineTestCases]', 1), ('[android.view.cts.AttachedSurfaceControlSyncTest TestName CtsViewTestCases]', 1), ('[android.database.cts.DatabaseUtilsTest exists CtsDatabaseTestCases]', 1), ('[android.util.cts.PrintWriterPrinterTest exists CtsUtilTestCases]', 1), ('[android.server.wm.SurfaceControlViewHostTests getDisplay CtsWindowManagerDeviceTestCases]', 1), ('[android.app.cts.TimePickerDialogTest OnTimeSetListener CtsAppTestCases]', 1), ('[android.content.cts.ContentProviderClientTest isCanceled CtsContentTestCases]', 1), ('[android.view.inputmethod.cts.NavigationBarColorTest getSystemUiVisibility CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.NavigationBarColorTest testSetNavigationBarColor CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.NavigationBarColorTest testLightNavigationBar CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.NavigationBarColorTest testDimmingWindow CtsInputMethodTestCases]', 1), ('[android.app.cts.AlertDialog_BuilderCursorTest AlertDialog_BuilderCursorTest CtsAppTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerStartShortcutTest getTestContext CtsShortcutManagerTestCases]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testFilter1 CtsTextTestCases]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testDigitsKeyListener1 CtsTextTestCases]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testGetInstance1 CtsTextTestCases]', 1), ('[android.text.method.cts.LinkMovementMethodTest testGetInstance CtsTextTestCases]', 1), ('[android.permission.cts.NearbyDevicesRenouncePermissionTest isEnabled CtsPermissionTestCases]', 1), ('[android.telecom.cts.CallDiagnosticServiceTest testReceiveCallQualityReport CtsTelecomTestCases]', 1), ('[android.telecom.cts.CallDiagnosticServiceTest onDisconnect CtsTelecomTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_Encrypting_RSA_NONE_NOPADDING CtsKeystoreTestCases]', 1), ('[android.media.cts.SoundPoolTest exists CtsMediaTestCases]', 1), ('[android.widget.cts.TextViewFontWeightTest isItalic CtsWidgetTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 1), ('[android.alarmmanager.cts.TimeChangeTests isAutoTimeEnabled CtsAlarmManagerTestCases]', 1), ('[android.edi.cts.app.ClasspathDeviceTest isAtLeastS None]', 1), ('[com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest testWriteValidationFailedExceptionToParcel None]', 1), ('[com.android.compatibility.common.tradefed.presubmit.PresubmitSetupValidation testCtsPresubmit_unit_tests None]', 1), ('[test.java.com.android.eventlib.events.deviceadminreceivers.DeviceAdminDisabledEventTest TestApis None]', 1), ('[com.android.cts.useprocess.AccessNetworkTest uptimeMillis None]', 1), ('[android.accessibilityservice.cts.TouchExplorerTest EventCapturingClickListener CtsAccessibilityServiceTestCases]', 1), ('[android.media.cts.MediaExtractorTest SKIP_testNullMediaDataSourceIsRejected CtsMediaTestCases]', 1), ('[android.provider.cts.SettingsPanelTest isCar CtsProviderTestCases]', 1), ('[android.webkit.cts.GeolocationTest testSimpleGeolocationRequestAcceptAlways CtsWebkitTestCases]', 1), ('[android.webkit.cts.GeolocationTest testGeolocationPermissions CtsWebkitTestCases]', 1), ('[android.webkit.cts.GeolocationTest testSimpleGeolocationRequestReject CtsWebkitTestCases]', 1), ('[android.provider.cts.media.MediaStore_Audio_ArtistsTest testStoreAudioArtists CtsProviderTestCases]', 1), ('[android.graphics.drawable.cts.ThemedDrawableTest testAndroidTestCaseSetupProperly CtsGraphicsTestCases]', 1), ('[android.app.cts.ServiceTest uptimeMillis CtsAppTestCases]', 1), ('[android.widget.cts.CursorAdapterTest exists CtsWidgetTestCases]', 1), ('[com.android.cts.deviceowner.HeadlessSystemUserTest isHeadlessSystemUserMode None]', 1), ('[android.rotationresolverservice.cts.CtsRotationResolverServiceDeviceTest clearTestableRotationResolverService CtsRotationResolverServiceDeviceTestCases]', 1), ('[android.telephony4.cts.SimRestrictedApisTest isSimCardPresent CtsSimRestrictedApisTestCases]', 1), ('[test.java.com.android.eventlib.events.activities.ActivityCreatedEventTest TestApis None]', 1), ('[android.hardware.cts.SensorDirectReportTest isDirectChannelTypeSupported CtsSensorTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityGestureDetectorTest DisplayMetrics CtsAccessibilityServiceTestCases]', 1), ('[com.android.cts.usespermissiondiffcertapp.ModifyInstallerPackageTest asList None]', 1), ('[android.server.wm.MultiDisplayActivityLaunchTests supportsMultiDisplay CtsWindowManagerDeviceTestCases]', 1), ('[android.os.cts.CrossProcessExceptionTest isInstantApp None]', 1), ('[android.telephony.ims.cts.EabControllerTest testRequestExpiredAvailabilities CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.EabControllerTest beforeAllTests CtsTelephonyTestCases]', 1), ('[android.app.cts.ActivityManagerApi29Test clearHistory CtsAppTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessCacheMode_defaultValue CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest WebSettingsTest CtsWebkitTestCases]', 1), ('[android.telephony.cts.CellInfoTest isCamped CtsTelephonyTestCases]', 1), ('[android.content.wm.cts.ContextGetDisplayTest getDisplay CtsContentTestCases]', 1), ('[android.text.method.cts.MultiTapKeyListenerTest testGetInstance CtsTextTestCases]', 1), ('[android.server.wm.MultiDisplaySystemDecorationTests supportsMultiDisplay CtsWindowManagerDeviceTestCases]', 1), ('[com.android.cts.crossprofileappstest.CrossProfileAppsPermissionToInteractTest TestApis None]', 1), ('[android.text.format.cts.TimeTest testNormalize CtsTextTestCases]', 1), ('[android.telecom.cts.PhoneAccountOperationsTest createTestBundle CtsTelecomTestCases]', 1), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest TestApis None]', 1), ('[android.app.cts.PendingIntentTest OnFinished CtsAppTestCases]', 1), ('[android.location.cts.coarse.LocationManagerCoarseTest currentTimeMillis CtsLocationCoarseTestCases]', 1), ('[android.uirendering.cts.testclasses.EdgeEffectTests createTest CtsUiRenderingTestCases]', 1), ('[com.android.compatibility.common.deviceinfo.DeviceInfo isDirectory None]', 1), ('[com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest getDisallowedRestrictions None]', 1), ('[android.media.cts.MediaSyncTest MediaSyncTest CtsMediaTestCases]', 1), ('[android.media.tv.tuner.cts.TunerDvrTest adoptShellPermissionIdentity CtsTvTestCases]', 1), ('[android.display.cts.VirtualDisplayTest ImageListener CtsDisplayTestCases]', 1), ('[android.database.sqlite.cts.SQLiteQueryBuilderTest createStrictQueryBuilder CtsDatabaseTestCases]', 1), ('[com.android.compatibility.common.tradefed.presubmit.CtsConfigLoadingTest testConfigurationLoad None]', 1), ('[test.java.com.android.bedstead.nene.packages.PackageReferenceTest TestApis None]', 1), ('[android.telecom.cts.DefaultDialerOperationsTest isEmpty CtsTelecomTestCases]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest isEnabled CtsPermissionTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerLauncherCallbackTest isCalled CtsShortcutManagerTestCases]', 1), ('[android.database.cts.AbstractCursorTest exists CtsDatabaseTestCases]', 1), ('[test.java.com.android.eventlib.premade.EventLibDeviceAdminReceiverTest TestApis None]', 1), ('[android.permission.cts.BackgroundPermissionsTest uninstallTestApp CtsPermissionTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest isStaConcurrencyForLocalOnlyConnectionsSupported CtsWifiTestCases]', 1)]"
"2.2.1  Hardware"	"7.1.4.6"	"H-0-1"	"7.1.4.6/H-0-1"	"07010406.720001"	"""[7.1.4.6/H-0-1] MUST report whether the device     supports the GPU profiling capability via a system property     `graphics.gpu.profiler.support`.  If Handheld device implementations declare support via a system property `graphics.gpu.profiler.support`, they:  *    ["""	""	""	"GPU graphics.gpu.profiler.support"	""	""	""	""	"[('android.gputools.cts.CtsRootlessGpuDebugHostTest', 16), ('com.android.server.cts.GraphicsStatsValidationTest', 3), ('android.appmanifest.cts.UsesNativeLibraryTestCase', 3), ('android.hardware.camera2.cts.MultiViewTest', 2), ('android.graphics.cts.CameraGpuTest', 2), ('android.graphics.cts.BitmapTest', 2), ('android.security.cts.Poc17_01', 2), ('android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest', 2), ('android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest', 2), ('android.hardware.camera2.cts.CameraExtensionSessionTest', 1), ('android.SustainedPerformance.cts.SustainedPerformanceHostTest', 1), ('android.deviceconfig.cts.DeviceConfigApiPermissionTests', 1), ('android.renderscript.cts.refocus.RefocusTest', 1), ('android.graphics.cts.BasicVulkanGpuTest', 1), ('android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.graphics.cts.MediaVulkanGpuTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('com.android.compatibility.common.tradefed.presubmit.CtsConfigLoadingTest', 1), ('android.appsecurity.cts.KeySetHostTest', 1), ('com.android.cts.deviceowner.HardwarePropertiesManagerTest', 1), ('android.app.uiautomation.cts.UiAutomationTest', 1), ('android.graphics.gpuprofiling.cts.CtsFrameTracerDataSourceTest', 1), ('android.view.cts.PixelCopyTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest', 1), ('android.hardware.camera2.cts.RobustnessTest', 1), ('android.hardware.nativehardware.cts.HardwareBufferVrTest', 1), ('android.view.cts.ASurfaceControlTest', 1), ('android.graphics.cts.CameraVulkanGpuTest', 1), ('com.android.cts.deviceowner.VrTemperatureTest', 1), ('android.graphics.cts.SyncTest', 1), ('android.sensorratepermission.cts.debuggableapi31.DebuggableAPI31Test', 1), ('android.view.cts.FrameMetricsListenerTest', 1), ('android.hardware.camera2.cts.ImageReaderTest', 1), ('android.hardware.cts.HardwareBufferTest', 1), ('android.dumpsys.cts.GfxInfoDumpsysTest', 1)]"	"[('getDevice', 27), ('cleanup', 4), ('setUp', 4), ('getWidth', 3), ('getHeight', 2), ('run', 2), ('getMessage', 2), ('init', 2), ('trim', 2), ('tearDown', 2), ('stream', 2), ('data', 1), ('getFramePixels', 1), ('getContext', 1), ('getAssets', 1), ('getTime', 1), ('LogScanResult', 1), ('turnScreenOn', 1), ('getSimpleName', 1), ('setup', 1), ('teardown', 1), ('matches', 1), ('size', 1), ('getOverrideConfig', 1)]"	"[('CtsGpuToolsHostTestCases', 16), ('CtsGraphicsTestCases', 8), ('CtsCameraTestCases', 5), ('CtsGpuProfilingDataTestCases', 3), ('CtsViewTestCases', 3), ('CtsShortcutManagerTestCases', 3), ('CtsIncidentHostTestCases', 3), ('CtsSecurityBulletinHostTestCases', 2), ('CtsSustainedPerformanceHostTestCases', 1), ('CtsDeviceConfigTestCases', 1), ('CtsRenderscriptTestCases', 1), ('CtsSensorTestCases', 1), ('CtsMediaTestCases', 1), ('CtsAppSecurityHostTestCases', 1), ('CtsUiAutomationTestCases', 1), ('CtsNativeHardwareTestCases', 1), ('CtsHardwareTestCases', 1), ('CtsDumpsysHostTestCases', 1)]"	""	""	""	""	"android.dumpsys.cts.GfxInfoDumpsysTest"	"getOverrideConfig"	"CtsDumpsysHostTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/gputools/src/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 16), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/src/com/android/server/cts/GraphicsStatsValidationTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/library/src/android/appmanifest/cts/UsesNativeLibraryTestCase.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraGpuTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_01.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraExtensionSessionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/deviceconfig/src/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/refocus/RefocusTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BasicVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/DirectReportAPI30/src/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/MediaVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/KeySetHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uiautomation/src/android/app/uiautomation/cts/UiAutomationTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/PixelCopyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/nativehardware/src/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/VrTemperatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/SyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/DebuggableAPI31/src/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/FrameMetricsListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/cts/HardwareBufferTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/GfxInfoDumpsysTest.java', 1)]"	"[('(1,GPU,/android/hardware/camera2/cts/CameraExtensionSessionTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/MultiViewTest.java)', 1), ('(2,GPU,/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java)', 1), ('(1,GPU,/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java)', 1), ('(5,GPU,/android/graphics/cts/CameraGpuTest.java)', 1), ('(1,GPU,/android/renderscript/cts/refocus/RefocusTest.java)', 1), ('(2,GPU,/android/graphics/cts/BasicVulkanGpuTest.java)', 1), ('(1,GPU,/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java)', 1), ('(2,GPU,/android/graphics/cts/BitmapTest.java)', 1), ('(1,GPU,/android/hardware/cts/SensorDirectReportTest.java)', 1), ('(3,GPU,/android/security/cts/Poc17_01.java)', 1), ('(1,GPU,/android/graphics/cts/MediaVulkanGpuTest.java)', 1), ('(3,GPU,/android/media/cts/PresentationSyncTest.java)', 1), ('(1,GPU,/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java)', 1), ('(1,GPU,/android/appsecurity/cts/KeySetHostTest.java)', 1), ('(24,GPU,/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java)', 1), ('(1,graphics.gpu.profiler.support,/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java)', 1), ('(14,GPU,/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java)', 1), ('(1,GPU,/android/app/uiautomation/cts/UiAutomationTest.java)', 1), ('(2,GPU,/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java)', 1), ('(1,GPU,/android/view/cts/PixelCopyTest.java)', 1), ('(1,GPU,/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java)', 1), ('(94,GPU,/android/gputools/cts/CtsRootlessGpuDebugHostTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/RobustnessTest.java)', 1), ('(8,GPU,/com/android/server/cts/GraphicsStatsValidationTest.java)', 1), ('(2,GPU,/android/hardware/nativehardware/cts/HardwareBufferVrTest.java)', 1), ('(1,GPU,/android/view/cts/ASurfaceControlTest.java)', 1), ('(1,GPU,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(9,GPU,/com/android/cts/deviceowner/VrTemperatureTest.java)', 1), ('(2,GPU,/android/graphics/cts/SyncTest.java)', 1), ('(1,GPU,/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java)', 1), ('(5,GPU,/android/view/cts/FrameMetricsListenerTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(4,GPU,/android/appmanifest/cts/UsesNativeLibraryTestCase.java)', 1), ('(3,GPU,/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java)', 1), ('(3,GPU,/android/hardware/cts/HardwareBufferTest.java)', 1), ('(1,GPU,/android/dumpsys/cts/GfxInfoDumpsysTest.java)', 1)]"	"[('([1:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[GPU]:[1]:method_text:[epeating with multi frame capture on all supported extensions.    // Verify still frame output.   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[ify the Bitmap     * from the first TextureView is identical to the second TextureView.     */   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[    }    /*     * Verify behavior of sharing surfaces within one OutputConfiguration     */   ])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[GPU]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");    }   ])', 1), ('([1:/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java]:[GPU]:[1]:method_text:[      Exception e) {        violations.append(message).append("": "").append(e).append(""\\n"");    }}])', 1), ('([4:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[4]:method_text:[> mActivityRule =            new ActivityTestRule<>(CameraGpuCtsActivity.class, false, false);   ])', 1), ('([1:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[1]:method_text:[e.launchActivity(null);        activity.waitToFinishRendering();        activity.finish();    }}])', 1), ('([1:/android/renderscript/cts/refocus/RefocusTest.java]:[GPU]:[1]:method_text:[+                context.getResources().getResourceEntryName(resID));        return path;    }}])', 1), ('([2:/android/graphics/cts/BasicVulkanGpuTest.java]:[GPU]:[2]:method_text:[rmat;    public BasicVulkanGpuTest(String name, int format) {        mFormat = format;    }   ])', 1), ('([1:/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java]:[GPU]:[1]:method_text:[                        > SensorRatePermissionDirectReportTestHelper.CAPPED_SAMPLE_RATE_HZ);    }])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[ hwBuffer2.getLayers());        assertEquals(hwBuffer.getUsage(), hwBuffer2.getUsage());    }   ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[tory.Options();        options.inPreferredConfig = Config.HARDWARE;        return options;    }}])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[GPU]:[1]:method_text:[der.nativeOrder());        return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned    }}])', 1), ('([1:/android/security/cts/Poc17_01.java]:[GPU]:[1]:method_text:[ls.runPoc(""CVE-2016-8426"", getDevice(), 60);        }    }    /**     *  b/31799885     */   ])', 1), ('([2:/android/security/cts/Poc17_01.java]:[GPU]:[2]:method_text:[ls.runPoc(""CVE-2016-8427"", getDevice(), 60);        }    }    /**     *  b/31993456     */   ])', 1), ('([1:/android/graphics/cts/MediaVulkanGpuTest.java]:[GPU]:[1]:method_text:[map.getWidth(),                         bitmap.getHeight());        return framePixels;    }   ])', 1), ('([3:/android/media/cts/PresentationSyncTest.java]:[GPU]:[3]:method_text:[sleep(10); }                catch (InterruptedException ignored) {}            }        }    }}])', 1), ('([1:/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java]:[GPU]:[1]:method_text:[ * -> Exclude deprecated ApkInstaller.     * -> Check if host-side tests are non empty.     */   ])', 1), ('([1:/android/appsecurity/cts/KeySetHostTest.java]:[GPU]:[1]:method_text:[k that an apk with an upgrade key that has no corresponding public key fails to install.     */   ])', 1), ('([24:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[GPU]:[24]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.     */   ])', 1), ('([1:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[graphics.gpu.profiler.support]:[1]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.     */   ])', 1), ('([14:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[GPU]:[14]:method_text:[ges);            oldFanSpeeds = fanSpeeds;            oldCpuUsages = cpuUsages;        }    }}])', 1), ('([1:/android/app/uiautomation/cts/UiAutomationTest.java]:[GPU]:[1]:method_text:[entation getInstrumentation() {        return InstrumentationRegistry.getInstrumentation();    }}])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[GPU]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                FEATURE_WATCH, FEATURE_TELEVISION);    }   ])', 1), ('([1:/android/view/cts/PixelCopyTest.java]:[GPU]:[1]:method_text:[se();                    } catch (Throwable t) {}                }            }        }    }}])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java]:[GPU]:[1]:method_text:[           assertEquals(""title3"", s.getShortLabel());                    });        });    }   ])', 1), ('([30:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[30]:method_text:[es layers to our debuggable app and ensures they are     * loaded in the correct order.     */   ])', 1), (""([6:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[6]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.     */   ])"", 1), ('([1:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[1]:method_text:[not enumerate layers in base     * directory if enable_gpu_debug_layers is not enabled.     */   ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[e apps do not enumerate layers in base     * directory if gpu_debug_app does not match.     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[e apps do not enumerate layers in base     * directory if gpu_debug_layers are not set.     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[     * This test ensures we can still use properties if no layer specified via Settings     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[    /**     * This test ensures system properties are ignored if Settings load a layer     */   ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[  /**     * This test ensures a debuggable app can load layers from an external package     */   ])', 1), (""([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.     */   ])"", 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[not enumerate layers in base     * directory if enable_gpu_debug_layers is not enabled.     */   ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[S apps do not enumerate layers in base     * directory if gpu_debug_app does not match.     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[S apps do not enumerate layers in base     * directory if gpu_debug_layers are not set.     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**     * This test ensures we can still use properties if no GLES layers are specified     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**     * This test ensures system properties are ignored if Settings load a GLES layer     */   ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[/**     * This test ensures that external GLES layers can be loaded by a debuggable app     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[ppStartTime);        Assert.assertTrue(GLES_LAYER_C + "" was not loaded"", glesResult.found);    }}])', 1), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[GPU]:[2]:method_text:[processable mandatory stream combinations are     * present and advertised accordingly.     */   ])', 1), ('([1:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[1]:method_text:[eyevent KEYCODE_WAKEUP"");        getDevice().executeShellCommand(""wm dismiss-keyguard"");    }   ])', 1), ('([4:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[4]:method_text:[e[0] = """";            origRefreshRate[1] = """";        }        return origRefreshRate;    }   ])', 1), ('([3:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[3]:method_text:[tStatsEnd());                latest = proto;            }        }        return latest;    }}])', 1), ('([2:/android/hardware/nativehardware/cts/HardwareBufferVrTest.java]:[GPU]:[2]:method_text:[s(format, buffer.getFormat());            assertEquals(flags, buffer.getUsage());        }    }}])', 1), ('([1:/android/view/cts/ASurfaceControlTest.java]:[GPU]:[1]:method_text:[                        return pixelCount == 0;                    }                });    }   ])', 1), ('([1:/android/graphics/cts/CameraVulkanGpuTest.java]:[GPU]:[1]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([9:/com/android/cts/deviceowner/VrTemperatureTest.java]:[GPU]:[9]:method_text:[inThrottlingThresholds, skinShutdownThresholds,                skinVrThrottlingThresholds);    }}])', 1), ('([2:/android/graphics/cts/SyncTest.java]:[GPU]:[2]:method_text:[er    public void teardown() throws Throwable {        EGL14.eglTerminate(mEglDisplay);    }   ])', 1), ('([1:/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java]:[GPU]:[1]:method_text:[ecurityException"");        } catch (SecurityException e) {            // Expected        }    }])', 1), ('([5:/android/view/cts/FrameMetricsListenerTest.java]:[GPU]:[5]:method_text:[rawFrameMetric,                (firstDrawFrameMetric == 0) || (firstDrawFrameMetric == 1));    }}])', 1), ('([2:/android/hardware/camera2/cts/ImageReaderTest.java]:[GPU]:[2]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 1), ('([2:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[2]:method_text:[package manager is the same as     * the public.libraries*.txt files in the partitions.     */   ])', 1), ('([1:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[1]:method_text:[iredLibs, optionalLibs, availableLibs, unavailableLibs)));        runInstalledTestApp();    }   ])', 1), ('([1:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[1]:method_text:[quiredLibs, optionalLibs, availableLibs, unavailableLibs)));        runInstalledTestApp();    }}])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[2]:method_text:[at=PNG,""                + ""icon_quality=100"";    }    @AsbSecurityTest(cveBugId = 109824443)   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[1]:method_text:[name mismatch"",                () -> runWithCaller(callerContext, () -> r.run())        );    }}])', 1), ('([3:/android/hardware/cts/HardwareBufferTest.java]:[GPU]:[3]:method_text:[        1, HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE | HardwareBuffer.USAGE_GPU_COLOR_OUTPUT));    }}])', 1), ('([1:/android/dumpsys/cts/GfxInfoDumpsysTest.java]:[GPU]:[1]:method_text:[  foundAtLeastOneRow = true;            }        }        assertTrue(foundAtLeastOneRow);    }}])', 1)]"	""	""	"[('GPU', 60), ('graphics.gpu.profiler.support', 1)]"	"[('[android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest isEmpty CtsGpuProfilingDataTestCases]', 2), ('[android.hardware.camera2.cts.CameraExtensionSessionTest testConcurrentSessions CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testTextureImageWriterReaderOperation CtsCameraTestCases]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis CtsSustainedPerformanceHostTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigPublicNamespacesWithoutReadPermission CtsDeviceConfigTestCases]', 1), ('[android.graphics.cts.CameraGpuTest testCameraImageCaptureAndRendering CtsGraphicsTestCases]', 1), ('[android.renderscript.cts.refocus.RefocusTest testNewRefocus CtsRenderscriptTestCases]', 1), ('[android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test testSamplingRateMicToggleOffOnOff None]', 1), ('[android.graphics.cts.BitmapTest testWrapHardwareBufferWithRgbBufferButNonRgbColorSpaceFails CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkCompressBadParameter CtsGraphicsTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8426 CtsSecurityBulletinHostTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8427 CtsSecurityBulletinHostTestCases]', 1), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.appsecurity.cts.KeySetHostTest testBadUpgradeMissingPubKey CtsAppSecurityHostTestCases]', 1), ('[com.android.cts.deviceowner.HardwarePropertiesManagerTest testHardwarePropertiesManager None]', 1), ('[android.app.uiautomation.cts.UiAutomationTest testCallingPublicAPIsWithDontUseAccessibilityFlag_shouldNotThrowException CtsUiAutomationTestCases]', 1), ('[android.view.cts.PixelCopyTest testBufferQueueCrop CtsViewTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest currentTimeMillis CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testInjectLayerLoadVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testReleaseLayerLoadGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testMultipleExternalApps CtsGpuToolsHostTestCases]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables CtsCameraTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest killTestApp CtsIncidentHostTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testJankyDrawFrame CtsIncidentHostTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testDaveyDrawFrame CtsIncidentHostTestCases]', 1), ('[android.hardware.nativehardware.cts.HardwareBufferVrTest testLayeredBuffersForVr CtsNativeHardwareTestCases]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_setBufferOpaque_transparent CtsViewTestCases]', 1), ('[com.android.cts.deviceowner.VrTemperatureTest testVrTemperatures None]', 1), ('[android.sensorratepermission.cts.debuggableapi31.DebuggableAPI31Test testDirectChannel None]', 1), ('[android.view.cts.FrameMetricsListenerTest testDropCount CtsViewTestCases]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected CtsCameraTestCases]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase getTestInformation None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase testNewAppDependsOnSomePublicLibraries None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase testNewAppOptionallyDependsOnSomePublicLibraries None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.hardware.cts.HardwareBufferTest testIsSupported CtsHardwareTestCases]', 1), ('[android.dumpsys.cts.GfxInfoDumpsysTest testGfxinfoFramestats CtsDumpsysHostTestCases]', 1)]"
"7.4.5.3  Captive Portals"	"7.4.5.3"	"C-1-1"	"7.4.5.3/C-1-1"	"07040503.670101"	"""C-1-1] MUST provide a captive portal application to handle the intent     [`ACTION_CAPTIVE_PORTAL_SIGN_IN`](https://developer.android.com/reference/android/net/ConnectivityManager#ACTION_CAPTIVE_PORTAL_SIGN_IN)     and display the captive portal login page, by sending that intent, on     call to the System API     `ConnectivityManager#startCaptivePortalApp(Network, Bundle)`. """	""	""	"ACTION_CAPTIVE_PORTAL_SIGN_IN"	""	""	""	""	"[('android.net.wifi.cts.WifiManagerTest', 1)]"	""	"[('CtsWifiTestCases', 1)]"	""	""	""	""	"android.net.wifi.cts.WifiManagerTest"	""	"CtsWifiTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 1)]"	"[('(1,ACTION_CAPTIVE_PORTAL_SIGN_IN,/android/net/wifi/cts/WifiManagerTest.java)', 1)]"	"[('([1:/android/net/wifi/cts/WifiManagerTest.java]:[ACTION_CAPTIVE_PORTAL_SIGN_IN]:[1]:method_text:[unctionality.  The permission is intended to be granted to only the device setup wizard.     */   ])', 1)]"	"https://developer.android.com"	""	"[('ACTION_CAPTIVE_PORTAL_SIGN_IN', 1)]"	"[('[android.net.wifi.cts.WifiManagerTest testNetworkSettingsPermission CtsWifiTestCases]', 1)]"
"7.3.13  Hinge Angle Sensor"	"7.3.13"	"C-1-2"	"7.3.13/C-1-2"	"07031300.670102"	"""C-1-2] MUST support at least two readings between 0 and 360 degrees     (inclusive i.e including 0 and 360 degrees). """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"2.2.1  Hardware"	"7.1.1.1"	"H-2-1"	"7.1.1.1/H-2-1"	"07010101.720201"	"""[7.1.1.1/H-2-1]* MUST make the logical screen that is made available for third party applications be at least 2.7 inches on the short edge(s). Devices which launched on an API level earlier than that of this document are exempted from this requirement.  If Handheld device implementations claim support for high dynamic range displays through [`Configuration.isScreenHdr()` ](https://developer.android.com/reference/android/content/res/Configuration.html#isScreenHdr%28%29) , they:  *   ["""	""	""	"edge(s) Configuration.html isScreenHdr() Configuration.isScreenHdr"	""	""	""	""	"[('android.content.res.cts.ConfigurationTest', 1), ('android.opengl.cts.OpenGlEsVersionTest', 1)]"	""	"[('CtsContentTestCases', 1), ('CtsOpenGLTestCases', 1)]"	""	""	""	""	"android.opengl.cts.OpenGlEsVersionTest"	""	"CtsOpenGLTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/res/cts/ConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/opengl/src/android/opengl/cts/OpenGlEsVersionTest.java', 1)]"	"[('(3,isScreenHdr(),/android/content/res/cts/ConfigurationTest.java)', 1), ('(1,isScreenHdr(),/android/opengl/cts/OpenGlEsVersionTest.java)', 1)]"	"[('([3:/android/content/res/cts/ConfigurationTest.java]:[isScreenHdr()]:[3]:method_text:[.colorMode |= Configuration.COLOR_MODE_HDR_YES;        assertTrue(config.isScreenHdr());    }   ])', 1), ('([1:/android/opengl/cts/OpenGlEsVersionTest.java]:[isScreenHdr()]:[1]:method_text:[g.e(TAG, ""Couldn\'t initialize EGL."");        }    }    @CddTest(requirement=""7.1.4.5/C-1-4"")   ])', 1)]"	"https://developer.android.com"	""	"[('isScreenHdr()', 2)]"	"[('[android.content.res.cts.ConfigurationTest testIsScreenHdr CtsContentTestCases]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testRequiredEglExtensionsForHdrCapableDisplay CtsOpenGLTestCases]', 1)]"
"6.1  Developer Tools"	"6.1"	"C-0-11"	"6.1/C-0-11"	"06010000.670011"	"""C-0-11] MUST support the shell command `cmd testharness`. Upgrading         device implementations from an earlier Android version without a         persistent data block MAY be exempted from C-0-11.     """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"3.1.1  Android Extensions"	"3.1.1"	"C-0-2"	"3.1.1/C-0-2"	"03010100.670002"	"""C-0-2] MUST only return valid extension version number that have been     defined by the AOSP.  """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"9.11.3  Identity Credential"	"9.11.3"	"C-0-2"	"9.11.3/C-0-2"	"09110300.670002"	"""C-0-2] MUST implement the Identity Credential System (e.g. the      `android.security.identity.*` APIs) with code communicating with a trusted      application in an area that is securely isolated from the code running on      the kernel and above. Secure isolation MUST block all potential mechanisms      by which kernel or userspace code might access the internal state of the      isolated environment, including DMA.  """	""	""	"android.security.identity DMA"	""	""	""	""	"[('com.android.cts.deviceowner.CreateAndManageUserTest', 19), ('android.app.cts.DownloadManagerTest', 18), ('com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest', 13), ('android.view.inputmethod.cts.KeyboardVisibilityControlTest', 10), ('android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest', 10), ('android.appsecurity.cts.OverlayHostTest', 8), ('android.transition.cts.ChangeImageTransformTest', 8), ('android.app.cts.DownloadManagerApi28Test', 7), ('android.content.cts.ClipDescriptionTest', 6), ('android.renderscript.cts.ReduceTest', 6), ('android.autofillservice.cts.SessionLifecycleTest', 5), ('android.inputmethodservice.cts.hostside.MultiUserTest', 5), ('android.net.wifi.cts.WifiManagerTest', 5), ('android.permission.cts.NoKeyPermissionTest', 4), ('android.autofillservice.cts.dropdown.LoginActivityTest', 4), ('android.app.usage.cts.UsageStatsTest', 3), ('android.server.wm.KeyguardTests', 3), ('android.server.wm.KeyguardLockedTests', 3), ('android.server.wm.MultiDisplayClientTests', 3), ('android.bluetooth.cts.ScanFilterTest', 2), ('android.security.NetworkSecurityPolicyTestBase', 2), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 2), ('android.cts.statsdatom.memory.ProcessDmabufMemoryTests', 2), ('android.inputmethodservice.cts.devicetest.InputMethodServiceDeviceTest', 2), ('android.content.cts.AvailableIntentsTest', 2), ('android.hardware.biometrics.cts.BiometricManagerTest', 2), ('com.android.cts.instrumentationdiffcertapp.InstrumentationFailToRunTest', 2), ('android.translation.cts.UiTranslationManagerTest', 2), ('com.android.cts.usespermissiondiffcertapp.UriGrantsClipboardTest', 2), ('android.view.cts.ViewConfigurationTest', 2), ('android.view.inputmethod.cts.ImeInsetsVisibilityTest', 2), ('android.telephony.euicc.cts.EuiccManagerTest', 2), ('android.display.cts.DisplayTest', 2), ('android.content.cts.SharedPreferencesTest', 2), ('android.hardware.cts.SensorIntegrationTests', 2), ('android.telephony.cts.CdmaSmsCbProgramDataTest', 2), ('android.media.cts.MediaExtractorTest', 2), ('android.telephony.cts.SignalThresholdInfoTest', 2), ('android.security.identity.cts.ProvisioningTest', 2), ('android.media.cts.AudioTrackTest', 2), ('android.car.cts.CarAudioManagerTest', 2), ('android.telephony.cts.CellInfoTest', 2), ('android.server.wm.MultiDisplaySystemDecorationTests', 2), ('android.server.wm.WindowInsetsAnimationControllerTests', 2), ('android.telephony.ims.cts.SipDelegateManagerTest', 2), ('android.security.identity.cts.IdentityApiTest', 1), ('android.content.pm.cts.PackageManagerTest', 1), ('test.java.com.android.eventlib.premade.EventLibActivityTest', 1), ('com.android.cts.comp.provisioning.ManagedProfileProvisioningTest', 1), ('android.telecom.cts.DataObjectUnitTests', 1), ('com.android.cts.releaseparser.ApkParserTest', 1), ('android.packageinstaller.admin.cts.SessionCommitBroadcastTest', 1), ('com.android.cts.devicepolicy.MixedManagedProfileOwnerTestApi25', 1), ('android.app.cts.ActivityManagerProcessStateTest', 1), ('android.hardware.cts.SensorTest', 1), ('android.hardware.cts.CameraGLTest', 1), ('android.cts.statsdatom.binderstats.BinderStatsTests', 1), ('android.graphics.cts.TypefaceTest', 1), ('android.widget.cts.RatingBarTest', 1), ('android.content.res.cts.TypedArrayTest', 1), ('android.renderscript.cts.SamplerTest', 1), ('android.net.wifi.cts.WifiNetworkSpecifierTest', 1), ('android.media.cts.RemoteControllerTest', 1), ('android.telephony.cts.TelephonyRegistryManagerTest', 1), ('android.mediapc.cts.EncoderInitializationLatencyTest', 1), ('android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest', 1), ('android.server.wm.ActivityMetricsLoggerTests', 1), ('android.security.identity.cts.CreateItemsRequestTest', 1), ('android.graphics.cts.VulkanFeaturesTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest', 1), ('android.webkit.cts.WebSettingsTest', 1), ('android.telephony.cts.VisualVoicemailServiceTest', 1), ('android.dumpsys.cts.BatteryStatsDumpsysTest', 1), ('android.content.cts.ClipboardManagerListenerTest', 1), ('android.renderscript.cts.FieldPackerTest', 1), ('test.java.com.android.bedstead.nene.packages.PackageReferenceTest', 1), ('android.signature.cts.InterfaceChecker', 1), ('android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest', 1)]"	"[('getDevice', 25), ('setUp', 24), ('tearDown', 12), ('build', 10), ('getContext', 8), ('getInstrumentation', 7), ('printStackTrace', 7), ('getPackageManager', 6), ('getBytes', 6), ('size', 5), ('setup', 4), ('getExampleDrivingPrivilegesCbor', 4), ('end', 4), ('Builder', 4), ('getTargetContext', 3), ('getAbsoluteClassName', 3), ('resetStaticState', 2), ('run', 2), ('getWho', 2), ('release', 2), ('ByteArrayOutputStream', 2), ('CborBuilder', 2), ('addArray', 2), ('addMap', 2), ('toByteArray', 2), ('iterator', 2), ('next', 2), ('getPublicKey', 2), ('getState', 2), ('resetTransition', 2), ('notifyAll', 2), ('getMethods', 2), ('ime', 2), ('shutdown', 1), ('getComponentInfo', 1), ('wakeUp', 1), ('sleep', 1), ('setUpClass', 1), ('getPackageName', 1), ('WindowManagerStateHelper', 1), ('oneTimeSetup', 1), ('getApplicationContext', 1), ('getTranslationReplier', 1), ('enableDebugLog', 1), ('oneTimeReset', 1), ('cleanup', 1), ('resetTemporaryContentCaptureService', 1), ('resetTemporaryTranslationService', 1), ('removeUser', 1), ('supportsSecureLock', 1), ('InstallMultiple', 1), ('getCurrentUser', 1), ('getMediaDirString', 1), ('MediaExtractor', 1), ('getStatSize', 1), ('ChangeImageTransform', 1), ('getAllCellInfo', 1), ('Executor', 1), ('getSimpleName', 1), ('UnlockScreenRule', 1), ('getMediumType', 1), ('reconnect', 1), ('getSpanTypeIdInternal', 1), ('eglReleaseThread', 1), ('getFilter', 1), ('getCurrentImeTouchRegion', 1), ('keySet', 1), ('checkQueued', 1), ('entrySet', 1), ('getKey', 1), ('getValue', 1), ('stream', 1), ('negate', 1), ('getDeclaredMethods', 1), ('getModifiers', 1), ('toGenericString', 1), ('getImplInterfaces', 1), ('CancellationSignal', 1), ('LimitedErrorCollector', 1), ('types', 1), ('statusBars', 1), ('navigationBars', 1), ('setUpInputMethodManager', 1), ('tearDownInputMethodManager', 1)]"	"[('CtsAppTestCases', 19), ('CtsDevicePolicyManagerTestCases', 16), ('CtsWindowManagerDeviceTestCases', 14), ('CtsContentTestCases', 13), ('CtsTelephonyTestCases', 12), ('CtsInputMethodTestCases', 12), ('CtsAutoFillServiceTestCases', 9), ('CtsRenderscriptTestCases', 8), ('CtsWifiTestCases', 8), ('CtsAppSecurityHostTestCases', 8), ('CtsTransitionTestCases', 8), ('CtsMediaTestCases', 5), ('CtsInputMethodServiceHostTestCases', 5), ('CtsIdentityTestCases', 4), ('CtsPermissionTestCases', 4), ('CtsStatsdAtomHostTestCases', 3), ('CtsSensorTestCases', 3), ('CtsUsageStatsTestCases', 3), ('CtsBluetoothTestCases', 2), ('CtsGraphicsTestCases', 2), ('CtsHardwareTestCases', 2), ('CtsTranslationTestCases', 2), ('CtsViewTestCases', 2), ('CtsDisplayTestCases', 2), ('CtsCarTestCases', 2), ('CtsTelecomTestCases', 1), ('CtsAdminPackageInstallerTestCases', 1), ('CtsCameraTestCases', 1), ('CtsWidgetTestCases', 1), ('CtsMediaPerformanceClassTestCases', 1), ('CtsShortcutManagerTestCases', 1), ('CtsWebkitTestCases', 1), ('CtsDumpsysHostTestCases', 1)]"	""	""	""	""	"android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest"	"tearDownInputMethodManager"	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java', 19), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/DownloadManagerTest.java', 18), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java', 13), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java', 10), ('/home/gpoor/cts-12-source/cts/hostsidetests/inputmethodservice/deviceside/devicetest/src/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java', 10), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/OverlayHostTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/transition/src/android/transition/cts/ChangeImageTransformTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/app/DownloadManagerApi28Test/src/android/app/cts/DownloadManagerApi28Test.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/ReduceTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/SessionLifecycleTest.java', 5), ('/home/gpoor/cts-12-source/cts/hostsidetests/inputmethodservice/hostside/src/android/inputmethodservice/cts/hostside/MultiUserTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoKeyPermissionTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/dropdown/LoginActivityTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageStatsTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardTests.java', 3), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardLockedTests.java', 3), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MultiDisplayClientTests.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanFilterTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/netsecpolicy/src/android/security/NetworkSecurityPolicyTestBase.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/memory/ProcessDmabufMemoryTests.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/inputmethodservice/deviceside/devicetest/src/android/inputmethodservice/cts/devicetest/InputMethodServiceDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/biometrics/cts/BiometricManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/InstrumentationAppDiffCert/src/com/android/cts/instrumentationdiffcertapp/InstrumentationFailToRunTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/translation/src/android/translation/cts/UiTranslationManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/ImeInsetsVisibilityTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/EuiccManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/display/src/android/display/cts/DisplayTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/SharedPreferencesTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorIntegrationTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CdmaSmsCbProgramDataTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaExtractorTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SignalThresholdInfoTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/ProvisioningTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarAudioManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CellInfoTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MultiDisplaySystemDecorationTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationControllerTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/SipDelegateManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/IdentityApiTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/eventlib/src/test/java/com/android/eventlib/premade/EventLibActivityTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/DataObjectUnitTests.java', 1), ('/home/gpoor/cts-12-source/cts/tools/release-parser/tests/src/com/android/cts/releaseparser/ApkParserTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/packageinstaller/adminpackageinstaller/src/android/packageinstaller/admin/cts/SessionCommitBroadcastTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi25.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/cts/CameraGLTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/binderstats/BinderStatsTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/TypefaceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/RatingBarTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/res/cts/TypedArrayTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/SamplerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/RemoteControllerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyRegistryManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/EncoderInitializationLatencyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/ActivityMetricsLoggerTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/CreateItemsRequestTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/VulkanFeaturesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebSettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/VisualVoicemailServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/BatteryStatsDumpsysTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipboardManagerListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/FieldPackerTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/packages/PackageReferenceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/signature/lib/common/src/android/signature/cts/InterfaceChecker.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java', 1)]"	"[('(2,DMA,/android/bluetooth/cts/ScanFilterTest.java)', 1), ('(26,DMA,/android/security/NetworkSecurityPolicyTestBase.java)', 1), ('(2,DMA,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(15,android.security.identity,/android/security/identity/cts/IdentityApiTest.java)', 1), ('(3,DMA,/android/content/pm/cts/PackageManagerTest.java)', 1), ('(1,DMA,/test/java/com/android/eventlib/premade/EventLibActivityTest.java)', 1), ('(1,DMA,/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java)', 1), ('(3,DMA,/android/telecom/cts/DataObjectUnitTests.java)', 1), ('(9,DMA,/android/cts/statsdatom/memory/ProcessDmabufMemoryTests.java)', 1), ('(3,DMA,/com/android/cts/releaseparser/ApkParserTest.java)', 1), ('(1,DMA,/android/packageinstaller/admin/cts/SessionCommitBroadcastTest.java)', 1), ('(1,DMA,/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi25.java)', 1), ('(2,DMA,/android/app/cts/ActivityManagerProcessStateTest.java)', 1), ('(1,DMA,/android/hardware/cts/SensorTest.java)', 1), ('(4,DMA,/android/inputmethodservice/cts/devicetest/InputMethodServiceDeviceTest.java)', 1), ('(4,DMA,/android/hardware/cts/CameraGLTest.java)', 1), ('(2,DMA,/android/cts/statsdatom/binderstats/BinderStatsTests.java)', 1), ('(6,DMA,/android/graphics/cts/TypefaceTest.java)', 1), ('(2,DMA,/android/content/cts/AvailableIntentsTest.java)', 1), ('(4,DMA,/android/hardware/biometrics/cts/BiometricManagerTest.java)', 1), ('(3,DMA,/android/widget/cts/RatingBarTest.java)', 1), ('(36,DMA,/android/content/cts/ClipDescriptionTest.java)', 1), ('(2,DMA,/android/content/res/cts/TypedArrayTest.java)', 1), ('(2,DMA,/com/android/cts/instrumentationdiffcertapp/InstrumentationFailToRunTest.java)', 1), ('(3,DMA,/android/renderscript/cts/SamplerTest.java)', 1), ('(15,DMA,/android/autofillservice/cts/SessionLifecycleTest.java)', 1), ('(1,DMA,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(13,DMA,/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java)', 1), ('(22,DMA,/android/renderscript/cts/ReduceTest.java)', 1), ('(6,DMA,/android/media/cts/RemoteControllerTest.java)', 1), ('(7,DMA,/android/app/usage/cts/UsageStatsTest.java)', 1), ('(3,DMA,/android/translation/cts/UiTranslationManagerTest.java)', 1), ('(2,DMA,/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java)', 1), ('(1,DMA,/android/telephony/cts/TelephonyRegistryManagerTest.java)', 1), ('(3,DMA,/android/view/cts/ViewConfigurationTest.java)', 1), ('(5,DMA,/android/view/inputmethod/cts/ImeInsetsVisibilityTest.java)', 1), ('(2,DMA,/android/telephony/euicc/cts/EuiccManagerTest.java)', 1), ('(3,DMA,/android/mediapc/cts/EncoderInitializationLatencyTest.java)', 1), ('(1,DMA,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(7,DMA,/android/display/cts/DisplayTest.java)', 1), ('(8,DMA,/android/content/cts/SharedPreferencesTest.java)', 1), ('(1,DMA,/android/server/wm/ActivityMetricsLoggerTests.java)', 1), ('(4,DMA,/android/server/wm/KeyguardTests.java)', 1), ('(2,android.security.identity,/android/security/identity/cts/CreateItemsRequestTest.java)', 1), ('(2,DMA,/android/hardware/cts/SensorIntegrationTests.java)', 1), ('(27,DMA,/android/app/cts/DownloadManagerApi28Test.java)', 1), ('(12,DMA,/android/inputmethodservice/cts/hostside/MultiUserTest.java)', 1), ('(13,DMA,/android/server/wm/KeyguardLockedTests.java)', 1), ('(14,DMA,/android/appsecurity/cts/OverlayHostTest.java)', 1), ('(13,DMA,/android/telephony/cts/CdmaSmsCbProgramDataTest.java)', 1), ('(11,DMA,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(13,DMA,/android/permission/cts/NoKeyPermissionTest.java)', 1), ('(50,DMA,/com/android/cts/deviceowner/CreateAndManageUserTest.java)', 1), ('(2,DMA,/android/media/cts/MediaExtractorTest.java)', 1), ('(2,DMA,/android/graphics/cts/VulkanFeaturesTest.java)', 1), ('(3,DMA,/android/telephony/cts/SignalThresholdInfoTest.java)', 1), ('(1,DMA,/android/security/identity/cts/ProvisioningTest.java)', 1), ('(17,android.security.identity,/android/security/identity/cts/ProvisioningTest.java)', 1), ('(4,DMA,/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java)', 1), ('(3,DMA,/android/media/cts/AudioTrackTest.java)', 1), ('(2,DMA,/android/car/cts/CarAudioManagerTest.java)', 1), ('(11,DMA,/android/transition/cts/ChangeImageTransformTest.java)', 1), ('(2,DMA,/android/webkit/cts/WebSettingsTest.java)', 1), ('(249,DMA,/android/telephony/cts/CellInfoTest.java)', 1), ('(4,DMA,/android/server/wm/MultiDisplaySystemDecorationTests.java)', 1), ('(1,DMA,/android/telephony/cts/VisualVoicemailServiceTest.java)', 1), ('(2,DMA,/android/dumpsys/cts/BatteryStatsDumpsysTest.java)', 1), ('(25,DMA,/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java)', 1), ('(5,DMA,/android/autofillservice/cts/dropdown/LoginActivityTest.java)', 1), ('(6,DMA,/android/content/cts/ClipboardManagerListenerTest.java)', 1), ('(3,DMA,/android/renderscript/cts/FieldPackerTest.java)', 1), ('(1,DMA,/test/java/com/android/bedstead/nene/packages/PackageReferenceTest.java)', 1), ('(2,DMA,/android/signature/cts/InterfaceChecker.java)', 1), ('(1,DMA,/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java)', 1), ('(7,DMA,/android/server/wm/MultiDisplayClientTests.java)', 1), ('(2,DMA,/android/server/wm/WindowInsetsAnimationControllerTests.java)', 1), ('(3,DMA,/android/telephony/ims/cts/SipDelegateManagerTest.java)', 1), ('(76,DMA,/android/app/cts/DownloadManagerTest.java)', 1), ('(17,DMA,/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java)', 1)]"	"[('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[ion_returnsTrue"",                mPrimaryUserId,                Collections.EMPTY_MAP);    }   ])', 3), ('([4:/android/app/cts/DownloadManagerApi28Test.java]:[DMA]:[4]:method_text:[(id, 0);        } finally {            mContext.unregisterReceiver(receiver);        }    }   ])', 3), ('([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[2]:method_text:[ertWithMessage(""user on broadcasts"").that(usersOnBroadcasts).containsExactly(userHandle);    }   ])', 3), ('([1:/android/bluetooth/cts/ScanFilterTest.java]:[DMA]:[1]:method_text:[());        assertTrue(""uuid filter fails"", filter.matches(mScanResult));    }    @SmallTest   ])', 2), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[les_returnsTrue"",                mPrimaryUserId,                Collections.EMPTY_MAP);    }   ])', 2), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[ed_returnsFalse"",                mPrimaryUserId,                Collections.EMPTY_MAP);    }   ])', 2), ('([1:/android/inputmethodservice/cts/hostside/MultiUserTest.java]:[DMA]:[1]:method_text:[internal IME list upon     * IME APK installation for instant apps.     */    @AppModeInstant   ])', 2), ('([3:/android/permission/cts/NoKeyPermissionTest.java]:[DMA]:[3]:method_text:[ermission:     *   {@link android.Manifest.permission#DISABLE_KEYGUARD}.     */    @SmallTest   ])', 2), ('([2:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[DMA]:[2]:method_text:[                  View.GONE, TIMEOUT);            expectImeInvisible(TIMEOUT);        }    }   ])', 2), ('([1:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[DMA]:[1]:method_text:[ISIBLE);    }    @AppModeFull(reason = ""KeyguardManager is not accessible from instant apps"")   ])', 2), ('([1:/android/autofillservice/cts/dropdown/LoginActivityTest.java]:[DMA]:[1]:method_text:[Structure(""saveOnlyTest() failed"", saveRequest.structure);            throw e;        }    }   ])', 2), ('([4:/android/app/cts/DownloadManagerTest.java]:[DMA]:[4]:method_text:[ finally {                mContext.unregisterReceiver(receiver);            }        }    }   ])', 2), ('([3:/android/app/cts/DownloadManagerTest.java]:[DMA]:[3]:method_text:[        assertEquals(fileContents, rawFileContents);        assertRemoveDownload(id, 0);    }   ])', 2), ('([1:/android/security/NetworkSecurityPolicyTestBase.java]:[DMA]:[1]:method_text:[HttpOnlyWebServer.shutdown();        } finally {            super.tearDown();        }    }   ])', 1), ('([25:/android/security/NetworkSecurityPolicyTestBase.java]:[DMA]:[25]:method_text:[) {            synchronized (mLock) {                return mDone;            }        }    }}])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[DMA]:[1]:method_text:[.        getDevice().executeShellCommand(""input keyevent 3"");        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[DMA]:[1]:method_text:[ allowing failures.        executeResetPasswordWithTokenTests(/* allowFailures */ true);    }   ])', 1), ('([15:/android/security/identity/cts/IdentityApiTest.java]:[android.security.identity]:[15]:method_text:[quals;public class IdentityApiTest {    private static final String TAG = ""IdentityApiTest"";   ])', 1), ('([3:/android/content/pm/cts/PackageManagerTest.java]:[DMA]:[3]:method_text:[lPackage(EMPTY_APP_MAX_PACKAGE_NAME);        uninstallPackage(HELLO_WORLD_PACKAGE_NAME);    }   ])', 1), ('([1:/test/java/com/android/eventlib/premade/EventLibActivityTest.java]:[DMA]:[1]:method_text:[trumentedContext();    @Before    public void setUp() {        EventLogs.resetLogs();    }   ])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[DMA]:[1]:method_text:[ntent) {        return intent != null && intent.getExtras().containsKey(Intent.EXTRA_USER);    }}])', 1), ('([3:/android/telecom/cts/DataObjectUnitTests.java]:[DMA]:[3]:method_text:[Cause.describeContents());        assertEquals(cause, parcelCause);        p.recycle();    }   ])', 1), ('([1:/android/cts/statsdatom/memory/ProcessDmabufMemoryTests.java]:[DMA]:[1]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ])', 1), ('([8:/android/cts/statsdatom/memory/ProcessDmabufMemoryTests.java]:[DMA]:[8]:method_text:[(AtomTestUtils.WAIT_TIME_LONG);        return ReportUtils.getGaugeMetricAtoms(getDevice());    }}])', 1), ('([3:/com/android/cts/releaseparser/ApkParserTest.java]:[DMA]:[3]:method_text:[    /**     * Test {@link ApkParser} with an simple APK     *     * @throws Exception     */   ])', 1), ('([1:/android/packageinstaller/admin/cts/SessionCommitBroadcastTest.java]:[DMA]:[1]:method_text:[Latch.await(BROADCAST_TIMEOUT_SECS, TimeUnit.SECONDS);            return mIntent;        }    }}])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi25.java]:[DMA]:[1]:method_text:[       removeUser(mUserId);        super.tearDown();    }    @Override    @PermissionsTest   ])', 1), ('([2:/android/app/cts/ActivityManagerProcessStateTest.java]:[DMA]:[2]:method_text:[rtActivitySync(intent);        mInstrumentation.waitForIdleSync();        return activity;    }}])', 1), ('([1:/android/hardware/cts/SensorTest.java]:[DMA]:[1]:method_text:[ sensor.getFifoReservedEventCount() == 0);        }    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodServiceDeviceTest.java]:[DMA]:[1]:method_text:[ONDS.toMillis(20);    /** Test to check CtsInputMethod1 receives onCreate and onStartInput. */   ])', 1), ('([3:/android/inputmethodservice/cts/devicetest/InputMethodServiceDeviceTest.java]:[DMA]:[3]:method_text:[.isInputMethodPickerShown(), TIMEOUT,                ""InputMethod picker should be shown"");    }}])', 1), ('([4:/android/hardware/cts/CameraGLTest.java]:[DMA]:[4]:method_text:["";        // Magic key        private static final int GL_TEXTURE_EXTERNAL_OES = 0x8D65;    }}])', 1), ('([2:/android/cts/statsdatom/binderstats/BinderStatsTests.java]:[DMA]:[2]:method_text:[ugInAc() throws Exception {        getDevice().executeShellCommand(""cmd battery set ac 1"");    }}])', 1), ('([6:/android/graphics/cts/TypefaceTest.java]:[DMA]:[6]:method_text:[reversedMap.containsKey(""serif""));        assertTrue(reversedMap.containsKey(""monospace""));    }}])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[DMA]:[1]:method_text:[en url is http://web_address,     * it will open a browser window to the URL specified.     */   ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[DMA]:[1]:method_text:[nloads() {        assertCanBeHandled(new Intent(DownloadManager.ACTION_VIEW_DOWNLOADS));    }   ])', 1), ('([1:/android/hardware/biometrics/cts/BiometricManagerTest.java]:[DMA]:[1]:method_text:[Context();        mBiometricManager = mContext.getSystemService(BiometricManager.class);    }   ])', 1), ('([3:/android/hardware/biometrics/cts/BiometricManagerTest.java]:[DMA]:[3]:method_text:[.getStrings(BIOMETRIC_WEAK | DEVICE_CREDENTIAL)                        .getSettingName()));    }}])', 1), ('([3:/android/widget/cts/RatingBarTest.java]:[DMA]:[3]:method_text:[ngBar.getProgress());        assertEquals(currentStepSize, mRatingBar.getStepSize(), 0.0f);    }}])', 1), ('([1:/android/content/cts/ClipDescriptionTest.java]:[DMA]:[1]:method_text:[        mUiDevice.wakeUp();        launchActivity(MockActivity.class);    }    @UiThreadTest   ])', 1), ('([6:/android/content/cts/ClipDescriptionTest.java]:[DMA]:[6]:method_text:[+ ""\\n""                    + ""clipdata: "" + clipboardManager.getPrimaryClip());        }    }   ])', 1), ('([7:/android/content/cts/ClipDescriptionTest.java]:[DMA]:[7]:method_text:[        assertThat(clipboardManager.getPrimaryClipDescription().isStyledText()).isTrue();    }   ])', 1), ('([9:/android/content/cts/ClipDescriptionTest.java]:[DMA]:[9]:method_text:[       assertThat(clipboardManager.getPrimaryClipDescription().isStyledText()).isFalse();    }   ])', 1), ('([6:/android/content/cts/ClipDescriptionTest.java]:[DMA]:[6]:method_text:[clipboardManager.getPrimaryClip().getItemAt(0).getTextLinks())                .isNull();    }   ])', 1), ('([7:/android/content/cts/ClipDescriptionTest.java]:[DMA]:[7]:method_text:[ity(intent);        mUiDevice.wait(Until.hasObject(By.pkg(clazz.getPackageName())), 15000);    }}])', 1), ('([2:/android/content/res/cts/TypedArrayTest.java]:[DMA]:[2]:method_text:[.R.styleable.AndroidManifest_versionName));        ta.recycle();        parser.close();    }   ])', 1), ('([1:/com/android/cts/instrumentationdiffcertapp/InstrumentationFailToRunTest.java]:[DMA]:[1]:method_text:[""SecurityException not thrown"");        } catch (SecurityException expected) {        }    }   ])', 1), ('([1:/com/android/cts/instrumentationdiffcertapp/InstrumentationFailToRunTest.java]:[DMA]:[1]:method_text:[            myContext.startInstrumentation(appDiffCertInstrumentation, null, new Bundle()));    }}])', 1), ('([3:/android/renderscript/cts/SamplerTest.java]:[DMA]:[3]:method_text:[                       }                    }                }            }        }    }   ])', 1), ('([11:/android/autofillservice/cts/SessionLifecycleTest.java]:[DMA]:[11]:method_text:[ystemClock.sleep(WAIT_ACTIVITY_MS);        mUiBot.assertShownByRelativeId(ID_USERNAME);    }   ])', 1), ('([1:/android/autofillservice/cts/SessionLifecycleTest.java]:[DMA]:[1]:method_text:[(""4815162342"");        } finally {            mUiBot.resetScreenResolution();        }    }   ])', 1), ('([1:/android/autofillservice/cts/SessionLifecycleTest.java]:[DMA]:[1]:method_text:[  // Authentication should still be shown        mUiBot.assertDatasets(""authenticate2"");    }   ])', 1), ('([1:/android/autofillservice/cts/SessionLifecycleTest.java]:[DMA]:[1]:method_text:[t();        // Dataset should still be shown        mUiBot.assertDatasets(""dataset2"");    }   ])', 1), ('([1:/android/autofillservice/cts/SessionLifecycleTest.java]:[DMA]:[1]:method_text:[t();        // Dataset should still be shown        mUiBot.assertDatasets(""dataset3"");    }   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[DMA]:[1]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[rofiles_returnsTrue"",                mProfileId,                Collections.EMPTY_MAP);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[led_returnsTrue"",                mPrimaryUserId,                Collections.EMPTY_MAP);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[Enabled_returnsTrue"",                mProfileId,                Collections.EMPTY_MAP);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[n_returnsIntent"",                mPrimaryUserId,                Collections.EMPTY_MAP);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[ction_returnsIntent"",                mProfileId,                Collections.EMPTY_MAP);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[geName) {        return Collections.singletonMap(PARAM_CROSS_PROFILE_PACKAGE, packageName);    }}])', 1), ('([1:/android/renderscript/cts/ReduceTest.java]:[DMA]:[1]:method_text:[          maxIdx = idx;            }        }        return new Int2(minIdx, maxIdx);    }   ])', 1), ('([7:/android/renderscript/cts/ReduceTest.java]:[DMA]:[7]:method_text:[arrayResult = new short[] { vectorResult.x, vectorResult.y };        return arrayResult;    }   ])', 1), ('([7:/android/renderscript/cts/ReduceTest.java]:[DMA]:[7]:method_text:[putArray[1]),                              new Short2(outputArray[2], outputArray[3]) };    }   ])', 1), ('([3:/android/renderscript/cts/ReduceTest.java]:[DMA]:[3]:method_text:[          result[i % 4] = Math.min(result[i % 4], inputArray[i]);        return result;    }   ])', 1), ('([1:/android/renderscript/cts/ReduceTest.java]:[DMA]:[1]:method_text:[ + i % 4] = Math.max(result[4 + i % 4], inputArray[i]);        }        return result;    }   ])', 1), ('([3:/android/renderscript/cts/ReduceTest.java]:[DMA]:[3]:method_text:[vaRslt, rsRslt);    }    ///////////////////////////////////////////////////////////////////   ])', 1), ('([6:/android/media/cts/RemoteControllerTest.java]:[DMA]:[6]:method_text:[eParameters())) {                return true;            }        }        return false;    }}])', 1), ('([5:/android/app/usage/cts/UsageStatsTest.java]:[DMA]:[5]:method_text:[ity(clazz);        }    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[DMA]:[1]:method_text:[        mUiDevice.wakeUp();            executeShellCmd(""wm dismiss-keyguard"");        }    }   ])', 1), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[DMA]:[1]:method_text:[        } catch(Exception e) {                return true;            }        }, false);    }}])', 1), ('([1:/android/translation/cts/UiTranslationManagerTest.java]:[DMA]:[1]:method_text:[resetTemporaryContentCaptureService();        Helper.resetTemporaryTranslationService();    }   ])', 1), ('([2:/android/translation/cts/UiTranslationManagerTest.java]:[DMA]:[2]:method_text:[entResolver(),                            Settings.Secure.DEFAULT_INPUT_METHOD));        }    }}])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java]:[DMA]:[1]:method_text:[ static Context getContext() {        return InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java]:[DMA]:[1]:method_text:[clipFromClipboard);            assertWritingClipNotAllowed(clipFromClipboard);        }    }   ])', 1), ('([1:/android/telephony/cts/TelephonyRegistryManagerTest.java]:[DMA]:[1]:method_text:[d out waiting for phone state change"", result);        assertEquals(dummyState, result);    }   ])', 1), ('([2:/android/view/cts/ViewConfigurationTest.java]:[DMA]:[2]:method_text:[     assertTrue(scaledMinScalingSpanMm < 40.5); // 1.5 times the recommended size of 27mm    }   ])', 1), ('([1:/android/view/cts/ViewConfigurationTest.java]:[DMA]:[1]:method_text:[cally hardcoded to be.        assertEquals(480 * 800 * 4, vc.getMaximumDrawingCacheSize());    }}])', 1), ('([1:/android/view/inputmethod/cts/ImeInsetsVisibilityTest.java]:[DMA]:[1]:method_text:[    }    @Rule    public final UnlockScreenRule mUnlockScreenRule = new UnlockScreenRule();   ])', 1), ('([4:/android/view/inputmethod/cts/ImeInsetsVisibilityTest.java]:[DMA]:[4]:method_text:[sibility(View.GONE);        wm.addView(childViewRoot, attrs);        return childViewRoot;    }}])', 1), ('([1:/android/telephony/euicc/cts/EuiccManagerTest.java]:[DMA]:[1]:method_text:[iver != null) {            getContext().unregisterReceiver(mCallbackReceiver);        }    }   ])', 1), ('([1:/android/telephony/euicc/cts/EuiccManagerTest.java]:[DMA]:[1]:method_text:[     EuiccManager.EMBEDDED_SUBSCRIPTION_RESULT_ERROR, mCallbackReceiver.getResultCode());    }   ])', 1), ('([3:/android/mediapc/cts/EncoderInitializationLatencyTest.java]:[DMA]:[3]:method_text:[figureMs = (configureTimeStamp - baseTimeStamp) / 1000000;        return timeToConfigureMs;    }}])', 1), ('([1:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[DMA]:[1]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([5:/android/display/cts/DisplayTest.java]:[DMA]:[5]:method_text:[ after     * setUserDisabledHdrTypes is called and setAreUserDisabledHdrTypes is false.     */   ])', 1), ('([2:/android/display/cts/DisplayTest.java]:[DMA]:[2]:method_text:[s.length);        return new Point(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]));    }}])', 1), (""([5:/android/content/cts/SharedPreferencesTest.java]:[DMA]:[5]:method_text:[memory commit doesn't mutate a data structure    // still being used while writing out to disk.   ])"", 1), ('([3:/android/content/cts/SharedPreferencesTest.java]:[DMA]:[3]:method_text:[etAll());            prefsFile.delete();            prefsFileClone.delete();        }    }   ])', 1), ('([1:/android/server/wm/ActivityMetricsLoggerTests.java]:[DMA]:[1]:method_text:[       }        fail(""Expected to find \'"" + expectedLog + ""\' in "" + Arrays.toString(logs));    }}])', 1), ('([2:/android/server/wm/KeyguardTests.java]:[DMA]:[2]:method_text:[acker.close(lockScreenSession);        assertFalse(mKeyguardManager.isKeyguardLocked());    }   ])', 1), ('([1:/android/server/wm/KeyguardTests.java]:[DMA]:[1]:method_text:[wWhenLocked above a     * SHOW_WHEN_LOCKED activity is visible if Keyguard is locked.     * */   ])', 1), ('([1:/android/server/wm/KeyguardTests.java]:[DMA]:[1]:method_text:[se);        mWmState.assertVisibility(NO_INHERIT_SHOW_WHEN_LOCKED_ATTR_ACTIVITY, false);    }   ])', 1), ('([2:/android/security/identity/cts/CreateItemsRequestTest.java]:[android.security.identity]:[2]:method_text:[t java.util.Map;import co.nstant.in.cbor.CborException;public class CreateItemsRequestTest {   ])', 1), ('([1:/android/hardware/cts/SensorIntegrationTests.java]:[DMA]:[1]:method_text:[le {        verifySensorReconfigureWhileActive(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED);    }   ])', 1), ('([1:/android/hardware/cts/SensorIntegrationTests.java]:[DMA]:[1]:method_text:[ TimeUnit.SECONDS.toMicros(mGenerator.nextInt(5) + 1);        return (int) reportLatencyUs;    }}])', 1), ('([3:/android/app/cts/DownloadManagerApi28Test.java]:[DMA]:[3]:method_text:[th(AndroidJUnit4.class)public class DownloadManagerApi28Test extends DownloadManagerTestBase {   ])', 1), ('([3:/android/app/cts/DownloadManagerApi28Test.java]:[DMA]:[3]:method_text:[quals(fileContents, rawFileContents);            assertRemoveDownload(id, 0);        }    }   ])', 1), ('([7:/android/app/cts/DownloadManagerApi28Test.java]:[DMA]:[7]:method_text:[nager.addCompleted and verify that the file has been added     * to MediaStore as well.     */   ])', 1), ('([2:/android/app/cts/DownloadManagerApi28Test.java]:[DMA]:[2]:method_text:[, null, null)) {                assertEquals(0, cursor.getCount());            }        }    }}])', 1), ('([1:/android/inputmethodservice/cts/hostside/MultiUserTest.java]:[DMA]:[1]:method_text:[ IME list upon     * IME APK installation for full (non-instant) apps.     */    @AppModeFull   ])', 1), ('([2:/android/inputmethodservice/cts/hostside/MultiUserTest.java]:[DMA]:[2]:method_text:[ IME list upon     * IME APK installation for full (non-instant) apps.     */    @AppModeFull   ])', 1), ('([7:/android/inputmethodservice/cts/hostside/MultiUserTest.java]:[DMA]:[7]:method_text:[                .setTestMethodName(testInfo.testMethod)                .setUserId(userId));    }}])', 1), ('([1:/android/server/wm/KeyguardLockedTests.java]:[DMA]:[1]:method_text:[tUp() throws Exception {        super.setUp();        assumeTrue(supportsSecureLock());    }   ])', 1), ('([6:/android/server/wm/KeyguardLockedTests.java]:[DMA]:[6]:method_text:[guardManager.isDeviceLocked());        assertFalse(mKeyguardManager.isKeyguardLocked());    }   ])', 1), ('([6:/android/server/wm/KeyguardLockedTests.java]:[DMA]:[6]:method_text:[uardSecure());        } finally {            keyguardLock.reenableKeyguard();        }    }   ])', 1), ('([5:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[5]:method_text:[nd are not signed with the platform signature must not be     * installed successfully.     */   ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[1]:method_text:[dmap if the     * overlay is not signed with the same signature as the target package.     **/   ])', 1), ('([3:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[3]:method_text:[an idmap if the     * overlay is signed with the same signature as the target package.     **/   ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[1]:method_text:[eption {        assertFailToGenerateIdmap(OVERLAY_ALL_NO_NAME_APK, OVERLAY_ALL_PACKAGE);    }   ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[1]:method_text:[eption {        assertFailToGenerateIdmap(OVERLAY_PRODUCT_APK, OVERLAY_PRODUCT_PACKAGE);    }   ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[1]:method_text:[xception {        assertFailToGenerateIdmap(OVERLAY_SYSTEM_APK, OVERLAY_SYSTEM_PACKAGE);    }   ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[1]:method_text:[xception {        assertFailToGenerateIdmap(OVERLAY_VENDOR_APK, OVERLAY_VENDOR_PACKAGE);    }   ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[1]:method_text:[ap(OVERLAY_DIFFERENT_SIGNATURE_APK,                OVERLAY_DIFFERENT_SIGNATURE_PACKAGE);    }   ])', 1), ('([10:/android/telephony/cts/CdmaSmsCbProgramDataTest.java]:[DMA]:[10]:method_text:[PTION = ALERT_OPTION_NO_ALERT;    private static final String CATEGORY_NAME = ""category_name"";   ])', 1), ('([3:/android/telephony/cts/CdmaSmsCbProgramDataTest.java]:[DMA]:[3]:method_text:[OPTION, data.getAlertOption());        assertEquals(CATEGORY_NAME, data.getCategoryName());    }}])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[DMA]:[3]:method_text:[ck(capabilityCallback);            uiAutomation.dropShellPermissionIdentity();        }    }   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[DMA]:[2]:method_text:[ Verify that startTetheredHotspot with specific channel config.     * @throws Exception     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[DMA]:[3]:method_text:[fiManager#connect(int, WifiManager.ActionListener)} to an existing saved     * network.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[DMA]:[1]:method_text:[     * Tests {@link WifiManager#isConnectedMacRandomizationSupported()} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[DMA]:[2]:method_text:[**     * Tests {@link WifiManager#isPreferredNetworkOffloadSupported()} does not crash.     */   ])', 1), ('([5:/android/permission/cts/NoKeyPermissionTest.java]:[DMA]:[5]:method_text:[ermission:     *   {@link android.Manifest.permission#DISABLE_KEYGUARD}.     */    @SmallTest   ])', 1), ('([2:/android/permission/cts/NoKeyPermissionTest.java]:[DMA]:[2]:method_text:[   + "" expected"");        } catch (SecurityException e) {            // expected        }    }}])', 1), ('([3:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[3]:method_text:[earUserRestriction(getWho(), UserManager.DISALLOW_REMOVE_USER);        super.tearDown();    }   ])', 1), ('([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[2]:method_text:[eateAndManageUser();        assertWithMessage(""New user"").that(userHandle).isNotNull();    }   ])', 1), ('([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[2]:method_text:[anager.USER_OPERATION_ERROR_LOW_STORAGE,                ""user creation on low storage"");    }   ])', 1), ('([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[2]:method_text:[                     Settings.Secure.USER_SETUP_COMPLETE))                .isEqualTo(1);    }   ])', 1), ('([1:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[1]:method_text:[ZARD, ""assertSkipSetupWizard"");        PrimaryUserService.assertCrossUserCallArrived();    }   ])', 1), ('([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[2]:method_text:[ers"").that(secondaryUsers)                    .containsExactly(newUserHandle);        }    }   ])', 1), ('([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[2]:method_text:[dcasts"").that(usersOnBroadcasts).containsExactly(userHandle,                userHandle);    }   ])', 1), ('([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[2]:method_text:[       stopUserAndCheckResult(userHandle, UserManager.USER_OPERATION_ERROR_CURRENT_USER);    }   ])', 1), ('([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[2]:method_text:[ckResult(userHandle,                UserManager.USER_OPERATION_ERROR_MAX_RUNNING_USERS);    }   ])', 1), ('([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[2]:method_text:[omponentName),                UserManager.USER_OPERATION_SUCCESS, ""cannot logout user"");    }   ])', 1), ('([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[2]:method_text:[sertWithMessage(""affiliated user"").that(devicePolicyManager.isAffiliatedUser()).isTrue();    }   ])', 1), ('([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[2]:method_text:[ser"").that(devicePolicyManager.isEphemeralUser(componentName))                .isTrue();    }   ])', 1), ('([1:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[1]:method_text:[    assertWithMessage(""uninstalled system apps"").that(uninstalledPackageNames).isEmpty();    }   ])', 1), ('([8:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[8]:method_text:[serHandle;    }    // createAndManageUser should circumvent the DISALLOW_ADD_USER restriction   ])', 1), ('([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[2]:method_text:[UserRestriction(getWho(), UserManager.DISALLOW_ADD_USER);        createAndManageUser();    }   ])', 1), ('([9:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[DMA]:[9]:method_text:[{            return new ComponentName(context, SecondaryUserAdminReceiver.class);        }    }}])', 1), ('([1:/android/media/cts/MediaExtractorTest.java]:[DMA]:[1]:method_text:[cted IOException."");        } catch (IOException e) {            // Expected.        }    }   ])', 1), ('([1:/android/media/cts/MediaExtractorTest.java]:[DMA]:[1]:method_text:[ak;            }        }        assertTrue(""could not read alac mov"", totalSize > 0);    }   ])', 1), ('([2:/android/graphics/cts/VulkanFeaturesTest.java]:[DMA]:[2]:method_text:[ {            devices[i] = devicesArray.getJSONObject(i);        }        return devices;    }}])', 1), ('([2:/android/telephony/cts/SignalThresholdInfoTest.java]:[DMA]:[2]:method_text:[getPackageManager()                .hasSystemFeature(PackageManager.FEATURE_TELEPHONY));    }   ])', 1), ('([1:/android/telephony/cts/SignalThresholdInfoTest.java]:[DMA]:[1]:method_text:[ default:                return AccessNetworkConstants.AccessNetworkType.UNKNOWN;        }    }}])', 1), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[DMA]:[1]:method_text:[tStackTrace();            assertTrue(false);        }        return certificateChain;    }   ])', 1), ('([17:/android/security/identity/cts/ProvisioningTest.java]:[android.security.identity]:[17]:method_text:[tStackTrace();            assertTrue(false);        }        return certificateChain;    }   ])', 1), ('([4:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[DMA]:[4]:method_text:[                  assertTrue(getManager().updateShortcuts(list(si)));                });    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[DMA]:[1]:method_text:[Test case 1: constructor for streaming AudioTrack, mono, 16bit at misc    // valid sample rates   ])', 1), ('([2:/android/media/cts/AudioTrackTest.java]:[DMA]:[2]:method_text:[   audioTrack.removeOnCodecFormatChangedListener(listener);        audioTrack.release();    }   ])', 1), ('([1:/android/car/cts/CarAudioManagerTest.java]:[DMA]:[1]:method_text:[         .isTrue();        } finally {            injectVolumeMuteKeyEvent();        }    }   ])', 1), ('([1:/android/car/cts/CarAudioManagerTest.java]:[DMA]:[1]:method_text:[            this.groupId = groupId;            mGroupMuteChangeLatch.countDown();        }    }}])', 1), ('([2:/android/transition/cts/ChangeImageTransformTest.java]:[DMA]:[2]:method_text:[m.setDuration(500);        mTransition = mChangeImageTransform;        resetListener();    }   ])', 1), ('([1:/android/transition/cts/ChangeImageTransformTest.java]:[DMA]:[1]:method_text:[es(centerMatrix(), mStartMatrix);        verifyMatrixMatches(fitXYMatrix(), mEndMatrix);    }   ])', 1), ('([1:/android/transition/cts/ChangeImageTransformTest.java]:[DMA]:[1]:method_text:[rCropMatrix(), mStartMatrix);        verifyMatrixMatches(fitCenterMatrix(), mEndMatrix);    }   ])', 1), ('([2:/android/transition/cts/ChangeImageTransformTest.java]:[DMA]:[2]:method_text:[s(centerMatrix(), mStartMatrix);        verifyMatrixMatches(fitEndMatrix(), mEndMatrix);    }   ])', 1), ('([1:/android/transition/cts/ChangeImageTransformTest.java]:[DMA]:[1]:method_text:[fitStartMatrix(), mStartMatrix);        verifyMatrixMatches(centerMatrix(), mEndMatrix);    }   ])', 1), ('([1:/android/transition/cts/ChangeImageTransformTest.java]:[DMA]:[1]:method_text:[s(centerMatrix(), mStartMatrix);        verifyMatrixMatches(centerMatrix(), mEndMatrix);    }   ])', 1), ('([1:/android/transition/cts/ChangeImageTransformTest.java]:[DMA]:[1]:method_text:[rtEquals(identityMatrix, mStartMatrix);        assertEquals(identityMatrix, mEndMatrix);    }   ])', 1), ('([2:/android/transition/cts/ChangeImageTransformTest.java]:[DMA]:[2]:method_text:[    }        });        mInstrumentation.waitForIdleSync();        return imageViews[0];    }}])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[DMA]:[2]:method_text:[l:\\n%s"", patternString, useragent),                    patternMatcher.find());        }    }   ])', 1), ('([12:/android/telephony/cts/CellInfoTest.java]:[DMA]:[12]:method_text:[er receives callbacks every time that new CellInfo     * is received and not otherwise.     */   ])', 1), ('([237:/android/telephony/cts/CellInfoTest.java]:[DMA]:[237]:method_text:[nge"", csgInfo.getCsgIdentity() > 0                && csgInfo.getCsgIdentity() <= 0x7FFFFF);    }}])', 1), ('([1:/android/server/wm/MultiDisplaySystemDecorationTests.java]:[DMA]:[1]:method_text:[/**     * Test WallpaperService.Engine#getDisplayContext can work on secondary display.     */   ])', 1), ('([3:/android/server/wm/MultiDisplaySystemDecorationTests.java]:[DMA]:[3]:method_text:[ve() should work"",                    imm.isActive(activity.getEditText()));        });    }   ])', 1), ('([1:/android/telephony/cts/VisualVoicemailServiceTest.java]:[DMA]:[1]:method_text:[           throw rethrown;            } catch (Exception ignored) {            }        }    }}])', 1), ('([2:/android/dumpsys/cts/BatteryStatsDumpsysTest.java]:[DMA]:[2]:method_text:[3]); // unoptimizedScanMaxTime        assertInteger(parts[14]); // unoptimizedScanMaxTimeBg    }}])', 1), ('([5:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[DMA]:[5]:method_text:[onNull String marker) {        return launchTestActivity(marker, getTestMarker()).first;    }   ])', 1), ('([7:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[DMA]:[7]:method_text:[eam, hideSoftInputMatcher(), TIMEOUT);            expectImeInvisible(TIMEOUT);        }    }   ])', 1), ('([2:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[DMA]:[2]:method_text:[nishInputViewMatcher(false), TIMEOUT);            expectImeInvisible(TIMEOUT);        }    }   ])', 1), ('([3:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[DMA]:[3]:method_text:[       }    }    @AppModeFull(reason = ""KeyguardManager is not accessible from instant apps"")   ])', 1), ('([1:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[DMA]:[1]:method_text:[CIFIED);    }    @AppModeFull(reason = ""KeyguardManager is not accessible from instant apps"")   ])', 1), ('([1:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[DMA]:[1]:method_text:[HIDDEN);    }    @AppModeFull(reason = ""KeyguardManager is not accessible from instant apps"")   ])', 1), ('([1:/android/autofillservice/cts/dropdown/LoginActivityTest.java]:[DMA]:[1]:method_text:[tends LoginActivityCommonTestCase {    private static final String TAG = ""LoginActivityTest"";   ])', 1), ('([2:/android/autofillservice/cts/dropdown/LoginActivityTest.java]:[DMA]:[2]:method_text:[ mActivity.assertAutoFilled();        // clear clipboard        cm.clearPrimaryClip();    }   ])', 1), ('([6:/android/content/cts/ClipboardManagerListenerTest.java]:[DMA]:[6]:method_text:[        mActivity = getActivity();        mListener = new CountingClipChangedListener();    }   ])', 1), ('([3:/android/renderscript/cts/FieldPackerTest.java]:[DMA]:[3]:method_text:[       fp.addU8(new Short4());        fp.addU8((byte)1);        fp.addU8(new Short3());    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/packages/PackageReferenceTest.java]:[DMA]:[1]:method_text:[ Use annotations to share state instead of doing so manually        sOtherUser.remove();    }   ])', 1), ('([2:/android/signature/cts/InterfaceChecker.java]:[DMA]:[2]:method_text:[       } else {            class2Description.put(runtimeClass, classDescription);        }    }}])', 1), ('([1:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[DMA]:[1]:method_text:[ to a network using peer to peer API.     * 3. Verify that both connections are active.     */   ])', 1), ('([1:/android/server/wm/MultiDisplayClientTests.java]:[DMA]:[1]:method_text:[p() throws Exception {        super.setUp();        assumeTrue(supportsMultiDisplay());    }   ])', 1), ('([3:/android/server/wm/MultiDisplayClientTests.java]:[DMA]:[3]:method_text:[etDisplayId() must match when IME move."",                targetDisplayId, imeDisplayId);    }   ])', 1), ('([3:/android/server/wm/MultiDisplayClientTests.java]:[DMA]:[3]:method_text:[      assertEquals(""IMM#getDisplayId() must match."", newDisplay.mId, imm.getDisplayId());    }   ])', 1), ('([1:/android/server/wm/WindowInsetsAnimationControllerTests.java]:[DMA]:[1]:method_text:[ector);            awaitControl(mType);            test.run();        }    }    @Presubmit   ])', 1), ('([1:/android/server/wm/WindowInsetsAnimationControllerTests.java]:[DMA]:[1]:method_text:[dyException(String message, Throwable cause) {            super(message, cause);        }    };}])', 1), ('([1:/android/telephony/ims/cts/SipDelegateManagerTest.java]:[DMA]:[1]:method_text:[re should be no more delegates"", 0,                transportImpl.getDelegates().size());    }   ])', 1), ('([2:/android/telephony/ims/cts/SipDelegateManagerTest.java]:[DMA]:[2]:method_text:[eg);        destroySipDelegateConnectionNoDelegate(ifaces.manager, ifaces.delegateConn);    }   ])', 1), ('([5:/android/app/cts/DownloadManagerTest.java]:[DMA]:[5]:method_text:[AGE_PROVIDER_AUTHORITY =            ""com.android.providers.downloads.documents"";    @FlakyTest   ])', 1), ('([6:/android/app/cts/DownloadManagerTest.java]:[DMA]:[6]:method_text:[  } finally {            mContext.unregisterReceiver(receiver);        }    }    @FlakyTest   ])', 1), ('([4:/android/app/cts/DownloadManagerTest.java]:[DMA]:[4]:method_text:[  } finally {            mContext.unregisterReceiver(receiver);        }    }    @FlakyTest   ])', 1), ('([7:/android/app/cts/DownloadManagerTest.java]:[DMA]:[7]:method_text:[(id, 0);        } finally {            mContext.unregisterReceiver(receiver);        }    }   ])', 1), ('([6:/android/app/cts/DownloadManagerTest.java]:[DMA]:[6]:method_text:[       mContext.unregisterReceiver(receiver);        }    }    @CddTest(requirement=""7.6.1"")   ])', 1), ('([7:/android/app/cts/DownloadManagerTest.java]:[DMA]:[7]:method_text:[h setDestinationInExternalFilesDir and setDestinationinExternalPublicDir.     */    @FlakyTest   ])', 1), ('([5:/android/app/cts/DownloadManagerTest.java]:[DMA]:[5]:method_text:[ the download location and verify that the extension of the file name is left unchanged.     */   ])', 1), ('([4:/android/app/cts/DownloadManagerTest.java]:[DMA]:[4]:method_text:[ds - 2);        } finally {            mContext.unregisterReceiver(receiver);        }    }   ])', 1), ('([3:/android/app/cts/DownloadManagerTest.java]:[DMA]:[3]:method_text:[ setDestinationUri()"");        } catch (Exception e) {            // Expected        }    }   ])', 1), ('([1:/android/app/cts/DownloadManagerTest.java]:[DMA]:[1]:method_text:[) {            count = cursor.getCount();        }        return count;    }    @FlakyTest   ])', 1), ('([2:/android/app/cts/DownloadManagerTest.java]:[DMA]:[2]:method_text:[ }    //TODO(b/130797842): Remove FlakyTest annotation after that bug is fixed.    @FlakyTest   ])', 1), ('([6:/android/app/cts/DownloadManagerTest.java]:[DMA]:[6]:method_text:[adding random string"");        } catch (Exception e) {            // expected        }    }   ])', 1), ('([5:/android/app/cts/DownloadManagerTest.java]:[DMA]:[5]:method_text:[ finally {                mContext.unregisterReceiver(receiver);            }        }    }   ])', 1), ('([1:/android/app/cts/DownloadManagerTest.java]:[DMA]:[1]:method_text:[utStream(file)) {            FileUtils.copy(source, target);        }        return file;    }}])', 1), ('([8:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[DMA]:[8]:method_text:[k InputMethodManager#getInputMethodList()} contains     * {@link Ime1Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[DMA]:[1]:method_text:[ethodManager#getInputMethodList()} does not contain     * {@link Ime1Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[DMA]:[1]:method_text:[MethodManager#getEnabledInputMethodList()} contains     * {@link Ime1Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[DMA]:[1]:method_text:[nager#getEnabledInputMethodList()} does not contain     * {@link Ime1Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[DMA]:[1]:method_text:[k InputMethodManager#getInputMethodList()} contains     * {@link Ime2Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[DMA]:[1]:method_text:[ethodManager#getInputMethodList()} does not contain     * {@link Ime2Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[DMA]:[1]:method_text:[MethodManager#getEnabledInputMethodList()} contains     * {@link Ime2Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[DMA]:[1]:method_text:[nager#getEnabledInputMethodList()} does not contain     * {@link Ime2Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[DMA]:[1]:method_text:[oolean)} for     * {@link Ime1Constants#IME_ID} returns the implicitly enabled subtype.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[DMA]:[1]:method_text:[ for     * {@link Ime1Constants#IME_ID} does not return the implicitly enabled subtype.     */   ])', 1)]"	""	""	"[('DMA', 222), ('android.security.identity', 3)]"	"[('[android.autofillservice.cts.dropdown.LoginActivityTest testAutoFillOneDatasetAndSave CtsAutoFillServiceTestCases]', 2), ('[android.bluetooth.cts.ScanFilterTest testsetServiceUuidFilter CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanFilterTest testsetServiceSolicitationUuidFilter CtsBluetoothTestCases]', 1), ('[android.security.NetworkSecurityPolicyTestBase testDownloadManager None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testResetPasswordWithToken CtsDevicePolicyManagerTestCases]', 1), ('[test.java.com.android.eventlib.premade.EventLibActivityTest TestApis None]', 1), ('[com.android.cts.comp.provisioning.ManagedProfileProvisioningTest testProvisioningCorpOwnedManagedProfile None]', 1), ('[android.telecom.cts.DataObjectUnitTests testDisconnectCause CtsTelecomTestCases]', 1), ('[android.cts.statsdatom.memory.ProcessDmabufMemoryTests isNotNull CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.memory.ProcessDmabufMemoryTests testProcessDmabufMemoryAtom CtsStatsdAtomHostTestCases]', 1), ('[android.packageinstaller.admin.cts.SessionCommitBroadcastTest testBroadcastReceivedForEnablingApp CtsAdminPackageInstallerTestCases]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTestApi25 removeTestUsers CtsDevicePolicyManagerTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testForegroundService_malformedNotificationExtras CtsAppTestCases]', 1), ('[android.hardware.cts.SensorTest testBatchAndFlushWithMultipleSensors CtsSensorTestCases]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodServiceDeviceTest testImeSwitchingWithoutWindowFocusAfterDisplayOffOn None]', 1), ('[android.hardware.cts.CameraGLTest testCameraToSurfaceTextureMetadata CtsCameraTestCases]', 1), ('[android.cts.statsdatom.binderstats.BinderStatsTests testBinderStats CtsStatsdAtomHostTestCases]', 1), ('[android.graphics.cts.TypefaceTest testSharedMemoryReadonly_serializeDeserialize CtsGraphicsTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testViewDownloads CtsContentTestCases]', 1), ('[android.hardware.biometrics.cts.BiometricManagerTest test_getSettingName_forCredential CtsHardwareTestCases]', 1), ('[android.widget.cts.RatingBarTest testAccessStepSize CtsWidgetTestCases]', 1), ('[android.content.cts.ClipDescriptionTest testGetTimestamp CtsContentTestCases]', 1), ('[android.content.cts.ClipDescriptionTest testIsStyledText CtsContentTestCases]', 1), ('[android.content.cts.ClipDescriptionTest testNotStyledText CtsContentTestCases]', 1), ('[android.content.cts.ClipDescriptionTest testClassificationNotPerformedForVeryLongText CtsContentTestCases]', 1), ('[android.content.cts.ClipDescriptionTest testClassificationConfidenceValuesAreValid CtsContentTestCases]', 1), ('[android.content.res.cts.TypedArrayTest testNonResourceString CtsContentTestCases]', 1), ('[com.android.cts.instrumentationdiffcertapp.InstrumentationFailToRunTest testInstrumentationNotAllowed_exception None]', 1), ('[com.android.cts.instrumentationdiffcertapp.InstrumentationFailToRunTest testInstrumentationNotAllowed_fail None]', 1), ('[android.renderscript.cts.SamplerTest testSamplerBuilder CtsRenderscriptTestCases]', 1), ('[android.autofillservice.cts.SessionLifecycleTest SessionLifecycleTest CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.SessionLifecycleTest testDatasetAuthResponseWhileAutofilledAppIsLifecycled CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.SessionLifecycleTest testAuthCanceledWhileAutofilledAppIsLifecycled CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.SessionLifecycleTest testDatasetVisibleWhileAutofilledAppIsLifecycled CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.SessionLifecycleTest testAutofillNestedActivitiesWhileAutofilledAppIsLifecycled CtsAutoFillServiceTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isNotNull CtsWifiTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_fromPersonalProfile_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_fromWorkProfile_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_packageNotAllowed_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_permissionNotRequested_returnsFalse CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withAppOpEnabled_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withCrossProfilesPermission_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withCrossUsersPermission_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withCrossUsersFullPermission_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_fromWorkProfile_returnsTrue CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withAppOpDisabled_returnsFalse CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCreateRequestInteractAcrossProfilesIntent_fromWorkProfile_returnsIntent CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCreateRequestInteractAcrossProfilesIntent_canNotRequestInteraction_throwsSecurityException CtsDevicePolicyManagerTestCases]', 1), ('[android.renderscript.cts.ReduceTest testAddInt2D CtsRenderscriptTestCases]', 1), ('[android.renderscript.cts.ReduceTest testFindMinAndMax CtsRenderscriptTestCases]', 1), ('[android.renderscript.cts.ReduceTest testFindMinAndMaxHalf CtsRenderscriptTestCases]', 1), ('[android.renderscript.cts.ReduceTest testFindMinAndMaxHalf2 CtsRenderscriptTestCases]', 1), ('[android.renderscript.cts.ReduceTest testFindMinMat CtsRenderscriptTestCases]', 1), ('[android.renderscript.cts.ReduceTest testFindMinAndMaxMat CtsRenderscriptTestCases]', 1), ('[android.media.cts.RemoteControllerTest testOnClientUpdateListenerUnchanged CtsMediaTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest isAppStandbyEnabled CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testInteractiveEvents CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testLocusIdEventsVisibility CtsUsageStatsTestCases]', 1), ('[android.translation.cts.UiTranslationManagerTest testUiTranslation_customTextView CtsTranslationTestCases]', 1), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsClipboardTest testClipboardWithPermission None]', 1), ('[android.telephony.cts.TelephonyRegistryManagerTest testNotifyServiceStateChanged CtsTelephonyTestCases]', 1), ('[android.view.cts.ViewConfigurationTest testInstanceValues CtsViewTestCases]', 1), ('[android.view.cts.ViewConfigurationTest testGetMaximumDrawingCacheSize CtsViewTestCases]', 1), ('[android.view.inputmethod.cts.ImeInsetsVisibilityTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.ImeInsetsVisibilityTest testEditTextPositionAndPersistWhenAboveImeWindowShown CtsInputMethodTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testEraseSubscriptions CtsTelephonyTestCases]', 1), ('[android.mediapc.cts.EncoderInitializationLatencyTest testInitializationLatency CtsMediaPerformanceClassTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported CtsWifiTestCases]', 1), ('[android.display.cts.DisplayTest testDefaultDisplayHdrCapability CtsDisplayTestCases]', 1), ('[android.display.cts.DisplayTest testRestrictedFramebufferSize CtsDisplayTestCases]', 1), ('[android.content.cts.SharedPreferencesTest testTorture CtsContentTestCases]', 1), ('[android.content.cts.SharedPreferencesTest testTorture2 CtsContentTestCases]', 1), ('[android.server.wm.ActivityMetricsLoggerTests testLaunchTimeEventLogNonProcessSwitch CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.KeyguardTests testKeyguardHidesActivity CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.KeyguardTests testInheritShowWhenLockedRemove CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.KeyguardTests testNoInheritShowWhenLocked CtsWindowManagerDeviceTestCases]', 1), ('[android.hardware.cts.SensorIntegrationTests testUncalibratedMagneticFieldReconfigureWhileActive CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorIntegrationTests testMagneticFieldMagneticFieldStopping CtsSensorTestCases]', 1), ('[android.app.cts.DownloadManagerApi28Test testSetDestinationUri_publicDir None]', 1), ('[android.app.cts.DownloadManagerApi28Test testSetDestinationUri_sdcardPath None]', 1), ('[android.app.cts.DownloadManagerApi28Test testDestinationInExternalPublicDir None]', 1), ('[android.app.cts.DownloadManagerApi28Test testAddCompletedDownload_publicDirs None]', 1), ('[android.app.cts.DownloadManagerApi28Test testDownloadManager_mediaStoreEntry None]', 1), ('[android.app.cts.DownloadManagerApi28Test testAddCompletedDownload_mediaStoreEntry None]', 1), ('[android.inputmethodservice.cts.hostside.MultiUserTest isMultiUserSupported CtsInputMethodServiceHostTestCases]', 1), ('[android.inputmethodservice.cts.hostside.MultiUserTest testSecondaryUserFull CtsInputMethodServiceHostTestCases]', 1), ('[android.inputmethodservice.cts.hostside.MultiUserTest testSecondaryUserInstant CtsInputMethodServiceHostTestCases]', 1), ('[android.inputmethodservice.cts.hostside.MultiUserTest testProfileUserFull CtsInputMethodServiceHostTestCases]', 1), ('[android.inputmethodservice.cts.hostside.MultiUserTest testProfileUserInstant CtsInputMethodServiceHostTestCases]', 1), ('[android.server.wm.KeyguardLockedTests testLockAndUnlock CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.KeyguardLockedTests testDisableKeyguard_thenSettingCredential_reenablesKeyguard_b119322269 CtsWindowManagerDeviceTestCases]', 1), ('[android.appsecurity.cts.OverlayHostTest currentTimeMillis CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.OverlayHostTest testCannotInstallDifferentSignaturesNoName CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.OverlayHostTest testFailIdmapDifferentSignaturesNoName CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicyAllNoNameFails CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicyProductFails CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicySystemFails CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicyVendorFails CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicyDifferentSignatureFails CtsAppSecurityHostTestCases]', 1), ('[android.telephony.cts.CdmaSmsCbProgramDataTest testCdmaSmsCbProgramDataConstructorAndGetters CtsTelephonyTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithConfigBssid CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetGetSoftApConfigurationAndSoftApCapabilityCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartTetheredHotspotWithChannelConfigAndSoftApStateAndInfoCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsApMacRandomizationSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsConnectedMacRandomizationSupported CtsWifiTestCases]', 1), ('[android.permission.cts.NoKeyPermissionTest testDisableKeyguard CtsPermissionTestCases]', 1), ('[android.permission.cts.NoKeyPermissionTest testReenableKeyguard CtsPermissionTestCases]', 1), ('[android.permission.cts.NoKeyPermissionTest testExitKeyguardSecurely CtsPermissionTestCases]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_LowStorage None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_MaxUsers None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_SkipSetupWizard None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_GetSecondaryUsers None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_SwitchUser None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_CannotStopCurrentUser None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_StartInBackground None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_StartInBackground_MaxRunningUsers None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_StopUser None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_StopEphemeralUser_DisallowRemoveUser None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_LogoutUser None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_Affiliated None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_Ephemeral None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_LeaveAllSystemApps None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_AddRestrictionSet None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_RemoveRestrictionSet None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testUserAddedOrRemovedBroadcasts None]', 1), ('[android.media.cts.MediaExtractorTest SKIP_testNullMediaDataSourceIsRejected CtsMediaTestCases]', 1), ('[android.media.cts.MediaExtractorTest testGetAudioPresentations CtsMediaTestCases]', 1), ('[android.graphics.cts.VulkanFeaturesTest testVulkanBlockedExtensions CtsGraphicsTestCases]', 1), ('[android.telephony.cts.SignalThresholdInfoTest testEquals CtsTelephonyTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testShortcutInfoMissingMandatoryFields CtsShortcutManagerTestCases]', 1), ('[android.media.cts.AudioTrackTest testCodecFormatChangedListener CtsMediaTestCases]', 1), ('[android.car.cts.CarAudioManagerTest registerCarVolumeCallback_onMasterMuteChanged CtsCarTestCases]', 1), ('[android.car.cts.CarAudioManagerTest unregisterCarVolumeCallback_noLongerReceivesCallback CtsCarTestCases]', 1), ('[android.transition.cts.ChangeImageTransformTest resetListener CtsTransitionTestCases]', 1), ('[android.transition.cts.ChangeImageTransformTest testCenterToFitXY CtsTransitionTestCases]', 1), ('[android.transition.cts.ChangeImageTransformTest testCenterCropToFitCenter CtsTransitionTestCases]', 1), ('[android.transition.cts.ChangeImageTransformTest testCenterInsideToFitEnd CtsTransitionTestCases]', 1), ('[android.transition.cts.ChangeImageTransformTest testFitStartToCenter CtsTransitionTestCases]', 1), ('[android.transition.cts.ChangeImageTransformTest testNoChange CtsTransitionTestCases]', 1), ('[android.transition.cts.ChangeImageTransformTest testNoAnimationForDrawableWithoutSize CtsTransitionTestCases]', 1), ('[android.transition.cts.ChangeImageTransformTest testNullAnimatorKeepsImagePadding CtsTransitionTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testUserAgentStringTest CtsWebkitTestCases]', 1), ('[android.telephony.cts.CellInfoTest isCamped CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CellInfoTest testCellInfo CtsTelephonyTestCases]', 1), ('[android.server.wm.MultiDisplaySystemDecorationTests supportsMultiDisplay CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.MultiDisplaySystemDecorationTests testImeApiForBug118341760 CtsWindowManagerDeviceTestCases]', 1), ('[android.telephony.cts.VisualVoicemailServiceTest testGetVisualVoicemailPackageName_isSelf CtsTelephonyTestCases]', 1), ('[android.dumpsys.cts.BatteryStatsDumpsysTest testBatterystatsOutput CtsDumpsysHostTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest testBasicShowHideSoftInput CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest testShowHideSoftInputShouldBeIgnoredOnNonFocusedView CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest testToggleSoftInput CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest testFloatingImeHideKeyboardAfterBackPressed CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest testImeVisibilityWhenDismisingDialogWithImeFocused CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest testImeState_Unspecified_EditorDialogLostFocusAfterUnlocked CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest testImeState_Visible_EditorDialogLostFocusAfterUnlocked CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest testImeState_AlwaysVisible_EditorDialogLostFocusAfterUnlocked CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest testImeState_Hidden_EditorDialogLostFocusAfterUnlocked CtsInputMethodTestCases]', 1), ('[android.autofillservice.cts.dropdown.LoginActivityTest testAutoFillOneDataset CtsAutoFillServiceTestCases]', 1), ('[android.content.cts.ClipboardManagerListenerTest ClipboardManagerListenerTest CtsContentTestCases]', 1), ('[android.renderscript.cts.FieldPackerTest testAddAllTypes CtsRenderscriptTestCases]', 1), ('[test.java.com.android.bedstead.nene.packages.PackageReferenceTest TestApis None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest isStaConcurrencyForLocalOnlyConnectionsSupported CtsWifiTestCases]', 1), ('[android.server.wm.MultiDisplayClientTests supportsMultiDisplay CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.MultiDisplayClientTests testDisplayIdUpdateWhenImeMove_NoRelaunchActivity CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.MultiDisplayClientTests testInputMethodManagerDisplayId CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationControllerTests setUpWindowInsetsAnimationControllerTests CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationControllerTests testImeControl_isntInterruptedByStartingInput CtsWindowManagerDeviceTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testCreateDelegateMessagingAppChangesToApp CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testCreateDelegateMessagingAppChangesAwayFromApp CtsTelephonyTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManager CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerSupportsHttp CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerSupportsHttpWithExternalWebServer CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerSupportsHttpsWithExternalWebServer CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testMinimumDownload CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerDestination CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerDestinationExtension CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testSetDestinationUri_invalidRequests CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testSetDestinationUri CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testSetDestinationInExternalPublicDownloadDir CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testSetDestinationInExternalPublicDir_invalidRequests CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownloadNotVisibleInUi CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testAddCompletedDownload CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testAddCompletedDownload_downloadDir CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testAddCompletedDownload_invalidPaths CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownload_mediaScanned CtsAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownload_onMediaStoreDownloadsDeleted CtsAppTestCases]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest getInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme1InInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme1NotInInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme1InEnabledInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme1NotInEnabledInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme2InInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme2NotInInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme2InEnabledInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme2NotInEnabledInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme1ImplicitlyEnabledSubtypeExists None]', 1)]"
"7.3.10  Biometric Sensors"	"7.3.10"	"C-4-3"	"7.3.10/C-4-3"	"07031000.670403"	"""C-4-3] MUST implement the [ACTION_BIOMETRIC_ENROLL](https://developer.android.com/reference/android/provider/Settings#ACTION_BIOMETRIC_ENROLL)     action on devices that have either **Class 3** or **Class 2** biometrics.     This action MUST only present the enrollment entry points for **Class 3**     or **Class 2** biometrics.  If device implementations support passive biometrics, they:  """	""	""	"ACTION_BIOMETRIC_ENROLL"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://developer.android.com"	""	""	""
"6.1  Developer Tools"	"6.1"	"C-4-1"	"6.1/C-4-1"	"06010000.670401"	"""C-4-1] MUST have the `AdbManager#isAdbWifiSupported()` method     return `true`.      If device implementations support adb connections to a host machine via     Wi-Fi and includes at least one camera, they:      """	""	""	"isAdbWifiSupported()"	""	""	""	""	"[('android.adbmanager.cts.AdbManagerHostDeviceTest', 1)]"	""	"[('CtsAdbManagerHostTestCases', 1)]"	""	""	""	""	"android.adbmanager.cts.AdbManagerHostDeviceTest"	""	"CtsAdbManagerHostTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 1)]"	"[('(1,isAdbWifiSupported(),/android/adbmanager/cts/AdbManagerHostDeviceTest.java)', 1)]"	"[('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[isAdbWifiSupported()]:[1]:method_text:[;        Assert.assertEquals(expected, Boolean.parseBoolean(result.getStdout().trim()));    }   ])', 1)]"	""	""	"[('isAdbWifiSupported()', 1)]"	"[('[android.adbmanager.cts.AdbManagerHostDeviceTest test_isadbWifiSupported CtsAdbManagerHostTestCases]', 1)]"
"9.8.10  Connectivity Bug Report"	"9.8.10"	"C-1-2"	"9.8.10/C-1-2"	"09081000.670102"	"""C-1-2] MUST display and obtain explicit user consent when the reports are     starting to be generated and MUST NOT return the generated report     to the requesting app without explicit user consent. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"3.18  Contacts"	"3.18"	"C-1-4"	"3.18/C-1-4"	"03180000.670104"	"""C-1-4] Raw contacts inserted into the **custom local account** MUST not be      removed when accounts are added or removed. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"7.4.5.3  Captive Portals"	"7.4.5.3"	"C-1-4"	"7.4.5.3/C-1-4"	"07040503.670104"	"""C-1-4] MUST use encrypted DNS as per the SDK documentation for     [`android.net.LinkProperties.getPrivateDnsServerName`](https://developer.android.com/reference/android/net/LinkProperties.html#getPrivateDnsServerName%28%29)     and [`android.net.LinkProperties.isPrivateDnsActive`](https://developer.android.com/reference/android/net/LinkProperties#isPrivateDnsActive%28%29)     for all network traffic that is not explicitly communicating with the     captive portal. """	""	""	"LinkProperties.html android.net.LinkProperties.getPrivateDnsServerName android.net.LinkProperties.isPrivateDnsActive DNS"	""	""	""	""	"[('android.security.SELinuxTargetSdkTest', 12), ('com.android.cts.deviceowner.PrivateDnsPolicyTest', 7), ('android.telephony.cts.DataCallResponseTest', 5), ('android.devicepolicy.cts.NetworkResetTest', 3), ('android.net.wifi.cts.WifiBackupRestoreTest', 2), ('com.android.cts.deviceandprofileowner.NetworkLoggingTest', 2), ('com.android.cts.delegate.WorkProfileNetworkLoggingDelegateTest', 2), ('com.android.cts.deviceowner.NetworkLoggingTest', 2), ('android.appsecurity.cts.ListeningPortsTest', 1), ('android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest', 1), ('android.security.identity.cts.ProvisioningTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('android.hardware.camera2.cts.CaptureRequestTest', 1), ('android.hardware.cts.helpers.sensorverification.JitterVerificationTest', 1), ('android.provider.cts.simphonebook.SimPhonebookContract_ElementaryFilesTest', 1), ('com.android.cts.deviceandprofileowner.UserRestrictionsParentTest', 1), ('com.android.cts.deviceowner.DevicePolicySafetyCheckerIntegrationTest', 1), ('com.android.cts.devicepolicy.DeviceOwnerTest', 1), ('com.android.cts.deviceandprofileowner.OrgOwnedProfileOwnerParentTest', 1), ('android.net.cts.legacy.api22.ConnectivityManagerLegacyTest', 1), ('android.permission.cts.NoNetworkStatePermissionTest', 1)]"	"[('setUp', 7), ('tearDown', 5), ('getInstrumentation', 3), ('getContext', 3), ('getWho', 2), ('getName', 2), ('dpc', 2), ('devicePolicyManager', 2), ('NetworkLogsReceiver', 1), ('Builder', 1), ('build', 1), ('query_includesRowForEachElementaryFileOnEachSim', 1), ('getPackage', 1), ('DeviceState', 1), ('factoryReset_noPolicyRestrictions_resetsToDefault', 1), ('factoryReset', 1), ('getPrivateDnsMode', 1), ('getAirplaneMode', 1), ('BroadcastReceiver', 1), ('getAction', 1), ('getCount', 1), ('size', 1), ('countDown', 1), ('getContentResolver', 1), ('getPackageName', 1)]"	"[('CtsTelephonyTestCases', 5), ('CtsDevicePolicyTestCases', 3), ('CtsWifiTestCases', 2), ('CtsSelinuxTargetSdk27TestCases', 2), ('CtsSensorTestCases', 2), ('CtsSelinuxTargetSdk30TestCases', 2), ('CtsSelinuxTargetSdkCurrentTestCases', 2), ('CtsSelinuxTargetSdk25TestCases', 2), ('CtsSelinuxTargetSdk28TestCases', 2), ('CtsSelinuxTargetSdk29TestCases', 2), ('CtsAppSecurityHostTestCases', 1), ('CtsIdentityTestCases', 1), ('CtsMediaTestCases', 1), ('CtsCameraTestCases', 1), ('CtsSimPhonebookProviderTestCases', 1), ('CtsDevicePolicyManagerTestCases', 1), ('CtsNetTestCases', 1), ('CtsPermissionTestCases', 1)]"	""	""	""	""	"android.security.SELinuxTargetSdkTest"	"getPackageName"	"CtsSelinuxTargetSdk29TestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PrivateDnsPolicyTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/DataCallResponseTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/NetworkResetTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/selinux/selinuxTargetSdk27/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/selinux/selinuxTargetSdk30/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/selinux/selinuxTargetSdkCurrent/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/selinux/selinuxTargetSdk25/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/NetworkLoggingTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/selinux/selinuxTargetSdk28/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/selinux/selinuxTargetSdk29/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ListeningPortsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/ProvisioningTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureRequestTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/simphonebookprovider/src/android/provider/cts/simphonebook/SimPhonebookContract_ElementaryFilesTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/DevicePolicySafetyCheckerIntegrationTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/netlegacy22.api/src/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoNetworkStatePermissionTest.java', 1)]"	"[('(3,DNS,/android/security/SELinuxTargetSdkTest.java)', 6), ('(2,DNS,/android/appsecurity/cts/ListeningPortsTest.java)', 1), ('(3,DNS,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(2,DNS,/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java)', 1), ('(8,DNS,/android/security/identity/cts/ProvisioningTest.java)', 1), ('(7,DNS,/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java)', 1), ('(52,DNS,/com/android/cts/deviceowner/PrivateDnsPolicyTest.java)', 1), ('(8,DNS,/android/media/cts/PresentationSyncTest.java)', 1), ('(2,DNS,/android/hardware/camera2/cts/CaptureRequestTest.java)', 1), ('(15,DNS,/android/telephony/cts/DataCallResponseTest.java)', 1), ('(7,DNS,/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java)', 1), ('(4,DNS,/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java)', 1), ('(8,DNS,/android/provider/cts/simphonebook/SimPhonebookContract_ElementaryFilesTest.java)', 1), ('(1,DNS,/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java)', 1), ('(4,DNS,/com/android/cts/deviceowner/DevicePolicySafetyCheckerIntegrationTest.java)', 1), ('(31,DNS,/android/devicepolicy/cts/NetworkResetTest.java)', 1), ('(29,DNS,/com/android/cts/deviceowner/NetworkLoggingTest.java)', 1), ('(2,DNS,/com/android/cts/devicepolicy/DeviceOwnerTest.java)', 1), ('(1,DNS,/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java)', 1), ('(2,DNS,/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java)', 1), ('(1,DNS,/android/permission/cts/NoNetworkStatePermissionTest.java)', 1)]"	"[('([1:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[1]:method_text:[SELinuxTargetSdkTestBase{    /**     * Verify that net.dns properties may not be read     */   ])', 4), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[public void testNoDns() throws IOException {        noDns();    }    ])', 3), ('([2:/android/appsecurity/cts/ListeningPortsTest.java]:[DNS]:[2]:method_text:[);            }        }        contents.append(""\'"");        return contents.toString();    }}])', 1), (""([1:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[DNS]:[1]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ])"", 1), ('([2:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[DNS]:[2]:method_text:[ is deserialized correctly from AOSP     * legacy supplicant/ipconf backup data format.     */   ])', 1), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[ify that selinux context is the expected domain based on     * targetSdkVersion = 26-27     */   ])', 1), ('([2:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[DNS]:[2]:method_text:[tion(expectedUs);        verification.addSensorEvents(events);        return verification;    }}])', 1), ('([1:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[1]:method_text:[inuxTargetSdkTestBase{    /**     * Verify that net.dns properties may not be read     */   ])', 1), ('([8:/android/security/identity/cts/ProvisioningTest.java]:[DNS]:[8]:method_text:[til.getStringEntry(rd, updNs, ""last_name""));        store.deleteCredentialByName(""test"");    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java]:[DNS]:[1]:method_text:[s);        mDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());    }   ])', 1), ('([6:/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java]:[DNS]:[6]:method_text:[ddr) {        return ((addr instanceof Inet4Address) || (addr instanceof Inet6Address));    }   ])', 1), ('([8:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[8]:method_text:[DNS, false);        mDevicePolicyManager.setGlobalPrivateDnsModeOpportunistic(getWho());    }   ])', 1), ('([3:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[3]:method_text:[r.hasUserRestriction(                UserManager.DISALLOW_CONFIG_PRIVATE_DNS)).isTrue();    }   ])', 1), ('([14:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[14]:method_text:[privateDnsHost, expectedResult, resultCode),                expectedResult, resultCode);    }   ])', 1), ('([5:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[5]:method_text:[IC);        assertThat(mDevicePolicyManager.getGlobalPrivateDnsHost(getWho())).isNull();    }   ])', 1), ('([7:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[7]:method_text:[er.getGlobalPrivateDnsHost(getWho())).isEqualTo(                VALID_PRIVATE_DNS_HOST);    }   ])', 1), ('([4:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[4]:method_text:[TE_DNS_HOST,                DevicePolicyManager.PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING);    }   ])', 1), ('([11:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[11]:method_text:[ISTIC);        assertThat(mDevicePolicyManager.getGlobalPrivateDnsHost(getWho())).isNull();    }}])', 1), ('([8:/android/media/cts/PresentationSyncTest.java]:[DNS]:[8]:method_text:[sleep(10); }                catch (InterruptedException ignored) {}            }        }    }}])', 1), ('([2:/android/hardware/camera2/cts/CaptureRequestTest.java]:[DNS]:[2]:method_text:[                  maxDist, Math.abs(a.bottom - e.bottom))) continue;            }        }    }}])', 1), ('([1:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[1]:method_text:[riptor> TRAFFIC_DESCRIPTORS =            Arrays.asList(new TrafficDescriptor(DNN, OS_APP_ID));   ])', 1), ('([4:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[4]:method_text:[FO);        assertThat(response.getTrafficDescriptors()).isEqualTo(TRAFFIC_DESCRIPTORS);    }   ])', 1), ('([4:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[4]:method_text:[PTORS)                .build();        assertThat(response).isEqualTo(equalsResponse);    }   ])', 1), ('([4:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[4]:method_text:[t(response).isNotEqualTo(null);        assertThat(response).isNotEqualTo(new String[1]);    }   ])', 1), ('([2:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[2]:method_text:[EATOR.createFromParcel(stateParcel);        assertThat(response).isEqualTo(parcelResponse);    }}])', 1), ('([1:/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java]:[DNS]:[1]:method_text:[        DelegateTestUtils.DelegatedLogsReceiver.sBatchCountDown = new CountDownLatch(1);    }   ])', 1), ('([6:/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java]:[DNS]:[6]:method_text:[ddr) {        return ((addr instanceof Inet4Address) || (addr instanceof Inet6Address));    }   ])', 1), ('([4:/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java]:[DNS]:[4]:method_text:[Double) stats.getValue(SensorStats.JITTER_95_PERCENTILE_PERCENT_KEY),                0.01);    }}])', 1), ('([8:/android/provider/cts/simphonebook/SimPhonebookContract_ElementaryFilesTest.java]:[DNS]:[8]:method_text:[   .isAtLeast(PHONE_NUMBER_MAX_LENGTH_MINIMUM);                }            }        }    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[DNS]:[1]:method_text:[ISALLOW_CONFIG_DATE_TIME,                    UserManager.DISALLOW_AIRPLANE_MODE            );   ])', 1), ('([1:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[1]:method_text:[cuteFromHomeDir());    }    /**     * Verify that net.dns properties may not be read     */   ])', 1), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[Verify that selinux context is the expected domain based on     * targetSdkVersion = 25     */   ])', 1), ('([4:/com/android/cts/deviceowner/DevicePolicySafetyCheckerIntegrationTest.java]:[DNS]:[4]:method_text:[    };    /**     * Tests that all safety-aware operations are properly implemented.     */   ])', 1), ('([6:/android/devicepolicy/cts/NetworkResetTest.java]:[DNS]:[6]:method_text:[  restoreSettings(mOriginalAirplaneMode, mOriginalPrivateDnsMode, mOriginalAvoidBadWifi);    }   ])', 1), ('([11:/android/devicepolicy/cts/NetworkResetTest.java]:[DNS]:[11]:method_text:[  restoreUserRestriction(originalUserRestriction, DISALLOW_CONFIG_PRIVATE_DNS);        }    }   ])', 1), ('([14:/android/devicepolicy/cts/NetworkResetTest.java]:[DNS]:[14]:method_text:[            sDeviceState.dpc().devicePolicyManager().clearUserRestriction(policy);        }    }}])', 1), (""([1:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[DNS]:[1]:method_text:[ there's one user on the device or all     * secondary users / profiles are affiliated.     */   ])"", 1), ('([28:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[DNS]:[28]:method_text:[ork logging enabled for %s"", admin).that(reallyEnabled)                .isEqualTo(enabled);    }}])', 1), ('([2:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[DNS]:[2]:method_text:[ateDnsPolicy() throws Exception {        executeDeviceOwnerTest(""PrivateDnsPolicyTest"");    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java]:[DNS]:[1]:method_text:[not used in test.                    // UserManager.DISALLOW_DEBUGGING_FEATURES            );   ])', 1), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[Verify that selinux context is the expected domain based on     * targetSdkVersion = 28     */   ])', 1), ('([2:/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java]:[DNS]:[2]:method_text:[led && isWifiConnected()) {                disconnectFromWifi();            }        }    }   ])', 1), ('([1:/android/permission/cts/NoNetworkStatePermissionTest.java]:[DNS]:[1]:method_text:[w.google.com"");            fail();        } catch (SecurityException expected) {        }    }}])', 1)]"	"https://developer.android.com"	""	"[('DNS', 48)]"	"[('[android.appsecurity.cts.ListeningPortsTest testNoListeningLoopbackUdp6Ports CtsAppSecurityHostTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreSoftApBackupData CtsWifiTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk27TestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest testVerify_no_events_fail CtsSensorTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk30TestCases]', 1), ('[android.security.identity.cts.ProvisioningTest testUpdateCredential CtsIdentityTestCases]', 1), ('[com.android.cts.deviceandprofileowner.NetworkLoggingTest testRetrieveNetworkLogs_forceNetworkLogs_receiveNetworkLogs None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testDisallowPrivateDnsConfigurationRestriction None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testClearDisallowPrivateDnsConfigurationRestriction None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testSetOpportunisticMode None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testSetSpecificHostMode None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testSetModeWithIncorrectHost None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testCanSetModeDespiteUserRestriction None]', 1), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testExtendedSceneModes CtsCameraTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdkCurrentTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testConstructorAndGetters CtsTelephonyTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testEquals CtsTelephonyTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testNotEquals CtsTelephonyTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testParcel CtsTelephonyTestCases]', 1), ('[com.android.cts.delegate.WorkProfileNetworkLoggingDelegateTest testRetrieveNetworkLogs_forceNetworkLogs_receiveNetworkLogs None]', 1), ('[android.hardware.cts.helpers.sensorverification.JitterVerificationTest testCalculateDelta CtsSensorTestCases]', 1), ('[android.provider.cts.simphonebook.SimPhonebookContract_ElementaryFilesTest getActiveSubscriptionInfoList CtsSimPhonebookProviderTestCases]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testPerProfileUserRestriction_onParent None]', 1), ('[android.security.SELinuxTargetSdkTest testCanExecuteFromHomeDir CtsSelinuxTargetSdk25TestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk25TestCases]', 1), ('[com.android.cts.deviceowner.DevicePolicySafetyCheckerIntegrationTest DevicePolicySafetyCheckerIntegrationTester None]', 1), ('[android.devicepolicy.cts.NetworkResetTest TestApis CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.NetworkResetTest factoryReset_disallowedByConfigPrivateDnsPolicy_doesPartialFactoryReset CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.NetworkResetTest isFalse CtsDevicePolicyTestCases]', 1), ('[com.android.cts.deviceowner.NetworkLoggingTest testNetworkLoggingAndRetrieval None]', 1), ('[com.android.cts.devicepolicy.DeviceOwnerTest testPrivateDnsPolicy CtsDevicePolicyManagerTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk28TestCases]', 1), ('[android.net.cts.legacy.api22.ConnectivityManagerLegacyTest testStartUsingNetworkFeature_enableHipri CtsNetTestCases]', 1), ('[android.permission.cts.NoNetworkStatePermissionTest testSecurityExceptionFromDns CtsPermissionTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk29TestCases]', 1)]"
"7.1.4.2 Vulkan"	"7.1.4.2"	"C-1-8"	"7.1.4.2/C-1-8"	"07010402.670108"	"""C-1-8] MUST report the maximum version of the Vulkan dEQP Tests     supported via the `android.software.vulkan.deqp.level` feature flag. """	""	""	"EQP android.software.vulkan.deqp.level"	""	""	""	""	"[('android.graphics.cts.VulkanDeqpLevelTest', 3), ('android.graphics.cts.OpenGlEsDeqpLevelTest', 2), ('android.hardware.camera2.cts.HeifWriterTest', 1), ('com.android.compatibility.common.tradefed.presubmit.CtsConfigLoadingTest', 1), ('android.midi.cts.MidiEchoTest', 1)]"	"[('getSimpleName', 3), ('setup', 3), ('getTargetContext', 3), ('getPackageManager', 3), ('getSystemAvailableFeatures', 2), ('nanoTime', 1), ('notifyAll', 1)]"	"[('CtsGraphicsTestCases', 5), ('CtsCameraTestCases', 1), ('CtsMidiTestCases', 1)]"	""	""	""	""	"android.midi.cts.MidiEchoTest"	"notifyAll"	"CtsMidiTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/VulkanDeqpLevelTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/OpenGlEsDeqpLevelTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/HeifWriterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/midi/src/android/midi/cts/MidiEchoTest.java', 1)]"	"[('(3,EQP,/android/hardware/camera2/cts/HeifWriterTest.java)', 1), ('(10,EQP,/android/graphics/cts/VulkanDeqpLevelTest.java)', 1), ('(1,android.software.vulkan.deqp.level,/android/graphics/cts/VulkanDeqpLevelTest.java)', 1), ('(3,EQP,/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java)', 1), ('(10,EQP,/android/graphics/cts/OpenGlEsDeqpLevelTest.java)', 1), ('(1,EQP,/android/midi/cts/MidiEchoTest.java)', 1)]"	"[('([3:/android/hardware/camera2/cts/HeifWriterTest.java]:[EQP]:[3]:method_text:[           }            // TODO: add more key validations.        }        return result;    }}])', 1), ('([4:/android/graphics/cts/VulkanDeqpLevelTest.java]:[EQP]:[4]:method_text:[              }            }        }    }    @CddTest(requirement = ""7.1.4.2/C-1-8,C-1-9"")   ])', 1), ('([6:/android/graphics/cts/VulkanDeqpLevelTest.java]:[EQP]:[6]:method_text:[kageManager.FEATURE_VULKAN_DEQP_LEVEL,                        MINIMUM_VULKAN_DEQP_LEVEL));    }}])', 1), ('([1:/android/graphics/cts/VulkanDeqpLevelTest.java]:[android.software.vulkan.deqp.level]:[1]:method_text:[              }            }        }    }    @CddTest(requirement = ""7.1.4.2/C-1-8,C-1-9"")   ])', 1), ('([3:/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java]:[EQP]:[3]:method_text:[ * -> Exclude deprecated ApkInstaller.     * -> Check if host-side tests are non empty.     */   ])', 1), ('([4:/android/graphics/cts/OpenGlEsDeqpLevelTest.java]:[EQP]:[4]:method_text:[d setup() {        mPm = InstrumentationRegistry.getTargetContext().getPackageManager();    }   ])', 1), ('([6:/android/graphics/cts/OpenGlEsDeqpLevelTest.java]:[EQP]:[6]:method_text:[Manager.FEATURE_OPENGLES_DEQP_LEVEL,                        MINIMUM_OPENGLES_DEQP_LEVEL));    }}])', 1), ('([1:/android/midi/cts/MidiEchoTest.java]:[EQP]:[1]:method_text:[o.TYPE_VIRTUAL,                echoInfo.getType());    }    // Is the MidiManager supported?   ])', 1)]"	""	""	"[('EQP', 7), ('android.software.vulkan.deqp.level', 1)]"	"[('[android.hardware.camera2.cts.HeifWriterTest testHeif CtsCameraTestCases]', 1), ('[android.graphics.cts.VulkanDeqpLevelTest testVulkanDeqpLevel CtsGraphicsTestCases]', 1), ('[android.graphics.cts.OpenGlEsDeqpLevelTest testOpenGlEsDeqpLevel CtsGraphicsTestCases]', 1), ('[android.midi.cts.MidiEchoTest currentTimeMillis CtsMidiTestCases]', 1)]"
"9.9.4  Resume on Reboot"	"9.9.4"	"C-0-1"	"9.9.4/C-0-1"	"09090400.670001"	"""C-0-1] CE storage MUST NOT be readable even for the attacker who physically has the device and then has these capabilities and limitations:      *   Can use the signing key of any vendor or company to sign arbitrary         messages.     *   Can cause an OTA to be received by the device.     *   Can modify the operation of any hardware (AP, flash etc) except as         detailed below, but such modification involves a delay of at least an         hour and a power cycle that destroys RAM contents.     *   Cannot modify the operation of tamper-resistant hardware (eg Titan M).     *   Cannot read the RAM of the live device.     *   Cannot obtain the user’s credential (PIN, pattern, password) or         otherwise cause it to be entered.  By way of example, a device implementation that implements and complies with all of the descriptions found [here](https://source.android.com/devices/tech/ota/resume-on-reboot) will be compliant with [C-0-1]. """	""	""	"OTA RAM PIN"	""	""	""	""	"[('android.media.cts.MediaCodecTest', 22), ('android.media.cts.VideoCodecTest', 19), ('android.autofillservice.cts.dropdown.CheckoutActivityTest', 13), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 13), ('android.content.pm.cts.PackageManagerTest', 12), ('android.media.cts.NativeDecoderTest', 9), ('android.media.cts.MediaCasTest', 9), ('com.android.cts.webkit.WebViewHostSideStartupTest', 8), ('com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest', 7), ('android.media.cts.EncodeVirtualDisplayWithCompositionTest', 7), ('android.media.cts.AudioManagerTest', 7), ('android.hardware.camera2.cts.FastBasicsTest', 6), ('android.app.usage.cts.UsageReportingTest', 5), ('android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest', 5), ('android.video.cts.VideoEncoderDecoderTest', 5), ('android.hardware.camera2.cts.CameraExtensionCharacteristicsTest', 5), ('android.app.usage.cts.CacheQuotaHintTest', 4), ('android.graphics.pdf.cts.PdfRendererTest', 4), ('android.jdwpsecurity.cts.JdwpSecurityHostTest', 4), ('android.content.res.cts.ResourcesTest', 4), ('android.view.animation.cts.GridLayoutAnimationControllerTest', 3), ('android.webkit.cts.WebChromeClientTest', 3), ('android.view.cts.ViewGroup_LayoutParamsTest', 3), ('org.apache.http.conn.ssl.cts.AbstractVerifierTest', 3), ('android.opengl.cts.ParamsTest', 3), ('android.hardware.camera2.cts.NativeCameraDeviceTest', 3), ('android.media.cts.ExtractDecodeEditEncodeMuxTest', 3), ('android.appsecurity.cts.keyrotationtest.test.SignatureQueryServiceInstrumentationTest', 3), ('android.net.http.cts.HttpResponseCacheTest', 2), ('test.java.com.android.bedstead.deviceadminapp.DeviceAdminAppTest', 2), ('android.media.cts.EncoderTest', 2), ('com.android.compatibility.common.tradefed.presubmit.ApkPackageNameCheck', 2), ('com.android.cts.devicepolicy.MixedProfileOwnerTest', 2), ('android.telephony.ims.cts.ImsReasonInfoTest', 2), ('com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest', 2), ('android.webkit.cts.WebViewZoomTest', 2), ('android.telephonyprovider.cts.MmsPartTest', 2), ('android.hardware.camera2.cts.IdleUidTest', 2), ('android.print.cts.CustomPrintOptionsTest', 2), ('android.uirendering.cts.testclasses.HardwareBitmapTests', 2), ('com.android.cts.dexmetadata.InstallDexMetadataTest', 2), ('android.content.pm.cts.shortcut.backup.publisher1.ShortcutManagerPreBackupTest', 2), ('android.security.cts.Poc16_10', 1), ('android.renderscript.cts.generated.TestExpm1', 1), ('android.appsecurity.cts.AccessSerialNumberTest', 1), ('android.bluetooth.cts.ScanFilterTest', 1), ('android.security.NetworkSecurityPolicyTestBase', 1), ('android.view.inputmethod.cts.CursorAnchorInfoTest', 1), ('android.scopedstorage.cts.host.ScopedStorageCoreHostTest', 1), ('android.security.cts.CVE_2019_2206', 1), ('android.keystore.cts.performance.HmacKeyGenPerformanceTest', 1), ('android.car.cts.CarUxRestrictionsManagerTest', 1), ('android.hardware.consumerir.cts.ConsumerIrTest', 1), ('android.util.proto.cts.ProtoOutputStreamUInt64Test', 1), ('android.content.pm.cts.PermissionFeatureTest', 1), ('android.net.wifi.cts.WifiLockTest', 1), ('android.util.proto.cts.ProtoOutputStreamBytesTest', 1), ('android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest', 1), ('com.android.cts.transferowner.TransferDeviceOwnerOutgoingTest', 1), ('android.security.cts.CVE_2016_8332', 1), ('android.appsecurity.cts.CorruptApkTests', 1), ('android.autofillservice.cts.unittests.LuhnChecksumValidatorTest', 1), ('android.car.cts.permissioncarspeed.PermissionCarSpeedTest', 1), ('android.renderscript.cts.generated.TestFmax', 1), ('android.security.cts.CVE_2020_0038', 1), ('android.renderscript.cts.IsObjectTest', 1), ('android.net.http.cts.ApacheHttpClientTest', 1), ('android.renderscript.cts.generated.TestNativeExp', 1), ('android.os.cts.CountDownTimerTest', 1), ('android.binder.cts.JavaClientTest', 1), ('android.widget.cts.MediaControllerTest', 1), ('android.util.cts.PatternsTest', 1), ('android.acceleration.cts.BaseAccelerationTest', 1), ('android.sample.cts.SampleDeviceReportLogTest', 1), ('android.car.cts.permissioncarenergyports.PermissionCarEnergyPortsTest', 1), ('android.autofillservice.cts.testcore.Timeouts', 1), ('android.app.cts.ActivityActionModeTest', 1), ('android.provider.cts.simphonebook.SimPhonebookContract_SimRecordsTest', 1), ('dot.junit.opcodes.invoke_super.Test_invoke_super', 1), ('test.java.com.android.eventlib.EventLogsTest', 1), ('android.car.cts.ExceptionsTest', 1), ('android.security.cts.CVE_2019_2040', 1), ('android.cts.backup.preservedsettingsapp.PreservedSettingsRestoreTest', 1), ('android.uirendering.cts.testclasses.BitmapBlendModeTest', 1), ('android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest', 1), ('android.atrace.cts.AtraceHostTest', 1)]"	"[('destroy', 114), ('toString', 90), ('setUp', 57), ('getDevice', 54), ('tearDown', 32), ('StringBuilder', 30), ('getInstrumentation', 20), ('getTargetContext', 12), ('getContext', 10), ('getPackageName', 10), ('setup', 8), ('ArgumentsFloatFloat', 8), ('ArgumentsHalfHalf', 8), ('getMediaDirString', 7), ('ArgumentsFloatFloatFloat', 7), ('ArgumentsHalfHalfHalf', 7), ('getPackageManager', 6), ('build', 6), ('getDeviceScriptFilepath', 5), ('getActivity', 4), ('getAutofillValue', 4), ('getUiAutomation', 4), ('getContentResolver', 4), ('getService', 4), ('any', 4), ('getResources', 4), ('getSystem', 4), ('shutdown', 3), ('retrieveInfo', 3), ('uninstallApks', 3), ('setupExternalStorage', 2), ('getActivityRule', 2), ('afterActivityLaunched', 2), ('MockWebServer', 2), ('randomUUID', 2), ('mkdirs', 2), ('getPath', 2), ('getName', 2), ('getDeviceJarFilepath', 2), ('builder', 2), ('create', 2), ('ensureDefaultSmsApp', 2), ('getSimpleName', 2), ('getExternalStorageDirectory', 2), ('main', 2), ('getPages', 2), ('setUpServicesAndAdapter', 2), ('getMock', 2), ('getSession', 2), ('areChannelsBypassingDnd', 2), ('hasVibrator', 2), ('getRingerMode', 2), ('getNotificationPolicy', 2), ('getCurrentInterruptionFilter', 2), ('getGridView', 1), ('checkExpm1FloatFloat', 1), ('checkExpm1Float2Float2', 1), ('checkExpm1Float3Float3', 1), ('checkExpm1Float4Float4', 1), ('checkExpm1HalfHalf', 1), ('checkExpm1Half2Half2', 1), ('checkExpm1Half3Half3', 1), ('checkExpm1Half4Half4', 1), ('getDefaultAdapter', 1), ('Builder', 1), ('getCompoundButtonAutoFillValue', 1), ('getSaveCc', 1), ('autofillSpinnerWithTextValue', 1), ('getSpinnerAutoFillValue', 1), ('getCcExpiration', 1), ('getCar', 1), ('render45degreeRotationTranslationAndScaleAndClip', 1), ('Matrix', 1), ('release', 1), ('getClass', 1), ('makeData', 1), ('BackupUtils', 1), ('getAccount', 1), ('ServiceConnection', 1), ('size', 1), ('createScriptTempFile', 1), ('delete', 1), ('trim', 1), ('toLowerCase', 1), ('checkFmaxFloatFloatFloat', 1), ('checkFmaxFloat2Float2Float2', 1), ('checkFmaxFloat3Float3Float3', 1), ('checkFmaxFloat4Float4Float4', 1), ('checkFmaxHalfHalfHalf', 1), ('checkFmaxHalf2Half2Half2', 1), ('checkFmaxHalf3Half3Half3', 1), ('checkFmaxHalf4Half4Half4', 1), ('checkFmaxFloat2FloatFloat2', 1), ('checkFmaxFloat3FloatFloat3', 1), ('checkFmaxFloat4FloatFloat4', 1), ('checkFmaxHalf2HalfHalf2', 1), ('checkFmaxHalf3HalfHalf3', 1), ('checkFmaxHalf4HalfHalf4', 1), ('cleanup', 1), ('checkNativeExpFloatFloat', 1), ('checkNativeExpFloat2Float2', 1), ('checkNativeExpFloat3Float3', 1), ('checkNativeExpFloat4Float4', 1), ('checkNativeExpHalfHalf', 1), ('checkNativeExpHalf2Half2', 1), ('checkNativeExpHalf3Half3', 1), ('checkNativeExpHalf4Half4', 1), ('data', 1), ('get', 1), ('startHandlerThread', 1), ('start', 1), ('stopHandlerThread', 1), ('quit', 1), ('assertNotCalled', 1), ('SimPhonebookRequirementsRule', 1), ('getApplicationContext', 1), ('getDefaultSubscriptionId', 1), ('newSingleThreadScheduledExecutor', 1), ('getCameraManager', 1), ('RuntimeException', 1), ('verifySignatures_noRotation_succeeds', 1), ('verifySignatures_withRotation_succeeds', 1), ('getDataDir', 1), ('createNewFile', 1)]"	"[('CtsMediaTestCases', 78), ('CtsDevicePolicyManagerTestCases', 22), ('CtsContentTestCases', 17), ('CtsCameraTestCases', 16), ('CtsAutoFillServiceTestCases', 15), ('CtsUsageStatsTestCases', 9), ('CtsViewTestCases', 6), ('CtsApacheHttpTestCases', 6), ('CtsSecurityBulletinHostTestCases', 5), ('CtsWebkitTestCases', 5), ('CtsShortcutManagerTestCases', 5), ('CtsVideoTestCases', 5), ('CtsRenderscriptTestCases', 4), ('CtsPdfTestCases', 4), ('CtsJdwpSecurityHostTestCases', 4), ('CtsOpenGLTestCases', 3), ('CtsUiRenderingTestCases', 3), ('CtsAppSecurityHostTestCases', 2), ('CtsCarTestCases', 2), ('CtsProtoTestCases', 2), ('CtsTelephonyTestCases', 2), ('CtsTelephonyProviderTestCases', 2), ('CtsPrintTestCases', 2), ('CtsBluetoothTestCases', 1), ('CtsInputMethodTestCases', 1), ('CtsKeystoreTestCases', 1), ('CtsHardwareTestCases', 1), ('CtsWifiTestCases', 1), ('CtsNdkBinderTestCases', 1), ('CtsWidgetTestCases', 1), ('CtsUtilTestCases', 1), ('CtsAccelerationTestCases', 1), ('CtsSampleDeviceTestCases', 1), ('CtsAppTestCases', 1), ('CtsSimPhonebookProviderTestCases', 1), ('CtsContactsProviderTestCases', 1), ('CtsAtraceHostTestCases', 1)]"	""	""	""	""	"android.content.pm.cts.shortcut.backup.publisher1.ShortcutManagerPreBackupTest"	"getInstrumentation"	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaCodecTest.java', 22), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/VideoCodecTest.java', 19), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/dropdown/CheckoutActivityTest.java', 13), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 13), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/NativeDecoderTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaCasTest.java', 9), ('/home/gpoor/cts-12-source/cts/hostsidetests/webkit/src/com/android/cts/webkit/WebViewHostSideStartupTest.java', 8), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioManagerTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/FastBasicsTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageReportingTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/video/src/android/video/cts/VideoEncoderDecoderTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/CacheQuotaHintTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/pdf/src/android/graphics/pdf/cts/PdfRendererTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/jdwpsecurity/src/android/jdwpsecurity/cts/JdwpSecurityHostTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/res/cts/ResourcesTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/GridLayoutAnimationControllerTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebChromeClientTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewGroup_LayoutParamsTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/apache-http/src/org/apache/http/conn/ssl/cts/AbstractVerifierTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/opengl/src/android/opengl/cts/ParamsTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/NativeCameraDeviceTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/ExtractDecodeEditEncodeMuxTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/KeyRotationTest/ServiceTest/src/android/appsecurity/cts/keyrotationtest/test/SignatureQueryServiceInstrumentationTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/apache-http/src/android/net/http/cts/HttpResponseCacheTest.java', 2), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/deviceadminapp/src/test/java/com/android/bedstead/deviceadminapp/DeviceAdminAppTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/EncoderTest.java', 2), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsReasonInfoTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewZoomTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephonyprovider/src/android/telephonyprovider/cts/MmsPartTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/IdleUidTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/CustomPrintOptionsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/HardwareBitmapTests.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/dexmetadata/app/src/com/android/cts/dexmetadata/InstallDexMetadataTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/publisher1/src/android/content/pm/cts/shortcut/backup/publisher1/ShortcutManagerPreBackupTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc16_10.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestExpm1.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AccessSerialNumberTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanFilterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/netsecpolicy/src/android/security/NetworkSecurityPolicyTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/CursorAnchorInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/host/src/android/scopedstorage/cts/host/ScopedStorageCoreHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2019_2206.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarUxRestrictionsManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/consumerir/cts/ConsumerIrTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/proto/src/android/util/proto/cts/ProtoOutputStreamUInt64Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionFeatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLockTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/proto/src/android/util/proto/cts/ProtoOutputStreamBytesTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/SyncAdapterSettingsApp/src/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/TransferDeviceOwnerOutgoingTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2016_8332.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/CorruptApkTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/LuhnChecksumValidatorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarSpeed/src/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestFmax.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2020_0038.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/IsObjectTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/apache-http/src/android/net/http/cts/ApacheHttpClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestNativeExp.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/CountDownTimerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/binder_ndk/src/android/binder/cts/JavaClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/MediaControllerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/util/src/android/util/cts/PatternsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/acceleration/src/android/acceleration/cts/BaseAccelerationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sample/src/android/sample/cts/SampleDeviceReportLogTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarEnergyPorts/src/android/car/cts/permissioncarenergyports/PermissionCarEnergyPortsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/testcore/Timeouts.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityActionModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/simphonebookprovider/src/android/provider/cts/simphonebook/SimPhonebookContract_SimRecordsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_super/Test_invoke_super.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/eventlib/src/test/java/com/android/eventlib/EventLogsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/ExceptionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2019_2040.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/PreservedSettingsApp/src/android/cts/backup/preservedsettingsapp/PreservedSettingsRestoreTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering27/src/android/uirendering/cts/testclasses/BitmapBlendModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/atrace/src/android/atrace/cts/AtraceHostTest.java', 1)]"	"[('(6,OTA,/android/media/cts/NativeDecoderTest.java)', 1), ('(15,RAM,/android/media/cts/NativeDecoderTest.java)', 1), ('(11,OTA,/com/android/cts/webkit/WebViewHostSideStartupTest.java)', 1), ('(76,RAM,/android/view/animation/cts/GridLayoutAnimationControllerTest.java)', 1), ('(1,OTA,/android/security/cts/Poc16_10.java)', 1), ('(1,RAM,/android/renderscript/cts/generated/TestExpm1.java)', 1), ('(2,OTA,/android/appsecurity/cts/AccessSerialNumberTest.java)', 1), ('(2,OTA,/android/webkit/cts/WebChromeClientTest.java)', 1), ('(3,RAM,/android/webkit/cts/WebChromeClientTest.java)', 1), ('(16,RAM,/android/view/cts/ViewGroup_LayoutParamsTest.java)', 1), ('(1,OTA,/android/bluetooth/cts/ScanFilterTest.java)', 1), ('(26,OTA,/android/app/usage/cts/CacheQuotaHintTest.java)', 1), ('(2,PIN,/android/security/NetworkSecurityPolicyTestBase.java)', 1), ('(1,OTA,/org/apache/http/conn/ssl/cts/AbstractVerifierTest.java)', 1), ('(2,RAM,/org/apache/http/conn/ssl/cts/AbstractVerifierTest.java)', 1), ('(1,OTA,/android/view/inputmethod/cts/CursorAnchorInfoTest.java)', 1), ('(1,OTA,/android/app/usage/cts/UsageReportingTest.java)', 1), ('(4,PIN,/android/app/usage/cts/UsageReportingTest.java)', 1), ('(1,OTA,/android/scopedstorage/cts/host/ScopedStorageCoreHostTest.java)', 1), ('(1,OTA,/android/autofillservice/cts/dropdown/CheckoutActivityTest.java)', 1), ('(36,PIN,/android/autofillservice/cts/dropdown/CheckoutActivityTest.java)', 1), ('(1,OTA,/android/security/cts/CVE_2019_2206.java)', 1), ('(1,OTA,/android/net/http/cts/HttpResponseCacheTest.java)', 1), ('(1,RAM,/android/net/http/cts/HttpResponseCacheTest.java)', 1), ('(3,OTA,/test/java/com/android/bedstead/deviceadminapp/DeviceAdminAppTest.java)', 1), ('(1,RAM,/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java)', 1), ('(3,OTA,/android/car/cts/CarUxRestrictionsManagerTest.java)', 1), ('(4,OTA,/android/graphics/pdf/cts/PdfRendererTest.java)', 1), ('(3,RAM,/android/graphics/pdf/cts/PdfRendererTest.java)', 1), ('(7,OTA,/android/media/cts/EncoderTest.java)', 1), ('(3,PIN,/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java)', 1), ('(8,OTA,/android/hardware/consumerir/cts/ConsumerIrTest.java)', 1), ('(1,RAM,/android/util/proto/cts/ProtoOutputStreamUInt64Test.java)', 1), ('(2,OTA,/com/android/cts/devicepolicy/MixedProfileOwnerTest.java)', 1), ('(1,PIN,/com/android/cts/devicepolicy/MixedProfileOwnerTest.java)', 1), ('(1,OTA,/android/content/pm/cts/PermissionFeatureTest.java)', 1), ('(31,OTA,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(16,RAM,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(4,RAM,/android/opengl/cts/ParamsTest.java)', 1), ('(7,RAM,/android/hardware/camera2/cts/NativeCameraDeviceTest.java)', 1), ('(8,RAM,/android/telephony/ims/cts/ImsReasonInfoTest.java)', 1), ('(1,OTA,/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java)', 1), ('(9,PIN,/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java)', 1), ('(1,OTA,/android/net/wifi/cts/WifiLockTest.java)', 1), ('(1,RAM,/android/util/proto/cts/ProtoOutputStreamBytesTest.java)', 1), ('(1,OTA,/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java)', 1), ('(9,RAM,/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java)', 1), ('(2,RAM,/com/android/cts/transferowner/TransferDeviceOwnerOutgoingTest.java)', 1), ('(3,OTA,/android/media/cts/MediaCasTest.java)', 1), ('(76,RAM,/android/media/cts/MediaCasTest.java)', 1), ('(2,OTA,/android/content/pm/cts/PackageManagerTest.java)', 1), ('(43,PIN,/android/content/pm/cts/PackageManagerTest.java)', 1), ('(2,RAM,/android/content/pm/cts/PackageManagerTest.java)', 1), ('(1,OTA,/android/security/cts/CVE_2016_8332.java)', 1), ('(2,OTA,/android/jdwpsecurity/cts/JdwpSecurityHostTest.java)', 1), ('(2,PIN,/android/jdwpsecurity/cts/JdwpSecurityHostTest.java)', 1), ('(1,RAM,/android/jdwpsecurity/cts/JdwpSecurityHostTest.java)', 1), ('(5,OTA,/android/appsecurity/cts/CorruptApkTests.java)', 1), ('(1,OTA,/android/autofillservice/cts/unittests/LuhnChecksumValidatorTest.java)', 1), ('(2,OTA,/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java)', 1), ('(1,OTA,/android/webkit/cts/WebViewZoomTest.java)', 1), ('(1,PIN,/android/webkit/cts/WebViewZoomTest.java)', 1), ('(1,RAM,/android/renderscript/cts/generated/TestFmax.java)', 1), ('(1,OTA,/android/security/cts/CVE_2020_0038.java)', 1), ('(1,RAM,/android/renderscript/cts/IsObjectTest.java)', 1), ('(28,OTA,/android/video/cts/VideoEncoderDecoderTest.java)', 1), ('(1,PIN,/android/video/cts/VideoEncoderDecoderTest.java)', 1), ('(145,RAM,/android/video/cts/VideoEncoderDecoderTest.java)', 1), ('(1,OTA,/android/telephonyprovider/cts/MmsPartTest.java)', 1), ('(1,PIN,/android/telephonyprovider/cts/MmsPartTest.java)', 1), ('(1,OTA,/android/net/http/cts/ApacheHttpClientTest.java)', 1), ('(1,RAM,/android/renderscript/cts/generated/TestNativeExp.java)', 1), ('(11,OTA,/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java)', 1), ('(2,OTA,/android/media/cts/ExtractDecodeEditEncodeMuxTest.java)', 1), ('(69,RAM,/android/media/cts/ExtractDecodeEditEncodeMuxTest.java)', 1), ('(1,RAM,/android/os/cts/CountDownTimerTest.java)', 1), ('(4,RAM,/android/binder/cts/JavaClientTest.java)', 1), ('(12,RAM,/android/hardware/camera2/cts/IdleUidTest.java)', 1), ('(1,OTA,/android/print/cts/CustomPrintOptionsTest.java)', 1), ('(8,RAM,/android/print/cts/CustomPrintOptionsTest.java)', 1), ('(1,OTA,/android/widget/cts/MediaControllerTest.java)', 1), ('(1,RAM,/android/util/cts/PatternsTest.java)', 1), ('(1,OTA,/android/acceleration/cts/BaseAccelerationTest.java)', 1), ('(7,RAM,/android/sample/cts/SampleDeviceReportLogTest.java)', 1), ('(13,OTA,/android/media/cts/MediaCodecTest.java)', 1), ('(10,PIN,/android/media/cts/MediaCodecTest.java)', 1), ('(81,RAM,/android/media/cts/MediaCodecTest.java)', 1), ('(2,OTA,/android/car/cts/permissioncarenergyports/PermissionCarEnergyPortsTest.java)', 1), ('(2,RAM,/android/autofillservice/cts/testcore/Timeouts.java)', 1), ('(2,OTA,/android/app/cts/ActivityActionModeTest.java)', 1), ('(2,OTA,/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java)', 1), ('(6,PIN,/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java)', 1), ('(2,OTA,/android/provider/cts/simphonebook/SimPhonebookContract_SimRecordsTest.java)', 1), ('(1,RAM,/dot/junit/opcodes/invoke_super/Test_invoke_super.java)', 1), ('(8,OTA,/android/content/res/cts/ResourcesTest.java)', 1), ('(2,RAM,/android/content/res/cts/ResourcesTest.java)', 1), ('(1,OTA,/test/java/com/android/eventlib/EventLogsTest.java)', 1), ('(1,OTA,/android/media/cts/VideoCodecTest.java)', 1), ('(7,PIN,/android/media/cts/VideoCodecTest.java)', 1), ('(130,RAM,/android/media/cts/VideoCodecTest.java)', 1), ('(2,OTA,/android/uirendering/cts/testclasses/HardwareBitmapTests.java)', 1), ('(2,PIN,/com/android/cts/dexmetadata/InstallDexMetadataTest.java)', 1), ('(10,RAM,/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java)', 1), ('(2,OTA,/android/car/cts/ExceptionsTest.java)', 1), ('(1,OTA,/android/security/cts/CVE_2019_2040.java)', 1), ('(6,OTA,/android/appsecurity/cts/keyrotationtest/test/SignatureQueryServiceInstrumentationTest.java)', 1), ('(1,OTA,/android/cts/backup/preservedsettingsapp/PreservedSettingsRestoreTest.java)', 1), ('(1,PIN,/android/uirendering/cts/testclasses/BitmapBlendModeTest.java)', 1), ('(2,OTA,/android/hardware/camera2/cts/FastBasicsTest.java)', 1), ('(1,PIN,/android/hardware/camera2/cts/FastBasicsTest.java)', 1), ('(21,RAM,/android/hardware/camera2/cts/FastBasicsTest.java)', 1), ('(1,OTA,/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java)', 1), ('(4,RAM,/android/atrace/cts/AtraceHostTest.java)', 1), ('(4,OTA,/android/media/cts/AudioManagerTest.java)', 1), ('(3,PIN,/android/media/cts/AudioManagerTest.java)', 1), ('(7,RAM,/android/media/cts/AudioManagerTest.java)', 1), ('(1,OTA,/android/content/pm/cts/shortcut/backup/publisher1/ShortcutManagerPreBackupTest.java)', 1), ('(2,PIN,/android/content/pm/cts/shortcut/backup/publisher1/ShortcutManagerPreBackupTest.java)', 1)]"	"[('([3:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[3]:method_text:[tDataset(""ACME CC"");        // Check the results.        mActivity.assertAutoFilled();    }   ])', 2), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[PIN]:[1]:method_text:[     assertTrue(request.isValid());            assertTrue(request.accept());        });    }   ])', 2), ('([1:/android/media/cts/AudioManagerTest.java]:[OTA]:[1]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);        }    }   ])', 2), ('([3:/android/media/cts/NativeDecoderTest.java]:[OTA]:[3]:method_text:[     if (testsRun == 0) {            MediaUtils.skipTest(""no decoders found"");        }    }   ])', 1), ('([3:/android/media/cts/NativeDecoderTest.java]:[OTA]:[3]:method_text:[e,            int fd, long startOffset, long length);    @Presubmit    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/NativeDecoderTest.java]:[RAM]:[2]:method_text:[     if (testsRun == 0) {            MediaUtils.skipTest(""no decoders found"");        }    }   ])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[RAM]:[1]:method_text:[p4_h264_1000kbps_25fps_aac_stereo_128kbps_44100hz.mp4"", false);    }    @NonMediaMainlineTest   ])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[RAM]:[1]:method_text:[3gp_h263_300kbps_25fps_aac_stereo_128kbps_11025hz.3gp"", false);    }    @NonMediaMainlineTest   ])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[RAM]:[1]:method_text:[   testMuxer(""video_640x360_mp4_hevc_450kbps_no_b.mp4"", false);    }    @NonMediaMainlineTest   ])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[RAM]:[1]:method_text:[p4_mpeg2_105kbps_25fps_aac_stereo_128kbps_44100hz.mp4"", false);    }    @NonMediaMainlineTest   ])', 1), ('([3:/android/media/cts/NativeDecoderTest.java]:[RAM]:[3]:method_text:[erNative(int in, long inoffset, long insize,            int out, boolean webm);    @Presubmit   ])', 1), ('([6:/android/media/cts/NativeDecoderTest.java]:[RAM]:[6]:method_text:[ deleteAMediaExtractor(long ex);    private static native void deleteAMediaDataSource(long ds);}])', 1), ('([2:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[OTA]:[2]:method_text:[        super.setUp();    }    @AppModeFull(reason = ""Instant apps cannot open TCP sockets."")   ])', 1), ('([1:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[OTA]:[1]:method_text:[AvailableException {        assertDeviceTestPasses(""testCookieManagerBlockingUiThread"");    }   ])', 1), ('([1:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[OTA]:[1]:method_text:[ableException {        assertDeviceTestPasses(""testGetCurrentWebViewPackageOnUiThread"");    }   ])', 1), ('([1:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[OTA]:[1]:method_text:[ceNotAvailableException {        assertDeviceTestPasses(""testGetCurrentWebViewPackage"");    }   ])', 1), ('([1:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[OTA]:[1]:method_text:[vailableException {        assertDeviceTestPasses(""testStrictModeNotViolatedOnStartup"");    }   ])', 1), ('([1:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[OTA]:[1]:method_text:[NotAvailableException {        assertDeviceTestPasses(""testGetWebViewLooperOnUiThread"");    }   ])', 1), ('([1:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[OTA]:[1]:method_text:[{        assertDeviceTestPasses(""testGetWebViewLooperCreatedOnUiThreadFromInstrThread"");    }   ])', 1), ('([3:/com/android/cts/webkit/WebViewHostSideStartupTest.java]:[OTA]:[3]:method_text:[nstrumentationTests(testRunner, listener));        return listener.getCurrentRunResults();    }}])', 1), ('([2:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[RAM]:[2]:method_text:[FAULT_DELAY,                DEFAULT_DELAY);        mGridView = mActivity.getGridView();    }   ])', 1), ('([4:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[RAM]:[4]:method_text:[mation(float alpha) {        assertTrue(alpha > 0.0f);        assertTrue(alpha < 1.0f);    }   ])', 1), ('([70:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[RAM]:[70]:method_text:[   layoutParams.layoutAnimationParameters = animationParams;        return layoutParams;    }   ])', 1), ('([1:/android/security/cts/Poc16_10.java]:[OTA]:[1]:method_text:[nner.class)public class Poc16_10 extends SecurityTestCase {    /**     *  b/30204103     */   ])', 1), ('([1:/android/renderscript/cts/generated/TestExpm1.java]:[RAM]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([2:/android/appsecurity/cts/AccessSerialNumberTest.java]:[OTA]:[2]:method_text:[ion {        super.tearDown();        getDevice().uninstallPackage(ACCESS_SERIAL_PKG);    }   ])', 1), ('([1:/android/webkit/cts/WebChromeClientTest.java]:[OTA]:[1]:method_text:[IconDb.removeAllIcons();            mIconDb.close();        }        super.tearDown();    }   ])', 1), ('([1:/android/webkit/cts/WebChromeClientTest.java]:[OTA]:[1]:method_text:[onReceivedIcon(WebView view, Bitmap icon) {            mHadOnReceivedIcon = true;        }    }}])', 1), ('([3:/android/webkit/cts/WebChromeClientTest.java]:[RAM]:[3]:method_text:[onReceivedIcon(WebView view, Bitmap icon) {            mHadOnReceivedIcon = true;        }    }}])', 1), ('([2:/android/view/cts/ViewGroup_LayoutParamsTest.java]:[RAM]:[2]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([5:/android/view/cts/ViewGroup_LayoutParamsTest.java]:[RAM]:[5]:method_text:[s temp = new ViewGroup.LayoutParams(320, 480);        new ViewGroup.LayoutParams(temp);    }   ])', 1), ('([9:/android/view/cts/ViewGroup_LayoutParamsTest.java]:[RAM]:[9]:method_text:[, int heightAttr) {            super.setBaseAttributes(a, widthAttr, heightAttr);        }    }}])', 1), ('([1:/android/bluetooth/cts/ScanFilterTest.java]:[OTA]:[1]:method_text:[000000L);            mFilterBuilder = new ScanFilter.Builder();        }    }    @SmallTest   ])', 1), ('([2:/android/app/usage/cts/CacheQuotaHintTest.java]:[OTA]:[2]:method_text:[port org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)public class CacheQuotaHintTest {   ])', 1), ('([4:/android/app/usage/cts/CacheQuotaHintTest.java]:[OTA]:[4]:method_text:[lumeUuid= */ ""uuid"", /* uid= */ 0, /* quota= */ 100);        assertCacheQuotaHint(hint);    }   ])', 1), ('([6:/android/app/usage/cts/CacheQuotaHintTest.java]:[OTA]:[6]:method_text:[*/ ""uuid"", /* uid= */ 0, /* quota= */ 100)).build();        assertCacheQuotaHint(hint);    }   ])', 1), ('([14:/android/app/usage/cts/CacheQuotaHintTest.java]:[OTA]:[14]:method_text:[));        assertEquals(100, hint.getQuota());        assertNotNull(hint.getUsageStats());    }}])', 1), ('([2:/android/security/NetworkSecurityPolicyTestBase.java]:[PIN]:[2]:method_text:[assertEquals(expectedValue, appInfo.flags & ApplicationInfo.FLAG_USES_CLEARTEXT_TRAFFIC);    }   ])', 1), ('([1:/org/apache/http/conn/ssl/cts/AbstractVerifierTest.java]:[OTA]:[1]:method_text:[      public int getBasicConstraints() {                return 0;            }        };    }}])', 1), ('([1:/org/apache/http/conn/ssl/cts/AbstractVerifierTest.java]:[RAM]:[1]:method_text:[00 principal in the first place. */public final class AbstractVerifierTest extends TestCase {   ])', 1), ('([1:/org/apache/http/conn/ssl/cts/AbstractVerifierTest.java]:[RAM]:[1]:method_text:[      public int getBasicConstraints() {                return 0;            }        };    }}])', 1), ('([1:/android/view/inputmethod/cts/CursorAnchorInfoTest.java]:[OTA]:[1]:method_text:[1, firstInstance.getMatrix());        assertEquals(matrix2, secondInstance.getMatrix());    }   ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[OTA]:[1]:method_text:[0 = mTargetPackage + ""/"" + TOKEN_0;        mFullToken1 = mTargetPackage + ""/"" + TOKEN_1;    }   ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[PIN]:[1]:method_text:[sertAppOrTokenUsed(mFullToken0, false);        assertAppOrTokenUsed(mFullToken1, false);    }   ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[PIN]:[1]:method_text:[er.reportUsageStop(activity1, TOKEN_0);        assertAppOrTokenUsed(mFullToken0, false);    }   ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[PIN]:[1]:method_text:[      Thread.sleep(1000);            assertAppOrTokenUsed(mFullToken0, false);        }    }   ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[PIN]:[1]:method_text:[    break;                }            }            return found == expected;        });    }}])', 1), ('([1:/android/scopedstorage/cts/host/ScopedStorageCoreHostTest.java]:[OTA]:[1]:method_text:[ Exception {        executeShellCommand(""rm -r /sdcard/Android/data/com.android.shell"");    }   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[OTA]:[1]:method_text:[rActivityLaunched() {                mActivity = getActivity();            }        };    }   ])', 1), ('([2:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[2]:method_text:[rActivityLaunched() {                mActivity = getActivity();            }        };    }   ])', 1), ('([3:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[3]:method_text:[ing onProvideAutofillStructure(),    // but that would require creating a custom ViewStructure.   ])', 1), ('([2:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[2]:method_text:[nored when the selected spinner element is not     * available in the autofill options.     */   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[1]:method_text:[ // ============================================================================================   ])', 1), ('([11:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[11]:method_text:[        assertThat(spinner.getSelectedItemPosition()).isEqualTo(expectedValue);        }    }   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[1]:method_text:[inner() throws Exception {        autofillListValue(AutofillValue.forList(0), 0, false);    }   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[1]:method_text:[pinner() throws Exception {        autofillListValue(AutofillValue.forList(1), 1, true);    }   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[1]:method_text:[nner() throws Exception {        autofillListValue(AutofillValue.forList(-1), 0, false);    }   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[1]:method_text:[alue() throws Exception {        autofillListValue(AutofillValue.forText(""""), 0, false);    }   ])', 1), ('([7:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[7]:method_text:[ // ============================================================================================   ])', 1), ('([1:/android/security/cts/CVE_2019_2206.java]:[OTA]:[1]:method_text:[tyTestCase {    /**     * b/139188579     * Vulnerability Behaviour: SIGSEGV in self     */   ])', 1), ('([1:/android/net/http/cts/HttpResponseCacheTest.java]:[OTA]:[1]:method_text:[     ResponseCache.setDefault(null);        server.shutdown();        super.tearDown();    }   ])', 1), ('([1:/android/net/http/cts/HttpResponseCacheTest.java]:[RAM]:[1]:method_text:[     ResponseCache.setDefault(null);        server.shutdown();        super.tearDown();    }   ])', 1), ('([2:/test/java/com/android/bedstead/deviceadminapp/DeviceAdminAppTest.java]:[OTA]:[2]:method_text:[endency of the test    @Before    public void setUp() {        EventLogs.resetLogs();    }   ])', 1), ('([1:/test/java/com/android/bedstead/deviceadminapp/DeviceAdminAppTest.java]:[OTA]:[1]:method_text:[ge(sContext.getPackageName());            assertThat(logs.poll()).isNotNull();        }    }   ])', 1), ('([1:/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java]:[RAM]:[1]:method_text:[               .setKeySize(keySize)                                    .build());        }    }}])', 1), ('([3:/android/car/cts/CarUxRestrictionsManagerTest.java]:[OTA]:[3]:method_text:[ getCar().getCarManager(Car.CAR_UX_RESTRICTION_SERVICE);        assertNotNull(mManager);    }   ])', 1), ('([1:/android/graphics/pdf/cts/PdfRendererTest.java]:[OTA]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([3:/android/graphics/pdf/cts/PdfRendererTest.java]:[OTA]:[3]:method_text:[S, A4_PORTRAIT, clip, transform,                Page.RENDER_MODE_FOR_DISPLAY, mContext);    }   ])', 1), ('([1:/android/graphics/pdf/cts/PdfRendererTest.java]:[RAM]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([2:/android/graphics/pdf/cts/PdfRendererTest.java]:[RAM]:[2]:method_text:[    assertEquals(Color.BLACK, probes[14]);        assertEquals(Color.BLACK, probes[15]);    }   ])', 1), ('([2:/android/media/cts/EncoderTest.java]:[OTA]:[2]:method_text:[ltEncoders.put(mime, codec.getName());        codec.release();        return isDefault;    }   ])', 1), ('([5:/android/media/cts/EncoderTest.java]:[OTA]:[5]:method_text:[            muxer.stop();            muxer.release();            muxer = null;        }    }}])', 1), ('([1:/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java]:[PIN]:[1]:method_text:[ with same package names may be installed. Otherwise it may results in     * conflicts.     */   ])', 1), ('([2:/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java]:[PIN]:[2]:method_text:[);                        }                    }                }            }        }    }}])', 1), ('([8:/android/hardware/consumerir/cts/ConsumerIrTest.java]:[OTA]:[8]:method_text:[ assertTrue(msg, newTime - currentTime <= totalXmitTimeNanos * (1.0 + margin));        }    }   ])', 1), ('([1:/android/util/proto/cts/ProtoOutputStreamUInt64Test.java]:[RAM]:[1]:method_text:[------------------------------------------------------    /**     * Test writeUInt64.     */   ])', 1), ('([2:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[OTA]:[2]:method_text:[N_RECEIVER_TEST_CLASS, mUserId));        super.tearDown();    }    @Override    @FlakyTest   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[PIN]:[1]:method_text:[   assumeTrue(""Skipping test: profile owner is not on system user"", mUserId == USER_SYSTEM);    }}])', 1), ('([1:/android/content/pm/cts/PermissionFeatureTest.java]:[OTA]:[1]:method_text:[ Figure out which APIs should work.public class PermissionFeatureTest extends AndroidTestCase {   ])', 1), ('([6:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[6]:method_text:[.        getDevice().executeShellCommand(""input keyevent 3"");        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[1]:method_text:[elper"",            ""testAssertCallerIsApplicationRestrictionsManagingPackage"", mUserId);    }   ])', 1), ('([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[4]:method_text:[Delegations} to test that     *    the scope can only be delegatd to one app at a time.     */   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[1]:method_text:[iceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testCleanup"");        }    }    @RequiresDevice   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[1]:method_text:[           ""cmd content_capture set default-service-enabled "" + mUserId + "" "" + enabled);    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[2]:method_text:[.map(line -> line.substring(prefixLength))                .collect(Collectors.toList());    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[1]:method_text:[ntSpecificIdTest"",                ""testThrowsWhenTryingToReSetOrganizationId"", mUserId);    }   ])', 1), ('([15:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[15]:method_text:[and(                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);    }}])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[RAM]:[2]:method_text:[.        getDevice().executeShellCommand(""input keyevent 3"");        super.tearDown();    }   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[RAM]:[3]:method_text:[                DEVICE_ADMIN_PKG, STORAGE_ENCRYPTION_TEST_CLASS, null, mUserId, params);    }   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[RAM]:[3]:method_text:[lean(false)                .setStrings(systemPackageToEnable)                .build());    }   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[RAM]:[3]:method_text:[lse)                .setStrings(""android.intent.action.MAIN"")                .build());    }   ])', 1), ('([5:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[RAM]:[5]:method_text:[and(                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);    }}])', 1), ('([2:/android/opengl/cts/ParamsTest.java]:[RAM]:[2]:method_text:[// DO NOT USE AndroidJUnit4, it messes up threadingpublic class ParamsTest extends GlTestBase {   ])', 1), ('([1:/android/opengl/cts/ParamsTest.java]:[RAM]:[1]:method_text:[ntException.class)    public void testNullBufferParam() {        glGenBuffers(1, null);    }   ])', 1), ('([1:/android/opengl/cts/ParamsTest.java]:[RAM]:[1]:method_text:[ assertTrue(buffer.get() > 0);        buffer.rewind();        glDeleteBuffers(1, buffer);    }}])', 1), ('([3:/android/hardware/camera2/cts/NativeCameraDeviceTest.java]:[RAM]:[3]:method_text:[dLibrary(""ctscamera2_jni"");        Log.i(""NativeCameraDeviceTest"", ""after loadlibrary"");    }   ])', 1), ('([3:/android/hardware/camera2/cts/NativeCameraDeviceTest.java]:[RAM]:[3]:method_text:[ePreviewWithSessionParametersNative(mPreviewSurface,                mOverrideCameraId));    }   ])', 1), ('([1:/android/hardware/camera2/cts/NativeCameraDeviceTest.java]:[RAM]:[1]:method_text:[    private static native boolean testCameraDeviceCaptureFailureNative(String overrideCameraId);}])', 1), ('([4:/android/telephony/ims/cts/ImsReasonInfoTest.java]:[RAM]:[4]:method_text:[aCode, mInfo.getExtraCode());        assertEquals(extraMessage, mInfo.getExtraMessage());    }   ])', 1), ('([4:/android/telephony/ims/cts/ImsReasonInfoTest.java]:[RAM]:[4]:method_text:[dInfo.getExtraCode());        assertEquals(extraMessage, unparceledInfo.getExtraMessage());    }}])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[OTA]:[1]:method_text:[NFIG_ACTIVITY_NAME =            ""android.content.pm.cts.shortcutmanager.main_shortcut_config"";   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[PIN]:[1]:method_text:[NFIG_ACTIVITY_NAME =            ""android.content.pm.cts.shortcutmanager.main_shortcut_config"";   ])', 1), ('([6:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[PIN]:[6]:method_text:[getClassName())) {                return info;            }        }        return null;    }}])', 1), ('([1:/android/net/wifi/cts/WifiLockTest.java]:[OTA]:[1]:method_text:[WifiLockTest"";    /**     * Verify acquire and release of High Performance wifi locks     */   ])', 1), ('([1:/android/util/proto/cts/ProtoOutputStreamBytesTest.java]:[RAM]:[1]:method_text:[-------------------------------------------------------    /**     * Test writeBytes.     */   ])', 1), ('([1:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[OTA]:[1]:method_text:[ge.     * 3. Check restored MasterSyncAutomatically=true is the same with backup value.     */   ])', 1), ('([5:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[RAM]:[5]:method_text:[entName(mContext));        assertTrue(""No target users found"", mTargetUsers.size() > 0);    }   ])', 1), ('([4:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[RAM]:[4]:method_text:[ace CrossUserCallable<T> {        T call(ICrossUserService service) throws RemoteException;    }}])', 1), ('([2:/com/android/cts/transferowner/TransferDeviceOwnerOutgoingTest.java]:[RAM]:[2]:method_text:[er.setUp();        setupTestParameters(DevicePolicyManager.ACTION_DEVICE_OWNER_CHANGED);    }   ])', 1), ('([3:/android/media/cts/MediaCasTest.java]:[OTA]:[3]:method_text:[th the enumeration results, and all enumerated CA system ids can     * be instantiated.     */   ])', 1), ('([2:/android/media/cts/MediaCasTest.java]:[RAM]:[2]:method_text:[th the enumeration results, and all enumerated CA system ids can     * be instantiated.     */   ])', 1), ('([9:/android/media/cts/MediaCasTest.java]:[RAM]:[9]:method_text:[ull) {                    descrambler.close();                }            }        }    }   ])', 1), ('([7:/android/media/cts/MediaCasTest.java]:[RAM]:[7]:method_text:[ambler != null) {                unsupportedDescrambler.close();            }        }    }   ])', 1), ('([11:/android/media/cts/MediaCasTest.java]:[RAM]:[11]:method_text:[}    /**     * Test that all sessions are closed after a MediaCas object is released.     */   ])', 1), ('([10:/android/media/cts/MediaCasTest.java]:[RAM]:[10]:method_text:[ }    }    /**     * Test that invalid call sequences fail with expected exceptions.     */   ])', 1), ('([20:/android/media/cts/MediaCasTest.java]:[RAM]:[20]:method_text:[rambler.close();            }        }    }    /**     * Test Resource Lost Event.     */   ])', 1), ('([1:/android/media/cts/MediaCasTest.java]:[RAM]:[1]:method_text:[      }        }    }    /**     * Test Set Event Listener in MediaCas Constructor.     */   ])', 1), ('([16:/android/media/cts/MediaCasTest.java]:[RAM]:[16]:method_text:[parseInt(matcher.group(), 16);        }        return Arrays.copyOfRange(tempArray, 0, i);    }}])', 1), ('([2:/android/content/pm/cts/PackageManagerTest.java]:[OTA]:[2]:method_text:[lPackage(EMPTY_APP_MAX_PACKAGE_NAME);        uninstallPackage(HELLO_WORLD_PACKAGE_NAME);    }   ])', 1), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[1]:method_text:[lPackage(EMPTY_APP_MAX_PACKAGE_NAME);        uninstallPackage(HELLO_WORLD_PACKAGE_NAME);    }   ])', 1), ('([2:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[2]:method_text:[d = true;                break;            }        }        assertTrue(isContained);    }   ])', 1), ('([13:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[13]:method_text:[e PackageManager#addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName)     */   ])', 1), ('([2:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[2]:method_text:[, 0);        assertNotNull(mPackageManager.getDrawable(PACKAGE_NAME, iconRes, appInfo));    }   ])', 1), ('([3:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[3]:method_text:[r.getResourcesForApplication(PACKAGE_NAME)                .getResourceName(resourceId));    }   ])', 1), ('([3:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[3]:method_text:[eManager.getResourcesForApplication(                appInfo, c2).getString(resourceId));    }   ])', 1), ('([9:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[9]:method_text:[als(PACKAGE_NAME, receiver.packageName);    }    // Tests that other packages can be queried.   ])', 1), ('([7:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[7]:method_text:[ame);        assertFalse(TextUtils.isEmpty(groupInfo.loadDescription(mPackageManager)));    }   ])', 1), ('([2:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[2]:method_text:[ fail(""Exception expected"");        } catch (NameNotFoundException expected) {        }    }   ])', 1), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[1]:method_text:[     + "" should be found via getPackageInfo after re-enabling."");            }        }    }   ])', 1), (""([2:/android/content/pm/cts/PackageManagerTest.java]:[RAM]:[2]:method_text:[RY_ONLY flag doesn't add new package names in the result of     * getInstalledPackages.     */   ])"", 1), ('([1:/android/security/cts/CVE_2016_8332.java]:[OTA]:[1]:method_text:[ityTestCase {    /**     * b/37761553     * Vulnerability Behaviour: SIGSEGV in self     */   ])', 1), ('([1:/android/jdwpsecurity/cts/JdwpSecurityHostTest.java]:[OTA]:[1]:method_text:[it has no JDWP connection and cannot be     * debugged.     *     * @throws Exception     */   ])', 1), ('([1:/android/jdwpsecurity/cts/JdwpSecurityHostTest.java]:[OTA]:[1]:method_text:[rmat(""mkdir %s"", remoteFilePath));        return getDevice().doesFileExist(remoteFilePath);    }}])', 1), ('([2:/android/jdwpsecurity/cts/JdwpSecurityHostTest.java]:[PIN]:[2]:method_text:[rmat(""mkdir %s"", remoteFilePath));        return getDevice().doesFileExist(remoteFilePath);    }}])', 1), ('([1:/android/jdwpsecurity/cts/JdwpSecurityHostTest.java]:[RAM]:[1]:method_text:[rmat(""mkdir %s"", remoteFilePath));        return getDevice().doesFileExist(remoteFilePath);    }}])', 1), ('([5:/android/appsecurity/cts/CorruptApkTests.java]:[OTA]:[5]:method_text:[Info());    }    /** Installing the APK described in b/71360999 must not crash the device. */   ])', 1), ('([1:/android/autofillservice/cts/unittests/LuhnChecksumValidatorTest.java]:[OTA]:[1]:method_text:[ndroidJUnit4.class)@AppModeFull(reason = ""Unit test"")public class LuhnChecksumValidatorTest {   ])', 1), ('([2:/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java]:[OTA]:[2]:method_text:[              Car.PROPERTY_SERVICE);        assertThat(mCarPropertyManager).isNotNull();    }   ])', 1), ('([1:/android/webkit/cts/WebViewZoomTest.java]:[OTA]:[1]:method_text:[rver.getAssetUrl(TestHtmlConstants.HELLO_WORLD_URL));        pollingCheckForCanZoomIn();    }   ])', 1), ('([1:/android/webkit/cts/WebViewZoomTest.java]:[PIN]:[1]:method_text:[rver.getAssetUrl(TestHtmlConstants.HELLO_WORLD_URL));        pollingCheckForCanZoomIn();    }   ])', 1), ('([1:/android/renderscript/cts/generated/TestFmax.java]:[RAM]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/android/security/cts/CVE_2020_0038.java]:[OTA]:[1]:method_text:[tyTestCase {    /**     * b/143109193     * Vulnerability Behaviour: SIGSEGV in self     */   ])', 1), ('([1:/android/renderscript/cts/IsObjectTest.java]:[RAM]:[1]:method_text:[  ms_is_object.destroy();        super.tearDown();    }    /**     * is object test     */   ])', 1), ('([4:/android/video/cts/VideoEncoderDecoderTest.java]:[OTA]:[4]:method_text:[. Add further    // tests and change the count if there can be more encoders.    // AVC tests   ])', 1), ('([24:/android/video/cts/VideoEncoderDecoderTest.java]:[OTA]:[24]:method_text:[ePresentationTime(int frameIndex) {        return 132 + frameIndex * 1000000L / mFrameRate;    }}])', 1), ('([1:/android/video/cts/VideoEncoderDecoderTest.java]:[PIN]:[1]:method_text:[. Add further    // tests and change the count if there can be more encoders.    // AVC tests   ])', 1), ('([15:/android/video/cts/VideoEncoderDecoderTest.java]:[RAM]:[15]:method_text:[. Add further    // tests and change the count if there can be more encoders.    // AVC tests   ])', 1), ('([130:/android/video/cts/VideoEncoderDecoderTest.java]:[RAM]:[130]:method_text:[ePresentationTime(int frameIndex) {        return 132 + frameIndex * 1000000L / mFrameRate;    }}])', 1), ('([1:/android/telephonyprovider/cts/MmsPartTest.java]:[OTA]:[1]:method_text:[nup();        mContentResolver = getInstrumentation().getContext().getContentResolver();    }   ])', 1), ('([1:/android/telephonyprovider/cts/MmsPartTest.java]:[PIN]:[1]:method_text:[(1);        assertThatMmsPartInsertSucceeded(insertPartUri, SRC_NAME, MMS_BODY_UPDATE);    }   ])', 1), ('([1:/android/net/http/cts/ApacheHttpClientTest.java]:[OTA]:[1]:method_text:[id tearDown() throws Exception {        super.tearDown();        mWebServer.shutdown();    }   ])', 1), ('([1:/android/renderscript/cts/generated/TestNativeExp.java]:[RAM]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([4:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[OTA]:[4]:method_text:[                           mUserId, DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS));    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[OTA]:[1]:method_text:[iceNotAvailableException {        assertThat(getDevice().removeUser(mUserId)).isFalse();    }   ])', 1), ('([2:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[OTA]:[2]:method_text:[ce().setSetting(""global"", ""stay_on_while_plugged_in"", stayAwake);            }        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[OTA]:[1]:method_text:[           suspended ? ""testSuspendPersonalApps"" : ""testUnsuspendPersonalApps"", mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[OTA]:[1]:method_text:[          canStart ? ""testCanStartActivity"" : ""testCannotStartActivity"", mPrimaryUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[OTA]:[1]:method_text:[+ ADMIN_RECEIVER_TEST_CLASS,                        userId, /* expectFailure */ false));    }   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[OTA]:[1]:method_text:[testClassName,                    ""testSetNetworkLogsEnabled_false"", mUserId);        }    }   ])', 1), ('([2:/android/media/cts/ExtractDecodeEditEncodeMuxTest.java]:[OTA]:[2]:method_text:[e;    public ExtractDecodeEditEncodeMuxTest() {        super(MediaStubActivity.class);    }   ])', 1), ('([9:/android/media/cts/ExtractDecodeEditEncodeMuxTest.java]:[RAM]:[9]:method_text:[e;    public ExtractDecodeEditEncodeMuxTest() {        super(MediaStubActivity.class);    }   ])', 1), ('([60:/android/media/cts/ExtractDecodeEditEncodeMuxTest.java]:[RAM]:[60]:method_text:[            return codecInfo;                }            }        }        return null;    }}])', 1), ('([1:/android/os/cts/CountDownTimerTest.java]:[RAM]:[1]:method_text:[uper.tearDown();        if (mActivity != null) {            mActivity.finish();        }    }}])', 1), ('([4:/android/binder/cts/JavaClientTest.java]:[RAM]:[4]:method_text:[lass);        mInterface = connection.get();        assertNotEquals(null, mInterface);    }   ])', 1), ('([5:/android/hardware/camera2/cts/IdleUidTest.java]:[RAM]:[5]:method_text:[);    }    /**     * Tests that a UID has access to the camera only in active state.     */   ])', 1), ('([7:/android/hardware/camera2/cts/IdleUidTest.java]:[RAM]:[7]:method_text:[;        SystemUtil.runShellCommand(InstrumentationRegistry.getInstrumentation(), command);    }}])', 1), ('([1:/android/print/cts/CustomPrintOptionsTest.java]:[OTA]:[1]:method_text:[Helper.cancelPrinting();        waitForPrinterDiscoverySessionDestroyCallbackCalled(1);    }   ])', 1), ('([8:/android/print/cts/CustomPrintOptionsTest.java]:[RAM]:[8]:method_text:[Helper.cancelPrinting();        waitForPrinterDiscoverySessionDestroyCallbackCalled(1);    }   ])', 1), ('([1:/android/widget/cts/MediaControllerTest.java]:[OTA]:[1]:method_text:[.getInstrumentation();        mActivity = mActivityRule.getActivity();    }    @UiThreadTest   ])', 1), ('([1:/android/util/cts/PatternsTest.java]:[RAM]:[1]:method_text:[ assertTrue(""WEB_URL pattern should match commas"", Patterns.WEB_URL.matcher(url).matches());    }}])', 1), ('([1:/android/acceleration/cts/BaseAccelerationTest.java]:[OTA]:[1]:method_text:[ic int getMajorVersion(int glEsVersion) {        return ((glEsVersion & 0xffff0000) >> 16);    }}])', 1), ('([7:/android/sample/cts/SampleDeviceReportLogTest.java]:[RAM]:[7]:method_text:[* end, ResultType.NEUTRAL, ResultUnit.NONE);        reportLog.submit(getInstrumentation());    }}])', 1), ('([3:/android/media/cts/MediaCodecTest.java]:[OTA]:[3]:method_text:[s are thrown from MediaCodec     * methods when called in incorrect operational states.     */   ])', 1), ('([4:/android/media/cts/MediaCodecTest.java]:[OTA]:[4]:method_text:[ (inputSurface != null) {                inputSurface.release();            }        }    }   ])', 1), ('([6:/android/media/cts/MediaCodecTest.java]:[OTA]:[6]:method_text:[077efecc0b24d02L, 0xace33c1e52e2fb4bL);    /**     * Tests MediaCodec.CryptoException     */   ])', 1), (""([1:/android/media/cts/MediaCodecTest.java]:[PIN]:[1]:method_text:[    /**     * Tests:     * <br> stopping with buffers in flight doesn't crash or hang     */   ])"", 1), ('([1:/android/media/cts/MediaCodecTest.java]:[PIN]:[1]:method_text:[ (inputSurface != null) {                inputSurface.release();            }        }    }   ])', 1), ('([4:/android/media/cts/MediaCodecTest.java]:[PIN]:[4]:method_text:[ts:     * <br> dequeueInputBuffer() fails when encoder configured with an input Surface     */   ])', 1), ('([2:/android/media/cts/MediaCodecTest.java]:[PIN]:[2]:method_text:[  * Tests creating an encoder and decoder for {@link #MIME_TYPE_AUDIO} at the same time.     */   ])', 1), ('([2:/android/media/cts/MediaCodecTest.java]:[PIN]:[2]:method_text:[(TAG, ""exception stopping/releasing codec"", e);                }            }        }    }   ])', 1), ('([6:/android/media/cts/MediaCodecTest.java]:[RAM]:[6]:method_text:[s are thrown from MediaCodec     * methods when called in incorrect operational states.     */   ])', 1), ('([11:/android/media/cts/MediaCodecTest.java]:[RAM]:[11]:method_text:[ createInputSurface() with a non-Surface color format is not required to throw exception     */   ])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[RAM]:[1]:method_text:[ twice throws exception     * <br> submitting a frame after EOS throws exception [TODO]     */   ])', 1), (""([2:/android/media/cts/MediaCodecTest.java]:[RAM]:[2]:method_text:[    /**     * Tests:     * <br> stopping with buffers in flight doesn't crash or hang     */   ])"", 1), ('([1:/android/media/cts/MediaCodecTest.java]:[RAM]:[1]:method_text:[ (inputSurface != null) {                inputSurface.release();            }        }    }   ])', 1), ('([10:/android/media/cts/MediaCodecTest.java]:[RAM]:[10]:method_text:[ts:     * <br> dequeueInputBuffer() fails when encoder configured with an input Surface     */   ])', 1), (""([3:/android/media/cts/MediaCodecTest.java]:[RAM]:[3]:method_text:[n signals end-of-stream. The test fails if the decoder doesn't output the queued frames.     */   ])"", 1), ('([2:/android/media/cts/MediaCodecTest.java]:[RAM]:[2]:method_text:[   /**     * Tests creating two decoders for {@link #MIME_TYPE_AUDIO} at the same time.     */   ])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[RAM]:[1]:method_text:[nt mMaxW;        public int mMaxH;        public int mFps;        public int mBitRate;    }   ])', 1), ('([8:/android/media/cts/MediaCodecTest.java]:[RAM]:[8]:method_text:[077efecc0b24d02L, 0xace33c1e52e2fb4bL);    /**     * Tests MediaCodec.CryptoException     */   ])', 1), ('([3:/android/media/cts/MediaCodecTest.java]:[RAM]:[3]:method_text:[w ByteBufferInputStream(new PcmAudioBufferStream(audioStream))));            }        }    }   ])', 1), ('([12:/android/media/cts/MediaCodecTest.java]:[RAM]:[12]:method_text:[lushed after the first buffer is queued, so this test walks     * through the scenario.     */   ])', 1), ('([5:/android/media/cts/MediaCodecTest.java]:[RAM]:[5]:method_text:[ {                codec.stop();                codec.release();            }        }    }   ])', 1), ('([16:/android/media/cts/MediaCodecTest.java]:[RAM]:[16]:method_text:[ec != null) {                    codec.release();                }            }        }    }}])', 1), ('([2:/android/car/cts/permissioncarenergyports/PermissionCarEnergyPortsTest.java]:[OTA]:[2]:method_text:[              Car.PROPERTY_SERVICE);        assertThat(mCarPropertyManager).isNotNull();    }   ])', 1), ('([2:/android/autofillservice/cts/testcore/Timeouts.java]:[RAM]:[2]:method_text:[O: must be higher than RemoteFillService.TIMEOUT_IDLE_BIND_MILLIS, so we should use a    // @hidden])', 1), ('([2:/android/app/cts/ActivityActionModeTest.java]:[OTA]:[2]:method_text:[Return(true);        when(mCallback.onPrepareActionMode(any(), any())).thenReturn(true);    }   ])', 1), ('([2:/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java]:[OTA]:[2]:method_text:[yWithCompositionTestImpl mImpl =            new EncodeVirtualDisplayWithCompositionTestImpl();   ])', 1), ('([1:/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java]:[PIN]:[1]:method_text:[ ""SKIPPING testRendering800x480Locally(): codec not supported"");        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java]:[PIN]:[1]:method_text:[MIME_TYPE, maxRes.getWidth(), maxRes.getHeight(), false, false);        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java]:[PIN]:[1]:method_text:[""SKIPPING testRendering800x480Remotely(): codec not supported"");        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java]:[PIN]:[1]:method_text:[ MIME_TYPE, maxRes.getWidth(), maxRes.getHeight(), true, false);        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java]:[PIN]:[1]:method_text:[stRendering800x480RemotelyWith3Windows(): codec not supported"");        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java]:[PIN]:[1]:method_text:[i(TAG, ""SKIPPING testRendering800x480LocallyWith3Windows(): codec not supported"");        }    }}])', 1), ('([2:/android/provider/cts/simphonebook/SimPhonebookContract_SimRecordsTest.java]:[OTA]:[2]:method_text:[        mDefaultSubscriptionId = new RemovableSims(mContext).getDefaultSubscriptionId();    }   ])', 1), ('([1:/dot/junit/opcodes/invoke_super/Test_invoke_super.java]:[RAM]:[1]:method_text:[heck that new frame is created by invoke_super and     * arguments are passed to method     */   ])', 1), ('([2:/android/content/res/cts/ResourcesTest.java]:[OTA]:[2]:method_text:["", ani.getAttributeName(0));        assertEquals(""@17432582"", ani.getAttributeValue(0));    }   ])', 1), ('([6:/android/content/res/cts/ResourcesTest.java]:[OTA]:[6]:method_text:[ assertEquals(R.anim.anim_rotate, Resources.getAttributeSetSourceResId(anim_rotate_set));    }   ])', 1), ('([1:/android/content/res/cts/ResourcesTest.java]:[RAM]:[1]:method_text:[ls(locales) ||                LocaleList.forLanguageTags(""ru,az-Arab"").equals(locales));    }   ])', 1), ('([1:/android/content/res/cts/ResourcesTest.java]:[RAM]:[1]:method_text:[l + ""\\"" in resources 0x"" + Integer.toHexString(resid),                expected, actual);    }   ])', 1), ('([1:/test/java/com/android/eventlib/EventLogsTest.java]:[OTA]:[1]:method_text:[r the queue            CustomEvent.queryPackage(TEST_APP_PACKAGE_NAME).poll();        }    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[OTA]:[1]:method_text:[                        "" for bitrate "" + TEST_BITRATES_SET[i]);            }        }    }   ])', 1), ('([7:/android/media/cts/VideoCodecTest.java]:[PIN]:[7]:method_text:[                        "" for bitrate "" + TEST_BITRATES_SET[i]);            }        }    }   ])', 1), ('([98:/android/media/cts/VideoCodecTest.java]:[RAM]:[98]:method_text:[                        "" for bitrate "" + TEST_BITRATES_SET[i]);            }        }    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[ows Exception {        internalTestSyncFrame(VP8_MIME, VIDEO_ControlRateConstant, false);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[ws Exception {        internalTestSyncFrame(VP8_MIME, VIDEO_ControlRateVariable, false);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[rows Exception {        internalTestSyncFrame(VP8_MIME, VIDEO_ControlRateConstant, true);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[ows Exception {        internalTestSyncFrame(VP8_MIME, VIDEO_ControlRateVariable, true);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[ows Exception {        internalTestSyncFrame(VP9_MIME, VIDEO_ControlRateConstant, false);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[ws Exception {        internalTestSyncFrame(VP9_MIME, VIDEO_ControlRateVariable, false);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[rows Exception {        internalTestSyncFrame(VP9_MIME, VIDEO_ControlRateConstant, true);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[ows Exception {        internalTestSyncFrame(VP9_MIME, VIDEO_ControlRateVariable, true);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[ows Exception {        internalTestSyncFrame(AVC_MIME, VIDEO_ControlRateConstant, false);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[ws Exception {        internalTestSyncFrame(AVC_MIME, VIDEO_ControlRateVariable, false);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[rows Exception {        internalTestSyncFrame(AVC_MIME, VIDEO_ControlRateConstant, true);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[ows Exception {        internalTestSyncFrame(AVC_MIME, VIDEO_ControlRateVariable, true);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[ws Exception {        internalTestSyncFrame(HEVC_MIME, VIDEO_ControlRateConstant, false);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[s Exception {        internalTestSyncFrame(HEVC_MIME, VIDEO_ControlRateVariable, false);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[ows Exception {        internalTestSyncFrame(HEVC_MIME, VIDEO_ControlRateConstant, true);    }   ])', 1), ('([2:/android/media/cts/VideoCodecTest.java]:[RAM]:[2]:method_text:[ws Exception {        internalTestSyncFrame(HEVC_MIME, VIDEO_ControlRateVariable, true);    }   ])', 1), ('([1:/android/uirendering/cts/testclasses/HardwareBitmapTests.java]:[OTA]:[1]:method_text:[,                R.drawable.golden_hardwaretest_create_subset, new MSSIMComparer(0.9)));    }   ])', 1), ('([1:/android/uirendering/cts/testclasses/HardwareBitmapTests.java]:[OTA]:[1]:method_text:[             R.drawable.golden_hardwaretest_create_transformed, new MSSIMComparer(0.9)));    }   ])', 1), ('([1:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[PIN]:[1]:method_text:[  }    /**     * Verify that we installed the .dm files for base (no split install).     */   ])', 1), ('([1:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[PIN]:[1]:method_text:[     result.put(codePath, dexMetadataPath);            }        }        return result;    }}])', 1), ('([2:/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java]:[RAM]:[2]:method_text:[nsion"");        } catch (IllegalArgumentException e) {            // Expected        }    }   ])', 1), ('([2:/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java]:[RAM]:[2]:method_text:[: "" + extensionsAdvertised, extensionsEnabledProp,                extensionsAdvertised);    }   ])', 1), ('([2:/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java]:[RAM]:[2]:method_text:[ySupportedSizes(extensionChars, id, extension, ImageFormat.JPEG);            }        }    }   ])', 1), ('([2:/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java]:[RAM]:[2]:method_text:[urface "" +                            ""type"");                }            }        }    }   ])', 1), ('([2:/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java]:[RAM]:[2]:method_text:[< latencyRange.getUpper()));                    }                }            }        }    }}])', 1), ('([2:/android/car/cts/ExceptionsTest.java]:[OTA]:[2]:method_text:[al String MESSAGE = ""Oops!"";    private static final Exception CAUSE = new RuntimeException();   ])', 1), ('([1:/android/security/cts/CVE_2019_2040.java]:[OTA]:[1]:method_text:[tyTestCase {    /**     * b/122316913     * Vulnerability Behaviour: SIGSEGV in self     */   ])', 1), ('([3:/android/appsecurity/cts/keyrotationtest/test/SignatureQueryServiceInstrumentationTest.java]:[OTA]:[3]:method_text:[class));        signatureQueryService = ISignatureQueryService.Stub.asInterface(binder);    }   ])', 1), ('([1:/android/appsecurity/cts/keyrotationtest/test/SignatureQueryServiceInstrumentationTest.java]:[OTA]:[1]:method_text:[ertEquals(0, responseBundle.getInt(ISignatureQueryService.KEY_VERIFY_SIGNATURES_RESULT));    }   ])', 1), ('([2:/android/appsecurity/cts/keyrotationtest/test/SignatureQueryServiceInstrumentationTest.java]:[OTA]:[2]:method_text:[ssertEquals(0, responseBundle.getInt(ISignatureQueryService.KEY_VERIFY_SIGNATURES_RESULT));    }}])', 1), ('([1:/android/cts/backup/preservedsettingsapp/PreservedSettingsRestoreTest.java]:[OTA]:[1]:method_text:[ @After    public void tearDown() {        mUiAutomation.dropShellPermissionIdentity();    }   ])', 1), ('([1:/android/uirendering/cts/testclasses/BitmapBlendModeTest.java]:[PIN]:[1]:method_text:[ent, true)                .runWithVerifier(new SamplePointVerifier(SAMPLE_POINTS, colors));    }}])', 1), ('([1:/android/hardware/camera2/cts/FastBasicsTest.java]:[OTA]:[1]:method_text:[IMEOUT_MS = 8000;    private static final int FRAMES_TO_WAIT_FOR_CAPTURE = 100;    @Presubmit   ])', 1), ('([1:/android/hardware/camera2/cts/FastBasicsTest.java]:[OTA]:[1]:method_text:[ true;                mPictureSignal.notifyAll();            }        }    }    @Presubmit   ])', 1), ('([1:/android/hardware/camera2/cts/FastBasicsTest.java]:[PIN]:[1]:method_text:[ true;                mPictureSignal.notifyAll();            }        }    }    @Presubmit   ])', 1), ('([4:/android/hardware/camera2/cts/FastBasicsTest.java]:[RAM]:[4]:method_text:[IMEOUT_MS = 8000;    private static final int FRAMES_TO_WAIT_FOR_CAPTURE = 100;    @Presubmit   ])', 1), ('([15:/android/hardware/camera2/cts/FastBasicsTest.java]:[RAM]:[15]:method_text:[ true;                mPictureSignal.notifyAll();            }        }    }    @Presubmit   ])', 1), ('([2:/android/hardware/camera2/cts/FastBasicsTest.java]:[RAM]:[2]:method_text:[a != null) {                    camera.release();                }            }        }    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[OTA]:[1]:method_text:[IM_SLOT_0);            SimContacts.removeSimAccounts(mResolver, SIM_SLOT_1);        });    }   ])', 1), ('([4:/android/atrace/cts/AtraceHostTest.java]:[RAM]:[4]:method_text:[rtEquals(""Didn\'t find all async sections"",                0, requiredAsyncSections.size());    }}])', 1), ('([2:/android/media/cts/AudioManagerTest.java]:[OTA]:[2]:method_text:[    @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")   ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[PIN]:[1]:method_text:[        if (!isMusicPlayingBeforeTest) {            assertMusicActive(false);        }    }   ])', 1), ('([2:/android/media/cts/AudioManagerTest.java]:[PIN]:[2]:method_text:[:"" + microphone.getDirectionality());            Log.i(TAG, ""--------------"");        }    }   ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[RAM]:[1]:method_text:[    @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")   ])', 1), ('([6:/android/media/cts/AudioManagerTest.java]:[RAM]:[6]:method_text:[ibutes() require privledged permission MODIFY_AUDIO_ROUTING    // and thus cannot be tested here.}])', 1), ('([1:/android/content/pm/cts/shortcut/backup/publisher1/ShortcutManagerPreBackupTest.java]:[OTA]:[1]:method_text:[t;@SmallTestpublic class ShortcutManagerPreBackupTest extends ShortcutManagerDeviceTestBase {   ])', 1), ('([2:/android/content/pm/cts/shortcut/backup/publisher1/ShortcutManagerPreBackupTest.java]:[PIN]:[2]:method_text:[nifestShortcuts())                .haveIds(""ms1"", ""ms2"")                .areAllNotPinned();   }}])', 1)]"	"https://source.android.com"	""	"[('RAM', 109), ('OTA', 98), ('PIN', 57)]"	"[('[android.jdwpsecurity.cts.JdwpSecurityHostTest testNonZygoteProgramIsNotDebuggable CtsJdwpSecurityHostTestCases]', 3), ('[android.video.cts.VideoEncoderDecoderTest initPerfTest CtsVideoTestCases]', 3), ('[android.media.cts.MediaCodecTest testAbruptStop CtsMediaTestCases]', 3), ('[android.media.cts.VideoCodecTest testBasic CtsMediaTestCases]', 3), ('[android.hardware.camera2.cts.FastBasicsTest testCamera2 CtsCameraTestCases]', 3), ('[android.media.cts.NativeDecoderTest SKIP_testExtractor CtsMediaTestCases]', 2), ('[android.webkit.cts.WebChromeClientTest testOnConsoleMessage CtsWebkitTestCases]', 2), ('[org.apache.http.conn.ssl.cts.AbstractVerifierTest testGetCnsWithWhitespace CtsApacheHttpTestCases]', 2), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testAutofill CtsAutoFillServiceTestCases]', 2), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest isNull CtsAutoFillServiceTestCases]', 2), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetNearbyAppStreamingPolicy_changesPolicy CtsDevicePolicyManagerTestCases]', 2), ('[android.media.cts.MediaCasTest adoptShellPermissionIdentity CtsMediaTestCases]', 2), ('[android.webkit.cts.WebViewZoomTest WebViewZoomTest CtsWebkitTestCases]', 2), ('[android.video.cts.VideoEncoderDecoderTest testVp9Other3Perf3840x2160 CtsVideoTestCases]', 2), ('[android.media.cts.ExtractDecodeEditEncodeMuxTest ExtractDecodeEditEncodeMuxTest CtsMediaTestCases]', 2), ('[android.print.cts.CustomPrintOptionsTest onPrinterDiscoverySessionDestroyCalled CtsPrintTestCases]', 2), ('[android.media.cts.MediaCodecTest testCryptoInfoPattern CtsMediaTestCases]', 2), ('[android.media.cts.MediaCodecTest testSignalSurfaceEOS CtsMediaTestCases]', 2), ('[android.media.cts.MediaCodecTest testAsyncStopAndReset CtsMediaTestCases]', 2), ('[android.media.cts.AudioManagerTest isMicrophoneMute CtsMediaTestCases]', 2), ('[android.media.cts.NativeDecoderTest testDataSourceWithCallback CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testMuxerAvc CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testMuxerH263 CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testMuxerHevc CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testMuxerVp9Hdr CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testMuxerMpeg4 CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testAMediaDataSourceClose CtsMediaTestCases]', 1), ('[com.android.cts.webkit.WebViewHostSideStartupTest testCookieManager None]', 1), ('[com.android.cts.webkit.WebViewHostSideStartupTest testWebViewVersionApiOnUiThread None]', 1), ('[com.android.cts.webkit.WebViewHostSideStartupTest testWebViewVersionApi None]', 1), ('[com.android.cts.webkit.WebViewHostSideStartupTest testStrictMode None]', 1), ('[com.android.cts.webkit.WebViewHostSideStartupTest testGetWebViewLooperOnUiThread None]', 1), ('[com.android.cts.webkit.WebViewHostSideStartupTest testGetWebViewLooperFromUiThread None]', 1), ('[com.android.cts.webkit.WebViewHostSideStartupTest testGetWebViewLooperCreatedOnBackgroundThreadFromInstThread None]', 1), ('[android.view.animation.cts.GridLayoutAnimationControllerTest testAccessDelay CtsViewTestCases]', 1), ('[android.view.animation.cts.GridLayoutAnimationControllerTest testGetDelayForView CtsViewTestCases]', 1), ('[android.webkit.cts.WebChromeClientTest WebChromeClientTest CtsWebkitTestCases]', 1), ('[android.view.cts.ViewGroup_LayoutParamsTest testConstructor CtsViewTestCases]', 1), ('[android.view.cts.ViewGroup_LayoutParamsTest testSetBaseAttributes CtsViewTestCases]', 1), ('[android.app.usage.cts.CacheQuotaHintTest testCacheQuotaHintBuilder CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.CacheQuotaHintTest testCacheQuotaHintBuilderFromCacheQuotaHint CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.CacheQuotaHintTest testCacheQuotaHintParcelizeDeparcelize CtsUsageStatsTestCases]', 1), ('[android.security.NetworkSecurityPolicyTestBase testApplicationInfoFlag None]', 1), ('[android.view.inputmethod.cts.CursorAnchorInfoTest testMatrixIsCopied CtsInputMethodTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testSplitscreenUsageReporting CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testSplitscreenSameToken CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testSplitscreenSameTokenOneMissedStop CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testSplitscreenSameTokenTwoMissedStop CtsUsageStatsTestCases]', 1), ('[android.scopedstorage.cts.host.ScopedStorageCoreHostTest revokeStoragePermissions None]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testGetAutofillOptionsSorted CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testCustomizedSaveUiWithContentDescription CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testCustomizedSaveUiWhenListResolutionFails CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest autofillZeroListValueToSpinner CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest autofillOneListValueToSpinner CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest autofillInvalidListValueToSpinner CtsAutoFillServiceTestCases]', 1), ('[test.java.com.android.bedstead.deviceadminapp.DeviceAdminAppTest TestApis None]', 1), ('[test.java.com.android.bedstead.deviceadminapp.DeviceAdminAppTest setAsDeviceOwner_isEnabled None]', 1), ('[android.keystore.cts.performance.HmacKeyGenPerformanceTest testHmacKeyGen CtsKeystoreTestCases]', 1), ('[android.graphics.pdf.cts.PdfRendererTest testPrintScalePDF16None CtsPdfTestCases]', 1), ('[android.media.cts.EncoderTest testAACEncoders CtsMediaTestCases]', 1), ('[com.android.compatibility.common.tradefed.presubmit.ApkPackageNameCheck testApkPackageNames None]', 1), ('[android.hardware.consumerir.cts.ConsumerIrTest test_timing CtsHardwareTestCases]', 1), ('[com.android.cts.devicepolicy.MixedProfileOwnerTest testSetAutoTimeEnabled CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictionIsRestricted CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictions CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnAcrossReboot CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowContentSuggestions_allowed CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSecondaryLockscreen CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testEnrollmentSpecificIdEmptyAndMultipleSet CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetStorageEncryption CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testEnableSystemAppLogged CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testEnableSystemAppWithIntentLogged CtsDevicePolicyManagerTestCases]', 1), ('[android.opengl.cts.ParamsTest testNullBufferParam CtsOpenGLTestCases]', 1), ('[android.opengl.cts.ParamsTest testBufferParam CtsOpenGLTestCases]', 1), ('[android.hardware.camera2.cts.NativeCameraDeviceTest testCameraDevicePreviewWithSessionParameters CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.NativeCameraDeviceTest testCameraDeviceCaptureFailure CtsCameraTestCases]', 1), ('[android.telephony.ims.cts.ImsReasonInfoTest testBasics CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsReasonInfoTest testParcelUnparcel CtsTelephonyTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testCreateShortcutResultIntent_defaultLauncher CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testCreateShortcutResultIntent_defaultChanges CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testCreateShortcutResultIntent_noDefault CtsShortcutManagerTestCases]', 1), ('[com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest testCrossProfileCall_getUserHandle None]', 1), ('[android.media.cts.MediaCasTest testEnumeratePlugins CtsMediaTestCases]', 1), ('[android.media.cts.MediaCasTest testInvalidSystemIdFails CtsMediaTestCases]', 1), ('[android.media.cts.MediaCasTest testClearKeyApis CtsMediaTestCases]', 1), ('[android.media.cts.MediaCasTest testClearKeySessionClosedAfterRelease CtsMediaTestCases]', 1), ('[android.media.cts.MediaCasTest testClearKeyExceptions CtsMediaTestCases]', 1), ('[android.media.cts.MediaCasTest testResourceLostEvent CtsMediaTestCases]', 1), ('[android.media.cts.MediaCasTest testConstructWithEventListener CtsMediaTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testQuery CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetInfo CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetIcon CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetResources CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetResources_withConfig CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetInstalledPackages CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetPermissionGroupInfo CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetPermissionGroupInfo_notFound CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testSetSystemAppHiddenUntilInstalled CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetApplicationInfo_icon_MatchesUseRoundIcon CtsContentTestCases]', 1), ('[android.car.cts.permissioncarspeed.PermissionCarSpeedTest isNotNull None]', 1), ('[android.telephonyprovider.cts.MmsPartTest setupTestEnvironment CtsTelephonyProviderTestCases]', 1), ('[android.telephonyprovider.cts.MmsPartTest testMmsPartUpdate CtsTelephonyProviderTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest removeTestUsers CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testCannotRemoveManagedProfile CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testSecurityLoggingDelegate CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testPersonalAppsSuspensionInstalledApp CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testPermittedInputMethodsLogged CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testScreenCaptureDisabled CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testNetworkLoggingDelegate CtsDevicePolicyManagerTestCases]', 1), ('[android.media.cts.ExtractDecodeEditEncodeMuxTest testExtractDecodeEditEncodeMuxAudioVideo CtsMediaTestCases]', 1), ('[android.os.cts.CountDownTimerTest testCountDownTimerCancel None]', 1), ('[android.hardware.camera2.cts.IdleUidTest testCameraAccessBecomingInactiveUid CtsCameraTestCases]', 1), ('[android.util.cts.PatternsTest testWebUrl_matchesUrlsWithCommasInRequestParameterValues CtsUtilTestCases]', 1), ('[android.acceleration.cts.BaseAccelerationTest testNotAttachedView CtsAccelerationTestCases]', 1), ('[android.sample.cts.SampleDeviceReportLogTest testCountDown CtsSampleDeviceTestCases]', 1), ('[android.media.cts.MediaCodecTest testCreateTwoAudioDecoders CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testCreateAudioDecoderAndEncoder CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testException CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testCreateInputSurfaceErrors CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testDecodeAfterFlush CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testDecodeShortInput CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testConcurrentAudioVideoEncodings CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testFlacIdentity CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testPrependHeadersToSyncFrames CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testFlushAfterFirstBuffer CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testVendorParameters CtsMediaTestCases]', 1), ('[android.car.cts.permissioncarenergyports.PermissionCarEnergyPortsTest isNotNull None]', 1), ('[android.media.cts.EncodeVirtualDisplayWithCompositionTest EncodeVirtualDisplayWithCompositionTestImpl CtsMediaTestCases]', 1), ('[android.media.cts.EncodeVirtualDisplayWithCompositionTest testRendering800x480Locally CtsMediaTestCases]', 1), ('[android.media.cts.EncodeVirtualDisplayWithCompositionTest testRenderingMaxResolutionLocally CtsMediaTestCases]', 1), ('[android.media.cts.EncodeVirtualDisplayWithCompositionTest testRendering800x480Remotely CtsMediaTestCases]', 1), ('[android.media.cts.EncodeVirtualDisplayWithCompositionTest testRenderingMaxResolutionRemotely CtsMediaTestCases]', 1), ('[android.media.cts.EncodeVirtualDisplayWithCompositionTest testRendering800x480RemotelyWith3Windows CtsMediaTestCases]', 1), ('[android.media.cts.EncodeVirtualDisplayWithCompositionTest testRendering800x480LocallyWith3Windows CtsMediaTestCases]', 1), ('[dot.junit.opcodes.invoke_super.Test_invoke_super testN3 None]', 1), ('[android.content.res.cts.ResourcesTest testGetAnimation CtsContentTestCases]', 1), ('[android.content.res.cts.ResourcesTest testGetAttributeSetSourceResId CtsContentTestCases]', 1), ('[android.content.res.cts.ResourcesTest testUpdateConfiguration_copyLocales CtsContentTestCases]', 1), ('[android.content.res.cts.ResourcesTest testGetStringWithIntParam CtsContentTestCases]', 1), ('[test.java.com.android.eventlib.EventLogsTest TestApis None]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameVP8CBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameVP8VBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameVP8NdkCBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameVP8NdkVBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameVP9CBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameVP9VBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameVP9NdkCBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameVP9NdkVBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameAVCCBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameAVCVBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameAVCNdkCBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameAVCNdkVBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameHEVCCBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameHEVCVBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameHEVCNdkCBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameHEVCNdkVBR CtsMediaTestCases]', 1), ('[android.uirendering.cts.testclasses.HardwareBitmapTests testCreateSubsetBitmap CtsUiRenderingTestCases]', 1), ('[android.uirendering.cts.testclasses.HardwareBitmapTests testCreateTransformedBitmap CtsUiRenderingTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataTest testNoDm None]', 1), ('[android.hardware.camera2.cts.CameraExtensionCharacteristicsTest getCameraListener CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraExtensionCharacteristicsTest testExtensionAvailability CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraExtensionCharacteristicsTest testExtensionSizes CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraExtensionCharacteristicsTest testIllegalArguments CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraExtensionCharacteristicsTest testExtensionLatencyRanges CtsCameraTestCases]', 1), ('[android.appsecurity.cts.keyrotationtest.test.SignatureQueryServiceInstrumentationTest ServiceTestRule None]', 1), ('[android.cts.backup.preservedsettingsapp.PreservedSettingsRestoreTest adoptShellPermissionIdentity None]', 1), ('[android.uirendering.cts.testclasses.BitmapBlendModeTest testDstOutBlendMode CtsUiRenderingTestCases]', 1), ('[android.hardware.camera2.cts.FastBasicsTest testCamera1 CtsCameraTestCases]', 1), ('[android.atrace.cts.AtraceHostTest testTracingContent CtsAtraceHostTestCases]', 1), ('[android.media.cts.AudioManagerTest testAdjustVolumeInTotalSilenceMode CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testSetStreamVolumeInTotalSilenceMode CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testVolume CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testGetMicrophones CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testGetDevices CtsMediaTestCases]', 1), ('[android.content.pm.cts.shortcut.backup.publisher1.ShortcutManagerPreBackupTest testPreBackup None]', 1)]"
"3.8.15  Display Cutout"	"3.8.15"	"C-1-5"	"3.8.15/C-1-5"	"03081500.670105"	"""C-1-5] MUST NOT have cutout(s) if the device's aspect ratio is 1.0(1:1). """	""	""	"cutout(s)"	""	""	""	""	"[('android.server.wm.ConfigChangeTests', 1)]"	""	"[('CtsWindowManagerDeviceTestCases', 1)]"	""	""	""	""	"android.server.wm.ConfigChangeTests"	""	"CtsWindowManagerDeviceTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/ConfigChangeTests.java', 1)]"	"[('(1,cutout(s),/android/server/wm/ConfigChangeTests.java)', 1)]"	"[('([1:/android/server/wm/ConfigChangeTests.java]:[cutout(s)]:[1]:method_text:[    * reverse-landscape rotations should result in same screen space available for apps.     */   ])', 1)]"	""	""	"[('cutout(s)', 1)]"	"[('[android.server.wm.ConfigChangeTests testRotation180_NoRelaunchActivity CtsWindowManagerDeviceTestCases]', 1)]"
"9.8.10  Connectivity Bug Report"	"9.8.10"	"C-1-3"	"9.8.10/C-1-3"	"09081000.670103"	"""C-1-3] MUST generate requested reports containing at least the following     information:     *   TelephonyDebugService dump     *   TelephonyRegistry dump     *   WifiService dump     *   ConnectivityService dump     *   A dump of the calling package's CarrierService instance (if bound)     *   Radio log buffer """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"7.2.4  Touchscreen Input"	"7.2.4"	"C-3-3"	"7.2.4/C-3-3"	"07020400.670303"	"""C-3-3] MUST report `TOUCHSCREEN_NOTOUCH` for the [`Configuration.touchscreen`](https://developer.android.com/reference/android/content/res/Configuration.html#touchscreen) API field.  """	""	""	"Configuration.touchscreen Configuration.html TOUCHSCREEN_NOTOUCH"	""	""	""	""	"[('android.content.res.cts.ConfigTest', 8), ('android.content.res.cts.ConfigurationTest', 5), ('android.app.cts.SystemFeaturesTest', 4), ('android.server.wm.ActivityManagerGetConfigTests', 1)]"	"[('Configuration', 5), ('setUp', 5), ('makeConfiguration', 4), ('size', 3), ('setToDefaults', 2), ('getDefault', 2), ('getInstrumentation', 2), ('toLanguageTag', 2), ('newTheme', 1), ('recycle', 1), ('TotalConfig', 1), ('getTargetContext', 1), ('getPackageManager', 1), ('getUiAutomation', 1), ('ByteArrayOutputStream', 1), ('close', 1), ('toByteArray', 1), ('getGlExtensionsFromDriver', 1), ('getEGL', 1), ('getConfigs', 1), ('addExtensionsForConfig', 1), ('getLocales', 1), ('getTotalRam', 1)]"	"[('CtsContentTestCases', 13), ('CtsAppTestCases', 4), ('CtsWindowManagerDeviceTestCases', 1)]"	""	""	""	""	"android.server.wm.ActivityManagerGetConfigTests"	"getTotalRam"	"CtsWindowManagerDeviceTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/res/cts/ConfigTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/res/cts/ConfigurationTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/ActivityManagerGetConfigTests.java', 1)]"	"[('(3,TOUCHSCREEN_NOTOUCH,/android/content/res/cts/ConfigTest.java)', 1), ('(9,Configuration.touchscreen,/android/content/res/cts/ConfigTest.java)', 1), ('(1,TOUCHSCREEN_NOTOUCH,/android/content/res/cts/ConfigurationTest.java)', 1), ('(4,Configuration.touchscreen,/android/content/res/cts/ConfigurationTest.java)', 1), ('(3,TOUCHSCREEN_NOTOUCH,/android/app/cts/SystemFeaturesTest.java)', 1), ('(5,Configuration.touchscreen,/android/app/cts/SystemFeaturesTest.java)', 1), ('(1,Configuration.touchscreen,/android/server/wm/ActivityManagerGetConfigTests.java)', 1)]"	"[('([1:/android/content/res/cts/ConfigurationTest.java]:[Configuration.touchscreen]:[1]:method_text:[ssertEquals(Configuration.FONT_WEIGHT_ADJUSTMENT_UNDEFINED, config.fontWeightAdjustment);    }   ])', 2), ('([1:/android/content/res/cts/ConfigTest.java]:[TOUCHSCREEN_NOTOUCH]:[1]:method_text:[, R.configVarying.bag,                R.styleable.TestConfig, new String[]{""bag h670""});    }   ])', 1), ('([1:/android/content/res/cts/ConfigTest.java]:[TOUCHSCREEN_NOTOUCH]:[1]:method_text:[configVarying.bag,                R.styleable.TestConfig, new String[]{""bag h670""});    }       ])', 1), ('([1:/android/content/res/cts/ConfigTest.java]:[TOUCHSCREEN_NOTOUCH]:[1]:method_text:[gVarying.bag,                R.styleable.TestConfig, new String[]{""bag mcc111 mnc222""});    }   ])', 1), ('([1:/android/content/res/cts/ConfigTest.java]:[Configuration.touchscreen]:[1]:method_text:[{            fail(""Should be able to find application info for this package"");        }    }   ])', 1), ('([2:/android/content/res/cts/ConfigTest.java]:[Configuration.touchscreen]:[2]:method_text:[, R.configVarying.bag,                R.styleable.TestConfig, new String[]{""bag h670""});    }   ])', 1), ('([2:/android/content/res/cts/ConfigTest.java]:[Configuration.touchscreen]:[2]:method_text:[configVarying.bag,                R.styleable.TestConfig, new String[]{""bag h670""});    }       ])', 1), ('([1:/android/content/res/cts/ConfigTest.java]:[Configuration.touchscreen]:[1]:method_text:[gVarying.bag,                R.styleable.TestConfig, new String[]{""bag mcc111 mnc222""});    }   ])', 1), ('([3:/android/content/res/cts/ConfigTest.java]:[Configuration.touchscreen]:[3]:method_text:[nfigVarying.bag,                R.styleable.TestConfig, new String[]{""bag dpad 63x57""});    }   ])', 1), ('([1:/android/content/res/cts/ConfigurationTest.java]:[TOUCHSCREEN_NOTOUCH]:[1]:method_text:[ntation = Configuration.ORIENTATION_PORTRAIT;        mConfig.fontWeightAdjustment = 300;    }   ])', 1), ('([1:/android/content/res/cts/ConfigurationTest.java]:[Configuration.touchscreen]:[1]:method_text:[ntation = Configuration.ORIENTATION_PORTRAIT;        mConfig.fontWeightAdjustment = 300;    }   ])', 1), ('([1:/android/content/res/cts/ConfigurationTest.java]:[Configuration.touchscreen]:[1]:method_text:[ assertEquals(config, readConf);        } finally {            parcel.recycle();        }    }}])', 1), ('([1:/android/app/cts/SystemFeaturesTest.java]:[TOUCHSCREEN_NOTOUCH]:[1]:method_text:[RE_TOUCHSCREEN);            assertAvailable(PackageManager.FEATURE_FAKETOUCH);        }    }   ])', 1), ('([2:/android/app/cts/SystemFeaturesTest.java]:[TOUCHSCREEN_NOTOUCH]:[2]:method_text:[UCH_JAZZHAND)) {            assertAvailable(PackageManager.FEATURE_FAKETOUCH);        }    }   ])', 1), ('([2:/android/app/cts/SystemFeaturesTest.java]:[Configuration.touchscreen]:[2]:method_text:[RE_TOUCHSCREEN);            assertAvailable(PackageManager.FEATURE_FAKETOUCH);        }    }   ])', 1), ('([3:/android/app/cts/SystemFeaturesTest.java]:[Configuration.touchscreen]:[3]:method_text:[UCH_JAZZHAND)) {            assertAvailable(PackageManager.FEATURE_FAKETOUCH);        }    }   ])', 1), ('([1:/android/server/wm/ActivityManagerGetConfigTests.java]:[Configuration.touchscreen]:[1]:method_text:[""Expected features does not match"",                featureNames, deviceConfig.features);    }   ])', 1)]"	"https://developer.android.com"	""	"[('Configuration.touchscreen', 12), ('TOUCHSCREEN_NOTOUCH', 6)]"	"[('[android.content.res.cts.ConfigTest testAllEmptyConfigs CtsContentTestCases]', 2), ('[android.content.res.cts.ConfigTest testAllClassicConfigs CtsContentTestCases]', 2), ('[android.content.res.cts.ConfigTest testPrecedence CtsContentTestCases]', 2), ('[android.app.cts.SystemFeaturesTest testTouchScreenFeatures CtsAppTestCases]', 2), ('[android.app.cts.SystemFeaturesTest testFakeTouchFeatures CtsAppTestCases]', 2), ('[android.content.res.cts.ConfigTest DisplayMetrics CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigTest testCombinations CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetToDefaults CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testUnset CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetLocale_overridesSetLocales CtsContentTestCases]', 1), ('[android.server.wm.ActivityManagerGetConfigTests isLowRamDevice CtsWindowManagerDeviceTestCases]', 1)]"
"2.2.1  Hardware"	"7.1.4.6"	"H-1-4"	"7.1.4.6/H-1-4"	"07010406.720104"	"""[7.1.4.6/H-1-4] MUST report a GPU Frequency      tracepoint as specified by the format: [power/gpu_frequency](https://android.googlesource.com/platform/external/perfetto/+/refs/heads/master/protos/perfetto/trace/ftrace/power.proto).  Handheld device implementations:  *   ["""	""	""	"GPU android.googlesource.com power.proto"	""	""	""	""	"[('android.gputools.cts.CtsRootlessGpuDebugHostTest', 16), ('com.android.server.cts.GraphicsStatsValidationTest', 3), ('android.appmanifest.cts.UsesNativeLibraryTestCase', 3), ('android.hardware.camera2.cts.MultiViewTest', 2), ('android.graphics.cts.CameraGpuTest', 2), ('android.graphics.cts.BitmapTest', 2), ('android.security.cts.Poc17_01', 2), ('android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest', 2), ('android.hardware.camera2.cts.CameraExtensionSessionTest', 1), ('android.SustainedPerformance.cts.SustainedPerformanceHostTest', 1), ('android.deviceconfig.cts.DeviceConfigApiPermissionTests', 1), ('android.renderscript.cts.refocus.RefocusTest', 1), ('android.graphics.cts.BasicVulkanGpuTest', 1), ('android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.graphics.cts.MediaVulkanGpuTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('com.android.compatibility.common.tradefed.presubmit.CtsConfigLoadingTest', 1), ('android.adb.cts.AdbHostTest', 1), ('android.appsecurity.cts.KeySetHostTest', 1), ('android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest', 1), ('com.android.cts.deviceowner.HardwarePropertiesManagerTest', 1), ('android.app.uiautomation.cts.UiAutomationTest', 1), ('android.graphics.gpuprofiling.cts.CtsFrameTracerDataSourceTest', 1), ('android.view.cts.PixelCopyTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest', 1), ('android.hardware.camera2.cts.RobustnessTest', 1), ('android.hardware.nativehardware.cts.HardwareBufferVrTest', 1), ('android.view.cts.ASurfaceControlTest', 1), ('android.graphics.cts.CameraVulkanGpuTest', 1), ('com.android.cts.deviceowner.VrTemperatureTest', 1), ('android.security.cts.ActivityManagerTest', 1), ('android.graphics.cts.SyncTest', 1), ('android.sensorratepermission.cts.debuggableapi31.DebuggableAPI31Test', 1), ('android.view.cts.FrameMetricsListenerTest', 1), ('android.hardware.camera2.cts.ImageReaderTest', 1), ('android.security.cts.RunningAppProcessInfoTest', 1), ('android.hardware.cts.HardwareBufferTest', 1), ('android.dumpsys.cts.GfxInfoDumpsysTest', 1)]"	"[('getDevice', 19), ('setUp', 4), ('getWidth', 3), ('getHeight', 2), ('cleanup', 2), ('trim', 2), ('tearDown', 2), ('stream', 2), ('data', 1), ('getFramePixels', 1), ('getContext', 1), ('getAssets', 1), ('flush', 1), ('close', 1), ('deleteOnExit', 1), ('run', 1), ('getMessage', 1), ('init', 1), ('getTime', 1), ('LogScanResult', 1), ('turnScreenOn', 1), ('getSimpleName', 1), ('setup', 1), ('teardown', 1), ('matches', 1), ('size', 1), ('getOverrideConfig', 1)]"	"[('CtsGpuToolsHostTestCases', 16), ('CtsGraphicsTestCases', 8), ('CtsCameraTestCases', 5), ('CtsViewTestCases', 3), ('CtsShortcutManagerTestCases', 3), ('CtsIncidentHostTestCases', 3), ('CtsSecurityBulletinHostTestCases', 2), ('CtsGpuProfilingDataTestCases', 2), ('CtsSecurityTestCases', 2), ('CtsSustainedPerformanceHostTestCases', 1), ('CtsDeviceConfigTestCases', 1), ('CtsRenderscriptTestCases', 1), ('CtsSensorTestCases', 1), ('CtsMediaTestCases', 1), ('CtsAdbHostTestCases', 1), ('CtsAppSecurityHostTestCases', 1), ('CtsUiAutomationTestCases', 1), ('CtsNativeHardwareTestCases', 1), ('CtsHardwareTestCases', 1), ('CtsDumpsysHostTestCases', 1)]"	""	""	""	""	"android.dumpsys.cts.GfxInfoDumpsysTest"	"getOverrideConfig"	"CtsDumpsysHostTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/gputools/src/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 16), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/src/com/android/server/cts/GraphicsStatsValidationTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/library/src/android/appmanifest/cts/UsesNativeLibraryTestCase.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraGpuTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_01.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraExtensionSessionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/deviceconfig/src/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/refocus/RefocusTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BasicVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/DirectReportAPI30/src/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/MediaVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/adb/src/android/adb/cts/AdbHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/KeySetHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uiautomation/src/android/app/uiautomation/cts/UiAutomationTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/PixelCopyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/nativehardware/src/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/VrTemperatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/ActivityManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/SyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/DebuggableAPI31/src/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/FrameMetricsListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/RunningAppProcessInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/cts/HardwareBufferTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/GfxInfoDumpsysTest.java', 1)]"	"[('(1,GPU,/android/hardware/camera2/cts/CameraExtensionSessionTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/MultiViewTest.java)', 1), ('(2,GPU,/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java)', 1), ('(1,GPU,/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java)', 1), ('(5,GPU,/android/graphics/cts/CameraGpuTest.java)', 1), ('(1,GPU,/android/renderscript/cts/refocus/RefocusTest.java)', 1), ('(2,GPU,/android/graphics/cts/BasicVulkanGpuTest.java)', 1), ('(1,GPU,/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java)', 1), ('(2,GPU,/android/graphics/cts/BitmapTest.java)', 1), ('(1,GPU,/android/hardware/cts/SensorDirectReportTest.java)', 1), ('(3,GPU,/android/security/cts/Poc17_01.java)', 1), ('(1,GPU,/android/graphics/cts/MediaVulkanGpuTest.java)', 1), ('(3,GPU,/android/media/cts/PresentationSyncTest.java)', 1), ('(1,GPU,/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java)', 1), ('(1,android.googlesource.com,/android/adb/cts/AdbHostTest.java)', 1), ('(1,GPU,/android/appsecurity/cts/KeySetHostTest.java)', 1), ('(24,GPU,/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java)', 1), ('(14,GPU,/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java)', 1), ('(1,GPU,/android/app/uiautomation/cts/UiAutomationTest.java)', 1), ('(2,GPU,/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java)', 1), ('(1,GPU,/android/view/cts/PixelCopyTest.java)', 1), ('(1,GPU,/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java)', 1), ('(94,GPU,/android/gputools/cts/CtsRootlessGpuDebugHostTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/RobustnessTest.java)', 1), ('(8,GPU,/com/android/server/cts/GraphicsStatsValidationTest.java)', 1), ('(2,GPU,/android/hardware/nativehardware/cts/HardwareBufferVrTest.java)', 1), ('(1,GPU,/android/view/cts/ASurfaceControlTest.java)', 1), ('(1,GPU,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(9,GPU,/com/android/cts/deviceowner/VrTemperatureTest.java)', 1), ('(1,android.googlesource.com,/android/security/cts/ActivityManagerTest.java)', 1), ('(2,GPU,/android/graphics/cts/SyncTest.java)', 1), ('(1,GPU,/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java)', 1), ('(5,GPU,/android/view/cts/FrameMetricsListenerTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(4,GPU,/android/appmanifest/cts/UsesNativeLibraryTestCase.java)', 1), ('(3,GPU,/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java)', 1), ('(1,android.googlesource.com,/android/security/cts/RunningAppProcessInfoTest.java)', 1), ('(3,GPU,/android/hardware/cts/HardwareBufferTest.java)', 1), ('(1,GPU,/android/dumpsys/cts/GfxInfoDumpsysTest.java)', 1)]"	"[('([1:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[GPU]:[1]:method_text:[epeating with multi frame capture on all supported extensions.    // Verify still frame output.   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[ify the Bitmap     * from the first TextureView is identical to the second TextureView.     */   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[    }    /*     * Verify behavior of sharing surfaces within one OutputConfiguration     */   ])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[GPU]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");    }   ])', 1), ('([1:/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java]:[GPU]:[1]:method_text:[      Exception e) {        violations.append(message).append("": "").append(e).append(""\\n"");    }}])', 1), ('([4:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[4]:method_text:[> mActivityRule =            new ActivityTestRule<>(CameraGpuCtsActivity.class, false, false);   ])', 1), ('([1:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[1]:method_text:[e.launchActivity(null);        activity.waitToFinishRendering();        activity.finish();    }}])', 1), ('([1:/android/renderscript/cts/refocus/RefocusTest.java]:[GPU]:[1]:method_text:[+                context.getResources().getResourceEntryName(resID));        return path;    }}])', 1), ('([2:/android/graphics/cts/BasicVulkanGpuTest.java]:[GPU]:[2]:method_text:[rmat;    public BasicVulkanGpuTest(String name, int format) {        mFormat = format;    }   ])', 1), ('([1:/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java]:[GPU]:[1]:method_text:[                        > SensorRatePermissionDirectReportTestHelper.CAPPED_SAMPLE_RATE_HZ);    }])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[ hwBuffer2.getLayers());        assertEquals(hwBuffer.getUsage(), hwBuffer2.getUsage());    }   ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[tory.Options();        options.inPreferredConfig = Config.HARDWARE;        return options;    }}])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[GPU]:[1]:method_text:[der.nativeOrder());        return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned    }}])', 1), ('([1:/android/security/cts/Poc17_01.java]:[GPU]:[1]:method_text:[ls.runPoc(""CVE-2016-8426"", getDevice(), 60);        }    }    /**     *  b/31799885     */   ])', 1), ('([2:/android/security/cts/Poc17_01.java]:[GPU]:[2]:method_text:[ls.runPoc(""CVE-2016-8427"", getDevice(), 60);        }    }    /**     *  b/31993456     */   ])', 1), ('([1:/android/graphics/cts/MediaVulkanGpuTest.java]:[GPU]:[1]:method_text:[map.getWidth(),                         bitmap.getHeight());        return framePixels;    }   ])', 1), ('([3:/android/media/cts/PresentationSyncTest.java]:[GPU]:[3]:method_text:[sleep(10); }                catch (InterruptedException ignored) {}            }        }    }}])', 1), ('([1:/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java]:[GPU]:[1]:method_text:[ * -> Exclude deprecated ApkInstaller.     * -> Check if host-side tests are non empty.     */   ])', 1), ('([1:/android/adb/cts/AdbHostTest.java]:[android.googlesource.com]:[1]:method_text:[c7c6d5edcbe04454eb9a40f947ac0a3045f64eb    // for the patch that enabled this on Pixel devices.   ])', 1), ('([1:/android/appsecurity/cts/KeySetHostTest.java]:[GPU]:[1]:method_text:[k that an apk with an upgrade key that has no corresponding public key fails to install.     */   ])', 1), ('([24:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[GPU]:[24]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.     */   ])', 1), ('([14:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[GPU]:[14]:method_text:[ges);            oldFanSpeeds = fanSpeeds;            oldCpuUsages = cpuUsages;        }    }}])', 1), ('([1:/android/app/uiautomation/cts/UiAutomationTest.java]:[GPU]:[1]:method_text:[entation getInstrumentation() {        return InstrumentationRegistry.getInstrumentation();    }}])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[GPU]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                FEATURE_WATCH, FEATURE_TELEVISION);    }   ])', 1), ('([1:/android/view/cts/PixelCopyTest.java]:[GPU]:[1]:method_text:[se();                    } catch (Throwable t) {}                }            }        }    }}])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java]:[GPU]:[1]:method_text:[           assertEquals(""title3"", s.getShortLabel());                    });        });    }   ])', 1), ('([30:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[30]:method_text:[es layers to our debuggable app and ensures they are     * loaded in the correct order.     */   ])', 1), (""([6:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[6]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.     */   ])"", 1), ('([1:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[1]:method_text:[not enumerate layers in base     * directory if enable_gpu_debug_layers is not enabled.     */   ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[e apps do not enumerate layers in base     * directory if gpu_debug_app does not match.     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[e apps do not enumerate layers in base     * directory if gpu_debug_layers are not set.     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[     * This test ensures we can still use properties if no layer specified via Settings     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[    /**     * This test ensures system properties are ignored if Settings load a layer     */   ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[  /**     * This test ensures a debuggable app can load layers from an external package     */   ])', 1), (""([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.     */   ])"", 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[not enumerate layers in base     * directory if enable_gpu_debug_layers is not enabled.     */   ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[S apps do not enumerate layers in base     * directory if gpu_debug_app does not match.     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[S apps do not enumerate layers in base     * directory if gpu_debug_layers are not set.     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**     * This test ensures we can still use properties if no GLES layers are specified     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**     * This test ensures system properties are ignored if Settings load a GLES layer     */   ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[/**     * This test ensures that external GLES layers can be loaded by a debuggable app     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[ppStartTime);        Assert.assertTrue(GLES_LAYER_C + "" was not loaded"", glesResult.found);    }}])', 1), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[GPU]:[2]:method_text:[processable mandatory stream combinations are     * present and advertised accordingly.     */   ])', 1), ('([1:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[1]:method_text:[eyevent KEYCODE_WAKEUP"");        getDevice().executeShellCommand(""wm dismiss-keyguard"");    }   ])', 1), ('([4:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[4]:method_text:[e[0] = """";            origRefreshRate[1] = """";        }        return origRefreshRate;    }   ])', 1), ('([3:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[3]:method_text:[tStatsEnd());                latest = proto;            }        }        return latest;    }}])', 1), ('([2:/android/hardware/nativehardware/cts/HardwareBufferVrTest.java]:[GPU]:[2]:method_text:[s(format, buffer.getFormat());            assertEquals(flags, buffer.getUsage());        }    }}])', 1), ('([1:/android/view/cts/ASurfaceControlTest.java]:[GPU]:[1]:method_text:[                        return pixelCount == 0;                    }                });    }   ])', 1), ('([1:/android/graphics/cts/CameraVulkanGpuTest.java]:[GPU]:[1]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([9:/com/android/cts/deviceowner/VrTemperatureTest.java]:[GPU]:[9]:method_text:[inThrottlingThresholds, skinShutdownThresholds,                skinVrThrottlingThresholds);    }}])', 1), ('([1:/android/security/cts/ActivityManagerTest.java]:[android.googlesource.com]:[1]:method_text:[ow this exception        }    }    // b/144285917    @AsbSecurityTest(cveBugId = 144285917)   ])', 1), ('([2:/android/graphics/cts/SyncTest.java]:[GPU]:[2]:method_text:[er    public void teardown() throws Throwable {        EGL14.eglTerminate(mEglDisplay);    }   ])', 1), ('([1:/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java]:[GPU]:[1]:method_text:[ecurityException"");        } catch (SecurityException e) {            // Expected        }    }])', 1), ('([5:/android/view/cts/FrameMetricsListenerTest.java]:[GPU]:[5]:method_text:[rawFrameMetric,                (firstDrawFrameMetric == 0) || (firstDrawFrameMetric == 1));    }}])', 1), ('([2:/android/hardware/camera2/cts/ImageReaderTest.java]:[GPU]:[2]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 1), ('([2:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[2]:method_text:[package manager is the same as     * the public.libraries*.txt files in the partitions.     */   ])', 1), ('([1:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[1]:method_text:[iredLibs, optionalLibs, availableLibs, unavailableLibs)));        runInstalledTestApp();    }   ])', 1), ('([1:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[1]:method_text:[quiredLibs, optionalLibs, availableLibs, unavailableLibs)));        runInstalledTestApp();    }}])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[2]:method_text:[at=PNG,""                + ""icon_quality=100"";    }    @AsbSecurityTest(cveBugId = 109824443)   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[1]:method_text:[name mismatch"",                () -> runWithCaller(callerContext, () -> r.run())        );    }}])', 1), ('([1:/android/security/cts/RunningAppProcessInfoTest.java]:[android.googlesource.com]:[1]:method_text:[se/+"" +                ""/aaa0fee0d7a8da347a0c47cef5249c70efee209e"", (appList.size() == 1));    }}])', 1), ('([3:/android/hardware/cts/HardwareBufferTest.java]:[GPU]:[3]:method_text:[        1, HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE | HardwareBuffer.USAGE_GPU_COLOR_OUTPUT));    }}])', 1), ('([1:/android/dumpsys/cts/GfxInfoDumpsysTest.java]:[GPU]:[1]:method_text:[  foundAtLeastOneRow = true;            }        }        assertTrue(foundAtLeastOneRow);    }}])', 1)]"	"https://android.googlesource.com"	""	"[('GPU', 60), ('android.googlesource.com', 3)]"	"[('[android.hardware.camera2.cts.CameraExtensionSessionTest testConcurrentSessions CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testTextureImageWriterReaderOperation CtsCameraTestCases]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis CtsSustainedPerformanceHostTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigPublicNamespacesWithoutReadPermission CtsDeviceConfigTestCases]', 1), ('[android.graphics.cts.CameraGpuTest testCameraImageCaptureAndRendering CtsGraphicsTestCases]', 1), ('[android.renderscript.cts.refocus.RefocusTest testNewRefocus CtsRenderscriptTestCases]', 1), ('[android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test testSamplingRateMicToggleOffOnOff None]', 1), ('[android.graphics.cts.BitmapTest testWrapHardwareBufferWithRgbBufferButNonRgbColorSpaceFails CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkCompressBadParameter CtsGraphicsTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8426 CtsSecurityBulletinHostTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8427 CtsSecurityBulletinHostTestCases]', 1), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.appsecurity.cts.KeySetHostTest testBadUpgradeMissingPubKey CtsAppSecurityHostTestCases]', 1), ('[android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest isEmpty CtsGpuProfilingDataTestCases]', 1), ('[com.android.cts.deviceowner.HardwarePropertiesManagerTest testHardwarePropertiesManager None]', 1), ('[android.app.uiautomation.cts.UiAutomationTest testCallingPublicAPIsWithDontUseAccessibilityFlag_shouldNotThrowException CtsUiAutomationTestCases]', 1), ('[android.view.cts.PixelCopyTest testBufferQueueCrop CtsViewTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest currentTimeMillis CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testInjectLayerLoadVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testReleaseLayerLoadGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testMultipleExternalApps CtsGpuToolsHostTestCases]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables CtsCameraTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest killTestApp CtsIncidentHostTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testJankyDrawFrame CtsIncidentHostTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testDaveyDrawFrame CtsIncidentHostTestCases]', 1), ('[android.hardware.nativehardware.cts.HardwareBufferVrTest testLayeredBuffersForVr CtsNativeHardwareTestCases]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_setBufferOpaque_transparent CtsViewTestCases]', 1), ('[com.android.cts.deviceowner.VrTemperatureTest testVrTemperatures None]', 1), ('[android.security.cts.ActivityManagerTest testActivityManager_injectInputEvents CtsSecurityTestCases]', 1), ('[android.sensorratepermission.cts.debuggableapi31.DebuggableAPI31Test testDirectChannel None]', 1), ('[android.view.cts.FrameMetricsListenerTest testDropCount CtsViewTestCases]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected CtsCameraTestCases]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase getTestInformation None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase testNewAppDependsOnSomePublicLibraries None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase testNewAppOptionallyDependsOnSomePublicLibraries None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.security.cts.RunningAppProcessInfoTest testRunningAppProcessInfo CtsSecurityTestCases]', 1), ('[android.hardware.cts.HardwareBufferTest testIsSupported CtsHardwareTestCases]', 1), ('[android.dumpsys.cts.GfxInfoDumpsysTest testGfxinfoFramestats CtsDumpsysHostTestCases]', 1)]"
"7.3  Sensors"	"7.3"	"C-4-1"	"7.3/C-4-1"	"07030000.670401"	"""C-4-1] MUST NOT include any fixed, factory-determined calibration     parameters in the data provided.  If device implementations include a combination of 3-axis accelerometer, a 3-axis gyroscope sensor, or a magnetometer sensor, they are:  """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"3.18  Contacts"	"3.18"	"C-1-1"	"3.18/C-1-1"	"03180000.670101"	"""C-1-1] The      [`ACCOUNT_NAME`](https://developer.android.com/reference/android/provider/ContactsContract.SyncColumns.html#ACCOUNT_NAME),      of the **custom local account** MUST be returned by      [`ContactsContract.RawContacts.getLocalAccountName`](https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html#getLocalAccountName\(\)) """	""	""	"ContactsContract.RawContacts.getLocalAccountName ContactsContract.RawContacts.html ContactsContract.SyncColumns.html ACCOUNT_NAME"	""	""	""	""	"[('android.accounts.cts.AccountManagerTest', 10), ('android.provider.cts.contacts.ContactsContract_RawContactsTest', 9), ('android.provider.cts.contacts.ContactsContract_DataTest', 8), ('android.provider.cts.calendar.CalendarTest', 4), ('android.accounts.cts.AbstractAuthenticatorTests', 4), ('android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest', 3), ('android.provider.cts.contacts.ContactsContract_StructuredPhoneticName', 3), ('com.android.cts.managedprofile.ContactsTest', 3), ('android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest', 2), ('android.provider.cts.contacts.ContactsContract_AllUriTest', 2), ('android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests', 2), ('android.provider.cts.contacts.ContactsContract_IsSuperPrimaryName', 2), ('com.android.cts.accountmanager.AccountManagerCrossUserTest', 2), ('android.provider.cts.contacts.ContactsContract_GroupMembershipTest', 2), ('android.content.cts.ContentResolverSyncTestCase', 2), ('android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest', 1), ('android.provider.cts.contacts.ContactsContract_SearchSnippetsTest', 1), ('android.provider.cts.contacts.ContactsContract_DirectoryTest', 1), ('com.android.cts.devicepolicy.accountmanagement.AccountManagementTest', 1), ('android.provider.cts.contacts.ContactsContract_StatusUpdatesTest', 1), ('android.security.cts.Poc18_07', 1), ('android.provider.cts.contacts.ContactsContract_ContactCountsTest', 1), ('android.provider.cts.contacts.ContactsContract_AggregationSuggestionsTest', 1), ('android.devicepolicy.cts.DevicePolicyManagerTest', 1), ('android.telephony.ims.cts.EabBulkCapabilityUpdaterTest', 1), ('android.provider.cts.contacts.ContactsContract_PhoneLookup', 1), ('android.provider.cts.contacts.ContactsContract_Subquery', 1), ('android.provider.cts.contacts.ContactsTest', 1), ('android.provider.cts.contacts.ContactsContract_ProviderStatus', 1)]"	"[('setUp', 19), ('ContentValues', 17), ('tearDown', 14), ('getContext', 8), ('getContentResolver', 8), ('moveToFirst', 7), ('getInstrumentation', 5), ('build', 5), ('size', 4), ('getMessage', 4), ('getCount', 4), ('getMockSyncAdapter', 4), ('getTargetContext', 3), ('failIfFailed', 3), ('buildUpon', 3), ('Bundle', 3), ('cleanup', 3), ('getUiAutomation', 2), ('waitForDirectorySetup', 2), ('elapsedRealtime', 2), ('close', 2), ('BackupUtils', 1), ('getAccount', 1), ('StringBuilder', 1), ('length', 1), ('getColumnNames', 1), ('CancellationSignal', 1), ('assertNoPhotoUri', 1), ('getApplicationContext', 1), ('getPackageManager', 1), ('CalendarHelper', 1), ('SyncStateHelper', 1), ('EventHelper', 1), ('AttendeeHelper', 1), ('ColorHelper', 1), ('ReminderHelper', 1), ('ExtendedPropertiesHelper', 1), ('clearData', 1), ('getResult', 1)]"	"[('CtsContactsProviderTestCases', 39), ('CtsAccountManagerTestCases', 16), ('CtsCalendarProviderTestCases', 4), ('CtsContentTestCases', 2), ('CtsSecurityBulletinHostTestCases', 1), ('CtsDevicePolicyTestCases', 1), ('CtsTelephonyTestCases', 1)]"	""	""	""	""	"android.accounts.cts.AbstractAuthenticatorTests"	"cleanup"	"CtsAccountManagerTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/accounts/src/android/accounts/cts/AccountManagerTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_RawContactsTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_DataTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/calendarprovider/src/android/provider/cts/calendar/CalendarTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/accounts/src/android/accounts/cts/AbstractAuthenticatorTests.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/SyncAdapterSettingsApp/src/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_AllUriTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/accounts/src/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/accounts/test-apps/AccountManagerCrossUserApp/src/com/android/cts/accountmanager/AccountManagerCrossUserTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentResolverSyncTestCase.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_SearchSnippetsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_DirectoryTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/AccountManagement/src/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_StatusUpdatesTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc18_07.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_ContactCountsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_AggregationSuggestionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/DevicePolicyManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_PhoneLookup.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_Subquery.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_ProviderStatus.java', 1)]"	"[('(2,ACCOUNT_NAME,/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java)', 1), ('(1,ContactsContract.RawContacts.getLocalAccountName,/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java)', 1), ('(2,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java)', 1), ('(2,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_AllUriTest.java)', 1), ('(3,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java)', 1), ('(9,ACCOUNT_NAME,/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java)', 1), ('(4,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java)', 1), ('(3,ACCOUNT_NAME,/com/android/cts/accountmanager/AccountManagerCrossUserTest.java)', 1), ('(3,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_SearchSnippetsTest.java)', 1), ('(5,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_DirectoryTest.java)', 1), ('(1,ACCOUNT_NAME,/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java)', 1), ('(3,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_StatusUpdatesTest.java)', 1), ('(5,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java)', 1), ('(1,ACCOUNT_NAME,/android/security/cts/Poc18_07.java)', 1), ('(6,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_ContactCountsTest.java)', 1), ('(6,ACCOUNT_NAME,/com/android/cts/managedprofile/ContactsTest.java)', 1), ('(30,ACCOUNT_NAME,/android/accounts/cts/AccountManagerTest.java)', 1), ('(3,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_AggregationSuggestionsTest.java)', 1), ('(2,ACCOUNT_NAME,/android/devicepolicy/cts/DevicePolicyManagerTest.java)', 1), ('(1,ACCOUNT_NAME,/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java)', 1), ('(3,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_PhoneLookup.java)', 1), ('(1,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_Subquery.java)', 1), ('(6,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsTest.java)', 1), ('(20,ACCOUNT_NAME,/android/provider/cts/calendar/CalendarTest.java)', 1), ('(12,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_DataTest.java)', 1), ('(4,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java)', 1), ('(1,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_ProviderStatus.java)', 1), ('(2,ACCOUNT_NAME,/android/content/cts/ContentResolverSyncTestCase.java)', 1), ('(13,ACCOUNT_NAME,/android/provider/cts/contacts/ContactsContract_RawContactsTest.java)', 1), ('(9,ACCOUNT_NAME,/android/accounts/cts/AbstractAuthenticatorTests.java)', 1)]"	"[('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[1]:method_text:[status token should be included in     * the result as session bundle is not inspected.     */   ])', 2), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ Or separate the authenticator and test app to allow the instant app mode test.    @AppModeFull   ])', 2), ('([1:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_NAME]:[1]:method_text:[               lookupContact.getId(), data.load().getRawContact().load().getContactId());    }   ])', 2), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[wrong contact"",                lookupContact.getId(), rawContact.load().getContactId());    }   ])', 2), ('([1:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ge.     * 3. Check restored MasterSyncAutomatically=true is the same with backup value.     */   ])', 1), ('([1:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[   Account account = accounts[i];            am.removeAccountExplicitly(account);        }    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[ContactsContract.RawContacts.getLocalAccountName]:[1]:method_text:[ to an added account will be removed but this should not be done for these SIM accounts.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ut this should not be done for the local account.     */    @CddTest(requirement=""3.18/C-1-4"")   ])', 1), ('([1:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ to an added account will be removed but this should not be done for these SIM accounts.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ull);    }    /**     * Make sure all URLs are accessible with all arguments = null.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ACCOUNT_NAME]:[1]:method_text:[    mResolver.delete(uri, ""1=2"", null);            });        }        failIfFailed();    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[ACCOUNT_NAME]:[3]:method_text:[).load();        return new long[] {contact.getId(), contact2.getId(), contact3.getId()};    }}])', 1), ('([2:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[ACCOUNT_NAME]:[2]:method_text:[ expected because default implementation cannot     * understand custom session bundle.     */   ])', 1), ('([7:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[ACCOUNT_NAME]:[7]:method_text:[EN_UNAFFILIATED,                result.getString(AccountManager.KEY_ACCOUNT_STATUS_TOKEN));    }}])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java]:[ACCOUNT_NAME]:[2]:method_text:[   contact.load();        contact.assertColumn(Contacts.DISPLAY_NAME, otherDisplayName);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_IsSuperPrimaryName.java]:[ACCOUNT_NAME]:[2]:method_text:[_TOGETHER);        mResolver.update(AggregationExceptions.CONTENT_URI, values, null, null);    }}])', 1), ('([1:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_NAME]:[1]:method_text:[mberFormatException ignore) {            }        }        return numAccountsExpected;    }   ])', 1), ('([2:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[ACCOUNT_NAME]:[2]:method_text:[accounts = accountManagerAsUser.getAccounts();        assertThat(accounts).hasLength(1);    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_SearchSnippetsTest.java]:[ACCOUNT_NAME]:[3]:method_text:[new long[] {                contact.getId(), contact2.getId(), contact3.getId()        };    }}])', 1), ('([5:/android/provider/cts/contacts/ContactsContract_DirectoryTest.java]:[ACCOUNT_NAME]:[5]:method_text:[D));            }        }        fail(""Directory didn\'t show up"");        return -1;    }   ])', 1), ('([1:/com/android/cts/devicepolicy/accountmanagement/AccountManagementTest.java]:[ACCOUNT_NAME]:[1]:method_text:[TokenType"", false);        assertEquals(MockAccountAuthenticator.AUTH_TOKEN, authToken);    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_StatusUpdatesTest.java]:[ACCOUNT_NAME]:[3]:method_text:[    assertNotNull(results[1].uri);        dataId = ContentUris.parseId(results[1].uri);    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java]:[ACCOUNT_NAME]:[1]:method_text:[ntacts.DISPLAY_NAME_SOURCE,                DisplayNameSources.STRUCTURED_PHONETIC_NAME);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java]:[ACCOUNT_NAME]:[2]:method_text:[   }    // Same as testPhoneticStructuredName_phoneticPriority1, but with setup order reversed   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_StructuredPhoneticName.java]:[ACCOUNT_NAME]:[2]:method_text:[awContact2.getContact().load();        contact.assertColumn(Contacts.DISPLAY_NAME, ""name"");    }}])', 1), ('([1:/android/security/cts/Poc18_07.java]:[ACCOUNT_NAME]:[1]:method_text:[ator: Add SIM account.*ContactsProvider: Accounts changed"",                logcat);      }    }}])', 1), ('([6:/android/provider/cts/contacts/ContactsContract_ContactCountsTest.java]:[ACCOUNT_NAME]:[6]:method_text:[), contact3.getId(), contact4.getId(),                contact5.getId(), contact6.getId()};    }}])', 1), ('([2:/com/android/cts/managedprofile/ContactsTest.java]:[ACCOUNT_NAME]:[2]:method_text:[PolicyManager) mContext                .getSystemService(Context.DEVICE_POLICY_SERVICE);    }   ])', 1), ('([1:/com/android/cts/managedprofile/ContactsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[YPE);        AccountManager.get(getContext()).addAccountExplicitly(account, null, null);    }   ])', 1), ('([3:/com/android/cts/managedprofile/ContactsTest.java]:[ACCOUNT_NAME]:[3]:method_text:[ArgumentException is not thrown"");        } catch (IllegalArgumentException ex) {        }    }}])', 1), ('([14:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[14]:method_text:[eak;            }        }        return result;    }    /**     * Test singleton     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ /**     * Test successful blockingGetAuthToken() with customTokens=true authenticator.     */   ])', 1), ('([4:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[4]:method_text:[countSession(...). A bundle containing account name and account     * type is expected.     */   ])', 1), ('([1:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ted when     * AccountManager.ERROR_CODE_INVALID_RESPONSE is returned by authenticator.     */   ])', 1), ('([2:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[2]:method_text:[ should be returned via the callback regardless of     * whether a handler is provided.     */   ])', 1), ('([4:/android/accounts/cts/AccountManagerTest.java]:[ACCOUNT_NAME]:[4]:method_text:[s a basic isCredentialsUpdateSuggested() which returns a bundle containing boolean true.     */   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_AggregationSuggestionsTest.java]:[ACCOUNT_NAME]:[3]:method_text:[.getContactId(),                rawContact2.getContactId(), rawContact3.getContactId()};    }   ])', 1), ('([2:/android/devicepolicy/cts/DevicePolicyManagerTest.java]:[ACCOUNT_NAME]:[2]:method_text:[e(PackageManager.FEATURE_DEVICE_ADMIN)    @RequireFeature(PackageManager.FEATURE_MANAGED_USERS)   ])', 1), ('([1:/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java]:[ACCOUNT_NAME]:[1]:method_text:[uld not format "" + number + "", error: "" + e);            }        }        return number;    }}])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_PhoneLookup.java]:[ACCOUNT_NAME]:[3]:method_text:[    * Test for {@link android.provider.ContactsContract.PhoneLookup#CONTENT_FILTER_URI}.     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_Subquery.java]:[ACCOUNT_NAME]:[1]:method_text:[ exists(select 1)"", null, null)) {            assertEquals(0, cursor.getCount());        }    }}])', 1), (""([6:/android/provider/cts/contacts/ContactsTest.java]:[ACCOUNT_NAME]:[6]:method_text:[er's extensions table     * It does not test any APIs in android.provider.Contacts.java     */   ])"", 1), ('([14:/android/provider/cts/calendar/CalendarTest.java]:[ACCOUNT_NAME]:[14]:method_text:[tResolver = getInstrumentation().getTargetContext().getContentResolver();    }    @MediumTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[ACCOUNT_NAME]:[1]:method_text:[    }    /**     * Tests Colors interaction with the Calendars table.     */    @MediumTest   ])', 1), ('([4:/android/provider/cts/calendar/CalendarTest.java]:[ACCOUNT_NAME]:[4]:method_text:[   }    /**     * Tests correct behavior of Events.isOrganizer column     */    @MediumTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[ACCOUNT_NAME]:[1]:method_text:[);    }    /**     * Tests correct behavior of Events.uid2445 column     */    @MediumTest   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ void tearDown() throws Exception {        super.tearDown();        mBuilder.cleanup();    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_NAME]:[1]:method_text:[              DATA_PROJECTION,                new long[]{data.load().getId()}        );    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_NAME]:[2]:method_text:[oupMembership.GROUP_SOURCE_ID},                new long[]{rawContact.getId()}        );    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_NAME]:[2]:method_text:[                   Data.LAST_TIME_USED},                new long[]{contactId}        );    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_NAME]:[1]:method_text:[);        } finally {            // Clean up            rawContact.delete();        }    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_DataTest.java]:[ACCOUNT_NAME]:[3]:method_text:[              toReturn[i] = cv.get(i);            }            return toReturn;        }    }}])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java]:[ACCOUNT_NAME]:[2]:method_text:[_id"");        groupMembership.assertColumn(GroupMembership.GROUP_ROW_ID, group.getId());    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_GroupMembershipTest.java]:[ACCOUNT_NAME]:[2]:method_text:[ertColumn(GroupMembership.GROUP_ROW_ID, group.getId());        group.deletePermanently();    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_ProviderStatus.java]:[ACCOUNT_NAME]:[1]:method_text:[ {            if (cursor != null) {                cursor.close();            }        }    }}])', 1), ('([1:/android/content/cts/ContentResolverSyncTestCase.java]:[ACCOUNT_NAME]:[1]:method_text:[etIsSyncable(account, authority, (b) ? 1 : 0);    }    /**     * Test a sync request     */   ])', 1), ('([1:/android/content/cts/ContentResolverSyncTestCase.java]:[ACCOUNT_NAME]:[1]:method_text:[    /**     * Test to verify that a SyncAdapter is called on all the accounts accounts     */   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[ void tearDown() throws Exception {        super.tearDown();        mBuilder.cleanup();    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[/base/core/res/res/values/config.xml.     */    @CddTest(requirement=""3.18/C-1-1,C-1-2,C-1-3"")   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[2]:method_text:[ctCreate_noAccountUsesLocalAccount()}     */    @CddTest(requirement=""3.18/C-1-1,C-1-2,C-1-3"")   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[2]:method_text:[ntext), row[0]);        assertEquals(RawContacts.getLocalAccountType(mContext), row[1]);    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[       RAW_CONTACTS_PROJECTION,                new long[]{rawContact.getId()}        );    }   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[3]:method_text:[          assertEquals(0, rawContact.getLong(RawContacts.LAST_TIME_CONTACTED));        }    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_RawContactsTest.java]:[ACCOUNT_NAME]:[1]:method_text:[S_CONTACTED));        assertEquals(0, rawContact.getLong(RawContacts.LAST_TIME_CONTACTED));    }}])', 1), ('([1:/android/accounts/cts/AbstractAuthenticatorTests.java]:[ACCOUNT_NAME]:[1]:method_text:[rypted session     * bundle should always be returned without password or status token.     */   ])', 1), ('([2:/android/accounts/cts/AbstractAuthenticatorTests.java]:[ACCOUNT_NAME]:[2]:method_text:[   * Only account name and account type should be returned as a bundle.     */    @AppModeFull   ])', 1), ('([3:/android/accounts/cts/AbstractAuthenticatorTests.java]:[ACCOUNT_NAME]:[3]:method_text:[   * Only account name and account type should be returned as a bundle.     */    @AppModeFull   ])', 1), ('([3:/android/accounts/cts/AbstractAuthenticatorTests.java]:[ACCOUNT_NAME]:[3]:method_text:[Suggested default implementation.     * A bundle with boolean false should be returned.     */   ])', 1)]"	"https://developer.android.com"	""	"[('ACCOUNT_NAME', 71), ('ContactsContract.RawContacts.getLocalAccountName', 1)]"	"[('[android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest testAccountRemoval_doesNotDeleteLocalAccountContacts CtsContactsProviderTestCases]', 2), ('[android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest testIsSyncableIsOne_ifTurnOffSyncEnabled None]', 1), ('[android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest testAccountRemovalWithMergedContact_deletesContacts CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_AllUriTest testAllOperations CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequent_projection CtsContactsProviderTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testDefaultFinishSessiontWithStartAddAccountSessionImpl CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testDefaultFinishSessionWithCustomStartUpdateCredentialsSessionImpl CtsAccountManagerTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_IsSuperPrimaryName testIsSuperPrimary_name2SuperPrimary CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_IsSuperPrimaryName testIsSuperPrimaryName_mergeBothSuperPrimary CtsContactsProviderTestCases]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest dropShellPermissionIdentity None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_addMockAccount None]', 1), ('[android.provider.cts.contacts.ContactsContract_SearchSnippetsTest testEnterpriseSearchSnippets_DeferredSnippetingMultiWordQuerySnippetNotDeferred CtsContactsProviderTestCases]', 1), ('[com.android.cts.devicepolicy.accountmanagement.AccountManagementTest testAddAccount_allowed None]', 1), ('[android.provider.cts.contacts.ContactsContract_StructuredPhoneticName testPhoneticStructuredName CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_StructuredPhoneticName testPhoneticStructuredName_phoneticPriority1 CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_StructuredPhoneticName testPhoneticStructuredName_phoneticPriority2 CtsContactsProviderTestCases]', 1), ('[android.security.cts.Poc18_07 testPocCVE_2017_18275 CtsSecurityBulletinHostTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_ContactCountsTest testContactCounts_correctCountsReturned CtsContactsProviderTestCases]', 1), ('[com.android.cts.managedprofile.ContactsTest assertPhotoUrisReadable None]', 1), ('[com.android.cts.managedprofile.ContactsTest testAddTestAccount None]', 1), ('[com.android.cts.managedprofile.ContactsTest testQuickContact None]', 1), ('[android.accounts.cts.AccountManagerTest AccountManagerTest CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testBlockingGetAuthToken_DefaultToken_Success CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSessionWithNullSessionBundle CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartAddAccountSessionWithEmptySessionBundle CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartUpdateCredentialsSessionWithNullSessionBundle CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartUpdateCredentialsSessionWithEmptySessionBundle CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testStartUpdateCredentialsSessionErrorWithCallbackAndHandler CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionWithReturnIntent CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionError CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionErrorWithCallbackAndHandler CtsAccountManagerTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_AggregationSuggestionsTest testAggregationSuggestionsByName_matchFirstNameParameter CtsContactsProviderTestCases]', 1), ('[android.devicepolicy.cts.DevicePolicyManagerTest TestApis CtsDevicePolicyTestCases]', 1), ('[android.telephony.ims.cts.EabBulkCapabilityUpdaterTest deleteContactTest CtsTelephonyTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_PhoneLookup setupTestData CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_Subquery testProviderStatus_addedContacts CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsTest testSettingsTable CtsContactsProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testColorWriteRequirements CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testCalendarIsPrimary CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testEventsIsOrganizer CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testGetLookupUriBySourceId CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testDataProjection CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testRawContactsEntityProjection CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testEntityProjection CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testGetLookupUriByDisplayName CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testContactablesUri CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testDataUpdate_updatesContactLastUpdatedTimestamp CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_GroupMembershipTest testAddGroupMembershipWithGroupSourceId CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_GroupMembershipTest testAddGroupMembershipWithUnknownGroupSourceId CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_ProviderStatus testProviderStatus_addedContacts CtsContactsProviderTestCases]', 1), ('[android.content.cts.ContentResolverSyncTestCase isDone CtsContentTestCases]', 1), ('[android.content.cts.ContentResolverSyncTestCase testValidateSyncExtrasBundle CtsContentTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testGetLookupUriBySourceId CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testGetLookupUriByDisplayName CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testRawContactCreate_updatesContactUpdatedTimestamp CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testRawContactCreate_noAccountUsesLocalAccount CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testRawContactCreate_nullAccountUsesLocalAccount CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testProjection CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testInsertUsageStat CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_RawContactsTest testUpdateUsageStat CtsContactsProviderTestCases]', 1), ('[android.accounts.cts.AbstractAuthenticatorTests testStartAddAccountSessionDefaultImpl CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AbstractAuthenticatorTests testStartUpdateCredentialsSessionDefaultImpl CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AbstractAuthenticatorTests testFinishSessionAndStartAddAccountSessionDefaultImpl CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AbstractAuthenticatorTests testFinishSessionAndStartUpdateCredentialsSessionDefaultImpl CtsAccountManagerTestCases]', 1)]"
"2.2.3  Software"	"3.8.16"	"H-1-1"	"3.8.16/H-1-1"	"03081600.720101"	"""[3.8.16/H-1-1] MUST declare the feature     flag [`android.software.controls`](https://developer.android.com/reference/android/content/pm/PackageManager#FEATURE_CONTROLS)     and set it to `true`. *   ["""	""	""	"android.software.controls FEATURE_CONTROLS"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://developer.android.com"	""	""	""
"7.4.5.2  IPv6"	"7.4.5.2"	"C-3-1"	"7.4.5.2/C-3-1"	"07040502.670301"	"""C-3-1] MUST support IPv6 operation (IPv6-only and possibly dual-stack) on     cellular.  If device implementations support more than one network type (e.g., Wi-Fi and cellular data), they:  """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"2.6.2  Software"	"3.2.3.1"	"Tab-0-1"	"3.2.3.1/Tab-0-1"	"03020301.980001"	"""[3.2.3.1/Tab-0-1]  MUST preload one or more applications or service components with an intent handler, for all the public intent filter patterns defined by the following application intents listed [here](https://developer.android.com/about/versions/11/reference/common-intents-30)."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://developer.android.com"	""	""	""
"7.4.5.2  IPv6"	"7.4.5.2"	"C-0-2"	"7.4.5.2/C-0-2"	"07040502.670002"	"""C-0-2] MUST include an IPv6 networking stack and support IPv6 communication using the managed APIs, such as `java.net.Socket` and `java.net.URLConnection`, as well as the native APIs, such as `AF_INET6` sockets. """	""	""	"java.net.Socket URLC INET6 java.net.URLConnection"	""	""	""	""	"[('android.os.cts.StrictModeTest', 7), ('com.android.cts.deviceowner.NetworkLoggingTest', 5), ('android.net.http.cts.HttpResponseCacheTest', 4), ('com.android.cts.deviceandprofileowner.NetworkLoggingTest', 4), ('com.android.cts.delegate.WorkProfileNetworkLoggingDelegateTest', 4), ('android.content.type.cts.MimeMapTest', 4), ('android.security.NetworkSecurityPolicyTestBase', 2), ('android.net.wifi.cts.WifiManagerTest', 2), ('com.android.cts.delegate.NetworkLoggingDelegateTest', 2), ('com.android.server.cts.device.statsdatom.AtomTests', 2), ('com.android.cts.runner.CtsTestRunListener', 2), ('android.media.cts.NativeDecoderTest', 1), ('com.android.cts.deviceowner.proxy.PacProxyTest', 1), ('android.content.cts.ClipDescriptionTest', 1), ('android.appsecurity.cts.listeningports.ListeningPortsTest', 1), ('android.security.cts.StagefrightTest', 1), ('com.android.cts.appwithdata.CreatePrivateDataTest', 1), ('android.keystore.cts.KeyPairGeneratorTest', 1), ('android.media.cts.StreamingMediaPlayerTest', 1), ('com.android.cts.appaccessdata.AccessPrivateDataTest', 1), ('android.media.cts.MediaPlayerFlakyNetworkTest', 1), ('android.security.net.config.cts.DownloadManagerTest', 1), ('com.android.cts.deviceandprofileowner.AlwaysOnVpnTest', 1), ('android.app.usage.cts.NetworkUsageStatsTest', 1), ('android.jvmti.cts.JvmtiAttachingHostTest', 1), ('android.net.cts.network.permission.UpdateStatsPermissionTest', 1), ('android.jdwptunnel.cts.JdwpTunnelTest', 1), ('android.os.cts.ParcelFileDescriptorTest', 1), ('android.permission.cts.FileSystemPermissionTest', 1), ('android.net.cts.network.permission.InternetPermissionTest', 1)]"	"[('setUp', 25), ('tearDown', 22), ('getDefault', 8), ('getInstrumentation', 6), ('getContext', 5), ('BroadcastReceiver', 4), ('getAction', 4), ('notifyAll', 4), ('now', 4), ('getMediaDirString', 3), ('shutdown', 3), ('getCount', 3), ('getWho', 3), ('size', 3), ('countDown', 3), ('stream', 3), ('waitForPacDownload', 2), ('MockWebServer', 2), ('randomUUID', 2), ('mkdirs', 2), ('getPath', 2), ('NetworkLogsReceiver', 2), ('getDevice', 2), ('moveToHomeScreen', 2), ('name', 2), ('findFirst', 2), ('trim', 2), ('extensions', 2), ('getFileNameMap', 2), ('toUpperCase', 1), ('toLowerCase', 1), ('startServer', 1), ('stopServer', 1), ('setPacURLAndWaitForDownload', 1), ('getPacURL', 1), ('Object', 1), ('getScanResults', 1), ('getState', 1), ('getArguments', 1), ('releaseMediaPlayer', 1), ('releaseHttpServer', 1), ('getPackageName', 1), ('getNetworkType', 1), ('getTransportType', 1), ('getMetered', 1), ('getSimpleName', 1), ('getCurrentUser', 1), ('virtualMachineManager', 1), ('attachingConnectors', 1), ('transport', 1), ('defaultArguments', 1), ('eventRequestManager', 1), ('suspend', 1), ('allClasses', 1), ('createClassPrepareRequest', 1), ('enable', 1), ('resume', 1), ('eventQueue', 1), ('remove', 1), ('request', 1), ('referenceType', 1), ('getRuntime', 1), ('totalMemory', 1), ('freeMemory', 1), ('getInputStream', 1), ('readLine', 1), ('toString', 1), ('close', 1), ('getName', 1), ('getClass', 1), ('getDeclaredFields', 1), ('getType', 1), ('containsAllExpectedMappings_extToMime', 1), ('agreesWithPublicApi', 1), ('getSingleton', 1), ('mimeTypes', 1)]"	"[('CtsApacheHttpTestCases', 4), ('CtsMimeMapTestCases', 4), ('CtsMediaTestCases', 3), ('CtsWifiTestCases', 2), ('CtsNetTestCases', 2), ('CtsContentTestCases', 1), ('CtsSecurityTestCases', 1), ('CtsKeystoreTestCases', 1), ('CtsNetSecConfigDownloadManagerTestCases', 1), ('CtsUsageStatsTestCases', 1), ('CtsJvmtiAttachingHostTestCases', 1), ('CtsJdwpTunnelHostTestCases', 1), ('CtsPermissionTestCases', 1)]"	""	""	""	""	"android.net.cts.network.permission.InternetPermissionTest"	"mimeTypes"	"CtsNetTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/StrictModeTest.java', 7), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/NetworkLoggingTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/apache-http/src/android/net/http/cts/HttpResponseCacheTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/mimemap/src/android/content/type/cts/MimeMapTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/netsecpolicy/src/android/security/NetworkSecurityPolicyTestBase.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/AtomTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/core/runner-axt/src/com/android/cts/runner/CtsTestRunListener.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/NativeDecoderTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/PacProxyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ListeningPortsApp/src/android/appsecurity/cts/listeningports/ListeningPortsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/StagefrightTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppWithData/src/com/android/cts/appwithdata/CreatePrivateDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyPairGeneratorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/StreamingMediaPlayerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppAccessData/src/com/android/cts/appaccessdata/AccessPrivateDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerFlakyNetworkTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/networksecurityconfig/networksecurityconfig-downloadmanager/src/android/security/net/config/cts/DownloadManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/NetworkUsageStatsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/attaching/host/src/android/jvmti/cts/JvmtiAttachingHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/netpermission/updatestatspermission/src/android/net/cts/network/permission/UpdateStatsPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/jdwptunnel/src/android/jdwptunnel/cts/JdwpTunnelTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/ParcelFileDescriptorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/FileSystemPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/netpermission/internetpermission/src/android/net/cts/network/permission/InternetPermissionTest.java', 1)]"	"[('(1,java.net.Socket,/android/media/cts/NativeDecoderTest.java)', 1), ('(1,java.net.Socket,/com/android/cts/deviceowner/proxy/PacProxyTest.java)', 1), ('(10,URLC,/android/security/NetworkSecurityPolicyTestBase.java)', 1), ('(1,java.net.URLConnection,/android/net/http/cts/HttpResponseCacheTest.java)', 1), ('(5,URLC,/android/net/http/cts/HttpResponseCacheTest.java)', 1), ('(4,URLC,/android/content/cts/ClipDescriptionTest.java)', 1), ('(1,java.net.Socket,/android/appsecurity/cts/listeningports/ListeningPortsTest.java)', 1), ('(1,java.net.Socket,/android/security/cts/StagefrightTest.java)', 1), ('(3,URLC,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(1,java.net.Socket,/com/android/cts/appwithdata/CreatePrivateDataTest.java)', 1), ('(1,java.net.Socket,/android/keystore/cts/KeyPairGeneratorTest.java)', 1), ('(2,INET6,/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java)', 1), ('(10,URLC,/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java)', 1), ('(1,java.net.Socket,/android/media/cts/StreamingMediaPlayerTest.java)', 1), ('(1,java.net.Socket,/com/android/cts/appaccessdata/AccessPrivateDataTest.java)', 1), ('(1,java.net.Socket,/android/media/cts/MediaPlayerFlakyNetworkTest.java)', 1), ('(1,java.net.Socket,/android/security/net/config/cts/DownloadManagerTest.java)', 1), ('(1,java.net.Socket,/android/os/cts/StrictModeTest.java)', 1), ('(7,URLC,/android/os/cts/StrictModeTest.java)', 1), ('(1,java.net.Socket,/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java)', 1), ('(8,URLC,/com/android/cts/delegate/NetworkLoggingDelegateTest.java)', 1), ('(2,INET6,/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java)', 1), ('(10,URLC,/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java)', 1), ('(2,INET6,/com/android/cts/deviceowner/NetworkLoggingTest.java)', 1), ('(1,java.net.Socket,/com/android/cts/deviceowner/NetworkLoggingTest.java)', 1), ('(10,URLC,/com/android/cts/deviceowner/NetworkLoggingTest.java)', 1), ('(13,URLC,/android/app/usage/cts/NetworkUsageStatsTest.java)', 1), ('(10,URLC,/com/android/server/cts/device/statsdatom/AtomTests.java)', 1), ('(1,java.net.Socket,/android/jvmti/cts/JvmtiAttachingHostTest.java)', 1), ('(1,java.net.Socket,/android/net/cts/network/permission/UpdateStatsPermissionTest.java)', 1), ('(1,java.net.Socket,/android/jdwptunnel/cts/JdwpTunnelTest.java)', 1), ('(1,java.net.Socket,/android/os/cts/ParcelFileDescriptorTest.java)', 1), ('(1,INET6,/android/permission/cts/FileSystemPermissionTest.java)', 1), ('(5,URLC,/com/android/cts/runner/CtsTestRunListener.java)', 1), ('(1,java.net.URLConnection,/android/content/type/cts/MimeMapTest.java)', 1), ('(5,URLC,/android/content/type/cts/MimeMapTest.java)', 1), ('(1,java.net.Socket,/android/net/cts/network/permission/InternetPermissionTest.java)', 1)]"	"[('([1:/android/media/cts/NativeDecoderTest.java]:[java.net.Socket]:[1]:method_text:[     if (testsRun == 0) {            MediaUtils.skipTest(""no decoders found"");        }    }   ])', 1), ('([1:/com/android/cts/deviceowner/proxy/PacProxyTest.java]:[java.net.Socket]:[1]:method_text:[ the PAC file can be set and it downloads it   * from the local HTTP server we are hosting.   */ ])', 1), ('([1:/android/security/NetworkSecurityPolicyTestBase.java]:[URLC]:[1]:method_text:[HttpOnlyWebServer.shutdown();        } finally {            super.tearDown();        }    }   ])', 1), ('([9:/android/security/NetworkSecurityPolicyTestBase.java]:[URLC]:[9]:method_text:[l).build();        assertFalse(mHttpOnlyWebServer.wasResourceRequested(uri.toString()));    }   ])', 1), ('([1:/android/net/http/cts/HttpResponseCacheTest.java]:[java.net.URLConnection]:[1]:method_text:[     ResponseCache.setDefault(null);        server.shutdown();        super.tearDown();    }   ])', 1), ('([1:/android/net/http/cts/HttpResponseCacheTest.java]:[URLC]:[1]:method_text:[     ResponseCache.setDefault(null);        server.shutdown();        super.tearDown();    }   ])', 1), ('([1:/android/net/http/cts/HttpResponseCacheTest.java]:[URLC]:[1]:method_text:[urn null;            }        });        assertNull(HttpResponseCache.getInstalled());    }   ])', 1), ('([3:/android/net/http/cts/HttpResponseCacheTest.java]:[URLC]:[3]:method_text:[Ensure the cache is initialized, otherwise various methods are no-ops.        cache.size();    }}])', 1), ('([4:/android/content/cts/ClipDescriptionTest.java]:[URLC]:[4]:method_text:[ity(intent);        mUiDevice.wait(Until.hasObject(By.pkg(clazz.getPackageName())), 15000);    }}])', 1), ('([1:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[java.net.Socket]:[1]:method_text:[e file and the boolean     * values are received as parameters from the host side test.     */   ])', 1), ('([1:/android/security/cts/StagefrightTest.java]:[java.net.Socket]:[1]:method_text:[ore any existing test methods     ***********************************************************/   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[URLC]:[1]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[URLC]:[2]:method_text:[ateCallback(Executor,     * WifiManager.TrafficStateCallback)} by sending some traffic.     */   ])', 1), ('([1:/com/android/cts/appwithdata/CreatePrivateDataTest.java]:[java.net.Socket]:[1]:method_text:[d traffic stats.     * @throws IOException if any error occurred when creating the file     */   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorTest.java]:[java.net.Socket]:[1]:method_text:[ mKeyStore = KeyStore.getInstance(""AndroidKeyStore"");        mKeyStore.load(null, null);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java]:[INET6]:[1]:method_text:[s);        mDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java]:[INET6]:[1]:method_text:[ddr) {        return ((addr instanceof Inet4Address) || (addr instanceof Inet6Address));    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java]:[URLC]:[1]:method_text:[s);        mDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());    }   ])', 1), ('([9:/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java]:[URLC]:[9]:method_text:[(""Did not get DeviceAdminReceiver#onNetworkLogsAvailable callback"");            }        }    }}])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[java.net.Socket]:[1]:method_text:[ondition.   Disable until better solution is available    // Streaming RTSP video from YouTube   ])', 1), (""([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[java.net.Socket]:[1]:method_text:[ntext();    }    /**     * Tests that another app's private data cannot be accessed.     */   ])"", 1), ('([1:/android/media/cts/MediaPlayerFlakyNetworkTest.java]:[java.net.Socket]:[1]:method_text:[on {        releaseMediaPlayer();        releaseHttpServer();        super.tearDown();    }   ])', 1), ('([1:/android/security/net/config/cts/DownloadManagerTest.java]:[java.net.Socket]:[1]:method_text:[ength: 5\\r\\n\\r\\nhello"";    private static final long TIMEOUT = 3 * DateUtils.SECOND_IN_MILLIS;   ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[java.net.Socket]:[1]:method_text:[icy);    }    public interface ThrowingRunnable {        void run() throws Exception;    }   ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[URLC]:[1]:method_text:[icy);    }    public interface ThrowingRunnable {        void run() throws Exception;    }   ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[URLC]:[1]:method_text:[nableTo(CleartextNetworkViolation.class));    }    /** Secure connection should be ignored */   ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[URLC]:[1]:method_text:[s://example.com/"").openConnection())                                .getResponseCode());    }   ])', 1), ('([2:/android/os/cts/StrictModeTest.java]:[URLC]:[2]:method_text:[            TrafficStats.clearThreadStatsTag();                    }                });    }   ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[URLC]:[1]:method_text:[fo.getViolationClass())                        .isAssignableTo(NetworkViolation.class));    }   ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[URLC]:[1]:method_text:[c."");        } catch (IOException ex) {            // Expected        }    }    @Presubmit   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java]:[java.net.Socket]:[1]:method_text:[MPONENT, VPN_PACKAGE,                /* restrictions */ null);        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[URLC]:[1]:method_text:[) {            TestAppHelper.unregisterTestCaseReceiver(mContext, mReceiver);        }    }   ])', 1), ('([7:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[URLC]:[7]:method_text:[tch (IOException e) {            Log.w(TAG, ""Failed to connect to "" + server, e);        }    }}])', 1), ('([1:/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java]:[INET6]:[1]:method_text:[        DelegateTestUtils.DelegatedLogsReceiver.sBatchCountDown = new CountDownLatch(1);    }   ])', 1), ('([1:/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java]:[INET6]:[1]:method_text:[ddr) {        return ((addr instanceof Inet4Address) || (addr instanceof Inet6Address));    }   ])', 1), ('([1:/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java]:[URLC]:[1]:method_text:[        DelegateTestUtils.DelegatedLogsReceiver.sBatchCountDown = new CountDownLatch(1);    }   ])', 1), ('([9:/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java]:[URLC]:[9]:method_text:[urlConnection != null) {                urlConnection.disconnect();            }        }    }}])', 1), (""([1:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[INET6]:[1]:method_text:[ there's one user on the device or all     * secondary users / profiles are affiliated.     */   ])"", 1), ('([1:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[INET6]:[1]:method_text:[ork logging enabled for %s"", admin).that(reallyEnabled)                .isEqualTo(enabled);    }}])', 1), (""([1:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[java.net.Socket]:[1]:method_text:[ there's one user on the device or all     * secondary users / profiles are affiliated.     */   ])"", 1), (""([1:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[URLC]:[1]:method_text:[ there's one user on the device or all     * secondary users / profiles are affiliated.     */   ])"", 1), ('([9:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[URLC]:[9]:method_text:[ork logging enabled for %s"", admin).that(reallyEnabled)                .isEqualTo(enabled);    }}])', 1), ('([13:/android/app/usage/cts/NetworkUsageStatsTest.java]:[URLC]:[13]:method_text:[er) -> telephonyManager.getSubscriberId());        }        return """";    }    @AppModeFull   ])', 1), ('([1:/com/android/server/cts/device/statsdatom/AtomTests.java]:[URLC]:[1]:method_text:[VICE, 117);        APP_OPS_ENUM_MAP.put(AppOpsManager.OPSTR_ESTABLISH_VPN_MANAGER, 118);    }   ])', 1), ('([9:/com/android/server/cts/device/statsdatom/AtomTests.java]:[URLC]:[9]:method_text:[PORT_WIFI)) {                return true;            }        }        return false;    }   ])', 1), ('([1:/android/jvmti/cts/JvmtiAttachingHostTest.java]:[java.net.Socket]:[1]:method_text:[cted void setUp() throws Exception {        mCurrentUser = getDevice().getCurrentUser();    }   ])', 1), ('([1:/android/net/cts/network/permission/UpdateStatsPermissionTest.java]:[java.net.Socket]:[1]:method_text:[ission:     *   {@link android.Manifest.permission#UPDATE_DEVICE_STATS}.     */    @SmallTest   ])', 1), ('([1:/android/jdwptunnel/cts/JdwpTunnelTest.java]:[java.net.Socket]:[1]:method_text:[of the activity     * class and put and wait for a breakpoint on the onCreate function.     */   ])', 1), ('([1:/android/os/cts/ParcelFileDescriptorTest.java]:[java.net.Socket]:[1]:method_text:[    private Context getContext() {        return InstrumentationRegistry.getContext();    }   ])', 1), ('([1:/android/permission/cts/FileSystemPermissionTest.java]:[INET6]:[1]:method_text:[ assertFileOwnedBy(f, ""root"");        assertFileOwnedByGroup(f, ""root"");    }    @MediumTest   ])', 1), ('([1:/com/android/cts/runner/CtsTestRunListener.java]:[URLC]:[1]:method_text:[ener"";    private TestEnvironment mEnvironment;    private Class<?> lastClass;    @Override   ])', 1), ('([4:/com/android/cts/runner/CtsTestRunListener.java]:[URLC]:[4]:method_text:[ry);            sTestEnvironmentResetter.setDateFormatIs24Hour(mDefaultIs24Hour);        }    }}])', 1), ('([1:/android/content/type/cts/MimeMapTest.java]:[java.net.URLConnection]:[1]:method_text:[ory.create(                s -> MimeMapTest.class.getResourceAsStream(""/testres/"" + s));    }   ])', 1), ('([1:/android/content/type/cts/MimeMapTest.java]:[URLC]:[1]:method_text:[ory.create(                s -> MimeMapTest.class.getResourceAsStream(""/testres/"" + s));    }   ])', 1), ('([1:/android/content/type/cts/MimeMapTest.java]:[URLC]:[1]:method_text:[eMap.getDefault(), i.e. that they are implemented on     * top of MimeMap.getDefault().     */   ])', 1), (""([3:/android/content/type/cts/MimeMapTest.java]:[URLC]:[3]:method_text:[meType.indexOf('/');        return (slash != -1) ? mimeType.substring(0, slash) : mimeType;    }}])"", 1), ('([1:/android/net/cts/network/permission/InternetPermissionTest.java]:[java.net.Socket]:[1]:method_text:[>Tests Permission:     *   {@link android.Manifest.permission#INTERNET}.     */    @SmallTest   ])', 1)]"	""	""	"[('URLC', 30), ('java.net.Socket', 18), ('INET6', 7), ('java.net.URLConnection', 2)]"	"[('[android.os.cts.StrictModeTest SimpleOnGestureListener None]', 2), ('[com.android.cts.deviceowner.NetworkLoggingTest testNetworkLoggingAndRetrieval None]', 2), ('[android.media.cts.NativeDecoderTest SKIP_testExtractor CtsMediaTestCases]', 1), ('[android.security.NetworkSecurityPolicyTestBase testDefaultHttpURLConnection None]', 1), ('[android.net.http.cts.HttpResponseCacheTest testGetInstalledWithWrongTypeInstalled CtsApacheHttpTestCases]', 1), ('[android.net.http.cts.HttpResponseCacheTest testStatisticsTracking CtsApacheHttpTestCases]', 1), ('[android.content.cts.ClipDescriptionTest testClassificationConfidenceValuesAreValid CtsContentTestCases]', 1), ('[android.security.cts.StagefrightTest TestName CtsSecurityTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsStaApConcurrencySupported CtsWifiTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest currentTimeMillis CtsKeystoreTestCases]', 1), ('[com.android.cts.deviceandprofileowner.NetworkLoggingTest testRetrieveNetworkLogs_forceNetworkLogs_receiveNetworkLogs None]', 1), ('[com.android.cts.deviceandprofileowner.NetworkLoggingTest testSetDelegateScope_noDelegation None]', 1), ('[android.os.cts.StrictModeTest testCleartextNetwork None]', 1), ('[android.os.cts.StrictModeTest testEncryptedNetwork None]', 1), ('[android.os.cts.StrictModeTest testUntaggedSocketsHttp None]', 1), ('[android.os.cts.StrictModeTest testNetwork None]', 1), ('[android.os.cts.StrictModeTest testNoCleartextHttpTrafficAllowed None]', 1), ('[com.android.cts.delegate.NetworkLoggingDelegateTest isHeadlessSystemUserMode None]', 1), ('[com.android.cts.delegate.NetworkLoggingDelegateTest testNetworkLogging None]', 1), ('[com.android.cts.delegate.WorkProfileNetworkLoggingDelegateTest testRetrieveNetworkLogs_forceNetworkLogs_receiveNetworkLogs None]', 1), ('[com.android.cts.delegate.WorkProfileNetworkLoggingDelegateTest testSetNetworkLogsEnabled_false None]', 1), ('[android.app.usage.cts.NetworkUsageStatsTest getIsDefault CtsUsageStatsTestCases]', 1), ('[com.android.server.cts.device.statsdatom.AtomTests testGenerateMobileTraffic None]', 1), ('[android.jdwptunnel.cts.JdwpTunnelTest disable CtsJdwpTunnelHostTestCases]', 1), ('[android.permission.cts.FileSystemPermissionTest testProcQtaguidStatsSane CtsPermissionTestCases]', 1), ('[com.android.cts.runner.CtsTestRunListener isPrimitive None]', 1)]"
"7.4.5.2  IPv6"	"7.4.5.2"	"C-1-1"	"7.4.5.2/C-1-1"	"07040502.670101"	"""C-1-1] MUST support dual-stack and IPv6-only operation on Wi-Fi.  If device implementations support Ethernet, they:  """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"7.4.8  Secure Elements"	"7.4.8"	"C-1-2"	"7.4.8/C-1-2"	"07040800.670102"	"""C-1-2] MUST declare the correct feature flags via     [`android.hardware.se.omapi.uicc`](     https://developer.android.com/reference/android/content/pm/PackageManager#FEATURE_SE_OMAPI_UICC)     for the device with UICC-based secure elements,     [`android.hardware.se.omapi.ese`](     https://developer.android.com/reference/android/content/pm/PackageManager#FEATURE_SE_OMAPI_ESE)     for the device with eSE-based secure elements and     [`android.hardware.se.omapi.sd`](     https://developer.android.com/reference/android/content/pm/PackageManager#FEATURE_SE_OMAPI_SD)     for the device with SD-based secure elements."""	""	""	"UICC android.hardware.se.omapi.ese android.hardware.se.omapi.sd android.hardware.se.omapi.uicc FEATURE_SE_OMAPI_UICC FEATURE_SE_OMAPI_ESE FEATURE_SE_OMAPI_SD"	""	""	""	""	"[('android.telephony.euicc.cts.EuiccManagerTest', 18), ('android.telephony.euicc.cts.EuiccServiceTest', 16), ('android.telephony.euicc.cts.EuiccProfileInfoTest', 9), ('android.telephony.cts.TelephonyManagerTest', 8), ('android.omapi.cts.OmapiTest', 8), ('android.carrierapi.cts.CarrierApiTest', 7), ('android.omapi.accesscontrol2.cts.AccessControlTest', 4), ('android.telephony.euicc.cts.EuiccInfoTest', 4), ('android.omapi.accesscontrol1.cts.AccessControlTest', 4), ('android.omapi.accesscontrol3.cts.AccessControlTest', 4), ('android.telephony.euicc.cts.GetDefaultDownloadableSubscriptionListResultTest', 3), ('android.telephony.euicc.cts.GetDownloadableSubscriptionMetadataResultTest', 3), ('android.telephony.euicc.cts.GetEuiccProfileInfoListResultTest', 3), ('android.telephony4.cts.SimRestrictedApisTest', 2), ('android.telephony.euicc.cts.DownloadableSubscriptionTest', 1), ('android.cts.statsdatom.telephony.TelephonyStatsTests', 1), ('android.telephony.cts.SubscriptionManagerTest', 1)]"	"[('Object', 17), ('ServiceConnectionTimerTask', 16), ('getContext', 11), ('setUp', 8), ('tearDown', 3), ('getPackageName', 2), ('getContentResolver', 2), ('getInstrumentation', 2), ('saveAllowedNetworkTypesForAllReasons', 2), ('recoverAllowedNetworkType', 2), ('hasCellular', 2), ('start', 1), ('getAction', 1), ('countDown', 1), ('clearQueue', 1), ('waitForCarrierConfigChanged', 1), ('getPackageManager', 1), ('getDefaultSubscriptionId', 1), ('getRadioHalVersion', 1), ('getUiAutomation', 1), ('StringBuilder', 1), ('toString', 1), ('keySet', 1), ('toByteArray', 1), ('getPhoneCount', 1)]"	"[('CtsTelephonyTestCases', 66), ('CtsSecureElementAccessControlTestCases', 12), ('CtsOmapiTestCases', 8), ('CtsCarrierApiTestCases', 7), ('CtsSimRestrictedApisTestCases', 2), ('CtsStatsdAtomHostTestCases', 1)]"	""	""	""	""	"android.telephony.euicc.cts.GetEuiccProfileInfoListResultTest"	"setUp"	"CtsTelephonyTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/EuiccManagerTest.java', 18), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/EuiccServiceTest.java', 16), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/EuiccProfileInfoTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/secure_element/omapi/src/android/omapi/cts/OmapiTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/secure_element/access_control/AccessControlApp2/src/android/omapi/accesscontrol2/cts/AccessControlTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/EuiccInfoTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/secure_element/access_control/AccessControlApp1/src/android/omapi/accesscontrol1/cts/AccessControlTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/secure_element/access_control/AccessControlApp3/src/android/omapi/accesscontrol3/cts/AccessControlTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/GetDefaultDownloadableSubscriptionListResultTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/GetEuiccProfileInfoListResultTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony4/src/android/telephony4/cts/SimRestrictedApisTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/DownloadableSubscriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/telephony/TelephonyStatsTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SubscriptionManagerTest.java', 1)]"	"[('(2,UICC,/android/telephony/euicc/cts/DownloadableSubscriptionTest.java)', 1), ('(131,UICC,/android/telephony/euicc/cts/EuiccManagerTest.java)', 1), ('(4,UICC,/android/telephony4/cts/SimRestrictedApisTest.java)', 1), ('(1,FEATURE_SE_OMAPI_SD,/android/omapi/accesscontrol2/cts/AccessControlTest.java)', 1), ('(1,FEATURE_SE_OMAPI_ESE,/android/omapi/accesscontrol2/cts/AccessControlTest.java)', 1), ('(1,FEATURE_SE_OMAPI_UICC,/android/omapi/accesscontrol2/cts/AccessControlTest.java)', 1), ('(2,UICC,/android/omapi/accesscontrol2/cts/AccessControlTest.java)', 1), ('(4,UICC,/android/cts/statsdatom/telephony/TelephonyStatsTests.java)', 1), ('(17,UICC,/android/carrierapi/cts/CarrierApiTest.java)', 1), ('(28,UICC,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(73,UICC,/android/telephony/euicc/cts/EuiccProfileInfoTest.java)', 1), ('(19,UICC,/android/telephony/euicc/cts/EuiccInfoTest.java)', 1), ('(7,UICC,/android/telephony/euicc/cts/GetDefaultDownloadableSubscriptionListResultTest.java)', 1), ('(7,UICC,/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java)', 1), ('(2,FEATURE_SE_OMAPI_SD,/android/omapi/cts/OmapiTest.java)', 1), ('(2,FEATURE_SE_OMAPI_ESE,/android/omapi/cts/OmapiTest.java)', 1), ('(2,FEATURE_SE_OMAPI_UICC,/android/omapi/cts/OmapiTest.java)', 1), ('(28,UICC,/android/omapi/cts/OmapiTest.java)', 1), ('(5,UICC,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(102,UICC,/android/telephony/euicc/cts/EuiccServiceTest.java)', 1), ('(1,FEATURE_SE_OMAPI_SD,/android/omapi/accesscontrol1/cts/AccessControlTest.java)', 1), ('(1,FEATURE_SE_OMAPI_ESE,/android/omapi/accesscontrol1/cts/AccessControlTest.java)', 1), ('(1,FEATURE_SE_OMAPI_UICC,/android/omapi/accesscontrol1/cts/AccessControlTest.java)', 1), ('(2,UICC,/android/omapi/accesscontrol1/cts/AccessControlTest.java)', 1), ('(1,FEATURE_SE_OMAPI_SD,/android/omapi/accesscontrol3/cts/AccessControlTest.java)', 1), ('(1,FEATURE_SE_OMAPI_ESE,/android/omapi/accesscontrol3/cts/AccessControlTest.java)', 1), ('(1,FEATURE_SE_OMAPI_UICC,/android/omapi/accesscontrol3/cts/AccessControlTest.java)', 1), ('(2,UICC,/android/omapi/accesscontrol3/cts/AccessControlTest.java)', 1), ('(13,UICC,/android/telephony/euicc/cts/GetEuiccProfileInfoListResultTest.java)', 1)]"	"[('([2:/android/telephony/euicc/cts/EuiccServiceTest.java]:[UICC]:[2]:method_text:[           fail(e.toString());        }        assertTrue(mCallback.isMethodCalled());    }   ])', 9), ('([3:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[3]:method_text:[     EuiccManager.EMBEDDED_SUBSCRIPTION_RESULT_ERROR, mCallbackReceiver.getResultCode());    }   ])', 3), ('([6:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[6]:method_text:[ginal country list        mEuiccManager.setSupportedCountries(originalSupportedCountry);    }   ])', 3), ('([3:/android/telephony/euicc/cts/EuiccServiceTest.java]:[UICC]:[3]:method_text:[           fail(e.toString());        }        assertTrue(mCallback.isMethodCalled());    }   ])', 3), ('([9:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[9]:method_text:[ortedCountry);        mEuiccManager.setUnsupportedCountries(originalUnsupportedCountry);    }   ])', 2), ('([9:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[9]:method_text:[ EuiccProfileInfo.CREATOR.createFromParcel(parcel);        assertEquals(p, fromParcel);    }   ])', 2), ('([2:/android/telephony/euicc/cts/DownloadableSubscriptionTest.java]:[UICC]:[2]:method_text:[ mDownloadableSubscription = DownloadableSubscription.forActivationCode(ACTIVATION_CODE);    }   ])', 1), ('([14:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[14]:method_text:[iver != null) {            getContext().unregisterReceiver(mCallbackReceiver);        }    }   ])', 1), ('([2:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[2]:method_text:[ eid = mEuiccManager.getEid();        // verify result is null        assertNull(eid);    }   ])', 1), ('([4:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[4]:method_text:[     mEuiccManager = mEuiccManager.createForCardId(TelephonyManager.UNSUPPORTED_CARD_ID);    }   ])', 1), ('([8:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[8]:method_text:[cManager.getEuiccInfo();        // verify result is null        assertNull(euiccInfo);    }   ])', 1), ('([4:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[4]:method_text:[     EuiccManager.EMBEDDED_SUBSCRIPTION_RESULT_ERROR, mCallbackReceiver.getResultCode());    }   ])', 1), ('([7:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[7]:method_text:[tionActivity.RESULT_CODE_TEST_PASSED,                mCallbackReceiver.getResultCode());    }   ])', 1), ('([13:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[13]:method_text:[ION_SMDX_SUBJECT_REASON_CODE, 10);        assertEquals(EuiccManager.OPERATION_HTTP, 11);    }   ])', 1), ('([19:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[19]:method_text:[INVALID_RESPONSE, 10015);        assertEquals(EuiccManager.ERROR_OPERATION_BUSY, 10016);    }   ])', 1), ('([6:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[6]:method_text:[l country list        mEuiccManager.setUnsupportedCountries(originalUnsupportedCountry);    }   ])', 1), ('([9:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[9]:method_text:[tDownLatch.countDown();                    break;                }            }        }    }}])', 1), ('([2:/android/telephony4/cts/SimRestrictedApisTest.java]:[UICC]:[2]:method_text:[ts a SecurityException since the test apk is not signed by certficate on the     * SIM.     */   ])', 1), ('([2:/android/telephony4/cts/SimRestrictedApisTest.java]:[UICC]:[2]:method_text:[arrier privileges."");            }        } catch (SecurityException expected) {        }    }}])', 1), ('([1:/android/omapi/accesscontrol2/cts/AccessControlTest.java]:[FEATURE_SE_OMAPI_SD]:[1]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([1:/android/omapi/accesscontrol2/cts/AccessControlTest.java]:[FEATURE_SE_OMAPI_ESE]:[1]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([1:/android/omapi/accesscontrol2/cts/AccessControlTest.java]:[FEATURE_SE_OMAPI_UICC]:[1]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([2:/android/omapi/accesscontrol2/cts/AccessControlTest.java]:[UICC]:[2]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([4:/android/cts/statsdatom/telephony/TelephonyStatsTests.java]:[UICC]:[4]:method_text:[().executeShellCommand(""cmd phone restart-modem"");        return response.contains(""true"");    }}])', 1), ('([4:/android/carrierapi/cts/CarrierApiTest.java]:[UICC]:[4]:method_text:[{            Log.w(TAG, ""Failed to clean up voicemail tables in tearDown"", e);        }    }   ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UICC]:[1]:method_text:[r a logical channel and makes sure appropriate     * errors are returned from the UICC.     */   ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UICC]:[1]:method_text:[ss, as it process involves several file-reads. The ICCID is one of the first files read.     */   ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UICC]:[1]:method_text:[lected via a     * SELECT apdu via the basic channel, then a STATUS AT-command is sent.     */   ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UICC]:[1]:method_text:[envelope to the UICC via     * {@link TelephonyManager#sendEnvelopeWithStatus(String)}.     */   ])', 1), ('([4:/android/carrierapi/cts/CarrierApiTest.java]:[UICC]:[4]:method_text:[   .that(response)                .isEqualTo(hexStringToBytes(EXPECTED_EAP_SIM_RESULT));    }   ])', 1), ('([5:/android/carrierapi/cts/CarrierApiTest.java]:[UICC]:[5]:method_text:[   .that(akaResponse)                .isEqualTo(hexStringToBytes(EXPECTED_EAP_AKA_RESULT));    }}])', 1), ('([3:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[3]:method_text:[ckageManager.FEATURE_TELEPHONY)                && mTelephonyManager.getPhoneCount() > 0;    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[1]:method_text:[ uiAutomation.grantRuntimePermission(packageName, permission.ACCESS_BACKGROUND_LOCATION);    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[1]:method_text:[ returns a positive value or either     * UNINITIALIZED_CARD_ID or UNSUPPORTED_CARD_ID.     */   ])', 1), ('([4:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[4]:method_text:[/**     * Tests that a SecurityException is thrown when trying to access UiccCardsInfo.     */   ])', 1), (""([4:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[4]:method_text:[ption e) {        }    }    /**     * Tests that UiccCardsInfo methods don't crash.     */   ])"", 1), ('([5:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[5]:method_text:[  /**     * Tests that the device properly reports the contents of NetworkSelectionMode     */   ])', 1), ('([3:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[3]:method_text:[ntation().getUiAutomation()                    .dropShellPermissionIdentity();        }    }   ])', 1), ('([7:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[7]:method_text:[ged = true;                    mLock.notify();                }            }        }    }   ])', 1), ('([7:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[7]:method_text:[BuilderBuild_IllegalIccid} */@RunWith(AndroidJUnit4.class)public class EuiccProfileInfoTest {   ])', 1), ('([15:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[15]:method_text:[UiccAccessRule(new byte[0], null, 0)},                p.getUiccAccessRules().toArray());    }   ])', 1), ('([9:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[9]:method_text:[        assertEquals(p, copied);        assertEquals(p.hashCode(), copied.hashCode());    }   ])', 1), ('([20:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[20]:method_text:[);        assertFalse(p.equals(t));        assertNotEquals(p.hashCode(), t.hashCode());    }   ])', 1), ('([1:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[1]:method_text:[id testBuilderBuild_IllegalIccid() {        new EuiccProfileInfo.Builder(""abc"").build();    }   ])', 1), ('([1:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[1]:method_text:[       .setCarrierIdentifier(new CarrierIdentifier(new byte[] {1, 2, 3, 4}, null, null));    }   ])', 1), ('([2:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[2]:method_text:[ofiles = EuiccProfileInfo.CREATOR.newArray(123);        assertEquals(123, profiles.length);    }}])', 1), ('([8:/android/telephony/euicc/cts/EuiccInfoTest.java]:[UICC]:[8]:method_text:[   public void setUp() throws Exception {        mEuiccInfo = new EuiccInfo(OS_VERSION);    }   ])', 1), ('([2:/android/telephony/euicc/cts/EuiccInfoTest.java]:[UICC]:[2]:method_text:[  assertNotNull(mEuiccInfo);        assertEquals(OS_VERSION, mEuiccInfo.getOsVersion());    }   ])', 1), ('([2:/android/telephony/euicc/cts/EuiccInfoTest.java]:[UICC]:[2]:method_text:[ts();        assertTrue(bitmask == 0 || bitmask == Parcelable.CONTENTS_FILE_DESCRIPTOR);    }   ])', 1), ('([7:/android/telephony/euicc/cts/EuiccInfoTest.java]:[UICC]:[7]:method_text:[ateFromParcel(parcel);        assertEquals(OS_VERSION, euiccInfoFromParcel.getOsVersion());    }}])', 1), ('([5:/android/telephony/euicc/cts/GetDefaultDownloadableSubscriptionListResultTest.java]:[UICC]:[5]:method_text:[(                        EuiccService.RESULT_RESOLVABLE_ERRORS, null /*subscriptions*/);    }   ])', 1), ('([1:/android/telephony/euicc/cts/GetDefaultDownloadableSubscriptionListResultTest.java]:[UICC]:[1]:method_text:[  assertEquals(EuiccService.RESULT_RESOLVABLE_ERRORS, mDefaultSubListResult.getResult());    }   ])', 1), ('([1:/android/telephony/euicc/cts/GetDefaultDownloadableSubscriptionListResultTest.java]:[UICC]:[1]:method_text:[ORS, fromParcel.getResult());        assertNull(fromParcel.getDownloadableSubscriptions());    }}])', 1), ('([5:/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java]:[UICC]:[5]:method_text:[(                        EuiccService.RESULT_RESOLVABLE_ERRORS, null /*subscriptions*/);    }   ])', 1), ('([1:/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java]:[UICC]:[1]:method_text:[     assertEquals(EuiccService.RESULT_RESOLVABLE_ERRORS, mSubMetadataResult.getResult());    }   ])', 1), ('([1:/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java]:[UICC]:[1]:method_text:[RORS, fromParcel.getResult());        assertNull(fromParcel.getDownloadableSubscription());    }}])', 1), ('([2:/android/omapi/cts/OmapiTest.java]:[FEATURE_SE_OMAPI_SD]:[2]:method_text:[        connectionTimer.cancel();            }        }    }    /** Tests getReaders API */   ])', 1), ('([2:/android/omapi/cts/OmapiTest.java]:[FEATURE_SE_OMAPI_ESE]:[2]:method_text:[        connectionTimer.cancel();            }        }    }    /** Tests getReaders API */   ])', 1), ('([2:/android/omapi/cts/OmapiTest.java]:[FEATURE_SE_OMAPI_UICC]:[2]:method_text:[        connectionTimer.cancel();            }        }    }    /** Tests getReaders API */   ])', 1), ('([4:/android/omapi/cts/OmapiTest.java]:[UICC]:[4]:method_text:[        connectionTimer.cancel();            }        }    }    /** Tests getReaders API */   ])', 1), ('([16:/android/omapi/cts/OmapiTest.java]:[UICC]:[16]:method_text:[e) {            fail(""Unexpected Exception "" + e);        }    }    /** Tests getATR API */   ])', 1), ('([4:/android/omapi/cts/OmapiTest.java]:[UICC]:[4]:method_text:[pected Exception "" + e);        }    }    /** Tests OpenBasicChannel API when aid is null */   ])', 1), ('([2:/android/omapi/cts/OmapiTest.java]:[UICC]:[2]:method_text:[ed Exception "" + e);        }    }    /** Tests OpenBasicChannel API when aid is provided */   ])', 1), ('([2:/android/omapi/cts/OmapiTest.java]:[UICC]:[2]:method_text:[e) {            fail(""Unexpected Exception "" + e);        }    }    /** Tests Select API */   ])', 1), ('([5:/android/telephony/cts/SubscriptionManagerTest.java]:[UICC]:[5]:method_text:[assertTrue(mSm.getActiveSubscriptionInfo(mSubId).areUiccApplicationsEnabled());        }    }   ])', 1), ('([56:/android/telephony/euicc/cts/EuiccServiceTest.java]:[UICC]:[56]:method_text:[    private Context getContext() {        return InstrumentationRegistry.getContext();    }   ])', 1), ('([6:/android/telephony/euicc/cts/EuiccServiceTest.java]:[UICC]:[6]:method_text:[           fail(e.toString());        }        assertTrue(mCallback.isMethodCalled());    }   ])', 1), ('([9:/android/telephony/euicc/cts/EuiccServiceTest.java]:[UICC]:[9]:method_text:[           fail(e.toString());        }        assertTrue(mCallback.isMethodCalled());    }   ])', 1), ('([4:/android/telephony/euicc/cts/EuiccServiceTest.java]:[UICC]:[4]:method_text:[;        assertEquals(mEuiccService.encodeSmdxSubjectAndReasonCode(""8.1"", ""5""), 0xA081005);    }}])', 1), ('([1:/android/omapi/accesscontrol1/cts/AccessControlTest.java]:[FEATURE_SE_OMAPI_SD]:[1]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([1:/android/omapi/accesscontrol1/cts/AccessControlTest.java]:[FEATURE_SE_OMAPI_ESE]:[1]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([1:/android/omapi/accesscontrol1/cts/AccessControlTest.java]:[FEATURE_SE_OMAPI_UICC]:[1]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([2:/android/omapi/accesscontrol1/cts/AccessControlTest.java]:[UICC]:[2]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([1:/android/omapi/accesscontrol3/cts/AccessControlTest.java]:[FEATURE_SE_OMAPI_SD]:[1]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([1:/android/omapi/accesscontrol3/cts/AccessControlTest.java]:[FEATURE_SE_OMAPI_ESE]:[1]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([1:/android/omapi/accesscontrol3/cts/AccessControlTest.java]:[FEATURE_SE_OMAPI_UICC]:[1]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([2:/android/omapi/accesscontrol3/cts/AccessControlTest.java]:[UICC]:[2]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([9:/android/telephony/euicc/cts/GetEuiccProfileInfoListResultTest.java]:[UICC]:[9]:method_text:[                       null /*profiles*/,                        false /*isRemovable*/);    }   ])', 1), ('([1:/android/telephony/euicc/cts/GetEuiccProfileInfoListResultTest.java]:[UICC]:[1]:method_text:[     assertEquals(EuiccService.RESULT_RESOLVABLE_ERRORS, mProfileListResult.getResult());    }   ])', 1), ('([3:/android/telephony/euicc/cts/GetEuiccProfileInfoListResultTest.java]:[UICC]:[3]:method_text:[mProfileListResult.getProfiles());        assertFalse(mProfileListResult.getIsRemovable());    }}])', 1)]"	"https://developer.android.com"	""	"[('UICC', 84), ('FEATURE_SE_OMAPI_SD', 4), ('FEATURE_SE_OMAPI_ESE', 4), ('FEATURE_SE_OMAPI_UICC', 4)]"	"[('[android.omapi.accesscontrol2.cts.AccessControlTest OnConnectedListener CtsSecureElementAccessControlTestCases]', 4), ('[android.omapi.cts.OmapiTest OnConnectedListener CtsOmapiTestCases]', 4), ('[android.omapi.accesscontrol1.cts.AccessControlTest OnConnectedListener CtsSecureElementAccessControlTestCases]', 4), ('[android.omapi.accesscontrol3.cts.AccessControlTest OnConnectedListener CtsSecureElementAccessControlTestCases]', 4), ('[android.telephony.euicc.cts.EuiccManagerTest testGetEid CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testCreateForCardId CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testDownloadSubscription CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testGetEuiccInfo CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testDeleteSubscription CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testSwitchToSubscription CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testEraseSubscriptions CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testStartResolutionActivity CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testOperationCode CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testErrorCode CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testSetSupportedCountries CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testSetUnsupportedCountries CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testIsSupportedCountry_returnsTrue_ifCountryIsOnSupportedList CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testIsSupportedCountry_returnsTrue_ifCountryIsNotOnUnsupportedList CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testIsSupportedCountry_returnsFalse_ifCountryIsNotOnSupportedList CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testIsSupportedCountry_returnsFalse_ifCountryIsOnUnsupportedList CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testIsSupportedCountry_returnsFalse_ifBothListsAreEmpty CtsTelephonyTestCases]', 1), ('[android.telephony4.cts.SimRestrictedApisTest testGetIccAuthentication CtsSimRestrictedApisTestCases]', 1), ('[android.telephony4.cts.SimRestrictedApisTest testGetUiccCardsInfo CtsSimRestrictedApisTestCases]', 1), ('[android.cts.statsdatom.telephony.TelephonyStatsTests testModemRestart CtsStatsdAtomHostTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest werePreconditionsSatisfied CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testIccTransmitApduLogicalChannel CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testIccTransmitApduLogicalChannelWithInvalidInputs CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testOpportunistic CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testIccExchangeSimIO CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testEapSimAuthentication CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testEapAkaAuthentication CtsCarrierApiTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testHasCarrierPrivilegesViaCarrierConfigs CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetManualNetworkSelectionPlmnPersisted CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetCardIdForDefaultEuicc CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetUiccCardsInfoException CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetUiccCardsInfo CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testIsApplicationOnUicc CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetAllCellInfo CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testWriteToParcel CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testWriteToParcelNullCarrierId CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testBuilderAndGetters CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testBuilder_BasedOnAnotherProfile CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testEqualsHashCode CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testBuilderBuild_IllegalIccid CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testBuilderSetOperatorMccMnc_Illegal CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testCreatorNewArray CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccInfoTest testGetOsVersion CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccInfoTest testDescribeContents CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccInfoTest testWriteToParcel CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.GetDefaultDownloadableSubscriptionListResultTest testGetResult CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.GetDefaultDownloadableSubscriptionListResultTest testWriteToParcel CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.GetDownloadableSubscriptionMetadataResultTest testGetResult CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.GetDownloadableSubscriptionMetadataResultTest testWriteToParcel CtsTelephonyTestCases]', 1), ('[android.omapi.cts.OmapiTest testGetReaders CtsOmapiTestCases]', 1), ('[android.omapi.cts.OmapiTest testATR CtsOmapiTestCases]', 1), ('[android.omapi.cts.OmapiTest testOpenBasicChannelNullAid CtsOmapiTestCases]', 1), ('[android.omapi.cts.OmapiTest testOpenBasicChannelNonNullAid CtsOmapiTestCases]', 1), ('[android.telephony.cts.SubscriptionManagerTest testSetUiccApplicationsEnabled CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest ServiceTestRule CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnGetEid CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnGetOtaStatus CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnGetDownloadableSubscriptionMetadata CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnStartOtaIfNecessary CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnGetDefaultDownloadableSubscriptionList CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnDownloadSubscription CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnGetEuiccProfileInfoList CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnGetEuiccInfo CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnDeleteSubscription CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnSwitchToSubscription CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnUpdateSubscriptionNickname CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnEraseSubscriptions CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnRetainSubscriptionsForFactoryReset CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testDump CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testEncodeSmdxSubjectAndReasonCode CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.GetEuiccProfileInfoListResultTest testGetResult CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.GetEuiccProfileInfoListResultTest testWriteToParcel CtsTelephonyTestCases]', 1)]"
"9.1  Permissions"	"9.1"	"C-2-1"	"9.1/C-2-1"	"09010000.670201"	"""C-2-1] MUST ensure that all activities with intent filters for the     [`ACTION_MANAGE_OVERLAY_PERMISSION`](     https://developer.android.com/reference/android/provider/Settings.html#ACTION_MANAGE_OVERLAY_PERMISSION)     intent have the same UI screen, regardless of the initiating app or any     information it provides."""	""	""	"Settings.html ACTION_MANAGE_OVERLAY_PERMISSION"	""	""	""	""	"[('android.systemintents.cts.TestManageOverlayPermissionIntents', 1), ('com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity', 1)]"	"[('size', 2)]"	"[('CtsSystemIntentTestCases', 1)]"	""	""	""	""	"com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity"	"size"	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestManageOverlayPermissionIntents.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 1)]"	"[('(3,ACTION_MANAGE_OVERLAY_PERMISSION,/android/systemintents/cts/TestManageOverlayPermissionIntents.java)', 1), ('(1,ACTION_MANAGE_OVERLAY_PERMISSION,/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java)', 1)]"	"[('([3:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[ACTION_MANAGE_OVERLAY_PERMISSION]:[3]:method_text:[ty.packageName);        assertEquals(errorMessage, genericActivity.name, appActivity.name);    }}])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[ACTION_MANAGE_OVERLAY_PERMISSION]:[1]:method_text:[}    }    private interface SetWifiCallback {        void onComplete(boolean isSuccess);    }}])', 1)]"	"https://developer.android.com"	""	"[('ACTION_MANAGE_OVERLAY_PERMISSION', 2)]"	"[('[android.systemintents.cts.TestManageOverlayPermissionIntents testManageOverlayPermissionIntentWithDataResolvesToSameIntentWithoutData CtsSystemIntentTestCases]', 1), ('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None]', 1)]"
"7.3.13  Hinge Angle Sensor"	"7.3.13"	"C-1-3"	"7.3.13/C-1-3"	"07031300.670103"	"""C-1-3] MUST return a [wakeup](https://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor%28%29)     sensor for [`getDefaultSensor(SENSOR_TYPE_HINGE_ANGLE)`](https://developer.android.com/reference/android/hardware/SensorManager#getDefaultSensor%28int%29)."""	""	""	"getDefaultSensor(SENSOR_TYPE_HINGE_ANGLE) Sensor.html SENSOR_TYPE_HINGE_ANGLE"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://developer.android.com"	""	""	""
"2.2.1  Hardware"	"7.1.4.6"	"H-1-2"	"7.1.4.6/H-1-2"	"07010406.720102"	"""[7.1.4.6/H-1-2] MUST report conformant values      for the device’s GPU counters following the      [gpu counter trace packet proto](https://android.googlesource.com/platform/external/perfetto/+/refs/heads/master/protos/perfetto/trace/gpu/gpu_counter_event.proto). *    ["""	""	""	"GPU android.googlesource.com gpu_counter_event.proto"	""	""	""	""	"[('android.gputools.cts.CtsRootlessGpuDebugHostTest', 16), ('com.android.server.cts.GraphicsStatsValidationTest', 3), ('android.appmanifest.cts.UsesNativeLibraryTestCase', 3), ('android.hardware.camera2.cts.MultiViewTest', 2), ('android.graphics.cts.CameraGpuTest', 2), ('android.graphics.cts.BitmapTest', 2), ('android.security.cts.Poc17_01', 2), ('android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest', 2), ('android.hardware.camera2.cts.CameraExtensionSessionTest', 1), ('android.SustainedPerformance.cts.SustainedPerformanceHostTest', 1), ('android.deviceconfig.cts.DeviceConfigApiPermissionTests', 1), ('android.renderscript.cts.refocus.RefocusTest', 1), ('android.graphics.cts.BasicVulkanGpuTest', 1), ('android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.graphics.cts.MediaVulkanGpuTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('com.android.compatibility.common.tradefed.presubmit.CtsConfigLoadingTest', 1), ('android.adb.cts.AdbHostTest', 1), ('android.appsecurity.cts.KeySetHostTest', 1), ('android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest', 1), ('com.android.cts.deviceowner.HardwarePropertiesManagerTest', 1), ('android.app.uiautomation.cts.UiAutomationTest', 1), ('android.graphics.gpuprofiling.cts.CtsFrameTracerDataSourceTest', 1), ('android.view.cts.PixelCopyTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest', 1), ('android.hardware.camera2.cts.RobustnessTest', 1), ('android.hardware.nativehardware.cts.HardwareBufferVrTest', 1), ('android.view.cts.ASurfaceControlTest', 1), ('android.graphics.cts.CameraVulkanGpuTest', 1), ('com.android.cts.deviceowner.VrTemperatureTest', 1), ('android.security.cts.ActivityManagerTest', 1), ('android.graphics.cts.SyncTest', 1), ('android.sensorratepermission.cts.debuggableapi31.DebuggableAPI31Test', 1), ('android.view.cts.FrameMetricsListenerTest', 1), ('android.hardware.camera2.cts.ImageReaderTest', 1), ('android.security.cts.RunningAppProcessInfoTest', 1), ('android.hardware.cts.HardwareBufferTest', 1), ('android.dumpsys.cts.GfxInfoDumpsysTest', 1)]"	"[('getDevice', 19), ('setUp', 4), ('getWidth', 3), ('getHeight', 2), ('cleanup', 2), ('trim', 2), ('tearDown', 2), ('stream', 2), ('data', 1), ('getFramePixels', 1), ('getContext', 1), ('getAssets', 1), ('flush', 1), ('close', 1), ('deleteOnExit', 1), ('run', 1), ('getMessage', 1), ('init', 1), ('getTime', 1), ('LogScanResult', 1), ('turnScreenOn', 1), ('getSimpleName', 1), ('setup', 1), ('teardown', 1), ('matches', 1), ('size', 1), ('getOverrideConfig', 1)]"	"[('CtsGpuToolsHostTestCases', 16), ('CtsGraphicsTestCases', 8), ('CtsCameraTestCases', 5), ('CtsViewTestCases', 3), ('CtsShortcutManagerTestCases', 3), ('CtsIncidentHostTestCases', 3), ('CtsSecurityBulletinHostTestCases', 2), ('CtsGpuProfilingDataTestCases', 2), ('CtsSecurityTestCases', 2), ('CtsSustainedPerformanceHostTestCases', 1), ('CtsDeviceConfigTestCases', 1), ('CtsRenderscriptTestCases', 1), ('CtsSensorTestCases', 1), ('CtsMediaTestCases', 1), ('CtsAdbHostTestCases', 1), ('CtsAppSecurityHostTestCases', 1), ('CtsUiAutomationTestCases', 1), ('CtsNativeHardwareTestCases', 1), ('CtsHardwareTestCases', 1), ('CtsDumpsysHostTestCases', 1)]"	""	""	""	""	"android.dumpsys.cts.GfxInfoDumpsysTest"	"getOverrideConfig"	"CtsDumpsysHostTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/gputools/src/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 16), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/src/com/android/server/cts/GraphicsStatsValidationTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/library/src/android/appmanifest/cts/UsesNativeLibraryTestCase.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraGpuTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_01.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraExtensionSessionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/deviceconfig/src/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/refocus/RefocusTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BasicVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/DirectReportAPI30/src/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/MediaVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/adb/src/android/adb/cts/AdbHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/KeySetHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uiautomation/src/android/app/uiautomation/cts/UiAutomationTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/PixelCopyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/nativehardware/src/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/VrTemperatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/ActivityManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/SyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/DebuggableAPI31/src/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/FrameMetricsListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/RunningAppProcessInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/cts/HardwareBufferTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/GfxInfoDumpsysTest.java', 1)]"	"[('(1,GPU,/android/hardware/camera2/cts/CameraExtensionSessionTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/MultiViewTest.java)', 1), ('(2,GPU,/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java)', 1), ('(1,GPU,/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java)', 1), ('(5,GPU,/android/graphics/cts/CameraGpuTest.java)', 1), ('(1,GPU,/android/renderscript/cts/refocus/RefocusTest.java)', 1), ('(2,GPU,/android/graphics/cts/BasicVulkanGpuTest.java)', 1), ('(1,GPU,/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java)', 1), ('(2,GPU,/android/graphics/cts/BitmapTest.java)', 1), ('(1,GPU,/android/hardware/cts/SensorDirectReportTest.java)', 1), ('(3,GPU,/android/security/cts/Poc17_01.java)', 1), ('(1,GPU,/android/graphics/cts/MediaVulkanGpuTest.java)', 1), ('(3,GPU,/android/media/cts/PresentationSyncTest.java)', 1), ('(1,GPU,/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java)', 1), ('(1,android.googlesource.com,/android/adb/cts/AdbHostTest.java)', 1), ('(1,GPU,/android/appsecurity/cts/KeySetHostTest.java)', 1), ('(24,GPU,/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java)', 1), ('(14,GPU,/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java)', 1), ('(1,GPU,/android/app/uiautomation/cts/UiAutomationTest.java)', 1), ('(2,GPU,/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java)', 1), ('(1,GPU,/android/view/cts/PixelCopyTest.java)', 1), ('(1,GPU,/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java)', 1), ('(94,GPU,/android/gputools/cts/CtsRootlessGpuDebugHostTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/RobustnessTest.java)', 1), ('(8,GPU,/com/android/server/cts/GraphicsStatsValidationTest.java)', 1), ('(2,GPU,/android/hardware/nativehardware/cts/HardwareBufferVrTest.java)', 1), ('(1,GPU,/android/view/cts/ASurfaceControlTest.java)', 1), ('(1,GPU,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(9,GPU,/com/android/cts/deviceowner/VrTemperatureTest.java)', 1), ('(1,android.googlesource.com,/android/security/cts/ActivityManagerTest.java)', 1), ('(2,GPU,/android/graphics/cts/SyncTest.java)', 1), ('(1,GPU,/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java)', 1), ('(5,GPU,/android/view/cts/FrameMetricsListenerTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(4,GPU,/android/appmanifest/cts/UsesNativeLibraryTestCase.java)', 1), ('(3,GPU,/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java)', 1), ('(1,android.googlesource.com,/android/security/cts/RunningAppProcessInfoTest.java)', 1), ('(3,GPU,/android/hardware/cts/HardwareBufferTest.java)', 1), ('(1,GPU,/android/dumpsys/cts/GfxInfoDumpsysTest.java)', 1)]"	"[('([1:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[GPU]:[1]:method_text:[epeating with multi frame capture on all supported extensions.    // Verify still frame output.   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[ify the Bitmap     * from the first TextureView is identical to the second TextureView.     */   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[    }    /*     * Verify behavior of sharing surfaces within one OutputConfiguration     */   ])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[GPU]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");    }   ])', 1), ('([1:/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java]:[GPU]:[1]:method_text:[      Exception e) {        violations.append(message).append("": "").append(e).append(""\\n"");    }}])', 1), ('([4:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[4]:method_text:[> mActivityRule =            new ActivityTestRule<>(CameraGpuCtsActivity.class, false, false);   ])', 1), ('([1:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[1]:method_text:[e.launchActivity(null);        activity.waitToFinishRendering();        activity.finish();    }}])', 1), ('([1:/android/renderscript/cts/refocus/RefocusTest.java]:[GPU]:[1]:method_text:[+                context.getResources().getResourceEntryName(resID));        return path;    }}])', 1), ('([2:/android/graphics/cts/BasicVulkanGpuTest.java]:[GPU]:[2]:method_text:[rmat;    public BasicVulkanGpuTest(String name, int format) {        mFormat = format;    }   ])', 1), ('([1:/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java]:[GPU]:[1]:method_text:[                        > SensorRatePermissionDirectReportTestHelper.CAPPED_SAMPLE_RATE_HZ);    }])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[ hwBuffer2.getLayers());        assertEquals(hwBuffer.getUsage(), hwBuffer2.getUsage());    }   ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[tory.Options();        options.inPreferredConfig = Config.HARDWARE;        return options;    }}])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[GPU]:[1]:method_text:[der.nativeOrder());        return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned    }}])', 1), ('([1:/android/security/cts/Poc17_01.java]:[GPU]:[1]:method_text:[ls.runPoc(""CVE-2016-8426"", getDevice(), 60);        }    }    /**     *  b/31799885     */   ])', 1), ('([2:/android/security/cts/Poc17_01.java]:[GPU]:[2]:method_text:[ls.runPoc(""CVE-2016-8427"", getDevice(), 60);        }    }    /**     *  b/31993456     */   ])', 1), ('([1:/android/graphics/cts/MediaVulkanGpuTest.java]:[GPU]:[1]:method_text:[map.getWidth(),                         bitmap.getHeight());        return framePixels;    }   ])', 1), ('([3:/android/media/cts/PresentationSyncTest.java]:[GPU]:[3]:method_text:[sleep(10); }                catch (InterruptedException ignored) {}            }        }    }}])', 1), ('([1:/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java]:[GPU]:[1]:method_text:[ * -> Exclude deprecated ApkInstaller.     * -> Check if host-side tests are non empty.     */   ])', 1), ('([1:/android/adb/cts/AdbHostTest.java]:[android.googlesource.com]:[1]:method_text:[c7c6d5edcbe04454eb9a40f947ac0a3045f64eb    // for the patch that enabled this on Pixel devices.   ])', 1), ('([1:/android/appsecurity/cts/KeySetHostTest.java]:[GPU]:[1]:method_text:[k that an apk with an upgrade key that has no corresponding public key fails to install.     */   ])', 1), ('([24:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[GPU]:[24]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.     */   ])', 1), ('([14:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[GPU]:[14]:method_text:[ges);            oldFanSpeeds = fanSpeeds;            oldCpuUsages = cpuUsages;        }    }}])', 1), ('([1:/android/app/uiautomation/cts/UiAutomationTest.java]:[GPU]:[1]:method_text:[entation getInstrumentation() {        return InstrumentationRegistry.getInstrumentation();    }}])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[GPU]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                FEATURE_WATCH, FEATURE_TELEVISION);    }   ])', 1), ('([1:/android/view/cts/PixelCopyTest.java]:[GPU]:[1]:method_text:[se();                    } catch (Throwable t) {}                }            }        }    }}])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java]:[GPU]:[1]:method_text:[           assertEquals(""title3"", s.getShortLabel());                    });        });    }   ])', 1), ('([30:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[30]:method_text:[es layers to our debuggable app and ensures they are     * loaded in the correct order.     */   ])', 1), (""([6:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[6]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.     */   ])"", 1), ('([1:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[1]:method_text:[not enumerate layers in base     * directory if enable_gpu_debug_layers is not enabled.     */   ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[e apps do not enumerate layers in base     * directory if gpu_debug_app does not match.     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[e apps do not enumerate layers in base     * directory if gpu_debug_layers are not set.     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[     * This test ensures we can still use properties if no layer specified via Settings     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[    /**     * This test ensures system properties are ignored if Settings load a layer     */   ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[  /**     * This test ensures a debuggable app can load layers from an external package     */   ])', 1), (""([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.     */   ])"", 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[not enumerate layers in base     * directory if enable_gpu_debug_layers is not enabled.     */   ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[S apps do not enumerate layers in base     * directory if gpu_debug_app does not match.     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[S apps do not enumerate layers in base     * directory if gpu_debug_layers are not set.     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**     * This test ensures we can still use properties if no GLES layers are specified     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**     * This test ensures system properties are ignored if Settings load a GLES layer     */   ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[/**     * This test ensures that external GLES layers can be loaded by a debuggable app     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[ppStartTime);        Assert.assertTrue(GLES_LAYER_C + "" was not loaded"", glesResult.found);    }}])', 1), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[GPU]:[2]:method_text:[processable mandatory stream combinations are     * present and advertised accordingly.     */   ])', 1), ('([1:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[1]:method_text:[eyevent KEYCODE_WAKEUP"");        getDevice().executeShellCommand(""wm dismiss-keyguard"");    }   ])', 1), ('([4:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[4]:method_text:[e[0] = """";            origRefreshRate[1] = """";        }        return origRefreshRate;    }   ])', 1), ('([3:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[3]:method_text:[tStatsEnd());                latest = proto;            }        }        return latest;    }}])', 1), ('([2:/android/hardware/nativehardware/cts/HardwareBufferVrTest.java]:[GPU]:[2]:method_text:[s(format, buffer.getFormat());            assertEquals(flags, buffer.getUsage());        }    }}])', 1), ('([1:/android/view/cts/ASurfaceControlTest.java]:[GPU]:[1]:method_text:[                        return pixelCount == 0;                    }                });    }   ])', 1), ('([1:/android/graphics/cts/CameraVulkanGpuTest.java]:[GPU]:[1]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([9:/com/android/cts/deviceowner/VrTemperatureTest.java]:[GPU]:[9]:method_text:[inThrottlingThresholds, skinShutdownThresholds,                skinVrThrottlingThresholds);    }}])', 1), ('([1:/android/security/cts/ActivityManagerTest.java]:[android.googlesource.com]:[1]:method_text:[ow this exception        }    }    // b/144285917    @AsbSecurityTest(cveBugId = 144285917)   ])', 1), ('([2:/android/graphics/cts/SyncTest.java]:[GPU]:[2]:method_text:[er    public void teardown() throws Throwable {        EGL14.eglTerminate(mEglDisplay);    }   ])', 1), ('([1:/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java]:[GPU]:[1]:method_text:[ecurityException"");        } catch (SecurityException e) {            // Expected        }    }])', 1), ('([5:/android/view/cts/FrameMetricsListenerTest.java]:[GPU]:[5]:method_text:[rawFrameMetric,                (firstDrawFrameMetric == 0) || (firstDrawFrameMetric == 1));    }}])', 1), ('([2:/android/hardware/camera2/cts/ImageReaderTest.java]:[GPU]:[2]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 1), ('([2:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[2]:method_text:[package manager is the same as     * the public.libraries*.txt files in the partitions.     */   ])', 1), ('([1:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[1]:method_text:[iredLibs, optionalLibs, availableLibs, unavailableLibs)));        runInstalledTestApp();    }   ])', 1), ('([1:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[1]:method_text:[quiredLibs, optionalLibs, availableLibs, unavailableLibs)));        runInstalledTestApp();    }}])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[2]:method_text:[at=PNG,""                + ""icon_quality=100"";    }    @AsbSecurityTest(cveBugId = 109824443)   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[1]:method_text:[name mismatch"",                () -> runWithCaller(callerContext, () -> r.run())        );    }}])', 1), ('([1:/android/security/cts/RunningAppProcessInfoTest.java]:[android.googlesource.com]:[1]:method_text:[se/+"" +                ""/aaa0fee0d7a8da347a0c47cef5249c70efee209e"", (appList.size() == 1));    }}])', 1), ('([3:/android/hardware/cts/HardwareBufferTest.java]:[GPU]:[3]:method_text:[        1, HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE | HardwareBuffer.USAGE_GPU_COLOR_OUTPUT));    }}])', 1), ('([1:/android/dumpsys/cts/GfxInfoDumpsysTest.java]:[GPU]:[1]:method_text:[  foundAtLeastOneRow = true;            }        }        assertTrue(foundAtLeastOneRow);    }}])', 1)]"	"https://android.googlesource.com"	""	"[('GPU', 60), ('android.googlesource.com', 3)]"	"[('[android.hardware.camera2.cts.CameraExtensionSessionTest testConcurrentSessions CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testTextureImageWriterReaderOperation CtsCameraTestCases]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis CtsSustainedPerformanceHostTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigPublicNamespacesWithoutReadPermission CtsDeviceConfigTestCases]', 1), ('[android.graphics.cts.CameraGpuTest testCameraImageCaptureAndRendering CtsGraphicsTestCases]', 1), ('[android.renderscript.cts.refocus.RefocusTest testNewRefocus CtsRenderscriptTestCases]', 1), ('[android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test testSamplingRateMicToggleOffOnOff None]', 1), ('[android.graphics.cts.BitmapTest testWrapHardwareBufferWithRgbBufferButNonRgbColorSpaceFails CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkCompressBadParameter CtsGraphicsTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8426 CtsSecurityBulletinHostTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8427 CtsSecurityBulletinHostTestCases]', 1), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.appsecurity.cts.KeySetHostTest testBadUpgradeMissingPubKey CtsAppSecurityHostTestCases]', 1), ('[android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest isEmpty CtsGpuProfilingDataTestCases]', 1), ('[com.android.cts.deviceowner.HardwarePropertiesManagerTest testHardwarePropertiesManager None]', 1), ('[android.app.uiautomation.cts.UiAutomationTest testCallingPublicAPIsWithDontUseAccessibilityFlag_shouldNotThrowException CtsUiAutomationTestCases]', 1), ('[android.view.cts.PixelCopyTest testBufferQueueCrop CtsViewTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest currentTimeMillis CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testInjectLayerLoadVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testReleaseLayerLoadGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testMultipleExternalApps CtsGpuToolsHostTestCases]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables CtsCameraTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest killTestApp CtsIncidentHostTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testJankyDrawFrame CtsIncidentHostTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testDaveyDrawFrame CtsIncidentHostTestCases]', 1), ('[android.hardware.nativehardware.cts.HardwareBufferVrTest testLayeredBuffersForVr CtsNativeHardwareTestCases]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_setBufferOpaque_transparent CtsViewTestCases]', 1), ('[com.android.cts.deviceowner.VrTemperatureTest testVrTemperatures None]', 1), ('[android.security.cts.ActivityManagerTest testActivityManager_injectInputEvents CtsSecurityTestCases]', 1), ('[android.sensorratepermission.cts.debuggableapi31.DebuggableAPI31Test testDirectChannel None]', 1), ('[android.view.cts.FrameMetricsListenerTest testDropCount CtsViewTestCases]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected CtsCameraTestCases]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase getTestInformation None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase testNewAppDependsOnSomePublicLibraries None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase testNewAppOptionallyDependsOnSomePublicLibraries None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.security.cts.RunningAppProcessInfoTest testRunningAppProcessInfo CtsSecurityTestCases]', 1), ('[android.hardware.cts.HardwareBufferTest testIsSupported CtsHardwareTestCases]', 1), ('[android.dumpsys.cts.GfxInfoDumpsysTest testGfxinfoFramestats CtsDumpsysHostTestCases]', 1)]"
"7.3.10  Biometric Sensors"	"7.3.10"	"C-3-4"	"7.3.10/C-3-4"	"07031000.670304"	"""C-3-4] MUST challenge the user for the recommended primary     authentication (e.g. PIN, pattern, password) once every 72 hours     or less.  """	""	""	"PIN"	""	""	""	""	"[('android.server.wm.AppConfigurationTests', 25), ('android.content.pm.cts.ChecksumsTest', 15), ('android.autofillservice.cts.dropdown.CheckoutActivityTest', 12), ('android.app.cts.ActivityManagerProcessStateTest', 12), ('android.hardware.camera2.cts.MultiViewTest', 12), ('android.content.pm.cts.PackageManagerTest', 10), ('android.media.cts.MediaPlayerTest', 10), ('android.hardware.camera2.cts.OfflineSessionTest', 9), ('android.media.cts.EncodeVirtualDisplayWithCompositionTest', 6), ('android.suspendapps.cts.DualSuspendTests', 6), ('android.media.cts.MediaCodecTest', 5), ('android.view.inputmethod.cts.InlineSuggestionInfoTest', 5), ('android.app.usage.cts.UsageReportingTest', 4), ('android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest', 4), ('android.os.cts.SeccompTest', 4), ('android.content.pm.cts.shortcutmanager.ShortcutManagerMaxCountTest', 3), ('com.android.compatibility.common.tradefed.presubmit.ApkPackageNameCheck', 2), ('com.android.cts.dexmetadata.InstallDexMetadataTest', 2), ('android.media.cts.AudioManagerTest', 2), ('test.java.com.android.bedstead.testapp.TestAppActivityReferenceTest', 2), ('android.media.cts.AudioRecordTest', 2), ('android.hardware.cts.CameraGLTest', 2), ('android.hardware.camera2.cts.ImageWriterTest', 2), ('android.media.cts.RingtoneTest', 2), ('android.server.wm.TransitionSelectionTests', 2), ('android.telecom.cts.RttOperationsTest', 2), ('android.graphics.pdf.cts.PdfRendererTransformTest', 2), ('android.theme.cts.ThemeHostTest', 2), ('android.net.wifi.cts.WifiHotspot2Test', 2), ('com.android.cts.dexmetadata.InstallDexMetadataHostTest', 2), ('android.hardware.camera2.cts.MultiResolutionReprocessCaptureTest', 2), ('android.car.cts.PreCreateUsersHostTest', 2), ('android.devicepolicy.cts.StartProfilesTest', 2), ('android.graphics.drawable.cts.AnimatedVectorDrawableParameterizedTest', 2), ('android.jobscheduler.cts.ExpeditedJobTest', 2), ('android.security.NetworkSecurityPolicyTestBase', 1), ('com.android.cts.devicepolicy.MixedProfileOwnerTest', 1), ('android.jdwpsecurity.cts.JdwpSecurityHostTest', 1), ('android.webkit.cts.WebViewZoomTest', 1), ('android.video.cts.VideoEncoderDecoderTest', 1), ('android.telephonyprovider.cts.MmsPartTest', 1), ('android.media.cts.VideoCodecTest', 1), ('android.uirendering.cts.testclasses.BitmapBlendModeTest', 1), ('android.hardware.camera2.cts.FastBasicsTest', 1), ('android.content.pm.cts.shortcut.backup.publisher1.ShortcutManagerPreBackupTest', 1), ('android.app.cts.BadProviderTest', 1), ('android.permission.cts.PermissionControllerTest', 1), ('android.webkit.cts.WebViewTest', 1), ('android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest', 1), ('android.mediaprovidertranscode.cts.TranscodeTest', 1), ('android.content.pm.cts.shortcut.backup.publisher2.ShortcutManagerPostBackupTest', 1), ('com.android.cts.devicepolicy.AccountCheckHostSideTest', 1), ('android.hardware.biometrics.cts.BiometricManagerTest', 1), ('android.media.cts.LoudnessEnhancerTest', 1), ('android.media.cts.VideoDecoderRotationTest', 1), ('android.security.cts.SecurityTestCase', 1), ('android.server.wm.StartActivityTests', 1), ('com.android.cts.profileowner.AdminActionBookkeepingTest', 1), ('android.cts.backup.othersoundssettingsapp.OtherSoundsSettingsTest', 1), ('android.os.cts.DebugTest', 1), ('android.media.cts.AudioModeListenerTest', 1), ('android.provider.cts.contacts.ContactsContract_ContactsTest', 1), ('android.net.wifi.cts.WifiNetworkSpecifierTest', 1), ('android.uirendering.cts.testclasses.ShaderTests', 1), ('android.app.cts.LaunchTest', 1), ('android.media.cts.AdaptivePlaybackTest', 1), ('android.autofillservice.cts.augmented.AugmentedLoginActivityTest', 1), ('android.media.cts.bitstreams.MediaBitstreamsTest', 1)]"	"[('setUp', 10), ('tearDown', 6), ('getTargetContext', 6), ('getDevice', 6), ('getInstrumentation', 5), ('getAutofillValue', 4), ('getPackageManager', 4), ('getContext', 3), ('getUiAutomation', 3), ('Intent', 3), ('ContentValues', 3), ('getActivity', 2), ('setup', 2), ('any', 2), ('getPackageInstaller', 2), ('getName', 2), ('ConditionVariable', 2), ('getActivityRule', 1), ('afterActivityLaunched', 1), ('getCompoundButtonAutoFillValue', 1), ('getSaveCc', 1), ('autofillSpinnerWithTextValue', 1), ('getSpinnerAutoFillValue', 1), ('getCcExpiration', 1), ('remote_executes', 1), ('activities', 1), ('start', 1), ('activity', 1), ('resetAppState', 1), ('installApp', 1), ('uninstallApp', 1), ('AbandonAllPackageSessionsRule', 1), ('onBefore', 1), ('onAfter', 1), ('getContentResolver', 1), ('cleanup', 1), ('SurfaceTextureCallback', 1), ('SurfaceTextureBurstCallback', 1), ('PreviewCallback', 1), ('Object', 1), ('beforeActivityLaunched', 1), ('Renderer', 1), ('getView', 1), ('getParameters', 1), ('Matrix', 1), ('getMainLooper', 1), ('addAndAssertProfileOwner', 1), ('getRuntime', 1), ('availableProcessors', 1), ('getNextEntry', 1), ('deleteOnExit', 1), ('getWho', 1), ('getBytes', 1), ('getLaunchApiLevel', 1), ('stopProfile_stoppingFullUser_throwsException', 1), ('secondaryUser', 1), ('userHandle', 1)]"	"[('CtsMediaTestCases', 32), ('CtsCameraTestCases', 28), ('CtsWindowManagerDeviceTestCases', 28), ('CtsContentTestCases', 25), ('CtsAppTestCases', 14), ('CtsAutoFillServiceTestCases', 13), ('CtsShortcutManagerTestCases', 7), ('CtsSuspendAppsTestCases', 6), ('CtsInputMethodTestCases', 5), ('CtsUsageStatsTestCases', 4), ('CtsWifiTestCases', 3), ('CtsDevicePolicyManagerTestCases', 2), ('CtsWebkitTestCases', 2), ('CtsUiRenderingTestCases', 2), ('CtsContactsProviderTestCases', 2), ('CtsTelecomTestCases', 2), ('CtsPdfTestCases', 2), ('CtsThemeHostTestCases', 2), ('CtsDexMetadataHostTestCases', 2), ('CtsCarHostTestCases', 2), ('CtsDevicePolicyTestCases', 2), ('CtsGraphicsTestCases', 2), ('CtsJobSchedulerTestCases', 2), ('CtsJdwpSecurityHostTestCases', 1), ('CtsVideoTestCases', 1), ('CtsTelephonyProviderTestCases', 1), ('CtsPermissionTestCases', 1), ('CtsHardwareTestCases', 1), ('CtsSecurityBulletinHostTestCases', 1), ('CtsMediaBitstreamsTestCases', 1)]"	""	""	""	""	"android.media.cts.bitstreams.MediaBitstreamsTest"	"getInstrumentation"	"CtsMediaBitstreamsTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AppConfigurationTests.java', 25), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/ChecksumsTest.java', 15), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/dropdown/CheckoutActivityTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/OfflineSessionTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/DualSuspendTests.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaCodecTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InlineSuggestionInfoTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageReportingTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/SeccompTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerMaxCountTest.java', 3), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/dexmetadata/app/src/com/android/cts/dexmetadata/InstallDexMetadataTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/testapp/src/test/java/com/android/bedstead/testapp/TestAppActivityReferenceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioRecordTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/cts/CameraGLTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageWriterTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/RingtoneTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/TransitionSelectionTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/RttOperationsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/pdf/src/android/graphics/pdf/cts/PdfRendererTransformTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/theme/src/android/theme/cts/ThemeHostTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/dexmetadata/host/src/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiResolutionReprocessCaptureTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/car/src/android/car/cts/PreCreateUsersHostTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/StartProfilesTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/AnimatedVectorDrawableParameterizedTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/JobScheduler/src/android/jobscheduler/cts/ExpeditedJobTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/netsecpolicy/src/android/security/NetworkSecurityPolicyTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/jdwpsecurity/src/android/jdwpsecurity/cts/JdwpSecurityHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewZoomTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/video/src/android/video/cts/VideoEncoderDecoderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephonyprovider/src/android/telephonyprovider/cts/MmsPartTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/VideoCodecTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering27/src/android/uirendering/cts/testclasses/BitmapBlendModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/FastBasicsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/publisher1/src/android/content/pm/cts/shortcut/backup/publisher1/ShortcutManagerPreBackupTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/BadProviderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/PermissionControllerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/MediaProviderTranscode/src/android/mediaprovidertranscode/cts/TranscodeTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/publisher2/src/android/content/pm/cts/shortcut/backup/publisher2/ShortcutManagerPostBackupTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AccountCheckHostSideTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/biometrics/cts/BiometricManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/LoudnessEnhancerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/VideoDecoderRotationTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/SecurityTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/StartActivityTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/AdminActionBookkeepingTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/OtherSoundsSettingsApp/src/android/cts/backup/othersoundssettingsapp/OtherSoundsSettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/DebugTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioModeListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_ContactsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/ShaderTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/LaunchTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AdaptivePlaybackTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/media/bitstreams/src/android/media/cts/bitstreams/MediaBitstreamsTest.java', 1)]"	"[('(2,PIN,/android/security/NetworkSecurityPolicyTestBase.java)', 1), ('(4,PIN,/android/app/usage/cts/UsageReportingTest.java)', 1), ('(36,PIN,/android/autofillservice/cts/dropdown/CheckoutActivityTest.java)', 1), ('(3,PIN,/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java)', 1), ('(1,PIN,/com/android/cts/devicepolicy/MixedProfileOwnerTest.java)', 1), ('(9,PIN,/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java)', 1), ('(43,PIN,/android/content/pm/cts/PackageManagerTest.java)', 1), ('(2,PIN,/android/jdwpsecurity/cts/JdwpSecurityHostTest.java)', 1), ('(1,PIN,/android/webkit/cts/WebViewZoomTest.java)', 1), ('(1,PIN,/android/video/cts/VideoEncoderDecoderTest.java)', 1), ('(1,PIN,/android/telephonyprovider/cts/MmsPartTest.java)', 1), ('(10,PIN,/android/media/cts/MediaCodecTest.java)', 1), ('(6,PIN,/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java)', 1), ('(7,PIN,/android/media/cts/VideoCodecTest.java)', 1), ('(2,PIN,/com/android/cts/dexmetadata/InstallDexMetadataTest.java)', 1), ('(1,PIN,/android/uirendering/cts/testclasses/BitmapBlendModeTest.java)', 1), ('(1,PIN,/android/hardware/camera2/cts/FastBasicsTest.java)', 1), ('(3,PIN,/android/media/cts/AudioManagerTest.java)', 1), ('(2,PIN,/android/content/pm/cts/shortcut/backup/publisher1/ShortcutManagerPreBackupTest.java)', 1), ('(6,PIN,/test/java/com/android/bedstead/testapp/TestAppActivityReferenceTest.java)', 1), ('(3,PIN,/android/app/cts/BadProviderTest.java)', 1), ('(3,PIN,/android/permission/cts/PermissionControllerTest.java)', 1), ('(18,PIN,/android/content/pm/cts/ChecksumsTest.java)', 1), ('(4,PIN,/android/media/cts/AudioRecordTest.java)', 1), ('(48,PIN,/android/app/cts/ActivityManagerProcessStateTest.java)', 1), ('(1,PIN,/android/webkit/cts/WebViewTest.java)', 1), ('(20,PIN,/android/hardware/camera2/cts/OfflineSessionTest.java)', 1), ('(2,PIN,/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java)', 1), ('(4,PIN,/android/hardware/cts/CameraGLTest.java)', 1), ('(2,PIN,/android/hardware/camera2/cts/ImageWriterTest.java)', 1), ('(6,PIN,/android/view/inputmethod/cts/InlineSuggestionInfoTest.java)', 1), ('(1,PIN,/android/mediaprovidertranscode/cts/TranscodeTest.java)', 1), ('(32,PIN,/android/server/wm/AppConfigurationTests.java)', 1), ('(4,PIN,/android/media/cts/RingtoneTest.java)', 1), ('(20,PIN,/android/hardware/camera2/cts/MultiViewTest.java)', 1), ('(2,PIN,/android/server/wm/TransitionSelectionTests.java)', 1), ('(1,PIN,/android/content/pm/cts/shortcut/backup/publisher2/ShortcutManagerPostBackupTest.java)', 1), ('(22,PIN,/android/media/cts/MediaPlayerTest.java)', 1), ('(2,PIN,/android/telecom/cts/RttOperationsTest.java)', 1), ('(1,PIN,/com/android/cts/devicepolicy/AccountCheckHostSideTest.java)', 1), ('(3,PIN,/android/hardware/biometrics/cts/BiometricManagerTest.java)', 1), ('(1,PIN,/android/media/cts/LoudnessEnhancerTest.java)', 1), ('(5,PIN,/android/graphics/pdf/cts/PdfRendererTransformTest.java)', 1), ('(27,PIN,/android/suspendapps/cts/DualSuspendTests.java)', 1), ('(1,PIN,/android/media/cts/VideoDecoderRotationTest.java)', 1), ('(1,PIN,/android/security/cts/SecurityTestCase.java)', 1), ('(1,PIN,/android/server/wm/StartActivityTests.java)', 1), ('(9,PIN,/android/theme/cts/ThemeHostTest.java)', 1), ('(2,PIN,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(1,PIN,/com/android/cts/profileowner/AdminActionBookkeepingTest.java)', 1), ('(1,PIN,/android/cts/backup/othersoundssettingsapp/OtherSoundsSettingsTest.java)', 1), ('(1,PIN,/android/os/cts/DebugTest.java)', 1), ('(6,PIN,/android/content/pm/cts/shortcutmanager/ShortcutManagerMaxCountTest.java)', 1), ('(1,PIN,/android/media/cts/AudioModeListenerTest.java)', 1), ('(3,PIN,/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java)', 1), ('(3,PIN,/android/hardware/camera2/cts/MultiResolutionReprocessCaptureTest.java)', 1), ('(1,PIN,/android/provider/cts/contacts/ContactsContract_ContactsTest.java)', 1), ('(4,PIN,/android/car/cts/PreCreateUsersHostTest.java)', 1), ('(2,PIN,/android/devicepolicy/cts/StartProfilesTest.java)', 1), ('(1,PIN,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(1,PIN,/android/uirendering/cts/testclasses/ShaderTests.java)', 1), ('(4,PIN,/android/os/cts/SeccompTest.java)', 1), ('(1,PIN,/android/app/cts/LaunchTest.java)', 1), ('(6,PIN,/android/media/cts/AdaptivePlaybackTest.java)', 1), ('(3,PIN,/android/graphics/drawable/cts/AnimatedVectorDrawableParameterizedTest.java)', 1), ('(9,PIN,/android/jobscheduler/cts/ExpeditedJobTest.java)', 1), ('(1,PIN,/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java)', 1), ('(1,PIN,/android/media/cts/bitstreams/MediaBitstreamsTest.java)', 1)]"	"[('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[PIN]:[1]:method_text:[       if (prior != null) throw prior; // Rethrow last exception.            }        }    }   ])', 4), ('([3:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[3]:method_text:[tDataset(""ACME CC"");        // Check the results.        mActivity.assertAutoFilled();    }   ])', 2), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[PIN]:[1]:method_text:[     assertTrue(request.isValid());            assertTrue(request.accept());        });    }   ])', 2), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[PIN]:[1]:method_text:[].getInstallerPackageName());        assertNull(checksums[2].getInstallerCertificate());    }   ])', 2), ('([1:/android/app/cts/ActivityManagerProcessStateTest.java]:[PIN]:[1]:method_text:[ound     * service, app should go back to cached state.     *     * @throws Exception     */   ])', 2), ('([1:/android/view/inputmethod/cts/InlineSuggestionInfoTest.java]:[PIN]:[1]:method_text:[""},                        InlineSuggestionInfo.TYPE_SUGGESTION, /* isPinned */ false));    }   ])', 2), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[h has     * rotation sensing optimization. So this is listed in cts-known-failures.xml.     */   ])', 2), ('([1:/android/server/wm/TransitionSelectionTests.java]:[PIN]:[1]:method_text:[ate the case where the bottom activity is resumed    // before AM receives its activitiyStopped   ])', 2), ('([3:/android/media/cts/MediaPlayerTest.java]:[PIN]:[3]:method_text:[.sleep(SLEEP_TIME);            }        } finally {            mp.release();        }    }   ])', 2), ('([2:/android/security/NetworkSecurityPolicyTestBase.java]:[PIN]:[2]:method_text:[assertEquals(expectedValue, appInfo.flags & ApplicationInfo.FLAG_USES_CLEARTEXT_TRAFFIC);    }   ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[PIN]:[1]:method_text:[sertAppOrTokenUsed(mFullToken0, false);        assertAppOrTokenUsed(mFullToken1, false);    }   ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[PIN]:[1]:method_text:[er.reportUsageStop(activity1, TOKEN_0);        assertAppOrTokenUsed(mFullToken0, false);    }   ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[PIN]:[1]:method_text:[      Thread.sleep(1000);            assertAppOrTokenUsed(mFullToken0, false);        }    }   ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[PIN]:[1]:method_text:[    break;                }            }            return found == expected;        });    }}])', 1), ('([2:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[2]:method_text:[rActivityLaunched() {                mActivity = getActivity();            }        };    }   ])', 1), ('([3:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[3]:method_text:[ing onProvideAutofillStructure(),    // but that would require creating a custom ViewStructure.   ])', 1), ('([2:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[2]:method_text:[nored when the selected spinner element is not     * available in the autofill options.     */   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[1]:method_text:[ // ============================================================================================   ])', 1), ('([11:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[11]:method_text:[        assertThat(spinner.getSelectedItemPosition()).isEqualTo(expectedValue);        }    }   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[1]:method_text:[inner() throws Exception {        autofillListValue(AutofillValue.forList(0), 0, false);    }   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[1]:method_text:[pinner() throws Exception {        autofillListValue(AutofillValue.forList(1), 1, true);    }   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[1]:method_text:[nner() throws Exception {        autofillListValue(AutofillValue.forList(-1), 0, false);    }   ])', 1), ('([1:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[1]:method_text:[alue() throws Exception {        autofillListValue(AutofillValue.forText(""""), 0, false);    }   ])', 1), ('([7:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[PIN]:[7]:method_text:[ // ============================================================================================   ])', 1), ('([1:/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java]:[PIN]:[1]:method_text:[ with same package names may be installed. Otherwise it may results in     * conflicts.     */   ])', 1), ('([2:/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java]:[PIN]:[2]:method_text:[);                        }                    }                }            }        }    }}])', 1), ('([1:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[PIN]:[1]:method_text:[   assumeTrue(""Skipping test: profile owner is not on system user"", mUserId == USER_SYSTEM);    }}])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[PIN]:[1]:method_text:[NFIG_ACTIVITY_NAME =            ""android.content.pm.cts.shortcutmanager.main_shortcut_config"";   ])', 1), ('([6:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[PIN]:[6]:method_text:[getClassName())) {                return info;            }        }        return null;    }}])', 1), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[1]:method_text:[lPackage(EMPTY_APP_MAX_PACKAGE_NAME);        uninstallPackage(HELLO_WORLD_PACKAGE_NAME);    }   ])', 1), ('([2:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[2]:method_text:[d = true;                break;            }        }        assertTrue(isContained);    }   ])', 1), ('([13:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[13]:method_text:[e PackageManager#addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName)     */   ])', 1), ('([2:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[2]:method_text:[, 0);        assertNotNull(mPackageManager.getDrawable(PACKAGE_NAME, iconRes, appInfo));    }   ])', 1), ('([3:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[3]:method_text:[r.getResourcesForApplication(PACKAGE_NAME)                .getResourceName(resourceId));    }   ])', 1), ('([3:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[3]:method_text:[eManager.getResourcesForApplication(                appInfo, c2).getString(resourceId));    }   ])', 1), ('([9:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[9]:method_text:[als(PACKAGE_NAME, receiver.packageName);    }    // Tests that other packages can be queried.   ])', 1), ('([7:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[7]:method_text:[ame);        assertFalse(TextUtils.isEmpty(groupInfo.loadDescription(mPackageManager)));    }   ])', 1), ('([2:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[2]:method_text:[ fail(""Exception expected"");        } catch (NameNotFoundException expected) {        }    }   ])', 1), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[PIN]:[1]:method_text:[     + "" should be found via getPackageInfo after re-enabling."");            }        }    }   ])', 1), ('([2:/android/jdwpsecurity/cts/JdwpSecurityHostTest.java]:[PIN]:[2]:method_text:[rmat(""mkdir %s"", remoteFilePath));        return getDevice().doesFileExist(remoteFilePath);    }}])', 1), ('([1:/android/webkit/cts/WebViewZoomTest.java]:[PIN]:[1]:method_text:[rver.getAssetUrl(TestHtmlConstants.HELLO_WORLD_URL));        pollingCheckForCanZoomIn();    }   ])', 1), ('([1:/android/video/cts/VideoEncoderDecoderTest.java]:[PIN]:[1]:method_text:[. Add further    // tests and change the count if there can be more encoders.    // AVC tests   ])', 1), ('([1:/android/telephonyprovider/cts/MmsPartTest.java]:[PIN]:[1]:method_text:[(1);        assertThatMmsPartInsertSucceeded(insertPartUri, SRC_NAME, MMS_BODY_UPDATE);    }   ])', 1), (""([1:/android/media/cts/MediaCodecTest.java]:[PIN]:[1]:method_text:[    /**     * Tests:     * <br> stopping with buffers in flight doesn't crash or hang     */   ])"", 1), ('([1:/android/media/cts/MediaCodecTest.java]:[PIN]:[1]:method_text:[ (inputSurface != null) {                inputSurface.release();            }        }    }   ])', 1), ('([4:/android/media/cts/MediaCodecTest.java]:[PIN]:[4]:method_text:[ts:     * <br> dequeueInputBuffer() fails when encoder configured with an input Surface     */   ])', 1), ('([2:/android/media/cts/MediaCodecTest.java]:[PIN]:[2]:method_text:[  * Tests creating an encoder and decoder for {@link #MIME_TYPE_AUDIO} at the same time.     */   ])', 1), ('([2:/android/media/cts/MediaCodecTest.java]:[PIN]:[2]:method_text:[(TAG, ""exception stopping/releasing codec"", e);                }            }        }    }   ])', 1), ('([1:/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java]:[PIN]:[1]:method_text:[ ""SKIPPING testRendering800x480Locally(): codec not supported"");        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java]:[PIN]:[1]:method_text:[MIME_TYPE, maxRes.getWidth(), maxRes.getHeight(), false, false);        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java]:[PIN]:[1]:method_text:[""SKIPPING testRendering800x480Remotely(): codec not supported"");        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java]:[PIN]:[1]:method_text:[ MIME_TYPE, maxRes.getWidth(), maxRes.getHeight(), true, false);        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java]:[PIN]:[1]:method_text:[stRendering800x480RemotelyWith3Windows(): codec not supported"");        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/EncodeVirtualDisplayWithCompositionTest.java]:[PIN]:[1]:method_text:[i(TAG, ""SKIPPING testRendering800x480LocallyWith3Windows(): codec not supported"");        }    }}])', 1), ('([7:/android/media/cts/VideoCodecTest.java]:[PIN]:[7]:method_text:[                        "" for bitrate "" + TEST_BITRATES_SET[i]);            }        }    }   ])', 1), ('([1:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[PIN]:[1]:method_text:[  }    /**     * Verify that we installed the .dm files for base (no split install).     */   ])', 1), ('([1:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[PIN]:[1]:method_text:[     result.put(codePath, dexMetadataPath);            }        }        return result;    }}])', 1), ('([1:/android/uirendering/cts/testclasses/BitmapBlendModeTest.java]:[PIN]:[1]:method_text:[ent, true)                .runWithVerifier(new SamplePointVerifier(SAMPLE_POINTS, colors));    }}])', 1), ('([1:/android/hardware/camera2/cts/FastBasicsTest.java]:[PIN]:[1]:method_text:[ true;                mPictureSignal.notifyAll();            }        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[PIN]:[1]:method_text:[        if (!isMusicPlayingBeforeTest) {            assertMusicActive(false);        }    }   ])', 1), ('([2:/android/media/cts/AudioManagerTest.java]:[PIN]:[2]:method_text:[:"" + microphone.getDirectionality());            Log.i(TAG, ""--------------"");        }    }   ])', 1), ('([2:/android/content/pm/cts/shortcut/backup/publisher1/ShortcutManagerPreBackupTest.java]:[PIN]:[2]:method_text:[nifestShortcuts())                .haveIds(""ms1"", ""ms2"")                .areAllNotPinned();   }}])', 1), ('([3:/test/java/com/android/bedstead/testapp/TestAppActivityReferenceTest.java]:[PIN]:[3]:method_text:[undActivity()).isEqualTo(                    activity.activity().component());        }    }   ])', 1), ('([3:/test/java/com/android/bedstead/testapp/TestAppActivityReferenceTest.java]:[PIN]:[3]:method_text:[y().start();            assertThat(activity.activity().isFinishing()).isFalse();        }    }}])', 1), ('([3:/android/app/cts/BadProviderTest.java]:[PIN]:[3]:method_text:[               uidWatcher.finish();            }            worker.quitSafely();        }    }}])', 1), ('([3:/android/permission/cts/PermissionControllerTest.java]:[PIN]:[3]:method_text:[ions as permissionInfos        assertThat(numRuntimeGranted).isAtLeast(numInfosGranted);    }   ])', 1), ('([4:/android/content/pm/cts/ChecksumsTest.java]:[PIN]:[4]:method_text:[ageSilently(FIXED_PACKAGE_NAME);        assertFalse(isAppInstalled(FIXED_PACKAGE_NAME));    }   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[PIN]:[1]:method_text:[hdpi"");        assertEquals(checksums[5].getType(), TYPE_PARTIAL_MERKLE_ROOT_1M_SHA256);    }   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[PIN]:[1]:method_text:[), TEST_FIXED_APK_V2_SHA256);        assertNull(checksums[0].getInstallerCertificate());    }   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[PIN]:[1]:method_text:[getResult();        assertNotNull(checksums);        assertEquals(checksums.length, 0);    }   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[PIN]:[1]:method_text:[391cdfb8a18c6710f9f27916a0"");        assertNull(checksums[0].getInstallerCertificate());    }   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[PIN]:[1]:method_text:[ does not cover the whole file.        assertEquals(checksums.length, 0);    }    @LargeTest   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[PIN]:[1]:method_text:[    + ""5f2888afcb71524196dda0d6dd16a6a3292bb75b431b8ff74fb60d796e882f80"");    }    @LargeTest   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[PIN]:[1]:method_text:[                   + ""e2c8b6baa16ef54014ad6c5b90c37b26b0f5c8aeb01b63a1db2eca133091c8d1"");    }   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[PIN]:[1]:method_text:[ngth, 1);        assertEquals(checksums[0].getType(), TYPE_WHOLE_MERKLE_ROOT_4K_SHA256);    }   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[PIN]:[1]:method_text:[      ""90553b8d221ab1b900b242a93e4cc659ace3a2ff1d5c62e502488b385854e66a"");    }    @LargeTest   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[PIN]:[1]:method_text:[                   + ""5f2888afcb71524196dda0d6dd16a6a3292bb75b431b8ff74fb60d796e882f80"");    }   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[PIN]:[1]:method_text:[].getInstallerPackageName());        assertNull(checksums[0].getInstallerCertificate());    }   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[PIN]:[1]:method_text:[     checkFailure(result, PackageInstaller.STATUS_FAILURE, expectedStatusMessage);        }    }}])', 1), ('([2:/android/media/cts/AudioRecordTest.java]:[PIN]:[2]:method_text:[tDirectionality());        Log.i(TAG, ""******"");    }    @CddTest(requirement=""5.4.1/C-1-4"")   ])', 1), ('([2:/android/media/cts/AudioRecordTest.java]:[PIN]:[2]:method_text:[nstrumentation().getTargetContext();    }    /*     * Microphone Direction API tests     */   ])', 1), ('([4:/android/app/cts/ActivityManagerProcessStateTest.java]:[PIN]:[4]:method_text:[ * Test basic state changes as processes go up and down due to services running in them.     */   ])', 1), ('([4:/android/app/cts/ActivityManagerProcessStateTest.java]:[PIN]:[4]:method_text:[vents idle services from running but allows     * whitelisted apps to bypass the check.     */   ])', 1), ('([5:/android/app/cts/ActivityManagerProcessStateTest.java]:[PIN]:[5]:method_text:[nd: first     * allowing a service to be started, then stopped by the system when idle.     */   ])', 1), ('([4:/android/app/cts/ActivityManagerProcessStateTest.java]:[PIN]:[4]:method_text:[t allow services to be started from broadcasts except when in     * the correct states.     */   ])', 1), ('([1:/android/app/cts/ActivityManagerProcessStateTest.java]:[PIN]:[1]:method_text:[   /**     * Test that the foreground service app op does prevent the foreground state.     */   ])', 1), ('([5:/android/app/cts/ActivityManagerProcessStateTest.java]:[PIN]:[5]:method_text:[ /**     * Test that switching between two ""can\'t save state"" apps is handled properly.     */   ])', 1), ('([1:/android/app/cts/ActivityManagerProcessStateTest.java]:[PIN]:[1]:method_text:[ound service,     * app should go back to cached state.     *     * @throws Exception     */   ])', 1), ('([16:/android/app/cts/ActivityManagerProcessStateTest.java]:[PIN]:[16]:method_text:[g.     * Bound app should be TOP w/flag and BTOP without flag.     * @throws Exception     */   ])', 1), ('([4:/android/app/cts/ActivityManagerProcessStateTest.java]:[PIN]:[4]:method_text:[tivity(STUB_PACKAGE_NAME, activityClass, null);        return monitor.waitForActivity();    }   ])', 1), ('([2:/android/app/cts/ActivityManagerProcessStateTest.java]:[PIN]:[2]:method_text:[rtActivitySync(intent);        mInstrumentation.waitForIdleSync();        return activity;    }}])', 1), ('([1:/android/webkit/cts/WebViewTest.java]:[PIN]:[1]:method_text:[matchingHeaders[0];        assertEquals(requester, header.getValue());    }    @UiThreadTest   ])', 1), ('([2:/android/hardware/camera2/cts/OfflineSessionTest.java]:[PIN]:[2]:method_text:[ied about the     * remaining offline requests via the registered offline callback.</p>     */   ])', 1), ('([2:/android/hardware/camera2/cts/OfflineSessionTest.java]:[PIN]:[2]:method_text:[cks behave as expected     * in case the camera supports offline depth jpeg output.</p>     */   ])', 1), ('([3:/android/hardware/camera2/cts/OfflineSessionTest.java]:[PIN]:[3]:method_text:[callbacks behave as expected     * in case the camera supports offline HEIC output.</p>     */   ])', 1), ('([3:/android/hardware/camera2/cts/OfflineSessionTest.java]:[PIN]:[3]:method_text:[e     * sensor during offline processing does not have any unexpected side effects.</p>     */   ])', 1), ('([2:/android/hardware/camera2/cts/OfflineSessionTest.java]:[PIN]:[2]:method_text:[ssion and receive     * all corresponding callbacks according to the documentation.</p>     */   ])', 1), ('([2:/android/hardware/camera2/cts/OfflineSessionTest.java]:[PIN]:[2]:method_text:[nitialize a new regular capture session     * in parallel with the offline session.</p>     */   ])', 1), ('([2:/android/hardware/camera2/cts/OfflineSessionTest.java]:[PIN]:[2]:method_text:[eive the expected sequence abort callbacks when switching     * to offline session.</p>     */   ])', 1), ('([2:/android/hardware/camera2/cts/OfflineSessionTest.java]:[PIN]:[2]:method_text:[re correctly advertised and switching to offline     * mode is failing as expected.</p>     */   ])', 1), ('([2:/android/hardware/camera2/cts/OfflineSessionTest.java]:[PIN]:[2]:method_text:[))                fail(""Remote offline session test activity is still running"");        }    }}])', 1), (""([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[PIN]:[2]:method_text:[     * no contacts if there are no starred or frequent contacts in the user's contacts.     */   ])"", 1), ('([3:/android/hardware/cts/CameraGLTest.java]:[PIN]:[3]:method_text:[.setPreviewTexture in conjunction with the standard Camera preview callback */    @UiThreadTest   ])', 1), ('([1:/android/hardware/cts/CameraGLTest.java]:[PIN]:[1]:method_text:["";        // Magic key        private static final int GL_TEXTURE_EXTERNAL_OES = 0x8D65;    }}])', 1), ('([1:/android/hardware/camera2/cts/ImageWriterTest.java]:[PIN]:[1]:method_text:[ut use the alternative     * factory method of ImageReader and ImageWriter.     * </p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/ImageWriterTest.java]:[PIN]:[1]:method_text:[, true);            } finally {                closeDevice(id);            }        }    }   ])', 1), ('([1:/android/view/inputmethod/cts/InlineSuggestionInfoTest.java]:[PIN]:[1]:method_text:[OFILL,                        new String[]{""""}, /* type */ null, /* isPinned */ false));    }   ])', 1), ('([2:/android/view/inputmethod/cts/InlineSuggestionInfoTest.java]:[PIN]:[2]:method_text:[()).isEqualTo(InlineSuggestionInfo.TYPE_SUGGESTION);        assertTrue(info.isPinned());    }   ])', 1), ('([1:/android/view/inputmethod/cts/InlineSuggestionInfoTest.java]:[PIN]:[1]:method_text:[R.createFromParcel(p);        p.recycle();        assertThat(targetInfo).isEqualTo(info);    }}])', 1), (""([1:/android/mediaprovidertranscode/cts/TranscodeTest.java]:[PIN]:[1]:method_text:[ng wasn't favorable because of any caching     * after open().     * @throws Exception     */   ])"", 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[nResizedFromFullscreen()} but resizing     * from docked state to fullscreen (reverse).     */   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[;    }    /**     * Tests whether the Display sizes change when rotating the device.     */   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[datesWhenRotatingWhileFullscreen()} but when the Activity     * is in the docked stack.     */   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[tatingWhileDocked()} but when the Activity     * is launched to side from docked stack.     */   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[ Activity will be     * relaunched twice and it should have same config as initial one.     */   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[ivity with the DialogWhenLarge theme can transform properly when in split     * screen.     */   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[ Test that device handles consequent requested orientations and displays the activities.     */   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[should be in portrait"",                ORIENTATION_PORTRAIT, reportedSizes.orientation);    }   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[uested orientations and will not report a config     * change to an invisible activity.     */   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[y visible activity"",                initialOrientation, finalReportedSizes.orientation);    }   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[),                new Point(globalSizeInfo.metricsWidth, globalSizeInfo.metricsHeight));    }   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[**     * Test that device handles moving between two tasks with different orientations.     */   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[evice is rotated.     * Also verify that occluded activity will not get config changes.     */   ])', 1), ('([2:/android/server/wm/AppConfigurationTests.java]:[PIN]:[2]:method_text:[text derived from an application context     * will not change when the device rotates.     */   ])', 1), ('([2:/android/server/wm/AppConfigurationTests.java]:[PIN]:[2]:method_text:[context derived from an activity context     * will not change when the device rotates.     */   ])', 1), ('([2:/android/server/wm/AppConfigurationTests.java]:[PIN]:[2]:method_text:[     * activity.     * Also verify that occluded activity will not get config changes.     */   ])', 1), ('([3:/android/server/wm/AppConfigurationTests.java]:[PIN]:[3]:method_text:[**     * Test that device handles moving between two tasks with different orientations.     */   ])', 1), (""([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[Test that device doesn't change device orientation by app request while in multi-window.     */   ])"", 1), (""([2:/android/server/wm/AppConfigurationTests.java]:[PIN]:[2]:method_text:[Test that device doesn't change device orientation by app request while in multi-window.     */   ])"", 1), ('([2:/android/server/wm/AppConfigurationTests.java]:[PIN]:[2]:method_text:[  /**     * Test launching an activity which requests specific UI mode during creation.     */   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[ dockedActivitySizes);        assertSizesAreSame(dockedActivitySizes, applicationSizes);    }   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[Sizes);        assertSizesAreSane(fullscreenActivitySizes, secondarySplitActivitySizes);    }   ])', 1), ('([1:/android/server/wm/AppConfigurationTests.java]:[PIN]:[1]:method_text:[tivitySession activitySession) {        return activitySession.getAppConfigInfo().sizeInfo;    }}])', 1), ('([1:/android/media/cts/RingtoneTest.java]:[PIN]:[1]:method_text:[gtone.isPlaying());        mRingtone.stop();        assertFalse(mRingtone.isPlaying());    }   ])', 1), ('([3:/android/media/cts/RingtoneTest.java]:[PIN]:[3]:method_text:[Ringtone.getVolume());        mRingtone.stop();        assertFalse(mRingtone.isPlaying());    }}])', 1), ('([2:/android/hardware/camera2/cts/MultiViewTest.java]:[PIN]:[2]:method_text:[]);            }        }    }    /*     * Verify dynamic shared surface behavior.     */   ])', 1), ('([2:/android/hardware/camera2/cts/MultiViewTest.java]:[PIN]:[2]:method_text:[    }    /*     * Verify dynamic shared surface behavior using multiple ImageReaders.     */   ])', 1), ('([2:/android/hardware/camera2/cts/MultiViewTest.java]:[PIN]:[2]:method_text:[Id);    }    /*     * Verify dynamic shared surface behavior using YUV ImageReaders.     */   ])', 1), ('([3:/android/hardware/camera2/cts/MultiViewTest.java]:[PIN]:[3]:method_text:[eaders[i].close();        }    }    /*     * Test the dynamic shared surface limit.     */   ])', 1), ('([2:/android/hardware/camera2/cts/MultiViewTest.java]:[PIN]:[2]:method_text:[stopPreview(cameraId);    }    /*     * Test dynamic shared surface switch behavior.     */   ])', 1), ('([2:/android/hardware/camera2/cts/MultiViewTest.java]:[PIN]:[2]:method_text:[ify the Bitmap     * from the first TextureView is identical to the second TextureView.     */   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[PIN]:[1]:method_text:[    }    /*     * Verify behavior of sharing surfaces within one OutputConfiguration     */   ])', 1), ('([2:/android/hardware/camera2/cts/MultiViewTest.java]:[PIN]:[2]:method_text:[ fail(""wait for image available timed out after "" + timeout + ""ms"");            }        }    }}])', 1), ('([1:/android/content/pm/cts/shortcut/backup/publisher2/ShortcutManagerPostBackupTest.java]:[PIN]:[1]:method_text:[anifestShortcuts())                .haveIds(""ms1"", ""ms2"")                .areAllEnabled();    }}])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[PIN]:[1]:method_text:[e(""media server died"", mp2.isPlaying());            mp.reset();        }    }    @Presubmit   ])', 1), ('([3:/android/media/cts/MediaPlayerTest.java]:[PIN]:[3]:method_text:[           }        } finally {            mps.forEach(MediaPlayer::release);        }    }   ])', 1), ('([3:/android/media/cts/MediaPlayerTest.java]:[PIN]:[3]:method_text:[CompletionCalled.getNumSignal());        } finally {            mp.release();        }    }   ])', 1), ('([3:/android/media/cts/MediaPlayerTest.java]:[PIN]:[3]:method_text:[        void release() {            mVis.release();            mVc.release();        }    }   ])', 1), ('([3:/android/media/cts/MediaPlayerTest.java]:[PIN]:[3]:method_text:[ng in time for mode "" + seekMode,                timeRemainedMs > 0);        return cp;    }   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[PIN]:[1]:method_text:[if (mSelectedSubtitleIndex == index) {            mSelectedSubtitleIndex = -1;        }    }   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[PIN]:[1]:method_text:[(""wrong number of repetitions"", 1, mOnCompletionCalled.getNumSignal());        return 1;    }   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[PIN]:[1]:method_text:[.getCurrentPosition() > duration - 1000);        mMediaPlayer.reset();        return 1;    }   ])', 1), ('([1:/android/telecom/cts/RttOperationsTest.java]:[PIN]:[1]:method_text:[      TestUtils.waitOnAllHandlers(getInstrumentation());        verifyRttDisabled(call);    }   ])', 1), (""([1:/android/telecom/cts/RttOperationsTest.java]:[PIN]:[1]:method_text:[  // If the setting hasn't been set yet, assume it's off            return false;        }    }}])"", 1), ('([1:/com/android/cts/devicepolicy/AccountCheckHostSideTest.java]:[PIN]:[1]:method_text:[clean up after a failure: "" + e.getMessage());            }            throw e;        }    }}])', 1), ('([3:/android/hardware/biometrics/cts/BiometricManagerTest.java]:[PIN]:[3]:method_text:[.getStrings(BIOMETRIC_WEAK | DEVICE_CREDENTIAL)                        .getSettingName()));    }}])', 1), ('([1:/android/media/cts/LoudnessEnhancerTest.java]:[PIN]:[1]:method_text:[r() {        if (mLE != null) {            mLE.release();            mLE = null;        }    }])', 1), ('([4:/android/graphics/pdf/cts/PdfRendererTransformTest.java]:[PIN]:[4]:method_text:[o the ""size"" of each individual parameterized run,    // and not the ""full"" run.    @SmallTest   ])', 1), ('([1:/android/graphics/pdf/cts/PdfRendererTransformTest.java]:[PIN]:[1]:method_text:[Width, mHeight, mDocRes, mClipping, mTransformation, mRenderMode,                mContext);    }}])', 1), ('([3:/android/suspendapps/cts/DualSuspendTests.java]:[PIN]:[3]:method_text:[dle(Intent.EXTRA_PACKAGE_NAME, TEST_APP_PACKAGE_NAME),                mReceiverHandler);    }   ])', 1), ('([6:/android/suspendapps/cts/DualSuspendTests.java]:[PIN]:[6]:method_text:[PACKAGE_SUSPENDED + "" not reported"",                mTestAppInterface.awaitBroadcast());    }   ])', 1), ('([5:/android/suspendapps/cts/DualSuspendTests.java]:[PIN]:[5]:method_text:[not reported after both unsuspends"",                mTestAppInterface.awaitBroadcast());    }   ])', 1), ('([3:/android/suspendapps/cts/DualSuspendTests.java]:[PIN]:[3]:method_text:[);        assertTrue(""Test app not suspended"", mTestAppInterface.isTestAppSuspended());    }   ])', 1), ('([8:/android/suspendapps/cts/DualSuspendTests.java]:[PIN]:[8]:method_text:[ing restriction "" + userRestriction,                mTestAppInterface.awaitBroadcast());    }   ])', 1), ('([2:/android/suspendapps/cts/DualSuspendTests.java]:[PIN]:[2]:method_text:[verHandler);        }        removeDeviceAdmin();        SuspendTestUtils.unsuspendAll();    }}])', 1), ('([1:/android/media/cts/VideoDecoderRotationTest.java]:[PIN]:[1]:method_text:[odec ("" +                    mDecoderName + "":"" + mMimeType + "") not supported"");        }    }}])', 1), ('([1:/android/security/cts/SecurityTestCase.java]:[PIN]:[1]:method_text:[y managed.     *     * Example of skipping a test based on mainline modules:     *  <pre>     * ])', 1), ('([1:/android/server/wm/StartActivityTests.java]:[PIN]:[1]:method_text:[start A2 (with NEW_TASK) and A3, the     * result should be 2 tasks: [A1] and [A2, A3].     */   ])', 1), ('([3:/android/theme/cts/ThemeHostTest.java]:[PIN]:[3]:method_text:[D);        restoreDensityIfNeeded(mDevice, mRestoreDensity);        super.tearDown();    }   ])', 1), ('([6:/android/theme/cts/ThemeHostTest.java]:[PIN]:[6]:method_text:[EMULATORXXXX"".        return device.getSerialNumber().toLowerCase().startsWith(""emulator"");    }}])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[PIN]:[1]:method_text:[  * method.     * <p>     * Test the Credential.CertificateCredential copy constructor     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[PIN]:[1]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([1:/com/android/cts/profileowner/AdminActionBookkeepingTest.java]:[PIN]:[1]:method_text:[ * Test: It should be recored whether the Profile Owner or the user set the current IME.     */   ])', 1), ('([1:/android/cts/backup/othersoundssettingsapp/OtherSoundsSettingsTest.java]:[PIN]:[1]:method_text:[xception {        mBackupUtils.executeShellCommandSync(""settings delete system "" + setting);    }])', 1), ('([1:/android/os/cts/DebugTest.java]:[PIN]:[1]:method_text:[> startDebugTime);                }            });        t.start();        t.join();    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerMaxCountTest.java]:[PIN]:[1]:method_text:[          .haveIds(makeIds(""s"", 1, 13))                    .areAllEnabled();        });    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerMaxCountTest.java]:[PIN]:[1]:method_text:["")                    .areAllDynamic()                    .areAllEnabled();        });    }   ])', 1), ('([4:/android/content/pm/cts/shortcutmanager/ShortcutManagerMaxCountTest.java]:[PIN]:[4]:method_text:[))                    .areAllEnabled()                    .areAllNotDynamic();        });    }}])', 1), ('([1:/android/media/cts/AudioModeListenerTest.java]:[PIN]:[1]:method_text:[TV or does not support telephony"");            return false;        }        return true;    }}])', 1), ('([1:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[PIN]:[1]:method_text:[mTmpDir);    }    /**     * Verify .dm installation for stand-alone base (no splits)     */   ])', 1), ('([2:/com/android/cts/dexmetadata/InstallDexMetadataHostTest.java]:[PIN]:[2]:method_text:[ultiple> {        InstallMultiple() {            super(getDevice(), getBuild());        }    }}])', 1), ('([2:/android/hardware/camera2/cts/MultiResolutionReprocessCaptureTest.java]:[PIN]:[2]:method_text:[   }    }    /**     * Test YUV_420_888 -> YUV_420_888 multi-resolution reprocessing     */   ])', 1), ('([1:/android/hardware/camera2/cts/MultiResolutionReprocessCaptureTest.java]:[PIN]:[1]:method_text:[     }        public Size getExpectedSize() {            return mExpectedSize;        }    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_ContactsTest.java]:[PIN]:[1]:method_text:[False(ContactUtil.recordExistsForContactId(mResolver, ids.mContactId));        return ids;    }}])', 1), ('([2:/android/car/cts/PreCreateUsersHostTest.java]:[PIN]:[2]:method_text:[* Verifies a pre-created user have same packages as non-precreated users.     */    @Presubmit   ])', 1), ('([2:/android/car/cts/PreCreateUsersHostTest.java]:[PIN]:[2]:method_text:[ystem to make sure PackageManager preserves the installed bit        restartSystemServer();    }}])', 1), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[PIN]:[1]:method_text:[assertThat(sUserManager.isUserRunning(sDeviceState.workProfile().userHandle())).isTrue();    }   ])', 1), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[PIN]:[1]:method_text:[          () -> sActivityManager.stopProfile(sDeviceState.secondaryUser().userHandle()));    }   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[PIN]:[1]:method_text:[    /**     * Tests the entire connection flow using a specific BSSID in the specifier.     */   ])', 1), (""([1:/android/uirendering/cts/testclasses/ShaderTests.java]:[PIN]:[1]:method_text:[W and HW, since there's no AA                .runWithComparer(new MSSIMComparer(0.98f));    }   ])"", 1), ('([1:/android/os/cts/SeccompTest.java]:[PIN]:[1]:method_text:[al.ERRNO_capped"", // presently fails */        };        runKernelUnitTestSuite(tests);    }   ])', 1), ('([1:/android/os/cts/SeccompTest.java]:[PIN]:[1]:method_text:[ious operations in an isolated process under a     * fairly restrictive seccomp policy.     */   ])', 1), ('([1:/android/os/cts/SeccompTest.java]:[PIN]:[1]:method_text:[rocess, where the     * process then violates the policy and gets killed by the kernel.     */   ])', 1), ('([1:/android/os/cts/SeccompTest.java]:[PIN]:[1]:method_text:[policy specified by installTestFilter().     */    private native static int getClockBootTime();}])', 1), ('([1:/android/app/cts/LaunchTest.java]:[PIN]:[1]:method_text:[onentName(getContext(), ClearTop.class));        runLaunchpad(LaunchpadActivity.LAUNCH);    }   ])', 1), ('([6:/android/media/cts/AdaptivePlaybackTest.java]:[PIN]:[6]:method_text:[it is reusable    }    public boolean needsToRunInSeparateThread() {        return false;    }}])', 1), ('([2:/android/graphics/drawable/cts/AnimatedVectorDrawableParameterizedTest.java]:[PIN]:[2]:method_text:[      });        return frameLatch.await(timeout, TimeUnit.MILLISECONDS);    }    @SmallTest   ])', 1), ('([1:/android/graphics/drawable/cts/AnimatedVectorDrawableParameterizedTest.java]:[PIN]:[1]:method_text:[ect, dest);        Assert.assertEquals(PixelCopy.SUCCESS, copyResult);        return dest;    }}])', 1), ('([6:/android/jobscheduler/cts/ExpeditedJobTest.java]:[PIN]:[6]:method_text:[ption {        mTestAppInterface.cleanup();        AppOpsUtils.reset(TEST_APP_PACKAGE);    }   ])', 1), ('([3:/android/jobscheduler/cts/ExpeditedJobTest.java]:[PIN]:[3]:method_text:[              + "" -u "" + UserHandle.myUserId() + "" "" + TEST_APP_PACKAGE + "" "" + mTestJobId);    }}])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[PIN]:[1]:method_text:[ke sure Augmented Autofill UI is not shown.        mAugmentedUiBot.assertUiNeverShown();    }   ])', 1), ('([1:/android/media/cts/bitstreams/MediaBitstreamsTest.java]:[PIN]:[1]:method_text:[  toPush.clear();                size = 0;                n++;            }        }    }}])', 1)]"	""	""	"[('PIN', 213)]"	"[('[android.autofillservice.cts.dropdown.CheckoutActivityTest testAutofill CtsAutoFillServiceTestCases]', 2), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest isNull CtsAutoFillServiceTestCases]', 2), ('[android.security.NetworkSecurityPolicyTestBase testApplicationInfoFlag None]', 1), ('[android.app.usage.cts.UsageReportingTest testSplitscreenUsageReporting CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testSplitscreenSameToken CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testSplitscreenSameTokenOneMissedStop CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testSplitscreenSameTokenTwoMissedStop CtsUsageStatsTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testGetAutofillOptionsSorted CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testCustomizedSaveUiWithContentDescription CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testCustomizedSaveUiWhenListResolutionFails CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest autofillZeroListValueToSpinner CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest autofillOneListValueToSpinner CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest autofillInvalidListValueToSpinner CtsAutoFillServiceTestCases]', 1), ('[com.android.compatibility.common.tradefed.presubmit.ApkPackageNameCheck testApkPackageNames None]', 1), ('[com.android.cts.devicepolicy.MixedProfileOwnerTest testSetAutoTimeEnabled CtsDevicePolicyManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testCreateShortcutResultIntent_defaultLauncher CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testCreateShortcutResultIntent_defaultChanges CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testCreateShortcutResultIntent_noDefault CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testQuery CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetInfo CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetIcon CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetResources CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetResources_withConfig CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetInstalledPackages CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetPermissionGroupInfo CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetPermissionGroupInfo_notFound CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testSetSystemAppHiddenUntilInstalled CtsContentTestCases]', 1), ('[android.jdwpsecurity.cts.JdwpSecurityHostTest testNonZygoteProgramIsNotDebuggable CtsJdwpSecurityHostTestCases]', 1), ('[android.webkit.cts.WebViewZoomTest WebViewZoomTest CtsWebkitTestCases]', 1), ('[android.video.cts.VideoEncoderDecoderTest initPerfTest CtsVideoTestCases]', 1), ('[android.telephonyprovider.cts.MmsPartTest testMmsPartUpdate CtsTelephonyProviderTestCases]', 1), ('[android.media.cts.MediaCodecTest testSignalSurfaceEOS CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testAbruptStop CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testAsyncStopAndReset CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testCreateTwoAudioDecoders CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testCreateAudioDecoderAndEncoder CtsMediaTestCases]', 1), ('[android.media.cts.EncodeVirtualDisplayWithCompositionTest testRendering800x480Locally CtsMediaTestCases]', 1), ('[android.media.cts.EncodeVirtualDisplayWithCompositionTest testRenderingMaxResolutionLocally CtsMediaTestCases]', 1), ('[android.media.cts.EncodeVirtualDisplayWithCompositionTest testRendering800x480Remotely CtsMediaTestCases]', 1), ('[android.media.cts.EncodeVirtualDisplayWithCompositionTest testRenderingMaxResolutionRemotely CtsMediaTestCases]', 1), ('[android.media.cts.EncodeVirtualDisplayWithCompositionTest testRendering800x480RemotelyWith3Windows CtsMediaTestCases]', 1), ('[android.media.cts.EncodeVirtualDisplayWithCompositionTest testRendering800x480LocallyWith3Windows CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testBasic CtsMediaTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataTest testNoDm None]', 1), ('[android.uirendering.cts.testclasses.BitmapBlendModeTest testDstOutBlendMode CtsUiRenderingTestCases]', 1), ('[android.hardware.camera2.cts.FastBasicsTest testCamera2 CtsCameraTestCases]', 1), ('[android.media.cts.AudioManagerTest testVolume CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testGetMicrophones CtsMediaTestCases]', 1), ('[android.content.pm.cts.shortcut.backup.publisher1.ShortcutManagerPreBackupTest testPreBackup None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppActivityReferenceTest start_activityIsStarted None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppActivityReferenceTest isFinishing None]', 1), ('[android.app.cts.BadProviderTest testExitOnCreate CtsAppTestCases]', 1), ('[android.permission.cts.PermissionControllerTest OnRevokeRuntimePermissionsCallback CtsPermissionTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testSplitsDefaultChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedDefaultChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedV1DefaultChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedSha512DefaultChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedVerityDefaultChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedAllChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedV1AllChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testDefaultIncrementalChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedDefaultIncrementalChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedAllIncrementalChecksums CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerChecksumsIncremental CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerSignedChecksumsIncremental CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerChecksumsIncrementalTrustNone CtsContentTestCases]', 1), ('[android.content.pm.cts.ChecksumsTest testInstallerChecksumsDuplicate CtsContentTestCases]', 1), ('[android.media.cts.AudioRecordTest testMediaMetrics CtsMediaTestCases]', 1), ('[android.media.cts.AudioRecordTest testGetActiveRecordingConfiguration CtsMediaTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest removeTestAppFromWhitelists CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testUidImportanceListener CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckService CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckStopsService CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckActivityService CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCantSaveStateLaunchAndBackground CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCantSaveStateLaunchAndSwitch CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCycleFgs CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCycleFgsTriangle CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testFgsLocationBind CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testTopBind CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testForegroundService_malformedNotificationExtras CtsAppTestCases]', 1), ('[android.webkit.cts.WebViewTest testAppInjectedXRequestedWithHeaderIsNotOverwritten CtsWebkitTestCases]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testInvalidOutput CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testOfflineCallbacks CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testOfflineDepthJpeg CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testOfflineHEIC CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testDeviceCloseAndOpen CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testOfflineSessionClose CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testOfflineSessionWithRegularSession CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testRepeatingSequenceAbort CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testUnsupportedOfflineSessionOutputs CtsCameraTestCases]', 1), ('[android.hardware.cts.CameraGLTest deriveCameraIdsUnderTest CtsCameraTestCases]', 1), ('[android.hardware.cts.CameraGLTest testCameraToSurfaceTextureMetadata CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ImageWriterTest testYuvImageWriterReaderOperation CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ImageWriterTest testYuvImageWriterReaderOperationAlt CtsCameraTestCases]', 1), ('[android.view.inputmethod.cts.InlineSuggestionInfoTest testNullInlinePresentationSpecThrowsException CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InlineSuggestionInfoTest testNullSourceThrowsException CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InlineSuggestionInfoTest testNullTypeThrowsException CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InlineSuggestionInfoTest testInlineSuggestionInfoValues CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InlineSuggestionInfoTest testInlineSuggestionInfoParcelizeDeparcelize CtsInputMethodTestCases]', 1), ('[android.mediaprovidertranscode.cts.TranscodeTest testTranscodedNotInitiatedForLegacy_UsingBytesRead None]', 1), ('[android.server.wm.AppConfigurationTests testConfigurationUpdatesWhenResizedFromFullscreen CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testConfigurationUpdatesWhenResizedFromDockedStack CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testConfigurationUpdatesWhenRotatingWhileFullscreen CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testConfigurationUpdatesWhenRotatingWhileDocked CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testConfigurationUpdatesWhenRotatingToSideFromDocked CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testSameConfigurationFullSplitFullNoRelaunch CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testDialogWhenLargeSplitSmall CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testFullscreenAppOrientationRequests CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testNonfullscreenAppOrientationRequests CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testAppOrientationRequestConfigChanges CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testAppOrientationRequestConfigClears CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testRotatedInfoWithFixedRotationTransform CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testNonFullscreenActivityPermitted CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testTaskCloseRestoreFixedOrientation CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testTaskCloseRestoreFreeOrientation CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testAppOrientationWhenRotating CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testAppContextDerivedDisplayContextOrientationWhenRotating CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testActivityContextDerivedDisplayContextOrientationWhenRotating CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testFixedOrientationWhenRotating CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testTaskMoveToBackOrientation CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testSplitscreenPortraitAppOrientationRequests CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testSplitscreenLandscapeAppOrientationRequests CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testAppConfigurationMatchesActivityInMultiWindow CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testAppConfigurationMatchesTopActivityInMultiWindow CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AppConfigurationTests testAppConfigurationMatchesActivityInFreeform CtsWindowManagerDeviceTestCases]', 1), ('[android.media.cts.RingtoneTest testRingtone CtsMediaTestCases]', 1), ('[android.media.cts.RingtoneTest testPlaybackProperties CtsMediaTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testTextureViewPreview CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testTextureViewPreviewWithImageReader CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testDualTextureViewPreview CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testDualTextureViewAndImageReaderPreview CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testDualCameraPreview CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceBasic CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceImageReaderSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceYUVImageReaderSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceLimit CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testTextureImageWriterReaderOperation CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaces CtsCameraTestCases]', 1), ('[android.server.wm.TransitionSelectionTests testCloseTask_BothWallpaper CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.TransitionSelectionTests testCloseActivity_BothWallpaper_SlowStop CtsWindowManagerDeviceTestCases]', 1), ('[android.content.pm.cts.shortcut.backup.publisher2.ShortcutManagerPostBackupTest testWithUninstall None]', 1), ('[android.media.cts.MediaPlayerTest testVorbisCrash CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testPlayAudioFromDataURI CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testPlayAudioAmr CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testConcurentPlayAudio CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testPlayAudioLooping CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testPlayMidi CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testSeekModes CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_segment000001_m2ts CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testResumeAtEnd CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testPositionAtEnd CtsMediaTestCases]', 1), ('[android.telecom.cts.RttOperationsTest testLocalRttTermination CtsTelecomTestCases]', 1), ('[android.telecom.cts.RttOperationsTest testRemoteRttTermination CtsTelecomTestCases]', 1), ('[com.android.cts.devicepolicy.AccountCheckHostSideTest testInheritTestOnly CtsDevicePolicyManagerTestCases]', 1), ('[android.hardware.biometrics.cts.BiometricManagerTest test_getSettingName_forCredential CtsHardwareTestCases]', 1), ('[android.media.cts.LoudnessEnhancerTest test3_0MeasureGainChange CtsMediaTestCases]', 1), ('[android.graphics.pdf.cts.PdfRendererTransformTest test CtsPdfTestCases]', 1), ('[android.suspendapps.cts.DualSuspendTests testMyPackageSuspended CtsSuspendAppsTestCases]', 1), ('[android.suspendapps.cts.DualSuspendTests testMyPackageUnsuspended CtsSuspendAppsTestCases]', 1), ('[android.suspendapps.cts.DualSuspendTests testIsPackageSuspended CtsSuspendAppsTestCases]', 1), ('[android.suspendapps.cts.DualSuspendTests testUnsuspendedOnUninstallBlocked CtsSuspendAppsTestCases]', 1), ('[android.suspendapps.cts.DualSuspendTests testCannotSuspendUnderDisallowUninstallApps CtsSuspendAppsTestCases]', 1), ('[android.media.cts.VideoDecoderRotationTest testRendering800x480Rotated CtsMediaTestCases]', 1), ('[android.security.cts.SecurityTestCase TestName CtsSecurityBulletinHostTestCases]', 1), ('[android.server.wm.StartActivityTests testStartActivityByNavigateUpToFromDiffUid CtsWindowManagerDeviceTestCases]', 1), ('[android.theme.cts.ThemeHostTest checkHardwareTypeSkipTest CtsThemeHostTestCases]', 1), ('[android.theme.cts.ThemeHostTest testThemes CtsThemeHostTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testUserCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey CtsWifiTestCases]', 1), ('[android.cts.backup.othersoundssettingsapp.OtherSoundsSettingsTest testOtherSoundsSettings_touchVibration None]', 1), ('[android.os.cts.DebugTest testThreadCpuTimeNanos None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerMaxCountTest testWithManifest CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerMaxCountTest testChangeActivity CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerMaxCountTest testWithPinned CtsShortcutManagerTestCases]', 1), ('[android.media.cts.AudioModeListenerTest testModeListener CtsMediaTestCases]', 1), ('[com.android.cts.dexmetadata.InstallDexMetadataHostTest testInstallDmWithoutFsvSigForSplitOnlyInstall CtsDexMetadataHostTestCases]', 1), ('[android.hardware.camera2.cts.MultiResolutionReprocessCaptureTest testMultiResolutionReprocessCharacteristics CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiResolutionReprocessCaptureTest testMultiResolutionMandatoryStreamCombinationTest CtsCameraTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_ContactsTest testProjection CtsContactsProviderTestCases]', 1), ('[android.car.cts.PreCreateUsersHostTest testAppsAreNotInstalledOnPreCreatedGuestAfterReboot CtsCarHostTestCases]', 1), ('[android.car.cts.PreCreateUsersHostTest testAppPermissionsPreCreatedGuestPackagesAfterReboot CtsCarHostTestCases]', 1), ('[android.devicepolicy.cts.StartProfilesTest startUser_userIsStopping_profileIsStarted CtsDevicePolicyTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testConnectionWithSsidPattern CtsWifiTestCases]', 1), ('[android.uirendering.cts.testclasses.ShaderTests testComplexShaderUsage CtsUiRenderingTestCases]', 1), ('[android.os.cts.SeccompTest testKernelBasicTests None]', 1), ('[android.os.cts.SeccompTest testKernelTSYNCTests None]', 1), ('[android.os.cts.SeccompTest testIsolatedServicePolicy None]', 1), ('[android.os.cts.SeccompTest testViolateIsolatedServicePolicy None]', 1), ('[android.app.cts.LaunchTest testClearTopInCreate CtsAppTestCases]', 1), ('[android.media.cts.AdaptivePlaybackTest testH263_flushConfigureDrc CtsMediaTestCases]', 1), ('[android.graphics.drawable.cts.AnimatedVectorDrawableParameterizedTest testAnimationOnLayer CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.AnimatedVectorDrawableParameterizedTest testInfiniteAVD CtsGraphicsTestCases]', 1), ('[android.jobscheduler.cts.ExpeditedJobTest uptimeMillis CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.ExpeditedJobTest testJobUidState CtsJobSchedulerTestCases]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_mainServiceDisabled_tappingSecondTimeNotTrigger CtsAutoFillServiceTestCases]', 1), ('[android.media.cts.bitstreams.MediaBitstreamsTest testBitstreamsConformance CtsMediaBitstreamsTestCases]', 1)]"
"6.1  Developer Tools"	"6.1"	"C-5-1"	"6.1/C-5-1"	"06010000.670501"	"""C-5-1] MUST have the `AdbManager#isAdbWifiQrSupported()` method      return `true`.  """	""	""	"isAdbWifiQrSupported()"	""	""	""	""	"[('android.adbmanager.cts.AdbManagerHostDeviceTest', 1)]"	""	"[('CtsAdbManagerHostTestCases', 1)]"	""	""	""	""	"android.adbmanager.cts.AdbManagerHostDeviceTest"	""	"CtsAdbManagerHostTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 1)]"	"[('(1,isAdbWifiQrSupported(),/android/adbmanager/cts/AdbManagerHostDeviceTest.java)', 1)]"	"[('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[isAdbWifiQrSupported()]:[1]:method_text:[)));        Assert.assertEquals(expected, Boolean.parseBoolean(result.getStdout().trim()));    }}])', 1)]"	""	""	"[('isAdbWifiQrSupported()', 1)]"	"[('[android.adbmanager.cts.AdbManagerHostDeviceTest test_isadbWifiQrSupported CtsAdbManagerHostTestCases]', 1)]"
"2.2.1  Hardware"	"7.1.4.6"	"H-1-1"	"7.1.4.6/H-1-1"	"07010406.720101"	"""[7.1.4.6/H-1-1] MUST report as output a      protobuf trace that complies with the schema for GPU counters and GPU      renderstages defined in the [Perfetto documentation](https://developer.android.com/studio/command-line/perfetto). *    ["""	""	""	"GPU"	""	""	""	""	"[('android.gputools.cts.CtsRootlessGpuDebugHostTest', 16), ('com.android.server.cts.GraphicsStatsValidationTest', 3), ('android.appmanifest.cts.UsesNativeLibraryTestCase', 3), ('android.hardware.camera2.cts.MultiViewTest', 2), ('android.graphics.cts.CameraGpuTest', 2), ('android.graphics.cts.BitmapTest', 2), ('android.security.cts.Poc17_01', 2), ('android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest', 2), ('android.hardware.camera2.cts.CameraExtensionSessionTest', 1), ('android.SustainedPerformance.cts.SustainedPerformanceHostTest', 1), ('android.deviceconfig.cts.DeviceConfigApiPermissionTests', 1), ('android.renderscript.cts.refocus.RefocusTest', 1), ('android.graphics.cts.BasicVulkanGpuTest', 1), ('android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.graphics.cts.MediaVulkanGpuTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('com.android.compatibility.common.tradefed.presubmit.CtsConfigLoadingTest', 1), ('android.appsecurity.cts.KeySetHostTest', 1), ('android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest', 1), ('com.android.cts.deviceowner.HardwarePropertiesManagerTest', 1), ('android.app.uiautomation.cts.UiAutomationTest', 1), ('android.graphics.gpuprofiling.cts.CtsFrameTracerDataSourceTest', 1), ('android.view.cts.PixelCopyTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest', 1), ('android.hardware.camera2.cts.RobustnessTest', 1), ('android.hardware.nativehardware.cts.HardwareBufferVrTest', 1), ('android.view.cts.ASurfaceControlTest', 1), ('android.graphics.cts.CameraVulkanGpuTest', 1), ('com.android.cts.deviceowner.VrTemperatureTest', 1), ('android.graphics.cts.SyncTest', 1), ('android.sensorratepermission.cts.debuggableapi31.DebuggableAPI31Test', 1), ('android.view.cts.FrameMetricsListenerTest', 1), ('android.hardware.camera2.cts.ImageReaderTest', 1), ('android.hardware.cts.HardwareBufferTest', 1), ('android.dumpsys.cts.GfxInfoDumpsysTest', 1)]"	"[('getDevice', 19), ('setUp', 4), ('getWidth', 3), ('getHeight', 2), ('cleanup', 2), ('trim', 2), ('tearDown', 2), ('stream', 2), ('data', 1), ('getFramePixels', 1), ('getContext', 1), ('getAssets', 1), ('run', 1), ('getMessage', 1), ('init', 1), ('getTime', 1), ('LogScanResult', 1), ('turnScreenOn', 1), ('getSimpleName', 1), ('setup', 1), ('teardown', 1), ('matches', 1), ('size', 1), ('getOverrideConfig', 1)]"	"[('CtsGpuToolsHostTestCases', 16), ('CtsGraphicsTestCases', 8), ('CtsCameraTestCases', 5), ('CtsViewTestCases', 3), ('CtsShortcutManagerTestCases', 3), ('CtsIncidentHostTestCases', 3), ('CtsSecurityBulletinHostTestCases', 2), ('CtsGpuProfilingDataTestCases', 2), ('CtsSustainedPerformanceHostTestCases', 1), ('CtsDeviceConfigTestCases', 1), ('CtsRenderscriptTestCases', 1), ('CtsSensorTestCases', 1), ('CtsMediaTestCases', 1), ('CtsAppSecurityHostTestCases', 1), ('CtsUiAutomationTestCases', 1), ('CtsNativeHardwareTestCases', 1), ('CtsHardwareTestCases', 1), ('CtsDumpsysHostTestCases', 1)]"	""	""	""	""	"android.dumpsys.cts.GfxInfoDumpsysTest"	"getOverrideConfig"	"CtsDumpsysHostTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/gputools/src/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 16), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/src/com/android/server/cts/GraphicsStatsValidationTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/library/src/android/appmanifest/cts/UsesNativeLibraryTestCase.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraGpuTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_01.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraExtensionSessionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/deviceconfig/src/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/refocus/RefocusTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BasicVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/DirectReportAPI30/src/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/MediaVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/KeySetHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uiautomation/src/android/app/uiautomation/cts/UiAutomationTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/PixelCopyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/nativehardware/src/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/VrTemperatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/SyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/DebuggableAPI31/src/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/FrameMetricsListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/cts/HardwareBufferTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/GfxInfoDumpsysTest.java', 1)]"	"[('(1,GPU,/android/hardware/camera2/cts/CameraExtensionSessionTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/MultiViewTest.java)', 1), ('(2,GPU,/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java)', 1), ('(1,GPU,/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java)', 1), ('(5,GPU,/android/graphics/cts/CameraGpuTest.java)', 1), ('(1,GPU,/android/renderscript/cts/refocus/RefocusTest.java)', 1), ('(2,GPU,/android/graphics/cts/BasicVulkanGpuTest.java)', 1), ('(1,GPU,/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java)', 1), ('(2,GPU,/android/graphics/cts/BitmapTest.java)', 1), ('(1,GPU,/android/hardware/cts/SensorDirectReportTest.java)', 1), ('(3,GPU,/android/security/cts/Poc17_01.java)', 1), ('(1,GPU,/android/graphics/cts/MediaVulkanGpuTest.java)', 1), ('(3,GPU,/android/media/cts/PresentationSyncTest.java)', 1), ('(1,GPU,/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java)', 1), ('(1,GPU,/android/appsecurity/cts/KeySetHostTest.java)', 1), ('(24,GPU,/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java)', 1), ('(14,GPU,/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java)', 1), ('(1,GPU,/android/app/uiautomation/cts/UiAutomationTest.java)', 1), ('(2,GPU,/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java)', 1), ('(1,GPU,/android/view/cts/PixelCopyTest.java)', 1), ('(1,GPU,/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java)', 1), ('(94,GPU,/android/gputools/cts/CtsRootlessGpuDebugHostTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/RobustnessTest.java)', 1), ('(8,GPU,/com/android/server/cts/GraphicsStatsValidationTest.java)', 1), ('(2,GPU,/android/hardware/nativehardware/cts/HardwareBufferVrTest.java)', 1), ('(1,GPU,/android/view/cts/ASurfaceControlTest.java)', 1), ('(1,GPU,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(9,GPU,/com/android/cts/deviceowner/VrTemperatureTest.java)', 1), ('(2,GPU,/android/graphics/cts/SyncTest.java)', 1), ('(1,GPU,/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java)', 1), ('(5,GPU,/android/view/cts/FrameMetricsListenerTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(4,GPU,/android/appmanifest/cts/UsesNativeLibraryTestCase.java)', 1), ('(3,GPU,/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java)', 1), ('(3,GPU,/android/hardware/cts/HardwareBufferTest.java)', 1), ('(1,GPU,/android/dumpsys/cts/GfxInfoDumpsysTest.java)', 1)]"	"[('([1:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[GPU]:[1]:method_text:[epeating with multi frame capture on all supported extensions.    // Verify still frame output.   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[ify the Bitmap     * from the first TextureView is identical to the second TextureView.     */   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[    }    /*     * Verify behavior of sharing surfaces within one OutputConfiguration     */   ])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[GPU]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");    }   ])', 1), ('([1:/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java]:[GPU]:[1]:method_text:[      Exception e) {        violations.append(message).append("": "").append(e).append(""\\n"");    }}])', 1), ('([4:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[4]:method_text:[> mActivityRule =            new ActivityTestRule<>(CameraGpuCtsActivity.class, false, false);   ])', 1), ('([1:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[1]:method_text:[e.launchActivity(null);        activity.waitToFinishRendering();        activity.finish();    }}])', 1), ('([1:/android/renderscript/cts/refocus/RefocusTest.java]:[GPU]:[1]:method_text:[+                context.getResources().getResourceEntryName(resID));        return path;    }}])', 1), ('([2:/android/graphics/cts/BasicVulkanGpuTest.java]:[GPU]:[2]:method_text:[rmat;    public BasicVulkanGpuTest(String name, int format) {        mFormat = format;    }   ])', 1), ('([1:/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java]:[GPU]:[1]:method_text:[                        > SensorRatePermissionDirectReportTestHelper.CAPPED_SAMPLE_RATE_HZ);    }])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[ hwBuffer2.getLayers());        assertEquals(hwBuffer.getUsage(), hwBuffer2.getUsage());    }   ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[tory.Options();        options.inPreferredConfig = Config.HARDWARE;        return options;    }}])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[GPU]:[1]:method_text:[der.nativeOrder());        return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned    }}])', 1), ('([1:/android/security/cts/Poc17_01.java]:[GPU]:[1]:method_text:[ls.runPoc(""CVE-2016-8426"", getDevice(), 60);        }    }    /**     *  b/31799885     */   ])', 1), ('([2:/android/security/cts/Poc17_01.java]:[GPU]:[2]:method_text:[ls.runPoc(""CVE-2016-8427"", getDevice(), 60);        }    }    /**     *  b/31993456     */   ])', 1), ('([1:/android/graphics/cts/MediaVulkanGpuTest.java]:[GPU]:[1]:method_text:[map.getWidth(),                         bitmap.getHeight());        return framePixels;    }   ])', 1), ('([3:/android/media/cts/PresentationSyncTest.java]:[GPU]:[3]:method_text:[sleep(10); }                catch (InterruptedException ignored) {}            }        }    }}])', 1), ('([1:/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java]:[GPU]:[1]:method_text:[ * -> Exclude deprecated ApkInstaller.     * -> Check if host-side tests are non empty.     */   ])', 1), ('([1:/android/appsecurity/cts/KeySetHostTest.java]:[GPU]:[1]:method_text:[k that an apk with an upgrade key that has no corresponding public key fails to install.     */   ])', 1), ('([24:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[GPU]:[24]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.     */   ])', 1), ('([14:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[GPU]:[14]:method_text:[ges);            oldFanSpeeds = fanSpeeds;            oldCpuUsages = cpuUsages;        }    }}])', 1), ('([1:/android/app/uiautomation/cts/UiAutomationTest.java]:[GPU]:[1]:method_text:[entation getInstrumentation() {        return InstrumentationRegistry.getInstrumentation();    }}])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[GPU]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                FEATURE_WATCH, FEATURE_TELEVISION);    }   ])', 1), ('([1:/android/view/cts/PixelCopyTest.java]:[GPU]:[1]:method_text:[se();                    } catch (Throwable t) {}                }            }        }    }}])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java]:[GPU]:[1]:method_text:[           assertEquals(""title3"", s.getShortLabel());                    });        });    }   ])', 1), ('([30:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[30]:method_text:[es layers to our debuggable app and ensures they are     * loaded in the correct order.     */   ])', 1), (""([6:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[6]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.     */   ])"", 1), ('([1:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[1]:method_text:[not enumerate layers in base     * directory if enable_gpu_debug_layers is not enabled.     */   ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[e apps do not enumerate layers in base     * directory if gpu_debug_app does not match.     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[e apps do not enumerate layers in base     * directory if gpu_debug_layers are not set.     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[     * This test ensures we can still use properties if no layer specified via Settings     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[    /**     * This test ensures system properties are ignored if Settings load a layer     */   ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[  /**     * This test ensures a debuggable app can load layers from an external package     */   ])', 1), (""([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.     */   ])"", 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[not enumerate layers in base     * directory if enable_gpu_debug_layers is not enabled.     */   ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[S apps do not enumerate layers in base     * directory if gpu_debug_app does not match.     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[S apps do not enumerate layers in base     * directory if gpu_debug_layers are not set.     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**     * This test ensures we can still use properties if no GLES layers are specified     */   ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**     * This test ensures system properties are ignored if Settings load a GLES layer     */   ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[/**     * This test ensures that external GLES layers can be loaded by a debuggable app     */   ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[ppStartTime);        Assert.assertTrue(GLES_LAYER_C + "" was not loaded"", glesResult.found);    }}])', 1), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[GPU]:[2]:method_text:[processable mandatory stream combinations are     * present and advertised accordingly.     */   ])', 1), ('([1:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[1]:method_text:[eyevent KEYCODE_WAKEUP"");        getDevice().executeShellCommand(""wm dismiss-keyguard"");    }   ])', 1), ('([4:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[4]:method_text:[e[0] = """";            origRefreshRate[1] = """";        }        return origRefreshRate;    }   ])', 1), ('([3:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[3]:method_text:[tStatsEnd());                latest = proto;            }        }        return latest;    }}])', 1), ('([2:/android/hardware/nativehardware/cts/HardwareBufferVrTest.java]:[GPU]:[2]:method_text:[s(format, buffer.getFormat());            assertEquals(flags, buffer.getUsage());        }    }}])', 1), ('([1:/android/view/cts/ASurfaceControlTest.java]:[GPU]:[1]:method_text:[                        return pixelCount == 0;                    }                });    }   ])', 1), ('([1:/android/graphics/cts/CameraVulkanGpuTest.java]:[GPU]:[1]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([9:/com/android/cts/deviceowner/VrTemperatureTest.java]:[GPU]:[9]:method_text:[inThrottlingThresholds, skinShutdownThresholds,                skinVrThrottlingThresholds);    }}])', 1), ('([2:/android/graphics/cts/SyncTest.java]:[GPU]:[2]:method_text:[er    public void teardown() throws Throwable {        EGL14.eglTerminate(mEglDisplay);    }   ])', 1), ('([1:/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java]:[GPU]:[1]:method_text:[ecurityException"");        } catch (SecurityException e) {            // Expected        }    }])', 1), ('([5:/android/view/cts/FrameMetricsListenerTest.java]:[GPU]:[5]:method_text:[rawFrameMetric,                (firstDrawFrameMetric == 0) || (firstDrawFrameMetric == 1));    }}])', 1), ('([2:/android/hardware/camera2/cts/ImageReaderTest.java]:[GPU]:[2]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 1), ('([2:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[2]:method_text:[package manager is the same as     * the public.libraries*.txt files in the partitions.     */   ])', 1), ('([1:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[1]:method_text:[iredLibs, optionalLibs, availableLibs, unavailableLibs)));        runInstalledTestApp();    }   ])', 1), ('([1:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[1]:method_text:[quiredLibs, optionalLibs, availableLibs, unavailableLibs)));        runInstalledTestApp();    }}])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[2]:method_text:[at=PNG,""                + ""icon_quality=100"";    }    @AsbSecurityTest(cveBugId = 109824443)   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[1]:method_text:[name mismatch"",                () -> runWithCaller(callerContext, () -> r.run())        );    }}])', 1), ('([3:/android/hardware/cts/HardwareBufferTest.java]:[GPU]:[3]:method_text:[        1, HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE | HardwareBuffer.USAGE_GPU_COLOR_OUTPUT));    }}])', 1), ('([1:/android/dumpsys/cts/GfxInfoDumpsysTest.java]:[GPU]:[1]:method_text:[  foundAtLeastOneRow = true;            }        }        assertTrue(foundAtLeastOneRow);    }}])', 1)]"	"https://developer.android.com"	""	"[('GPU', 60)]"	"[('[android.hardware.camera2.cts.CameraExtensionSessionTest testConcurrentSessions CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testTextureImageWriterReaderOperation CtsCameraTestCases]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis CtsSustainedPerformanceHostTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigPublicNamespacesWithoutReadPermission CtsDeviceConfigTestCases]', 1), ('[android.graphics.cts.CameraGpuTest testCameraImageCaptureAndRendering CtsGraphicsTestCases]', 1), ('[android.renderscript.cts.refocus.RefocusTest testNewRefocus CtsRenderscriptTestCases]', 1), ('[android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test testSamplingRateMicToggleOffOnOff None]', 1), ('[android.graphics.cts.BitmapTest testWrapHardwareBufferWithRgbBufferButNonRgbColorSpaceFails CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkCompressBadParameter CtsGraphicsTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8426 CtsSecurityBulletinHostTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8427 CtsSecurityBulletinHostTestCases]', 1), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.appsecurity.cts.KeySetHostTest testBadUpgradeMissingPubKey CtsAppSecurityHostTestCases]', 1), ('[android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest isEmpty CtsGpuProfilingDataTestCases]', 1), ('[com.android.cts.deviceowner.HardwarePropertiesManagerTest testHardwarePropertiesManager None]', 1), ('[android.app.uiautomation.cts.UiAutomationTest testCallingPublicAPIsWithDontUseAccessibilityFlag_shouldNotThrowException CtsUiAutomationTestCases]', 1), ('[android.view.cts.PixelCopyTest testBufferQueueCrop CtsViewTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest currentTimeMillis CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testInjectLayerLoadVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreVulkan CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testReleaseLayerLoadGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreGLES CtsGpuToolsHostTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testMultipleExternalApps CtsGpuToolsHostTestCases]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables CtsCameraTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest killTestApp CtsIncidentHostTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testJankyDrawFrame CtsIncidentHostTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testDaveyDrawFrame CtsIncidentHostTestCases]', 1), ('[android.hardware.nativehardware.cts.HardwareBufferVrTest testLayeredBuffersForVr CtsNativeHardwareTestCases]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_setBufferOpaque_transparent CtsViewTestCases]', 1), ('[com.android.cts.deviceowner.VrTemperatureTest testVrTemperatures None]', 1), ('[android.sensorratepermission.cts.debuggableapi31.DebuggableAPI31Test testDirectChannel None]', 1), ('[android.view.cts.FrameMetricsListenerTest testDropCount CtsViewTestCases]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected CtsCameraTestCases]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase getTestInformation None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase testNewAppDependsOnSomePublicLibraries None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase testNewAppOptionallyDependsOnSomePublicLibraries None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.hardware.cts.HardwareBufferTest testIsSupported CtsHardwareTestCases]', 1), ('[android.dumpsys.cts.GfxInfoDumpsysTest testGfxinfoFramestats CtsDumpsysHostTestCases]', 1)]"
"7.1.1.1  Screen Size and Shape"	"7.1.1.1"	"C-2-1"	"7.1.1.1/C-2-1"	"07010101.670201"	"""C-2-1] MUST implement the latest available stable version of the [extensions API]( https://developer.android.com/jetpack/androidx/releases/window-extensions) or the stable version of [sidecar API]( https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:window/window-sidecar/api/) to be used by [Window Manager Jetpack]( https://developer.android.com/jetpack/androidx/releases/window) library.  If device implementations include an Android-compatible display(s) that is foldable, or includes a folding hinge between multiple display panels and if the hinge or fold crosses a fullscreen application window, they:  """	""	""	"display(s) cs.android.com"	""	""	""	""	"[('android.jvmti.cts.JvmtiHostTest', 1)]"	"[('setUp', 1), ('getDevice', 1), ('getCurrentUser', 1)]"	""	""	""	""	""	"android.jvmti.cts.JvmtiHostTest"	"getCurrentUser"	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/base/host/src/android/jvmti/cts/JvmtiHostTest.java', 1)]"	"[('(1,cs.android.com,/android/jvmti/cts/JvmtiHostTest.java)', 1)]"	"[('([1:/android/jvmti/cts/JvmtiHostTest.java]:[cs.android.com]:[1]:method_text:[ILURE) {            throw new RuntimeException(""am get-current-user failed!"");        }    }   ])', 1)]"	"https://cs.android.com https://developer.android.com"	""	"[('cs.android.com', 1)]"	""
"7.4.5.3  Captive Portals"	"7.4.5.3"	"C-1-2"	"7.4.5.3/C-1-2"	"07040503.670102"	"""C-1-2] MUST perform detection of captive portals and support login     through the captive portal application when the device is connected     to any network type, including cellular/mobile network, WiFi, Ethernet     or Bluetooth. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"7.1.1.1  Screen Size and Shape"	"7.1.1.1"	"C-3-1"	"7.1.1.1/C-3-1"	"07010101.670301"	"""C-3-1] MUST report the position, bounds and state of hinge or fold through      extensions or sidecar APIs to the application.  For details on correctly implementing the sidecar or extension APIs refer to the public documentation of [Window Manager Jetpack]( https://developer.android.com/jetpack/androidx/releases/window).  """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://developer.android.com"	""	""	""
"7.3.10  Biometric Sensors"	"7.3.10"	"C-6-2"	"7.3.10/C-6-2"	"07031000.670602"	"""C-6-2] MUST present only **Class 3** biometrics when the authentication     requires [BIOMETRIC_STRONG](https://developer.android.com/reference/android/hardware/biometrics/BiometricManager.Authenticators#BIOMETRIC_STRONG),     or the authentication is invoked with a     [CryptoObject](https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject).  If device implementations wish to treat a biometric sensor as **Class 1** (formerly **Convenience**), they:  """	""	""	"BIOMETRIC_STRONG BiometricManager.Authenticators BiometricPrompt.CryptoObject"	""	""	""	""	"[('android.server.biometrics.BiometricSecurityTests', 9), ('android.hardware.biometrics.cts.BiometricPromptTest', 3), ('android.server.biometrics.BiometricCryptoTests', 2), ('android.server.biometrics.BiometricSimpleTests', 2), ('com.android.cts.verifier.security.UnlockedDeviceRequiredTest', 2), ('android.keystore.cts.KeyProtectionTest', 2), ('android.keystore.cts.KeyGenParameterSpecTest', 2), ('android.security.identity.cts.IdentityApiTest', 1), ('android.hardware.biometrics.cts.BiometricManagerTest', 1), ('android.server.biometrics.BiometricServiceTests', 1)]"	"[('revertSensorStrengths', 4), ('ensureReset', 2), ('teardown', 2), ('createKey', 2), ('setUp', 1), ('getInstrumentation', 1), ('getContext', 1), ('getMainLooper', 1), ('AuthenticationCallback', 1), ('countDown', 1), ('onAuthenticationFailed', 1)]"	"[('CtsBiometricsTestCases', 14), ('CtsHardwareTestCases', 4), ('CtsKeystoreTestCases', 4), ('CtsIdentityTestCases', 1)]"	""	""	""	""	"android.hardware.biometrics.cts.BiometricPromptTest"	"onAuthenticationFailed"	"CtsHardwareTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/framework/base/biometrics/src/android/server/biometrics/BiometricSecurityTests.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/biometrics/cts/BiometricPromptTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/framework/base/biometrics/src/android/server/biometrics/BiometricCryptoTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/biometrics/src/android/server/biometrics/BiometricSimpleTests.java', 2), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyProtectionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyGenParameterSpecTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/IdentityApiTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/biometrics/cts/BiometricManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/biometrics/src/android/server/biometrics/BiometricServiceTests.java', 1)]"	"[('(1,BiometricPrompt.CryptoObject,/android/security/identity/cts/IdentityApiTest.java)', 1), ('(2,BiometricManager.Authenticators,/android/hardware/biometrics/cts/BiometricManagerTest.java)', 1), ('(1,BIOMETRIC_STRONG,/android/server/biometrics/BiometricServiceTests.java)', 1), ('(3,BIOMETRIC_STRONG,/android/server/biometrics/BiometricCryptoTests.java)', 1), ('(1,BiometricPrompt.CryptoObject,/android/server/biometrics/BiometricCryptoTests.java)', 1), ('(1,BIOMETRIC_STRONG,/android/server/biometrics/BiometricSimpleTests.java)', 1), ('(1,BiometricManager.Authenticators,/android/server/biometrics/BiometricSimpleTests.java)', 1), ('(34,BIOMETRIC_STRONG,/android/server/biometrics/BiometricSecurityTests.java)', 1), ('(1,BiometricManager.Authenticators,/android/server/biometrics/BiometricSecurityTests.java)', 1), ('(1,BIOMETRIC_STRONG,/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java)', 1), ('(1,BiometricManager.Authenticators,/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java)', 1), ('(3,BIOMETRIC_STRONG,/android/keystore/cts/KeyProtectionTest.java)', 1), ('(3,BIOMETRIC_STRONG,/android/keystore/cts/KeyGenParameterSpecTest.java)', 1), ('(2,BIOMETRIC_STRONG,/android/hardware/biometrics/cts/BiometricPromptTest.java)', 1), ('(1,BiometricManager.Authenticators,/android/hardware/biometrics/cts/BiometricPromptTest.java)', 1)]"	"[('([1:/android/security/identity/cts/IdentityApiTest.java]:[BiometricPrompt.CryptoObject]:[1]:method_text:[quals;public class IdentityApiTest {    private static final String TAG = ""IdentityApiTest"";   ])', 1), ('([2:/android/hardware/biometrics/cts/BiometricManagerTest.java]:[BiometricManager.Authenticators]:[2]:method_text:[Context();        mBiometricManager = mContext.getSystemService(BiometricManager.class);    }   ])', 1), ('([1:/android/server/biometrics/BiometricServiceTests.java]:[BIOMETRIC_STRONG]:[1]:method_text:[.getSensorId(),                            BiometricsProto.CM_RESET_LOCKOUT));        }    }   ])', 1), ('([3:/android/server/biometrics/BiometricCryptoTests.java]:[BIOMETRIC_STRONG]:[3]:method_text:[);                        }                    }                }            }        }    }}])', 1), ('([1:/android/server/biometrics/BiometricCryptoTests.java]:[BiometricPrompt.CryptoObject]:[1]:method_text:[);                        }                    }                }            }        }    }}])', 1), ('([1:/android/server/biometrics/BiometricSimpleTests.java]:[BIOMETRIC_STRONG]:[1]:method_text:[           mBiometricManager.canAuthenticate(Authenticators.BIOMETRIC_STRONG));        }    }   ])', 1), ('([1:/android/server/biometrics/BiometricSimpleTests.java]:[BiometricManager.Authenticators]:[1]:method_text:[lments created via {@link BiometricTestSession} show up in the     * biometric dumpsys.     */   ])', 1), ('([3:/android/server/biometrics/BiometricSecurityTests.java]:[BIOMETRIC_STRONG]:[3]:method_text:[t     * have a way to test cases where the requested strength is BIOMETRIC_CONVENIENCE.     */   ])', 1), ('([4:/android/server/biometrics/BiometricSecurityTests.java]:[BIOMETRIC_STRONG]:[4]:method_text:[t     * have a way to test cases where the requested strength is BIOMETRIC_CONVENIENCE.     */   ])', 1), ('([2:/android/server/biometrics/BiometricSecurityTests.java]:[BIOMETRIC_STRONG]:[2]:method_text:[t     * have a way to test cases where the requested strength is BIOMETRIC_CONVENIENCE.     */   ])', 1), ('([7:/android/server/biometrics/BiometricSecurityTests.java]:[BIOMETRIC_STRONG]:[7]:method_text:[t     * have a way to test cases where the requested strength is BIOMETRIC_CONVENIENCE.     */   ])', 1), ('([6:/android/server/biometrics/BiometricSecurityTests.java]:[BIOMETRIC_STRONG]:[6]:method_text:[t     * have a way to test cases where the requested strength is BIOMETRIC_CONVENIENCE.     */   ])', 1), ('([2:/android/server/biometrics/BiometricSecurityTests.java]:[BIOMETRIC_STRONG]:[2]:method_text:[| Error  |     * +-------------------+------------------+--------------------+--------+     */   ])', 1), ('([5:/android/server/biometrics/BiometricSecurityTests.java]:[BIOMETRIC_STRONG]:[5]:method_text:[ror  |     * +-----------------------+------------------+--------------------+--------+     */   ])', 1), ('([5:/android/server/biometrics/BiometricSecurityTests.java]:[BIOMETRIC_STRONG]:[5]:method_text:[urrent: "" + currentStrength);            Thread.sleep(300);        }        return false;    }}])', 1), ('([1:/android/server/biometrics/BiometricSecurityTests.java]:[BiometricManager.Authenticators]:[1]:method_text:[t     * have a way to test cases where the requested strength is BIOMETRIC_CONVENIENCE.     */   ])', 1), ('([1:/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java]:[BIOMETRIC_STRONG]:[1]:method_text:[ntext()).setMessage(                    mController.getDialogMessage()).create();        }    }}])', 1), ('([1:/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java]:[BiometricManager.Authenticators]:[1]:method_text:[ntext()).setMessage(                    mController.getDialogMessage()).create();        }    }}])', 1), ('([1:/android/keystore/cts/KeyProtectionTest.java]:[BIOMETRIC_STRONG]:[1]:method_text:[E_COUNT, spec.getMaxUsageCount());        assertEquals(spec.isStrongBoxBacked(), false);    }   ])', 1), ('([2:/android/keystore/cts/KeyProtectionTest.java]:[BIOMETRIC_STRONG]:[2]:method_text:[getMaxUsageCount(), maxUsageCount);        assertEquals(spec.isStrongBoxBacked(), true);    }   ])', 1), ('([1:/android/keystore/cts/KeyGenParameterSpecTest.java]:[BIOMETRIC_STRONG]:[1]:method_text:[);        assertEquals(KeyProperties.UNRESTRICTED_USAGE_COUNT, spec.getMaxUsageCount());    }   ])', 1), ('([2:/android/keystore/cts/KeyGenParameterSpecTest.java]:[BIOMETRIC_STRONG]:[2]:method_text:[sUnlockedDeviceRequired());        assertEquals(maxUsageCount, spec.getMaxUsageCount());    }   ])', 1), ('([1:/android/hardware/biometrics/cts/BiometricPromptTest.java]:[BIOMETRIC_STRONG]:[1]:method_text:[assertEquals(authenticators, prompt.getAllowedAuthenticators());        }    }    @Presubmit   ])', 1), ('([1:/android/hardware/biometrics/cts/BiometricPromptTest.java]:[BIOMETRIC_STRONG]:[1]:method_text:[ld();            assertEquals(authenticators, prompt.getAllowedAuthenticators());        }    }}])', 1), ('([1:/android/hardware/biometrics/cts/BiometricPromptTest.java]:[BiometricManager.Authenticators]:[1]:method_text:[here are no fingers enrolled. Cts-verifier will check the implementation.     */    @Presubmit   ])', 1)]"	"https://developer.android.com"	""	"[('BIOMETRIC_STRONG', 18), ('BiometricManager.Authenticators', 5), ('BiometricPrompt.CryptoObject', 2)]"	"[('[android.server.biometrics.BiometricCryptoTests testGenerateKeyWhenCredentialAndBiometricEnrolled CtsBiometricsTestCases]', 2), ('[com.android.cts.verifier.security.UnlockedDeviceRequiredTest verifyTestRequirements None]', 2), ('[android.server.biometrics.BiometricServiceTests testLockoutResetNotRequestedAfterBiometricUnlock_whenNotStrong CtsBiometricsTestCases]', 1), ('[android.server.biometrics.BiometricSimpleTests testCanAuthenticate_whenNoSensors CtsBiometricsTestCases]', 1), ('[android.server.biometrics.BiometricSecurityTests testBiometricStrength_StrongSensor CtsBiometricsTestCases]', 1), ('[android.server.biometrics.BiometricSecurityTests testBiometricStrength_WeakSensor CtsBiometricsTestCases]', 1), ('[android.server.biometrics.BiometricSecurityTests testBiometricStrength_ConvenienceSensor CtsBiometricsTestCases]', 1), ('[android.server.biometrics.BiometricSecurityTests testBiometricStrengthDowngraded_StrongSensor CtsBiometricsTestCases]', 1), ('[android.server.biometrics.BiometricSecurityTests testBiometricStrengthDowngraded_WeakSensor CtsBiometricsTestCases]', 1), ('[android.server.biometrics.BiometricSecurityTests testBiometricStrengthUpgraded_WeakSensor CtsBiometricsTestCases]', 1), ('[android.server.biometrics.BiometricSecurityTests testBiometricStrengthUpgraded_ConvenienceSensor CtsBiometricsTestCases]', 1), ('[android.keystore.cts.KeyProtectionTest testDefaults CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyProtectionTest testSettersReflectedInGetters CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGenParameterSpecTest testDefaults CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGenParameterSpecTest testSettersReflectedInGetters CtsKeystoreTestCases]', 1), ('[android.hardware.biometrics.cts.BiometricPromptTest test_setAllowedAuthenticators_withoutDeviceCredential CtsHardwareTestCases]', 1), ('[android.hardware.biometrics.cts.BiometricPromptTest test_setAllowedAuthenticators_withDeviceCredential CtsHardwareTestCases]', 1)]"
"7.4.5.2  IPv6"	"7.4.5.2"	"C-0-6"	"7.4.5.2/C-0-6"	"07040502.670006"	"""C-0-6] MUST provide third-party applications with direct IPv6 connectivity to the network when connected to an IPv6 network, without any form of address or port translation happening locally on the device. Both managed APIs such as [`Socket#getLocalAddress`]( https://developer.android.com/reference/java/net/Socket.html#getLocalAddress%28%29) or [`Socket#getLocalPort`]( https://developer.android.com/reference/java/net/Socket.html#getLocalPort%28%29)) and NDK APIs such as `getsockname()` or `IPV6_PKTINFO` MUST return the IP address and port that is actually used to send and receive packets on the network and is visible as the source ip and port to internet (web) servers.   The required level of IPv6 support depends on the network type, as shown in the following requirements.  If device implementations support Wi-Fi, they:  """	""	""	"NDK Socket.html IPV6_PKTINFO getsockname()"	""	""	""	""	"[('android.media.cts.VideoCodecTest', 17), ('android.app.cts.DialogTest', 17), ('android.graphics.cts.BitmapTest', 13), ('android.widget.cts.TextViewTest', 12), ('android.view.cts.ViewTest', 6), ('com.android.cts.atracetestapp.AtraceDeviceTests', 5), ('android.text.method.cts.DigitsKeyListenerTest', 5), ('android.media.cts.DecoderTest', 5), ('android.widget.cts.TimePickerTest', 4), ('android.view.cts.KeyEventInjectionTest', 4), ('android.widget.cts.ListPopupWindowTest', 4), ('android.media.cts.MediaActivityTest', 4), ('android.net.wifi.cts.WifiManagerTest', 3), ('android.app.cts.AlertDialog_BuilderTest', 3), ('android.autofillservice.cts.commontests.DatasetFilteringTest', 3), ('android.server.biometrics.BiometricCryptoTests', 3), ('android.app.cts.AlertDialogTest', 3), ('android.jobscheduler.cts.JobThrottlingTest', 3), ('android.mediav2.cts.ExtractorTest', 3), ('android.media.cts.MediaExtractorDeviceSideTest', 3), ('android.widget.cts.ExpandableListViewBasicTest', 3), ('android.widget.cts.AutoCompleteTextViewTest', 3), ('android.atrace.cts.AtraceHostTest', 2), ('android.webkit.cts.WebViewTest', 2), ('android.text.method.cts.MetaKeyKeyListenerTest', 2), ('android.os.cts.BuildTest', 2), ('android.widget.cts.GridViewTest', 2), ('android.widget.cts.ExpandableListViewWithHeadersTest', 2), ('android.appsecurity.cts.AuthBoundKeyTest', 2), ('com.android.cts.authboundkey.AuthBoundKeyAppTest', 2), ('android.view.inputmethod.cts.KeyboardVisibilityControlTest', 2), ('android.autofillservice.cts.dropdown.LoginActivityTest', 2), ('android.text.method.cts.TextKeyListenerTest', 2), ('android.view.inputmethod.cts.InputMethodServiceTest', 2), ('android.widget.cts.SpinnerTest', 2), ('android.view.cts.ContentPaneFocusTest', 2), ('android.keystore.cts.CipherTest', 2), ('android.hardware.camera2.cts.CameraManagerTest', 2), ('com.android.cts.releaseparser.SoParserTest', 2), ('android.server.wm.WindowFocusTests', 2), ('android.widget.cts.AbsListViewTest', 2), ('android.text.method.cts.BaseKeyListenerTest', 2), ('android.jobscheduler.cts.ConnectivityConstraintTest', 2), ('android.widget.cts.ListViewTest', 2), ('android.media.cts.MediaExtractorHostSideTest', 2), ('android.app.cts.InstrumentationTest', 2), ('android.media.cts.NativeDecoderTest', 1), ('android.binder.cts.JavaClientTest', 1), ('android.text.method.cts.PasswordTransformationMethodTest', 1), ('android.graphics.cts.AImageDecoderTest', 1), ('android.view.cts.KeyEventInterceptTest', 1), ('android.text.method.cts.DateKeyListenerTest', 1), ('android.widget.cts.BackwardNavigationTest', 1), ('android.widget.cts.NumberPickerTest', 1), ('android.widget.cts.ToolbarTest', 1), ('android.view.cts.SearchEventTest', 1), ('android.widget.cts.SearchView_CursorTest', 1), ('android.view.cts.View_InitialFocusTest', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.hdmicec.cts.audio.HdmiCecRemoteControlPassThroughTest', 1), ('android.widget.cts.DatePickerTest', 1), ('android.webkit.cts.WebViewClientTest', 1), ('android.app.cts.ActionBarTest', 1), ('android.view.inputmethod.cts.InputConnectionWrapperTest', 1), ('android.text.method.cts.DateTimeKeyListenerTest', 1), ('android.mediav2.cts.MuxerTest', 1), ('android.keystore.cts.KeyFactoryTest', 1), ('android.mediadrm.cts.NativeMediaDrmClearkeyTest', 1), ('android.keystore.cts.KeyChainTest', 1), ('android.os.cts.SharedMemoryTest', 1), ('android.text.method.cts.NumberKeyListenerTest', 1), ('android.util.cts.ArrayMapTest', 1), ('android.media.tv.cts.TvViewTest', 1), ('android.server.wm.LayoutTests', 1), ('android.media.cts.AudioPlayRoutingNative', 1), ('android.widget.cts.AbsSeekBarTest', 1), ('android.keystore.cts.SecretKeyFactoryTest', 1), ('android.widget.cts.TabHostTest', 1), ('android.view.cts.ASurfaceControlTest', 1), ('android.widget.cts.EditTextTest', 1), ('android.hardware.cts.SensorNativeTest', 1), ('android.widget.cts.SearchViewTest', 1), ('android.security.identity.cts.UserAuthTest', 1), ('android.mediadrm.cts.MediaDrmClearkeyTest', 1), ('android.app.cts.LauncherActivityTest', 1), ('android.hardware.camera2.cts.CaptureResultTest', 1), ('android.view.cts.TooltipTest', 1), ('android.media.cts.AudioRecordRoutingNative', 1), ('android.app.cts.ToolbarActionBarTest', 1), ('android.text.method.cts.TimeKeyListenerTest', 1), ('com.android.cts.appdataisolation.appa.AppATests', 1), ('android.graphics.cts.SyncTest', 1)]"	"[('getDevice', 15), ('setUp', 11), ('tearDown', 9), ('getInstrumentation', 8), ('getTargetContext', 4), ('ByteArrayOutputStream', 4), ('setup', 3), ('getActivity', 3), ('waitForIdleSync', 3), ('getContext', 3), ('getSimpleName', 3), ('getResources', 2), ('getContentResolver', 2), ('toByteArray', 2), ('recycle', 2), ('getLayoutInflater', 2), ('findFocus', 2), ('verifyLayoutInflaterContext', 2), ('getUiAutomation', 2), ('Builder', 2), ('openEventStream', 2), ('getEventName', 2), ('getOnBackPressedCallCount', 2), ('onBackPressed', 2), ('printStackTrace', 2), ('getKeyEventCount', 2), ('nativeSetUp', 2), ('getParent', 2), ('getMediaDirString', 1), ('getAssetManager', 1), ('getAssets', 1), ('assertTracingOn', 1), ('assertTracingOff', 1), ('beginEndSection', 1), ('asyncBeginEndSection', 1), ('counter', 1), ('hasAlpha', 1), ('getPackageManager', 1), ('useInvalidatedAuthBoundKey', 1), ('InstallMultiple', 1), ('run', 1), ('createDirectChannel', 1), ('getHighestDirectReportRateLevel', 1), ('cect_11_2_13_3_UserControlPressAndHoldWithNoRelease', 1), ('getReturnBooleanValue', 1), ('deviceHasMediaDrm', 1), ('watchHasNoClearkeySupport', 1), ('getLogTag', 1), ('DeviceLockSession', 1), ('LockScreenSession', 1), ('setLockCredential', 1), ('performDeviceLock', 1), ('sleepDevice', 1), ('getBytes', 1), ('Monitor', 1), ('Object', 1), ('getTooltipView', 1), ('requestLowProfileSystemUi', 1), ('teardown', 1)]"	"[('CtsWidgetTestCases', 45), ('CtsMediaTestCases', 29), ('CtsAppTestCases', 28), ('CtsViewTestCases', 17), ('CtsTextTestCases', 16), ('CtsGraphicsTestCases', 15), ('CtsAutoFillServiceTestCases', 5), ('CtsInputMethodTestCases', 5), ('CtsKeystoreTestCases', 5), ('CtsJobSchedulerTestCases', 5), ('CtsMediaV2TestCases', 4), ('CtsWebkitTestCases', 3), ('CtsWifiTestCases', 3), ('CtsBiometricsTestCases', 3), ('CtsCameraTestCases', 3), ('CtsWindowManagerDeviceTestCases', 3), ('CtsAtraceHostTestCases', 2), ('CtsAppSecurityHostTestCases', 2), ('CtsSensorTestCases', 2), ('CtsMediaDrmTestCases', 2), ('CtsMediaHostTestCases', 2), ('CtsNdkBinderTestCases', 1), ('CtsHdmiCecHostTestCases', 1), ('CtsUtilTestCases', 1), ('CtsTvTestCases', 1), ('CtsIdentityTestCases', 1)]"	""	""	""	""	"android.widget.cts.TextViewTest"	"teardown"	"CtsWidgetTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/VideoCodecTest.java', 17), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/DialogTest.java', 17), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 13), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/TextViewTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 6), ('/home/gpoor/cts-12-source/cts/hostsidetests/atrace/AtraceTestApp/src/com/android/cts/atracetestapp/AtraceDeviceTests.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/DigitsKeyListenerTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/TimePickerTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/KeyEventInjectionTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ListPopupWindowTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaActivityTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/AlertDialog_BuilderTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/commontests/DatasetFilteringTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/framework/base/biometrics/src/android/server/biometrics/BiometricCryptoTests.java', 3), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/AlertDialogTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/JobScheduler/src/android/jobscheduler/cts/JobThrottlingTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/ExtractorTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/media/app/MediaExtractorTest/src/android/media/cts/MediaExtractorDeviceSideTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewBasicTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/AutoCompleteTextViewTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/atrace/src/android/atrace/cts/AtraceHostTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/MetaKeyKeyListenerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/BuildTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/GridViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewWithHeadersTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AuthBoundKeyTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AuthBoundKeyApp/src/com/android/cts/authboundkey/AuthBoundKeyAppTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/dropdown/LoginActivityTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/TextKeyListenerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodServiceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/SpinnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ContentPaneFocusTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/CipherTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tools/release-parser/tests/src/com/android/cts/releaseparser/SoParserTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowFocusTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/AbsListViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/BaseKeyListenerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/JobScheduler/src/android/jobscheduler/cts/ConnectivityConstraintTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ListViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/media/src/android/media/cts/MediaExtractorHostSideTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/InstrumentationTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/NativeDecoderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/binder_ndk/src/android/binder/cts/JavaClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/PasswordTransformationMethodTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/AImageDecoderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/KeyEventInterceptTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/DateKeyListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/BackwardNavigationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/NumberPickerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ToolbarTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/SearchEventTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/SearchView_CursorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/View_InitialFocusTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/audio/HdmiCecRemoteControlPassThroughTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/DatePickerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActionBarTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputConnectionWrapperTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/DateTimeKeyListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/MuxerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyFactoryTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/mediadrm/src/android/mediadrm/cts/NativeMediaDrmClearkeyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyChainTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/SharedMemoryTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/NumberKeyListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/util/src/android/util/cts/ArrayMapTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/tv/src/android/media/tv/cts/TvViewTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/LayoutTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioPlayRoutingNative.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/AbsSeekBarTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/SecretKeyFactoryTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/TabHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/EditTextTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorNativeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/SearchViewTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/UserAuthTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/mediadrm/src/android/mediadrm/cts/MediaDrmClearkeyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/LauncherActivityTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/TooltipTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioRecordRoutingNative.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ToolbarActionBarTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/TimeKeyListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppDataIsolationTestApp/AppA/src/com/android/cts/appdataisolation/appa/AppATests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/SyncTest.java', 1)]"	"[('(5,NDK,/android/media/cts/NativeDecoderTest.java)', 1), ('(1,NDK,/android/binder/cts/JavaClientTest.java)', 1), ('(23,NDK,/android/media/cts/VideoCodecTest.java)', 1), ('(7,NDK,/android/atrace/cts/AtraceHostTest.java)', 1), ('(2,NDK,/android/text/method/cts/PasswordTransformationMethodTest.java)', 1), ('(1,NDK,/android/graphics/cts/AImageDecoderTest.java)', 1), ('(3,NDK,/android/webkit/cts/WebViewTest.java)', 1), ('(2,NDK,/android/view/cts/KeyEventInterceptTest.java)', 1), ('(8,NDK,/com/android/cts/atracetestapp/AtraceDeviceTests.java)', 1), ('(2,NDK,/android/text/method/cts/MetaKeyKeyListenerTest.java)', 1), ('(6,NDK,/android/text/method/cts/DateKeyListenerTest.java)', 1), ('(2,NDK,/android/os/cts/BuildTest.java)', 1), ('(12,NDK,/android/widget/cts/GridViewTest.java)', 1), ('(90,NDK,/android/widget/cts/TimePickerTest.java)', 1), ('(2,NDK,/android/widget/cts/BackwardNavigationTest.java)', 1), ('(2,NDK,/android/widget/cts/NumberPickerTest.java)', 1), ('(2,NDK,/android/widget/cts/ExpandableListViewWithHeadersTest.java)', 1), ('(6,NDK,/android/view/cts/KeyEventInjectionTest.java)', 1), ('(1,NDK,/android/widget/cts/ToolbarTest.java)', 1), ('(27,NDK,/android/text/method/cts/DigitsKeyListenerTest.java)', 1), ('(4,NDK,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(1,NDK,/android/view/cts/SearchEventTest.java)', 1), ('(4,NDK,/android/app/cts/AlertDialog_BuilderTest.java)', 1), ('(27,NDK,/android/graphics/cts/BitmapTest.java)', 1), ('(2,NDK,/android/widget/cts/SearchView_CursorTest.java)', 1), ('(10,NDK,/android/autofillservice/cts/commontests/DatasetFilteringTest.java)', 1), ('(1,NDK,/android/view/cts/View_InitialFocusTest.java)', 1), ('(6,NDK,/android/appsecurity/cts/AuthBoundKeyTest.java)', 1), ('(1,NDK,/android/hardware/cts/SensorDirectReportTest.java)', 1), ('(1,NDK,/android/hdmicec/cts/audio/HdmiCecRemoteControlPassThroughTest.java)', 1), ('(3,NDK,/com/android/cts/authboundkey/AuthBoundKeyAppTest.java)', 1), ('(6,NDK,/android/server/biometrics/BiometricCryptoTests.java)', 1), ('(8,NDK,/android/widget/cts/DatePickerTest.java)', 1), ('(2,NDK,/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java)', 1), ('(2,NDK,/android/autofillservice/cts/dropdown/LoginActivityTest.java)', 1), ('(1,NDK,/android/webkit/cts/WebViewClientTest.java)', 1), ('(2,NDK,/android/app/cts/ActionBarTest.java)', 1), ('(2,NDK,/android/text/method/cts/TextKeyListenerTest.java)', 1), ('(2,NDK,/android/view/inputmethod/cts/InputConnectionWrapperTest.java)', 1), ('(4,NDK,/android/text/method/cts/DateTimeKeyListenerTest.java)', 1), ('(4,NDK,/android/view/inputmethod/cts/InputMethodServiceTest.java)', 1), ('(2,NDK,/android/widget/cts/SpinnerTest.java)', 1), ('(5,NDK,/android/view/cts/ContentPaneFocusTest.java)', 1), ('(1,NDK,/android/mediav2/cts/MuxerTest.java)', 1), ('(2,NDK,/android/keystore/cts/CipherTest.java)', 1), ('(4,NDK,/android/app/cts/AlertDialogTest.java)', 1), ('(1,NDK,/android/keystore/cts/KeyFactoryTest.java)', 1), ('(3,NDK,/android/mediadrm/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(3,NDK,/android/hardware/camera2/cts/CameraManagerTest.java)', 1), ('(5,NDK,/android/keystore/cts/KeyChainTest.java)', 1), ('(1,NDK,/android/os/cts/SharedMemoryTest.java)', 1), ('(16,NDK,/android/media/cts/DecoderTest.java)', 1), ('(3,NDK,/android/text/method/cts/NumberKeyListenerTest.java)', 1), ('(6,NDK,/com/android/cts/releaseparser/SoParserTest.java)', 1), ('(2,NDK,/android/util/cts/ArrayMapTest.java)', 1), ('(1,NDK,/android/media/tv/cts/TvViewTest.java)', 1), ('(6,NDK,/android/server/wm/WindowFocusTests.java)', 1), ('(1,NDK,/android/server/wm/LayoutTests.java)', 1), ('(2,NDK,/android/media/cts/AudioPlayRoutingNative.java)', 1), ('(2,NDK,/android/widget/cts/AbsSeekBarTest.java)', 1), ('(1,NDK,/android/keystore/cts/SecretKeyFactoryTest.java)', 1), ('(10,NDK,/android/widget/cts/ListPopupWindowTest.java)', 1), ('(4,NDK,/android/widget/cts/AbsListViewTest.java)', 1), ('(12,NDK,/android/widget/cts/TabHostTest.java)', 1), ('(8,NDK,/android/media/cts/MediaActivityTest.java)', 1), ('(9,NDK,/android/text/method/cts/BaseKeyListenerTest.java)', 1), ('(3,NDK,/android/jobscheduler/cts/JobThrottlingTest.java)', 1), ('(2,NDK,/android/view/cts/ASurfaceControlTest.java)', 1), ('(22,NDK,/android/app/cts/DialogTest.java)', 1), ('(2,NDK,/android/widget/cts/EditTextTest.java)', 1), ('(2,NDK,/android/hardware/cts/SensorNativeTest.java)', 1), ('(2,NDK,/android/widget/cts/SearchViewTest.java)', 1), ('(2,NDK,/android/jobscheduler/cts/ConnectivityConstraintTest.java)', 1), ('(2,NDK,/android/security/identity/cts/UserAuthTest.java)', 1), ('(2,NDK,/android/mediadrm/cts/MediaDrmClearkeyTest.java)', 1), ('(4,NDK,/android/app/cts/LauncherActivityTest.java)', 1), ('(8,NDK,/android/hardware/camera2/cts/CaptureResultTest.java)', 1), ('(2,NDK,/android/view/cts/TooltipTest.java)', 1), ('(2,NDK,/android/media/cts/AudioRecordRoutingNative.java)', 1), ('(12,NDK,/android/mediav2/cts/ExtractorTest.java)', 1), ('(5,NDK,/android/media/cts/MediaExtractorDeviceSideTest.java)', 1), ('(2,NDK,/android/app/cts/ToolbarActionBarTest.java)', 1), ('(3,NDK,/android/widget/cts/ListViewTest.java)', 1), ('(4,NDK,/android/text/method/cts/TimeKeyListenerTest.java)', 1), ('(6,NDK,/android/media/cts/MediaExtractorHostSideTest.java)', 1), ('(4,NDK,/android/app/cts/InstrumentationTest.java)', 1), ('(3,NDK,/android/widget/cts/ExpandableListViewBasicTest.java)', 1), ('(1,NDK,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(25,NDK,/android/view/cts/ViewTest.java)', 1), ('(1,NDK,/android/graphics/cts/SyncTest.java)', 1), ('(14,NDK,/android/widget/cts/AutoCompleteTextViewTest.java)', 1), ('(21,NDK,/android/widget/cts/TextViewTest.java)', 1)]"	"[('([6:/android/text/method/cts/DigitsKeyListenerTest.java]:[NDK]:[6]:method_text:[ not be accepted,     *     because text view accepts only one decimal point per field.     */   ])', 2), ('([2:/android/media/cts/DecoderTest.java]:[NDK]:[2]:method_text:[              true /* useNdk */);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.R)   ])', 2), ('([4:/android/widget/cts/ListPopupWindowTest.java]:[NDK]:[4]:method_text:[ectedListener);        verifyNoMoreInteractions(mPopupWindowBuilder.mOnDismissListener);    }   ])', 2), ('([2:/android/widget/cts/TextViewTest.java]:[NDK]:[2]:method_text:[ mTextView.getText().toString());        });        mInstrumentation.waitForIdleSync();    }   ])', 2), ('([5:/android/media/cts/NativeDecoderTest.java]:[NDK]:[5]:method_text:[     if (testsRun == 0) {            MediaUtils.skipTest(""no decoders found"");        }    }   ])', 1), ('([1:/android/binder/cts/JavaClientTest.java]:[NDK]:[1]:method_text:[bleLater(""a""));        assertEquals(""foo"", compatTest.RepeatStringNullableLater(""foo""));    }   ])', 1), ('([7:/android/media/cts/VideoCodecTest.java]:[NDK]:[7]:method_text:[                        "" for bitrate "" + TEST_BITRATES_SET[i]);            }        }    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[rows Exception {        internalTestSyncFrame(VP8_MIME, VIDEO_ControlRateConstant, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[ows Exception {        internalTestSyncFrame(VP8_MIME, VIDEO_ControlRateVariable, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[rows Exception {        internalTestSyncFrame(VP9_MIME, VIDEO_ControlRateConstant, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[ows Exception {        internalTestSyncFrame(VP9_MIME, VIDEO_ControlRateVariable, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[rows Exception {        internalTestSyncFrame(AVC_MIME, VIDEO_ControlRateConstant, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[ows Exception {        internalTestSyncFrame(AVC_MIME, VIDEO_ControlRateVariable, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[ows Exception {        internalTestSyncFrame(HEVC_MIME, VIDEO_ControlRateConstant, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[ws Exception {        internalTestSyncFrame(HEVC_MIME, VIDEO_ControlRateVariable, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[ion {        internalTestDynamicBitrateChange(VP8_MIME, VIDEO_ControlRateConstant, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[ion {        internalTestDynamicBitrateChange(VP8_MIME, VIDEO_ControlRateVariable, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[ion {        internalTestDynamicBitrateChange(VP9_MIME, VIDEO_ControlRateConstant, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[ion {        internalTestDynamicBitrateChange(VP9_MIME, VIDEO_ControlRateVariable, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[ion {        internalTestDynamicBitrateChange(AVC_MIME, VIDEO_ControlRateConstant, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[ion {        internalTestDynamicBitrateChange(AVC_MIME, VIDEO_ControlRateVariable, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[on {        internalTestDynamicBitrateChange(HEVC_MIME, VIDEO_ControlRateConstant, true);    }   ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[NDK]:[1]:method_text:[n {        internalTestDynamicBitrateChange(HEVC_MIME, VIDEO_ControlRateVariable, true);    }   ])', 1), ('([3:/android/atrace/cts/AtraceHostTest.java]:[NDK]:[3]:method_text:[ead.getSlices().get(1);        assertEquals(""ndk::beginEndSection"", ndkSlice.getName());    }   ])', 1), ('([4:/android/atrace/cts/AtraceHostTest.java]:[NDK]:[4]:method_text:[cBeginEndSection"", ndkSlice.getName());        assertEquals(4770, ndkSlice.getCookie());    }   ])', 1), ('([2:/android/text/method/cts/PasswordTransformationMethodTest.java]:[NDK]:[2]:method_text:[nsformedText.toString()                .equals(""\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022""));    }   ])', 1), ('([1:/android/graphics/cts/AImageDecoderTest.java]:[NDK]:[1]:method_text:[ANDROID_BITMAP_FORMAT_A_8 = 8;    private static final int ANDROID_BITMAP_FORMAT_RGBA_F16 = 9;   ])', 1), ('([2:/android/webkit/cts/WebViewTest.java]:[NDK]:[2]:method_text:[ertEquals(url2, handler.getResultUrl());        mOnUiThread.requestFocusNodeHref(null);    }   ])', 1), ('([1:/android/webkit/cts/WebViewTest.java]:[NDK]:[1]:method_text:[test should be reflected in that test as necessary. See http://go/modifying-webview-cts.     */   ])', 1), ('([2:/android/view/cts/KeyEventInterceptTest.java]:[NDK]:[2]:method_text:[tEquals(keyCode, keyEvent.getKeyCode());        assertEquals(action, keyEvent.getAction());    }}])', 1), ('([1:/com/android/cts/atracetestapp/AtraceDeviceTests.java]:[NDK]:[1]:method_text:[        assertTrue(Trace.isEnabled());        assertTrue(AtraceNdkMethods.isEnabled());    }   ])', 1), ('([1:/com/android/cts/atracetestapp/AtraceDeviceTests.java]:[NDK]:[1]:method_text:[       assertFalse(Trace.isEnabled());        assertFalse(AtraceNdkMethods.isEnabled());    }   ])', 1), ('([2:/com/android/cts/atracetestapp/AtraceDeviceTests.java]:[NDK]:[2]:method_text:[eginEndSection"");        Trace.endSection();        AtraceNdkMethods.beginEndSection();    }   ])', 1), ('([2:/com/android/cts/atracetestapp/AtraceDeviceTests.java]:[NDK]:[2]:method_text:[eDeviceTest::asyncBeginEndSection"", 42);        AtraceNdkMethods.asyncBeginEndSection();    }   ])', 1), ('([2:/com/android/cts/atracetestapp/AtraceDeviceTests.java]:[NDK]:[2]:method_text:[r(""AtraceDeviceTest::counter"", 9223372000000005807L);        AtraceNdkMethods.counter();    }   ])', 1), ('([1:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[NDK]:[1]:method_text:[      assertEquals(KeyEvent.META_SHIFT_MASK, MetaKeyKeyListener.getMetaState("""", event));    }   ])', 1), ('([1:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[NDK]:[1]:method_text:[eyKeyListener.getMetaState(null, MetaKeyKeyListener.META_SYM_ON,                event));    }   ])', 1), ('([6:/android/text/method/cts/DateKeyListenerTest.java]:[NDK]:[6]:method_text:[protected char[] getAcceptedChars() {            return super.getAcceptedChars();        }    }}])', 1), ('([1:/android/os/cts/BuildTest.java]:[NDK]:[1]:method_text:[ile(""^([0-9A-Za-z._-]+)$"");    /** Tests that check for valid values of constants in Build. */   ])', 1), ('([1:/android/os/cts/BuildTest.java]:[NDK]:[1]:method_text:[rFormatException ignore) {            return Build.VERSION_CODES.CUR_DEVELOPMENT;        }    }}])', 1), ('([10:/android/widget/cts/GridViewTest.java]:[NDK]:[10]:method_text:[eq(mGridView), any(View.class),                eq(NUM_COLUMNS), eq((long) NUM_COLUMNS));    }   ])', 1), ('([2:/android/widget/cts/GridViewTest.java]:[NDK]:[2]:method_text:[iew.mOnDetachCount);        assertFalse(theView.isTemporarilyDetached());    }    @LargeTest   ])', 1), ('([18:/android/widget/cts/TimePickerTest.java]:[NDK]:[18]:method_text:[        assertEquals(43, mTimePicker.getMinute());        verifyModeClockMinuteInput();    }   ])', 1), ('([11:/android/widget/cts/TimePickerTest.java]:[NDK]:[11]:method_text:[        assertEquals(43, mTimePicker.getMinute());        verifyModeClockMinuteInput();    }   ])', 1), ('([26:/android/widget/cts/TimePickerTest.java]:[NDK]:[26]:method_text:[(6, mTimePicker.getHour());        assertEquals(initialMinute, mTimePicker.getMinute());    }   ])', 1), ('([35:/android/widget/cts/TimePickerTest.java]:[NDK]:[35]:method_text:[Parcelable onSaveInstanceState() {            return super.onSaveInstanceState();        }    }}])', 1), ('([2:/android/widget/cts/BackwardNavigationTest.java]:[NDK]:[2]:method_text:[vent.KEYCODE_SHIFT_LEFT);            assertTrue(mFocusedViews.get(i).hasFocus());        }    }}])', 1), ('([2:/android/widget/cts/NumberPickerTest.java]:[NDK]:[2]:method_text:[           MotionEvent.ACTION_UP, x, y, 0);        mInstrumentation.sendPointerSync(event);    }}])', 1), ('([1:/android/widget/cts/ExpandableListViewWithHeadersTest.java]:[NDK]:[1]:method_text:[View, null);        assertFalse(mExpandableListView.isGroupExpanded(0));    }    @LargeTest   ])', 1), ('([1:/android/widget/cts/ExpandableListViewWithHeadersTest.java]:[NDK]:[1]:method_text:[ mExpandableListView, null);        assertTrue(mExpandableListView.isGroupExpanded(0));    }   ])', 1), ('([1:/android/view/cts/KeyEventInjectionTest.java]:[NDK]:[1]:method_text:[gPress(TEST_KEYCODE);    }    /**     * Long press event can be injected through ADB     */   ])', 1), ('([1:/android/view/cts/KeyEventInjectionTest.java]:[NDK]:[1]:method_text:[ess(TEST_KEYCODE);    }    /**     * Inject a regular key event through UiAutomation     */   ])', 1), ('([1:/android/view/cts/KeyEventInjectionTest.java]:[NDK]:[1]:method_text:[heckKeyPress(TEST_KEYCODE);    }    /**     * Inject a regular key event through ADB     */   ])', 1), ('([3:/android/view/cts/KeyEventInjectionTest.java]:[NDK]:[3]:method_text:[ent(KeyEvent.ACTION_UP, keyCode, 0 /* repeatCount */);        assertLongPressNotReceived();    }}])', 1), ('([1:/android/widget/cts/ToolbarTest.java]:[NDK]:[1]:method_text:[Equals(0, mActivity.mPrepareMenuCount);        assertEquals(0, mActivity.mCreateMenuCount);    }}])', 1), ('([4:/android/text/method/cts/DigitsKeyListenerTest.java]:[NDK]:[4]:method_text:[ot be accepted,     *     because text view accepts minus sign iff it at the beginning.     */   ])', 1), (""([6:/android/text/method/cts/DigitsKeyListenerTest.java]:[NDK]:[6]:method_text:[ed.     *  5. remove DigitsKeyListener and Press '5' key, this key will not be accepted     */   ])"", 1), ('([5:/android/text/method/cts/DigitsKeyListenerTest.java]:[NDK]:[5]:method_text:[TextView, KeyEvent.KEYCODE_5);        assertEquals(""5"", mTextView.getText().toString());    }   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[NDK]:[1]:method_text:[ck(capabilityCallback);            uiAutomation.dropShellPermissionIdentity();        }    }   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[NDK]:[1]:method_text:[ Verify that startTetheredHotspot with specific channel config.     * @throws Exception     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[NDK]:[2]:method_text:[fiManager#connect(int, WifiManager.ActionListener)} to an existing saved     * network.     */   ])', 1), ('([1:/android/view/cts/SearchEventTest.java]:[NDK]:[1]:method_text:[e id = se.getInputDevice();        assertNotNull(id);        assertEquals(-1, id.getId());    }}])', 1), ('([1:/android/app/cts/AlertDialog_BuilderTest.java]:[NDK]:[1]:method_text:[wing                    return showing;                }            }        }.run();    }   ])', 1), ('([2:/android/app/cts/AlertDialog_BuilderTest.java]:[NDK]:[2]:method_text:[     assertEquals(KeyEvent.ACTION_UP, keyEvent1Captor.getAllValues().get(1).getAction());    }   ])', 1), ('([1:/android/app/cts/AlertDialog_BuilderTest.java]:[NDK]:[1]:method_text:[nregisterDataSetObserver(            android.database.DataSetObserver observer) {        }    }}])', 1), ('([2:/android/graphics/cts/BitmapTest.java]:[NDK]:[2]:method_text:[t,                nCompress(bitmap, nativeCompressFormat(format), 50, stream, storage));    }   ])', 1), ('([2:/android/graphics/cts/BitmapTest.java]:[NDK]:[2]:method_text:[    nValidateBitmapInfo(hardware, 10, 20, true);        nValidateNdkAccessFails(bitmap);    }   ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[NDK]:[1]:method_text:[            assertEquals(""Config: "" + pair.config, pair.format, nativeFormat);        }    }   ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[NDK]:[1]:method_text:[ssertEquals(""Config: "" + pair.config, pair.format, nativeFormat);            }        }    }   ])', 1), ('([2:/android/graphics/cts/BitmapTest.java]:[NDK]:[2]:method_text:[            new Object[] { Config.RGBA_F16,  ANDROID_BITMAP_FORMAT_RGBA_F16 },        };    }   ])', 1), ('([2:/android/graphics/cts/BitmapTest.java]:[NDK]:[2]:method_text:[Bitmap.recycle();                }                bm.recycle();            }        }    }   ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[NDK]:[1]:method_text:[            assertEquals(DataSpace.ADATASPACE_SCRGB_LINEAR, nGetDataSpace(bm));        }    }   ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[NDK]:[1]:method_text:[ssertEquals(DataSpace.ADATASPACE_SRGB_LINEAR, nGetDataSpace(bm));            }        }    }   ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[NDK]:[1]:method_text:[e.fromColorSpace(colorSpace),                        dataSpace);            }        }    }   ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[NDK]:[1]:method_text:[Space = nGetDataSpace(bm);        assertEquals(DataSpace.ADATASPACE_UNKNOWN, dataSpace);    }   ])', 1), ('([3:/android/graphics/cts/BitmapTest.java]:[NDK]:[3]:method_text:[ paint = new Paint();        paint.setShader(gradient);        canvas.drawPaint(paint);    }   ])', 1), ('([6:/android/graphics/cts/BitmapTest.java]:[NDK]:[6]:method_text:[          + "" at quality "" + quality, matched);                }            }        }    }   ])', 1), ('([4:/android/graphics/cts/BitmapTest.java]:[NDK]:[4]:method_text:[tory.Options();        options.inPreferredConfig = Config.HARDWARE;        return options;    }}])', 1), ('([2:/android/widget/cts/SearchView_CursorTest.java]:[NDK]:[2]:method_text:[, times(2)).onSuggestionClick(0);        verifyNoMoreInteractions(mockSuggestionListener);    }}])', 1), ('([1:/android/autofillservice/cts/commontests/DatasetFilteringTest.java]:[NDK]:[1]:method_text:[ence username) {        mActivity.onUsername((v) -> v.setText(username));    }    @Presubmit   ])', 1), ('([7:/android/autofillservice/cts/commontests/DatasetFilteringTest.java]:[NDK]:[7]:method_text:[UiHiddenEvent(mActivity.getUsername());        mUiBot.assertNoDatasets();    }    @Presubmit   ])', 1), ('([2:/android/autofillservice/cts/commontests/DatasetFilteringTest.java]:[NDK]:[2]:method_text:[dKeyEvent(""KEYCODE_B"");        mUiBot.assertDatasets(regexPlain, authRegex, kitchnSync);    }   ])', 1), ('([1:/android/view/cts/View_InitialFocusTest.java]:[NDK]:[1]:method_text:[ch-mode        View first = root.findFocus();        return new View[]{initial, first};    }   ])', 1), ('([4:/android/appsecurity/cts/AuthBoundKeyTest.java]:[NDK]:[4]:method_text:[    public void tearDown() throws Exception {        getDevice().uninstallPackage(PKG);    }   ])', 1), ('([2:/android/appsecurity/cts/AuthBoundKeyTest.java]:[NDK]:[2]:method_text:[           getDevice().executeShellCommand(""cmd lock_settings clear --old 12345"");        }    }}])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[NDK]:[1]:method_text:[ChannelSecondary = null;        }        freeSharedMemory();        super.tearDown();    }   ])', 1), ('([1:/android/hdmicec/cts/audio/HdmiCecRemoteControlPassThroughTest.java]:[NDK]:[1]:method_text:[     * [secondKeycode]} before a {@code <User Control Released> [firstKeycode]} is sent.     */   ])', 1), ('([2:/com/android/cts/authboundkey/AuthBoundKeyAppTest.java]:[NDK]:[2]:method_text:[inal String KEY_NAME = ""nice_key"";    private static final String KEYSTORE = ""AndroidKeyStore"";   ])', 1), ('([1:/com/android/cts/authboundkey/AuthBoundKeyAppTest.java]:[NDK]:[1]:method_text:[    assertEquals(KeyProperties.AUTH_DEVICE_CREDENTIAL, info.getUserAuthenticationType());    }   ])', 1), ('([1:/android/server/biometrics/BiometricCryptoTests.java]:[NDK]:[1]:method_text:[undKey(""keyBeforeCredentialEnrolled"",                        false /* useStrongBox */));    }   ])', 1), ('([1:/android/server/biometrics/BiometricCryptoTests.java]:[NDK]:[1]:method_text:[foreBiometricEnrolled"",                            false /* useStrongBox */));        }    }   ])', 1), ('([4:/android/server/biometrics/BiometricCryptoTests.java]:[NDK]:[4]:method_text:[);                        }                    }                }            }        }    }}])', 1), ('([8:/android/widget/cts/DatePickerTest.java]:[NDK]:[8]:method_text:[CalledOnRestoreInstanceState() {            return mCalledOnRestoreInstanceState;        }    }}])', 1), ('([1:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[NDK]:[1]:method_text:[                  View.GONE, TIMEOUT);            expectImeInvisible(TIMEOUT);        }    }   ])', 1), ('([1:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[NDK]:[1]:method_text:[nsure it.        builder.setNavigationBarColor(navigationBarColor);        return builder;    }}])', 1), ('([1:/android/autofillservice/cts/dropdown/LoginActivityTest.java]:[NDK]:[1]:method_text:[tends LoginActivityCommonTestCase {    private static final String TAG = ""LoginActivityTest"";   ])', 1), ('([1:/android/autofillservice/cts/dropdown/LoginActivityTest.java]:[NDK]:[1]:method_text:[eck the results.        mActivity.assertAutoFilled();        mUiBot.assertNoDatasets();    }   ])', 1), ('([1:/android/webkit/cts/WebViewClientTest.java]:[NDK]:[1]:method_text:[      return webViewClient.hasOnUnhandledKeyEventCalled();            }        }.run();    }   ])', 1), ('([2:/android/app/cts/ActionBarTest.java]:[NDK]:[2]:method_text:[owFocusSignal.await(1000, TimeUnit.MILLISECONDS));        assertFalse(menuIsVisible[0]);    }   ])', 1), ('([1:/android/text/method/cts/TextKeyListenerTest.java]:[NDK]:[1]:method_text:[ else {            assertEquals("""", text);        }        textKeyListener.release();    }   ])', 1), ('([1:/android/text/method/cts/TextKeyListenerTest.java]:[NDK]:[1]:method_text:[(text, mTextView.getText().toString()); issue 1731439        textKeyListener.release();    }   ])', 1), ('([2:/android/view/inputmethod/cts/InputConnectionWrapperTest.java]:[NDK]:[2]:method_text:[ */);        verify(inputConnection, times(1)).commitContent(inputContentInfo, 0, null);    }   ])', 1), ('([4:/android/text/method/cts/DateTimeKeyListenerTest.java]:[NDK]:[4]:method_text:[protected char[] getAcceptedChars() {            return super.getAcceptedChars();        }    }}])', 1), ('([1:/android/view/inputmethod/cts/InputMethodServiceTest.java]:[NDK]:[1]:method_text:[) {                // This is fine.  We actually expect timeout.            }        }    }   ])', 1), ('([3:/android/view/inputmethod/cts/InputMethodServiceTest.java]:[NDK]:[3]:method_text:[putMethodService#onUpdateCursorAnchorInfo(CursorAnchorInfo)}     * will be called back.     */   ])', 1), ('([1:/android/widget/cts/SpinnerTest.java]:[NDK]:[1]:method_text:[, dropDownBackground.getBounds().height(),                false, Color.YELLOW, 1, true);    }   ])', 1), ('([1:/android/widget/cts/SpinnerTest.java]:[NDK]:[1]:method_text:[erruptedException e) {            fail(""unexpected InterruptedException : ""+ e);        }    }}])', 1), ('([2:/android/view/cts/ContentPaneFocusTest.java]:[NDK]:[2]:method_text:[eens.            mActivityRule.runOnUiThread(() -> assertTrue(v1.hasFocus()));        }    }   ])', 1), ('([3:/android/view/cts/ContentPaneFocusTest.java]:[NDK]:[3]:method_text:[vent.META_META_ON);        mInstrumentation.sendKeySync(keyEvent);        Thread.sleep(2);    }}])', 1), ('([1:/android/mediav2/cts/MuxerTest.java]:[NDK]:[1]:method_text:[ate class, like TestNoCSDMux, instead of being part of         * TestSimpleMux?         */       ])', 1), ('([1:/android/keystore/cts/CipherTest.java]:[NDK]:[1]:method_text:[red)) {                    assertNotNull(key);                }            }        }    }   ])', 1), ('([1:/android/keystore/cts/CipherTest.java]:[NDK]:[1]:method_text:[atch (KeyStoreException e) {                // Expected behavior            }        }    }   ])', 1), ('([2:/android/app/cts/AlertDialogTest.java]:[NDK]:[2]:method_text:[nt(KeyEvent.ACTION_UP, KeyEvent.KEYCODE_0));        assertTrue(mActivity.onKeyUpCalled);    }   ])', 1), ('([1:/android/app/cts/AlertDialogTest.java]:[NDK]:[1]:method_text:[ync(KeyEvent.KEYCODE_BACK);        PollingCheck.waitFor(() -> mActivity.onCancelCalled);    }   ])', 1), ('([1:/android/app/cts/AlertDialogTest.java]:[NDK]:[1]:method_text:[.sendKeyDownUpSync(KeyEvent.KEYCODE_BACK);        assertFalse(mActivity.onCancelCalled);    }   ])', 1), ('([1:/android/keystore/cts/KeyFactoryTest.java]:[NDK]:[1]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([3:/android/mediadrm/cts/NativeMediaDrmClearkeyTest.java]:[NDK]:[3]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([1:/android/hardware/camera2/cts/CameraManagerTest.java]:[NDK]:[1]:method_text:[    }    // Test: that properties queried between the Java SDK and the C++ NDK are equivalent.   ])', 1), ('([2:/android/hardware/camera2/cts/CameraManagerTest.java]:[NDK]:[2]:method_text:[t lensFacing);    // Test: that an exception is thrown if an invalid device id is passed down.   ])', 1), ('([5:/android/keystore/cts/KeyChainTest.java]:[NDK]:[5]:method_text:[ger();        return (pm != null && pm.hasSystemFeature(""android.software.leanback_only""));    }}])', 1), ('([1:/android/os/cts/SharedMemoryTest.java]:[NDK]:[1]:method_text:[sertFalse(nWriteByte(sharedMemory, 0, (byte) 2));        assertEquals(5, buffer.get(0));    }   ])', 1), ('([2:/android/media/cts/DecoderTest.java]:[NDK]:[2]:method_text:[384kbps_32000hz.webm"", 300,                true /* useNdk */);    }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/DecoderTest.java]:[NDK]:[2]:method_text:[_128kbps_44100hz.mp4"", 300,                true /* useNdk */);    }    @NonMediaMainlineTest   ])', 1), ('([8:/android/media/cts/DecoderTest.java]:[NDK]:[8]:method_text:[ntation());        decoder.stop();        decoder.release();        extractor.release();    }}])', 1), ('([3:/android/text/method/cts/NumberKeyListenerTest.java]:[NDK]:[3]:method_text:[k(accept, c);        }        public int getInputType() {            return 0;        }    }}])', 1), ('([3:/com/android/cts/releaseparser/SoParserTest.java]:[NDK]:[3]:method_text:[    /**     * Test {@link SoParser} with an NDK SO file     *     * @throws Exception     */   ])', 1), ('([3:/com/android/cts/releaseparser/SoParserTest.java]:[NDK]:[3]:method_text:[     * Test {@link SoParser} with an CTS GTEST EXE file     *     * @throws Exception     */   ])', 1), ('([2:/android/util/cts/ArrayMapTest.java]:[NDK]:[2]:method_text:[next();            fail();        } catch (NoSuchElementException expected) {        }    }   ])', 1), ('([1:/android/media/tv/cts/TvViewTest.java]:[NDK]:[1]:method_text:[yEvent.getAction());        assertEquals(unhandled.getKeyCode(), keyEvent.getKeyCode());    }   ])', 1), ('([3:/android/server/wm/WindowFocusTests.java]:[NDK]:[3]:method_text:[     * - The window which lost top-focus can receive display-unspecified cancel events.     */   ])', 1), ('([3:/android/server/wm/WindowFocusTests.java]:[NDK]:[3]:method_text:[ Test if a display targeted by a key event can be moved to top in a single-focus system.     */   ])', 1), ('([1:/android/server/wm/LayoutTests.java]:[NDK]:[1]:method_text:[ (activity) {                return childWindowGotKeyEvent[0];            }        });    }   ])', 1), ('([2:/android/media/cts/AudioPlayRoutingNative.java]:[NDK]:[2]:method_text:[  }    //    // Tests    //    // Test a basic Aquire/Release cycle on the default player.   ])', 1), ('([2:/android/widget/cts/AbsSeekBarTest.java]:[NDK]:[2]:method_text:[yEvent);        assertEquals(oldProgress - keyProgressIncrement, seekBar.getProgress());    }   ])', 1), ('([1:/android/keystore/cts/SecretKeyFactoryTest.java]:[NDK]:[1]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([1:/android/widget/cts/ListPopupWindowTest.java]:[NDK]:[1]:method_text:[r.mOnDismissListener, never()).onDismiss();        assertTrue(mPopupWindow.isShowing());    }   ])', 1), ('([1:/android/widget/cts/ListPopupWindowTest.java]:[NDK]:[1]:method_text:[mOnDismissListener, times(1)).onDismiss();        assertFalse(mPopupWindow.isShowing());    }   ])', 1), ('([2:/android/widget/cts/AbsListViewTest.java]:[NDK]:[2]:method_text:[mListView.getSelectedItemPosition());        assertTrue(mListView.shouldDrawSelector());    }   ])', 1), ('([2:/android/widget/cts/AbsListViewTest.java]:[NDK]:[2]:method_text:[oid resetIsOnScrollChangedCalled() {            mIsOnScrollChangedCalled = false;        }    }}])', 1), ('([12:/android/widget/cts/TabHostTest.java]:[NDK]:[12]:method_text:[0,                        KeyEvent.normalizeMetaState(metaState)));            }        }    }}])', 1), ('([1:/android/media/cts/MediaActivityTest.java]:[NDK]:[1]:method_text:[hanges a stream volume even after the session is released,     * without being ignored.     */   ])', 1), ('([2:/android/media/cts/MediaActivityTest.java]:[NDK]:[2]:method_text:[yEvent.KEYCODE_VOLUME_UP);            return checkAnyStreamVolumeChanged();        }));    }   ])', 1), ('([1:/android/media/cts/MediaActivityTest.java]:[NDK]:[1]:method_text:[ent(testKeyEvent);        assertTrue(latch.await(WAIT_TIME_MS, TimeUnit.MILLISECONDS));    }   ])', 1), ('([4:/android/media/cts/MediaActivityTest.java]:[NDK]:[4]:method_text:[unexpected InterruptedException"");            }        }        return pollingCount >= 0;    }}])', 1), ('([6:/android/text/method/cts/BaseKeyListenerTest.java]:[NDK]:[6]:method_text:[lectionStart(content));        assertEquals(offset, Selection.getSelectionEnd(content));    }   ])', 1), ('([3:/android/text/method/cts/BaseKeyListenerTest.java]:[NDK]:[3]:method_text:[eyOther never works.//        assertEquals(""13abcd456"", mTextView.getText().toString());    }   ])', 1), ('([1:/android/jobscheduler/cts/JobThrottlingTest.java]:[NDK]:[1]:method_text:[ice exited doze"",                mTestAppInterface.awaitJobStart(DEFAULT_WAIT_TIMEOUT));    }   ])', 1), ('([1:/android/jobscheduler/cts/JobThrottlingTest.java]:[NDK]:[1]:method_text:[CKGROUND_RESTRICTION,                mTestAppInterface.getLastParams().getStopReason());    }   ])', 1), (""([1:/android/jobscheduler/cts/JobThrottlingTest.java]:[NDK]:[1]:method_text:[tStopReason());    }    @RequiresDevice // Emulators don't always have access to wifi/network   ])"", 1), ('([2:/android/view/cts/ASurfaceControlTest.java]:[NDK]:[2]:method_text:[ +/- 10% error rate. This is based on the error    // rate allowed in the SurfaceViewSyncTests   ])', 1), ('([1:/android/app/cts/DialogTest.java]:[NDK]:[1]:method_text:[vent.KEYCODE_BACK);        PollingCheck.waitFor(() -> mActivity.onCancelListenerCalled);    }   ])', 1), ('([1:/android/app/cts/DialogTest.java]:[NDK]:[1]:method_text:[  sendKeys(KeyEvent.KEYCODE_BACK);        assertFalse(mActivity.onCancelListenerCalled);    }   ])', 1), ('([1:/android/app/cts/DialogTest.java]:[NDK]:[1]:method_text:[    PollingCheck.waitFor(() -> {            return mActivity.onCancelListenerCalled; });    }   ])', 1), ('([1:/android/app/cts/DialogTest.java]:[NDK]:[1]:method_text:[e, defValue),                ta.getInt(R.styleable.TextAppearance_textStyle, defValue));    }   ])', 1), ('([1:/android/app/cts/DialogTest.java]:[NDK]:[1]:method_text:[CODE_BACK);        PollingCheck.waitFor(() -> {            return d.isOnStopCalled; });    }   ])', 1), ('([1:/android/app/cts/DialogTest.java]:[NDK]:[1]:method_text:[ sendKeys(KeyEvent.KEYCODE_ESCAPE);        PollingCheck.waitFor(() -> d.isOnStopCalled);    }   ])', 1), ('([1:/android/app/cts/DialogTest.java]:[NDK]:[1]:method_text:[iew in dialog        assertEquals(d.getWindow().getCurrentFocus(), d.getCurrentFocus());    }   ])', 1), ('([2:/android/app/cts/DialogTest.java]:[NDK]:[2]:method_text:[ssertEquals(KeyEvent.KEYCODE_BACK, d.keyDownCode);        assertTrue(d.onKeyDownReturn);    }   ])', 1), ('([3:/android/app/cts/DialogTest.java]:[NDK]:[3]:method_text:[  * the user canceling the menu with the back/menu button, or when an item is selected).     */   ])', 1), ('([1:/android/app/cts/DialogTest.java]:[NDK]:[1]:method_text:[lled should be true, see bug 1716918.        assertFalse(d.isOnContextMenuClosedCalled);    }   ])', 1), ('([2:/android/app/cts/DialogTest.java]:[NDK]:[2]:method_text:[        mScenario.onActivity(activity -> {            d.takeKeyEvents(get);        });    }   ])', 1), ('([1:/android/app/cts/DialogTest.java]:[NDK]:[1]:method_text:[     sendKeys(KeyEvent.KEYCODE_BACK);        PollingCheck.waitFor(() -> !d.isShowing());    }   ])', 1), ('([1:/android/app/cts/DialogTest.java]:[NDK]:[1]:method_text:[isShowing());        sendKeys(KeyEvent.KEYCODE_BACK);        assertTrue(d.isShowing());    }   ])', 1), ('([1:/android/app/cts/DialogTest.java]:[NDK]:[1]:method_text:[   sendKeys(KeyEvent.KEYCODE_ESCAPE);        PollingCheck.waitFor(() -> !d.isShowing());    }   ])', 1), ('([1:/android/app/cts/DialogTest.java]:[NDK]:[1]:method_text:[. Cancel the dialog.     * 2. Set a listener to be invoked when the dialog is canceled.     */   ])', 1), ('([1:/android/app/cts/DialogTest.java]:[NDK]:[1]:method_text:[    * 2. set onDismissListener to null, it will not changed flag after dialog dismissed.     */   ])', 1), ('([2:/android/app/cts/DialogTest.java]:[NDK]:[2]:method_text:[       isShowContextMenuCalled = true;            return super.showContextMenu();        }    }}])', 1), ('([2:/android/widget/cts/EditTextTest.java]:[NDK]:[2]:method_text:[ivate static final int FRAMEWORK_MAX_LENGTH_FOR_SINGLE_LINE_EDIT_TEXT = 5000;    @UiThreadTest   ])', 1), ('([2:/android/hardware/cts/SensorNativeTest.java]:[NDK]:[2]:method_text:[de    public void tearDown() throws Exception {        nativeTearDown(mNativeInstance);    }   ])', 1), ('([2:/android/widget/cts/SearchViewTest.java]:[NDK]:[2]:method_text:[nce()).onQueryTextSubmit(""beta"");        verifyNoMoreInteractions(mockQueryTextListener);    }}])', 1), ('([1:/android/jobscheduler/cts/ConnectivityConstraintTest.java]:[NDK]:[1]:method_text:[quires a network connection, and verify that it runs even     * when if an app is idle.     */   ])', 1), ('([1:/android/jobscheduler/cts/ConnectivityConstraintTest.java]:[NDK]:[1]:method_text:[work connection, and verify that it runs even     * when multiple firewalls are active.     */   ])', 1), ('([2:/android/security/identity/cts/UserAuthTest.java]:[NDK]:[2]:method_text:[) {            throw new RuntimeException(""Error creating auth-bound key"", e);        }    }   ])', 1), ('([2:/android/mediadrm/cts/MediaDrmClearkeyTest.java]:[NDK]:[2]:method_text:[      }    }    /**     * Tests KEY_TYPE_RELEASE for offline license.     */    @Presubmit   ])', 1), ('([4:/android/app/cts/LauncherActivityTest.java]:[NDK]:[4]:method_text:[    sendKeys(KeyEvent.KEYCODE_DPAD_CENTER);        assertTrue(mActivity.isOnListItemClick);    }}])', 1), ('([8:/android/hardware/camera2/cts/CaptureResultTest.java]:[NDK]:[8]:method_text:[* End generated code     *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/}])', 1), ('([2:/android/view/cts/TooltipTest.java]:[NDK]:[2]:method_text:[/ 2 + offsetY,                0);        event.setSource(source);        return event;    }   ])', 1), ('([2:/android/media/cts/AudioRecordRoutingNative.java]:[NDK]:[2]:method_text:[}    //    // Tests    //    // Test a basic Aquire/Release cycle on the default recorder.   ])', 1), ('([3:/android/mediav2/cts/ExtractorTest.java]:[NDK]:[3]:method_text:[        assertEquals(""SDK and NDK checksums mismatch"", sdkChecksum, ndkChecksum);        }       ])', 1), ('([6:/android/mediav2/cts/ExtractorTest.java]:[NDK]:[6]:method_text:[     }        private native boolean nativeTestDataSource(String srcPath, String srcUrl);       ])', 1), ('([3:/android/mediav2/cts/ExtractorTest.java]:[NDK]:[3]:method_text:[te point for a given         * choice of timestamp and mode.         */        @LargeTest       ])', 1), ('([2:/android/media/cts/MediaExtractorDeviceSideTest.java]:[NDK]:[2]:method_text:[ extractUsingNdkMediaExtractor(mAssetManager, SAMPLE_PATH, /* withAttachedJvm= */ false);    }   ])', 1), ('([2:/android/media/cts/MediaExtractorDeviceSideTest.java]:[NDK]:[2]:method_text:[  extractUsingNdkMediaExtractor(mAssetManager, SAMPLE_PATH, /* withAttachedJvm= */ true);    }   ])', 1), ('([1:/android/media/cts/MediaExtractorDeviceSideTest.java]:[NDK]:[1]:method_text:[MediaExtractor(            AssetManager assetManager, String assetPath, boolean withAttachedJvm);}])', 1), ('([2:/android/app/cts/ToolbarActionBarTest.java]:[NDK]:[2]:method_text:[e(menuIsVisible[0]);        assertFalse(mActivity.getToolbar().isOverflowMenuShowing());    }   ])', 1), ('([1:/android/widget/cts/ListViewTest.java]:[NDK]:[1]:method_text:[der.mOnDetachCount);        assertFalse(header.isTemporarilyDetached());    }    @MediumTest   ])', 1), ('([2:/android/widget/cts/ListViewTest.java]:[NDK]:[2]:method_text:[ew.mOnDetachCount);        assertFalse(theView.isTemporarilyDetached());    }    @MediumTest   ])', 1), ('([4:/android/text/method/cts/TimeKeyListenerTest.java]:[NDK]:[4]:method_text:[protected char[] getAcceptedChars() {            return super.getAcceptedChars();        }    }}])', 1), ('([3:/android/media/cts/MediaExtractorHostSideTest.java]:[NDK]:[3]:method_text:[t())                .isEqualTo(MediametricsMessage.ExtractorData.EntryPoint.NDK_NO_JVM);    }   ])', 1), ('([3:/android/media/cts/MediaExtractorHostSideTest.java]:[NDK]:[3]:method_text:[))                .isEqualTo(MediametricsMessage.ExtractorData.EntryPoint.NDK_WITH_JVM);    }   ])', 1), ('([2:/android/app/cts/InstrumentationTest.java]:[NDK]:[2]:method_text:[ls(KeyEvent.KEYCODE_0, mActivity.getKeyDownList().get(0).getKeyCode());    }    @UiThreadTest   ])', 1), ('([2:/android/app/cts/InstrumentationTest.java]:[NDK]:[2]:method_text:[d onCreate() {            super.onCreate();            mIsOnCreateCalled = true;        }    }}])', 1), ('([1:/android/widget/cts/ExpandableListViewBasicTest.java]:[NDK]:[1]:method_text:[id not expand"", mExpandableListView.isGroupExpanded(groupPos));        return groupPos;    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewBasicTest.java]:[NDK]:[1]:method_text:[    assertFalse(""Group did not collapse"", mExpandableListView.isGroupExpanded(groupPos));    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewBasicTest.java]:[NDK]:[1]:method_text:[as given to the inserted group"",                mExpandableListView.isGroupExpanded(0));    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[NDK]:[1]:method_text:[rue;        }        return PropertyUtil.isVendorApiLevelNewerThan(Build.VERSION_CODES.R);    }}])', 1), ('([2:/android/view/cts/ViewTest.java]:[NDK]:[2]:method_text:[  mInstrumentation.sendKeySync(event);        assertTrue(view.hasCalledOnKeyShortcut());    }   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[NDK]:[1]:method_text:[mentation.sendKeySync(event);        assertTrue(view.hasCalledDispatchUnhandledMove());    }   ])', 1), ('([11:/android/view/cts/ViewTest.java]:[NDK]:[11]:method_text:[istener.fired()); // checks that both up and down were received        listener.reset();    }   ])', 1), ('([7:/android/view/cts/ViewTest.java]:[NDK]:[7]:method_text:[r().removeOnPreDrawListener(this);                return true;            }        });    }   ])', 1), ('([3:/android/view/cts/ViewTest.java]:[NDK]:[3]:method_text:[PointerSync(event);        assertTrue(fitWindowsView.isInTouchMode());    }    @UiThreadTest   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[NDK]:[1]:method_text:[view.hasCalledDispatchKeyEventPreIme());        assertTrue(view.hasCalledOnKeyPreIme());    }   ])', 1), ('([1:/android/graphics/cts/SyncTest.java]:[NDK]:[1]:method_text:[er    public void teardown() throws Throwable {        EGL14.eglTerminate(mEglDisplay);    }   ])', 1), ('([2:/android/widget/cts/AutoCompleteTextViewTest.java]:[NDK]:[2]:method_text:[            PollingCheck.waitFor(() -> STRING_TEST.equals(filter.getResult()));        }    }   ])', 1), ('([10:/android/widget/cts/AutoCompleteTextViewTest.java]:[NDK]:[10]:method_text:[tText().toString());        assertFalse(mAutoCompleteTextView.isPerformingCompletion());    }   ])', 1), ('([2:/android/widget/cts/AutoCompleteTextViewTest.java]:[NDK]:[2]:method_text:[, eq(0), eq(WORDS[1].length()));        verifyNoMoreInteractions(mockItemClickListener);    }   ])', 1), ('([2:/android/widget/cts/TextViewTest.java]:[NDK]:[2]:method_text:[rtEquals(selectionEnd, Selection.getSelectionEnd(mTextView.getText()));    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[NDK]:[1]:method_text:[ngText(text, 1);  // Leave cursor at end.        input.endBatchEdit();    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[NDK]:[1]:method_text:[ mTextView.getText().toString());        });        mInstrumentation.waitForIdleSync();    }   ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[NDK]:[1]:method_text:[ew.onRestoreInstanceState(state);        });        mInstrumentation.waitForIdleSync();    }   ])', 1), ('([2:/android/widget/cts/TextViewTest.java]:[NDK]:[2]:method_text:[().toString());        });        mInstrumentation.waitForIdleSync();    }    @UiThreadTest   ])', 1), ('([2:/android/widget/cts/TextViewTest.java]:[NDK]:[2]:method_text:[T_LEFT);        assertEquals(""abbcc"", mTextView.getText().toString());    }    @UiThreadTest   ])', 1), ('([2:/android/widget/cts/TextViewTest.java]:[NDK]:[2]:method_text:[ngth() / 2;        return spannable.getSpans(at, at, type).length > 0;    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[NDK]:[1]:method_text:[xtView, KeyEvent.KEYCODE_DEL);        assertEquals(""a"", mTextView.getText().toString());    }   ])', 1), ('([4:/android/widget/cts/TextViewTest.java]:[NDK]:[4]:method_text:[t.setSource(source);        CtsKeyEventUtil.sendKey(instrumentation, targetView, event);    }   ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[NDK]:[1]:method_text:[ForIdleSync();        assertNull(mTextView.getTransformationMethod());    }    @UiThreadTest   ])', 1)]"	"https://developer.android.com"	""	"[('NDK', 220)]"	"[('[com.android.cts.atracetestapp.AtraceDeviceTests isEnabled None]', 5), ('[android.media.cts.NativeDecoderTest SKIP_testExtractor CtsMediaTestCases]', 1), ('[android.binder.cts.JavaClientTest testRepeatStringNullableLater CtsNdkBinderTestCases]', 1), ('[android.media.cts.VideoCodecTest testBasic CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameVP8NdkCBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameVP8NdkVBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameVP9NdkCBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameVP9NdkVBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameAVCNdkCBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameAVCNdkVBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameHEVCNdkCBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testSyncFrameHEVCNdkVBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testDynamicBitrateChangeVP8NdkCBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testDynamicBitrateChangeVP8NdkVBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testDynamicBitrateChangeVP9NdkCBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testDynamicBitrateChangeVP9NdkVBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testDynamicBitrateChangeAVCNdkCBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testDynamicBitrateChangeAVCNdkVBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testDynamicBitrateChangeHEVCNdkCBR CtsMediaTestCases]', 1), ('[android.media.cts.VideoCodecTest testDynamicBitrateChangeHEVCNdkVBR CtsMediaTestCases]', 1), ('[android.atrace.cts.AtraceHostTest testBeginEndSection CtsAtraceHostTestCases]', 1), ('[android.atrace.cts.AtraceHostTest testAsyncBeginEndSection CtsAtraceHostTestCases]', 1), ('[android.text.method.cts.PasswordTransformationMethodTest testTextChangedCallBacks CtsTextTestCases]', 1), ('[android.webkit.cts.WebViewTest testRequestFocusNodeHref CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebViewTest testStartSafeBrowsingInvokesCallback CtsWebkitTestCases]', 1), ('[android.view.cts.KeyEventInterceptTest testKeyCodeBackShortcutRightMeta CtsViewTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testGetMetaState_withCharSequenceAndKeyEvent CtsTextTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testGetMetaState_withCharSequenceAndMetaAndKeyEvent CtsTextTestCases]', 1), ('[android.text.method.cts.DateKeyListenerTest testDateTimeKeyListener CtsTextTestCases]', 1), ('[android.os.cts.BuildTest testCpuAbi_valuesMatchPermitted None]', 1), ('[android.os.cts.BuildTest testIsSecureUserBuild None]', 1), ('[android.widget.cts.GridViewTest testPressKey CtsWidgetTestCases]', 1), ('[android.widget.cts.GridViewTest testFullyDetachUnusedViewOnScrollForFocus CtsWidgetTestCases]', 1), ('[android.widget.cts.TimePickerTest testKeyboardInputModeClockAmPm CtsWidgetTestCases]', 1), ('[android.widget.cts.TimePickerTest testKeyboardInputModeClock24H CtsWidgetTestCases]', 1), ('[android.widget.cts.TimePickerTest testKeyboardInputModeSpinnerAmPm CtsWidgetTestCases]', 1), ('[android.widget.cts.TimePickerTest testKeyboardInputModeSpinner24H CtsWidgetTestCases]', 1), ('[android.widget.cts.BackwardNavigationTest testBackwardNavigation CtsWidgetTestCases]', 1), ('[android.widget.cts.NumberPickerTest testEnterKey CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewWithHeadersTest testExpandOnFirstPosition CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewWithHeadersTest testExpandOnFirstGroup CtsWidgetTestCases]', 1), ('[android.view.cts.KeyEventInjectionTest testLongPressKeyEventInjectedViaInstrumentation CtsViewTestCases]', 1), ('[android.view.cts.KeyEventInjectionTest testLongPressKeyEventInjectedViaAdb CtsViewTestCases]', 1), ('[android.view.cts.KeyEventInjectionTest testKeyEventInjectedViaInstrumentation CtsViewTestCases]', 1), ('[android.view.cts.KeyEventInjectionTest testKeyEventInjectedViaAdb CtsViewTestCases]', 1), ('[android.widget.cts.ToolbarTest testKeyShortcuts CtsWidgetTestCases]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testDigitsKeyListener1 CtsTextTestCases]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testDigitsKeyListener2 CtsTextTestCases]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testDigitsKeyListener3 CtsTextTestCases]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testDigitsKeyListener4 CtsTextTestCases]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testDigitsKeyListener5 CtsTextTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithConfigBssid CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetGetSoftApConfigurationAndSoftApCapabilityCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartTetheredHotspotWithChannelConfigAndSoftApStateAndInfoCallback CtsWifiTestCases]', 1), ('[android.view.cts.SearchEventTest testBasics CtsViewTestCases]', 1), ('[android.app.cts.AlertDialog_BuilderTest testSetNeutralButtonWithParamCharSequence CtsAppTestCases]', 1), ('[android.app.cts.AlertDialog_BuilderTest testSetOnKeyListener CtsAppTestCases]', 1), ('[android.app.cts.AlertDialog_BuilderTest testShow CtsAppTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkAccessAfterRecycle CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkFormats CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkFormatsHardware CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNullBitmapNdk CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest isPremultiplied CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkDataSpaceF16Extended CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkDataSpaceNonExtended CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkDataSpace CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkDataSpaceAlpha8 CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkDataSpaceNullBitmap CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkCompressBadParameter CtsGraphicsTestCases]', 1), ('[android.widget.cts.SearchView_CursorTest testSuggestionEnterKey CtsWidgetTestCases]', 1), ('[android.autofillservice.cts.commontests.DatasetFilteringTest DatasetFilteringTest CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.commontests.DatasetFilteringTest testFilter_injectingEvents CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.commontests.DatasetFilteringTest testFilter_usingKeyboard CtsAutoFillServiceTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest isDirectChannelTypeSupported CtsSensorTestCases]', 1), ('[com.android.cts.authboundkey.AuthBoundKeyAppTest testGenerateAuthBoundKey None]', 1), ('[android.server.biometrics.BiometricCryptoTests testGenerateKeyWithoutDeviceCredential_throwsException CtsBiometricsTestCases]', 1), ('[android.server.biometrics.BiometricCryptoTests testGenerateKeyWithoutBiometricEnrolled_throwsInvalidAlgorithmParameterException CtsBiometricsTestCases]', 1), ('[android.server.biometrics.BiometricCryptoTests testGenerateKeyWhenCredentialAndBiometricEnrolled CtsBiometricsTestCases]', 1), ('[android.widget.cts.DatePickerTest testEnterKey CtsWidgetTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest testFloatingImeHideKeyboardAfterBackPressed CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest testRestoreImeVisibility_noRestoreForHiddenWithForwardNav CtsInputMethodTestCases]', 1), ('[android.autofillservice.cts.dropdown.LoginActivityTest testUiShowOnChangeAfterAutofill CtsAutoFillServiceTestCases]', 1), ('[android.webkit.cts.WebViewClientTest testOnUnhandledKeyEvent CtsWebkitTestCases]', 1), ('[android.app.cts.ActionBarTest testOptionsMenuKey CtsAppTestCases]', 1), ('[android.text.method.cts.TextKeyListenerTest testPressKey CtsTextTestCases]', 1), ('[android.text.method.cts.TextKeyListenerTest testOnKeyOther CtsTextTestCases]', 1), ('[android.view.inputmethod.cts.InputConnectionWrapperTest testInputConnectionWrapper CtsInputMethodTestCases]', 1), ('[android.text.method.cts.DateTimeKeyListenerTest testDateTimeKeyListener CtsTextTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodServiceTest testSendDownUpKeyEvents CtsInputMethodTestCases]', 1), ('[android.widget.cts.SpinnerTest testDropDownBackgroundDropdownMode CtsWidgetTestCases]', 1), ('[android.widget.cts.SpinnerTest testDropDownBackgroundDialogMode CtsWidgetTestCases]', 1), ('[android.view.cts.ContentPaneFocusTest testAccessActionBar CtsViewTestCases]', 1), ('[android.view.cts.ContentPaneFocusTest testNoFocusablesInContent CtsViewTestCases]', 1), ('[android.mediav2.cts.MuxerTest testSimpleMuxNative CtsMediaV2TestCases]', 1), ('[android.keystore.cts.CipherTest testCanCreateAuthBoundKeyWhenScreenLocked CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testCannotCreateAuthBoundKeyWhenDevicePinNotSet CtsKeystoreTestCases]', 1), ('[android.app.cts.AlertDialogTest testCallback CtsAppTestCases]', 1), ('[android.app.cts.AlertDialogTest testAlertDialogCancelable CtsAppTestCases]', 1), ('[android.app.cts.AlertDialogTest testAlertDialogNotCancelable CtsAppTestCases]', 1), ('[android.keystore.cts.KeyFactoryTest testGetKeySpecWithKeystorePrivateKeyAndKeyInfoReflectsAllAuthorizations CtsKeystoreTestCases]', 1), ('[android.mediadrm.cts.NativeMediaDrmClearkeyTest isWatchDevice CtsMediaDrmTestCases]', 1), ('[android.hardware.camera2.cts.CameraManagerTest testCameraManagerGetCameraCharacteristics CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraManagerTest testCameraCharacteristicsNdkFromSdk CtsCameraTestCases]', 1), ('[android.keystore.cts.KeyChainTest testIsBoundKeyAlgorithm_RequiredAlgorithmsSupported CtsKeystoreTestCases]', 1), ('[android.os.cts.SharedMemoryTest testNdkInterop None]', 1), ('[android.media.cts.DecoderTest testLowLatencyVp9At1280x720 CtsMediaTestCases]', 1), ('[android.media.cts.DecoderTest testLowLatencyVp9At1920x1080 CtsMediaTestCases]', 1), ('[android.media.cts.DecoderTest testLowLatencyVp9At3840x2160 CtsMediaTestCases]', 1), ('[android.media.cts.DecoderTest testLowLatencyAVCAt1280x720 CtsMediaTestCases]', 1), ('[android.media.cts.DecoderTest testLowLatencyHEVCAt480x360 CtsMediaTestCases]', 1), ('[android.text.method.cts.NumberKeyListenerTest testPressKey CtsTextTestCases]', 1), ('[com.android.cts.releaseparser.SoParserTest testNdkSo None]', 1), ('[android.util.cts.ArrayMapTest testCanNotIteratePastEnd_keySetIterator CtsUtilTestCases]', 1), ('[android.media.tv.cts.TvViewTest testTrackChange CtsTvTestCases]', 1), ('[android.server.wm.WindowFocusTests getDisplayId CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowFocusTests testKeyReceiving CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.LayoutTests testChangingFocusableFlag CtsWindowManagerDeviceTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testAccessKeyProgressIncrement CtsWidgetTestCases]', 1), ('[android.keystore.cts.SecretKeyFactoryTest testGetKeySpecWithKeystoreKeyAndKeyInfoReflectsAllAuthorizations CtsKeystoreTestCases]', 1), ('[android.widget.cts.ListPopupWindowTest testNoDefaultDismissalWithBackButton CtsWidgetTestCases]', 1), ('[android.widget.cts.ListPopupWindowTest testCustomDismissalWithBackButton CtsWidgetTestCases]', 1), ('[android.widget.cts.ListPopupWindowTest testListSelectionWithDPad CtsWidgetTestCases]', 1), ('[android.widget.cts.ListPopupWindowTest testListSelectionWithDPadEnter CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsListViewTest testSelectorOnScreen CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsListViewTest testEnterKey CtsWidgetTestCases]', 1), ('[android.widget.cts.TabHostTest testKeyboardNavigation CtsWidgetTestCases]', 1), ('[android.media.cts.MediaActivityTest testVolumeKey_whileSessionAlive CtsMediaTestCases]', 1), ('[android.media.cts.MediaActivityTest testVolumeKey_afterSessionReleased CtsMediaTestCases]', 1), ('[android.media.cts.MediaActivityTest testMediaKey_whileSessionAlive CtsMediaTestCases]', 1), ('[android.media.cts.MediaActivityTest testMediaKey_whileSessionReleased CtsMediaTestCases]', 1), ('[android.text.method.cts.BaseKeyListenerTest testBackspace_withSendKeys CtsTextTestCases]', 1), ('[android.text.method.cts.BaseKeyListenerTest testPressKey CtsTextTestCases]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testForegroundJobsStartImmediately CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictedJobAllowedWhenUidActive CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictedEJAllowedWhenUidActive CtsJobSchedulerTestCases]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_apply CtsViewTestCases]', 1), ('[android.app.cts.DialogTest testConstructor_protectedCancellable CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testConstructor_protectedNotCancellable CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testConstructor_protectedCancellableEsc CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testConstructor_protectedNotCancellableEsc CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testOnStartCreateStop CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testOnStartCreateStopEsc CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testGetCurrentFocus CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testOnKeyDownKeyUp CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testDispatchKeyEvent CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testContextMenu CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testTakeKeyEvents CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testSetCancellable_true CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testSetCancellable_false CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testSetCancellableEsc_true CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testSetCancellableEsc_false CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testSetCancelMessage CtsAppTestCases]', 1), ('[android.app.cts.DialogTest testSetDismissMessage CtsAppTestCases]', 1), ('[android.widget.cts.EditTextTest testEnterKey CtsWidgetTestCases]', 1), ('[android.widget.cts.SearchViewTest testEnterKey CtsWidgetTestCases]', 1), ('[android.jobscheduler.cts.ConnectivityConstraintTest testCellularConstraintExecutedAndStopped_Foreground CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.ConnectivityConstraintTest testFgExpeditedJobBypassesDataSaver CtsJobSchedulerTestCases]', 1), ('[android.security.identity.cts.UserAuthTest isDeviceLocked CtsIdentityTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest MediaDrmClearkeyTest CtsMediaDrmTestCases]', 1), ('[android.app.cts.LauncherActivityTest testLaunchActivity CtsAppTestCases]', 1), ('[android.hardware.camera2.cts.CaptureResultTest testResultTimestamps CtsCameraTestCases]', 1), ('[android.view.cts.TooltipTest getWindowSystemUiVisibility CtsViewTestCases]', 1), ('[android.mediav2.cts.ExtractorTest testFileDescriptor CtsMediaV2TestCases]', 1), ('[android.mediav2.cts.ExtractorTest testUrlDataSource CtsMediaV2TestCases]', 1), ('[android.mediav2.cts.ExtractorTest testExtract CtsMediaV2TestCases]', 1), ('[android.media.cts.MediaExtractorDeviceSideTest testEntryPointNdkNoJvm None]', 1), ('[android.media.cts.MediaExtractorDeviceSideTest testEntryPointNdkWithJvm None]', 1), ('[android.media.cts.MediaExtractorDeviceSideTest testLogSessionId None]', 1), ('[android.app.cts.ToolbarActionBarTest testOptionsMenuKey CtsAppTestCases]', 1), ('[android.widget.cts.ListViewTest testFullDetachHeaderViewOnScrollForFocus CtsWidgetTestCases]', 1), ('[android.widget.cts.ListViewTest testFullyDetachUnusedViewOnScrollForFocus CtsWidgetTestCases]', 1), ('[android.text.method.cts.TimeKeyListenerTest testTimeKeyListener CtsTextTestCases]', 1), ('[android.media.cts.MediaExtractorHostSideTest testMediaMetricsEntryPointNdkNoJvm CtsMediaHostTestCases]', 1), ('[android.media.cts.MediaExtractorHostSideTest testMediaMetricsEntryPointNdkWithJvm CtsMediaHostTestCases]', 1), ('[android.app.cts.InstrumentationTest testSendKeyDownUpSync CtsAppTestCases]', 1), ('[android.app.cts.InstrumentationTest testSendKeySync CtsAppTestCases]', 1), ('[android.widget.cts.ExpandableListViewBasicTest testPreconditions CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewBasicTest testCollapseGroup CtsWidgetTestCases]', 1), ('[android.widget.cts.ExpandableListViewBasicTest testExpandedGroupMovement CtsWidgetTestCases]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testOtherUserDirsNotAccessible None]', 1), ('[android.view.cts.ViewTest testOnKeyShortcut CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchUnhandledMove CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUnhandledKeys CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnKeyDownOrUp CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testTouchMode CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testKeyPreIme CtsViewTestCases]', 1), ('[android.widget.cts.AutoCompleteTextViewTest testPerformFiltering CtsWidgetTestCases]', 1), ('[android.widget.cts.AutoCompleteTextViewTest testPerformCompletionWithDPad CtsWidgetTestCases]', 1), ('[android.widget.cts.AutoCompleteTextViewTest testPerformCompletionExplicit CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testAccessMovementMethod CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testUndo_delete CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testUndo_setText CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testUndo_saveInstanceState CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testUndo_saveInstanceStateEmpty CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testCopyAndPaste_byKey CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testCopyAndPaste_byCtrlInsert CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testCutAndPaste_byKey CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testCutAndPaste_byShiftDelete CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testPressKey CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testKeyNavigation CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testAccessTransformationMethod CtsWidgetTestCases]', 1)]"
"9.11.3  Identity Credential"	"9.11.3"	"C-0-4"	"9.11.3/C-0-4"	"09110300.670004"	"""C-0-4] The trusted application MUST be implemented in a way such that its      security properties  are not affected (e.g. credential data is not released unless access      control conditions are satisfied, MACs can't be produced for arbitrary      data) even if Android is misbehaving or compromised. """	""	""	"MAC"	""	""	""	""	"[('android.server.wm.WindowTest', 26), ('android.animation.cts.ValueAnimatorTest', 23), ('android.autofillservice.cts.dropdown.CheckoutActivityTest', 18), ('android.autofillservice.cts.dropdown.VirtualContainerActivityTest', 17), ('android.view.accessibility.cts.AccessibilityManagerTest', 16), ('android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest', 9), ('android.opengl.cts.ColorBufferTest', 8), ('android.autofillservice.cts.commontests.FillEventHistoryCommonTestCase', 8), ('android.widget.cts.MediaControllerTest', 7), ('android.preference.cts.DialogPreferenceTest', 7), ('android.view.animation.cts.GridLayoutAnimationControllerTest', 6), ('android.media.cts.MediaPlayerTest', 6), ('android.widget.cts.ImageSwitcherTest', 5), ('android.providerui.cts.MediaStoreUiTest', 5), ('android.suspendapps.cts.DualSuspendTests', 5), ('android.net.wifi.nl80211.cts.NativeWifiClientTest', 4), ('android.app.cts.ActivityActionModeTest', 4), ('android.text.method.cts.ArrowKeyMovementMethodTest', 4), ('android.preference.cts.ListPreferenceTest', 3), ('android.autofillservice.cts.dropdown.DialogLauncherActivityTest', 3), ('android.os.cts.CountDownTimerTest', 3), ('android.text.method.cts.PasswordTransformationMethodTest', 3), ('android.view.animation.cts.LinearInterpolatorTest', 3), ('android.animation.cts.LayoutAnimationTest', 3), ('android.autofillservice.cts.commontests.TimePickerTestCase', 2), ('android.bluetooth.cts.ScanFilterTest', 2), ('android.keystore.cts.performance.HmacKeyGenPerformanceTest', 2), ('android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest', 2), ('android.view.accessibility.cts.AccessibilityDelegateTest', 2), ('android.acceleration.cts.BaseAccelerationTest', 2), ('android.view.cts.KeyEventInterceptTest', 2), ('android.view.accessibility.cts.AccessibilityEventTest', 2), ('android.autofillservice.cts.unittests.ServiceEnabledForSureTest', 2), ('com.android.cts.atracetestapp.AtraceDeviceTests', 2), ('com.android.cts.devicepolicy.accountcheck.AccountCheckTest', 2), ('android.animation.cts.InterpolatorTest', 2), ('android.media.cts.NativeDecoderTest', 1), ('android.content.pm.cts.PackageManagerTest', 1), ('com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest', 1), ('android.media.cts.AudioManagerTest', 1), ('android.assist.cts.AssistStructureTest', 1), ('android.server.wm.CrossAppDragAndDropTests', 1), ('android.acceleration.cts.HardwareAccelerationTest', 1), ('android.hardware.camera2.cts.OfflineSessionTest', 1), ('android.video.cts.CodecEncoderPerformanceTest', 1), ('android.hardware.cts.CameraGLTest', 1), ('android.server.wm.AppConfigurationTests', 1), ('android.hardware.camera2.cts.CameraExtensionSessionTest', 1), ('android.server.wm.TransitionSelectionTests', 1), ('android.hardware.input.cts.tests.RazerRaijuMobileBluetoothTest', 1)]"	"[('setUp', 22), ('getInstrumentation', 17), ('getActivity', 16), ('setup', 12), ('getAutofillValue', 10), ('any', 10), ('getContext', 7), ('tearDown', 6), ('Builder', 5), ('enableService', 5), ('requestFocus', 5), ('getTargetContext', 5), ('getPackageManager', 4), ('build', 4), ('getNextFillRequest', 4), ('assertAutoFilled', 4), ('getActivityRule', 3), ('afterActivityLaunched', 3), ('AccessibilityDumpOnFailureRule', 3), ('getSaveCc', 2), ('getDatePicker', 2), ('getTimePicker', 2), ('getAddress', 2), ('getUiAutomation', 2), ('hashCode', 2), ('getContentResolver', 2), ('getMainLooper', 2), ('getDurationScale', 2), ('waitForIdleSync', 2), ('ConditionVariable', 2), ('teardown', 2), ('getGridView', 1), ('getDefaultAdapter', 1), ('getEditTextAutoFillValue', 1), ('getCcNumber', 1), ('autofillCompoundButtonWithTextValue', 1), ('getCompoundButtonAutoFillValue', 1), ('getSpinnerAutoFillValue', 1), ('getCcExpiration', 1), ('autofillDatePickerWithTextValue', 1), ('getYear', 1), ('getMonth', 1), ('getDayOfMonth', 1), ('getResources', 1), ('getConfiguration', 1), ('getLocales', 1), ('getDatePickerAutoFillValue', 1), ('autofillTimePickerWithTextValue', 1), ('getHour', 1), ('getMinute', 1), ('getTimePickerAutoFillValue', 1), ('autofillRadioGroupWithTextValue', 1), ('getRadioGroupAutoFillValue', 1), ('BackupUtils', 1), ('getAccount', 1), ('getHardwareAcceleratedView', 1), ('getSoftwareAcceleratedView', 1), ('getManualHardwareAcceleratedView', 1), ('getManualSoftwareAcceleratedView', 1), ('canSerializeAndDeserialize', 1), ('obtain', 1), ('getMacAddress', 1), ('toByteArray', 1), ('destroy', 1), ('beforeClass', 1), ('afterClass', 1), ('customSetup', 1), ('waitForOnDraw', 1), ('onDraw', 1), ('PasswordTransformationMethod', 1), ('supportsSplitScreenMultiWindow', 1), ('supportsFreeform', 1), ('length', 1), ('SurfaceTextureCallback', 1), ('SurfaceTextureBurstCallback', 1), ('PreviewCallback', 1), ('Object', 1), ('beforeActivityLaunched', 1), ('Renderer', 1), ('getView', 1), ('resetService', 1), ('getWindow', 1), ('anyInt', 1), ('setFlagFalse', 1), ('reportPidTid', 1), ('Bundle', 1), ('getpid', 1), ('gettid', 1), ('launchActivity', 1), ('waitForDraw', 1), ('before', 1), ('after', 1), ('release', 1), ('updatePreviewSurfaceTexture', 1), ('getTextureView', 1), ('LayoutTransition', 1), ('data', 1), ('getSharedVolumeNames', 1), ('clearResult', 1), ('delete', 1), ('addAndAssertProfileOwner', 1)]"	"[('CtsAutoFillServiceTestCases', 50), ('CtsWindowManagerDeviceTestCases', 29), ('CtsAnimationTestCases', 28), ('CtsAccessibilityTestCases', 20), ('CtsWidgetTestCases', 12), ('CtsViewTestCases', 11), ('CtsPreferenceTestCases', 10), ('CtsContactsProviderTestCases', 9), ('CtsMediaTestCases', 8), ('CtsOpenGLTestCases', 8), ('CtsTextTestCases', 7), ('CtsProviderUiTestCases', 5), ('CtsSuspendAppsTestCases', 5), ('CtsWifiTestCases', 4), ('CtsAppTestCases', 4), ('CtsAccelerationTestCases', 3), ('CtsCameraTestCases', 3), ('CtsBluetoothTestCases', 2), ('CtsKeystoreTestCases', 2), ('CtsContentTestCases', 1), ('CtsDevicePolicyManagerTestCases', 1), ('CtsAssistTestCases', 1), ('CtsVideoTestCases', 1), ('CtsHardwareTestCases', 1)]"	""	""	""	""	"android.suspendapps.cts.DualSuspendTests"	"addAndAssertProfileOwner"	"CtsSuspendAppsTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowTest.java', 26), ('/home/gpoor/cts-12-source/cts/tests/tests/animation/src/android/animation/cts/ValueAnimatorTest.java', 23), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/dropdown/CheckoutActivityTest.java', 18), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java', 17), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 16), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/opengl/src/android/opengl/cts/ColorBufferTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/commontests/FillEventHistoryCommonTestCase.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/MediaControllerTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/preference/src/android/preference/cts/DialogPreferenceTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/GridLayoutAnimationControllerTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ImageSwitcherTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/providerui/src/android/providerui/cts/MediaStoreUiTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/DualSuspendTests.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/NativeWifiClientTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityActionModeTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/ArrowKeyMovementMethodTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/preference/src/android/preference/cts/ListPreferenceTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/dropdown/DialogLauncherActivityTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/CountDownTimerTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/PasswordTransformationMethodTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/LinearInterpolatorTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/animation/src/android/animation/cts/LayoutAnimationTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/commontests/TimePickerTestCase.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanFilterTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/SyncAdapterSettingsApp/src/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityDelegateTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/acceleration/src/android/acceleration/cts/BaseAccelerationTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/KeyEventInterceptTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityEventTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/ServiceEnabledForSureTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/atrace/AtraceTestApp/src/com/android/cts/atracetestapp/AtraceDeviceTests.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/AccountCheck/Auth/src/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/animation/src/android/animation/cts/InterpolatorTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/NativeDecoderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/assist/src/android/assist/cts/AssistStructureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/CrossAppDragAndDropTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/acceleration/src/android/acceleration/cts/HardwareAccelerationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/OfflineSessionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/video/src/android/video/cts/CodecEncoderPerformanceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/cts/CameraGLTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AppConfigurationTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraExtensionSessionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/TransitionSelectionTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/input/cts/tests/RazerRaijuMobileBluetoothTest.java', 1)]"	"[('(1,MAC,/android/media/cts/NativeDecoderTest.java)', 1), ('(17,MAC,/android/view/animation/cts/GridLayoutAnimationControllerTest.java)', 1), ('(8,MAC,/android/autofillservice/cts/commontests/TimePickerTestCase.java)', 1), ('(4,MAC,/android/bluetooth/cts/ScanFilterTest.java)', 1), ('(68,MAC,/android/autofillservice/cts/dropdown/CheckoutActivityTest.java)', 1), ('(7,MAC,/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java)', 1), ('(9,MAC,/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java)', 1), ('(1,MAC,/android/content/pm/cts/PackageManagerTest.java)', 1), ('(5,MAC,/android/view/accessibility/cts/AccessibilityDelegateTest.java)', 1), ('(5,MAC,/android/preference/cts/ListPreferenceTest.java)', 1), ('(12,MAC,/android/autofillservice/cts/dropdown/DialogLauncherActivityTest.java)', 1), ('(1,MAC,/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java)', 1), ('(22,MAC,/android/os/cts/CountDownTimerTest.java)', 1), ('(38,MAC,/android/widget/cts/MediaControllerTest.java)', 1), ('(7,MAC,/android/acceleration/cts/BaseAccelerationTest.java)', 1), ('(13,MAC,/android/net/wifi/nl80211/cts/NativeWifiClientTest.java)', 1), ('(7,MAC,/android/app/cts/ActivityActionModeTest.java)', 1), ('(39,MAC,/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java)', 1), ('(3,MAC,/android/media/cts/AudioManagerTest.java)', 1), ('(40,MAC,/android/view/accessibility/cts/AccessibilityManagerTest.java)', 1), ('(46,MAC,/android/animation/cts/ValueAnimatorTest.java)', 1), ('(1,MAC,/android/assist/cts/AssistStructureTest.java)', 1), ('(18,MAC,/android/text/method/cts/PasswordTransformationMethodTest.java)', 1), ('(30,MAC,/android/opengl/cts/ColorBufferTest.java)', 1), ('(3,MAC,/android/server/wm/CrossAppDragAndDropTests.java)', 1), ('(8,MAC,/android/view/animation/cts/LinearInterpolatorTest.java)', 1), ('(96,MAC,/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java)', 1), ('(1,MAC,/android/acceleration/cts/HardwareAccelerationTest.java)', 1), ('(1,MAC,/android/hardware/camera2/cts/OfflineSessionTest.java)', 1), ('(3,MAC,/android/video/cts/CodecEncoderPerformanceTest.java)', 1), ('(7,MAC,/android/view/cts/KeyEventInterceptTest.java)', 1), ('(10,MAC,/android/text/method/cts/ArrowKeyMovementMethodTest.java)', 1), ('(4,MAC,/android/hardware/cts/CameraGLTest.java)', 1), ('(7,MAC,/android/view/accessibility/cts/AccessibilityEventTest.java)', 1), ('(5,MAC,/android/autofillservice/cts/unittests/ServiceEnabledForSureTest.java)', 1), ('(52,MAC,/android/server/wm/WindowTest.java)', 1), ('(2,MAC,/com/android/cts/atracetestapp/AtraceDeviceTests.java)', 1), ('(5,MAC,/android/server/wm/AppConfigurationTests.java)', 1), ('(2,MAC,/android/hardware/camera2/cts/CameraExtensionSessionTest.java)', 1), ('(8,MAC,/android/animation/cts/LayoutAnimationTest.java)', 1), ('(21,MAC,/android/widget/cts/ImageSwitcherTest.java)', 1), ('(5,MAC,/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java)', 1), ('(3,MAC,/android/server/wm/TransitionSelectionTests.java)', 1), ('(9,MAC,/android/preference/cts/DialogPreferenceTest.java)', 1), ('(6,MAC,/android/media/cts/MediaPlayerTest.java)', 1), ('(40,MAC,/android/autofillservice/cts/commontests/FillEventHistoryCommonTestCase.java)', 1), ('(20,MAC,/android/providerui/cts/MediaStoreUiTest.java)', 1), ('(5,MAC,/android/animation/cts/InterpolatorTest.java)', 1), ('(2,MAC,/android/hardware/input/cts/tests/RazerRaijuMobileBluetoothTest.java)', 1), ('(8,MAC,/android/suspendapps/cts/DualSuspendTests.java)', 1)]"	"[('([4:/android/opengl/cts/ColorBufferTest.java]:[MAC]:[4]:method_text:[[] actualColor = mActivity.getActualColor();        compare(expectedColor, actualColor);    }   ])', 6), ('([3:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[3]:method_text:[ // ============================================================================================   ])', 4), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[ake sure the onAnimationEnd(anim) is called.        assertTrue(myListener.mEndIsCalled);    }   ])', 3), ('([1:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[MAC]:[1]:method_text:[     assertTrue(""The vibrating service should be installed."", vibratingServiceInstalled);    }   ])', 2), ('([4:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[MAC]:[4]:method_text:[ed());        mAccessibilityManager.removeTouchExplorationStateChangeListener(listener);    }   ])', 2), ('([4:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[MAC]:[4]:method_text:[abled());        mAccessibilityManager.removeAccessibilityStateChangeListener(listener);    }   ])', 2), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[();        assertTrue(animatedValue >= start);        assertTrue(animatedValue <= end);    }   ])', 2), ('([3:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[3]:method_text:[   callback.assertUiUnavailableEvent(mActivity.mCustomView, mActivity.mUsername.text.id);    }   ])', 2), ('([3:/android/server/wm/WindowTest.java]:[MAC]:[3]:method_text:[SystemWindowInsets(),                mActivity.getLastInsets().getSystemWindowInsets());    }   ])', 2), ('([3:/android/autofillservice/cts/commontests/FillEventHistoryCommonTestCase.java]:[MAC]:[3]:method_text:[waitUntilDisconnected();        InstrumentedAutoFillService.assertNoFillEventHistory();    }   ])', 2), ('([1:/android/media/cts/NativeDecoderTest.java]:[MAC]:[1]:method_text:[e,            int fd, long startOffset, long length);    @Presubmit    @NonMediaMainlineTest   ])', 1), ('([6:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[MAC]:[6]:method_text:[FAULT_DELAY,                DEFAULT_DELAY);        mGridView = mActivity.getGridView();    }   ])', 1), ('([2:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[MAC]:[2]:method_text:[Delay(), 0.0f);        new GridLayoutAnimationController(mDefaultAnimation, 0.5f, 0.5f);    }   ])', 1), ('([2:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[MAC]:[2]:method_text:[mation(float alpha) {        assertTrue(alpha > 0.0f);        assertTrue(alpha < 1.0f);    }   ])', 1), ('([2:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[MAC]:[2]:method_text:[mation2.getAlpha(), DELTA);        assertIsRunningAnimation(transformation3.getAlpha());    }   ])', 1), ('([3:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[MAC]:[3]:method_text:[   layoutParams.layoutAnimationParameters = animationParams;        return layoutParams;    }   ])', 1), ('([2:/android/view/animation/cts/GridLayoutAnimationControllerTest.java]:[MAC]:[2]:method_text:[mation1.getAlpha(), DELTA);        assertIsRunningAnimation(transformation2.getAlpha());    }   ])', 1), ('([1:/android/autofillservice/cts/commontests/TimePickerTestCase.java]:[MAC]:[1]:method_text:[ty>        extends AutoFillServiceTestCase.AutoActivityLaunch<A> {    protected A mActivity;   ])', 1), ('([7:/android/autofillservice/cts/commontests/TimePickerTestCase.java]:[MAC]:[7]:method_text:[        assertTextAndValue(findNodeByResourceId(saveRequest.structure, ID_OUTPUT), ""10:40"");    }}])', 1), ('([2:/android/bluetooth/cts/ScanFilterTest.java]:[MAC]:[2]:method_text:[000000L);            mFilterBuilder = new ScanFilter.Builder();        }    }    @SmallTest   ])', 1), ('([2:/android/bluetooth/cts/ScanFilterTest.java]:[MAC]:[2]:method_text:[;        assertFalse(""device filter fails"", filter.matches(mScanResult));    }    @SmallTest   ])', 1), ('([2:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[2]:method_text:[rActivityLaunched() {                mActivity = getActivity();            }        };    }   ])', 1), ('([3:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[3]:method_text:[tDataset(""ACME CC"");        // Check the results.        mActivity.assertAutoFilled();    }   ])', 1), ('([4:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[4]:method_text:[ing onProvideAutofillStructure(),    // but that would require creating a custom ViewStructure.   ])', 1), ('([4:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[4]:method_text:[tDataset(""ACME CC"");        // Check the results.        mActivity.assertAutoFilled();    }   ])', 1), ('([9:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[9]:method_text:[       assertToggleValue(findNodeByResourceId(saveRequest.structure, ID_SAVE_CC), false);    }   ])', 1), ('([5:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[5]:method_text:[nored when the selected spinner element is not     * available in the autofill options.     */   ])', 1), ('([6:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[6]:method_text:[ // ============================================================================================   ])', 1), ('([2:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[2]:method_text:[            assertThat(editText.getText().toString()).isEqualTo(expectedText);        }    }   ])', 1), ('([2:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[2]:method_text:[ {            assertThat(compoundButton.isChecked()).isEqualTo(expectedValue);        }    }   ])', 1), ('([5:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[5]:method_text:[        assertThat(spinner.getSelectedItemPosition()).isEqualTo(expectedValue);        }    }   ])', 1), ('([3:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[3]:method_text:[calendar.set(year, month, day, hour, minute);        return calendar.getTimeInMillis();    }   ])', 1), ('([3:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[3]:method_text:[    Helper.assertTimeValue(timePicker, nonAutofilledHour, nonAutofilledMinute);        }    }   ])', 1), ('([5:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[5]:method_text:[lue= */                        false, /* workAddrValue= */true);            }        }    }   ])', 1), ('([3:/android/autofillservice/cts/dropdown/CheckoutActivityTest.java]:[MAC]:[3]:method_text:[ radioGroup.setEnabled(false));        assertThat(radioGroup.getAutofillValue()).isNull();    }}])', 1), ('([1:/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java]:[MAC]:[1]:method_text:[eTest extends PerformanceTestBase {    final int[] SUPPORTED_KEY_SIZES = {64, 128, 256, 512};   ])', 1), ('([6:/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java]:[MAC]:[6]:method_text:[               .setKeySize(keySize)                                    .build());        }    }}])', 1), ('([2:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[MAC]:[2]:method_text:[ge.     * 3. Check restored MasterSyncAutomatically=true is the same with backup value.     */   ])', 1), ('([7:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[MAC]:[7]:method_text:[   Account account = accounts[i];            am.removeAccountExplicitly(account);        }    }}])', 1), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[MAC]:[1]:method_text:[lPackage(EMPTY_APP_MAX_PACKAGE_NAME);        uninstallPackage(HELLO_WORLD_PACKAGE_NAME);    }   ])', 1), ('([3:/android/view/accessibility/cts/AccessibilityDelegateTest.java]:[MAC]:[3]:method_text:[vity);        grandparent.addView(mParentView);        mParentView.addView(mChildView);    }   ])', 1), ('([2:/android/view/accessibility/cts/AccessibilityDelegateTest.java]:[MAC]:[2]:method_text:[ion(                mParentView, AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS, bundle);    }}])', 1), ('([3:/android/preference/cts/ListPreferenceTest.java]:[MAC]:[3]:method_text:[vity();        mListPref = (ListPreference) mActivity.findPreference(""list_preference"");    }   ])', 1), ('([1:/android/preference/cts/ListPreferenceTest.java]:[MAC]:[1]:method_text:[            R.array.entries_list_preference);        compareArrays(entriesExp, entries);    }   ])', 1), ('([1:/android/preference/cts/ListPreferenceTest.java]:[MAC]:[1]:method_text:[R.array.entryvalues_list_preference);        compareArrays(entryValuesExp, entryValues);    }   ])', 1), ('([2:/android/autofillservice/cts/dropdown/DialogLauncherActivityTest.java]:[MAC]:[2]:method_text:[rActivityLaunched() {                mActivity = getActivity();            }        };    }   ])', 1), ('([3:/android/autofillservice/cts/dropdown/DialogLauncherActivityTest.java]:[MAC]:[3]:method_text:[     Helper.dumpStructure(""D\'OH!"", fillRequest.structure);            throw e;        }    }   ])', 1), ('([7:/android/autofillservice/cts/dropdown/DialogLauncherActivityTest.java]:[MAC]:[7]:method_text:[rts results.        mUiBot.selectDataset(""The Dude"");        mActivity.assertAutofilled();    }}])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[MAC]:[1]:method_text:[   runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".WifiTest"", ""testGetWifiMacAddress"", mUserId);    }   ])', 1), ('([3:/android/os/cts/CountDownTimerTest.java]:[MAC]:[3]:method_text:[       mStartTime = System.currentTimeMillis();        mActivity.countDownTimer.start();    }   ])', 1), ('([6:/android/os/cts/CountDownTimerTest.java]:[MAC]:[6]:method_text:[ertTrue(mActivity.onFinished);        assertEqualsTickTime(mActivity.tickTimes, OFFSET);    }   ])', 1), ('([13:/android/os/cts/CountDownTimerTest.java]:[MAC]:[13]:method_text:[uper.tearDown();        if (mActivity != null) {            mActivity.finish();        }    }}])', 1), ('([4:/android/widget/cts/MediaControllerTest.java]:[MAC]:[4]:method_text:[.getInstrumentation();        mActivity = mActivityRule.getActivity();    }    @UiThreadTest   ])', 1), ('([5:/android/widget/cts/MediaControllerTest.java]:[MAC]:[5]:method_text:[    * scenario description:     * 1. Show the MediaController.     *     */    @UiThreadTest   ])', 1), ('([4:/android/widget/cts/MediaControllerTest.java]:[MAC]:[4]:method_text:[iew);        mMediaController.show();        assertTrue(mMediaController.isShowing());    }   ])', 1), ('([13:/android/widget/cts/MediaControllerTest.java]:[MAC]:[13]:method_text:[());        }        return mActivity.getFileStreamPath(VIDEO_NAME).getAbsolutePath();    }   ])', 1), ('([8:/android/widget/cts/MediaControllerTest.java]:[MAC]:[8]:method_text:[ivityRule, mActivity.getWindow().getDecorView(),                null);    }    @UiThreadTest   ])', 1), ('([2:/android/widget/cts/MediaControllerTest.java]:[MAC]:[2]:method_text:[r.setEnabled(false);        assertFalse(mMediaController.isEnabled());    }    @UiThreadTest   ])', 1), ('([2:/android/widget/cts/MediaControllerTest.java]:[MAC]:[2]:method_text:[        @Override        public int getAudioSessionId() {            return 0;        }    }}])', 1), ('([6:/android/acceleration/cts/BaseAccelerationTest.java]:[MAC]:[6]:method_text:[eratedView();        mManualSoftwareView = mActivity.getManualSoftwareAcceleratedView();    }   ])', 1), ('([1:/android/acceleration/cts/BaseAccelerationTest.java]:[MAC]:[1]:method_text:[ic int getMajorVersion(int glEsVersion) {        return ((glEsVersion & 0xffff0000) >> 16);    }}])', 1), ('([2:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[MAC]:[2]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([4:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[MAC]:[4]:method_text:[EST_MAC));        assertThat(client.getMacAddress().toByteArray()).isEqualTo(TEST_MAC);    }   ])', 1), ('([4:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[MAC]:[4]:method_text:[(client);        assertThat(clientDeserialized.hashCode()).isEqualTo(client.hashCode());    }   ])', 1), ('([3:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[MAC]:[3]:method_text:[tes(new byte[] { 7, 8, 9, 10, 11, 12 }));        assertThat(client2).isNotEqualTo(client);    }}])', 1), ('([1:/android/app/cts/ActivityActionModeTest.java]:[MAC]:[1]:method_text:[Return(true);        when(mCallback.onPrepareActionMode(any(), any())).thenReturn(true);    }   ])', 1), ('([2:/android/app/cts/ActivityActionModeTest.java]:[MAC]:[2]:method_text:[      assertNotNull(mode);        assertEquals(ActionMode.TYPE_PRIMARY, mode.getType());    }   ])', 1), ('([2:/android/app/cts/ActivityActionModeTest.java]:[MAC]:[2]:method_text:[     assertNotNull(mode);        assertEquals(ActionMode.TYPE_FLOATING, mode.getType());    }   ])', 1), ('([2:/android/app/cts/ActivityActionModeTest.java]:[MAC]:[2]:method_text:[        assertNotNull(mode);        assertEquals(ActionMode.TYPE_PRIMARY, mode.getType());    }}])', 1), ('([4:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[MAC]:[4]:method_text:[IM_SLOT_0);            SimContacts.removeSimAccounts(mResolver, SIM_SLOT_1);        });    }   ])', 1), ('([4:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[MAC]:[4]:method_text:[ull, null);        assertContactsDeletedEventually(System.currentTimeMillis(), acc1Ids);    }   ])', 1), ('([4:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[MAC]:[4]:method_text:[ contacts from a single account.  Contact should be deleted upon     * account removal.     */   ])', 1), ('([2:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[MAC]:[2]:method_text:[ut this should not be done for the local account.     */    @CddTest(requirement=""3.18/C-1-4"")   ])', 1), ('([3:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[MAC]:[3]:method_text:[ to an added account will be removed but this should not be done for these SIM accounts.     */   ])', 1), ('([7:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[MAC]:[7]:method_text:[er, int)} is called.     * Only SIM accounts from the sim slot index should be removed.     */   ])', 1), ('([9:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[MAC]:[9]:method_text:[     * one account is removed.  But contact should have last updated timestamp updated.     */   ])', 1), ('([4:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[MAC]:[4]:method_text:[EP_BETWEEN_POLL_MS);        }        mAccountManager.removeAccount(ACCT_2, null, null);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsProvider2_AccountRemovalTest.java]:[MAC]:[2]:method_text:[aseAsserts.assertAndCreateContact(mResolver, account));        }        return accountIds;    }}])', 1), ('([3:/android/media/cts/AudioManagerTest.java]:[MAC]:[3]:method_text:[terruptedException e) { }                return mIntentReceived;            }        }    }   ])', 1), ('([2:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[MAC]:[2]:method_text:[tUiAutomation().destroy();        InstrumentedAccessibilityService.disableAllServices();    }   ])', 1), ('([3:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[MAC]:[3]:method_text:[     assertFalse(mAccessibilityManager.removeAccessibilityStateChangeListener(listener));    }   ])', 1), ('([3:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[MAC]:[3]:method_text:[  assertFalse(mAccessibilityManager.removeTouchExplorationStateChangeListener(listener));    }   ])', 1), ('([1:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[MAC]:[1]:method_text:[ return mAccessibilityManager.isTouchExplorationEnabled();            }        }.run();    }   ])', 1), ('([1:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[MAC]:[1]:method_text:[        assertTrue(""The vibrating service should be enabled."", vibratingServiceEnabled);    }   ])', 1), ('([1:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[MAC]:[1]:method_text:[    return;            }        }        fail(""The speaking service is not enabled."");    }   ])', 1), ('([1:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[MAC]:[1]:method_text:[               multipleFeedbackTypesServiceEnabled);    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([1:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[MAC]:[1]:method_text:[vice();        waitForAccessibilityEnabled();        mAccessibilityManager.interrupt();    }   ])', 1), ('([1:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[MAC]:[1]:method_text:[yEvent(AccessibilityEvent.obtain(                AccessibilityEvent.TYPE_VIEW_CLICKED));    }   ])', 1), ('([8:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[MAC]:[8]:method_text:[;        } catch (IOException e) {            fail(""Fail to run shell command"");        }    }}])', 1), ('([5:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[5]:method_text:[tatic void afterClass() {        ValueAnimator.setDurationScale(sPreviousAnimatorScale);    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[n(valueAnimatorLocal);        assertEquals(mDuration, valueAnimatorLocal.getDuration());    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[ = mActivity.view.bounceYAnimator;        assertTrue(valueAnimatorReturned.isRunning());    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[ueAnimator);        assertEquals(ValueAnimator.RESTART, mValueAnimator.getRepeatMode());    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[tion(mValueAnimator);        assertEquals(repeatCount, mValueAnimator.getRepeatCount());    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[nim, false);        verify(listener, timeout(450).times(1)).onAnimationEnd(anim, false);    }   ])', 1), ('([3:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[3]:method_text:[assertTrue(currentValue > 50);        mActivityRule.runOnUiThread(delayedAnim::cancel);    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[(l1, times(1)).onAnimationResume(a1);        verify(l2, times(0)).onAnimationResume(a1);    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[entFraction, EPSILON);        assertEquals(50, currentValue, EPSILON);    }    @UiThreadTest   ])', 1), ('([2:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[2]:method_text:[ator.getFrameDelay();            assertEquals(frameDelay, actualFrameDelay);        });    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[3, times(0)).onAnimationUpdate(a1);        verify(l4, atLeast(1)).onAnimationUpdate(a1);    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[alueAnimator);        assertTrue(interpolator.equals(mValueAnimator.getInterpolator()));    }   ])', 1), ('([5:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[5]:method_text:[r);        float y = mActivity.view.newBall.getY();        assertEquals(y, endY, 0.0f);    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[ public float getInterpolation(float input) {            return input * input;        }    }   ])', 1), ('([2:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[2]:method_text:[assertEquals(0, green);        mActivityRule.runOnUiThread(valueAnimatorLocal::cancel);    }   ])', 1), ('([2:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[2]:method_text:[or.getAnimatedFraction() >= 0.5f);        mActivityRule.runOnUiThread(animator::cancel);    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[nOnUiThread(() -> {            animator.start();            animator.end();        });    }   ])', 1), ('([11:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[11]:method_text:[         message.append(values[i]).append("" "");        }        return message.toString();    }}])', 1), ('([1:/android/assist/cts/AssistStructureTest.java]:[MAC]:[1]:method_text:[l(""Activity failed to draw in "" + Utils.ACTIVITY_ONRESUME_TIMEOUT_MS + ""msec"");        }    }   ])', 1), ('([13:/android/text/method/cts/PasswordTransformationMethodTest.java]:[MAC]:[13]:method_text:[Delimiter(""\\\\A"")) {            return scanner.hasNext() ? scanner.next() : """";        }    }   ])', 1), ('([2:/android/text/method/cts/PasswordTransformationMethodTest.java]:[MAC]:[2]:method_text:[nsformedText.toString()                .equals(""\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022""));    }   ])', 1), ('([3:/android/text/method/cts/PasswordTransformationMethodTest.java]:[MAC]:[3]:method_text:[tInt(mActivity.getContentResolver(), System.TEXT_SHOW_PASSWORD,                on ? 1 : 0);    }}])', 1), ('([2:/android/opengl/cts/ColorBufferTest.java]:[MAC]:[2]:method_text:[  * <pre>     * shader count : 2     * error        : GLES20.GL_NO_ERROR     * </pre>     */   ])', 1), ('([4:/android/opengl/cts/ColorBufferTest.java]:[MAC]:[4]:method_text:[tualColor[2]/255)) < 0.1f);        //assertTrue(Math.abs(a - (actualColor[3]/255)) < 0.1f);    }}])', 1), ('([3:/android/server/wm/CrossAppDragAndDropTests.java]:[MAC]:[3]:method_text:[result mismatch,"", expectedResult,                    results.get(resultKey));        }    }   ])', 1), ('([4:/android/view/animation/cts/LinearInterpolatorTest.java]:[MAC]:[4]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([1:/android/view/animation/cts/LinearInterpolatorTest.java]:[MAC]:[1]:method_text:[or() {        new LinearInterpolator();        new LinearInterpolator(mActivity, null);    }   ])', 1), ('([3:/android/view/animation/cts/LinearInterpolatorTest.java]:[MAC]:[3]:method_text:[ssertEquals(delta3, delta4, ALPHA_DELTA);        assertEquals(delta4, delta5, ALPHA_DELTA);    }}])', 1), ('([6:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[6]:method_text:[                }            };        }        return mActivityRule;    }    @Presubmit   ])', 1), ('([15:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[15]:method_text:[lectDataset(""DUDE"");        // Check the results.        mActivity.assertAutoFilled();    }   ])', 1), ('([5:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[5]:method_text:[DE"");        // Check the results.        mActivity.assertAutoFilled();    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[1]:method_text:[verrideDispatchProvideAutofillStructure(true);        autofillTest(true);    }    @Presubmit   ])', 1), ('([4:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[4]:method_text:[Dataset(""The Dude"");        // Check the results.        mActivity.assertAutoFilled();    }   ])', 1), ('([8:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[8]:method_text:[ny"");        // Check the results.        mActivity.assertAutoFilled();    }    @Presubmit   ])', 1), ('([8:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[8]:method_text:[        callback.assertUiShownEvent(mActivity.mCustomView, mActivity.mPassword.text.id);    }   ])', 1), ('([4:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[4]:method_text:[().commit();        mUiBot.assertSaveNotShowing(SAVE_DATA_TYPE_PASSWORD);    }    @Presubmit   ])', 1), ('([2:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[2]:method_text:[ressBack();        mUiBot.assertSaveNotShowing(SAVE_DATA_TYPE_PASSWORD);    }    @Presubmit   ])', 1), (""([12:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[12]:method_text:[gain, but then we wouldn't be effectively testing that the context was committed    @Presubmit   ])"", 1), (""([1:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[1]:method_text:[// Assert it's not showing.        mUiBot.assertSaveNotShowing(SAVE_DATA_TYPE_PASSWORD);    }   ])"", 1), (""([3:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[3]:method_text:[// Assert it's not showing.        mUiBot.assertSaveNotShowing(SAVE_DATA_TYPE_PASSWORD);    }   ])"", 1), (""([4:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[4]:method_text:[// Assert it's not showing.        mUiBot.assertSaveNotShowing(SAVE_DATA_TYPE_PASSWORD);    }   ])"", 1), ('([4:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[4]:method_text:[not showing.        mUiBot.assertSaveNotShowing(SAVE_DATA_TYPE_PASSWORD);    }    @Presubmit   ])', 1), ('([13:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[MAC]:[13]:method_text:[nCompatMode() {        assumeTrue(""test not applicable when on compat mode"", !mCompatMode);    }}])', 1), ('([1:/android/acceleration/cts/HardwareAccelerationTest.java]:[MAC]:[1]:method_text:[ed());            assertFalse(mManualSoftwareView.isCanvasHardwareAccelerated());        }    }}])', 1), ('([1:/android/hardware/camera2/cts/OfflineSessionTest.java]:[MAC]:[1]:method_text:[))                fail(""Remote offline session test activity is still running"");        }    }}])', 1), ('([3:/android/video/cts/CodecEncoderPerformanceTest.java]:[MAC]:[3]:method_text:[exp fps: "" + mAchievedFps                + ""/"" + expectedFps, mAchievedFps >= expectedFps);    }}])', 1), ('([5:/android/view/cts/KeyEventInterceptTest.java]:[MAC]:[5]:method_text:[     mActivity = mActivityRule.getActivity();        WindowUtil.waitForFocus(mActivity);    }   ])', 1), ('([2:/android/view/cts/KeyEventInterceptTest.java]:[MAC]:[2]:method_text:[tEquals(keyCode, keyEvent.getKeyCode());        assertEquals(action, keyEvent.getAction());    }}])', 1), ('([3:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[MAC]:[3]:method_text:[    PollingCheck.waitFor(() -> mTextView.isFocused() && (mTextView.getLayout() != null));    }   ])', 1), ('([5:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[MAC]:[5]:method_text:[View.FOCUS_LEFT);        });        verifySelection(END_OF_ALL_TEXT);    }    @UiThreadTest   ])', 1), ('([1:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[MAC]:[1]:method_text:[c   ?:?    \\n\\n""            + ""lectus porta consequ\\u00e4t...  LOReM iPSuM"";    @UiThreadTest   ])', 1), ('([1:/android/text/method/cts/ArrowKeyMovementMethodTest.java]:[MAC]:[1]:method_text:[ALL_TEXT);    }    private static class MyMetaKeyKeyListener extends MetaKeyKeyListener {    }}])', 1), ('([4:/android/hardware/cts/CameraGLTest.java]:[MAC]:[4]:method_text:[.setPreviewTexture in conjunction with the standard Camera preview callback */    @UiThreadTest   ])', 1), ('([6:/android/view/accessibility/cts/AccessibilityEventTest.java]:[MAC]:[6]:method_text:[(event));            return super.requestSendAccessibilityEvent(child, event);        }    }   ])', 1), ('([1:/android/view/accessibility/cts/AccessibilityEventTest.java]:[MAC]:[1]:method_text:[rtEquals(-7, event.getScrollDeltaX());        assertEquals(50, event.getScrollDeltaY());    }   ])', 1), ('([3:/android/autofillservice/cts/unittests/ServiceEnabledForSureTest.java]:[MAC]:[3]:method_text:[afeCleanerRule.run(() ->assertThat(mActivity.getAutofillManager().isEnabled()).isTrue());    }   ])', 1), ('([2:/android/autofillservice/cts/unittests/ServiceEnabledForSureTest.java]:[MAC]:[2]:method_text:[bleAutofillService(mContext, SERVICE_NAME);        Helper.assertAutofillEnabled(afm, true);    }}])', 1), ('([7:/android/server/wm/WindowTest.java]:[MAC]:[7]:method_text:[f (mActivity != null) {            mActivity.setFlagFalse();        }    }    @UiThreadTest   ])', 1), ('([2:/android/server/wm/WindowTest.java]:[MAC]:[2]:method_text:[indowAttributesChanged.     * 3. clearFlags: clear the flag bits as specified in flags.     */   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[ams.FLAG_FULLSCREEN);        mWindow.clearFlags(WindowManager.LayoutParams.FLAG_DITHER);    }   ])', 1), (""([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[se;     * Otherwise, it will display itself meanwhile container's mHasChildren is true.     */   ])"", 1), ('([2:/android/server/wm/WindowTest.java]:[MAC]:[2]:method_text:[later} instance that this Window     *    retrieved from its Context.     */    @UiThreadTest   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[ null     * 2. Set listview_window as focus view, get it and compare.     */    @UiThreadTest   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[d audio stream whose volume should be changed by     *    the harwdare volume controls.     */   ])', 1), (""([4:/android/server/wm/WindowTest.java]:[MAC]:[4]:method_text:[ android.R.styleable#Window} attributes from this     * window's theme. It's invisible.     */   ])"", 1), ('([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[ndow whose details        // are invisible for user.        assertNotNull(windowStyle);    }   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[  * (based on the {@link android.R.attr#windowIsFloating} attribute in the style/theme).     */   ])', 1), ('([3:/android/server/wm/WindowTest.java]:[MAC]:[3]:method_text:[tter is protected final.     *   2. certain window flags are not clear to concrete one.     */   ])', 1), ('([2:/android/server/wm/WindowTest.java]:[MAC]:[2]:method_text:[d.listview_window, view.getId());        });        mInstrumentation.waitForIdleSync();    }   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[ * has no views with focus, but the activity still wants a chance to process key events.     */   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[Format.UNKNOWN to allow the Window to select     *                          the format.     */   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[utesChanged(window.getAttributes());    }    /**     * Set the gravity of the window     */   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[    *    2.You can change them to WRAP_CONTENT to make a window that is not full-screen.     */   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[    /**     * Set the type of the window, as per the WindowManager.LayoutParams types.     */   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[indow.     *    2.Providing ""unspecified"" here will override the input mode the window.     */   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[ce and is private)     *    2.Providing 0 here will override the animations the window.     */   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[wAnimations);        verify(mWindowCallback, times(1)).onWindowAttributesChanged(attrs);    }   ])', 1), ('([4:/android/server/wm/WindowTest.java]:[MAC]:[4]:method_text:[ootWindowInsets().getSystemWindowInsets(),                mActivity.getAppliedInsets());    }   ])', 1), (""([1:/android/server/wm/WindowTest.java]:[MAC]:[1]:method_text:[/ We don't expect that we even got called.        assertNull(mActivity.getLastInsets());    }   ])"", 1), ('([2:/android/server/wm/WindowTest.java]:[MAC]:[2]:method_text:[tLastInsets());    }    /**     * Test setLocalFocus together with injectInputEvent.     */   ])', 1), ('([5:/android/server/wm/WindowTest.java]:[MAC]:[5]:method_text:[      @Override        public int getNavigationBarColor() {            return 0;        }    }}])', 1), ('([1:/com/android/cts/atracetestapp/AtraceDeviceTests.java]:[MAC]:[1]:method_text:[vity> mActivity =            new ActivityTestRule<>(AtraceTestAppActivity.class, true, false);   ])', 1), ('([1:/com/android/cts/atracetestapp/AtraceDeviceTests.java]:[MAC]:[1]:method_text:[;        activity.finish();    }    static {        System.loadLibrary(""ctstrace_jni"");    }}])', 1), ('([5:/android/server/wm/AppConfigurationTests.java]:[MAC]:[5]:method_text:[tivitySession activitySession) {        return activitySession.getAppConfigInfo().sizeInfo;    }}])', 1), ('([2:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[MAC]:[2]:method_text:[ure);    }    // Verify that camera extension sessions can be created and closed as expected.   ])', 1), ('([6:/android/animation/cts/LayoutAnimationTest.java]:[MAC]:[6]:method_text:[    public void teardown() {        ValueAnimator.setDurationScale(mOldAnimationScale);    }   ])', 1), ('([1:/android/animation/cts/LayoutAnimationTest.java]:[MAC]:[1]:method_text:[        assertTrue(alphaValue <= endAlpha);            lastValue = alphaValue;        }    }   ])', 1), ('([1:/android/animation/cts/LayoutAnimationTest.java]:[MAC]:[1]:method_text:[ild) {            super.showChild(parent, child);            mShowChild = true;        }    }}])', 1), ('([5:/android/widget/cts/ImageSwitcherTest.java]:[MAC]:[5]:method_text:[tivity();        mImageSwitcher = (ImageSwitcher) mActivity.findViewById(R.id.switcher);    }   ])', 1), ('([4:/android/widget/cts/ImageSwitcherTest.java]:[MAC]:[4]:method_text:[     assertNotNull(attrs);        new ImageSwitcher(mActivity, attrs);    }    @UiThreadTest   ])', 1), ('([3:/android/widget/cts/ImageSwitcherTest.java]:[MAC]:[3]:method_text:[ssertNull(((ImageView) mImageSwitcher.getCurrentView()).getDrawable());    }    @UiThreadTest   ])', 1), ('([5:/android/widget/cts/ImageSwitcherTest.java]:[MAC]:[5]:method_text:[        imagefile.delete();        mImageSwitcher.setImageURI(null);    }    @UiThreadTest   ])', 1), ('([4:/android/widget/cts/ImageSwitcherTest.java]:[MAC]:[4]:method_text:[            }        } catch (IOException e) {            fail(e.getMessage());        }    }}])', 1), ('([2:/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java]:[MAC]:[2]:method_text:[.getSystemService(AccountManager.class);    }    /**     * Remove all test accounts.     */   ])', 1), ('([3:/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java]:[MAC]:[3]:method_text:[_ACCOUNT_TYPE));    }    /**     * Add an incompatible account, type A, no features.     */   ])', 1), ('([3:/android/server/wm/TransitionSelectionTests.java]:[MAC]:[3]:method_text:[tionTests extends ActivityManagerTestBase {    // Test activity open/close under normal timing   ])', 1), ('([3:/android/preference/cts/DialogPreferenceTest.java]:[MAC]:[3]:method_text:[ence = (DialogPreference) mActivity.findPreference(                ""dialog_preference"");    }   ])', 1), ('([1:/android/preference/cts/DialogPreferenceTest.java]:[MAC]:[1]:method_text:[ces().getString(R.string.title_dialog_preference);        assertEquals(titleExp, title);    }   ])', 1), ('([1:/android/preference/cts/DialogPreferenceTest.java]:[MAC]:[1]:method_text:[          R.string.dialogtitle_dialog_preference);        assertEquals(titleExp, title);    }   ])', 1), ('([1:/android/preference/cts/DialogPreferenceTest.java]:[MAC]:[1]:method_text:[awable.ic_launcher);        assertEquals(drawableExp.getBounds(), drawable.getBounds());    }   ])', 1), ('([1:/android/preference/cts/DialogPreferenceTest.java]:[MAC]:[1]:method_text:[         R.string.dialog_message);        assertEquals(dialogMessageExp, dialogMessage);    }   ])', 1), ('([1:/android/preference/cts/DialogPreferenceTest.java]:[MAC]:[1]:method_text:[ng.positive_button_text);        assertEquals(positiveButtonText, postiveButtonTextExp);    }   ])', 1), ('([1:/android/preference/cts/DialogPreferenceTest.java]:[MAC]:[1]:method_text:[ring.negative_button_text);        assertEquals(negativeButtonText, negativeButtonTextExp);    }}])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[MAC]:[1]:method_text:[   mMediaPlayer.stop();    }    // setPlaybackParams() with zero speed should pause playback.   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[MAC]:[1]:method_text:[d be paused"", mMediaPlayer.getCurrentPosition(), position);        mMediaPlayer.stop();    }   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[MAC]:[1]:method_text:[, pbp.getSpeed(), FLOAT_TOLERANCE);        }        mMediaPlayer.stop();    }    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[MAC]:[1]:method_text:[ng in time for mode "" + seekMode,                timeRemainedMs > 0);        return cp;    }   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[MAC]:[1]:method_text:[,                ts2.getAnchorMediaTimeUs(), toleranceUs);        mMediaPlayer.stop();    }   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[MAC]:[1]:method_text:[Equals(0, mOnMediaTimeDiscontinuityCalled.getNumSignal());        mMediaPlayer.reset();    }   ])', 1), ('([2:/android/autofillservice/cts/commontests/FillEventHistoryCommonTestCase.java]:[MAC]:[2]:method_text:[ionSelected(events.get(1), ""name"",                ""clientStateKey"", ""clientStateValue"");    }   ])', 1), ('([8:/android/autofillservice/cts/commontests/FillEventHistoryCommonTestCase.java]:[MAC]:[8]:method_text:[vents.get(3), NULL_DATASET_ID,                    ""clientStateKey"", ""Value2"");        }    }   ])', 1), ('([3:/android/autofillservice/cts/commontests/FillEventHistoryCommonTestCase.java]:[MAC]:[3]:method_text:[y A - at this point, service should have stats of     *        activity A.     * </ol>     */   ])', 1), ('([8:/android/autofillservice/cts/commontests/FillEventHistoryCommonTestCase.java]:[MAC]:[8]:method_text:[own(finalSelection.getEvents().get(0), NULL_DATASET_ID, ""activity"",                ""A"");    }   ])', 1), ('([6:/android/autofillservice/cts/commontests/FillEventHistoryCommonTestCase.java]:[MAC]:[6]:method_text:[alog was not shown because the     * SaveInfo associated with the FillResponse is null.     */   ])', 1), ('([7:/android/autofillservice/cts/commontests/FillEventHistoryCommonTestCase.java]:[MAC]:[7]:method_text:[      assertWithMessage(""Wrong welcome msg"").that(actualMessage).isEqualTo(expectedMessage);    }}])', 1), ('([7:/android/providerui/cts/MediaStoreUiTest.java]:[MAC]:[7]:method_text:[FLAG_GRANT_WRITE_URI_PERMISSION);            }            mActivity.finish();        }    }   ])', 1), ('([2:/android/providerui/cts/MediaStoreUiTest.java]:[MAC]:[2]:method_text:[) {            Os.write(fd.getFileDescriptor(), expected, 0, expected.length);        }    }   ])', 1), ('([1:/android/providerui/cts/MediaStoreUiTest.java]:[MAC]:[1]:method_text:[tyException."");        } catch (SecurityException e) {            // Expected        }    }   ])', 1), ('([2:/android/providerui/cts/MediaStoreUiTest.java]:[MAC]:[2]:method_text:[ assertEquals(mMediaStoreUri, mediaUri);        assertAccessToMediaUri(mediaUri, mFile);    }   ])', 1), ('([8:/android/providerui/cts/MediaStoreUiTest.java]:[MAC]:[8]:method_text:[                FileUtils.copy(source, target);            }        }        return file;    }}])', 1), ('([4:/android/animation/cts/InterpolatorTest.java]:[MAC]:[4]:method_text:[Instrumentation().setInTouchMode(false);        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([1:/android/animation/cts/InterpolatorTest.java]:[MAC]:[1]:method_text:[        assertEquals(turningPointY, interpolator.getInterpolation(turningPointX), EPSILON);    }}])', 1), ('([2:/android/hardware/input/cts/tests/RazerRaijuMobileBluetoothTest.java]:[MAC]:[2]:method_text:[eHelper.waitForHomeActivityVisible();        wmStateHelper.assertHomeActivityVisible(true);    }}])', 1), ('([2:/android/suspendapps/cts/DualSuspendTests.java]:[MAC]:[2]:method_text:[dle(Intent.EXTRA_PACKAGE_NAME, TEST_APP_PACKAGE_NAME),                mReceiverHandler);    }   ])', 1), ('([1:/android/suspendapps/cts/DualSuspendTests.java]:[MAC]:[1]:method_text:[);        assertTrue(""Test app not suspended"", mTestAppInterface.isTestAppSuspended());    }   ])', 1), ('([2:/android/suspendapps/cts/DualSuspendTests.java]:[MAC]:[2]:method_text:[ing restriction "" + userRestriction,                mTestAppInterface.awaitBroadcast());    }   ])', 1), ('([2:/android/suspendapps/cts/DualSuspendTests.java]:[MAC]:[2]:method_text:[dAndAssertResult(ALL_TEST_PACKAGES, null, null, null,                ALL_TEST_PACKAGES);    }   ])', 1), ('([1:/android/suspendapps/cts/DualSuspendTests.java]:[MAC]:[1]:method_text:[verHandler);        }        removeDeviceAdmin();        SuspendTestUtils.unsuspendAll();    }}])', 1)]"	""	""	"[('MAC', 234)]"	"[('[android.autofillservice.cts.dropdown.CheckoutActivityTest isNull CtsAutoFillServiceTestCases]', 6), ('[android.autofillservice.cts.dropdown.VirtualContainerActivityTest testAutofillCallbacks CtsAutoFillServiceTestCases]', 4), ('[android.autofillservice.cts.dropdown.VirtualContainerActivityTest testSaveNotShown_noUserInput CtsAutoFillServiceTestCases]', 4), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testAutofill CtsAutoFillServiceTestCases]', 2), ('[android.autofillservice.cts.dropdown.VirtualContainerActivityTest testAutofillManuallyOneDataset CtsAutoFillServiceTestCases]', 2), ('[android.media.cts.NativeDecoderTest testDataSourceWithCallback CtsMediaTestCases]', 1), ('[android.view.animation.cts.GridLayoutAnimationControllerTest testConstructor CtsViewTestCases]', 1), ('[android.view.animation.cts.GridLayoutAnimationControllerTest testAccessDelay CtsViewTestCases]', 1), ('[android.view.animation.cts.GridLayoutAnimationControllerTest testAccessDirection CtsViewTestCases]', 1), ('[android.view.animation.cts.GridLayoutAnimationControllerTest testGetDelayForView CtsViewTestCases]', 1), ('[android.view.animation.cts.GridLayoutAnimationControllerTest testAccessDirectionPriority CtsViewTestCases]', 1), ('[android.autofillservice.cts.commontests.TimePickerTestCase testAutoFillAndSave CtsAutoFillServiceTestCases]', 1), ('[android.bluetooth.cts.ScanFilterTest testDeviceAddressFilter CtsBluetoothTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testGetAutofillOptionsSorted CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testSanitization CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testCustomizedSaveUiWithContentDescription CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest testCustomizedSaveUiWhenListResolutionFails CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest autofillTextWithListValue CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest isChecked CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.CheckoutActivityTest getTimeInMillis CtsAutoFillServiceTestCases]', 1), ('[android.keystore.cts.performance.HmacKeyGenPerformanceTest testHmacKeyGen CtsKeystoreTestCases]', 1), ('[android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest testIsSyncableIsOne_ifTurnOffSyncEnabled None]', 1), ('[android.view.accessibility.cts.AccessibilityDelegateTest testViewDelegatesToAccessibilityDelegate CtsAccessibilityTestCases]', 1), ('[android.preference.cts.ListPreferenceTest ListPreferenceTest CtsPreferenceTestCases]', 1), ('[android.preference.cts.ListPreferenceTest testGetEntries CtsPreferenceTestCases]', 1), ('[android.preference.cts.ListPreferenceTest testGetEntryValues CtsPreferenceTestCases]', 1), ('[android.autofillservice.cts.dropdown.DialogLauncherActivityTest testAutofill_noDatasets_afterResizing CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.DialogLauncherActivityTest testAutofill_oneDataset_afterResizing CtsAutoFillServiceTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testWifi CtsDevicePolicyManagerTestCases]', 1), ('[android.os.cts.CountDownTimerTest currentTimeMillis None]', 1), ('[android.os.cts.CountDownTimerTest testCountDownTimer None]', 1), ('[android.os.cts.CountDownTimerTest testCountDownTimerCancel None]', 1), ('[android.widget.cts.MediaControllerTest testConstructor CtsWidgetTestCases]', 1), ('[android.widget.cts.MediaControllerTest testMediaController CtsWidgetTestCases]', 1), ('[android.widget.cts.MediaControllerTest testShow CtsWidgetTestCases]', 1), ('[android.widget.cts.MediaControllerTest testOnTrackballEvent CtsWidgetTestCases]', 1), ('[android.widget.cts.MediaControllerTest testSetEnabled CtsWidgetTestCases]', 1), ('[android.widget.cts.MediaControllerTest testSetPrevNextListeners CtsWidgetTestCases]', 1), ('[android.acceleration.cts.BaseAccelerationTest testNotAttachedView CtsAccelerationTestCases]', 1), ('[android.net.wifi.nl80211.cts.NativeWifiClientTest testGetters CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.NativeWifiClientTest testEquals CtsWifiTestCases]', 1), ('[android.app.cts.ActivityActionModeTest testStartPrimaryActionMode CtsAppTestCases]', 1), ('[android.app.cts.ActivityActionModeTest testStartFloatingActionMode CtsAppTestCases]', 1), ('[android.app.cts.ActivityActionModeTest testStartTypelessActionMode CtsAppTestCases]', 1), ('[android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest testAccountRemoval_deletesContacts CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest testAccountRemoval_hasDeleteLogsForContacts CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest testAccountRemovalWithMergedContact_deletesContacts CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest testAccountRemoval_doesNotDeleteLocalAccountContacts CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest testAccountRemoval_doesNotDeleteSimAccountContacts CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest testRemoveSimAccount_deleteSimAccountContacts CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest testAccountRemovalWithMergedContact_doesNotDeleteContactAndTimestampUpdated CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsProvider2_AccountRemovalTest testAccountRemovalWithMergedContact_hasDeleteLogsForContacts CtsContactsProviderTestCases]', 1), ('[android.media.cts.AudioManagerTest testSpeakerphoneIntent CtsMediaTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest disableAllServices CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testAddAndRemoveAccessibilityStateChangeListener CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testAddAndRemoveTouchExplorationStateChangeListener CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testIsTouchExplorationEnabled CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetInstalledAccessibilityServicesList CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetEnabledAccessibilityServiceList CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetEnabledAccessibilityServiceListForType CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetEnabledAccessibilityServiceListForTypes CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetAccessibilityServiceList CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testInterrupt CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testSendAccessibilityEvent CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testTouchExplorationListenerNoHandler CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testTouchExplorationListenerWithHandler CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testAccessibilityStateListenerNoHandler CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testAccessibilityStateListenerWithHandler CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetRecommendedTimeoutMillis CtsAccessibilityTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testDuration CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testIsRunning CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testRepeatMode CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testRepeatCount CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testListenerCallbackWithStartDelay CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testSetCurrentPlayTime CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testPauseListener CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testSetCurrentPlayTimeAfterStart CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testSetCurrentFraction CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testGetFrameDelay CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testUpdateListeners CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testValuesSetterAndGetter CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testSetObjectValues CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testSetInterpolator CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testEnd CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testGetAnimatedFraction CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testOfFloat CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testOfInt CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testOfArgb CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testNoDelayOnSeekAnimation CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testNotifiesAfterEnd CtsAnimationTestCases]', 1), ('[android.animation.cts.ValueAnimatorTest testAnimationDurationNoShortenByTinkeredScale CtsAnimationTestCases]', 1), ('[android.text.method.cts.PasswordTransformationMethodTest isFocused CtsTextTestCases]', 1), ('[android.text.method.cts.PasswordTransformationMethodTest testTextChangedCallBacks CtsTextTestCases]', 1), ('[android.text.method.cts.PasswordTransformationMethodTest testGetInstance CtsTextTestCases]', 1), ('[android.opengl.cts.ColorBufferTest ColorBufferTest CtsOpenGLTestCases]', 1), ('[android.opengl.cts.ColorBufferTest test_RGBA_1001 CtsOpenGLTestCases]', 1), ('[android.opengl.cts.ColorBufferTest test_RGBA_1101 CtsOpenGLTestCases]', 1), ('[android.opengl.cts.ColorBufferTest test_RGBA_1111 CtsOpenGLTestCases]', 1), ('[android.opengl.cts.ColorBufferTest test_RGBA_0101 CtsOpenGLTestCases]', 1), ('[android.opengl.cts.ColorBufferTest test_RGBA_0011 CtsOpenGLTestCases]', 1), ('[android.opengl.cts.ColorBufferTest test_RGBA_0000 CtsOpenGLTestCases]', 1), ('[android.opengl.cts.ColorBufferTest test_RGBA_rand_val_one CtsOpenGLTestCases]', 1), ('[android.server.wm.CrossAppDragAndDropTests uptimeMillis CtsWindowManagerDeviceTestCases]', 1), ('[android.view.animation.cts.LinearInterpolatorTest testConstructor CtsViewTestCases]', 1), ('[android.view.animation.cts.LinearInterpolatorTest testLinearInterpolator CtsViewTestCases]', 1), ('[android.autofillservice.cts.dropdown.VirtualContainerActivityTest VirtualContainerActivityTest CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.VirtualContainerActivityTest testAutofill_appContext CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.VirtualContainerActivityTest testAutofillSync CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.VirtualContainerActivityTest testAutofillOverrideDispatchProvideAutofillStructure CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.VirtualContainerActivityTest testSaveDialogNotShownWhenBackIsPressed CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.VirtualContainerActivityTest testSave_submitButtonClicked CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.dropdown.VirtualContainerActivityTest testDatasetFiltering CtsAutoFillServiceTestCases]', 1), ('[android.acceleration.cts.HardwareAccelerationTest testIsHardwareAccelerated CtsAccelerationTestCases]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testUnsupportedOfflineSessionOutputs CtsCameraTestCases]', 1), ('[android.video.cts.CodecEncoderPerformanceTest testPerformanceOfHardwareVideoEncoders CtsVideoTestCases]', 1), ('[android.view.cts.KeyEventInterceptTest testKeyCodeBackShortcutRightMeta CtsViewTestCases]', 1), ('[android.text.method.cts.ArrowKeyMovementMethodTest MyMetaKeyKeyListener CtsTextTestCases]', 1), ('[android.text.method.cts.ArrowKeyMovementMethodTest testOnTakeFocus CtsTextTestCases]', 1), ('[android.text.method.cts.ArrowKeyMovementMethodTest testOnKeyUp CtsTextTestCases]', 1), ('[android.text.method.cts.ArrowKeyMovementMethodTest testMovementFromMiddleOfWord CtsTextTestCases]', 1), ('[android.hardware.cts.CameraGLTest deriveCameraIdsUnderTest CtsCameraTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityEventTest testScrollEventsClearedOnDetach CtsAccessibilityTestCases]', 1), ('[android.autofillservice.cts.unittests.ServiceEnabledForSureTest prepareServicePreTest CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.unittests.ServiceEnabledForSureTest testIsAutofillEnabled CtsAutoFillServiceTestCases]', 1), ('[android.server.wm.WindowTest testConstructor CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testOpFlags CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testAccessAttributes CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testAccessContainer CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testAddContentView CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testDecorView CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testAccessWindowManager CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testGetWindowStyle CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testIsActive CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetBackgroundDrawable CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetContentView CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetTitle CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testTakeKeyEvents CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetDefaultWindowFormat CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetGravity CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetLayout CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetType CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetSoftInputMode CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetWindowAnimations CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetFitsContentForInsets_false CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetFitsContentForInsets_defaultLegacy_sysuiFlags CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetFitsContentForInsets_displayCutoutInsets_areApplied CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetFitsContentForInsets_defaultLegacy_none CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetFitsContentForInsets_true CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetLocalFocus CtsWindowManagerDeviceTestCases]', 1), ('[com.android.cts.atracetestapp.AtraceDeviceTests finish None]', 1), ('[android.server.wm.AppConfigurationTests testAppConfigurationMatchesActivityInFreeform CtsWindowManagerDeviceTestCases]', 1), ('[android.animation.cts.LayoutAnimationTest testAnimationWithAnimator CtsAnimationTestCases]', 1), ('[android.animation.cts.LayoutAnimationTest testSetStagger CtsAnimationTestCases]', 1), ('[android.widget.cts.ImageSwitcherTest testConstructor CtsWidgetTestCases]', 1), ('[android.widget.cts.ImageSwitcherTest testSetImageResource CtsWidgetTestCases]', 1), ('[android.widget.cts.ImageSwitcherTest testSetImageURI CtsWidgetTestCases]', 1), ('[android.widget.cts.ImageSwitcherTest testSetImageDrawable CtsWidgetTestCases]', 1), ('[com.android.cts.devicepolicy.accountcheck.AccountCheckTest testRemoveAllAccounts None]', 1), ('[android.preference.cts.DialogPreferenceTest DialogPreferenceTest CtsPreferenceTestCases]', 1), ('[android.preference.cts.DialogPreferenceTest testGetTitle CtsPreferenceTestCases]', 1), ('[android.preference.cts.DialogPreferenceTest testGetDialogTitle CtsPreferenceTestCases]', 1), ('[android.preference.cts.DialogPreferenceTest testGetDialogIcon CtsPreferenceTestCases]', 1), ('[android.preference.cts.DialogPreferenceTest testGetDialogMessage CtsPreferenceTestCases]', 1), ('[android.preference.cts.DialogPreferenceTest testGetPositiveButtonText CtsPreferenceTestCases]', 1), ('[android.preference.cts.DialogPreferenceTest testGetNegativeButtonText CtsPreferenceTestCases]', 1), ('[android.media.cts.MediaPlayerTest testSetPlaybackParamsPositiveSpeed CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testSetPlaybackParamsZeroSpeed CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testPlaybackRate CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testSeekModes CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testGetTimestamp CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testMediaTimeDiscontinuity CtsMediaTestCases]', 1), ('[android.autofillservice.cts.commontests.FillEventHistoryCommonTestCase testDatasetAuthenticationSelected CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.commontests.FillEventHistoryCommonTestCase testDatasetSelected_twoResponses CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.commontests.FillEventHistoryCommonTestCase testNoEvents_whenServiceReturnsNullResponse CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.commontests.FillEventHistoryCommonTestCase testNoEvents_whenServiceReturnsFailure CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.commontests.FillEventHistoryCommonTestCase testNoEvents_whenServiceTimesout CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.commontests.FillEventHistoryCommonTestCase testEventsFromPreviousSessionIsDiscarded CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.commontests.FillEventHistoryCommonTestCase testContextCommitted_withoutFlagOnLastResponse CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.commontests.FillEventHistoryCommonTestCase testContextCommitted_noSaveUi_whileFieldsMatchedDatasets CtsAutoFillServiceTestCases]', 1), ('[android.providerui.cts.MediaStoreUiTest getPersistedUriPermissions CtsProviderUiTestCases]', 1), ('[android.providerui.cts.MediaStoreUiTest testGetDocumentUri CtsProviderUiTestCases]', 1), ('[android.providerui.cts.MediaStoreUiTest testGetDocumentUri_ThrowsWithoutPermission CtsProviderUiTestCases]', 1), ('[android.providerui.cts.MediaStoreUiTest testGetDocumentUri_Symmetry_ExternalStorageProvider CtsProviderUiTestCases]', 1), ('[android.providerui.cts.MediaStoreUiTest testGetMediaUriAccess_MediaDocumentsProvider CtsProviderUiTestCases]', 1), ('[android.animation.cts.InterpolatorTest testFastOutExtraSlowIn CtsAnimationTestCases]', 1), ('[android.hardware.input.cts.tests.RazerRaijuMobileBluetoothTest testHomeKey CtsHardwareTestCases]', 1), ('[android.suspendapps.cts.DualSuspendTests testIsPackageSuspended CtsSuspendAppsTestCases]', 1), ('[android.suspendapps.cts.DualSuspendTests testUnsuspendedOnUninstallBlocked CtsSuspendAppsTestCases]', 1), ('[android.suspendapps.cts.DualSuspendTests testCannotSuspendWhenUninstallBlocked CtsSuspendAppsTestCases]', 1), ('[android.suspendapps.cts.DualSuspendTests testCannotSuspendUnderDisallowUninstallApps CtsSuspendAppsTestCases]', 1)]"
"6.1  Developer Tools"	"6.1"	"C-3-1"	"6.1/C-3-1"	"06010000.670301"	"""C-3-1] MUST implement adb via local-area network (such as Ethernet     or Wi-Fi).     """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"3.1.1  Android Extensions"	"3.1.1"	"C-0-3"	"3.1.1/C-0-3"	"03010100.670003"	"""C-0-3] MUST support all the APIs defined by the extension versions     returned by `android.os.ext.SdkExtensions.getExtensionVersion(int apiLevel)`     in the same manner as other managed APIs are supported, following the     requirements in [section 3.1.  """	""	""	"android.os.ext.SdkExtensions.getExtensionVersion"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"3.18  Contacts"	"3.18"	"C-1-5"	"3.18/C-1-5"	"03180000.670105"	"""C-1-5] Delete operations performed against the **custom local account**      MUST result in raw contacts being purged immediately (as if the      [`CALLER_IS_SYNCADAPTER`](https://developer.android.com/reference/android/provider/ContactsContract.html#CALLER_IS_SYNCADAPTER)      param was set to true), even if the `CALLER\_IS\_SYNCADAPTER` param was set      to false or not specified."""	""	""	"ContactsContract.html CALLER_IS_SYNCADAPTER CALLER SYNCADAPTER"	""	""	""	""	"[('android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest', 21), ('android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests', 17), ('android.provider.cts.calendar.CalendarTest', 15), ('android.accounts.cts.AccountManagerTest', 10), ('android.content.pm.cts.shortcutmanager.ShortcutManagerStartShortcutTest', 9), ('android.telephony.cts.TelephonyManagerTest', 8), ('android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest', 6), ('android.content.pm.cts.shortcutmanager.ShortcutManagerRequestPinTest', 5), ('android.content.pm.cts.shortcutmanager.ShortcutManagerMaxCountTest', 4), ('android.net.wifi.cts.WifiManagerTest', 4), ('android.media.cts.MediaControllerTest', 4), ('android.telecom.cts.CallDetailsTest', 4), ('android.permission.cts.telephony.TelephonyManagerPermissionTest', 4), ('android.app.cts.ZenPolicyTest', 4), ('android.content.pm.cts.shortcutmanager.ShortcutManagerLauncherApiTest', 4), ('android.server.wm.StartActivityTests', 3), ('android.telecom.cts.IncomingCallTest', 3), ('android.content.cts.SyncRequestTest', 3), ('android.server.wm.MultiDisplayActivityLaunchTests', 3), ('com.android.cts.delegate.AppRestrictionsIsCallerDelegateHelper', 3), ('android.content.pm.cts.shortcutmanager.ShortcutManagerUsageTest', 3), ('android.telephony.ims.cts.EabBulkCapabilityUpdaterTest', 3), ('android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest', 2), ('android.hardware.cts.CameraGLTest', 2), ('com.android.cts.transferowner.TransferProfileOwnerOutgoingTest', 2), ('android.media.cts.MediaSessionManagerTest', 2), ('android.systemintents.cts.TestManageOverlayPermissionIntents', 2), ('android.telecom.cts.ConnectionTest', 2), ('android.security.cts.ServicePermissionsTest', 2), ('android.content.cts.AccountAccessSameCertTest', 2), ('android.content.cts.ContentResolverTest', 2), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest', 2), ('com.android.cts.content.CtsSyncAccountAccessOtherCertTestCases', 2), ('android.telecom.cts.RemoteConnectionTest', 2), ('com.android.cts.managedprofile.ContactsTest', 2), ('android.content.pm.cts.shortcutmanager.ShortcutManagerNegativeTest', 2), ('android.hardware.cts.CameraTest', 2), ('android.media.cts.MediaSessionTest', 2), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 1), ('android.sample.cts.SampleDeviceReportLogTest', 1), ('android.content.pm.cts.shortcutmanager.throttling.ShortcutManagerThrottlingTestReceiver', 1), ('com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest', 1), ('android.media.cts.RoutingTest', 1), ('android.providerui.cts.MediaStoreUiTest', 1), ('android.security.cts.SecurityTestCase', 1), ('android.provider.cts.contacts.ContactsContract_ContactsTest', 1), ('android.car.cts.PreCreateUsersHostTest', 1), ('android.security.cts.IntentSenderRemovalTest', 1), ('com.android.cts.deviceowner.WifiNetworkConfigurationWithoutFineLocationPermissionTest', 1), ('android.server.wm.AlertWindowsImportanceTests', 1), ('android.telephony.cts.PhoneNumberUtilsTest', 1), ('com.android.cts.mediastorageapp.MediaStorageTest', 1), ('android.media.session.cts.MediaSessionManagerHostTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofDetectionTest', 1), ('com.android.cts.deviceandprofileowner.ApplicationRestrictionsIsCallerDelegateHelper', 1), ('com.android.cts.deviceandprofileowner.WifiTest', 1), ('android.keystore.cts.AndroidKeyStoreTest', 1), ('android.telephony.embms.cts.MbmsGroupCallTest', 1), ('android.telecom.cts.RemoteConferenceTest', 1), ('android.scopedstorage.cts.ScopedStorageTest', 1), ('android.app.cts.UiModeManagerTest', 1), ('android.scopedstorage.cts.device.ScopedStorageDeviceTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerLauncherCallbackTest', 1), ('com.android.server.cts.device.batterystats.BatteryStatsSyncTest', 1), ('android.app.cts.DownloadManagerTest', 1), ('com.android.cts.devicepolicy.MixedManagedProfileOwnerTest', 1), ('android.slice.cts.SliceBuilderTest', 1), ('android.hardware.lights.cts.LightsManagerTest', 1), ('android.provider.cts.contacts.ContactsContract_DirectoryTest', 1), ('android.media.cts.EnumDevicesTest', 1), ('android.appsearch.app.a.AppSearchInstantAppTest', 1), ('android.view.textclassifier.cts.TextClassifierServiceSwapTest', 1), ('android.content.cts.ContextTest', 1), ('android.inputmethodservice.cts.hostside.ShellCommandFromAppTest', 1), ('android.cts.backup.SyncAdapterSettingsHostSideTest', 1), ('com.android.cts.certinstaller.CertSelectionDelegateTest', 1), ('android.musicrecognition.cts.MusicRecognitionManagerTest', 1), ('android.autofillservice.cts.activities.LoginActivity', 1), ('android.hardware.camera2.cts.AllocationTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerMultiLauncherTest', 1), ('android.telephony.ims.cts.ImsCallProfileTest', 1), ('android.permission.cts.NoActivityRelatedPermissionTest', 1), ('android.view.inputmethod.cts.PackageVisibilityTest', 1), ('com.android.server.cts.device.statsdatom.AtomTests', 1), ('android.os.cts.AccessSerialModernTest', 1), ('android.view.cts.ViewTest', 1), ('android.telephony3.cts.TelephonyManagerTest', 1)]"	"[('ContentValues', 30), ('setUp', 22), ('getCount', 9), ('tearDown', 8), ('getInstrumentation', 7), ('moveToFirst', 6), ('close', 6), ('Bundle', 5), ('getTargetContext', 4), ('getContext', 3), ('CalendarHelper', 3), ('SyncStateHelper', 3), ('EventHelper', 3), ('AttendeeHelper', 3), ('ColorHelper', 3), ('ReminderHelper', 3), ('ExtendedPropertiesHelper', 3), ('buildUpon', 3), ('build', 3), ('getContentResolver', 3), ('PreviewCallback', 2), ('ConditionVariable', 2), ('getName', 2), ('allowSyncAdapterRunInBackgroundAndDataInBackground', 2), ('BackupUtils', 1), ('getUiAutomation', 1), ('getAccount', 1), ('SurfaceTextureCallback', 1), ('SurfaceTextureBurstCallback', 1), ('Object', 1), ('beforeActivityLaunched', 1), ('Renderer', 1), ('getActivity', 1), ('getView', 1), ('getOverrideConfig', 1), ('getPackageName', 1), ('run', 1), ('getPackage', 1), ('getCacheDir', 1), ('delete', 1), ('MockConnectionService', 1), ('release', 1), ('placeAndVerifyCall', 1), ('verifyConnectionForOutgoingCall', 1), ('getService', 1), ('getLastCall', 1), ('getAccountHandle', 1), ('getSimpleName', 1), ('getDevice', 1), ('getCurrentActivity', 1), ('getContentView', 1), ('login', 1), ('save', 1), ('getAutofillManager', 1), ('cancel', 1), ('UnlockScreenRule', 1)]"	"[('CtsShortcutManagerTestCases', 59), ('CtsAccountManagerTestCases', 27), ('CtsCalendarProviderTestCases', 15), ('CtsTelephonyTestCases', 14), ('CtsTelecomTestCases', 12), ('CtsMediaTestCases', 11), ('CtsContentTestCases', 8), ('CtsWindowManagerDeviceTestCases', 7), ('CtsAppTestCases', 6), ('CtsCameraTestCases', 5), ('CtsPermissionTestCases', 5), ('CtsWifiTestCases', 4), ('CtsSecurityTestCases', 3), ('CtsDevicePolicyManagerTestCases', 2), ('CtsContactsProviderTestCases', 2), ('CtsSystemIntentTestCases', 2), ('CtsSyncAccountAccessOtherCertTestCases', 2), ('CtsSampleDeviceTestCases', 1), ('CtsProviderUiTestCases', 1), ('CtsSecurityBulletinHostTestCases', 1), ('CtsCarHostTestCases', 1), ('CtsMediaHostTestCases', 1), ('CtsKeystoreTestCases', 1), ('CtsSliceTestCases', 1), ('CtsHardwareTestCases', 1), ('CtsTextClassifierTestCases', 1), ('CtsInputMethodServiceHostTestCases', 1), ('CtsBackupHostTestCases', 1), ('CtsMusicRecognitionTestCases', 1), ('CtsAutoFillServiceTestCases', 1), ('CtsInputMethodTestCases', 1), ('CtsViewTestCases', 1), ('CtsTelephony3TestCases', 1)]"	""	""	""	""	"android.provider.cts.calendar.CalendarTest"	"getContentResolver"	"CtsCalendarProviderTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java', 21), ('/home/gpoor/cts-12-source/cts/tests/tests/accounts/src/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java', 17), ('/home/gpoor/cts-12-source/cts/tests/tests/calendarprovider/src/android/provider/cts/calendar/CalendarTest.java', 15), ('/home/gpoor/cts-12-source/cts/tests/tests/accounts/src/android/accounts/cts/AccountManagerTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerStartShortcutTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerMaxCountTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaControllerTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/CallDetailsTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/telephony/src/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ZenPolicyTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerLauncherApiTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/StartActivityTests.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/IncomingCallTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/SyncRequestTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MultiDisplayActivityLaunchTests.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/AppRestrictionsIsCallerDelegateHelper.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerUsageTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/SyncAdapterSettingsApp/src/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/cts/CameraGLTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/TransferProfileOwnerOutgoingTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaSessionManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestManageOverlayPermissionIntents.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/ConnectionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/ServicePermissionsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AccountAccessSameCertTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentResolverTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/CtsSyncAccountAccessOtherCertTests/src/com/android/cts/content/CtsSyncAccountAccessOtherCertTestCases.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/RemoteConnectionTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/cts/CameraTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaSessionTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sample/src/android/sample/cts/SampleDeviceReportLogTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/throttling/src/android/content/pm/cts/shortcutmanager/throttling/ShortcutManagerThrottlingTestReceiver.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/RoutingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/providerui/src/android/providerui/cts/MediaStoreUiTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/SecurityTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_ContactsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/car/src/android/car/cts/PreCreateUsersHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/IntentSenderRemovalTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/WifiNetworkConfigurationWithoutFineLocationPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AlertWindowsImportanceTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneNumberUtilsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/MediaStorageApp/src/com/android/cts/mediastorageapp/MediaStorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/media/src/android/media/session/cts/MediaSessionManagerHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofDetectionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationRestrictionsIsCallerDelegateHelper.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/WifiTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/AndroidKeyStoreTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/embms/cts/MbmsGroupCallTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/RemoteConferenceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/src/android/scopedstorage/cts/ScopedStorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/UiModeManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/device/src/android/scopedstorage/cts/device/ScopedStorageDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerLauncherCallbackTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/apps/batterystatsapp/src/com/android/server/cts/device/batterystats/BatteryStatsSyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/DownloadManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/slice/src/android/slice/cts/SliceBuilderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/lights/cts/LightsManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_DirectoryTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/EnumDevicesTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsearch/test-apps/AppSearchHostTestHelperA/src/android/appsearch/app/a/AppSearchInstantAppTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/textclassifier/src/android/view/textclassifier/cts/TextClassifierServiceSwapTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/inputmethodservice/hostside/src/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/src/android/cts/backup/SyncAdapterSettingsHostSideTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/CertSelectionDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/musicrecognition/src/android/musicrecognition/cts/MusicRecognitionManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/activities/LoginActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/AllocationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerMultiLauncherTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsCallProfileTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoActivityRelatedPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/PackageVisibilityTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/AtomTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AccessSerialModern/src/android/os/cts/AccessSerialModernTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony3/src/android/telephony3/cts/TelephonyManagerTest.java', 1)]"	"[('(5,CALLER,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(8,CALLER,/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java)', 1), ('(9,SYNCADAPTER,/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java)', 1), ('(1,CALLER,/android/sample/cts/SampleDeviceReportLogTest.java)', 1), ('(1,CALLER,/android/content/pm/cts/shortcutmanager/throttling/ShortcutManagerThrottlingTestReceiver.java)', 1), ('(1,CALLER,/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java)', 1), ('(3,CALLER,/android/hardware/cts/CameraGLTest.java)', 1), ('(1,CALLER,/android/media/cts/RoutingTest.java)', 1), ('(2,CALLER,/com/android/cts/transferowner/TransferProfileOwnerOutgoingTest.java)', 1), ('(1,CALLER,/android/providerui/cts/MediaStoreUiTest.java)', 1), ('(1,CALLER,/android/security/cts/SecurityTestCase.java)', 1), ('(3,CALLER,/android/server/wm/StartActivityTests.java)', 1), ('(8,CALLER,/android/media/cts/MediaSessionManagerTest.java)', 1), ('(9,CALLER,/android/content/pm/cts/shortcutmanager/ShortcutManagerMaxCountTest.java)', 1), ('(1,CALLER,/android/provider/cts/contacts/ContactsContract_ContactsTest.java)', 1), ('(1,CALLER,/android/car/cts/PreCreateUsersHostTest.java)', 1), ('(3,CALLER,/android/telecom/cts/IncomingCallTest.java)', 1), ('(1,CALLER,/android/security/cts/IntentSenderRemovalTest.java)', 1), ('(2,CALLER,/android/systemintents/cts/TestManageOverlayPermissionIntents.java)', 1), ('(5,SYNCADAPTER,/android/content/cts/SyncRequestTest.java)', 1), ('(2,CALLER,/com/android/cts/deviceowner/WifiNetworkConfigurationWithoutFineLocationPermissionTest.java)', 1), ('(3,CALLER,/android/server/wm/AlertWindowsImportanceTests.java)', 1), ('(11,CALLER,/android/telephony/cts/PhoneNumberUtilsTest.java)', 1), ('(1,CALLER,/com/android/cts/mediastorageapp/MediaStorageTest.java)', 1), ('(1,CALLER,/android/media/session/cts/MediaSessionManagerHostTest.java)', 1), ('(6,CALLER,/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofDetectionTest.java)', 1), ('(2,CALLER,/com/android/cts/deviceandprofileowner/ApplicationRestrictionsIsCallerDelegateHelper.java)', 1), ('(1,CALLER,/com/android/cts/deviceandprofileowner/WifiTest.java)', 1), ('(12,CALLER,/android/content/pm/cts/shortcutmanager/ShortcutManagerStartShortcutTest.java)', 1), ('(1,CALLER,/android/keystore/cts/AndroidKeyStoreTest.java)', 1), ('(14,CALLER,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(3,CALLER,/android/telephony/embms/cts/MbmsGroupCallTest.java)', 1), ('(12,CALLER,/android/telecom/cts/RemoteConferenceTest.java)', 1), ('(18,CALLER,/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java)', 1), ('(45,CALLER,/android/media/cts/MediaControllerTest.java)', 1), ('(2,CALLER,/android/scopedstorage/cts/ScopedStorageTest.java)', 1), ('(109,CALLER,/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java)', 1), ('(3,CALLER,/android/server/wm/MultiDisplayActivityLaunchTests.java)', 1), ('(1,CALLER,/android/app/cts/UiModeManagerTest.java)', 1), ('(11,CALLER,/android/telecom/cts/ConnectionTest.java)', 1), ('(2,CALLER,/android/scopedstorage/cts/device/ScopedStorageDeviceTest.java)', 1), ('(1,CALLER,/android/media/cts/PresentationSyncTest.java)', 1), ('(2,CALLER,/android/security/cts/ServicePermissionsTest.java)', 1), ('(15,CALLER,/android/content/pm/cts/shortcutmanager/ShortcutManagerLauncherCallbackTest.java)', 1), ('(2,SYNCADAPTER,/com/android/server/cts/device/batterystats/BatteryStatsSyncTest.java)', 1), ('(6,SYNCADAPTER,/android/content/cts/AccountAccessSameCertTest.java)', 1), ('(1,CALLER,/android/app/cts/DownloadManagerTest.java)', 1), ('(1,CALLER,/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java)', 1), ('(4,CALLER,/android/slice/cts/SliceBuilderTest.java)', 1), ('(6,CALLER,/com/android/cts/delegate/AppRestrictionsIsCallerDelegateHelper.java)', 1), ('(1,CALLER,/android/hardware/lights/cts/LightsManagerTest.java)', 1), ('(2,CALLER,/android/provider/cts/contacts/ContactsContract_DirectoryTest.java)', 1), ('(1,CALLER,/android/media/cts/EnumDevicesTest.java)', 1), ('(1,CALLER,/android/appsearch/app/a/AppSearchInstantAppTest.java)', 1), ('(2,CALLER,/android/content/cts/ContentResolverTest.java)', 1), ('(13,CALLER,/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java)', 1), ('(15,CALLER,/android/telecom/cts/CallDetailsTest.java)', 1), ('(1,CALLER,/android/view/textclassifier/cts/TextClassifierServiceSwapTest.java)', 1), ('(13,CALLER,/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java)', 1), ('(6,SYNCADAPTER,/com/android/cts/content/CtsSyncAccountAccessOtherCertTestCases.java)', 1), ('(8,CALLER,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(11,CALLER,/android/content/pm/cts/shortcutmanager/ShortcutManagerUsageTest.java)', 1), ('(1,CALLER,/android/content/cts/ContextTest.java)', 1), ('(15,CALLER,/android/telecom/cts/RemoteConnectionTest.java)', 1), ('(1,CALLER,/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java)', 1), ('(6,SYNCADAPTER,/android/cts/backup/SyncAdapterSettingsHostSideTest.java)', 1), ('(1,CALLER,/com/android/cts/certinstaller/CertSelectionDelegateTest.java)', 1), ('(4,CALLER,/android/permission/cts/telephony/TelephonyManagerPermissionTest.java)', 1), ('(11,CALLER,/android/app/cts/ZenPolicyTest.java)', 1), ('(1,CALLER,/android/musicrecognition/cts/MusicRecognitionManagerTest.java)', 1), ('(4,CALLER,/com/android/cts/managedprofile/ContactsTest.java)', 1), ('(5,CALLER,/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java)', 1), ('(1,CALLER,/android/autofillservice/cts/activities/LoginActivity.java)', 1), ('(12,CALLER,/android/accounts/cts/AccountManagerTest.java)', 1), ('(13,CALLER,/android/content/pm/cts/shortcutmanager/ShortcutManagerLauncherApiTest.java)', 1), ('(1,CALLER,/android/hardware/camera2/cts/AllocationTest.java)', 1), ('(8,CALLER,/android/content/pm/cts/shortcutmanager/ShortcutManagerMultiLauncherTest.java)', 1), ('(2,CALLER,/android/telephony/ims/cts/ImsCallProfileTest.java)', 1), ('(2,CALLER,/android/permission/cts/NoActivityRelatedPermissionTest.java)', 1), ('(4,CALLER,/android/hardware/cts/CameraTest.java)', 1), ('(1,CALLER_IS_SYNCADAPTER,/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java)', 1), ('(1,CALLER,/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java)', 1), ('(1,SYNCADAPTER,/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java)', 1), ('(1,CALLER,/android/view/inputmethod/cts/PackageVisibilityTest.java)', 1), ('(3,SYNCADAPTER,/com/android/server/cts/device/statsdatom/AtomTests.java)', 1), ('(1,CALLER,/android/os/cts/AccessSerialModernTest.java)', 1), ('(20,CALLER,/android/media/cts/MediaSessionTest.java)', 1), ('(1,CALLER,/android/view/cts/ViewTest.java)', 1), ('(2,CALLER,/android/telephony3/cts/TelephonyManagerTest.java)', 1), ('(1,CALLER_IS_SYNCADAPTER,/android/provider/cts/calendar/CalendarTest.java)', 1), ('(3,CALLER,/android/provider/cts/calendar/CalendarTest.java)', 1), ('(50,SYNCADAPTER,/android/provider/cts/calendar/CalendarTest.java)', 1)]"	"[('([1:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[CALLER]:[1]:method_text:[st barf if the caller isn\'t permitted."");        } catch (SecurityException expected) {}    }   ])', 8), ('([1:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[CALLER]:[1]:method_text:[f the caller isn\'t permitted."");        } catch (SecurityException expected) {        }    }   ])', 6), ('([1:/android/accounts/cts/AccountManagerTest.java]:[CALLER]:[1]:method_text:[ @AppModeFull(reason = ""The methods requires the caller to match signature with authenticator."")   ])', 5), ('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[CALLER]:[1]:method_text:[n     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 4), ('([1:/android/accounts/cts/AccountManagerTest.java]:[CALLER]:[1]:method_text:[ Or separate the authenticator and test app to allow the instant app mode test.    @AppModeFull   ])', 4), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[CALLER]:[1]:method_text:[     assertTrue(request.isValid());            assertTrue(request.accept());        });    }   ])', 2), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerStartShortcutTest.java]:[CALLER]:[2]:method_text:[assertShortcutStarts(mLauncherContext1, mPackageContext1, ""s1"", EXPECTED_ACTIONS_SINGLE);    }   ])', 2), ('([1:/android/media/cts/MediaControllerTest.java]:[CALLER]:[1]:method_text:[     assertTrue(compareRemoteUserInfo(mControllerInfo, mCallback.mCallerInfo));        }    }   ])', 2), ('([10:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[10]:method_text:[sertWith(getManager().getManifestShortcuts())                    .isEmpty();        });    }   ])', 2), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CALLER]:[1]:method_text:[.     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 2), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CALLER]:[1]:method_text:[            + ""to true"");        } catch (IllegalArgumentException expected) {        }    }   ])', 2), ('([1:/android/app/cts/ZenPolicyTest.java]:[CALLER]:[1]:method_text:[   policy.getPriorityConversationSenders());        assertAllVisualEffectsUnset(policy);    }   ])', 2), ('([5:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[CALLER]:[5]:method_text:[elper"",            ""testAssertCallerIsApplicationRestrictionsManagingPackage"", mUserId);    }   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[CALLER]:[2]:method_text:[     getLauncherApps().getShortcutConfigActivityIntent(getConfigActivity()));        });    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[CALLER]:[1]:method_text:[          assertNull(getLauncherApps().getShortcutConfigActivityIntent(lai));        });    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[CALLER]:[1]:method_text:[s(CONFIG_ACTIVITY_NAME, intent.getComponent().getClassName());        activity.finish();    }   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerConfigActivityTest.java]:[CALLER]:[2]:method_text:[getClassName())) {                return info;            }        }        return null;    }}])', 1), ('([5:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[SYNCADAPTER]:[5]:method_text:[ge.     * 3. Check restored MasterSyncAutomatically=true is the same with backup value.     */   ])', 1), ('([4:/android/cts/backup/syncadaptersettingsapp/SyncAdapterSettingsTest.java]:[SYNCADAPTER]:[4]:method_text:[   Account account = accounts[i];            am.removeAccountExplicitly(account);        }    }}])', 1), ('([1:/android/sample/cts/SampleDeviceReportLogTest.java]:[CALLER]:[1]:method_text:[* end, ResultType.NEUTRAL, ResultUnit.NONE);        reportLog.submit(getInstrumentation());    }}])', 1), ('([1:/android/content/pm/cts/shortcutmanager/throttling/ShortcutManagerThrottlingTestReceiver.java]:[CALLER]:[1]:method_text:[e            // throttled.            ThrottledTests.ensureThrottled(context);        });    }}])', 1), (""([1:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[CALLER]:[1]:method_text:[access,     * even if the caller doesn't hold another matching {@code path-permission}.     */   ])"", 1), ('([2:/android/hardware/cts/CameraGLTest.java]:[CALLER]:[2]:method_text:[.setPreviewTexture in conjunction with the standard Camera preview callback */    @UiThreadTest   ])', 1), ('([1:/android/hardware/cts/CameraGLTest.java]:[CALLER]:[1]:method_text:["";        // Magic key        private static final int GL_TEXTURE_EXTERNAL_OES = 0x8D65;    }}])', 1), ('([1:/android/media/cts/RoutingTest.java]:[CALLER]:[1]:method_text:[oTrack audioTrack) {}        public void onRoutingChanged(AudioRouting audioRouting) {}    }   ])', 1), ('([1:/com/android/cts/transferowner/TransferProfileOwnerOutgoingTest.java]:[CALLER]:[1]:method_text:[evicePolicyManager.transferOwnership(mOutgoingComponentName, INCOMING_COMPONENT_NAME, b);    }   ])', 1), ('([1:/com/android/cts/transferowner/TransferProfileOwnerOutgoingTest.java]:[CALLER]:[1]:method_text:[CrossProfileCallerIdDisabled(mOutgoingComponentName,                    false);        });    }}])', 1), ('([1:/android/providerui/cts/MediaStoreUiTest.java]:[CALLER]:[1]:method_text:[                FileUtils.copy(source, target);            }        }        return file;    }}])', 1), ('([1:/android/security/cts/SecurityTestCase.java]:[CALLER]:[1]:method_text:[y managed.     *     * Example of skipping a test based on mainline modules:     *  <pre>     * ])', 1), ('([1:/android/server/wm/StartActivityTests.java]:[CALLER]:[1]:method_text:[ * activity because the caller C in different uid cannot launch a non-exported activity.     */   ])', 1), ('([1:/android/server/wm/StartActivityTests.java]:[CALLER]:[1]:method_text:[ons#setTaskOverlay should remain on top of the     * task after start another activity.     */   ])', 1), ('([1:/android/server/wm/StartActivityTests.java]:[CALLER]:[1]:method_text:[.getTaskByActivity(intents[i].getComponent()).getTaskId();        }        return taskIds;    }}])', 1), ('([6:/android/media/cts/MediaSessionManagerTest.java]:[CALLER]:[6]:method_text:[           session.release();            }            removeHandler(handler);        }    }   ])', 1), ('([2:/android/media/cts/MediaSessionManagerTest.java]:[CALLER]:[2]:method_text:[       public void execute(Runnable command) {            mHandler.post(command);        }    }}])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerMaxCountTest.java]:[CALLER]:[1]:method_text:[d();        });    }    /**     * Manifest shortcuts are included in the count too.     */   ])', 1), ('([4:/android/content/pm/cts/shortcutmanager/ShortcutManagerMaxCountTest.java]:[CALLER]:[4]:method_text:[          .haveIds(makeIds(""s"", 1, 13))                    .areAllEnabled();        });    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerMaxCountTest.java]:[CALLER]:[1]:method_text:["")                    .areAllDynamic()                    .areAllEnabled();        });    }   ])', 1), ('([3:/android/content/pm/cts/shortcutmanager/ShortcutManagerMaxCountTest.java]:[CALLER]:[3]:method_text:[))                    .areAllEnabled()                    .areAllNotDynamic();        });    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_ContactsTest.java]:[CALLER]:[1]:method_text:[ld see in where     * clauses.     *     * This tests both contacts and raw_contacts.     */   ])', 1), ('([1:/android/car/cts/PreCreateUsersHostTest.java]:[CALLER]:[1]:method_text:[ystem to make sure PackageManager preserves the installed bit        restartSystemServer();    }}])', 1), ('([1:/android/telecom/cts/IncomingCallTest.java]:[CALLER]:[1]:method_text:[ON_STATUS_PASSED,                call.getDetails().getCallerNumberVerificationStatus());    }   ])', 1), ('([1:/android/telecom/cts/IncomingCallTest.java]:[CALLER]:[1]:method_text:[ON_STATUS_FAILED,                call.getDetails().getCallerNumberVerificationStatus());    }   ])', 1), ('([1:/android/telecom/cts/IncomingCallTest.java]:[CALLER]:[1]:method_text:[TUS_NOT_VERIFIED,                call.getDetails().getCallerNumberVerificationStatus());    }   ])', 1), ('([1:/android/security/cts/IntentSenderRemovalTest.java]:[CALLER]:[1]:method_text:[he DebugIntentSender activity in Settings has been removed     * and cannot be invoked.     */   ])', 1), ('([1:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[CALLER]:[1]:method_text:[nt            }        });        // ActivityNotFoundException or no exception thrown    }   ])', 1), ('([1:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[CALLER]:[1]:method_text:[   assertTrue(e instanceof ActivityNotFoundException || e instanceof SecurityException);    }   ])', 1), ('([1:/android/content/cts/SyncRequestTest.java]:[SYNCADAPTER]:[1]:method_text:[           .setExpedited(true)                .setManual(true)                .build();    }   ])', 1), ('([1:/android/content/cts/SyncRequestTest.java]:[SYNCADAPTER]:[1]:method_text:[ ""authority1"")                .setScheduleAsExpeditedJob(true)                .build();    }   ])', 1), ('([3:/android/content/cts/SyncRequestTest.java]:[SYNCADAPTER]:[3]:method_text:[ing if scheduled as an EJ"");        } catch (IllegalArgumentException expected) {        }    }}])', 1), ('([2:/com/android/cts/deviceowner/WifiNetworkConfigurationWithoutFineLocationPermissionTest.java]:[CALLER]:[2]:method_text:[           return;            }        }        fail(""Waited too long for wifi enabled"");    }}])', 1), ('([3:/android/server/wm/AlertWindowsImportanceTests.java]:[CALLER]:[3]:method_text:[guration.UI_MODE_TYPE_VR_HEADSET) {            return true;        }        return false;    }}])', 1), ('([11:/android/telephony/cts/PhoneNumberUtilsTest.java]:[CALLER]:[11]:method_text:[mPhoneNumber.length; i++) {            assertEquals(mPhoneNumber[i], bRet[i]);        }    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[CALLER]:[1]:method_text:[eFileAPISupport(File file) throws Exception {        assertThat(file.delete()).isTrue();    }   ])', 1), ('([1:/android/media/session/cts/MediaSessionManagerHostTest.java]:[CALLER]:[1]:method_text:[     executeShellCommand(MediaSessionTestHelperConstants.buildControlCommand(userId, flag));    }}])', 1), ('([6:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofDetectionTest.java]:[CALLER]:[6]:method_text:[e mismatch"",                () -> runWithCaller(callerContext, () -> r.run())        );    }   ])', 1), ('([2:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsIsCallerDelegateHelper.java]:[CALLER]:[2]:method_text:[st {    private static final String APP_RESTRICTIONS_TARGET_PKG = ""com.android.cts.delegate"";   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/WifiTest.java]:[CALLER]:[1]:method_text:[        mDevicePolicyManager.removeKeyPair(ADMIN, TEST_ALIAS);        super.tearDown();    }   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerStartShortcutTest.java]:[CALLER]:[2]:method_text:[ACTIONS_MULTI = new String[]{""a3"", ""a2"", ""a1""};    /**     * Start a single activity.     */   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerStartShortcutTest.java]:[CALLER]:[1]:method_text:[ launched.get(0).getStringExtra(""k1""));    }    /**     * Start multiple activities.     */   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerStartShortcutTest.java]:[CALLER]:[1]:method_text:[s(""vx"", i.getStringExtra(""kx""));    }    /**     * Non default launcher can\'t start.     */   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerStartShortcutTest.java]:[CALLER]:[1]:method_text:[uncherContext1, mPackageContext1, ""s1"",                ActivityNotFoundException.class);    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerStartShortcutTest.java]:[CALLER]:[1]:method_text:[uncherContext1, mPackageContext1, ""s2"",                ActivityNotFoundException.class);    }   ])', 1), (""([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerStartShortcutTest.java]:[CALLER]:[1]:method_text:[    });    }    /**     * Un-exported activities in other packages can't be started.     */   ])"", 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerStartShortcutTest.java]:[CALLER]:[1]:method_text:[, mPackageContext1,                            ""s1"", 1, new String[0]);                });    }}])', 1), ('([1:/android/keystore/cts/AndroidKeyStoreTest.java]:[CALLER]:[1]:method_text:[   return Duration.ofNanos(System.nanoTime() - mStartTimeNanos);        }    }    @LargeTest   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[CALLER]:[1]:method_text:[    }    /**     * Verify non DO apps cannot call removeNonCallerConfiguredNetworks.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[CALLER]:[2]:method_text:[{        }    }    /**     * Test coverage for the constructor of AddNetworkResult.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[CALLER]:[4]:method_text:[uration)} works     * with merging types properly when the calling app has permissions.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[CALLER]:[7]:method_text:[spot request at a time.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), ('([3:/android/telephony/embms/cts/MbmsGroupCallTest.java]:[CALLER]:[3]:method_text:[trength,                mGroupCallCallback.waitOnBroadcastSignalStrengthUpdated().arg1);    }   ])', 1), ('([12:/android/telecom/cts/RemoteConferenceTest.java]:[CALLER]:[12]:method_text:[onnectionCallDisplayName(mRemoteConnection2,                TestUtils.SWAP_CALLER_NAME);    }   ])', 1), ('([1:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[CALLER]:[1]:method_text:[nostic service and set it up.        mAccountManager = AccountManager.get(getContext());    }   ])', 1), ('([1:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[CALLER]:[1]:method_text:[ the caller doesn\'t share a signature."");        } catch (SecurityException expected) {}    }   ])', 1), ('([2:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[CALLER]:[2]:method_text:[f the caller isn\'t permitted."");        } catch (SecurityException expected) {        }    }   ])', 1), ('([20:/android/media/cts/MediaControllerTest.java]:[CALLER]:[20]:method_text:[    // callback method, but no controller is sending any command.            }        }    }   ])', 1), ('([23:/android/media/cts/MediaControllerTest.java]:[CALLER]:[23]:method_text:[                mSpeed = speed;                mWaitLock.notify();            }        }    }}])', 1), ('([2:/android/scopedstorage/cts/ScopedStorageTest.java]:[CALLER]:[2]:method_text:[ executeShellCommand(""am get-current-user"");        return Integer.parseInt(userId.trim());    }}])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[1]:method_text:[                  assertTrue(getManager().updateShortcuts(list(si)));                });    }   ])', 1), ('([8:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[8]:method_text:[ontext1, mPackageContext1.getPackageName(), ""s1"",                    icon6);        });    }   ])', 1), ('([3:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[3]:method_text:[       });        // Then run the same test.        testSetDynamicShortcuts_details();    }   ])', 1), ('([6:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[6]:method_text:[ontext1, mPackageContext1.getPackageName(), ""s1"",                    icon4);        });    }   ])', 1), ('([3:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[3]:method_text:[       });        // Then run the same test.        testAddDynamicShortcuts_details();    }   ])', 1), ('([11:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[11]:method_text:[sertWith(getManager().getManifestShortcuts())                    .isEmpty();        });    }   ])', 1), ('([15:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[15]:method_text:[               success = true;            }            assertTrue(success);        });    }   ])', 1), ('([15:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[15]:method_text:[sertWith(getManager().getManifestShortcuts())                    .isEmpty();        });    }   ])', 1), ('([4:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[4]:method_text:[a APIs"",                () -> getManager().updateShortcuts(list(makeShortcut(""ms21""))));    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[1]:method_text:[ assertEquals(0, i.getFlags());                    })                    ;        });    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[1]:method_text:[AG_ACTIVITY_NEW_DOCUMENT, i.getFlags());                    })            ;        });    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[1]:method_text:[estShortcuts())                    .haveIds(""valid"")                    ;        });    }   ])', 1), ('([3:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[3]:method_text:[EW, si.getIntent().getAction());                    })                    ;        });    }   ])', 1), ('([4:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[4]:method_text:[ATCH_CACHED))                    .haveIds(""ms21"", ""ms22"", ""s1"", ""s2"", ""s3"");        });    }   ])', 1), ('([7:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[7]:method_text:[                    .areAllPinned()                    .haveIds(""s3"", ""s4"");        });    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[1]:method_text:[ed()                    .areAllDynamic()                    .haveIds(""s2"");        });    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[1]:method_text:[         icon2);            });        } finally {            file.delete();        }    }   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[2]:method_text:[));            assertEquals(getUserHandle(), intent.getCreatorUserHandle());        });    }   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CALLER]:[2]:method_text:[onThrown);        });    }    // TODO Test auto rank adjustment.    // TODO Test save & load.}])', 1), ('([1:/android/server/wm/MultiDisplayActivityLaunchTests.java]:[CALLER]:[1]:method_text:[lay in a new task from activity     * there. It must land on the display as its caller.     */   ])', 1), ('([1:/android/server/wm/MultiDisplayActivityLaunchTests.java]:[CALLER]:[1]:method_text:[referred display where the caller resided when     * both displays have matching tasks.     */   ])', 1), ('([1:/android/server/wm/MultiDisplayActivityLaunchTests.java]:[CALLER]:[1]:method_text:[displayContent.mId,                ""Activity launched on secondary display and on top"");    }   ])', 1), ('([1:/android/app/cts/UiModeManagerTest.java]:[CALLER]:[1]:method_text:[ar mode API when the caller does not hold the correct     * permission to use that API.     */   ])', 1), ('([4:/android/telecom/cts/ConnectionTest.java]:[CALLER]:[4]:method_text:[ger.PRESENTATION_ALLOWED,                connection.getCallerDisplayNamePresentation());    }   ])', 1), ('([7:/android/telecom/cts/ConnectionTest.java]:[CALLER]:[7]:method_text:[IFICATION_STATUS_PASSED,                connection.getCallerNumberVerificationStatus());    }   ])', 1), ('([2:/android/scopedstorage/cts/device/ScopedStorageDeviceTest.java]:[CALLER]:[2]:method_text:[""Deleting file "" + file);        deleteFileAs(APP_D_LEGACY_HAS_RW, file.getAbsolutePath());    }}])', 1), ('([1:/android/media/cts/PresentationSyncTest.java]:[CALLER]:[1]:method_text:[sleep(10); }                catch (InterruptedException ignored) {}            }        }    }}])', 1), ('([1:/android/security/cts/ServicePermissionsTest.java]:[CALLER]:[1]:method_text:[vices checks if caller holds     * {@link android.Manifest.permission#DUMP} permission.     */   ])', 1), (""([1:/android/security/cts/ServicePermissionsTest.java]:[CALLER]:[1]:method_text:[ msg.append(failure).append('\\n');            }            fail(msg.toString());        }    }}])"", 1), ('([15:/android/content/pm/cts/shortcutmanager/ShortcutManagerLauncherCallbackTest.java]:[CALLER]:[15]:method_text:[k(c);                    registered.set(false);                }            });        }    }}])', 1), ('([2:/com/android/server/cts/device/batterystats/BatteryStatsSyncTest.java]:[SYNCADAPTER]:[2]:method_text:[     BatteryStatsSyncAdapter.requestSync(account);            Thread.sleep(1000);        }    }}])', 1), ('([5:/android/content/cts/AccountAccessSameCertTest.java]:[SYNCADAPTER]:[5]:method_text:[own() throws Exception {        disallowSyncAdapterRunInBackgroundAndDataInBackground();    }   ])', 1), ('([1:/android/content/cts/AccountAccessSameCertTest.java]:[SYNCADAPTER]:[1]:method_text:[OUT_MILLIS)).onPerformSync(any(), any(), any(), any(),                    any());        }    }}])', 1), ('([1:/android/app/cts/DownloadManagerTest.java]:[CALLER]:[1]:method_text:[utStream(file)) {            FileUtils.copy(source, target);        }        return file;    }}])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[CALLER]:[1]:method_text:[isabledFeatures_onParentSilentIgnoreWhenCallerIsNotOrgOwnedPO"",                mUserId);    }   ])', 1), ('([4:/android/slice/cts/SliceBuilderTest.java]:[CALLER]:[4]:method_text:[);        Collections.sort(h1);        Collections.sort(h2);        assertEquals(h1, h2);    }}])', 1), ('([2:/com/android/cts/delegate/AppRestrictionsIsCallerDelegateHelper.java]:[CALLER]:[2]:method_text:[           getInstrumentation().getContext().getSystemService(DevicePolicyManager.class);    }   ])', 1), ('([2:/com/android/cts/delegate/AppRestrictionsIsCallerDelegateHelper.java]:[CALLER]:[2]:method_text:[sertThat(mDevicePolicyManager.isCallerApplicationRestrictionsManagingPackage()).isTrue();    }   ])', 1), ('([2:/com/android/cts/delegate/AppRestrictionsIsCallerDelegateHelper.java]:[CALLER]:[2]:method_text:[assertThat(mDevicePolicyManager.isCallerApplicationRestrictionsManagingPackage()).isFalse();    }}])', 1), ('([1:/android/hardware/lights/cts/LightsManagerTest.java]:[CALLER]:[1]:method_text:[hat(mManager.getLightState(mLights.get(0)).getColor()).isEqualTo(initialColor);        }    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_DirectoryTest.java]:[CALLER]:[2]:method_text:[return true;        } catch (NameNotFoundException e) {            return false;        }    }}])', 1), ('([1:/android/media/cts/EnumDevicesTest.java]:[CALLER]:[1]:method_text:[ooper.myLooper();            assertNotNull(myLooper);        }        return myLooper;    }   ])', 1), ('([1:/android/appsearch/app/a/AppSearchInstantAppTest.java]:[CALLER]:[1]:method_text:[ityException: Caller not allowed ""                        + ""to create AppSearch session"");    }}])', 1), ('([1:/android/content/cts/ContentResolverTest.java]:[CALLER]:[1]:method_text:[ntResolver#notifyChange} are correctly split and delivered to     * disjoint listeners.     */   ])', 1), ('([1:/android/content/cts/ContentResolverTest.java]:[CALLER]:[1]:method_text:[rectly grouped and delivered     * to overlapping listeners, including untouched flags.     */   ])', 1), ('([6:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java]:[CALLER]:[6]:method_text:[           assertEquals(""title3"", s.getShortLabel());                    });        });    }   ])', 1), ('([7:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java]:[CALLER]:[7]:method_text:[       );        assertCallbackNotReceived(c0_1);        assertCallbackNotReceived(c0_3);    }}])', 1), ('([5:/android/telecom/cts/CallDetailsTest.java]:[CALLER]:[5]:method_text:[    /**     * Tests whether the getAccountHandle() getter returns the correct object.     */   ])', 1), ('([1:/android/telecom/cts/CallDetailsTest.java]:[CALLER]:[1]:method_text:[  /**     * Tests whether the getCallerDisplayName() getter returns the correct object.     */   ])', 1), ('([5:/android/telecom/cts/CallDetailsTest.java]:[CALLER]:[5]:method_text:[ Tests whether the getCallerDisplayNamePresentation() getter returns the correct object.     */   ])', 1), (""([4:/android/telecom/cts/CallDetailsTest.java]:[CALLER]:[4]:method_text:[ display name. We don't have anything set up in contacts, so expect it to     * be null     */   ])"", 1), ('([1:/android/view/textclassifier/cts/TextClassifierServiceSwapTest.java]:[CALLER]:[1]:method_text:[(mRequiredServiceRule)            .around(mTestWatcher)            .around(mSafeCleanerRule);   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java]:[CALLER]:[2]:method_text:[   /**     * A test for {@link ShortcutManager#requestPinShortcut}, a very simple case.     */   ])', 1), ('([3:/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java]:[CALLER]:[3]:method_text:[()                    ;        });        Log.i(TAG, ""Done testing with launcher1."");    }   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java]:[CALLER]:[2]:method_text:[rtcut still not pinned"");        });        Log.i(TAG, ""Done testing with launcher2."");    }   ])', 1), ('([5:/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java]:[CALLER]:[5]:method_text:[ame as {@link ShortcutManager#requestPinShortcut} except the app has no main activities.     */   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java]:[CALLER]:[1]:method_text:[ other cases (already pinned, etc)    // TODO Various error cases (missing mandatory fields, etc)}])', 1), ('([5:/com/android/cts/content/CtsSyncAccountAccessOtherCertTestCases.java]:[SYNCADAPTER]:[5]:method_text:[t scroll through notifications to find permission request ""            + ""b/147410068"")     */   ])', 1), ('([1:/com/android/cts/content/CtsSyncAccountAccessOtherCertTestCases.java]:[SYNCADAPTER]:[1]:method_text:[                 Configuration.UI_MODE_TYPE_MASK) == Configuration.UI_MODE_TYPE_VR_HEADSET);    }}])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CALLER]:[1]:method_text:[caller does not have carrier privileges or is not the     * current default dialer app.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CALLER]:[1]:method_text:[ntation().getUiAutomation()                    .dropShellPermissionIdentity();        }    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CALLER]:[1]:method_text:[tingRequestedWhileIdle"");        } catch (IllegalArgumentException expected) {        }    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CALLER]:[1]:method_text:[          + ""with true"");        } catch (IllegalArgumentException expected) {        }    }   ])', 1), ('([7:/android/content/pm/cts/shortcutmanager/ShortcutManagerUsageTest.java]:[CALLER]:[7]:method_text:[ents(start3, end3)),                mPackageContext1.getPackageName(), idNonexistance));    }   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerUsageTest.java]:[CALLER]:[2]:method_text:[d, mPackageContext1, id1,                ""SHORTCUT_INVOCATION event was not reported."");    }   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerUsageTest.java]:[CALLER]:[2]:method_text:[yEvents(start, end)), packageContext.getPackageName(), id),                failureMessage);    }}])', 1), ('([1:/android/content/cts/ContextTest.java]:[CALLER]:[1]:method_text:[iding line.        assertTrue((height > 0 && width > 0) || (height <= 0 && width <= 0));    }   ])', 1), ('([11:/android/telecom/cts/RemoteConnectionTest.java]:[CALLER]:[11]:method_text:[backInvoker.getArgs(0)[2]);        mRemoteConnectionObject.unregisterCallback(callback);    }   ])', 1), ('([4:/android/telecom/cts/RemoteConnectionTest.java]:[CALLER]:[4]:method_text:[)[0]);        mRemoteConnectionObject.unregisterCallback(callback);        return handler;    }}])', 1), ('([1:/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java]:[CALLER]:[1]:method_text:[}     * returns {@link SecurityException} for full (non-instant) apps.     */    @AppModeFull   ])', 1), ('([6:/android/cts/backup/SyncAdapterSettingsHostSideTest.java]:[SYNCADAPTER]:[6]:method_text:[ACKAGE));    }    /**     * Test backup and restore of MasterSyncAutomatically=true.     */   ])', 1), ('([1:/com/android/cts/certinstaller/CertSelectionDelegateTest.java]:[CALLER]:[1]:method_text:[ android.app.admin.DelegatedAdminReceiver#onChoosePrivateKeyAlias}    // receives {@code null}.   ])', 1), ('([7:/android/app/cts/ZenPolicyTest.java]:[CALLER]:[7]:method_text:[er.Policy.PRIORITY_CATEGORY_REPEAT_CALLERS);        assertAllVisualEffectsUnset(policy);    }   ])', 1), ('([2:/android/app/cts/ZenPolicyTest.java]:[CALLER]:[2]:method_text:[isualEffectsUnset(ZenPolicy policy) {        assertAllVisualEffectsUnsetExcept(policy, -1);    }}])', 1), ('([1:/android/musicrecognition/cts/MusicRecognitionManagerTest.java]:[CALLER]:[1]:method_text:[nly allowed when the caller of the api is also the owner of     * the override service.     */   ])', 1), ('([2:/com/android/cts/managedprofile/ContactsTest.java]:[CALLER]:[2]:method_text:[CallerIdDisabled(                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT, true);    }   ])', 1), ('([2:/com/android/cts/managedprofile/ContactsTest.java]:[CALLER]:[2]:method_text:[allerIdDisabled(                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT, false);    }   ])', 1), ('([3:/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java]:[CALLER]:[3]:method_text:[an\'t be called.     */    @Suppress // calling ""cmd shortcut"" from this UID seems to hang now.   ])', 1), (""([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java]:[CALLER]:[2]:method_text:[       });    }    /**     * Make sure AIDL methods can't be called for other users.     */   ])"", 1), ('([1:/android/autofillservice/cts/activities/LoginActivity.java]:[CALLER]:[1]:method_text:[re checking autofill     * behavior.     * <pre>     * An example usage is:     * <code>     * ])', 1), ('([3:/android/accounts/cts/AccountManagerTest.java]:[CALLER]:[3]:method_text:[eak;            }        }        return result;    }    /**     * Test singleton     */   ])', 1), ('([7:/android/content/pm/cts/shortcutmanager/ShortcutManagerLauncherApiTest.java]:[CALLER]:[7]:method_text:[                  .selectByIds(""ms31"")                    .areAllDisabled();        });    }   ])', 1), ('([4:/android/content/pm/cts/shortcutmanager/ShortcutManagerLauncherApiTest.java]:[CALLER]:[4]:method_text:[         list(),                    list()))                    .isEmpty();        });    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerLauncherApiTest.java]:[CALLER]:[1]:method_text:[PackageContext1.getPackageName(), ""ms21"", false));    }    @CddTest(requirement=""3.8.1/C-1-2"")   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerLauncherApiTest.java]:[CALLER]:[1]:method_text:[AsLauncher(            mLauncherContext1, mPackageContext1.getPackageName(), ""s2"", false));    }}])', 1), ('([1:/android/hardware/camera2/cts/AllocationTest.java]:[CALLER]:[1]:method_text:[            // TODO: Make a Configure decorator or some such for configureOutputs        }    }}])', 1), ('([8:/android/content/pm/cts/shortcutmanager/ShortcutManagerMultiLauncherTest.java]:[CALLER]:[8]:method_text:[text2.getPackageName()))                    .haveIds(""s1"", ""s2"", ""s3"", ""ms32"");        });    }}])', 1), ('([2:/android/telephony/ims/cts/ImsCallProfileTest.java]:[CALLER]:[2]:method_text:[ATION_STATUS_PASSED,                unparceledData.getCallerNumberVerificationStatus());    }   ])', 1), ('([2:/android/permission/cts/NoActivityRelatedPermissionTest.java]:[CALLER]:[2]:method_text:[= 1                && intent.getData() == null                && intent.getType() == null;    }}])', 1), ('([3:/android/hardware/cts/CameraTest.java]:[CALLER]:[3]:method_text:[ture and verify all the callback     * functions are called properly.     */    @UiThreadTest   ])', 1), ('([1:/android/hardware/cts/CameraTest.java]:[CALLER]:[1]:method_text:[assertNull(exif.getAttribute(ExifInterface.TAG_GPS_PROCESSING_METHOD));    }    @UiThreadTest   ])', 1), ('([1:/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java]:[CALLER_IS_SYNCADAPTER]:[1]:method_text:[uld not format "" + number + "", error: "" + e);            }        }        return number;    }}])', 1), ('([1:/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java]:[CALLER]:[1]:method_text:[uld not format "" + number + "", error: "" + e);            }        }        return number;    }}])', 1), ('([1:/android/telephony/ims/cts/EabBulkCapabilityUpdaterTest.java]:[SYNCADAPTER]:[1]:method_text:[uld not format "" + number + "", error: "" + e);            }        }        return number;    }}])', 1), ('([1:/android/view/inputmethod/cts/PackageVisibilityTest.java]:[CALLER]:[1]:method_text:[return () -> TestUtils.forceStopPackage(TEST_ACTIVITY.getPackageName());    }    @AppModeFull   ])', 1), ('([3:/com/android/server/cts/device/statsdatom/AtomTests.java]:[SYNCADAPTER]:[3]:method_text:[r(context, 120_000, latch, null);        StatsdAuthenticator.removeAllAccounts(context);    }   ])', 1), ('([1:/android/os/cts/AccessSerialModernTest.java]:[CALLER]:[1]:method_text:[etContext().getPackageName(),                android.Manifest.permission.READ_PHONE_STATE);    }}])', 1), ('([12:/android/media/cts/MediaSessionTest.java]:[CALLER]:[12]:method_text:[{@code null}. No callbacks will be called     * once {@code setCallback(null)} is done.     */   ])', 1), ('([8:/android/media/cts/MediaSessionTest.java]:[CALLER]:[8]:method_text:[mCallerInfo = mSession.getCurrentControllerInfo();            mLatch.countDown();        }    }}])', 1), ('([1:/android/view/cts/ViewTest.java]:[CALLER]:[1]:method_text:[ventTime(), 20 /*delta*/);        }        event1.recycle();        event2.recycle();    }   ])', 1), ('([2:/android/telephony3/cts/TelephonyManagerTest.java]:[CALLER]:[2]:method_text:[ce identifiers, caught ""                    + ""SecurityException instead: "" + e);        }    }}])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[CALLER_IS_SYNCADAPTER]:[1]:method_text:[tResolver = getInstrumentation().getTargetContext().getContentResolver();    }    @MediumTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[CALLER]:[1]:method_text:[tResolver = getInstrumentation().getTargetContext().getContentResolver();    }    @MediumTest   ])', 1), ('([2:/android/provider/cts/calendar/CalendarTest.java]:[CALLER]:[2]:method_text:[ } finally {            if (c != null) {                c.close();            }        }    }}])', 1), ('([18:/android/provider/cts/calendar/CalendarTest.java]:[SYNCADAPTER]:[18]:method_text:[tResolver = getInstrumentation().getTargetContext().getContentResolver();    }    @MediumTest   ])', 1), ('([3:/android/provider/cts/calendar/CalendarTest.java]:[SYNCADAPTER]:[3]:method_text:[, calendarId);    }    /**     * Exercises the CalendarEntity class.     */    @MediumTest   ])', 1), ('([2:/android/provider/cts/calendar/CalendarTest.java]:[SYNCADAPTER]:[2]:method_text:[    }    /**     * Tests Colors interaction with the Calendars table.     */    @MediumTest   ])', 1), ('([2:/android/provider/cts/calendar/CalendarTest.java]:[SYNCADAPTER]:[2]:method_text:[);    }    /**     * Tests Colors interaction with the Events table.     */    @MediumTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[SYNCADAPTER]:[1]:method_text:[}    /**     * Tests creation and manipulation of ExtendedProperties.     */    @MediumTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[SYNCADAPTER]:[1]:method_text:[}    }    /**     * Test query to retrieve instances within a certain time interval.     */   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[SYNCADAPTER]:[1]:method_text:[n the Calendar table, specifying one restricted     * column at a time.     */    @MediumTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[SYNCADAPTER]:[1]:method_text:[ URI, because that only works if the events are created     * in order.     */    @MediumTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[SYNCADAPTER]:[1]:method_text:[   }    /**     * Tests correct behavior of Events.isOrganizer column     */    @MediumTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[SYNCADAPTER]:[1]:method_text:[);    }    /**     * Tests correct behavior of Events.uid2445 column     */    @MediumTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[SYNCADAPTER]:[1]:method_text:[       CalendarHelper.deleteCalendarByAccount(mContentResolver, account);    }    @MediumTest   ])', 1), ('([18:/android/provider/cts/calendar/CalendarTest.java]:[SYNCADAPTER]:[18]:method_text:[ } finally {            if (c != null) {                c.close();            }        }    }}])', 1)]"	"https://developer.android.com"	""	"[('CALLER', 195), ('SYNCADAPTER', 25), ('CALLER_IS_SYNCADAPTER', 2)]"	"[('[android.telephony.ims.cts.EabBulkCapabilityUpdaterTest deleteContactTest CtsTelephonyTestCases]', 3), ('[android.provider.cts.calendar.CalendarTest testMutatorSetCorrectly CtsCalendarProviderTestCases]', 2), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictionIsRestricted CtsDevicePolicyManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testGetShortcutConfigActivityList CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testIntentSenderNotCreatedForWrongActivity CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testCorrectIntentSenderCreated CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testCreateShortcutResultIntent_defaultLauncher CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testCreateShortcutResultIntent_defaultChanges CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerConfigActivityTest testCreateShortcutResultIntent_noDefault CtsShortcutManagerTestCases]', 1), ('[android.cts.backup.syncadaptersettingsapp.SyncAdapterSettingsTest testIsSyncableIsOne_ifTurnOffSyncEnabled None]', 1), ('[android.sample.cts.SampleDeviceReportLogTest testCountDown CtsSampleDeviceTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.throttling.ShortcutManagerThrottlingTestReceiver list None]', 1), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testRestrictingProviderMatchingShadyPaths None]', 1), ('[android.hardware.cts.CameraGLTest deriveCameraIdsUnderTest CtsCameraTestCases]', 1), ('[android.hardware.cts.CameraGLTest testCameraToSurfaceTextureMetadata CtsCameraTestCases]', 1), ('[android.media.cts.RoutingTest test_audioTrack_incallMusicRoutingPermissions CtsMediaTestCases]', 1), ('[com.android.cts.transferowner.TransferProfileOwnerOutgoingTest testTransferWithPoliciesOutgoing None]', 1), ('[com.android.cts.transferowner.TransferProfileOwnerOutgoingTest testTransferOwnership None]', 1), ('[android.providerui.cts.MediaStoreUiTest testGetMediaUriAccess_MediaDocumentsProvider CtsProviderUiTestCases]', 1), ('[android.security.cts.SecurityTestCase TestName CtsSecurityBulletinHostTestCases]', 1), ('[android.server.wm.StartActivityTests testLegacyStartActivityFromNonActivityContext CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.StartActivityTests testStartActivitiesWithDiffUidNotInSameTask CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.StartActivityTests testStartActivitiesTaskOverlayStayOnTop CtsWindowManagerDeviceTestCases]', 1), ('[android.media.cts.MediaSessionManagerTest testRemoteUserInfo CtsMediaTestCases]', 1), ('[android.media.cts.MediaSessionManagerTest testCustomClassConfigValuesAreValid CtsMediaTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerMaxCountTest testNumDynamicShortcuts CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerMaxCountTest testWithManifest CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerMaxCountTest testChangeActivity CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerMaxCountTest testWithPinned CtsShortcutManagerTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_ContactsTest testContactUpdate_usageStats CtsContactsProviderTestCases]', 1), ('[android.car.cts.PreCreateUsersHostTest testAppPermissionsPreCreatedGuestPackagesAfterReboot CtsCarHostTestCases]', 1), ('[android.telecom.cts.IncomingCallTest testVerstatPassed CtsTelecomTestCases]', 1), ('[android.telecom.cts.IncomingCallTest testVerstatFailed CtsTelecomTestCases]', 1), ('[android.telecom.cts.IncomingCallTest testVerstatNotVerified CtsTelecomTestCases]', 1), ('[android.systemintents.cts.TestManageOverlayPermissionIntents testStartManageAppOverlayPermissionIntent_whenCallerHasPermission_succeedsOrThrowsActivityNotFound CtsSystemIntentTestCases]', 1), ('[android.systemintents.cts.TestManageOverlayPermissionIntents testStartManageAppOverlayPermissionIntent_whenCallerDoesNotHavePermission_throwsSecurityExceptionOrActivityNotFound CtsSystemIntentTestCases]', 1), ('[android.content.cts.SyncRequestTest testBuilder_normal CtsContentTestCases]', 1), ('[android.content.cts.SyncRequestTest testBuilder_scheduleAsEj CtsContentTestCases]', 1), ('[android.content.cts.SyncRequestTest testBuilder_throwsException CtsContentTestCases]', 1), ('[com.android.cts.deviceowner.WifiNetworkConfigurationWithoutFineLocationPermissionTest testAddAndRetrieveCallerConfiguredNetworks None]', 1), ('[android.server.wm.AlertWindowsImportanceTests testAlertWindowOomAdj CtsWindowManagerDeviceTestCases]', 1), ('[android.telephony.cts.PhoneNumberUtilsTest testCallMethods CtsTelephonyTestCases]', 1), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaEscalation_RequestWriteFilePathSupport None]', 1), ('[android.media.session.cts.MediaSessionManagerHostTest testIsTrusted_withoutEnabledNotificationListener_returnsFalse CtsMediaHostTestCases]', 1), ('[com.android.cts.deviceandprofileowner.ApplicationRestrictionsIsCallerDelegateHelper isCallerApplicationRestrictionsManagingPackage None]', 1), ('[com.android.cts.deviceandprofileowner.WifiTest emptyList None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerStartShortcutTest getTestContext CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerStartShortcutTest testStartSingle CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerStartShortcutTest testStartMultiple CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerStartShortcutTest testShortcutNoLongerExists CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerStartShortcutTest testShortcutWrongId CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerStartShortcutTest testPinnedShortcut_sameLauncher CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerStartShortcutTest testPinnedShortcut_differentLauncher CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerStartShortcutTest testNonExistent CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerStartShortcutTest testUnExported CtsShortcutManagerTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_TrustedCertificateEntry_EC_PublicKeyWorksWithCrypto CtsKeystoreTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetSupportedFeatures CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testRemoveNonCallerConfiguredNetworksNotAllowed CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedMergingTypeSuccess CtsWifiTestCases]', 1), ('[android.telephony.embms.cts.MbmsGroupCallTest testGroupCallCallbacks CtsTelephonyTestCases]', 1), ('[android.telecom.cts.RemoteConferenceTest testRemoteConferenceMergeAndSwap CtsTelecomTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testNotifyAccountAuthenticated CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testAddAccountExplicitly CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testRemoveAccount_withBooleanResult CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testRemoveAccount_withBundleResult CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testRemoveAccountExplicitly CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testGetPassword CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testSetPassword CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testClearPassword CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testGetUserData CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testSetUserData CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testPeekAuthToken CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testSetAccountVisibility CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testGetAccountVisibility CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testGetAccountsAndVisibilityForPackage CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testGetPackagesAndVisibilityForAccount CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testAddAccountExplicitlyVisthVisibilityMap CtsAccountManagerTestCases]', 1), ('[android.media.cts.MediaControllerTest testSendCommand CtsMediaTestCases]', 1), ('[android.media.cts.MediaControllerTest testSetPlaybackSpeed CtsMediaTestCases]', 1), ('[android.media.cts.MediaControllerTest testTransportControlsAndMediaSessionCallback CtsMediaTestCases]', 1), ('[android.media.cts.MediaControllerTest testSendCustomActionWithIllegalArgumentsThrowsIAE CtsMediaTestCases]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testInstantAppsCantAccessExternalStorage None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testShortcutInfoMissingMandatoryFields CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testSetDynamicShortcuts CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testSetDynamicShortcuts_details CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testSetDynamicShortcuts_wasPinned CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testAddDynamicShortcuts CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testAddDynamicShortcuts_details CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testAddDynamicShortcuts_wasPinned CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testUpdateShortcut CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testUpdateShortcut_details CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testDisableAndEnableShortcut CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testImmutableShortcuts CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testManifestDefinition CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testDynamicIntents CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testManifestWithErrors CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testManifestDisabled CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testGetShortcuts CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testPushDynamicShortcut CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testRemoveLongLivedShortcuts CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testShortcutsWithUriIcons CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testGetShortcutIntent_ReturnPendingIntentForLauncher CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testGetShortcutIntent_ThrowsSecurityExceptionForNonLauncher CtsShortcutManagerTestCases]', 1), ('[android.server.wm.MultiDisplayActivityLaunchTests testLaunchNonResizeableActivityFromSecondaryDisplaySameTask CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.MultiDisplayActivityLaunchTests testLaunchSameAffinityLaunchesSameDisplay CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.MultiDisplayActivityLaunchTests testLaunchPendingIntentActivity CtsWindowManagerDeviceTestCases]', 1), ('[android.app.cts.UiModeManagerTest testEnterCarModePrioritized CtsAppTestCases]', 1), ('[android.telecom.cts.ConnectionTest testSetAndGetCallerDisplayName CtsTelecomTestCases]', 1), ('[android.telecom.cts.ConnectionTest testCallerNumberVerificationStatus CtsTelecomTestCases]', 1), ('[android.scopedstorage.cts.device.ScopedStorageDeviceTest testExternalStorageProviderAndDownloadsProvider None]', 1), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.security.cts.ServicePermissionsTest testDumpProtected CtsSecurityTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerLauncherCallbackTest testCallbacks CtsShortcutManagerTestCases]', 1), ('[com.android.server.cts.device.batterystats.BatteryStatsSyncTest testRunSyncs None]', 1), ('[android.content.cts.AccountAccessSameCertTest disallowSyncAdapterRunInBackgroundAndDataInBackground CtsContentTestCases]', 1), ('[android.content.cts.AccountAccessSameCertTest testAccountAccess_sameCertAsAuthenticatorCanSeeAccount CtsContentTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownload_onMediaStoreDownloadsDeleted CtsAppTestCases]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testSetKeyguardDisabledFeatures CtsDevicePolicyManagerTestCases]', 1), ('[android.slice.cts.SliceBuilderTest testCallerNeeded CtsSliceTestCases]', 1), ('[com.android.cts.delegate.AppRestrictionsIsCallerDelegateHelper isCallerApplicationRestrictionsManagingPackage None]', 1), ('[com.android.cts.delegate.AppRestrictionsIsCallerDelegateHelper testAssertCallerIsApplicationRestrictionsManagingPackage None]', 1), ('[com.android.cts.delegate.AppRestrictionsIsCallerDelegateHelper testAssertCallerIsNotApplicationRestrictionsManagingPackage None]', 1), ('[android.hardware.lights.cts.LightsManagerTest testControlLights_firstCallerWinsContention CtsHardwareTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_DirectoryTest testQueryParameters CtsContactsProviderTestCases]', 1), ('[android.media.cts.EnumDevicesTest test_devicesInfoFields CtsMediaTestCases]', 1), ('[android.appsearch.app.a.AppSearchInstantAppTest testInstantAppDoesntHaveAccess None]', 1), ('[android.content.cts.ContentResolverTest testNotifyChange2 CtsContentTestCases]', 1), ('[android.content.cts.ContentResolverTest testNotifyChange_MultipleSplit CtsContentTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest testSpoofingLauncher CtsShortcutManagerTestCases]', 1), ('[android.telecom.cts.CallDetailsTest testCallPropertyPropagation CtsTelecomTestCases]', 1), ('[android.telecom.cts.CallDetailsTest testCallerDisplayName CtsTelecomTestCases]', 1), ('[android.telecom.cts.CallDetailsTest testCallerDisplayNamePresentation CtsTelecomTestCases]', 1), ('[android.view.textclassifier.cts.TextClassifierServiceSwapTest getTestWatcher CtsTextClassifierTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerRequestPinTest testIsRequestPinShortcutSupported CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerRequestPinTest testRequestPinShortcut CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerRequestPinTest testRequestPinShortcut_multiLaunchers CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerRequestPinTest testRequestPinShortcut_multiLaunchers_withDynamic CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerRequestPinTest testRequestPinShortcut_noMainActivity CtsShortcutManagerTestCases]', 1), ('[com.android.cts.content.CtsSyncAccountAccessOtherCertTestCases disallowSyncAdapterRunInBackgroundAndDataInBackground CtsSyncAccountAccessOtherCertTestCases]', 1), ('[com.android.cts.content.CtsSyncAccountAccessOtherCertTestCases testAccountAccess_otherCertAsAuthenticatorCanNotSeeAccount CtsSyncAccountAccessOtherCertTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMeidForSlot CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetNetworkSelectionMode CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetNetworkSelectionModeAutomatic CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testIsApplicationOnUicc CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetSignalStrengthUpdateRequest_systemThresholdReportingRequestedWhileIdle CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetSignalStrengthUpdateRequest_systeresisDbSet CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetSignalStrengthUpdateRequest_systeresisMsSet CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetSignalStrengthUpdateRequest_isEnabledSet CtsTelephonyTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerUsageTest testReportShortcutUsed CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerUsageTest testShortcutInvocationEventIsVisible CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerUsageTest testShortcutInvocationEventIsNotVisible CtsShortcutManagerTestCases]', 1), ('[android.content.cts.ContextTest testGetWallpaperDesiredMinimumHeightAndWidth CtsContentTestCases]', 1), ('[android.telecom.cts.RemoteConnectionTest testRemoteConnectionCallbacks_CallerDisplayName CtsTelecomTestCases]', 1), ('[android.telecom.cts.RemoteConnectionTest testRemoteConnectionVideo_SetZoom CtsTelecomTestCases]', 1), ('[com.android.cts.certinstaller.CertSelectionDelegateTest testCanSelectKeychainKeypairs None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testSetMode CtsPermissionTestCases]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testIsManualNetworkSelectionAllowedWithoutPermission CtsPermissionTestCases]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetNetworkType CtsPermissionTestCases]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetNetworkSelectionModeWithoutPermission CtsPermissionTestCases]', 1), ('[android.app.cts.ZenPolicyTest testRepeatCallers CtsAppTestCases]', 1), ('[android.app.cts.ZenPolicyTest testDisallowAllSounds CtsAppTestCases]', 1), ('[android.app.cts.ZenPolicyTest testAllowAllSounds CtsAppTestCases]', 1), ('[android.app.cts.ZenPolicyTest testDisallowAllVisualEffects CtsAppTestCases]', 1), ('[android.musicrecognition.cts.MusicRecognitionManagerTest testRemovesBindersFromBundle CtsMusicRecognitionTestCases]', 1), ('[com.android.cts.managedprofile.ContactsTest testSetCrossProfileCallerIdDisabled_true None]', 1), ('[com.android.cts.managedprofile.ContactsTest testSetCrossProfileCallerIdDisabled_false None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerNegativeTest testDirectAidlCalls CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerNegativeTest testCommand CtsShortcutManagerTestCases]', 1), ('[android.autofillservice.cts.activities.LoginActivity finish CtsAutoFillServiceTestCases]', 1), ('[android.accounts.cts.AccountManagerTest AccountManagerTest CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testAddAccountExplicitlyAndRemoveAccountExplicitly CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testSetAccountVisibility CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testSetAccountVisibilityForPrivilegedPackage CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testAddAccountExplicitlyWithVisibility CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testGetAccountsAndVisibilityForPackage CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionFromStartUpdateCredentialsSessionAccountTypeOverriden CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionIntervene CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionWithCallbackAndHandler CtsAccountManagerTestCases]', 1), ('[android.accounts.cts.AccountManagerTest testFinishSessionWithCallbackAndHandlerWithIntervene CtsAccountManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerLauncherApiTest testPinShortcuts CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerLauncherApiTest testGetShortcuts CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerLauncherApiTest testGetShortcutIcon CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerLauncherApiTest testGetShortcutIconAdaptive CtsShortcutManagerTestCases]', 1), ('[android.hardware.camera2.cts.AllocationTest testParamSensitivity CtsCameraTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerMultiLauncherTest testPinShortcuts CtsShortcutManagerTestCases]', 1), ('[android.telephony.ims.cts.ImsCallProfileTest testParcelUnparcel CtsTelephonyTestCases]', 1), ('[android.permission.cts.NoActivityRelatedPermissionTest testGetTask CtsPermissionTestCases]', 1), ('[android.hardware.cts.CameraTest TestShutterCallback CtsCameraTestCases]', 1), ('[android.hardware.cts.CameraTest testJpegExif CtsCameraTestCases]', 1), ('[android.view.inputmethod.cts.PackageVisibilityTest getTestMarker CtsInputMethodTestCases]', 1), ('[com.android.server.cts.device.statsdatom.AtomTests testSyncState None]', 1), ('[android.os.cts.AccessSerialModernTest testAccessSerialPermissionNeeded None]', 1), ('[android.media.cts.MediaSessionTest testCallbackOnMediaButtonEvent CtsMediaTestCases]', 1), ('[android.media.cts.MediaSessionTest testSetQueueWithEmptyQueue CtsMediaTestCases]', 1), ('[android.view.cts.ViewTest testDispatchTouchEvent CtsViewTestCases]', 1), ('[android.telephony3.cts.TelephonyManagerTest testDeviceIdentifiersAreNotAccessible CtsTelephony3TestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testEventsEntityQuery CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testColorWriteRequirements CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testCalendarColors CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testEventColors CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testExtendedProperties CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testBulkUpdate CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testNonAdapterRecurrenceExceptions CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testCalendarIsPrimary CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testEventsIsOrganizer CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testEventsUid2445 CtsCalendarProviderTestCases]', 1)]"
"9.8.10  Connectivity Bug Report"	"9.8.10"	"C-1-4"	"9.8.10/C-1-4"	"09081000.670104"	"""C-1-4] MUST NOT include the following in the generated reports:     *   Any kind of information unrelated to connectivity debugging.     *   Any kind of user-installed application traffic logs or detailed profiles         of user-installed applications/packages (UIDs are okay, package names         are not). *   MAY include additional information that is not associated with any user     identity. (e.g. vendor logs).  If device implementations include additional information (e.g vendor logs) in the bug report and that information has privacy/security/battery/storage/memory impact, they:  """	""	""	"UID"	""	""	""	""	"[('android.app.cts.ActivityManagerProcessStateTest', 21), ('android.app.usage.cts.UsageStatsTest', 20), ('android.content.pm.cts.PackageManagerTest', 8), ('android.slice.cts.SlicePermissionsTest', 8), ('com.android.cts.storageapp.StorageTest', 6), ('android.os.storage.cts.StorageManagerTest', 6), ('android.bluetooth.cts.ScanFilterTest', 5), ('android.mediaprovidertranscode.cts.TranscodeTest', 5), ('android.app.usage.cts.UsageReportingTest', 4), ('android.os.cts.WorkSourceTest', 4), ('com.android.cts.blob.BlobStoreManagerTest', 4), ('android.hardware.cts.SensorTest', 4), ('android.cts.statsdatom.bluetooth.BluetoothStatsTests', 4), ('android.server.wm.StartActivityTests', 4), ('com.android.cts.splitapp.SplitAppTest', 4), ('android.appsecurity.cts.AdoptableHostTest', 4), ('com.android.cts.writeexternalstorageapp.WriteExternalStorageTest', 3), ('android.app.usage.cts.CacheQuotaHintTest', 3), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 3), ('android.hardware.camera2.cts.IdleUidTest', 3), ('android.media.cts.MediaPlayerTest', 3), ('android.cts.statsdatom.net.BytesTransferredTest', 3), ('android.permission.cts.OneTimePermissionTest', 3), ('android.permission.cts.SplitPermissionTest', 3), ('android.security.cts.EffectBundleTest', 3), ('android.scopedstorage.cts.legacy.LegacyStorageTest', 3), ('com.android.cts.tv.TvInputManagerServiceHostTest', 3), ('android.net.wifi.cts.WifiManagerTest', 3), ('android.media.cts.NativeDecoderTest', 2), ('android.media.cts.MediaCodecTest', 2), ('android.app.cts.BadProviderTest', 2), ('android.media.cts.AudioRecordTest', 2), ('android.media.cts.LoudnessEnhancerTest', 2), ('com.android.cts.packagemanager.stats.host.PackageInstallerV2StatsTests', 2), ('android.packageinstaller.tapjacking.cts.TapjackingTest', 2), ('android.content.cts.ClipDescriptionTest', 2), ('android.media.session.cts.MediaSessionManagerTest', 2), ('com.android.cts.intent.sender.SuspendPackageTest', 2), ('android.appsecurity.cts.listeningports.ListeningPortsTest', 2), ('com.android.cts.delegate.SecurityLoggingDelegateTest', 2), ('android.jobscheduler.cts.ExpeditedJobTest', 2), ('android.net.wifi.cts.WifiBackupRestoreTest', 2), ('android.processor.view.inspector.cts.PlatformInspectableProcessorTest', 2), ('android.telephony.cts.CarrierConfigManagerTest', 2), ('android.alarmmanager.cts.AppStandbyTests', 2), ('com.android.cts.packagemanager.stats.host.InstalledIncrementalPackageStatsTests', 2), ('android.appsearch.app.a.AppSearchStorageAugmenterDeviceTest', 2), ('com.android.cts.mediastorageapp.MediaStorageTest', 2), ('com.android.server.cts.PowerIncidentTest', 2), ('android.mediadrm.cts.MediaDrmExtractorTest', 2), ('android.jobscheduler.cts.shareduidtests.SharedUidTest', 2), ('com.android.server.cts.ActivityManagerIncidentTest', 2), ('android.contentcaptureservice.cts.WhitelistTest', 2), ('android.media.cts.MediaMetricsTest', 2), ('com.android.tests.silentupdate.SilentUpdateTests', 2), ('android.bluetooth.cts.BasicAdapterTest', 2), ('android.scopedstorage.cts.host.ScopedStorageCoreHostTest', 1), ('android.net.http.cts.HttpResponseCacheTest', 1), ('android.binder.cts.JavaClientTest', 1), ('android.server.wm.CrossAppDragAndDropTests', 1), ('android.permission.cts.PermissionControllerTest', 1), ('android.os.cts.PowerManagerTests', 1), ('android.cts.statsdatom.binderstats.BinderStatsTests', 1), ('android.server.wm.WindowTest', 1), ('com.android.cts.devicepolicy.accountcheck.AccountCheckTest', 1), ('android.providerui.cts.MediaStoreUiTest', 1), ('android.server.wm.PrereleaseSdkTest', 1), ('android.os.cts.EnvironmentHostTests', 1), ('android.sharesheet.cts.CtsSharesheetDeviceTest', 1), ('android.media.cts.MediaSessionManagerTest', 1), ('android.os.cts.BuildTest', 1), ('android.view.textclassifier.cts.TextViewIntegrationTest', 1), ('android.net.wifi.cts.WifiNetworkSpecifierTest', 1), ('android.permission.cts.NoBroadcastPackageRemovedPermissionTest', 1), ('android.security.cts.IntentSenderRemovalTest', 1), ('android.systemintents.cts.TestManageOverlayPermissionIntents', 1), ('android.server.wm.AlertWindowsImportanceTests', 1), ('android.mediadrm.cts.MediaPlayerDrmTest', 1), ('android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest', 1), ('android.media.cts.AudioRecordingConfigurationTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofDetectionTest', 1), ('android.server.wm.SurfaceControlViewHostTests', 1), ('android.alarmmanager.cts.BasicApiTests', 1), ('android.server.wm.KeyguardLockedTests', 1), ('com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest', 1), ('android.permission.cts.NearbyDevicesRenouncePermissionTest', 1), ('android.app.people.cts.PeopleManagerTest', 1), ('android.content.cts.IntentTest', 1), ('com.android.cts.appwithdata.CreatePrivateDataTest', 1), ('android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests', 1), ('android.media.cts.MediaExtractorTest', 1), ('android.uidisolation.cts.IsolatedServiceTest', 1), ('android.provider.cts.SettingsPanelTest', 1), ('com.android.cts.devicepolicy.ManagedProfileTest', 1)]"	"[('setUp', 44), ('getDevice', 32), ('getInstrumentation', 26), ('tearDown', 25), ('getContext', 22), ('getPackageManager', 18), ('getTargetContext', 15), ('getPackageName', 11), ('build', 11), ('getExternalStorageDirectory', 6), ('Builder', 6), ('getMediaDirString', 5), ('getSimpleName', 5), ('setup', 4), ('pressHome', 4), ('notifyAll', 4), ('delete', 3), ('toString', 3), ('size', 3), ('getUiAutomation', 3), ('getName', 3), ('Intent', 3), ('Monitor', 3), ('wakeUp', 3), ('getAtom', 3), ('getTifTuneChanged', 3), ('newBuilder', 3), ('inOrder', 3), ('getAttributionTag', 3), ('deleteShortcuts', 3), ('randomUUID', 2), ('getPath', 2), ('WorkSource', 2), ('StringBuilder', 2), ('installApp', 2), ('uninstallApp', 2), ('nanoTime', 2), ('waitForIdleSync', 2), ('getContentResolver', 2), ('getUserId', 2), ('getApplicationContext', 2), ('BroadcastReceiver', 2), ('getDownloadedFolder', 2), ('MediaExtractor', 2), ('release', 2), ('getStatSize', 2), ('evaluate', 2), ('createDynamicShortcut', 2), ('getConversationNotification', 2), ('getId', 2), ('getPackageInstaller', 2), ('assertExternalStorageMounted', 1), ('getExternalStorageState', 1), ('getDefaultAdapter', 1), ('MockWebServer', 1), ('mkdirs', 1), ('shutdown', 1), ('startHandlerThread', 1), ('start', 1), ('stopHandlerThread', 1), ('quit', 1), ('supportsSplitScreenMultiWindow', 1), ('supportsFreeform', 1), ('resetAppState', 1), ('pollForExternalStorageState', 1), ('getAbsolutePath', 1), ('myPid', 1), ('data', 1), ('getSharedVolumeNames', 1), ('clearResult', 1), ('init', 1), ('meetsResolutionRequirements', 1), ('createMatchingIntent', 1), ('stream', 1), ('toSet', 1), ('temporarilySkipActivityLaunch', 1), ('printStackTrace', 1), ('setUpClass', 1), ('wakeUpScreen', 1), ('prepareDeviceForOneTime', 1), ('restoreDeviceForOneTime', 1), ('WindowManagerStateHelper', 1), ('fail', 1), ('hasTelephony', 1), ('AlarmManagerDeviceConfigHelper', 1), ('elapsedRealtime', 1), ('getOverrideConfig', 1), ('run', 1), ('verifyCallbackVideoAvailable', 1), ('verifyCallbackVideoUnavailable', 1), ('verifyCommandTune', 1), ('builder', 1), ('Statement', 1), ('getSerialNumber', 1), ('pressWakeupButton', 1), ('pressUnlockButton', 1), ('pressHomeButton', 1), ('getHolder', 1), ('supportsSecureLock', 1), ('setupCrossProfileApps', 1), ('wakeupDeviceAndPressHome', 1), ('pressMenu', 1), ('readTargetUser', 1), ('getArguments', 1), ('scanRenouncingAtEndOfChainNotesBluetoothButNotLocation', 1), ('clearNoteCounts', 1), ('getAdapter', 1), ('getBluetoothLeScanner', 1), ('ScanCallback', 1), ('getScanRecord', 1), ('getBytes', 1), ('IllegalStateException', 1), ('supportsBluetooth', 1), ('cancelAll', 1), ('getNotificationChannels', 1), ('removeAllDynamicShortcuts', 1), ('Object', 1), ('getAction', 1), ('getScanResults', 1), ('getState', 1), ('resetSilentUpdatesPolicy', 1), ('silentInstallRepeatedly_waitForThrottleTime_succeed', 1), ('getResult', 1), ('getRequireUserAction', 1), ('get', 1), ('getMainLooper', 1), ('ReentrantLock', 1), ('newCondition', 1)]"	"[('CtsUsageStatsTestCases', 27), ('CtsAppTestCases', 24), ('CtsMediaTestCases', 16), ('CtsContentTestCases', 11), ('CtsWindowManagerDeviceTestCases', 10), ('CtsPermissionTestCases', 9), ('CtsStatsdAtomHostTestCases', 8), ('CtsSliceTestCases', 8), ('CtsBluetoothTestCases', 7), ('CtsWifiTestCases', 7), ('CtsDevicePolicyManagerTestCases', 4), ('CtsBlobStoreTestCases', 4), ('CtsSensorTestCases', 4), ('CtsPackageManagerStatsHostTestCases', 4), ('CtsSecurityTestCases', 4), ('CtsIncidentHostTestCases', 4), ('CtsAppSecurityHostTestCases', 4), ('CtsCameraTestCases', 3), ('CtsAlarmManagerTestCases', 3), ('CtsMediaDrmTestCases', 3), ('CtsOsHostTestCases', 2), ('CtsPackageInstallerTapjackingTestCases', 2), ('CtsJobSchedulerTestCases', 2), ('CtsViewInspectorAnnotationProcessorTestCases', 2), ('CtsTelephonyTestCases', 2), ('CtsJobSchedulerSharedUidTestCases', 2), ('CtsContentCaptureServiceTestCases', 2), ('CtsApacheHttpTestCases', 1), ('CtsNdkBinderTestCases', 1), ('CtsProviderUiTestCases', 1), ('CtsSharesheetTestCases', 1), ('CtsTextClassifierTestCases', 1), ('CtsSystemIntentTestCases', 1), ('CtsShortcutManagerTestCases', 1), ('CtsAccountManagerTestCases', 1), ('CtsUidIsolationTestCases', 1), ('CtsProviderTestCases', 1)]"	""	""	""	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"getPackageManager"	"CtsDevicePolicyManagerTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java', 21), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageStatsTest.java', 20), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/slice/src/android/slice/cts/SlicePermissionsTest.java', 8), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/StorageApp/src/com/android/cts/storageapp/StorageTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/storage/cts/StorageManagerTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanFilterTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/MediaProviderTranscode/src/android/mediaprovidertranscode/cts/TranscodeTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageReportingTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/WorkSourceTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/bluetooth/BluetoothStatsTests.java', 4), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/StartActivityTests.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/SplitApp/src/com/android/cts/splitapp/SplitAppTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AdoptableHostTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/CacheQuotaHintTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/IdleUidTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/net/BytesTransferredTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/SplitPermissionTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/EffectBundleTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/tv/src/com/android/cts/tv/TvInputManagerServiceHostTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/NativeDecoderTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaCodecTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/BadProviderTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioRecordTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/LoudnessEnhancerTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/packagemanager/stats/src/com/android/cts/packagemanager/stats/host/PackageInstallerV2StatsTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/packageinstaller/tapjacking/src/android/packageinstaller/tapjacking/cts/TapjackingTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/media/app/MediaSessionTest/src/android/media/session/cts/MediaSessionManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/SuspendPackageTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ListeningPortsApp/src/android/appsecurity/cts/listeningports/ListeningPortsTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/SecurityLoggingDelegateTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/JobScheduler/src/android/jobscheduler/cts/ExpeditedJobTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/tools/processors/view_inspector/src/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CarrierConfigManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/AppStandbyTests.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/packagemanager/stats/src/com/android/cts/packagemanager/stats/host/InstalledIncrementalPackageStatsTests.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsearch/test-apps/AppSearchHostTestHelperA/src/android/appsearch/app/a/AppSearchStorageAugmenterDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/MediaStorageApp/src/com/android/cts/mediastorageapp/MediaStorageTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/src/com/android/server/cts/PowerIncidentTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/mediadrm/src/android/mediadrm/cts/MediaDrmExtractorTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/JobSchedulerSharedUid/src/android/jobscheduler/cts/shareduidtests/SharedUidTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/src/com/android/server/cts/ActivityManagerIncidentTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/WhitelistTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaMetricsTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/silentupdate/testapp/src/com/android/tests/silentupdate/SilentUpdateTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BasicAdapterTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/host/src/android/scopedstorage/cts/host/ScopedStorageCoreHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/apache-http/src/android/net/http/cts/HttpResponseCacheTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/binder_ndk/src/android/binder/cts/JavaClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/CrossAppDragAndDropTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/PermissionControllerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/os/src/android/os/cts/PowerManagerTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/binderstats/BinderStatsTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/AccountCheck/Auth/src/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/providerui/src/android/providerui/cts/MediaStoreUiTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/PrereleaseSdkTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/os/src/android/os/cts/EnvironmentHostTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/sharesheet/src/android/sharesheet/cts/CtsSharesheetDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaSessionManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/BuildTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/textclassifier/src/android/view/textclassifier/cts/TextViewIntegrationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoBroadcastPackageRemovedPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/IntentSenderRemovalTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestManageOverlayPermissionIntents.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AlertWindowsImportanceTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/mediadrm/src/android/mediadrm/cts/MediaPlayerDrmTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioRecordingConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofDetectionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/SurfaceControlViewHostTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/BasicApiTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardLockedTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesRenouncePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/people/cts/PeopleManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppWithData/src/com/android/cts/appwithdata/CreatePrivateDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/accounts/src/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaExtractorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uidisolation/src/android/uidisolation/cts/IsolatedServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/SettingsPanelTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java', 1)]"	"[('(8,UID,/android/media/cts/NativeDecoderTest.java)', 1), ('(3,UID,/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java)', 1), ('(72,UID,/android/bluetooth/cts/ScanFilterTest.java)', 1), ('(18,UID,/android/app/usage/cts/CacheQuotaHintTest.java)', 1), ('(8,UID,/android/app/usage/cts/UsageReportingTest.java)', 1), ('(2,UID,/android/scopedstorage/cts/host/ScopedStorageCoreHostTest.java)', 1), ('(3,UID,/android/net/http/cts/HttpResponseCacheTest.java)', 1), ('(8,UID,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(48,UID,/android/content/pm/cts/PackageManagerTest.java)', 1), ('(59,UID,/android/os/cts/WorkSourceTest.java)', 1), ('(4,UID,/android/binder/cts/JavaClientTest.java)', 1), ('(21,UID,/android/hardware/camera2/cts/IdleUidTest.java)', 1), ('(4,UID,/android/media/cts/MediaCodecTest.java)', 1), ('(1,UID,/android/server/wm/CrossAppDragAndDropTests.java)', 1), ('(20,UID,/android/app/cts/BadProviderTest.java)', 1), ('(2,UID,/android/permission/cts/PermissionControllerTest.java)', 1), ('(14,UID,/android/media/cts/AudioRecordTest.java)', 1), ('(774,UID,/android/app/cts/ActivityManagerProcessStateTest.java)', 1), ('(89,UID,/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(2,UID,/android/os/cts/PowerManagerTests.java)', 1), ('(8,UID,/android/hardware/cts/SensorTest.java)', 1), ('(8,UID,/android/cts/statsdatom/binderstats/BinderStatsTests.java)', 1), ('(1,UID,/android/server/wm/WindowTest.java)', 1), ('(35,UID,/android/mediaprovidertranscode/cts/TranscodeTest.java)', 1), ('(1,UID,/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java)', 1), ('(3,UID,/android/media/cts/MediaPlayerTest.java)', 1), ('(3,UID,/android/media/cts/LoudnessEnhancerTest.java)', 1), ('(8,UID,/com/android/cts/packagemanager/stats/host/PackageInstallerV2StatsTests.java)', 1), ('(12,UID,/android/packageinstaller/tapjacking/cts/TapjackingTest.java)', 1), ('(23,UID,/android/slice/cts/SlicePermissionsTest.java)', 1), ('(3,UID,/android/providerui/cts/MediaStoreUiTest.java)', 1), ('(1,UID,/android/server/wm/PrereleaseSdkTest.java)', 1), ('(1,UID,/android/os/cts/EnvironmentHostTests.java)', 1), ('(3,UID,/android/sharesheet/cts/CtsSharesheetDeviceTest.java)', 1), ('(4,UID,/android/cts/statsdatom/bluetooth/BluetoothStatsTests.java)', 1), ('(8,UID,/android/server/wm/StartActivityTests.java)', 1), ('(2,UID,/android/media/cts/MediaSessionManagerTest.java)', 1), ('(7,UID,/android/content/cts/ClipDescriptionTest.java)', 1), ('(2,UID,/android/media/session/cts/MediaSessionManagerTest.java)', 1), ('(5,UID,/com/android/cts/intent/sender/SuspendPackageTest.java)', 1), ('(1,UID,/android/os/cts/BuildTest.java)', 1), ('(2,UID,/android/view/textclassifier/cts/TextViewIntegrationTest.java)', 1), ('(9,UID,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(1,UID,/android/permission/cts/NoBroadcastPackageRemovedPermissionTest.java)', 1), ('(27,UID,/android/appsecurity/cts/listeningports/ListeningPortsTest.java)', 1), ('(1,UID,/android/security/cts/IntentSenderRemovalTest.java)', 1), ('(7,UID,/com/android/cts/delegate/SecurityLoggingDelegateTest.java)', 1), ('(6,UID,/android/systemintents/cts/TestManageOverlayPermissionIntents.java)', 1), ('(28,UID,/android/cts/statsdatom/net/BytesTransferredTest.java)', 1), ('(22,UID,/android/permission/cts/OneTimePermissionTest.java)', 1), ('(10,UID,/android/jobscheduler/cts/ExpeditedJobTest.java)', 1), ('(45,UID,/android/app/usage/cts/UsageStatsTest.java)', 1), ('(9,UID,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(7,UID,/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java)', 1), ('(8,UID,/android/permission/cts/SplitPermissionTest.java)', 1), ('(3,UID,/android/telephony/cts/CarrierConfigManagerTest.java)', 1), ('(5,UID,/android/alarmmanager/cts/AppStandbyTests.java)', 1), ('(4,UID,/android/server/wm/AlertWindowsImportanceTests.java)', 1), ('(10,UID,/android/security/cts/EffectBundleTest.java)', 1), ('(9,UID,/com/android/cts/packagemanager/stats/host/InstalledIncrementalPackageStatsTests.java)', 1), ('(9,UID,/android/appsearch/app/a/AppSearchStorageAugmenterDeviceTest.java)', 1), ('(1,UID,/android/mediadrm/cts/MediaPlayerDrmTest.java)', 1), ('(3,UID,/com/android/cts/mediastorageapp/MediaStorageTest.java)', 1), ('(15,UID,/com/android/server/cts/PowerIncidentTest.java)', 1), ('(9,UID,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(10,UID,/android/scopedstorage/cts/legacy/LegacyStorageTest.java)', 1), ('(5,UID,/android/media/cts/AudioRecordingConfigurationTest.java)', 1), ('(4,UID,/com/android/cts/splitapp/SplitAppTest.java)', 1), ('(1,UID,/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofDetectionTest.java)', 1), ('(13,UID,/android/mediadrm/cts/MediaDrmExtractorTest.java)', 1), ('(6,UID,/android/jobscheduler/cts/shareduidtests/SharedUidTest.java)', 1), ('(6,UID,/com/android/cts/tv/TvInputManagerServiceHostTest.java)', 1), ('(25,UID,/com/android/server/cts/ActivityManagerIncidentTest.java)', 1), ('(3,UID,/android/server/wm/SurfaceControlViewHostTests.java)', 1), ('(3,UID,/android/alarmmanager/cts/BasicApiTests.java)', 1), ('(5,UID,/android/contentcaptureservice/cts/WhitelistTest.java)', 1), ('(1,UID,/android/server/wm/KeyguardLockedTests.java)', 1), ('(3,UID,/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java)', 1), ('(2,UID,/android/permission/cts/NearbyDevicesRenouncePermissionTest.java)', 1), ('(3,UID,/android/app/people/cts/PeopleManagerTest.java)', 1), ('(32,UID,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(8,UID,/android/media/cts/MediaMetricsTest.java)', 1), ('(37,UID,/com/android/cts/storageapp/StorageTest.java)', 1), ('(11,UID,/android/appsecurity/cts/AdoptableHostTest.java)', 1), ('(1,UID,/android/content/cts/IntentTest.java)', 1), ('(1,UID,/com/android/cts/appwithdata/CreatePrivateDataTest.java)', 1), ('(3,UID,/com/android/tests/silentupdate/SilentUpdateTests.java)', 1), ('(1,UID,/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java)', 1), ('(1,UID,/android/media/cts/MediaExtractorTest.java)', 1), ('(44,UID,/android/os/storage/cts/StorageManagerTest.java)', 1), ('(3,UID,/android/bluetooth/cts/BasicAdapterTest.java)', 1), ('(1,UID,/android/uidisolation/cts/IsolatedServiceTest.java)', 1), ('(3,UID,/android/provider/cts/SettingsPanelTest.java)', 1), ('(2,UID,/com/android/cts/devicepolicy/ManagedProfileTest.java)', 1)]"	"[('([20:/android/bluetooth/cts/ScanFilterTest.java]:[UID]:[20]:method_text:[());        assertTrue(""uuid filter fails"", filter.matches(mScanResult));    }    @SmallTest   ])', 2), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[1]:method_text:[e / DAY);        });    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 2), ('([4:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[UID]:[4]:method_text:[e.delete();            denyAppOpsToUid(Process.myUid(), SYSTEM_GALERY_APPOPS);        }    }   ])', 2), ('([2:/com/android/cts/tv/TvInputManagerServiceHostTest.java]:[UID]:[2]:method_text:[CHED,                                TifTuneState.RELEASED)).                inOrder();    }   ])', 2), ('([1:/android/media/cts/NativeDecoderTest.java]:[UID]:[1]:method_text:[     if (testsRun == 0) {            MediaUtils.skipTest(""no decoders found"");        }    }   ])', 1), ('([7:/android/media/cts/NativeDecoderTest.java]:[UID]:[7]:method_text:[     }    }    private static native boolean testPsshNative(int fd, long offset, long size);   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[UID]:[1]:method_text:[{        assertEquals(Environment.MEDIA_MOUNTED, Environment.getExternalStorageState());    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[UID]:[1]:method_text:[.trim().equals(""true"");    }    /**     * Verify that .nomedia is created correctly.     */   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[UID]:[1]:method_text:[              assertDirNoWriteAccess(userPath);                }            }        }    }   ])', 1), ('([6:/android/bluetooth/cts/ScanFilterTest.java]:[UID]:[6]:method_text:[000000L);            mFilterBuilder = new ScanFilter.Builder();        }    }    @SmallTest   ])', 1), ('([11:/android/bluetooth/cts/ScanFilterTest.java]:[UID]:[11]:method_text:[    assertFalse(""service data filter fails"", filter.matches(mScanResult));    }    @SmallTest   ])', 1), ('([15:/android/bluetooth/cts/ScanFilterTest.java]:[UID]:[15]:method_text:[nufacturerDataMask).build();        testReadWriteParcelForFilter(filter);    }    @SmallTest   ])', 1), ('([3:/android/app/usage/cts/CacheQuotaHintTest.java]:[UID]:[3]:method_text:[lumeUuid= */ ""uuid"", /* uid= */ 0, /* quota= */ 100);        assertCacheQuotaHint(hint);    }   ])', 1), ('([3:/android/app/usage/cts/CacheQuotaHintTest.java]:[UID]:[3]:method_text:[*/ ""uuid"", /* uid= */ 0, /* quota= */ 100)).build();        assertCacheQuotaHint(hint);    }   ])', 1), ('([12:/android/app/usage/cts/CacheQuotaHintTest.java]:[UID]:[12]:method_text:[));        assertEquals(100, hint.getQuota());        assertNotNull(hint.getUsageStats());    }}])', 1), ('([5:/android/app/usage/cts/UsageReportingTest.java]:[UID]:[5]:method_text:[0 = mTargetPackage + ""/"" + TOKEN_0;        mFullToken1 = mTargetPackage + ""/"" + TOKEN_1;    }   ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[UID]:[1]:method_text:[_COMMAND);        Thread.sleep(1000);        assertAppOrTokenUsed(mFullToken0, false);    }   ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[UID]:[1]:method_text:[sertAppOrTokenUsed(mFullToken0, false);        assertAppOrTokenUsed(mFullToken1, false);    }   ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[UID]:[1]:method_text:[    break;                }            }            return found == expected;        });    }}])', 1), ('([2:/android/scopedstorage/cts/host/ScopedStorageCoreHostTest.java]:[UID]:[2]:method_text:[executeShellCommand(""cmd appops set --uid android.scopedstorage.cts %s deny"", op);        }    }}])', 1), ('([3:/android/net/http/cts/HttpResponseCacheTest.java]:[UID]:[3]:method_text:[     ResponseCache.setDefault(null);        server.shutdown();        super.tearDown();    }   ])', 1), ('([5:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[UID]:[5]:method_text:[.        getDevice().executeShellCommand(""input keyevent 3"");        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[UID]:[1]:method_text:[YSTEM, because     * network rules for this user will affect UID 0.     */    @RequiresDevice   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[UID]:[2]:method_text:[ser(SHARED_UID_APP2_APK, mUserId);        executeDeviceTestClass("".KeyManagementTest"");    }   ])', 1), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[UID]:[1]:method_text:[d = true;                break;            }        }        assertTrue(isContained);    }   ])', 1), ('([11:/android/content/pm/cts/PackageManagerTest.java]:[UID]:[11]:method_text:[e PackageManager#addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName)     */   ])', 1), ('([10:/android/content/pm/cts/PackageManagerTest.java]:[UID]:[10]:method_text:[ssertEquals(PackageManager.SIGNATURE_MATCH, mPackageManager.checkSignatures(uid1, uid1));    }   ])', 1), ('([7:/android/content/pm/cts/PackageManagerTest.java]:[UID]:[7]:method_text:[Manager.SIGNATURE_NO_MATCH,                mPackageManager.checkSignatures(uid1, uid2));    }   ])', 1), ('([2:/android/content/pm/cts/PackageManagerTest.java]:[UID]:[2]:method_text:[Uids_null() throws Exception {        assertNull(mPackageManager.getNamesForUids(null));    }   ])', 1), ('([2:/android/content/pm/cts/PackageManagerTest.java]:[UID]:[2]:method_text:[pty() throws Exception {        assertNull(mPackageManager.getNamesForUids(new int[0]));    }   ])', 1), ('([6:/android/content/pm/cts/PackageManagerTest.java]:[UID]:[6]:method_text:[ssertEquals(null, result[1]);        assertEquals(""com.android.cts.ctsshim"", result[2]);    }   ])', 1), ('([9:/android/content/pm/cts/PackageManagerTest.java]:[UID]:[9]:method_text:[;        assertEquals(uid, mPackageManager.getPackageUid(""com.android.cts.ctsshim"", 0));    }   ])', 1), ('([41:/android/os/cts/WorkSourceTest.java]:[UID]:[41]:method_text:[eName(i))) {                failWorkSource(op, ws, uids, names);            }        }    }   ])', 1), ('([5:/android/os/cts/WorkSourceTest.java]:[UID]:[5]:method_text:[              makeStringArray(expected), makeStringArray(newbs), makeStringArray(gones));    }   ])', 1), ('([6:/android/os/cts/WorkSourceTest.java]:[UID]:[6]:method_text:[keStringArray(lhs), makeStringArray(rhs),                makeStringArray(result), diff);    }   ])', 1), ('([7:/android/os/cts/WorkSourceTest.java]:[UID]:[7]:method_text:[rksource"");        } catch (IllegalArgumentException e) {            // Expected        }    }}])', 1), ('([4:/android/binder/cts/JavaClientTest.java]:[UID]:[4]:method_text:[      }      assertEquals(Process.myUid(), mInterface.GiveMeMyCallingUidFromOneway());    }   ])', 1), ('([6:/android/hardware/camera2/cts/IdleUidTest.java]:[UID]:[6]:method_text:[);    }    /**     * Tests that a UID has access to the camera only in active state.     */   ])', 1), ('([3:/android/hardware/camera2/cts/IdleUidTest.java]:[UID]:[3]:method_text:[   }    /**     * Tests that a UID loses access to the camera if it becomes inactive.     */   ])', 1), ('([12:/android/hardware/camera2/cts/IdleUidTest.java]:[UID]:[12]:method_text:[;        SystemUtil.runShellCommand(InstrumentationRegistry.getInstrumentation(), command);    }}])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[UID]:[1]:method_text:[s are thrown from MediaCodec     * methods when called in incorrect operational states.     */   ])', 1), ('([3:/android/media/cts/MediaCodecTest.java]:[UID]:[3]:method_text:[077efecc0b24d02L, 0xace33c1e52e2fb4bL);    /**     * Tests MediaCodec.CryptoException     */   ])', 1), ('([1:/android/server/wm/CrossAppDragAndDropTests.java]:[UID]:[1]:method_text:[result mismatch,"", expectedResult,                    results.get(resultKey));        }    }   ])', 1), ('([1:/android/app/cts/BadProviderTest.java]:[UID]:[1]:method_text:[p() {        mContext = InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([19:/android/app/cts/BadProviderTest.java]:[UID]:[19]:method_text:[               uidWatcher.finish();            }            worker.quitSafely();        }    }}])', 1), ('([2:/android/permission/cts/PermissionControllerTest.java]:[UID]:[2]:method_text:[ions as permissionInfos        assertThat(numRuntimeGranted).isAtLeast(numInfosGranted);    }   ])', 1), ('([8:/android/media/cts/AudioRecordTest.java]:[UID]:[8]:method_text:[lease();            }            resetMyUidState(packageName, currentUserId);        }    }   ])', 1), ('([6:/android/media/cts/AudioRecordTest.java]:[UID]:[6]:method_text:[nstrumentation().getTargetContext();    }    /*     * Microphone Direction API tests     */   ])', 1), ('([11:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[11]:method_text:[ * Test basic state changes as processes go up and down due to services running in them.     */   ])', 1), ('([72:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[72]:method_text:[vents idle services from running but allows     * whitelisted apps to bypass the check.     */   ])', 1), ('([62:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[62]:method_text:[nd: first     * allowing a service to be started, then stopped by the system when idle.     */   ])', 1), ('([58:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[58]:method_text:[t allow services to be started from broadcasts except when in     * the correct states.     */   ])', 1), ('([66:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[66]:method_text:[/**     * Test that background check does allow services to be started from activities.     */   ])', 1), ('([34:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[34]:method_text:[   /**     * Test that the foreground service app op does prevent the foreground state.     */   ])', 1), ('([66:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[66]:method_text:[ound services demoted to     * ordinary service state when it is no longer the top app.     */   ])', 1), ('([14:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[14]:method_text:[* Test that a single ""can\'t save state"" app has the proper process management semantics.     */   ])', 1), ('([64:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[64]:method_text:[ /**     * Test that switching between two ""can\'t save state"" apps is handled properly.     */   ])', 1), ('([83:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[83]:method_text:[ound service,     * app should go back to cached state.     *     * @throws Exception     */   ])', 1), ('([25:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[25]:method_text:[ound     * service, app should go back to cached state.     *     * @throws Exception     */   ])', 1), ('([39:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[39]:method_text:[ound     * service, app should go back to cached state.     *     * @throws Exception     */   ])', 1), ('([36:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[36]:method_text:[ROUND_LOCATION can not be passed from     * client to service.     * @throws Exception     */   ])', 1), ('([12:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[12]:method_text:[g.     * Bound app should be TOP w/flag and BTOP without flag.     * @throws Exception     */   ])', 1), ('([4:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[4]:method_text:[tivity(STUB_PACKAGE_NAME, activityClass, null);        return monitor.waitForActivity();    }   ])', 1), ('([44:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[44]:method_text:[       if (activity != null) {                activity.finish();            }        }    }   ])', 1), ('([48:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[48]:method_text:[    /**     * Test FGS compatibility with START_STICKY flag.     * @throws Exception     */   ])', 1), ('([4:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[4]:method_text:[     * Test FGS compatibility with START_REDELIVER_INTENT flag.     * @throws Exception     */   ])', 1), ('([4:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[4]:method_text:[  /**     * Test FGS compatibility with START_NOT_STICKY flag.     * @throws Exception     */   ])', 1), ('([8:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[8]:method_text:["");                    } catch (Exception e) {                    }                });    }   ])', 1), ('([20:/android/app/cts/ActivityManagerProcessStateTest.java]:[UID]:[20]:method_text:[rtActivitySync(intent);        mInstrumentation.waitForIdleSync();        return activity;    }}])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[UID]:[1]:method_text:[CE_SEC = 2;    private static final long TIMEOUT_WAIT_FOR_IDLE_MS = 2_000;    // TODO: Make it a])', 1), ('([33:/com/android/cts/blob/BlobStoreManagerTest.java]:[UID]:[33]:method_text:[(0L,                afterStatsForUid.getDataBytes() - beforeStatsForUid.getDataBytes());    }   ])', 1), ('([29:/com/android/cts/blob/BlobStoreManagerTest.java]:[UID]:[29]:method_text:[id.getDataBytes());        } finally {            serviceConnection.unbind();        }    }   ])', 1), ('([26:/com/android/cts/blob/BlobStoreManagerTest.java]:[UID]:[26]:method_text:[atsForUid.getDataBytes() - beforeStatsForUid.getDataBytes());        blobData.delete();    }   ])', 1), ('([2:/android/os/cts/PowerManagerTests.java]:[UID]:[2]:method_text:[e, ""mailto:""));        mDevice.executeShellCommand(String.format(viewUriTemplate, ""tel:""));    }}])', 1), ('([1:/android/hardware/cts/SensorTest.java]:[UID]:[1]:method_text:[  */    // TODO: remove when parametrized tests are supported and EventTimestampSynchronization   ])', 1), ('([4:/android/hardware/cts/SensorTest.java]:[UID]:[4]:method_text:[ed and EventTimestampSynchronization    //       verification is added to default verifications   ])', 1), ('([2:/android/hardware/cts/SensorTest.java]:[UID]:[2]:method_text:[   */    // TODO: remove when parametized tests are supported and EventTimestampSynchronization   ])', 1), ('([1:/android/hardware/cts/SensorTest.java]:[UID]:[1]:method_text:[    /**     * Verifies that sensor events arrive in the given message queue (Handler).     */   ])', 1), ('([8:/android/cts/statsdatom/binderstats/BinderStatsTests.java]:[UID]:[8]:method_text:[ugInAc() throws Exception {        getDevice().executeShellCommand(""cmd battery set ac 1"");    }}])', 1), ('([1:/android/server/wm/WindowTest.java]:[UID]:[1]:method_text:[      @Override        public int getNavigationBarColor() {            return 0;        }    }}])', 1), ('([1:/android/mediaprovidertranscode/cts/TranscodeTest.java]:[UID]:[1]:method_text:[   * Tests that we return FD of transcoded file for legacy apps     * @throws Exception     */   ])', 1), ('([1:/android/mediaprovidertranscode/cts/TranscodeTest.java]:[UID]:[1]:method_text:[ passes the mediaCapabilitiesUid of a     * legacy app that cannot handle an HEVC file.     */   ])', 1), ('([14:/android/mediaprovidertranscode/cts/TranscodeTest.java]:[UID]:[14]:method_text:[app passes the mediaCapabilitiesUid     * of a modern app that can handle an HEVC file.     */   ])', 1), ('([13:/android/mediaprovidertranscode/cts/TranscodeTest.java]:[UID]:[13]:method_text:[     * {@link MediaStore#getOriginalMediaFormatFileDescriptor}.     * @throws Exception     */   ])', 1), ('([6:/android/mediaprovidertranscode/cts/TranscodeTest.java]:[UID]:[6]:method_text:[se(isAppIoBlocked(sm, uuid));        } finally {            modernFile.delete();        }    }}])', 1), ('([1:/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java]:[UID]:[1]:method_text:[e test-only owner     * have the same UID, so we can call clearXxX() from this package.     */   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[UID]:[1]:method_text:[e != null && mOutFile.exists()) {            mOutFile.delete();        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[UID]:[1]:method_text:[        void release() {            mVis.release();            mVc.release();        }    }   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[UID]:[1]:method_text:[reseting, the video should continue playing     * from the time setDisplay() was called     */   ])', 1), ('([1:/android/media/cts/LoudnessEnhancerTest.java]:[UID]:[1]:method_text:[ctor    //----------------------------------    //Test case 0.0: test constructor and release   ])', 1), ('([2:/android/media/cts/LoudnessEnhancerTest.java]:[UID]:[2]:method_text:[r() {        if (mLE != null) {            mLE.release();            mLE = null;        }    }])', 1), ('([4:/com/android/cts/packagemanager/stats/host/PackageInstallerV2StatsTests.java]:[UID]:[4]:method_text:[t.getUid() != 0);        assertEquals(getAppUid(TEST_INSTALL_PACKAGE), report.getUid());    }   ])', 1), ('([4:/com/android/cts/packagemanager/stats/host/PackageInstallerV2StatsTests.java]:[UID]:[4]:method_text:[         }        }        assertEquals(1, reports.size());        return reports.get(0);    }}])', 1), ('([9:/android/packageinstaller/tapjacking/cts/TapjackingTest.java]:[UID]:[9]:method_text:[ame, id);        return mUiDevice.wait(Until.findObject(selector), WAIT_FOR_UI_TIMEOUT);    }   ])', 1), ('([3:/android/packageinstaller/tapjacking/cts/TapjackingTest.java]:[UID]:[3]:method_text:[           }                    base.evaluate();                }            };        }    }}])', 1), ('([3:/android/slice/cts/SlicePermissionsTest.java]:[UID]:[3]:method_text:[       return;        }        mSliceManager.revokeSlicePermission(mTestPkg, BASE_URI);    }   ])', 1), ('([2:/android/slice/cts/SlicePermissionsTest.java]:[UID]:[2]:method_text:[ANTED,                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));    }   ])', 1), ('([2:/android/slice/cts/SlicePermissionsTest.java]:[UID]:[2]:method_text:[ON_GRANTED,                mSliceManager.checkSlicePermission(uri, mTestPid, mTestUid));    }   ])', 1), ('([5:/android/slice/cts/SlicePermissionsTest.java]:[UID]:[5]:method_text:[ANTED,                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));    }   ])', 1), ('([2:/android/slice/cts/SlicePermissionsTest.java]:[UID]:[2]:method_text:[ENIED,                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));    }   ])', 1), ('([3:/android/slice/cts/SlicePermissionsTest.java]:[UID]:[3]:method_text:[ENIED,                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));    }   ])', 1), ('([3:/android/slice/cts/SlicePermissionsTest.java]:[UID]:[3]:method_text:[ION_DENIED,                mSliceManager.checkSlicePermission(uri, mTestPid, mTestUid));    }   ])', 1), ('([3:/android/slice/cts/SlicePermissionsTest.java]:[UID]:[3]:method_text:[GRANTED,                mSliceManager.checkSlicePermission(BASE_URI, mTestPid, mTestUid));    }}])', 1), ('([3:/android/providerui/cts/MediaStoreUiTest.java]:[UID]:[3]:method_text:[FLAG_GRANT_WRITE_URI_PERMISSION);            }            mActivity.finish();        }    }   ])', 1), ('([1:/android/server/wm/PrereleaseSdkTest.java]:[UID]:[1]:method_text:[/ Ensure app process is stopped.        stopTestPackage(MAIN_ACTIVITY.getPackageName());    }   ])', 1), ('([1:/android/os/cts/EnvironmentHostTests.java]:[UID]:[1]:method_text:[et --uid android.cts.environment ""                + appOp + (val ? "" allow"" : "" deny""));    }   ])', 1), ('([3:/android/sharesheet/cts/CtsSharesheetDeviceTest.java]:[UID]:[3]:method_text:[    * total run time low, jam as many tests are possible into each visible test portion.     */   ])', 1), ('([1:/android/cts/statsdatom/bluetooth/BluetoothStatsTests.java]:[UID]:[1]:method_text:[ectedWait,                atom -> atom.getBleScanStateChanged().getState().getNumber());    }   ])', 1), ('([1:/android/cts/statsdatom/bluetooth/BluetoothStatsTests.java]:[UID]:[1]:method_text:[t(a1.getIsFirstMatch()).isFalse();        assertThat(a1.getIsOpportunistic()).isFalse();    }   ])', 1), ('([1:/android/cts/statsdatom/bluetooth/BluetoothStatsTests.java]:[UID]:[1]:method_text:[at(a1.getIsFirstMatch()).isFalse();        assertThat(a1.getIsOpportunistic()).isTrue();    }   ])', 1), ('([1:/android/cts/statsdatom/bluetooth/BluetoothStatsTests.java]:[UID]:[1]:method_text:[).getAtom().getBleScanResultReceived();        assertThat(a0.getNumResults()).isAtLeast(1);    }}])', 1), ('([2:/android/server/wm/StartActivityTests.java]:[UID]:[2]:method_text:[ * activity because the caller C in different uid cannot launch a non-exported activity.     */   ])', 1), ('([2:/android/server/wm/StartActivityTests.java]:[UID]:[2]:method_text:[start A2 (with NEW_TASK) and A3, the     * result should be 2 tasks: [A1] and [A2, A3].     */   ])', 1), ('([1:/android/server/wm/StartActivityTests.java]:[UID]:[1]:method_text:[@link Activity#startActivities} to start B1 and     * A2, the result should be 3 tasks.     */   ])', 1), ('([3:/android/server/wm/StartActivityTests.java]:[UID]:[3]:method_text:[ons#setTaskOverlay should remain on top of the     * task after start another activity.     */   ])', 1), ('([2:/android/media/cts/MediaSessionManagerTest.java]:[UID]:[2]:method_text:[       public void execute(Runnable command) {            mHandler.post(command);        }    }}])', 1), ('([6:/android/content/cts/ClipDescriptionTest.java]:[UID]:[6]:method_text:[        mUiDevice.wakeUp();        launchActivity(MockActivity.class);    }    @UiThreadTest   ])', 1), ('([1:/android/content/cts/ClipDescriptionTest.java]:[UID]:[1]:method_text:[ity(intent);        mUiDevice.wait(Until.hasObject(By.pkg(clazz.getPackageName())), 15000);    }}])', 1), (""([1:/android/media/session/cts/MediaSessionManagerTest.java]:[UID]:[1]:method_text:[rMediaControl(userInfo));    }    /**     * Tests if this application isn't trusted.     */   ])"", 1), ('([1:/android/media/session/cts/MediaSessionManagerTest.java]:[UID]:[1]:method_text:[Tests adding/removing {@link MediaSessionManager.OnMediaKeyEventSessionChangedListener}.     */   ])', 1), ('([1:/com/android/cts/intent/sender/SuspendPackageTest.java]:[UID]:[1]:method_text:[ temporarilySkipActivityLaunch() {        return UserManager.isHeadlessSystemUserMode();    }   ])', 1), ('([4:/com/android/cts/intent/sender/SuspendPackageTest.java]:[UID]:[4]:method_text:[s(settingsPackageName + "":id/admin_support_icon"")                .pkg(settingsPackageName);    }}])', 1), ('([1:/android/os/cts/BuildTest.java]:[UID]:[1]:method_text:[ile(""^([0-9A-Za-z._-]+)$"");    /** Tests that check for valid values of constants in Build. */   ])', 1), ('([2:/android/view/textclassifier/cts/TextViewIntegrationTest.java]:[UID]:[2]:method_text:[      TRANSITION_ANIMATION_SCALE, sOriginalTransitionAnimationDurationScale);        });    }   ])', 1), ('([9:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[UID]:[9]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([1:/android/permission/cts/NoBroadcastPackageRemovedPermissionTest.java]:[UID]:[1]:method_text:[:     *   {@link android.Manifest.permission#BROADCAST_PACKAGE_REMOVED}.     */    @SmallTest   ])', 1), ('([3:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[UID]:[3]:method_text:[e file and the boolean     * values are received as parameters from the host side test.     */   ])', 1), ('([24:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[UID]:[24]:method_text:[2*i + 1), 16));            }            return InetAddress.getByAddress(retval);        }    }}])', 1), ('([1:/android/security/cts/IntentSenderRemovalTest.java]:[UID]:[1]:method_text:[he DebugIntentSender activity in Settings has been removed     * and cannot be invoked.     */   ])', 1), ('([1:/com/android/cts/delegate/SecurityLoggingDelegateTest.java]:[UID]:[1]:method_text:[        DelegateTestUtils.DelegatedLogsReceiver.sBatchCountDown = new CountDownLatch(1);    }   ])', 1), ('([6:/com/android/cts/delegate/SecurityLoggingDelegateTest.java]:[UID]:[6]:method_text:[ng security logs should be rate limited - subsequent attempts should return     * null.     */   ])', 1), ('([6:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[UID]:[6]:method_text:[    @After    public void tearDown() throws Exception {        mUiDevice.pressHome();    }   ])', 1), ('([2:/android/cts/statsdatom/net/BytesTransferredTest.java]:[UID]:[2]:method_text:[   data.getRxPackets(), data.getTxPackets(), data.getUid());                }        );    }   ])', 1), ('([2:/android/cts/statsdatom/net/BytesTransferredTest.java]:[UID]:[2]:method_text:[    );    }    // TODO(b/157651730): Determine how to test tag and metered state within atom.   ])', 1), ('([24:/android/cts/statsdatom/net/BytesTransferredTest.java]:[UID]:[24]:method_text:[tings put global netstats_combine_subtype_enabled ""                + (enable ? ""1"" : ""0""));    }}])', 1), ('([4:/android/permission/cts/OneTimePermissionTest.java]:[UID]:[4]:method_text:[ions_timeout_millis"",                        mOldOneTimePermissionTimeoutValue, false));    }   ])', 1), ('([1:/android/permission/cts/OneTimePermissionTest.java]:[UID]:[1]:method_text:[         ""one_time_permissions_killed_delay_millis"", 5000L)));        assertDenied(500);    }   ])', 1), ('([17:/android/permission/cts/OneTimePermissionTest.java]:[UID]:[17]:method_text:[               mActivityManager.removeOnUidImportanceListener(this);            }        }    }}])', 1), ('([6:/android/jobscheduler/cts/ExpeditedJobTest.java]:[UID]:[6]:method_text:[ption {        mTestAppInterface.cleanup();        AppOpsUtils.reset(TEST_APP_PACKAGE);    }   ])', 1), ('([4:/android/jobscheduler/cts/ExpeditedJobTest.java]:[UID]:[4]:method_text:[              + "" -u "" + UserHandle.myUserId() + "" "" + TEST_APP_PACKAGE + "" "" + mTestJobId);    }}])', 1), ('([8:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[8]:method_text:[ity(clazz);        }    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[1]:method_text:[ime, mTargetPackage);    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[1]:method_text:[          }        }    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[1]:method_text:[UiDevice::pressBack);    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([2:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[2]:method_text:[t(2).getEventType());    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[1]:method_text:[getAppLaunchCount());    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([2:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[2]:method_text:[UiDevice.pressBack();    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[1]:method_text:[t apps    @AppModeFull(reason = ""Test APK Activity not found when installed as an instant app"")   ])', 1), ('([3:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[3]:method_text:[        mUiDevice.wakeUp();            executeShellCmd(""wm dismiss-keyguard"");        }    }   ])', 1), ('([2:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[2]:method_text:[Time, totalTimeUsed);    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[1]:method_text:[me in usage events"");    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([2:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[2]:method_text:[kage, true, TIMEOUT);    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([3:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[3]:method_text:[IMEOUT);        assertAppOrTokenUsed(TEST_APP2_PKG, false, TIMEOUT);    }    @AppModeInstant   ])', 1), ('([2:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[2]:method_text:[ty stops"", 2, stops);    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([3:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[3]:method_text:[ty stops"", 1, stops);    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([2:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[2]:method_text:[ty stops"", 0, stops);    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([3:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[3]:method_text:[t(0).getEventType());    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([5:/android/app/usage/cts/UsageStatsTest.java]:[UID]:[5]:method_text:[        } catch(Exception e) {                return true;            }        }, false);    }}])', 1), (""([8:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[UID]:[8]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ])"", 1), ('([1:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[UID]:[1]:method_text:[retrieveSoftApBackupData()} &     * {@link WifiManager#restoreSoftApBackupData(byte[])}     */   ])', 1), ('([4:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[UID]:[4]:method_text:[_ID)        public int getUnannotatedId() {            return mUnannotatedId;        }    }   ])', 1), ('([3:/android/processor/view/inspector/cts/PlatformInspectableProcessorTest.java]:[UID]:[3]:method_text:[defghijklmnopqrstuvwxyz"";        return alphabet.charAt(random.nextInt(alphabet.length()));    }}])', 1), ('([4:/android/permission/cts/SplitPermissionTest.java]:[UID]:[4]:method_text:[ after the split should <u>not</u> have been added implicitly the new     * permission.     */   ])', 1), ('([1:/android/permission/cts/SplitPermissionTest.java]:[UID]:[1]:method_text:[mission should inherit the     * granted state.     *     * <p>App using a shared uid     */   ])', 1), ('([3:/android/permission/cts/SplitPermissionTest.java]:[UID]:[3]:method_text:[     * flags.     *     * <p>(Pre-M version of test)     */    @FlakyTest(bugId = 152580253)   ])', 1), ('([1:/android/telephony/cts/CarrierConfigManagerTest.java]:[UID]:[1]:method_text:[E_BOOL.startsWith(                                CarrierConfigManager.Gps.KEY_PREFIX));    }   ])', 1), ('([2:/android/telephony/cts/CarrierConfigManagerTest.java]:[UID]:[2]:method_text:[l();        }        config = mConfigManager.getConfig();        checkConfig(config);    }   ])', 1), ('([4:/android/alarmmanager/cts/AppStandbyTests.java]:[UID]:[4]:method_text:[  assertTrue(""Alarm exceeding quota not delivered after expected delay"", waitForAlarm());    }   ])', 1), ('([1:/android/alarmmanager/cts/AppStandbyTests.java]:[UID]:[1]:method_text:[     return 0;            }            return mHistory.get(mHistory.size() - x);        }    }}])', 1), ('([4:/android/server/wm/AlertWindowsImportanceTests.java]:[UID]:[4]:method_text:[guration.UI_MODE_TYPE_VR_HEADSET) {            return true;        }        return false;    }}])', 1), ('([1:/android/security/cts/EffectBundleTest.java]:[UID]:[1]:method_text:[int intSize = 4;    //Testing security bug: 32436341    @AsbSecurityTest(cveBugId = 32436341)   ])', 1), ('([2:/android/security/cts/EffectBundleTest.java]:[UID]:[2]:method_text:[_PARAM_TYPE = 0;    //Testing security bug: 63526567    @AsbSecurityTest(cveBugId = 63526567)   ])', 1), ('([7:/android/security/cts/EffectBundleTest.java]:[UID]:[7]:method_text:[rraycopy(a, 0, b, offs, a.length);            offs += a.length;        }        return b;    }}])', 1), ('([1:/com/android/cts/packagemanager/stats/host/InstalledIncrementalPackageStatsTests.java]:[UID]:[1]:method_text:[    // Install 2 incremental packages and check if their UIDs are included in the pulled metrics   ])', 1), ('([8:/com/android/cts/packagemanager/stats/host/InstalledIncrementalPackageStatsTests.java]:[UID]:[8]:method_text:[ALL_PACKAGE)));        assertTrue(uidsReported.contains(getAppUid(TEST_INSTALL_PACKAGE2)));    }}])', 1), ('([1:/android/appsearch/app/a/AppSearchStorageAugmenterDeviceTest.java]:[UID]:[1]:method_text:[nner.RunWith;@RunWith(AndroidJUnit4.class)public class AppSearchStorageAugmenterDeviceTest {   ])', 1), ('([8:/android/appsearch/app/a/AppSearchStorageAugmenterDeviceTest.java]:[UID]:[8]:method_text:[aBytes()).isGreaterThan(0);        assertThat(statsForUid.getDataBytes()).isGreaterThan(0);    }}])', 1), ('([1:/android/mediadrm/cts/MediaPlayerDrmTest.java]:[UID]:[1]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[UID]:[1]:method_text:[mContentResolver = mContext.getContentResolver();        mUserId = mContext.getUserId();    }   ])', 1), ('([2:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[UID]:[2]:method_text:[ure(String feature) {        return mContext.getPackageManager().hasSystemFeature(feature);    }}])', 1), ('([1:/com/android/server/cts/PowerIncidentTest.java]:[UID]:[1]:method_text:[s PowerIncidentTest extends ProtoDumpTestCase {    private static final int SYSTEM_UID = 1000;   ])', 1), ('([14:/com/android/server/cts/PowerIncidentTest.java]:[UID]:[14]:method_text:[           assertTrue(0 <= wl.getUid());            assertTrue(0 <= wl.getPid());        }    }}])', 1), ('([9:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[UID]:[9]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([2:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[UID]:[2]:method_text:[DEO};    /**     * This method needs to be called once before running the whole test.     */   ])', 1), ('([5:/android/media/cts/AudioRecordingConfigurationTest.java]:[UID]:[5]:method_text:[       fail(""Exception thrown during reflection on config privileged fields"" + e);        }    }}])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[UID]:[1]:method_text:[ }    /**     * Verify that data written by {@link #testDataWrite()} is still intact.     */   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[UID]:[1]:method_text:[ose();        }    }    /**     * Verify that app is installed on internal storage.     */   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[UID]:[1]:method_text:[;        writeString(new File(getContext().getExternalFilesDir(null), ""my_ext""), token);    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[UID]:[1]:method_text:[_ext"")));    }    /**     * Verify shared storage behavior when on internal storage.     */   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofDetectionTest.java]:[UID]:[1]:method_text:[e mismatch"",                () -> runWithCaller(callerContext, () -> r.run())        );    }   ])', 1), ('([7:/android/mediadrm/cts/MediaDrmExtractorTest.java]:[UID]:[7]:method_text:[urce ds = getDataSourceFor(res);        mExtractor.setDataSource(ds);        return ds;    }   ])', 1), ('([6:/android/mediadrm/cts/MediaDrmExtractorTest.java]:[UID]:[6]:method_text:[;        assertEquals(drmInitData.get(UUID_PLAYREADY), drmInitData.getSchemeInitDataAt(1));    }}])', 1), (""([5:/android/jobscheduler/cts/shareduidtests/SharedUidTest.java]:[UID]:[5]:method_text:[ackage wouldn't cancel the jobs from other packages that use     * the same shared UID.     */   ])"", 1), ('([1:/android/jobscheduler/cts/shareduidtests/SharedUidTest.java]:[UID]:[1]:method_text:[eled"", js.getPendingJob(JOBID));        } finally {            js.cancel(JOBID);        }    }}])', 1), ('([2:/com/android/cts/tv/TvInputManagerServiceHostTest.java]:[UID]:[2]:method_text:[(mFeature));                    base.evaluate();                }            };        }    }}])', 1), ('([2:/com/android/server/cts/ActivityManagerIncidentTest.java]:[UID]:[2]:method_text:[ic final int SYSTEM_UID = 1000;    /**     * Tests activity manager dumps broadcasts.     */   ])', 1), ('([23:/com/android/server/cts/ActivityManagerIncidentTest.java]:[UID]:[23]:method_text:[t : attp.getPackageTimesList()) {            assertTrue(pt.getDurationMs() >= 0);        }    }}])', 1), ('([3:/android/server/wm/SurfaceControlViewHostTests.java]:[UID]:[3]:method_text:[oid surfaceChanged(SurfaceHolder holder, int format, int width,            int height) {    }   ])', 1), ('([3:/android/alarmmanager/cts/BasicApiTests.java]:[UID]:[3]:method_text:[ver::isAlarmed,                ""Exact alarm with work source did not fire as expected"");    }   ])', 1), ('([4:/android/contentcaptureservice/cts/WhitelistTest.java]:[UID]:[4]:method_text:[stance(InstrumentationRegistry.getInstrumentation());    @Ignore(""will be whitelisted \'lite\'"")   ])', 1), ('([1:/android/contentcaptureservice/cts/WhitelistTest.java]:[UID]:[1]:method_text:[   mUiDevice.waitForIdle();        assertContentCaptureManagerAvailable(service, true);    }   ])', 1), ('([1:/android/server/wm/KeyguardLockedTests.java]:[UID]:[1]:method_text:[tUp() throws Exception {        super.setUp();        assumeTrue(supportsSecureLock());    }   ])', 1), ('([3:/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java]:[UID]:[3]:method_text:[ @After    public void pressHome() throws RemoteException {        mDevice.pressHome();    }   ])', 1), ('([2:/android/permission/cts/NearbyDevicesRenouncePermissionTest.java]:[UID]:[2]:method_text:[              + "" com.android.bluetooth/.btservice.AdapterService set-test-mode disabled"");    }}])', 1), ('([3:/android/app/people/cts/PeopleManagerTest.java]:[UID]:[3]:method_text:[  )                .setSmallIcon(android.R.drawable.sym_def_app_icon);        return nb;    }   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[UID]:[5]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([19:/android/net/wifi/cts/WifiManagerTest.java]:[UID]:[19]:method_text:[unctionality.  The permission is intended to be granted to only the device setup wizard.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[UID]:[8]:method_text:[een turns off while wifi is disabled     * but location is on.     * @throws Exception     */   ])', 1), ('([2:/android/media/cts/MediaMetricsTest.java]:[UID]:[2]:method_text:[s tests MediaMetrics item buffer expansion when the initial buffer capacity is set to 1.     */   ])', 1), ('([6:/android/media/cts/MediaMetricsTest.java]:[UID]:[6]:method_text:[BUNDLE_UID));        assertEquals(12, bundle3.getLong(MediaMetrics.Item.BUNDLE_TIMESTAMP));    }}])', 1), ('([3:/com/android/cts/storageapp/StorageTest.java]:[UID]:[3]:method_text:[se {    private Context getContext() {        return getInstrumentation().getContext();    }   ])', 1), ('([1:/com/android/cts/storageapp/StorageTest.java]:[UID]:[1]:method_text:[lse {            fail(""Skipping full disk test due to missing quota support"");        }    }   ])', 1), ('([6:/com/android/cts/storageapp/StorageTest.java]:[UID]:[6]:method_text:[(new UiSelector().text(""OK"")).click();    }    /**     * Measure ourselves manually.     */   ])', 1), ('([17:/com/android/cts/storageapp/StorageTest.java]:[UID]:[17]:method_text:[      fail(""Unexpected access"");        } catch (SecurityException expected) {        }    }   ])', 1), ('([1:/com/android/cts/storageapp/StorageTest.java]:[UID]:[1]:method_text:[;        assertTrue(""Apps must have at least 10MB quota"", cacheSize > 10 * MB_IN_BYTES);    }   ])', 1), ('([9:/com/android/cts/storageapp/StorageTest.java]:[UID]:[9]:method_text:[), 1 * MB_IN_BYTES);        }        assertEquals(1 * MB_IN_BYTES, filesFile.length());    }   ])', 1), ('([1:/android/appsecurity/cts/AdoptableHostTest.java]:[UID]:[1]:method_text:[ts(PKG, CLASS, ""testNative"");        } finally {            cleanUp(diskId);        }    }   ])', 1), ('([4:/android/appsecurity/cts/AdoptableHostTest.java]:[UID]:[4]:method_text:[ that we can install both new and inherited packages directly on     * adopted volumes.     */   ])', 1), ('([2:/android/appsecurity/cts/AdoptableHostTest.java]:[UID]:[2]:method_text:[ when changes occur while adopted device is ejected and     * returned at a later time.     */   ])', 1), ('([4:/android/appsecurity/cts/AdoptableHostTest.java]:[UID]:[4]:method_text:[super(getDevice(), getBuild(), getAbi());            addArg(""--force-queryable"");        }    }}])', 1), ('([1:/android/content/cts/IntentTest.java]:[UID]:[1]:method_text:[ Serializable {        static final long serialVersionUID = 1l;        public String Name;    }}])', 1), (""([1:/com/android/cts/appwithdata/CreatePrivateDataTest.java]:[UID]:[1]:method_text:[ta does not exist.     * Used to check that uninstall of an app deletes the app's data.     */   ])"", 1), ('([1:/com/android/tests/silentupdate/SilentUpdateTests.java]:[UID]:[1]:method_text:[ext();    }    @After    public void tearDown() {        resetSilentUpdatesPolicy();    }   ])', 1), ('([2:/com/android/tests/silentupdate/SilentUpdateTests.java]:[UID]:[2]:method_text:[tent getResult() throws InterruptedException {            return mResults.take();        }    }}])', 1), ('([1:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[UID]:[1]:method_text:[f the caller isn\'t permitted."");        } catch (SecurityException expected) {        }    }   ])', 1), ('([1:/android/media/cts/MediaExtractorTest.java]:[UID]:[1]:method_text:[cted IOException."");        } catch (IOException e) {            // Expected.        }    }   ])', 1), ('([1:/android/os/storage/cts/StorageManagerTest.java]:[UID]:[1]:method_text:[TORAGE_SERVICE);    }    @AppModeFull(reason = ""Instant apps cannot access external storage"")   ])', 1), ('([14:/android/os/storage/cts/StorageManagerTest.java]:[UID]:[14]:method_text:[cle();        }    }    @AppModeFull(reason = ""Instant apps cannot access external storage"")   ])', 1), ('([6:/android/os/storage/cts/StorageManagerTest.java]:[UID]:[6]:method_text:[ected UUID "" + uuid + "" for "" + file);        } catch (IOException expected) {        }    }   ])', 1), ('([7:/android/os/storage/cts/StorageManagerTest.java]:[UID]:[7]:method_text:[File(""/proc/""));    }    @AppModeFull(reason = ""Instant apps cannot access external storage"")   ])', 1), ('([10:/android/os/storage/cts/StorageManagerTest.java]:[UID]:[10]:method_text:[e(""/sdcard/"")));    }    @AppModeFull(reason = ""Instant apps cannot access external storage"")   ])', 1), ('([6:/android/os/storage/cts/StorageManagerTest.java]:[UID]:[6]:method_text:[    }    @AppModeFull(reason = ""Instant apps cannot hold MANAGE_EXTERNAL_STORAGE permission"")   ])', 1), ('([1:/android/bluetooth/cts/BasicAdapterTest.java]:[UID]:[1]:method_text:[eChanged = mAdapterNameChangedlock.newCondition();        mIsAdapterNameChanged = false;    }   ])', 1), ('([2:/android/bluetooth/cts/BasicAdapterTest.java]:[UID]:[2]:method_text:[                mAdapterNameChangedlock.unlock();                }            }        }    };}])', 1), ('([1:/android/uidisolation/cts/IsolatedServiceTest.java]:[UID]:[1]:method_text:[ror: No success status available."", success);        assertTrue(success.booleanValue());    }   ])', 1), ('([3:/android/provider/cts/SettingsPanelTest.java]:[UID]:[3]:method_text:[ect(By.pkg(mLauncherPackage).depth(0)), TIMEOUT);    }    // Check correct package is opened   ])', 1), ('([2:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[UID]:[2]:method_text:[put.contains(""SecurityException""));    }    // Test the bluetooth API from a managed profile.   ])', 1)]"	""	""	"[('UID', 241)]"	"[('[android.media.cts.NativeDecoderTest SKIP_testExtractor CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testPssh CtsMediaTestCases]', 1), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testSecondaryWalkingUpTreeReadWrite None]', 1), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testSecondaryMountPoints None]', 1), ('[android.bluetooth.cts.ScanFilterTest testsetServiceUuidFilter CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanFilterTest testsetServiceSolicitationUuidFilter CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanFilterTest testsetServiceDataFilter CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanFilterTest testReadWriteParcel CtsBluetoothTestCases]', 1), ('[android.app.usage.cts.CacheQuotaHintTest testCacheQuotaHintBuilder CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.CacheQuotaHintTest testCacheQuotaHintBuilderFromCacheQuotaHint CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.CacheQuotaHintTest testCacheQuotaHintParcelizeDeparcelize CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testUsageReportingMissingStop CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testMultipleTokenMissingStop CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testSplitscreenSameTokenTwoMissedStop CtsUsageStatsTestCases]', 1), ('[android.scopedstorage.cts.host.ScopedStorageCoreHostTest testAccess_directory None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testStateOfSensorsRelatedPermissionsCannotBeRead CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testKeyManagement CtsDevicePolicyManagerTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testQuery CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetInfo CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testCheckSignaturesMatch_byUid CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testCheckSignaturesNoMatch_byUid CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetNamesForUids_null CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetNamesForUids_empty CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetNamesForUids_valid CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerTest testGetPackageUid CtsContentTestCases]', 1), ('[android.os.cts.WorkSourceTest testAddWsUnordered None]', 1), ('[android.os.cts.WorkSourceTest testCombineMultiSomeSameUidsNames None]', 1), ('[android.os.cts.WorkSourceTest testWithoutNames None]', 1), ('[android.binder.cts.JavaClientTest testCallingInfo CtsNdkBinderTestCases]', 1), ('[android.hardware.camera2.cts.IdleUidTest testCameraAccessForIdleUid CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.IdleUidTest testCameraAccessBecomingInactiveUid CtsCameraTestCases]', 1), ('[android.media.cts.MediaCodecTest testCryptoInfoPattern CtsMediaTestCases]', 1), ('[android.server.wm.CrossAppDragAndDropTests uptimeMillis CtsWindowManagerDeviceTestCases]', 1), ('[android.app.cts.BadProviderTest testExitOnCreate CtsAppTestCases]', 1), ('[android.permission.cts.PermissionControllerTest OnRevokeRuntimePermissionsCallback CtsPermissionTestCases]', 1), ('[android.media.cts.AudioRecordTest testRecordNoDataForIdleUids CtsMediaTestCases]', 1), ('[android.media.cts.AudioRecordTest testGetActiveRecordingConfiguration CtsMediaTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest removeTestAppFromWhitelists CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testUidImportanceListener CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckService CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckStopsService CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckBroadcastService CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckActivityService CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testForegroundServiceAppOp CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBgRestrictedForegroundService CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCantSaveStateLaunchAndBackground CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCantSaveStateLaunchAndSwitch CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCycleFgs CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCycleFgsTriangle CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCycleFgsTriangleBiDi CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testFgsLocationBind CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testTopBind CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCycleTop CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCycleFgAppAndAlert CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testFgsSticky1 CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testFgsSticky2 CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testFgsSticky3 CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testForegroundService_malformedNotificationExtras CtsAppTestCases]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttributedToSelf CtsBlobStoreTestCases]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_acquireLease CtsBlobStoreTestCases]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_withExpiredLease CtsBlobStoreTestCases]', 1), ('[android.os.cts.PowerManagerTests testCachedProcessReleasesWakeLock CtsOsHostTestCases]', 1), ('[android.hardware.cts.SensorTest testRegisterTwiceWithSameSensor CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorTest testSanitizedContinuousEventsUidIdle CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorTest testBatchAndFlush CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorTest testBatchAndFlushUidIdle CtsSensorTestCases]', 1), ('[android.cts.statsdatom.binderstats.BinderStatsTests testBinderStats CtsStatsdAtomHostTestCases]', 1), ('[android.server.wm.WindowTest testSetLocalFocus CtsWindowManagerDeviceTestCases]', 1), ('[android.mediaprovidertranscode.cts.TranscodeTest disableTranscodingForAllPackages None]', 1), ('[android.mediaprovidertranscode.cts.TranscodeTest testNoTranscodeTimeoutForSmallHevcVideos None]', 1), ('[android.mediaprovidertranscode.cts.TranscodeTest testOriginalCallingUid_modernAppPassLegacyAppUid None]', 1), ('[android.mediaprovidertranscode.cts.TranscodeTest testOriginalCallingUid_legacyAppPassModernAppUid None]', 1), ('[android.mediaprovidertranscode.cts.TranscodeTest test_IsAppIoBlocked None]', 1), ('[com.android.cts.devicepolicy.accountcheck.AccountCheckTest testAddCompatible None]', 1), ('[android.media.cts.MediaPlayerTest exists CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testPlayMidi CtsMediaTestCases]', 1), ('[android.media.cts.MediaPlayerTest testGapless3 CtsMediaTestCases]', 1), ('[android.media.cts.LoudnessEnhancerTest test3_0MeasureGainChange CtsMediaTestCases]', 1), ('[com.android.cts.packagemanager.stats.host.PackageInstallerV2StatsTests testPackageInstallerV2MetricsReported CtsPackageManagerStatsHostTestCases]', 1), ('[com.android.cts.packagemanager.stats.host.PackageInstallerV2StatsTests testPackageInstallerV2MetricsReportedForSplits CtsPackageManagerStatsHostTestCases]', 1), ('[android.packageinstaller.tapjacking.cts.TapjackingTest isScreenOn CtsPackageInstallerTapjackingTestCases]', 1), ('[android.packageinstaller.tapjacking.cts.TapjackingTest testTapsDroppedWhenObscured CtsPackageInstallerTapjackingTestCases]', 1), ('[android.slice.cts.SlicePermissionsTest testGrant CtsSliceTestCases]', 1), ('[android.slice.cts.SlicePermissionsTest testGrantParent CtsSliceTestCases]', 1), ('[android.slice.cts.SlicePermissionsTest testGrantParentExpands CtsSliceTestCases]', 1), ('[android.slice.cts.SlicePermissionsTest testGrantChild CtsSliceTestCases]', 1), ('[android.slice.cts.SlicePermissionsTest testRevoke CtsSliceTestCases]', 1), ('[android.slice.cts.SlicePermissionsTest testRevokeParent CtsSliceTestCases]', 1), ('[android.slice.cts.SlicePermissionsTest testRevokeChild CtsSliceTestCases]', 1), ('[android.providerui.cts.MediaStoreUiTest getPersistedUriPermissions CtsProviderUiTestCases]', 1), ('[android.cts.statsdatom.bluetooth.BluetoothStatsTests testBleScan CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.bluetooth.BluetoothStatsTests testBleUnoptimizedScan CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.bluetooth.BluetoothStatsTests testBleOpportunisticScan CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.bluetooth.BluetoothStatsTests testBleScanResult CtsStatsdAtomHostTestCases]', 1), ('[android.server.wm.StartActivityTests testLegacyStartActivityFromNonActivityContext CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.StartActivityTests testStartActivityByNavigateUpToFromDiffUid CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.StartActivityTests testNormalActivityCanNotSetActivityType CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.StartActivityTests testStartActivitiesWithDiffUidNotInSameTask CtsWindowManagerDeviceTestCases]', 1), ('[android.media.cts.MediaSessionManagerTest testCustomClassConfigValuesAreValid CtsMediaTestCases]', 1), ('[android.content.cts.ClipDescriptionTest testClassificationConfidenceValuesAreValid CtsContentTestCases]', 1), ('[android.media.session.cts.MediaSessionManagerTest testIsTrusted_returnsTrue None]', 1), ('[android.media.session.cts.MediaSessionManagerTest testIsTrusted_returnsFalse None]', 1), ('[com.android.cts.intent.sender.SuspendPackageTest isNotNull None]', 1), ('[com.android.cts.intent.sender.SuspendPackageTest testPackageSuspendedWithPackageManager None]', 1), ('[android.os.cts.BuildTest testCpuAbi_valuesMatchPermitted None]', 1), ('[android.view.textclassifier.cts.TextViewIntegrationTest workAroundNotificationShadeWindowIssue CtsTextClassifierTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isNotNull CtsWifiTestCases]', 1), ('[android.permission.cts.NoBroadcastPackageRemovedPermissionTest testSendOrRemoveStickyBroadcast CtsPermissionTestCases]', 1), ('[android.appsecurity.cts.listeningports.ListeningPortsTest testNoAccessibleListeningPorts None]', 1), ('[com.android.cts.delegate.SecurityLoggingDelegateTest testVerifyGeneratedLogs None]', 1), ('[android.cts.statsdatom.net.BytesTransferredTest testMobileBytesTransfer CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.net.BytesTransferredTest testMobileBytesTransferByFgBg CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.net.BytesTransferredTest testBytesTransferByTagAndMetered CtsStatsdAtomHostTestCases]', 1), ('[android.permission.cts.OneTimePermissionTest testPermissionRevokedOnKill CtsPermissionTestCases]', 1), ('[android.permission.cts.OneTimePermissionTest testStickyServiceMaintainsPermissionOnRestart CtsPermissionTestCases]', 1), ('[android.jobscheduler.cts.ExpeditedJobTest uptimeMillis CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.ExpeditedJobTest testJobUidState CtsJobSchedulerTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest isAppStandbyEnabled CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testLastTimeAnyComponentUsed_launchActivityShouldBeDetected CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testLastTimeAnyComponentUsed_bindServiceShouldBeDetected CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testLastTimeAnyComponentUsed_JobServiceShouldBeIgnored CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testOrderedActivityLaunchSequenceInEventLog CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testActivityOnBackButton CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testActivityOnHomeButton CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testAppLaunchCount CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testNotificationSeen CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testIsAppInactive CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testInteractiveEvents CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testForegroundService CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testTaskRootEventField CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testUsageSourceAttribution CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testTaskRootAttribution_finishingTaskRoot CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testInstantAppUsageEventsObfuscated CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testSuddenDestroy CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testPipActivity CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testPipActivity_StopToPause CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageStatsTest testLocusIdEventsVisibility CtsUsageStatsTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreBackupData CtsWifiTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testPublicField CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.processor.view.inspector.cts.PlatformInspectableProcessorTest testResourceId CtsViewInspectorAnnotationProcessorTestCases]', 1), ('[android.permission.cts.SplitPermissionTest isTrue CtsPermissionTestCases]', 1), ('[android.permission.cts.SplitPermissionTest inheritGrantedPermissionState CtsPermissionTestCases]', 1), ('[android.permission.cts.SplitPermissionTest inheritGrantedPermissionStateSharedUidApp CtsPermissionTestCases]', 1), ('[android.telephony.cts.CarrierConfigManagerTest isDataCapable CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CarrierConfigManagerTest testRevokePermission CtsTelephonyTestCases]', 1), ('[android.alarmmanager.cts.AppStandbyTests setUpTests CtsAlarmManagerTestCases]', 1), ('[android.alarmmanager.cts.AppStandbyTests testPowerWhitelistedAlarmNotBlocked CtsAlarmManagerTestCases]', 1), ('[android.server.wm.AlertWindowsImportanceTests testAlertWindowOomAdj CtsWindowManagerDeviceTestCases]', 1), ('[android.security.cts.EffectBundleTest testDownmix_setParameter CtsSecurityTestCases]', 1), ('[android.security.cts.EffectBundleTest testPresetReverb_setParameter CtsSecurityTestCases]', 1), ('[com.android.cts.packagemanager.stats.host.InstalledIncrementalPackageStatsTests testInstalledIncrementalMetricsReported CtsPackageManagerStatsHostTestCases]', 1), ('[android.appsearch.app.a.AppSearchStorageAugmenterDeviceTest testReadStorageInfo None]', 1), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaEscalation_RequestDelete_notShowConfirmDialog None]', 1), ('[com.android.server.cts.PowerIncidentTest testPowerServiceDump CtsIncidentHostTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported CtsWifiTestCases]', 1), ('[android.scopedstorage.cts.legacy.LegacyStorageTest testLegacySystemGalleryCanRenameImagesAndVideosWithoutDbUpdates None]', 1), ('[android.scopedstorage.cts.legacy.LegacyStorageTest testLegacySystemGalleryWithoutWESCannotRename None]', 1), ('[android.media.cts.AudioRecordingConfigurationTest testParcel CtsMediaTestCases]', 1), ('[com.android.cts.splitapp.SplitAppTest testDataWrite None]', 1), ('[com.android.cts.splitapp.SplitAppTest testDataRead None]', 1), ('[com.android.cts.splitapp.SplitAppTest testPrimaryDataWrite None]', 1), ('[com.android.cts.splitapp.SplitAppTest testPrimaryDataRead None]', 1), ('[android.mediadrm.cts.MediaDrmExtractorTest testGetDrmInitData CtsMediaDrmTestCases]', 1), ('[android.jobscheduler.cts.shareduidtests.SharedUidTest testCancelDisabledPackageJob CtsJobSchedulerSharedUidTestCases]', 1), ('[com.android.server.cts.ActivityManagerIncidentTest testDumpProcesses CtsIncidentHostTestCases]', 1), ('[android.server.wm.SurfaceControlViewHostTests getDisplay CtsWindowManagerDeviceTestCases]', 1), ('[android.alarmmanager.cts.BasicApiTests testSetExactWithWorkSource CtsAlarmManagerTestCases]', 1), ('[android.contentcaptureservice.cts.WhitelistTest ServiceTestRule CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.WhitelistTest testWhitelisted_byService_alreadyRunning CtsContentCaptureServiceTestCases]', 1), ('[android.permission.cts.NearbyDevicesRenouncePermissionTest enableTestMode CtsPermissionTestCases]', 1), ('[android.app.people.cts.PeopleManagerTest currentThreadTimeMillis CtsAppTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkSettingsPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testUpdateWifiUsabilityStatsScorePermission CtsWifiTestCases]', 1), ('[android.media.cts.MediaMetricsTest testBasicItem CtsMediaTestCases]', 1), ('[android.media.cts.MediaMetricsTest testBigItem CtsMediaTestCases]', 1), ('[com.android.cts.storageapp.StorageTest testFullDisk None]', 1), ('[com.android.cts.storageapp.StorageTest testClearSpace None]', 1), ('[com.android.cts.storageapp.StorageTest testVerifySpaceApi None]', 1), ('[com.android.cts.storageapp.StorageTest testVerifyQuotaApi None]', 1), ('[com.android.cts.storageapp.StorageTest testVerifyAllocateApi None]', 1), ('[android.appsecurity.cts.AdoptableHostTest testApps CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.AdoptableHostTest testPrimaryStorage CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.AdoptableHostTest testPackageInstaller CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.AdoptableHostTest testEjected CtsAppSecurityHostTestCases]', 1), ('[android.content.cts.IntentTest testNormalizeMimeType CtsContentTestCases]', 1), ('[com.android.cts.appwithdata.CreatePrivateDataTest testCreatePrivateData None]', 1), ('[com.android.tests.silentupdate.SilentUpdateTests InstallStatusListener None]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testGetPackagesAndVisibilityForAccount CtsAccountManagerTestCases]', 1), ('[android.media.cts.MediaExtractorTest SKIP_testNullMediaDataSourceIsRejected CtsMediaTestCases]', 1), ('[android.os.storage.cts.StorageManagerTest testGetPrimaryVolume None]', 1), ('[android.os.storage.cts.StorageManagerTest testGetStorageVolume None]', 1), ('[android.os.storage.cts.StorageManagerTest testGetUuidForPath None]', 1), ('[android.os.storage.cts.StorageManagerTest testGetExternalUuidForPath None]', 1), ('[android.os.storage.cts.StorageManagerTest testFatUuidHandling None]', 1), ('[android.bluetooth.cts.BasicAdapterTest test_listenUsingRfcommWithServiceRecord CtsBluetoothTestCases]', 1), ('[android.uidisolation.cts.IsolatedServiceTest IsolatedServiceTest CtsUidIsolationTestCases]', 1), ('[android.provider.cts.SettingsPanelTest isCar CtsProviderTestCases]', 1), ('[com.android.cts.devicepolicy.ManagedProfileTest testNoDebuggingFeaturesRestriction CtsDevicePolicyManagerTestCases]', 1)]"
"2.4.3  Software"	"3.2.3.1"	"W-0-1"	"3.2.3.1/W-0-1"	"03020301.870001"	"""[3.2.3.1/W-0-1]  MUST preload one or more applications or service components with an intent handler, for all the public intent filter patterns defined by the following application intents listed [here](https://developer.android.com/about/versions/11/reference/common-intents-30).  Watch device implementations:  *   [[3.8.4/W-SR] Are STRONGLY RECOMMENDED to implement an assistant on the device to handle the [Assist action]( http://developer.android.com/reference/android/content/Intent.html#ACTION_ASSIST).  Watch device implementations that declare the `android.hardware.audio.output` feature flag:  *   ["""	""	""	"ACTION_ASSIST android.hardware.audio.output RECOMMENDED Intent.html"	""	""	""	""	"[('android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest', 3), ('android.settings.cts.WifiSliceTest', 2), ('android.widget.cts.ToastTest', 2), ('android.view.accessibility.cts.AccessibilityManagerTest', 1), ('android.video.cts.CodecEncoderPerformanceTest', 1), ('android.view.cts.ViewConfigurationTest', 1), ('android.media.cts.AudioTrackTest', 1), ('android.hardware.camera2.cts.RecordingTest', 1), ('android.os.cts.HwBinderTest', 1), ('android.media.metrics.cts.MediaMetricsAtomTests', 1), ('android.media.cts.CamcorderProfileTest', 1), ('android.widget.cts29.ToastTest', 1), ('android.cts.statsdatom.statsd.UidAtomTests', 1), ('android.admin.cts.DevicePolicyManagerTest', 1)]"	"[('getMediaType', 14), ('setUp', 7), ('getCodec', 4), ('getProfile', 3), ('getHeight', 2), ('getWidth', 2), ('getBitrate', 2), ('getSimpleName', 1), ('input', 1), ('size', 1), ('getMimesOfAvailableHardwareVideoEncoders', 1), ('getContext', 1), ('getPackageManager', 1), ('getName', 1), ('getDefaultDurationSeconds', 1), ('getRecommendedFileFormat', 1), ('getVideoProfiles', 1), ('getFrameRate', 1), ('getAudioProfiles', 1), ('getSampleRate', 1), ('getChannels', 1), ('hasProfile', 1)]"	"[('CtsCameraTestCases', 4), ('CtsWidgetTestCases', 3), ('CtsMediaTestCases', 2), ('CtsSettingsTestCases', 2), ('CtsAccessibilityTestCases', 1), ('CtsVideoTestCases', 1), ('CtsViewTestCases', 1), ('CtsMediaHostTestCases', 1), ('CtsStatsdAtomHostTestCases', 1), ('CtsAdminTestCases', 1)]"	""	""	""	""	"android.admin.cts.DevicePolicyManagerTest"	"setUp"	"CtsAdminTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/settings/src/android/settings/cts/WifiSliceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ToastTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/video/src/android/video/cts/CodecEncoderPerformanceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/media/src/android/media/metrics/cts/MediaMetricsAtomTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/CamcorderProfileTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget29/src/android/widget/cts29/ToastTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/statsd/UidAtomTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 1)]"	"[('(18,RECOMMENDED,/android/view/accessibility/cts/AccessibilityManagerTest.java)', 1), ('(1,RECOMMENDED,/android/video/cts/CodecEncoderPerformanceTest.java)', 1), ('(1,RECOMMENDED,/android/view/cts/ViewConfigurationTest.java)', 1), ('(1,RECOMMENDED,/android/media/cts/AudioTrackTest.java)', 1), ('(1,RECOMMENDED,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(2,ACTION_ASSIST,/android/settings/cts/WifiSliceTest.java)', 1), ('(1,RECOMMENDED,/android/os/cts/HwBinderTest.java)', 1), ('(1,android.hardware.audio.output,/android/media/metrics/cts/MediaMetricsAtomTests.java)', 1), ('(7,RECOMMENDED,/android/widget/cts/ToastTest.java)', 1), ('(112,RECOMMENDED,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(1,RECOMMENDED,/android/media/cts/CamcorderProfileTest.java)', 1), ('(6,RECOMMENDED,/android/widget/cts29/ToastTest.java)', 1), ('(1,android.hardware.audio.output,/android/cts/statsdatom/statsd/UidAtomTests.java)', 1), ('(3,RECOMMENDED,/android/admin/cts/DevicePolicyManagerTest.java)', 1)]"	"[('([18:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[RECOMMENDED]:[18]:method_text:[;        } catch (IOException e) {            fail(""Fail to run shell command"");        }    }}])', 1), ('([1:/android/video/cts/CodecEncoderPerformanceTest.java]:[RECOMMENDED]:[1]:method_text:[  /**     * Validates performance of hardware accelerated video encoders     */    @LargeTest   ])', 1), ('([1:/android/view/cts/ViewConfigurationTest.java]:[RECOMMENDED]:[1]:method_text:[     assertTrue(scaledMinScalingSpanMm < 40.5); // 1.5 times the recommended size of 27mm    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[RECOMMENDED]:[1]:method_text:[wn when setBufferSizeInBytes""                  + "" is excluded from builder"");        }    }   ])', 1), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[RECOMMENDED]:[1]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([1:/android/settings/cts/WifiSliceTest.java]:[ACTION_ASSIST]:[1]:method_text:[stant)) {      Secure.putString(mContext.getContentResolver(), ASSISTANT, mAssistant);    }  } ])', 1), ('([1:/android/settings/cts/WifiSliceTest.java]:[ACTION_ASSIST]:[1]:method_text:[ission(WIFI_SLICE_URI, testPid, testUid))              .isEqualTo(PERMISSION_GRANTED);    }  } ])', 1), ('([1:/android/os/cts/HwBinderTest.java]:[RECOMMENDED]:[1]:method_text:[fset), 0.0);            assertEquals(2.0, blob.getDouble(offset + 8), 0.0);        }),    };   ])', 1), ('([1:/android/media/metrics/cts/MediaMetricsAtomTests.java]:[android.hardware.audio.output]:[1]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ])', 1), ('([1:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[1]:method_text:[          putSecureSetting(SETTINGS_ACCESSIBILITY_UI_TIMEOUT, originalSetting);        }    }   ])', 1), ('([6:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[1]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 1), ('([67:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[67]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 1), ('([44:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[44]:method_text:[            }        }    }    /**     * Test {@link CameraCharacteristics#getKeys}     */   ])', 1), ('([1:/android/media/cts/CamcorderProfileTest.java]:[RECOMMENDED]:[1]:method_text:[dProfile, highHighSpeedProfile,                specificHighSpeedProfileQualities, null);    }   ])', 1), ('([6:/android/widget/cts29/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 1), ('([1:/android/cts/statsdatom/statsd/UidAtomTests.java]:[android.hardware.audio.output]:[1]:method_text:[atoms logged     * from an isolated process are seen as coming from their host process.     */   ])', 1), ('([3:/android/admin/cts/DevicePolicyManagerTest.java]:[RECOMMENDED]:[3]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ])', 1)]"	"https://developer.android.com http://developer.android.com"	""	"[('RECOMMENDED', 14), ('ACTION_ASSIST', 2), ('android.hardware.audio.output', 2)]"	"[('[android.view.accessibility.cts.AccessibilityManagerTest testGetRecommendedTimeoutMillis CtsAccessibilityTestCases]', 1), ('[android.view.cts.ViewConfigurationTest testInstanceValues CtsViewTestCases]', 1), ('[android.media.cts.AudioTrackTest testAc3BuilderNoBufferSize CtsMediaTestCases]', 1), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes CtsCameraTestCases]', 1), ('[android.settings.cts.WifiSliceTest isCar CtsSettingsTestCases]', 1), ('[android.settings.cts.WifiSliceTest wifiSlice_grantedPermissionToDefaultAssistant CtsSettingsTestCases]', 1), ('[android.media.metrics.cts.MediaMetricsAtomTests isNotNull CtsMediaHostTestCases]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenCustomToastAndWithA11yTimeoutEnabled CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenTextToastAndWithA11yTimeoutEnabled CtsWidgetTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testRecommendedStreamConfigurations CtsCameraTestCases]', 1), ('[android.widget.cts29.ToastTest testAccessDuration_withA11yTimeoutEnabled CtsWidgetTestCases]', 1), ('[android.cts.statsdatom.statsd.UidAtomTests isNotNull CtsStatsdAtomHostTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetRecommendedGlobalProxy_failIfNotDeviceOwner CtsAdminTestCases]', 1)]"
"9.11.3  Identity Credential"	"9.11.3"	"C-0-3"	"9.11.3/C-0-3"	"09110300.670003"	"""C-0-3] The cryptographic operations needed to implement the Identity      Credential System (e.g. the `android.security.identity.*` APIs) MUST be      performed entirely in the trusted application and private key material MUST      never leave the isolated execution environment unless specifically required      by higher-level APIs (e.g. the      [createEphemeralKeyPair()](https://developer.android.com/reference/android/security/identity/IdentityCredential#createEphemeralKeyPair%28%29)      method).  """	""	""	"android.security.identity createEphemeralKeyPair()"	""	""	""	""	"[('android.security.identity.cts.DynamicAuthTest', 3), ('android.security.identity.cts.ProvisioningTest', 2), ('android.security.identity.cts.EphemeralKeyTest', 2), ('android.security.identity.cts.IdentityApiTest', 1), ('android.security.identity.cts.CreateItemsRequestTest', 1), ('com.android.cts.deviceandprofileowner.EnrollmentSpecificIdTest', 1), ('android.security.identity.cts.X509CertificateSigningTest', 1), ('android.security.identity.cts.UserAuthTest', 1), ('android.security.identity.cts.AttestationTest', 1)]"	"[('build', 5), ('getBytes', 3), ('printStackTrace', 3), ('getExampleDrivingPrivilegesCbor', 2), ('end', 2), ('Builder', 2), ('ByteArrayOutputStream', 1), ('CborBuilder', 1), ('addArray', 1), ('addMap', 1), ('toByteArray', 1), ('iterator', 1), ('next', 1), ('getPublicKey', 1), ('DeviceLockSession', 1), ('LockScreenSession', 1), ('setLockCredential', 1), ('performDeviceLock', 1), ('sleepDevice', 1), ('getTargetContext', 1), ('createEphemeralKey', 1)]"	"[('CtsIdentityTestCases', 12)]"	""	""	""	""	"android.security.identity.cts.EphemeralKeyTest"	"createEphemeralKey"	"CtsIdentityTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/DynamicAuthTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/ProvisioningTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/EphemeralKeyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/IdentityApiTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/CreateItemsRequestTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/EnrollmentSpecificIdTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/X509CertificateSigningTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/UserAuthTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/AttestationTest.java', 1)]"	"[('(15,android.security.identity,/android/security/identity/cts/IdentityApiTest.java)', 1), ('(2,android.security.identity,/android/security/identity/cts/CreateItemsRequestTest.java)', 1), ('(3,createEphemeralKeyPair(),/android/security/identity/cts/ProvisioningTest.java)', 1), ('(17,android.security.identity,/android/security/identity/cts/ProvisioningTest.java)', 1), ('(1,android.security.identity,/com/android/cts/deviceandprofileowner/EnrollmentSpecificIdTest.java)', 1), ('(2,android.security.identity,/android/security/identity/cts/X509CertificateSigningTest.java)', 1), ('(12,android.security.identity,/android/security/identity/cts/UserAuthTest.java)', 1), ('(16,createEphemeralKeyPair(),/android/security/identity/cts/DynamicAuthTest.java)', 1), ('(8,android.security.identity,/android/security/identity/cts/DynamicAuthTest.java)', 1), ('(3,android.security.identity,/android/security/identity/cts/AttestationTest.java)', 1), ('(1,createEphemeralKeyPair(),/android/security/identity/cts/EphemeralKeyTest.java)', 1), ('(5,android.security.identity,/android/security/identity/cts/EphemeralKeyTest.java)', 1)]"	"[('([15:/android/security/identity/cts/IdentityApiTest.java]:[android.security.identity]:[15]:method_text:[quals;public class IdentityApiTest {    private static final String TAG = ""IdentityApiTest"";   ])', 1), ('([2:/android/security/identity/cts/CreateItemsRequestTest.java]:[android.security.identity]:[2]:method_text:[t java.util.Map;import co.nstant.in.cbor.CborException;public class CreateItemsRequestTest {   ])', 1), ('([3:/android/security/identity/cts/ProvisioningTest.java]:[createEphemeralKeyPair()]:[3]:method_text:[;            assertTrue(false);        }        store.deleteCredentialByName(""test"");    }   ])', 1), ('([17:/android/security/identity/cts/ProvisioningTest.java]:[android.security.identity]:[17]:method_text:[tStackTrace();            assertTrue(false);        }        return certificateChain;    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/EnrollmentSpecificIdTest.java]:[android.security.identity]:[1]:method_text:[      encoded[--index] = alphabet[group];        }        return String.valueOf(encoded);    }}])', 1), ('([2:/android/security/identity/cts/X509CertificateSigningTest.java]:[android.security.identity]:[2]:method_text:[09CertificateSigningTest {    private static final String TAG = ""X509CertificateSigningTest"";   ])', 1), ('([12:/android/security/identity/cts/UserAuthTest.java]:[android.security.identity]:[12]:method_text:[) {            throw new RuntimeException(""Error creating auth-bound key"", e);        }    }   ])', 1), ('([10:/android/security/identity/cts/DynamicAuthTest.java]:[createEphemeralKeyPair()]:[10]:method_text:[re done. Clean up after ourselves.        store.deleteCredentialByName(credentialName);    }   ])', 1), ('([6:/android/security/identity/cts/DynamicAuthTest.java]:[createEphemeralKeyPair()]:[6]:method_text:[taticAuthenticationData() throwing UnknownAuthenticationKeyException    // on an unknown auth key}])', 1), ('([8:/android/security/identity/cts/DynamicAuthTest.java]:[android.security.identity]:[8]:method_text:[ption;public class DynamicAuthTest {    private static final String TAG = ""DynamicAuthTest"";   ])', 1), ('([3:/android/security/identity/cts/AttestationTest.java]:[android.security.identity]:[3]:method_text:[STATION_APPLICATION_ID = 709;    public static final int KM_TAG_IDENTITY_CREDENTIAL_KEY = 721;   ])', 1), ('([1:/android/security/identity/cts/EphemeralKeyTest.java]:[createEphemeralKeyPair()]:[1]:method_text:[            }            mMdlExpectedCounter += 1;            return plaintext;        }    }}])', 1), ('([5:/android/security/identity/cts/EphemeralKeyTest.java]:[android.security.identity]:[5]:method_text:[code.public class EphemeralKeyTest {    private static final String TAG = ""EphemeralKeyTest"";   ])', 1)]"	"https://developer.android.com"	""	"[('android.security.identity', 9), ('createEphemeralKeyPair()', 4)]"	"[('[android.security.identity.cts.ProvisioningTest testProvisionAndRetrieveMultipleTimes CtsIdentityTestCases]', 1), ('[com.android.cts.deviceandprofileowner.EnrollmentSpecificIdTest testCorrectCalculationOfEsid None]', 1), ('[android.security.identity.cts.UserAuthTest isDeviceLocked CtsIdentityTestCases]', 1), ('[android.security.identity.cts.DynamicAuthTest dynamicAuthTest CtsIdentityTestCases]', 1), ('[android.security.identity.cts.DynamicAuthTest dynamicAuthWithExpirationTest CtsIdentityTestCases]', 1), ('[android.security.identity.cts.EphemeralKeyTest isHalImplemented CtsIdentityTestCases]', 1)]"
"7.3.13  Hinge Angle Sensor"	"7.3.13"	"C-1-1"	"7.3.13/C-1-1"	"07031300.670101"	"""C-1-1] MUST implement and report [`TYPE_HINGLE_ANGLE`](https://developer.android.com/reference/android/hardware/Sensor#STRING_TYPE_HINGE_ANGLE). """	""	""	"TYPE_HINGLE_ANGLE STRING_TYPE_HINGE_ANGLE"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://developer.android.com"	""	""	""
"7.4.5.2  IPv6"	"7.4.5.2"	"C-0-3"	"7.4.5.2/C-0-3"	"07040502.670003"	"""C-0-3] MUST enable IPv6 by default.    *   MUST ensure that IPv6 communication is as reliable as IPv4, for example:       """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"9.16  Application Data Migration"	"9.16"	"C-1-4"	"9.16/C-1-4"	"09160000.670104"	"""C-1-4] MUST only migrate application data to the same application on the      target device, with the same package name AND signing certificate. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"9.16  Application Data Migration"	"9.16"	"C-1-5"	"9.16/C-1-5"	"09160000.670105"	"""C-1-5] MUST show an indication that the source device has had data      migrated by a device-to-device data migration in the settings menu. A user      SHOULD NOT be able to remove this indication."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"9.8.11  Data blobs sharing"	"9.8.11"	"C-1-2"	"9.8.11/C-1-2"	"09081100.670102"	"""C-1-2] MUST NOT send off device or share with other apps the secure hashes     of data blobs (which are used to control access)."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"9.16  Application Data Migration"	"9.16"	"C-1-1"	"9.16/C-1-1"	"09160000.670101"	"""C-1-1] MUST NOT initiate transfers of application data from      devices on which the user has not set a primary authentication as      described in [9.11.1 Secure Lock Screen and Authentication](      #9_11_1_secure_lock_screen_and_authentication). """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"2.2.3  Software"	"3.8.16"	"H-1-2"	"3.8.16/H-1-2"	"03081600.720102"	"""[3.8.16/H-1-2] MUST provide a user     affordance with the ability to add, edit, select, and operate the user’s     favorite device controls from the controls registered by the third-party     applications through the [`ControlsProviderService`](https://developer.android.com/reference/android/service/controls/ControlsProviderService)     and the [`Control`](https://developer.android.com/reference/android/service/controls/Control#getDeviceType%28%29)     APIs. *   ["""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"https://developer.android.com"	""	""	""
"7.1.4.2 Vulkan"	"7.1.4.2"	"C-1-9"	"7.1.4.2/C-1-9"	"07010402.670109"	"""C-1-9] MUST at least support version `132317953` (from Mar 1st, 2019) as     reported in the `android.software.vulkan.deqp.level` feature flag. """	""	""	"android.software.vulkan.deqp.level"	""	""	""	""	"[('android.graphics.cts.VulkanDeqpLevelTest', 1)]"	"[('getSimpleName', 1), ('setup', 1), ('getTargetContext', 1), ('getPackageManager', 1), ('getSystemAvailableFeatures', 1)]"	"[('CtsGraphicsTestCases', 1)]"	""	""	""	""	"android.graphics.cts.VulkanDeqpLevelTest"	"getSystemAvailableFeatures"	"CtsGraphicsTestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/VulkanDeqpLevelTest.java', 1)]"	"[('(1,android.software.vulkan.deqp.level,/android/graphics/cts/VulkanDeqpLevelTest.java)', 1)]"	"[('([1:/android/graphics/cts/VulkanDeqpLevelTest.java]:[android.software.vulkan.deqp.level]:[1]:method_text:[              }            }        }    }    @CddTest(requirement = ""7.1.4.2/C-1-8,C-1-9"")   ])', 1)]"	""	""	"[('android.software.vulkan.deqp.level', 1)]"	""
"9.9.3  Encryption Methods"	"9.9.3"	"C-1-13"	"9.9.3/C-1-13"	"09090300.670113"	"""C-1-13] MUST NOT offer any method to unlock the CE protected storage without either the user-supplied credentials, a registered escrow key or a resume on reboot implementation meeting the requirements in [section 9.9.4. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"7.4.5.2  IPv6"	"7.4.5.2"	"C-2-1"	"7.4.5.2/C-2-1"	"07040502.670201"	"""C-2-1] MUST support dual-stack and IPv6-only operation on     Ethernet.  If device implementations support Cellular data, they:  """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"7.4.5.3  Captive Portals"	"7.4.5.3"	"C-1-3"	"7.4.5.3/C-1-3"	"07040503.670103"	"""C-1-3] MUST support logging in to captive portals using cleartext DNS     when the device is configured to use private DNS strict mode. """	""	""	"DNS"	""	""	""	""	"[('android.security.SELinuxTargetSdkTest', 12), ('com.android.cts.deviceowner.PrivateDnsPolicyTest', 7), ('android.telephony.cts.DataCallResponseTest', 5), ('android.devicepolicy.cts.NetworkResetTest', 3), ('android.net.wifi.cts.WifiBackupRestoreTest', 2), ('com.android.cts.deviceandprofileowner.NetworkLoggingTest', 2), ('com.android.cts.delegate.WorkProfileNetworkLoggingDelegateTest', 2), ('com.android.cts.deviceowner.NetworkLoggingTest', 2), ('android.appsecurity.cts.ListeningPortsTest', 1), ('android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest', 1), ('android.security.identity.cts.ProvisioningTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('android.hardware.camera2.cts.CaptureRequestTest', 1), ('android.hardware.cts.helpers.sensorverification.JitterVerificationTest', 1), ('android.provider.cts.simphonebook.SimPhonebookContract_ElementaryFilesTest', 1), ('com.android.cts.deviceandprofileowner.UserRestrictionsParentTest', 1), ('com.android.cts.deviceowner.DevicePolicySafetyCheckerIntegrationTest', 1), ('com.android.cts.devicepolicy.DeviceOwnerTest', 1), ('com.android.cts.deviceandprofileowner.OrgOwnedProfileOwnerParentTest', 1), ('android.net.cts.legacy.api22.ConnectivityManagerLegacyTest', 1), ('android.permission.cts.NoNetworkStatePermissionTest', 1)]"	"[('setUp', 7), ('tearDown', 5), ('getInstrumentation', 3), ('getContext', 3), ('getWho', 2), ('getName', 2), ('dpc', 2), ('devicePolicyManager', 2), ('NetworkLogsReceiver', 1), ('Builder', 1), ('build', 1), ('query_includesRowForEachElementaryFileOnEachSim', 1), ('getPackage', 1), ('DeviceState', 1), ('factoryReset_noPolicyRestrictions_resetsToDefault', 1), ('factoryReset', 1), ('getPrivateDnsMode', 1), ('getAirplaneMode', 1), ('BroadcastReceiver', 1), ('getAction', 1), ('getCount', 1), ('size', 1), ('countDown', 1), ('getContentResolver', 1), ('getPackageName', 1)]"	"[('CtsTelephonyTestCases', 5), ('CtsDevicePolicyTestCases', 3), ('CtsWifiTestCases', 2), ('CtsSelinuxTargetSdk27TestCases', 2), ('CtsSensorTestCases', 2), ('CtsSelinuxTargetSdk30TestCases', 2), ('CtsSelinuxTargetSdkCurrentTestCases', 2), ('CtsSelinuxTargetSdk25TestCases', 2), ('CtsSelinuxTargetSdk28TestCases', 2), ('CtsSelinuxTargetSdk29TestCases', 2), ('CtsAppSecurityHostTestCases', 1), ('CtsIdentityTestCases', 1), ('CtsMediaTestCases', 1), ('CtsCameraTestCases', 1), ('CtsSimPhonebookProviderTestCases', 1), ('CtsDevicePolicyManagerTestCases', 1), ('CtsNetTestCases', 1), ('CtsPermissionTestCases', 1)]"	""	""	""	""	"android.security.SELinuxTargetSdkTest"	"getPackageName"	"CtsSelinuxTargetSdk29TestCases"	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PrivateDnsPolicyTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/DataCallResponseTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/NetworkResetTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/selinux/selinuxTargetSdk27/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/selinux/selinuxTargetSdk30/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/selinux/selinuxTargetSdkCurrent/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/selinux/selinuxTargetSdk25/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/NetworkLoggingTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/selinux/selinuxTargetSdk28/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/selinux/selinuxTargetSdk29/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ListeningPortsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/ProvisioningTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureRequestTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/simphonebookprovider/src/android/provider/cts/simphonebook/SimPhonebookContract_ElementaryFilesTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/DevicePolicySafetyCheckerIntegrationTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/netlegacy22.api/src/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoNetworkStatePermissionTest.java', 1)]"	"[('(3,DNS,/android/security/SELinuxTargetSdkTest.java)', 6), ('(2,DNS,/android/appsecurity/cts/ListeningPortsTest.java)', 1), ('(3,DNS,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(2,DNS,/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java)', 1), ('(8,DNS,/android/security/identity/cts/ProvisioningTest.java)', 1), ('(7,DNS,/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java)', 1), ('(52,DNS,/com/android/cts/deviceowner/PrivateDnsPolicyTest.java)', 1), ('(8,DNS,/android/media/cts/PresentationSyncTest.java)', 1), ('(2,DNS,/android/hardware/camera2/cts/CaptureRequestTest.java)', 1), ('(15,DNS,/android/telephony/cts/DataCallResponseTest.java)', 1), ('(7,DNS,/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java)', 1), ('(4,DNS,/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java)', 1), ('(8,DNS,/android/provider/cts/simphonebook/SimPhonebookContract_ElementaryFilesTest.java)', 1), ('(1,DNS,/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java)', 1), ('(4,DNS,/com/android/cts/deviceowner/DevicePolicySafetyCheckerIntegrationTest.java)', 1), ('(31,DNS,/android/devicepolicy/cts/NetworkResetTest.java)', 1), ('(29,DNS,/com/android/cts/deviceowner/NetworkLoggingTest.java)', 1), ('(2,DNS,/com/android/cts/devicepolicy/DeviceOwnerTest.java)', 1), ('(1,DNS,/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java)', 1), ('(2,DNS,/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java)', 1), ('(1,DNS,/android/permission/cts/NoNetworkStatePermissionTest.java)', 1)]"	"[('([1:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[1]:method_text:[SELinuxTargetSdkTestBase{    /**     * Verify that net.dns properties may not be read     */   ])', 4), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[public void testNoDns() throws IOException {        noDns();    }    ])', 3), ('([2:/android/appsecurity/cts/ListeningPortsTest.java]:[DNS]:[2]:method_text:[);            }        }        contents.append(""\'"");        return contents.toString();    }}])', 1), (""([1:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[DNS]:[1]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ])"", 1), ('([2:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[DNS]:[2]:method_text:[ is deserialized correctly from AOSP     * legacy supplicant/ipconf backup data format.     */   ])', 1), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[ify that selinux context is the expected domain based on     * targetSdkVersion = 26-27     */   ])', 1), ('([2:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[DNS]:[2]:method_text:[tion(expectedUs);        verification.addSensorEvents(events);        return verification;    }}])', 1), ('([1:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[1]:method_text:[inuxTargetSdkTestBase{    /**     * Verify that net.dns properties may not be read     */   ])', 1), ('([8:/android/security/identity/cts/ProvisioningTest.java]:[DNS]:[8]:method_text:[til.getStringEntry(rd, updNs, ""last_name""));        store.deleteCredentialByName(""test"");    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java]:[DNS]:[1]:method_text:[s);        mDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());    }   ])', 1), ('([6:/com/android/cts/deviceandprofileowner/NetworkLoggingTest.java]:[DNS]:[6]:method_text:[ddr) {        return ((addr instanceof Inet4Address) || (addr instanceof Inet6Address));    }   ])', 1), ('([8:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[8]:method_text:[DNS, false);        mDevicePolicyManager.setGlobalPrivateDnsModeOpportunistic(getWho());    }   ])', 1), ('([3:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[3]:method_text:[r.hasUserRestriction(                UserManager.DISALLOW_CONFIG_PRIVATE_DNS)).isTrue();    }   ])', 1), ('([14:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[14]:method_text:[privateDnsHost, expectedResult, resultCode),                expectedResult, resultCode);    }   ])', 1), ('([5:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[5]:method_text:[IC);        assertThat(mDevicePolicyManager.getGlobalPrivateDnsHost(getWho())).isNull();    }   ])', 1), ('([7:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[7]:method_text:[er.getGlobalPrivateDnsHost(getWho())).isEqualTo(                VALID_PRIVATE_DNS_HOST);    }   ])', 1), ('([4:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[4]:method_text:[TE_DNS_HOST,                DevicePolicyManager.PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING);    }   ])', 1), ('([11:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[11]:method_text:[ISTIC);        assertThat(mDevicePolicyManager.getGlobalPrivateDnsHost(getWho())).isNull();    }}])', 1), ('([8:/android/media/cts/PresentationSyncTest.java]:[DNS]:[8]:method_text:[sleep(10); }                catch (InterruptedException ignored) {}            }        }    }}])', 1), ('([2:/android/hardware/camera2/cts/CaptureRequestTest.java]:[DNS]:[2]:method_text:[                  maxDist, Math.abs(a.bottom - e.bottom))) continue;            }        }    }}])', 1), ('([1:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[1]:method_text:[riptor> TRAFFIC_DESCRIPTORS =            Arrays.asList(new TrafficDescriptor(DNN, OS_APP_ID));   ])', 1), ('([4:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[4]:method_text:[FO);        assertThat(response.getTrafficDescriptors()).isEqualTo(TRAFFIC_DESCRIPTORS);    }   ])', 1), ('([4:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[4]:method_text:[PTORS)                .build();        assertThat(response).isEqualTo(equalsResponse);    }   ])', 1), ('([4:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[4]:method_text:[t(response).isNotEqualTo(null);        assertThat(response).isNotEqualTo(new String[1]);    }   ])', 1), ('([2:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[2]:method_text:[EATOR.createFromParcel(stateParcel);        assertThat(response).isEqualTo(parcelResponse);    }}])', 1), ('([1:/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java]:[DNS]:[1]:method_text:[        DelegateTestUtils.DelegatedLogsReceiver.sBatchCountDown = new CountDownLatch(1);    }   ])', 1), ('([6:/com/android/cts/delegate/WorkProfileNetworkLoggingDelegateTest.java]:[DNS]:[6]:method_text:[ddr) {        return ((addr instanceof Inet4Address) || (addr instanceof Inet6Address));    }   ])', 1), ('([4:/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java]:[DNS]:[4]:method_text:[Double) stats.getValue(SensorStats.JITTER_95_PERCENTILE_PERCENT_KEY),                0.01);    }}])', 1), ('([8:/android/provider/cts/simphonebook/SimPhonebookContract_ElementaryFilesTest.java]:[DNS]:[8]:method_text:[   .isAtLeast(PHONE_NUMBER_MAX_LENGTH_MINIMUM);                }            }        }    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[DNS]:[1]:method_text:[ISALLOW_CONFIG_DATE_TIME,                    UserManager.DISALLOW_AIRPLANE_MODE            );   ])', 1), ('([1:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[1]:method_text:[cuteFromHomeDir());    }    /**     * Verify that net.dns properties may not be read     */   ])', 1), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[Verify that selinux context is the expected domain based on     * targetSdkVersion = 25     */   ])', 1), ('([4:/com/android/cts/deviceowner/DevicePolicySafetyCheckerIntegrationTest.java]:[DNS]:[4]:method_text:[    };    /**     * Tests that all safety-aware operations are properly implemented.     */   ])', 1), ('([6:/android/devicepolicy/cts/NetworkResetTest.java]:[DNS]:[6]:method_text:[  restoreSettings(mOriginalAirplaneMode, mOriginalPrivateDnsMode, mOriginalAvoidBadWifi);    }   ])', 1), ('([11:/android/devicepolicy/cts/NetworkResetTest.java]:[DNS]:[11]:method_text:[  restoreUserRestriction(originalUserRestriction, DISALLOW_CONFIG_PRIVATE_DNS);        }    }   ])', 1), ('([14:/android/devicepolicy/cts/NetworkResetTest.java]:[DNS]:[14]:method_text:[            sDeviceState.dpc().devicePolicyManager().clearUserRestriction(policy);        }    }}])', 1), (""([1:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[DNS]:[1]:method_text:[ there's one user on the device or all     * secondary users / profiles are affiliated.     */   ])"", 1), ('([28:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[DNS]:[28]:method_text:[ork logging enabled for %s"", admin).that(reallyEnabled)                .isEqualTo(enabled);    }}])', 1), ('([2:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[DNS]:[2]:method_text:[ateDnsPolicy() throws Exception {        executeDeviceOwnerTest(""PrivateDnsPolicyTest"");    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java]:[DNS]:[1]:method_text:[not used in test.                    // UserManager.DISALLOW_DEBUGGING_FEATURES            );   ])', 1), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[Verify that selinux context is the expected domain based on     * targetSdkVersion = 28     */   ])', 1), ('([2:/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java]:[DNS]:[2]:method_text:[led && isWifiConnected()) {                disconnectFromWifi();            }        }    }   ])', 1), ('([1:/android/permission/cts/NoNetworkStatePermissionTest.java]:[DNS]:[1]:method_text:[w.google.com"");            fail();        } catch (SecurityException expected) {        }    }}])', 1)]"	""	""	"[('DNS', 48)]"	"[('[android.appsecurity.cts.ListeningPortsTest testNoListeningLoopbackUdp6Ports CtsAppSecurityHostTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreSoftApBackupData CtsWifiTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk27TestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest testVerify_no_events_fail CtsSensorTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk30TestCases]', 1), ('[android.security.identity.cts.ProvisioningTest testUpdateCredential CtsIdentityTestCases]', 1), ('[com.android.cts.deviceandprofileowner.NetworkLoggingTest testRetrieveNetworkLogs_forceNetworkLogs_receiveNetworkLogs None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testDisallowPrivateDnsConfigurationRestriction None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testClearDisallowPrivateDnsConfigurationRestriction None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testSetOpportunisticMode None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testSetSpecificHostMode None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testSetModeWithIncorrectHost None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testCanSetModeDespiteUserRestriction None]', 1), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testExtendedSceneModes CtsCameraTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdkCurrentTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testConstructorAndGetters CtsTelephonyTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testEquals CtsTelephonyTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testNotEquals CtsTelephonyTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testParcel CtsTelephonyTestCases]', 1), ('[com.android.cts.delegate.WorkProfileNetworkLoggingDelegateTest testRetrieveNetworkLogs_forceNetworkLogs_receiveNetworkLogs None]', 1), ('[android.hardware.cts.helpers.sensorverification.JitterVerificationTest testCalculateDelta CtsSensorTestCases]', 1), ('[android.provider.cts.simphonebook.SimPhonebookContract_ElementaryFilesTest getActiveSubscriptionInfoList CtsSimPhonebookProviderTestCases]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testPerProfileUserRestriction_onParent None]', 1), ('[android.security.SELinuxTargetSdkTest testCanExecuteFromHomeDir CtsSelinuxTargetSdk25TestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk25TestCases]', 1), ('[com.android.cts.deviceowner.DevicePolicySafetyCheckerIntegrationTest DevicePolicySafetyCheckerIntegrationTester None]', 1), ('[android.devicepolicy.cts.NetworkResetTest TestApis CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.NetworkResetTest factoryReset_disallowedByConfigPrivateDnsPolicy_doesPartialFactoryReset CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.NetworkResetTest isFalse CtsDevicePolicyTestCases]', 1), ('[com.android.cts.deviceowner.NetworkLoggingTest testNetworkLoggingAndRetrieval None]', 1), ('[com.android.cts.devicepolicy.DeviceOwnerTest testPrivateDnsPolicy CtsDevicePolicyManagerTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk28TestCases]', 1), ('[android.net.cts.legacy.api22.ConnectivityManagerLegacyTest testStartUsingNetworkFeature_enableHipri CtsNetTestCases]', 1), ('[android.permission.cts.NoNetworkStatePermissionTest testSecurityExceptionFromDns CtsPermissionTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk29TestCases]', 1)]"
