,7.3.5,,7.3.5,,,,,,"""7_3_5_barometer"" data-text=""       7.3.5. Barometer     "">       7.3.5. Barometer                 Device implementations:                 [C-SR] Are STRONGLY RECOMMENDED to include a barometer (ambient air pressure sensor).                        If device implementations include a barometer  they:                 [C-1-1] MUST implement and report TYPE_PRESSURE sensor.              [C-1-2] MUST be able to deliver events at 5 Hz or greater.              [C-1-3] MUST be temperature compensated.              [SR] STRONGLY RECOMMENDED to be able to report pressure measurements in the range 300hPa to 1100hPa.              SHOULD have an absolute accuracy of 1hPa.              SHOULD have a relative accuracy of 0.12hPa over 20hPa range (equivalent to ~1m accuracy over ~200m change at sea level).                  7.3.5. Barometer Device implementations: [C-SR] Are STRONGLY RECOMMENDED to include a barometer (ambient air pressure sensor). If device implementations include a barometer  they: [C-1-1] MUST implement and report TYPE_PRESSURE sensor. [C-1-2] MUST be able to deliver events at 5 Hz or greater. [C-1-3] MUST be temperature compensated. [SR] STRONGLY RECOMMENDED to be able to report pressure measurements in the range 300hPa to 1100hPa. SHOULD have an absolute accuracy of 1hPa. SHOULD have a relative accuracy of 0.12hPa over 20hPa range (equivalent to ~1m accuracy over ~200m change at sea level). <h4 id=",,TYPE_PRESSURE ,Last augmented column
,7.3.5,C-1-1,7.3.5/C-1-1,,,,,,key=[7.3.5/C-1-1]: [C-1-1] MUST implement and report TYPE_PRESSURE sensor. ,,TYPE_PRESSURE ,Last augmented column
,7.3.5,C-1-2,7.3.5/C-1-2,,,,,,key=[7.3.5/C-1-2]: [C-1-2] MUST be able to deliver events at 5 Hz or greater. ,,,Last augmented column
,7.3.5,C-1-3,7.3.5/C-1-3,,,,,,key=[7.3.5/C-1-3]: [C-1-3] MUST be temperature compensated. ,,,Last augmented column
,7.3.6,,7.3.6,,,,,,"""7_3_6_thermometer"" data-text=""       7.3.6. Thermometer     "">       7.3.6. Thermometer                 If device implementations include an ambient thermometer (temperature sensor)  they:                 [C-1-1] MUST define SENSOR_TYPE_AMBIENT_TEMPERATURE for the ambient temperature sensor and the sensor MUST measure the ambient (room/vehicle cabin) temperature from where the user is interacting with the device in degrees Celsius.                        If device implementations include a thermometer sensor that measures a temperature other than ambient temperature  such as CPU temperature  they:                 [C-2-1] MUST NOT define SENSOR_TYPE_AMBIENT_TEMPERATURE for the temperature sensor.                  7.3.6. Thermometer If device implementations include an ambient thermometer (temperature sensor)  they: [C-1-1] MUST define SENSOR_TYPE_AMBIENT_TEMPERATURE for the ambient temperature sensor and the sensor MUST measure the ambient (room/vehicle cabin) temperature from where the user is interacting with the device in degrees Celsius. If device implementations include a thermometer sensor that measures a temperature other than ambient temperature  such as CPU temperature  they: [C-2-1] MUST NOT define SENSOR_TYPE_AMBIENT_TEMPERATURE for the temperature sensor. <h4 id=",https://developer.android.com ,SENSOR_TYPE_AMBIENT_TEMPERATURE ,Last augmented column
,7.3.6,C-1-1,7.3.6/C-1-1,,,,,,key=[7.3.6/C-1-1]: [C-1-1] MUST define SENSOR_TYPE_AMBIENT_TEMPERATURE for the ambient temperature sensor and the sensor MUST measure the ambient (room/vehicle cabin) temperature from where the user is interacting with the device in degrees Celsius. If device implementations include a thermometer sensor that measures a temperature other than ambient temperature  such as CPU temperature  they: ,https://developer.android.com ,SENSOR_TYPE_AMBIENT_TEMPERATURE ,Last augmented column
,7.3.6,C-2-1,7.3.6/C-2-1,,,,,,key=[7.3.6/C-2-1]: [C-2-1] MUST NOT define SENSOR_TYPE_AMBIENT_TEMPERATURE for the temperature sensor. <h4 id=,https://developer.android.com ,SENSOR_TYPE_AMBIENT_TEMPERATURE ,Last augmented column
,7.3.7,,7.3.7,,,,,,"""7_3_7_photometer"" data-text=""       7.3.7. Photometer     "">       7.3.7. Photometer                 Device implementations MAY include a photometer (ambient light sensor).                  7.3.7. Photometer Device implementations MAY include a photometer (ambient light sensor). <h4 id=",,,Last augmented column
,7.3.8,,7.3.8,,,,,,"""7_3_8_proximity_sensor"" data-text=""       7.3.8. Proximity Sensor     "">       7.3.8. Proximity Sensor                 Device implementations MAY include a proximity sensor.                        If device implementations include a proximity sensor  they:                 [C-1-1] MUST measure the proximity of an object in the same direction as the screen. That is  the proximity sensor MUST be oriented to detect objects close to the screen  as the primary intent of this sensor type is to detect a phone in use by the user. If device implementations include a proximity sensor with any other orientation  it MUST NOT be accessible through this API.              [C-1-2] MUST have 1-bit of accuracy or more.                  7.3.8. Proximity Sensor Device implementations MAY include a proximity sensor. If device implementations include a proximity sensor  they: [C-1-1] MUST measure the proximity of an object in the same direction as the screen. That is  the proximity sensor MUST be oriented to detect objects close to the screen  as the primary intent of this sensor type is to detect a phone in use by the user. If device implementations include a proximity sensor with any other orientation  it MUST NOT be accessible through this API. [C-1-2] MUST have 1-bit of accuracy or more. <h4 id=",,,Last augmented column
,7.3.8,C-1-1,7.3.8/C-1-1,,,,,,key=[7.3.8/C-1-1]: [C-1-1] MUST measure the proximity of an object in the same direction as the screen. That is  the proximity sensor MUST be oriented to detect objects close to the screen  as the primary intent of this sensor type is to detect a phone in use by the user. If device implementations include a proximity sensor with any other orientation  it MUST NOT be accessible through this API. ,,,Last augmented column
,7.3.8,C-1-2,7.3.8/C-1-2,,,,,,key=[7.3.8/C-1-2]: [C-1-2] MUST have 1-bit of accuracy or more. <h4 id=,,,Last augmented column
,7.3.9,,7.3.9,,,,,,"""7_3_9_high_fidelity_sensors"" data-text=""       7.3.9. High Fidelity Sensors     "">       7.3.9. High Fidelity Sensors                 If device implementations include a set of higher quality sensors as defined in this section  and make available them to third-party apps  they:                 [C-1-1] MUST identify the capability through the android.hardware.sensor.hifi_sensors feature flag.                        If device implementations declare android.hardware.sensor.hifi_sensors  they:                                     [C-2-1] MUST have a TYPE_ACCELEROMETER sensor which:                             MUST have a measurement range between at least -8g and +8g  and is STRONGLY RECOMMENDED to have a measurement range between at least -16g and +16g.                      MUST have a measurement resolution of at least 2048 LSB/g.                      MUST have a minimum measurement frequency of 12.5 Hz or lower.                      MUST have a maximum measurement frequency of 400 Hz or higher; SHOULD support the SensorDirectChannel RATE_VERY_FAST.                      MUST have a measurement noise not above 400 μg/√Hz.                      MUST implement a non-wake-up form of this sensor with a buffering capability of at least 3000 sensor events.                      MUST have a batching power consumption not worse than 3 mW.                      [C-SR] Is STRONGLY RECOMMENDED to have 3dB measurement bandwidth of at least 80% of Nyquist frequency  and white noise spectrum within this bandwidth.                      SHOULD have an acceleration random walk less than 30 μg √Hz tested at room temperature.                      SHOULD have a bias change vs. temperature of ≤ +/- 1 mg/°C.                      SHOULD have a best-fit line non-linearity of ≤ 0.5%  and sensitivity change vs. temperature of ≤ 0.03%/C°.                      SHOULD have cross-axis sensitivity of &lt; 2.5 % and variation of cross-axis sensitivity &lt; 0.2% in device operation temperature range.                                                      [C-2-2] MUST have a TYPE_ACCELEROMETER_UNCALIBRATED with the same quality requirements as TYPE_ACCELEROMETER.                                           [C-2-3] MUST have a TYPE_GYROSCOPE sensor which:                             MUST have a measurement range between at least -1000 and +1000 dps.                      MUST have a measurement resolution of at least 16 LSB/dps.                      MUST have a minimum measurement frequency of 12.5 Hz or lower.                      MUST have a maximum measurement frequency of 400 Hz or higher; SHOULD support the SensorDirectChannel RATE_VERY_FAST.                      MUST have a measurement noise not above 0.014°/s/√Hz.                      [C-SR] Is STRONGLY RECOMMENDED to have 3dB measurement bandwidth of at least 80% of Nyquist frequency  and white noise spectrum within this bandwidth.                      SHOULD have a rate random walk less than 0.001 °/s √Hz tested at room temperature.                      SHOULD have a bias change vs. temperature of ≤ +/- 0.05 °/ s / °C.                      SHOULD have a sensitivity change vs. temperature of ≤ 0.02% / °C.                      SHOULD have a best-fit line non-linearity of ≤ 0.2%.                      SHOULD have a noise density of ≤ 0.007 °/s/√Hz.                      SHOULD have calibration error less than 0.002 rad/s in temperature range 10 ~ 40 ℃ when device is stationary.                      SHOULD have g-sensitivity less than 0.1°/s/g.                      SHOULD have cross-axis sensitivity of &lt; 4.0 % and cross-axis sensitivity variation &lt; 0.3% in device operation temperature range.                                                      [C-2-4] MUST have a TYPE_GYROSCOPE_UNCALIBRATED with the same quality requirements as TYPE_GYROSCOPE.                                           [C-2-5] MUST have a TYPE_GEOMAGNETIC_FIELD sensor which:                             MUST have a measurement range between at least -900 and +900 μT.                      MUST have a measurement resolution of at least 5 LSB/uT.                      MUST have a minimum measurement frequency of 5 Hz or lower.                      MUST have a maximum measurement frequency of 50 Hz or higher.                      MUST have a measurement noise not above 0.5 uT.                                                      [C-2-6] MUST have a TYPE_MAGNETIC_FIELD_UNCALIBRATED with the same quality requirements as TYPE_GEOMAGNETIC_FIELD and in addition:                             MUST implement a non-wake-up form of this sensor with a buffering capability of at least 600 sensor events.                      [C-SR] Is STRONGLY RECOMMENDED to have white noise spectrum from 1 Hz to at least 10 Hz when the report rate is 50 Hz or higher.                                                      [C-2-7] MUST have a TYPE_PRESSURE sensor which:                             MUST have a measurement range between at least 300 and 1100 hPa.                      MUST have a measurement resolution of at least 80 LSB/hPa.                      MUST have a minimum measurement frequency of 1 Hz or lower.                      MUST have a maximum measurement frequency of 10 Hz or higher.                      MUST have a measurement noise not above 2 Pa/√Hz.                      MUST implement a non-wake-up form of this sensor with a buffering capability of at least 300 sensor events.                      MUST have a batching power consumption not worse than 2 mW.                                  [C-2-8] MUST have a TYPE_GAME_ROTATION_VECTOR sensor.              [C-2-9] MUST have a TYPE_SIGNIFICANT_MOTION sensor which:                    MUST have a power consumption not worse than 0.5 mW when device is static and 1.5 mW when device is moving.                                  [C-2-10] MUST have a TYPE_STEP_DETECTOR sensor which:                    MUST implement a non-wake-up form of this sensor with a buffering capability of at least 100 sensor events.                      MUST have a power consumption not worse than 0.5 mW when device is static and 1.5 mW when device is moving.                      MUST have a batching power consumption not worse than 4 mW.                                  [C-2-11] MUST have a TYPE_STEP_COUNTER sensor which:                    MUST have a power consumption not worse than 0.5 mW when device is static and 1.5 mW when device is moving.                                  [C-2-12] MUST have a TILT_DETECTOR sensor which:                    MUST have a power consumption not worse than 0.5 mW when device is static and 1.5 mW when device is moving.                                  [C-2-13] The event timestamp of the same physical event reported by the Accelerometer  Gyroscope  and Magnetometer MUST be within 2.5 milliseconds of each other. The event timestamp of the same physical event reported by the Accelerometer and Gyroscope SHOULD be within 0.25 milliseconds of each other.              [C-2-14] MUST have Gyroscope sensor event timestamps on the same time base as the camera subsystem and within 1 milliseconds of error.              [C-2-15] MUST deliver samples to applications within 5 milliseconds from the time when the data is available on any of the above physical sensors to the application.              [C-2-16] MUST NOT have a power consumption higher than 0.5 mW when device is static and 2.0 mW when device is moving when any combination of the following sensors are enabled:                                 SENSOR_TYPE_SIGNIFICANT_MOTION                                   SENSOR_TYPE_STEP_DETECTOR                                   SENSOR_TYPE_STEP_COUNTER                                   SENSOR_TILT_DETECTORS                                  [C-2-17] MAY have a TYPE_PROXIMITY sensor  but if present MUST have a minimum buffer capability of 100 sensor events.                        Note that all power consumption requirements in this section do not include the power consumption of the Application Processor. It is inclusive of the power drawn by the entire sensor chain—the sensor  any supporting circuitry  any dedicated sensor processing system  etc.                 If device implementations include direct sensor support  they:                 [C-3-1] MUST correctly declare support of direct channel types and direct report rates level through the isDirectChannelTypeSupported and getHighestDirectReportRateLevel API.              [C-3-2] MUST support at least one of the two sensor direct channel types for all sensors that declare support for sensor direct channel.                                 TYPE_HARDWARE_BUFFER                                   TYPE_MEMORY_FILE                                  SHOULD support event reporting through sensor direct channel for primary sensor (non-wakeup variant) of the following types:                                 TYPE_ACCELEROMETER                                   TYPE_ACCELEROMETER_UNCALIBRATED                                   TYPE_GYROSCOPE                                   TYPE_GYROSCOPE_UNCALIBRATED                                   TYPE_MAGNETIC_FIELD                                   TYPE_MAGNETIC_FIELD_UNCALIBRATED                                      7.3.9. High Fidelity Sensors If device implementations include a set of higher quality sensors as defined in this section  and make available them to third-party apps  they: [C-1-1] MUST identify the capability through the android.hardware.sensor.hifi_sensors feature flag. If device implementations declare android.hardware.sensor.hifi_sensors  they: [C-2-1] MUST have a TYPE_ACCELEROMETER sensor which: MUST have a measurement range between at least -8g and +8g  and is STRONGLY RECOMMENDED to have a measurement range between at least -16g and +16g. MUST have a measurement resolution of at least 2048 LSB/g. MUST have a minimum measurement frequency of 12.5 Hz or lower. MUST have a maximum measurement frequency of 400 Hz or higher; SHOULD support the SensorDirectChannel RATE_VERY_FAST. MUST have a measurement noise not above 400 μg/√Hz. MUST implement a non-wake-up form of this sensor with a buffering capability of at least 3000 sensor events. MUST have a batching power consumption not worse than 3 mW. [C-SR] Is STRONGLY RECOMMENDED to have 3dB measurement bandwidth of at least 80% of Nyquist frequency  and white noise spectrum within this bandwidth. SHOULD have an acceleration random walk less than 30 μg √Hz tested at room temperature. SHOULD have a bias change vs. temperature of ≤ +/- 1 mg/°C. SHOULD have a best-fit line non-linearity of ≤ 0.5%  and sensitivity change vs. temperature of ≤ 0.03%/C°. SHOULD have cross-axis sensitivity of &lt; 2.5 % and variation of cross-axis sensitivity &lt; 0.2% in device operation temperature range. [C-2-2] MUST have a TYPE_ACCELEROMETER_UNCALIBRATED with the same quality requirements as TYPE_ACCELEROMETER. [C-2-3] MUST have a TYPE_GYROSCOPE sensor which: MUST have a measurement range between at least -1000 and +1000 dps. MUST have a measurement resolution of at least 16 LSB/dps. MUST have a minimum measurement frequency of 12.5 Hz or lower. MUST have a maximum measurement frequency of 400 Hz or higher; SHOULD support the SensorDirectChannel RATE_VERY_FAST. MUST have a measurement noise not above 0.014°/s/√Hz. [C-SR] Is STRONGLY RECOMMENDED to have 3dB measurement bandwidth of at least 80% of Nyquist frequency  and white noise spectrum within this bandwidth. SHOULD have a rate random walk less than 0.001 °/s √Hz tested at room temperature. SHOULD have a bias change vs. temperature of ≤ +/- 0.05 °/ s / °C. SHOULD have a sensitivity change vs. temperature of ≤ 0.02% / °C. SHOULD have a best-fit line non-linearity of ≤ 0.2%. SHOULD have a noise density of ≤ 0.007 °/s/√Hz. SHOULD have calibration error less than 0.002 rad/s in temperature range 10 ~ 40 ℃ when device is stationary. SHOULD have g-sensitivity less than 0.1°/s/g. SHOULD have cross-axis sensitivity of &lt; 4.0 % and cross-axis sensitivity variation &lt; 0.3% in device operation temperature range. [C-2-4] MUST have a TYPE_GYROSCOPE_UNCALIBRATED with the same quality requirements as TYPE_GYROSCOPE. [C-2-5] MUST have a TYPE_GEOMAGNETIC_FIELD sensor which: MUST have a measurement range between at least -900 and +900 μT. MUST have a measurement resolution of at least 5 LSB/uT. MUST have a minimum measurement frequency of 5 Hz or lower. MUST have a maximum measurement frequency of 50 Hz or higher. MUST have a measurement noise not above 0.5 uT. [C-2-6] MUST have a TYPE_MAGNETIC_FIELD_UNCALIBRATED with the same quality requirements as TYPE_GEOMAGNETIC_FIELD and in addition: MUST implement a non-wake-up form of this sensor with a buffering capability of at least 600 sensor events. [C-SR] Is STRONGLY RECOMMENDED to have white noise spectrum from 1 Hz to at least 10 Hz when the report rate is 50 Hz or higher. [C-2-7] MUST have a TYPE_PRESSURE sensor which: MUST have a measurement range between at least 300 and 1100 hPa. MUST have a measurement resolution of at least 80 LSB/hPa. MUST have a minimum measurement frequency of 1 Hz or lower. MUST have a maximum measurement frequency of 10 Hz or higher. MUST have a measurement noise not above 2 Pa/√Hz. MUST implement a non-wake-up form of this sensor with a buffering capability of at least 300 sensor events. MUST have a batching power consumption not worse than 2 mW. [C-2-8] MUST have a TYPE_GAME_ROTATION_VECTOR sensor. [C-2-9] MUST have a TYPE_SIGNIFICANT_MOTION sensor which: MUST have a power consumption not worse than 0.5 mW when device is static and 1.5 mW when device is moving. [C-2-10] MUST have a TYPE_STEP_DETECTOR sensor which: MUST implement a non-wake-up form of this sensor with a buffering capability of at least 100 sensor events. MUST have a power consumption not worse than 0.5 mW when device is static and 1.5 mW when device is moving. MUST have a batching power consumption not worse than 4 mW. [C-2-11] MUST have a TYPE_STEP_COUNTER sensor which: MUST have a power consumption not worse than 0.5 mW when device is static and 1.5 mW when device is moving. [C-2-12] MUST have a TILT_DETECTOR sensor which: MUST have a power consumption not worse than 0.5 mW when device is static and 1.5 mW when device is moving. [C-2-13] The event timestamp of the same physical event reported by the Accelerometer  Gyroscope  and Magnetometer MUST be within 2.5 milliseconds of each other. The event timestamp of the same physical event reported by the Accelerometer and Gyroscope SHOULD be within 0.25 milliseconds of each other. [C-2-14] MUST have Gyroscope sensor event timestamps on the same time base as the camera subsystem and within 1 milliseconds of error. [C-2-15] MUST deliver samples to applications within 5 milliseconds from the time when the data is available on any of the above physical sensors to the application. [C-2-16] MUST NOT have a power consumption higher than 0.5 mW when device is static and 2.0 mW when device is moving when any combination of the following sensors are enabled: SENSOR_TYPE_SIGNIFICANT_MOTION SENSOR_TYPE_STEP_DETECTOR SENSOR_TYPE_STEP_COUNTER SENSOR_TILT_DETECTORS [C-2-17] MAY have a TYPE_PROXIMITY sensor  but if present MUST have a minimum buffer capability of 100 sensor events. Note that all power consumption requirements in this section do not include the power consumption of the Application Processor. It is inclusive of the power drawn by the entire sensor chain—the sensor  any supporting circuitry  any dedicated sensor processing system  etc. If device implementations include direct sensor support  they: [C-3-1] MUST correctly declare support of direct channel types and direct report rates level through the isDirectChannelTypeSupported and getHighestDirectReportRateLevel API. [C-3-2] MUST support at least one of the two sensor direct channel types for all sensors that declare support for sensor direct channel. TYPE_HARDWARE_BUFFER TYPE_MEMORY_FILE SHOULD support event reporting through sensor direct channel for primary sensor (non-wakeup variant) of the following types: TYPE_ACCELEROMETER TYPE_ACCELEROMETER_UNCALIBRATED TYPE_GYROSCOPE TYPE_GYROSCOPE_UNCALIBRATED TYPE_MAGNETIC_FIELD TYPE_MAGNETIC_FIELD_UNCALIBRATED <h4 id=",https://developer.android.com ,TYPE_ACCELEROMETER_UNCALIBRATED TILT_DETECTOR SENSOR_TYPE_STEP_DETECTOR SENSOR_TYPE_SIGNIFICANT_MOTION TYPE_HARDWARE_BUFFER TYPE_GYROSCOPE_UNCALIBRATED TYPE_MAGNETIC_FIELD_UNCALIBRATED TYPE_PRESSURE TYPE_GYROSCOPE TYPE_GEOMAGNETIC_FIELD TYPE_STEP_DETECTOR TYPE_MEMORY_FILE SENSOR_TYPE_STEP_COUNTER TYPE_SIGNIFICANT_MOTION SENSOR_TILT_DETECTORS TYPE_STEP_COUNTER TYPE_PROXIMITY TYPE_ACCELEROMETER RATE_VERY_FAST TYPE_MAGNETIC_FIELD TYPE_GAME_ROTATION_VECTOR android.hardware.sensor.hifi_sensors ,Last augmented column
,7.3.9,C-1-1,7.3.9/C-1-1,,,,,,key=[7.3.9/C-1-1]: [C-1-1] MUST identify the capability through the android.hardware.sensor.hifi_sensors feature flag. If device implementations declare android.hardware.sensor.hifi_sensors  they: ,,android.hardware.sensor.hifi_sensors ,Last augmented column
,7.3.9,C-2-1,7.3.9/C-2-1,,,,,,key=[7.3.9/C-2-1]: [C-2-1] MUST have a TYPE_ACCELEROMETER sensor which: MUST have a measurement range between at least -8g and +8g  and is STRONGLY RECOMMENDED to have a measurement range between at least -16g and +16g. MUST have a measurement resolution of at least 2048 LSB/g. MUST have a minimum measurement frequency of 12.5 Hz or lower. MUST have a maximum measurement frequency of 400 Hz or higher; SHOULD support the SensorDirectChannel RATE_VERY_FAST. MUST have a measurement noise not above 400 μg/√Hz. MUST implement a non-wake-up form of this sensor with a buffering capability of at least 3000 sensor events. MUST have a batching power consumption not worse than 3 mW. ,https://developer.android.com ,TYPE_ACCELEROMETER RATE_VERY_FAST ,Last augmented column
,7.3.9,C-2-2,7.3.9/C-2-2,,,,,,key=[7.3.9/C-2-2]: [C-2-2] MUST have a TYPE_ACCELEROMETER_UNCALIBRATED with the same quality requirements as TYPE_ACCELEROMETER. ,,TYPE_ACCELEROMETER TYPE_ACCELEROMETER_UNCALIBRATED ,Last augmented column
,7.3.9,C-2-3,7.3.9/C-2-3,,,,,,key=[7.3.9/C-2-3]: [C-2-3] MUST have a TYPE_GYROSCOPE sensor which: MUST have a measurement range between at least -1000 and +1000 dps. MUST have a measurement resolution of at least 16 LSB/dps. MUST have a minimum measurement frequency of 12.5 Hz or lower. MUST have a maximum measurement frequency of 400 Hz or higher; SHOULD support the SensorDirectChannel RATE_VERY_FAST. MUST have a measurement noise not above 0.014°/s/√Hz. ,https://developer.android.com ,TYPE_GYROSCOPE RATE_VERY_FAST ,Last augmented column
,7.3.9,C-2-4,7.3.9/C-2-4,,,,,,key=[7.3.9/C-2-4]: [C-2-4] MUST have a TYPE_GYROSCOPE_UNCALIBRATED with the same quality requirements as TYPE_GYROSCOPE. ,,TYPE_GYROSCOPE TYPE_GYROSCOPE_UNCALIBRATED ,Last augmented column
,7.3.9,C-2-5,7.3.9/C-2-5,,,,,,key=[7.3.9/C-2-5]: [C-2-5] MUST have a TYPE_GEOMAGNETIC_FIELD sensor which: MUST have a measurement range between at least -900 and +900 μT. MUST have a measurement resolution of at least 5 LSB/uT. MUST have a minimum measurement frequency of 5 Hz or lower. MUST have a maximum measurement frequency of 50 Hz or higher. MUST have a measurement noise not above 0.5 uT. ,,TYPE_GEOMAGNETIC_FIELD ,Last augmented column
,7.3.9,C-2-6,7.3.9/C-2-6,,,,,,key=[7.3.9/C-2-6]: [C-2-6] MUST have a TYPE_MAGNETIC_FIELD_UNCALIBRATED with the same quality requirements as TYPE_GEOMAGNETIC_FIELD and in addition: MUST implement a non-wake-up form of this sensor with a buffering capability of at least 600 sensor events. ,,TYPE_GEOMAGNETIC_FIELD TYPE_MAGNETIC_FIELD_UNCALIBRATED ,Last augmented column
,7.3.9,C-2-7,7.3.9/C-2-7,,,,,,key=[7.3.9/C-2-7]: [C-2-7] MUST have a TYPE_PRESSURE sensor which: MUST have a measurement range between at least 300 and 1100 hPa. MUST have a measurement resolution of at least 80 LSB/hPa. MUST have a minimum measurement frequency of 1 Hz or lower. MUST have a maximum measurement frequency of 10 Hz or higher. MUST have a measurement noise not above 2 Pa/√Hz. MUST implement a non-wake-up form of this sensor with a buffering capability of at least 300 sensor events. MUST have a batching power consumption not worse than 2 mW. ,,TYPE_PRESSURE ,Last augmented column
,7.3.9,C-2-8,7.3.9/C-2-8,,,,,,key=[7.3.9/C-2-8]: [C-2-8] MUST have a TYPE_GAME_ROTATION_VECTOR sensor. ,,TYPE_GAME_ROTATION_VECTOR ,Last augmented column
,7.3.9,C-2-9,7.3.9/C-2-9,,,,,,key=[7.3.9/C-2-9]: [C-2-9] MUST have a TYPE_SIGNIFICANT_MOTION sensor which: MUST have a power consumption not worse than 0.5 mW when device is static and 1.5 mW when device is moving. ,,TYPE_SIGNIFICANT_MOTION ,Last augmented column
,7.3.9,C-2-10,7.3.9/C-2-10,,,,,,key=[7.3.9/C-2-10]: [C-2-10] MUST have a TYPE_STEP_DETECTOR sensor which: MUST implement a non-wake-up form of this sensor with a buffering capability of at least 100 sensor events. MUST have a power consumption not worse than 0.5 mW when device is static and 1.5 mW when device is moving. MUST have a batching power consumption not worse than 4 mW. ,,TYPE_STEP_DETECTOR ,Last augmented column
,7.3.9,C-2-11,7.3.9/C-2-11,,,,,,key=[7.3.9/C-2-11]: [C-2-11] MUST have a TYPE_STEP_COUNTER sensor which: MUST have a power consumption not worse than 0.5 mW when device is static and 1.5 mW when device is moving. ,,TYPE_STEP_COUNTER ,Last augmented column
,7.3.9,C-2-12,7.3.9/C-2-12,,,,,,key=[7.3.9/C-2-12]: [C-2-12] MUST have a TILT_DETECTOR sensor which: MUST have a power consumption not worse than 0.5 mW when device is static and 1.5 mW when device is moving. ,,TILT_DETECTOR ,Last augmented column
,7.3.9,C-2-13,7.3.9/C-2-13,,,,,,key=[7.3.9/C-2-13]: [C-2-13] The event timestamp of the same physical event reported by the Accelerometer  Gyroscope  and Magnetometer MUST be within 2.5 milliseconds of each other. The event timestamp of the same physical event reported by the Accelerometer and Gyroscope SHOULD be within 0.25 milliseconds of each other. ,,,Last augmented column
,7.3.9,C-2-14,7.3.9/C-2-14,,,,,,key=[7.3.9/C-2-14]: [C-2-14] MUST have Gyroscope sensor event timestamps on the same time base as the camera subsystem and within 1 milliseconds of error. ,,,Last augmented column
,7.3.9,C-2-15,7.3.9/C-2-15,,,,,,key=[7.3.9/C-2-15]: [C-2-15] MUST deliver samples to applications within 5 milliseconds from the time when the data is available on any of the above physical sensors to the application. ,,,Last augmented column
,7.3.9,C-2-16,7.3.9/C-2-16,,,,,,key=[7.3.9/C-2-16]: [C-2-16] MUST NOT have a power consumption higher than 0.5 mW when device is static and 2.0 mW when device is moving when any combination of the following sensors are enabled: SENSOR_TYPE_SIGNIFICANT_MOTION SENSOR_TYPE_STEP_DETECTOR SENSOR_TYPE_STEP_COUNTER SENSOR_TILT_DETECTORS ,,SENSOR_TYPE_STEP_COUNTER SENSOR_TILT_DETECTORS SENSOR_TYPE_SIGNIFICANT_MOTION SENSOR_TYPE_STEP_DETECTOR ,Last augmented column
,7.3.9,C-2-17,7.3.9/C-2-17,,,,,,key=[7.3.9/C-2-17]: [C-2-17] MAY have a TYPE_PROXIMITY sensor  but if present MUST have a minimum buffer capability of 100 sensor events. Note that all power consumption requirements in this section do not include the power consumption of the Application Processor. It is inclusive of the power drawn by the entire sensor chain—the sensor  any supporting circuitry  any dedicated sensor processing system  etc. If device implementations include direct sensor support  they: ,,TYPE_PROXIMITY ,Last augmented column
,7.3.9,C-3-1,7.3.9/C-3-1,,,,,,key=[7.3.9/C-3-1]: [C-3-1] MUST correctly declare support of direct channel types and direct report rates level through the isDirectChannelTypeSupported and getHighestDirectReportRateLevel API. ,https://developer.android.com ,,Last augmented column
,7.3.9,C-3-2,7.3.9/C-3-2,,,,,,key=[7.3.9/C-3-2]: [C-3-2] MUST support at least one of the two sensor direct channel types for all sensors that declare support for sensor direct channel. TYPE_HARDWARE_BUFFER TYPE_MEMORY_FILE SHOULD support event reporting through sensor direct channel for primary sensor (non-wakeup variant) of the following types: TYPE_ACCELEROMETER TYPE_ACCELEROMETER_UNCALIBRATED TYPE_GYROSCOPE TYPE_GYROSCOPE_UNCALIBRATED TYPE_MAGNETIC_FIELD TYPE_MAGNETIC_FIELD_UNCALIBRATED <h4 id=,https://developer.android.com ,TYPE_ACCELEROMETER_UNCALIBRATED TYPE_MAGNETIC_FIELD_UNCALIBRATED TYPE_ACCELEROMETER TYPE_HARDWARE_BUFFER TYPE_GYROSCOPE_UNCALIBRATED TYPE_GYROSCOPE TYPE_MAGNETIC_FIELD TYPE_MEMORY_FILE ,Last augmented column
,7.3.10,,7.3.10,,,,,,"""7_3_10_biometric_sensors"" data-text=""       7.3.10. Biometric Sensors     "">       7.3.10. Biometric Sensors                 For additional background on Measuring Biometric Unlock Security  please see Measuring Biometric Security documentation.                 If device implementations include a secure lock screen  they:                 SHOULD include a biometric sensor                        Biometric sensors can be classified as Class 3 (formerly Strong)  Class 2 (formerly Weak)  or Class 1 (formerly Convenience) based on their spoof and imposter acceptance rates  and on the security of the biometric pipeline. This classification determines the capabilities the biometric sensor has to interface with the platform and with third-party applications. Sensors are classified as Class 1 by default  and need to meet additional requirements as detailed below if they wish to be classified as either Class 2 or Class 3. Both Class 2 and Class 3 biometrics get additional capabilities as detailed below.                 If device implementations make a biometric sensor available to third-party applications via android.hardware.biometrics.BiometricManager  android.hardware.biometrics.BiometricPrompt  and android.provider.Settings.ACTION_BIOMETRIC_ENROLL  they:                 [C-4-1] MUST meet the requirements for Class 3 or Class 2 biometric as defined in this document.              [C-4-2] MUST recognize and honor each parameter name defined as a constant in the Authenticators class and any combinations thereof. Conversely  MUST NOT honor or recognize integer constants passed to the canAuthenticate(int) and setAllowedAuthenticators(int) methods other than those documented as public constants in Authenticators and any combinations thereof.              [C-4-3] MUST implement the ACTION_BIOMETRIC_ENROLL action on devices that have either Class 3 or Class 2 biometrics. This action MUST only present the enrollment entry points for Class 3 or Class 2 biometrics.                        If device implementations support passive biometrics  they:                 [C-5-1] MUST by default require an additional confirmation step (e.g. a button press).              [C-SR] Are STRONGLY RECOMMENDED to have a setting to allow users to override application preference and always require accompanying confirmation step.              [C-SR] Are STRONGLY RECOMMENDED to have the confirm action be secured such that an operating system or kernel compromise cannot spoof it. For example  this means that the confirm action based on a physical button is routed through an input-only general-purpose input/output (GPIO) pin of a secure element (SE) that cannot be driven by any other means than a physical button press.              [C-5-2] MUST additionally implement an implicit authentication flow (without confirmation step) corresponding to setConfirmationRequired(boolean)  which applications can set to utilize for sign-in flows.                        If device implementations have multiple biometric sensors  they:                 [C-SR] Are STRONGLY RECOMMENDED to require only one biometric be confirmed per authentication (e.g. if both fingerprint and face sensors are available on the device  onAuthenticationSucceeded should be sent after any one of them is confirmed).                        In order for device implementations to allow access to keystore keys to third-party applications  they:                 [C-6-1] MUST meet the requirements for Class 3 as defined in this section below.              [C-6-2] MUST present only Class 3 biometrics when the authentication requires BIOMETRIC_STRONG  or the authentication is invoked with a CryptoObject.                        If device implementations wish to treat a biometric sensor as Class 1 (formerly Convenience)  they:                 [C-1-1] MUST have a false acceptance rate less than 0.002%.              [C-1-2] MUST disclose that this mode may be less secure than a strong PIN  pattern  or password and clearly enumerate the risks of enabling it  if the spoof and imposter acceptance rates are higher than 7% as measured by the Android Biometrics Test Protocols.              [C-1-3] MUST rate limit attempts for at least 30 seconds after five false trials for biometric verification - where a false trial is one with an adequate capture quality (BIOMETRIC_ACQUIRED_GOOD) that does not match an enrolled biometric.              [C-1-4] MUST prevent adding new biometrics without first establishing a chain of trust by having the user confirm existing or add a new device credential (PIN/pattern/password) that's secured by TEE; the Android Open Source Project implementation provides the mechanism in the framework to do so.              [C-1-5] MUST completely remove all identifiable biometric data for a user when the user's account is removed (including via a factory reset).              [C-1-6] MUST honor the individual flag for that biometric (i.e. DevicePolicyManager.KEYGUARD_DISABLE_FINGERPRINT  DevicePolicymanager.KEYGUARD_DISABLE_FACE   or DevicePolicymanager.KEYGUARD_DISABLE_IRIS ).              [C-1-7] MUST challenge the user for the recommended primary authentication (e.g. PIN  pattern  password) once every 24 hours or less for new devices launching with Android version 10  once every 72 hours or less for devices upgrading from earlier Android version.                                  [C-1-8] MUST challenge the user for the recommended primary authentication (eg: PIN  pattern  password) after one of the following:                             a 4-hour idle timeout period  OR                      3 failed biometric authentication attempts.                      The idle timeout period and the failed authentication count is reset after any successful confirmation of the device credentials.                                        Upgrading devices from an earlier Android version can be exempted from C-1-8. * [C-SR] Are STRONGLY RECOMMENDED to use the logic in the framework provided by the Android Open Source Project to enforce constraints specified in [C-1-7] and [C-1-8] for new devices. * [C-SR] Are STRONGLY RECOMMENDED to have a false rejection rate of less than 10%  as measured on the device. * [C-SR] Are STRONGLY RECOMMENDED to have a latency below 1 second  measured from when the biometric is detected  until the screen is unlocked  for each enrolled biometric.                                 If device implementations wish to treat a biometric sensor as Class 2 (formerly Weak)  they:                 [C-2-1] MUST meet all requirements for Class 1 above.              [C-2-2] MUST have a spoof and imposter acceptance rate not higher than 20% as measured by the Android Biometrics Test Protocols.              [C-2-3] MUST perform the biometric matching in an isolated execution environment outside Android user or kernel space  such as the Trusted Execution Environment (TEE)  or on a chip with a secure channel to the isolated execution environment.              [C-2-4] MUST have all identifiable data encrypted and cryptographically authenticated such that they cannot be acquired  read or altered outside of the isolated execution environment or a chip with a secure channel to the isolated execution environment as documented in the implementation guidelines on the Android Open Source Project site.              [C-2-5] For camera based biometrics  while biometric based authentication or enrollment is happening:                    MUST operate the camera in a mode that prevents camera frames from being read or altered outside the isolated execution environment or a chip with a secure channel to the isolated execution environment.                      For RGB single-camera solutions  the camera frames CAN be readable outside the isolated execution environment to support operations such as preview for enrollment  but MUST still NOT be alterable.                                  [C-2-6] MUST NOT enable third-party applications to distinguish between individual biometric enrollments.              [C-2-7] MUST NOT allow unencrypted access to identifiable biometric data or any data derived from it (such as embeddings) to the Application Processor outside the context of the TEE.                                  [C-2-8] MUST have a secure processing pipeline such that an operating system or kernel compromise cannot allow data to be directly injected to falsely authenticate as the user.                             If device implementations are already launched on an earlier Android version and cannot meet the requirement C-2-8 through a system software update  they MAY be exempted from the requirement.                                           [C-SR] Are STRONGLY RECOMMENDED to include liveness detection for all biometric modalities and attention detection for Face biometrics.                                 If device implementations wish to treat a biometric sensor as Class 3 (formerly Strong)  they:                 [C-3-1] MUST meet all the requirements of Class 2 above  except for [C-1-7] and [C-1-8]. Upgrading devices from an earlier Android version are not exempted from C-2-7.              [C-3-2] MUST have a hardware-backed keystore implementation.              [C-3-3] MUST have a spoof and imposter acceptance rate not higher than 7% as measured by the Android Biometrics Test Protocols.              [C-3-4] MUST challenge the user for the recommended primary authentication (e.g. PIN  pattern  password) once every 72 hours or less.                  7.3.10. Biometric Sensors For additional background on Measuring Biometric Unlock Security  please see Measuring Biometric Security documentation. If device implementations include a secure lock screen  they: SHOULD include a biometric sensor Biometric sensors can be classified as Class 3 (formerly Strong)  Class 2 (formerly Weak)  or Class 1 (formerly Convenience) based on their spoof and imposter acceptance rates  and on the security of the biometric pipeline. This classification determines the capabilities the biometric sensor has to interface with the platform and with third-party applications. Sensors are classified as Class 1 by default  and need to meet additional requirements as detailed below if they wish to be classified as either Class 2 or Class 3. Both Class 2 and Class 3 biometrics get additional capabilities as detailed below. If device implementations make a biometric sensor available to third-party applications via android.hardware.biometrics.BiometricManager  android.hardware.biometrics.BiometricPrompt  and android.provider.Settings.ACTION_BIOMETRIC_ENROLL  they: [C-4-1] MUST meet the requirements for Class 3 or Class 2 biometric as defined in this document. [C-4-2] MUST recognize and honor each parameter name defined as a constant in the Authenticators class and any combinations thereof. Conversely  MUST NOT honor or recognize integer constants passed to the canAuthenticate(int) and setAllowedAuthenticators(int) methods other than those documented as public constants in Authenticators and any combinations thereof. [C-4-3] MUST implement the ACTION_BIOMETRIC_ENROLL action on devices that have either Class 3 or Class 2 biometrics. This action MUST only present the enrollment entry points for Class 3 or Class 2 biometrics. If device implementations support passive biometrics  they: [C-5-1] MUST by default require an additional confirmation step (e.g. a button press). [C-SR] Are STRONGLY RECOMMENDED to have a setting to allow users to override application preference and always require accompanying confirmation step. [C-SR] Are STRONGLY RECOMMENDED to have the confirm action be secured such that an operating system or kernel compromise cannot spoof it. For example  this means that the confirm action based on a physical button is routed through an input-only general-purpose input/output (GPIO) pin of a secure element (SE) that cannot be driven by any other means than a physical button press. [C-5-2] MUST additionally implement an implicit authentication flow (without confirmation step) corresponding to setConfirmationRequired(boolean)  which applications can set to utilize for sign-in flows. If device implementations have multiple biometric sensors  they: [C-SR] Are STRONGLY RECOMMENDED to require only one biometric be confirmed per authentication (e.g. if both fingerprint and face sensors are available on the device  onAuthenticationSucceeded should be sent after any one of them is confirmed). In order for device implementations to allow access to keystore keys to third-party applications  they: [C-6-1] MUST meet the requirements for Class 3 as defined in this section below. [C-6-2] MUST present only Class 3 biometrics when the authentication requires BIOMETRIC_STRONG  or the authentication is invoked with a CryptoObject. If device implementations wish to treat a biometric sensor as Class 1 (formerly Convenience)  they: [C-1-1] MUST have a false acceptance rate less than 0.002%. [C-1-2] MUST disclose that this mode may be less secure than a strong PIN  pattern  or password and clearly enumerate the risks of enabling it  if the spoof and imposter acceptance rates are higher than 7% as measured by the Android Biometrics Test Protocols. [C-1-3] MUST rate limit attempts for at least 30 seconds after five false trials for biometric verification - where a false trial is one with an adequate capture quality (BIOMETRIC_ACQUIRED_GOOD) that does not match an enrolled biometric. [C-1-4] MUST prevent adding new biometrics without first establishing a chain of trust by having the user confirm existing or add a new device credential (PIN/pattern/password) that's secured by TEE; the Android Open Source Project implementation provides the mechanism in the framework to do so. [C-1-5] MUST completely remove all identifiable biometric data for a user when the user's account is removed (including via a factory reset). [C-1-6] MUST honor the individual flag for that biometric (i.e. DevicePolicyManager.KEYGUARD_DISABLE_FINGERPRINT  DevicePolicymanager.KEYGUARD_DISABLE_FACE   or DevicePolicymanager.KEYGUARD_DISABLE_IRIS ). [C-1-7] MUST challenge the user for the recommended primary authentication (e.g. PIN  pattern  password) once every 24 hours or less for new devices launching with Android version 10  once every 72 hours or less for devices upgrading from earlier Android version. [C-1-8] MUST challenge the user for the recommended primary authentication (eg: PIN  pattern  password) after one of the following: a 4-hour idle timeout period  OR 3 failed biometric authentication attempts. The idle timeout period and the failed authentication count is reset after any successful confirmation of the device credentials. Upgrading devices from an earlier Android version can be exempted from C-1-8. * [C-SR] Are STRONGLY RECOMMENDED to use the logic in the framework provided by the Android Open Source Project to enforce constraints specified in [C-1-7] and [C-1-8] for new devices. * [C-SR] Are STRONGLY RECOMMENDED to have a false rejection rate of less than 10%  as measured on the device. * [C-SR] Are STRONGLY RECOMMENDED to have a latency below 1 second  measured from when the biometric is detected  until the screen is unlocked  for each enrolled biometric. If device implementations wish to treat a biometric sensor as Class 2 (formerly Weak)  they: [C-2-1] MUST meet all requirements for Class 1 above. [C-2-2] MUST have a spoof and imposter acceptance rate not higher than 20% as measured by the Android Biometrics Test Protocols. [C-2-3] MUST perform the biometric matching in an isolated execution environment outside Android user or kernel space  such as the Trusted Execution Environment (TEE)  or on a chip with a secure channel to the isolated execution environment. [C-2-4] MUST have all identifiable data encrypted and cryptographically authenticated such that they cannot be acquired  read or altered outside of the isolated execution environment or a chip with a secure channel to the isolated execution environment as documented in the implementation guidelines on the Android Open Source Project site. [C-2-5] For camera based biometrics  while biometric based authentication or enrollment is happening: MUST operate the camera in a mode that prevents camera frames from being read or altered outside the isolated execution environment or a chip with a secure channel to the isolated execution environment. For RGB single-camera solutions  the camera frames CAN be readable outside the isolated execution environment to support operations such as preview for enrollment  but MUST still NOT be alterable. [C-2-6] MUST NOT enable third-party applications to distinguish between individual biometric enrollments. [C-2-7] MUST NOT allow unencrypted access to identifiable biometric data or any data derived from it (such as embeddings) to the Application Processor outside the context of the TEE. [C-2-8] MUST have a secure processing pipeline such that an operating system or kernel compromise cannot allow data to be directly injected to falsely authenticate as the user. If device implementations are already launched on an earlier Android version and cannot meet the requirement C-2-8 through a system software update  they MAY be exempted from the requirement. [C-SR] Are STRONGLY RECOMMENDED to include liveness detection for all biometric modalities and attention detection for Face biometrics. If device implementations wish to treat a biometric sensor as Class 3 (formerly Strong)  they: [C-3-1] MUST meet all the requirements of Class 2 above  except for [C-1-7] and [C-1-8]. Upgrading devices from an earlier Android version are not exempted from C-2-7. [C-3-2] MUST have a hardware-backed keystore implementation. [C-3-3] MUST have a spoof and imposter acceptance rate not higher than 7% as measured by the Android Biometrics Test Protocols. [C-3-4] MUST challenge the user for the recommended primary authentication (e.g. PIN  pattern  password) once every 72 hours or less. <h4 id=",https://source.android.com https://developer.android.com ,BIOMETRIC_STRONG KEYGUARD_DISABLE_FACE KEYGUARD_DISABLE_FINGERPRINT KEYGUARD_DISABLE_IRIS BIOMETRIC_ACQUIRED_GOOD ACTION_BIOMETRIC_ENROLL android.hardware.biometrics.BiometricManager DevicePolicymanager.KEYGUARD_DISABLE_IRIS android.provider.Settings.ACTION_BIOMETRIC_ENROLL DevicePolicymanager.KEYGUARD_DISABLE_FACE DevicePolicyManager.KEYGUARD_DISABLE_FINGERPRINT android.hardware.biometrics.BiometricPrompt ,Last augmented column
,7.3.10,C-4-1,7.3.10/C-4-1,,,,,,key=[7.3.10/C-4-1]: [C-4-1] MUST meet the requirements for Class 3 or Class 2 biometric as defined in this document. ,,,Last augmented column
,7.3.10,C-4-2,7.3.10/C-4-2,,,,,,key=[7.3.10/C-4-2]: [C-4-2] MUST recognize and honor each parameter name defined as a constant in the Authenticators class and any combinations thereof. Conversely  MUST NOT honor or recognize integer constants passed to the canAuthenticate(int) and setAllowedAuthenticators(int) methods other than those documented as public constants in Authenticators and any combinations thereof. ,https://developer.android.com ,,Last augmented column
,7.3.10,C-4-3,7.3.10/C-4-3,,,,,,key=[7.3.10/C-4-3]: [C-4-3] MUST implement the ACTION_BIOMETRIC_ENROLL action on devices that have either Class 3 or Class 2 biometrics. This action MUST only present the enrollment entry points for Class 3 or Class 2 biometrics. If device implementations support passive biometrics  they: ,https://developer.android.com ,ACTION_BIOMETRIC_ENROLL ,Last augmented column
,7.3.10,C-5-1,7.3.10/C-5-1,,,,,,key=[7.3.10/C-5-1]: [C-5-1] MUST by default require an additional confirmation step (e.g. a button press). ,,,Last augmented column
,7.3.10,C-5-2,7.3.10/C-5-2,,,,,,key=[7.3.10/C-5-2]: [C-5-2] MUST additionally implement an implicit authentication flow (without confirmation step) corresponding to setConfirmationRequired(boolean)  which applications can set to utilize for sign-in flows. If device implementations have multiple biometric sensors  they: ,https://developer.android.com ,,Last augmented column
,7.3.10,C-6-1,7.3.10/C-6-1,,,,,,key=[7.3.10/C-6-1]: [C-6-1] MUST meet the requirements for Class 3 as defined in this section below. ,,,Last augmented column
,7.3.10,C-6-2,7.3.10/C-6-2,,,,,,key=[7.3.10/C-6-2]: [C-6-2] MUST present only Class 3 biometrics when the authentication requires BIOMETRIC_STRONG  or the authentication is invoked with a CryptoObject. If device implementations wish to treat a biometric sensor as Class 1 (formerly Convenience)  they: ,https://developer.android.com ,BIOMETRIC_STRONG ,Last augmented column
,7.3.10,C-1-1,7.3.10/C-1-1,,,,,,key=[7.3.10/C-1-1]: [C-1-1] MUST have a false acceptance rate less than 0.002%. ,,,Last augmented column
,7.3.10,C-1-2,7.3.10/C-1-2,,,,,,key=[7.3.10/C-1-2]: [C-1-2] MUST disclose that this mode may be less secure than a strong PIN  pattern  or password and clearly enumerate the risks of enabling it  if the spoof and imposter acceptance rates are higher than 7% as measured by the Android Biometrics Test Protocols. ,https://source.android.com ,,Last augmented column
,7.3.10,C-1-3,7.3.10/C-1-3,,,,,,key=[7.3.10/C-1-3]: [C-1-3] MUST rate limit attempts for at least 30 seconds after five false trials for biometric verification - where a false trial is one with an adequate capture quality (BIOMETRIC_ACQUIRED_GOOD) that does not match an enrolled biometric. ,https://developer.android.com ,BIOMETRIC_ACQUIRED_GOOD ,Last augmented column
,7.3.10,C-1-4,7.3.10/C-1-4,,,,,,key=[7.3.10/C-1-4]: [C-1-4] MUST prevent adding new biometrics without first establishing a chain of trust by having the user confirm existing or add a new device credential (PIN/pattern/password) that's secured by TEE; the Android Open Source Project implementation provides the mechanism in the framework to do so. ,,,Last augmented column
,7.3.10,C-1-5,7.3.10/C-1-5,,,,,,key=[7.3.10/C-1-5]: [C-1-5] MUST completely remove all identifiable biometric data for a user when the user's account is removed (including via a factory reset). ,,,Last augmented column
,7.3.10,C-1-6,7.3.10/C-1-6,,,,,,key=[7.3.10/C-1-6]: [C-1-6] MUST honor the individual flag for that biometric (i.e. DevicePolicyManager.KEYGUARD_DISABLE_FINGERPRINT  DevicePolicymanager.KEYGUARD_DISABLE_FACE   or DevicePolicymanager.KEYGUARD_DISABLE_IRIS ). ,https://developer.android.com ,KEYGUARD_DISABLE_FINGERPRINT KEYGUARD_DISABLE_IRIS KEYGUARD_DISABLE_FACE DevicePolicymanager.KEYGUARD_DISABLE_FACE DevicePolicymanager.KEYGUARD_DISABLE_IRIS DevicePolicyManager.KEYGUARD_DISABLE_FINGERPRINT ,Last augmented column
,7.3.10,C-1-7,7.3.10/C-1-7,,,,,,key=[7.3.10/C-1-7]: [C-1-7] MUST challenge the user for the recommended primary authentication (e.g. PIN  pattern  password) once every 24 hours or less for new devices launching with Android version 10  once every 72 hours or less for devices upgrading from earlier Android version.  | C-1-7] and  | C-1-7] and ,,,Last augmented column
,7.3.10,C-1-8,7.3.10/C-1-8,,,,,,key=[7.3.10/C-1-8]: [C-1-8] MUST challenge the user for the recommended primary authentication (eg: PIN  pattern  password) after one of the following: a 4-hour idle timeout period  OR 3 failed biometric authentication attempts. The idle timeout period and the failed authentication count is reset after any successful confirmation of the device credentials. Upgrading devices from an earlier Android version can be exempted from C-1-8. *  | C-1-8] for new devices. *  | C-1-8]. Upgrading devices from an earlier Android version are not exempted from C-2-7. ,,,Last augmented column
,7.3.10,C-2-1,7.3.10/C-2-1,,,,,,key=[7.3.10/C-2-1]: [C-2-1] MUST meet all requirements for Class 1 above. ,,,Last augmented column
,7.3.10,C-2-2,7.3.10/C-2-2,,,,,,key=[7.3.10/C-2-2]: [C-2-2] MUST have a spoof and imposter acceptance rate not higher than 20% as measured by the Android Biometrics Test Protocols. ,https://source.android.com ,,Last augmented column
,7.3.10,C-2-3,7.3.10/C-2-3,,,,,,key=[7.3.10/C-2-3]: [C-2-3] MUST perform the biometric matching in an isolated execution environment outside Android user or kernel space  such as the Trusted Execution Environment (TEE)  or on a chip with a secure channel to the isolated execution environment. ,,,Last augmented column
,7.3.10,C-2-4,7.3.10/C-2-4,,,,,,key=[7.3.10/C-2-4]: [C-2-4] MUST have all identifiable data encrypted and cryptographically authenticated such that they cannot be acquired  read or altered outside of the isolated execution environment or a chip with a secure channel to the isolated execution environment as documented in the implementation guidelines on the Android Open Source Project site. ,https://source.android.com ,,Last augmented column
,7.3.10,C-2-5,7.3.10/C-2-5,,,,,,key=[7.3.10/C-2-5]: [C-2-5] For camera based biometrics  while biometric based authentication or enrollment is happening: MUST operate the camera in a mode that prevents camera frames from being read or altered outside the isolated execution environment or a chip with a secure channel to the isolated execution environment. For RGB single-camera solutions  the camera frames CAN be readable outside the isolated execution environment to support operations such as preview for enrollment  but MUST still NOT be alterable. ,,,Last augmented column
,7.3.10,C-2-6,7.3.10/C-2-6,,,,,,key=[7.3.10/C-2-6]: [C-2-6] MUST NOT enable third-party applications to distinguish between individual biometric enrollments. ,,,Last augmented column
,7.3.10,C-2-7,7.3.10/C-2-7,,,,,,key=[7.3.10/C-2-7]: [C-2-7] MUST NOT allow unencrypted access to identifiable biometric data or any data derived from it (such as embeddings) to the Application Processor outside the context of the TEE. ,,,Last augmented column
,7.3.10,C-2-8,7.3.10/C-2-8,,,,,,key=[7.3.10/C-2-8]: [C-2-8] MUST have a secure processing pipeline such that an operating system or kernel compromise cannot allow data to be directly injected to falsely authenticate as the user. If device implementations are already launched on an earlier Android version and cannot meet the requirement C-2-8 through a system software update  they MAY be exempted from the requirement. ,,,Last augmented column
,7.3.10,C-3-1,7.3.10/C-3-1,,,,,,key=[7.3.10/C-3-1]: [C-3-1] MUST meet all the requirements of Class 2 above  except for ,,,Last augmented column
,7.3.10,C-3-2,7.3.10/C-3-2,,,,,,key=[7.3.10/C-3-2]: [C-3-2] MUST have a hardware-backed keystore implementation. ,,,Last augmented column
,7.3.10,C-3-3,7.3.10/C-3-3,,,,,,key=[7.3.10/C-3-3]: [C-3-3] MUST have a spoof and imposter acceptance rate not higher than 7% as measured by the Android Biometrics Test Protocols. ,https://source.android.com ,,Last augmented column
,7.3.10,C-3-4,7.3.10/C-3-4,,,,,,key=[7.3.10/C-3-4]: [C-3-4] MUST challenge the user for the recommended primary authentication (e.g. PIN  pattern  password) once every 72 hours or less. <h4 id=,,,Last augmented column
,7.3.12,,7.3.12,,,,,,"""7_3_12_pose_sensor"" data-text=""       7.3.12. Pose Sensor     "">       7.3.12. Pose Sensor                 Device implementations:                 MAY support pose sensor with 6 degrees of freedom.                        If device implementations support pose sensor with 6 degrees of freedom  they:                 [C-1-1] MUST implement and report TYPE_POSE_6DOF sensor.              [C-1-2] MUST be more accurate than the rotation vector alone.                  7.3.12. Pose Sensor Device implementations: MAY support pose sensor with 6 degrees of freedom. If device implementations support pose sensor with 6 degrees of freedom  they: [C-1-1] MUST implement and report TYPE_POSE_6DOF sensor. [C-1-2] MUST be more accurate than the rotation vector alone. <h4 id=",https://developer.android.com ,TYPE_POSE_ ,Last augmented column
,7.3.12,C-1-1,7.3.12/C-1-1,,,,,,key=[7.3.12/C-1-1]: [C-1-1] MUST implement and report TYPE_POSE_6DOF sensor. ,https://developer.android.com ,TYPE_POSE_ ,Last augmented column
,7.3.12,C-1-2,7.3.12/C-1-2,,,,,,key=[7.3.12/C-1-2]: [C-1-2] MUST be more accurate than the rotation vector alone. <h4 id=,,,Last augmented column
,7.3.13,,7.3.13,,,,,,"""7_3_13_hinge_angle_sensor"" data-text=""       7.3.13. Hinge Angle Sensor     "">       7.3.13. Hinge Angle Sensor                 If device implementations support a hinge angle sensor  they:                 [C-1-1] MUST implement and report TYPE_HINGLE_ANGLE.              [C-1-2] MUST support at least two readings between 0 and 360 degrees (inclusive i.e including 0 and 360 degrees).              [C-1-3] MUST return a wakeup sensor for getDefaultSensor(SENSOR_TYPE_HINGE_ANGLE).                  7.3.13. Hinge Angle Sensor If device implementations support a hinge angle sensor  they: [C-1-1] MUST implement and report TYPE_HINGLE_ANGLE. [C-1-2] MUST support at least two readings between 0 and 360 degrees (inclusive i.e including 0 and 360 degrees). [C-1-3] MUST return a wakeup sensor for getDefaultSensor(SENSOR_TYPE_HINGE_ANGLE). <h3 id=",https://developer.android.com ,SENSOR_TYPE_HINGE_ANGLE TYPE_HINGLE_ANGLE ,Last augmented column
,7.3.13,C-1-1,7.3.13/C-1-1,,,,,,key=[7.3.13/C-1-1]: [C-1-1] MUST implement and report TYPE_HINGLE_ANGLE. ,https://developer.android.com ,TYPE_HINGLE_ANGLE ,Last augmented column
,7.3.13,C-1-2,7.3.13/C-1-2,,,,,,key=[7.3.13/C-1-2]: [C-1-2] MUST support at least two readings between 0 and 360 degrees (inclusive i.e including 0 and 360 degrees). ,,,Last augmented column
,7.3.13,C-1-3,7.3.13/C-1-3,,,,,,key=[7.3.13/C-1-3]: [C-1-3] MUST return a wakeup sensor for getDefaultSensor(SENSOR_TYPE_HINGE_ANGLE). <h3 id=,https://developer.android.com ,SENSOR_TYPE_HINGE_ANGLE ,Last augmented column
,7.4,,7.4,,,,,,"""7_4_data_connectivity"" data-text=""       7.4. Data Connectivity     "">       7.4. Data Connectivity           7.4. Data Connectivity <h4 id=",,,Last augmented column
,7.4.1,,7.4.1,,,,,,"""7_4_1_telephony"" data-text=""       7.4.1. Telephony     "">       7.4.1. Telephony                 “Telephony” as used by the Android APIs and this document refers specifically to hardware related to placing voice calls and sending SMS messages via a GSM or CDMA network. While these voice calls may or may not be packet-switched  they are for the purposes of Android considered independent of any data connectivity that may be implemented using the same network. In other words  the Android “telephony” functionality and APIs refer specifically to voice calls and SMS. For instance  device implementations that cannot place calls or send/receive SMS messages are not considered a telephony device  regardless of whether they use a cellular network for data connectivity.                 Android MAY be used on devices that do not include telephony hardware. That is  Android is compatible with devices that are not phones.                        If device implementations include GSM or CDMA telephony  they:                 [C-1-1] MUST declare the android.hardware.telephony feature flag and other sub-feature flags according to the technology.              [C-1-2] MUST implement full support for the API for that technology.                        If device implementations do not include telephony hardware  they:                 [C-2-1] MUST implement the full APIs as no-ops.                        If device implementations support eUICCs or eSIMs/embedded SIMs and include a proprietary mechanism to make eSIM functionality available for third-party developers  they:                 [C-3-1] MUST provide a complete implementation of the EuiccManager API.                  7.4.1. Telephony “Telephony” as used by the Android APIs and this document refers specifically to hardware related to placing voice calls and sending SMS messages via a GSM or CDMA network. While these voice calls may or may not be packet-switched  they are for the purposes of Android considered independent of any data connectivity that may be implemented using the same network. In other words  the Android “telephony” functionality and APIs refer specifically to voice calls and SMS. For instance  device implementations that cannot place calls or send/receive SMS messages are not considered a telephony device  regardless of whether they use a cellular network for data connectivity. Android MAY be used on devices that do not include telephony hardware. That is  Android is compatible with devices that are not phones. If device implementations include GSM or CDMA telephony  they: [C-1-1] MUST declare the android.hardware.telephony feature flag and other sub-feature flags according to the technology. [C-1-2] MUST implement full support for the API for that technology. If device implementations do not include telephony hardware  they: [C-2-1] MUST implement the full APIs as no-ops. If device implementations support eUICCs or eSIMs/embedded SIMs and include a proprietary mechanism to make eSIM functionality available for third-party developers  they: [C-3-1] MUST provide a complete implementation of the EuiccManager API. <h5 id=",https://developer.android.com ,android.hardware.telephony ,Last augmented column
,7.4.1,C-1-1,7.4.1/C-1-1,,,,,,key=[7.4.1/C-1-1]: [C-1-1] MUST declare the android.hardware.telephony feature flag and other sub-feature flags according to the technology. ,,android.hardware.telephony ,Last augmented column
,7.4.1,C-1-2,7.4.1/C-1-2,,,,,,key=[7.4.1/C-1-2]: [C-1-2] MUST implement full support for the API for that technology. If device implementations do not include telephony hardware  they: ,,,Last augmented column
,7.4.1,C-2-1,7.4.1/C-2-1,,,,,,key=[7.4.1/C-2-1]: [C-2-1] MUST implement the full APIs as no-ops. If device implementations support eUICCs or eSIMs/embedded SIMs and include a proprietary mechanism to make eSIM functionality available for third-party developers  they: ,,,Last augmented column
,7.4.1,C-3-1,7.4.1/C-3-1,,,,,,key=[7.4.1/C-3-1]: [C-3-1] MUST provide a complete implementation of the EuiccManager API. <h5 id=,https://developer.android.com ,,Last augmented column
